
BLDC_STM32F030R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eae8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800eba8  0800eba8  0000fba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f154  0800f154  00011204  2**0
                  CONTENTS
  4 .ARM          00000000  0800f154  0800f154  00011204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f154  0800f154  00011204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f154  0800f154  00010154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f158  0800f158  00010158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800f15c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  20000204  0800f360  00011204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  0800f360  000118ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00011204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001136b  00000000  00000000  0001122c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c91  00000000  00000000  00022597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00025228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc3  00000000  00000000  00026148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004662  00000000  00000000  00026d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156b5  00000000  00000000  0002b36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c7ae  00000000  00000000  00040a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad1d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d98  00000000  00000000  000ad214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a9  00000000  00000000  000b1fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000204 	.word	0x20000204
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800eb90 	.word	0x0800eb90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000208 	.word	0x20000208
 8000104:	0800eb90 	.word	0x0800eb90

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fb0b 	bl	8001a6c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fa4b 	bl	80018fc <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fafd 	bl	8001a6c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 faf3 	bl	8001a6c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa75 	bl	8001984 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fa6b 	bl	8001984 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_d2uiz>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2200      	movs	r2, #0
 80004c0:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <__aeabi_d2uiz+0x38>)
 80004c2:	0004      	movs	r4, r0
 80004c4:	000d      	movs	r5, r1
 80004c6:	f7ff ffef 	bl	80004a8 <__aeabi_dcmpge>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d104      	bne.n	80004d8 <__aeabi_d2uiz+0x1c>
 80004ce:	0020      	movs	r0, r4
 80004d0:	0029      	movs	r1, r5
 80004d2:	f002 f9c3 	bl	800285c <__aeabi_d2iz>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <__aeabi_d2uiz+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0020      	movs	r0, r4
 80004de:	0029      	movs	r1, r5
 80004e0:	f001 fdfe 	bl	80020e0 <__aeabi_dsub>
 80004e4:	f002 f9ba 	bl	800285c <__aeabi_d2iz>
 80004e8:	2380      	movs	r3, #128	@ 0x80
 80004ea:	061b      	lsls	r3, r3, #24
 80004ec:	469c      	mov	ip, r3
 80004ee:	4460      	add	r0, ip
 80004f0:	e7f1      	b.n	80004d6 <__aeabi_d2uiz+0x1a>
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	41e00000 	.word	0x41e00000

080004f8 <__aeabi_d2lz>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	2200      	movs	r2, #0
 80004fc:	2300      	movs	r3, #0
 80004fe:	0004      	movs	r4, r0
 8000500:	000d      	movs	r5, r1
 8000502:	f7ff ffb3 	bl	800046c <__aeabi_dcmplt>
 8000506:	2800      	cmp	r0, #0
 8000508:	d108      	bne.n	800051c <__aeabi_d2lz+0x24>
 800050a:	0020      	movs	r0, r4
 800050c:	0029      	movs	r1, r5
 800050e:	f000 f80f 	bl	8000530 <__aeabi_d2ulz>
 8000512:	0002      	movs	r2, r0
 8000514:	000b      	movs	r3, r1
 8000516:	0010      	movs	r0, r2
 8000518:	0019      	movs	r1, r3
 800051a:	bd70      	pop	{r4, r5, r6, pc}
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	061b      	lsls	r3, r3, #24
 8000520:	18e9      	adds	r1, r5, r3
 8000522:	0020      	movs	r0, r4
 8000524:	f000 f804 	bl	8000530 <__aeabi_d2ulz>
 8000528:	2300      	movs	r3, #0
 800052a:	4242      	negs	r2, r0
 800052c:	418b      	sbcs	r3, r1
 800052e:	e7f2      	b.n	8000516 <__aeabi_d2lz+0x1e>

08000530 <__aeabi_d2ulz>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	2200      	movs	r2, #0
 8000534:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <__aeabi_d2ulz+0x34>)
 8000536:	000d      	movs	r5, r1
 8000538:	0004      	movs	r4, r0
 800053a:	f001 fb09 	bl	8001b50 <__aeabi_dmul>
 800053e:	f7ff ffbd 	bl	80004bc <__aeabi_d2uiz>
 8000542:	0006      	movs	r6, r0
 8000544:	f002 f9f4 	bl	8002930 <__aeabi_ui2d>
 8000548:	2200      	movs	r2, #0
 800054a:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <__aeabi_d2ulz+0x38>)
 800054c:	f001 fb00 	bl	8001b50 <__aeabi_dmul>
 8000550:	0002      	movs	r2, r0
 8000552:	000b      	movs	r3, r1
 8000554:	0020      	movs	r0, r4
 8000556:	0029      	movs	r1, r5
 8000558:	f001 fdc2 	bl	80020e0 <__aeabi_dsub>
 800055c:	f7ff ffae 	bl	80004bc <__aeabi_d2uiz>
 8000560:	0031      	movs	r1, r6
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	3df00000 	.word	0x3df00000
 8000568:	41f00000 	.word	0x41f00000

0800056c <__aeabi_l2d>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	0006      	movs	r6, r0
 8000570:	0008      	movs	r0, r1
 8000572:	f002 f9af 	bl	80028d4 <__aeabi_i2d>
 8000576:	2200      	movs	r2, #0
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <__aeabi_l2d+0x28>)
 800057a:	f001 fae9 	bl	8001b50 <__aeabi_dmul>
 800057e:	000d      	movs	r5, r1
 8000580:	0004      	movs	r4, r0
 8000582:	0030      	movs	r0, r6
 8000584:	f002 f9d4 	bl	8002930 <__aeabi_ui2d>
 8000588:	002b      	movs	r3, r5
 800058a:	0022      	movs	r2, r4
 800058c:	f000 fb38 	bl	8000c00 <__aeabi_dadd>
 8000590:	bd70      	pop	{r4, r5, r6, pc}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_fadd>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	46ce      	mov	lr, r9
 800059c:	4647      	mov	r7, r8
 800059e:	0243      	lsls	r3, r0, #9
 80005a0:	0a5a      	lsrs	r2, r3, #9
 80005a2:	024e      	lsls	r6, r1, #9
 80005a4:	0045      	lsls	r5, r0, #1
 80005a6:	0fc4      	lsrs	r4, r0, #31
 80005a8:	0048      	lsls	r0, r1, #1
 80005aa:	4691      	mov	r9, r2
 80005ac:	0e2d      	lsrs	r5, r5, #24
 80005ae:	0a72      	lsrs	r2, r6, #9
 80005b0:	0e00      	lsrs	r0, r0, #24
 80005b2:	4694      	mov	ip, r2
 80005b4:	b580      	push	{r7, lr}
 80005b6:	099b      	lsrs	r3, r3, #6
 80005b8:	0fc9      	lsrs	r1, r1, #31
 80005ba:	09b6      	lsrs	r6, r6, #6
 80005bc:	1a2a      	subs	r2, r5, r0
 80005be:	428c      	cmp	r4, r1
 80005c0:	d021      	beq.n	8000606 <__aeabi_fadd+0x6e>
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	dd0d      	ble.n	80005e2 <__aeabi_fadd+0x4a>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d12d      	bne.n	8000626 <__aeabi_fadd+0x8e>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_fadd+0x38>
 80005ce:	e08d      	b.n	80006ec <__aeabi_fadd+0x154>
 80005d0:	1e51      	subs	r1, r2, #1
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x40>
 80005d6:	e11d      	b.n	8000814 <__aeabi_fadd+0x27c>
 80005d8:	2aff      	cmp	r2, #255	@ 0xff
 80005da:	d100      	bne.n	80005de <__aeabi_fadd+0x46>
 80005dc:	e0ab      	b.n	8000736 <__aeabi_fadd+0x19e>
 80005de:	000a      	movs	r2, r1
 80005e0:	e027      	b.n	8000632 <__aeabi_fadd+0x9a>
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	d04d      	beq.n	8000682 <__aeabi_fadd+0xea>
 80005e6:	1b42      	subs	r2, r0, r5
 80005e8:	2d00      	cmp	r5, #0
 80005ea:	d000      	beq.n	80005ee <__aeabi_fadd+0x56>
 80005ec:	e0cc      	b.n	8000788 <__aeabi_fadd+0x1f0>
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d100      	bne.n	80005f4 <__aeabi_fadd+0x5c>
 80005f2:	e079      	b.n	80006e8 <__aeabi_fadd+0x150>
 80005f4:	1e54      	subs	r4, r2, #1
 80005f6:	2a01      	cmp	r2, #1
 80005f8:	d100      	bne.n	80005fc <__aeabi_fadd+0x64>
 80005fa:	e128      	b.n	800084e <__aeabi_fadd+0x2b6>
 80005fc:	2aff      	cmp	r2, #255	@ 0xff
 80005fe:	d100      	bne.n	8000602 <__aeabi_fadd+0x6a>
 8000600:	e097      	b.n	8000732 <__aeabi_fadd+0x19a>
 8000602:	0022      	movs	r2, r4
 8000604:	e0c5      	b.n	8000792 <__aeabi_fadd+0x1fa>
 8000606:	2a00      	cmp	r2, #0
 8000608:	dc00      	bgt.n	800060c <__aeabi_fadd+0x74>
 800060a:	e096      	b.n	800073a <__aeabi_fadd+0x1a2>
 800060c:	2800      	cmp	r0, #0
 800060e:	d04f      	beq.n	80006b0 <__aeabi_fadd+0x118>
 8000610:	2dff      	cmp	r5, #255	@ 0xff
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x7e>
 8000614:	e08f      	b.n	8000736 <__aeabi_fadd+0x19e>
 8000616:	2180      	movs	r1, #128	@ 0x80
 8000618:	04c9      	lsls	r1, r1, #19
 800061a:	430e      	orrs	r6, r1
 800061c:	2a1b      	cmp	r2, #27
 800061e:	dd51      	ble.n	80006c4 <__aeabi_fadd+0x12c>
 8000620:	002a      	movs	r2, r5
 8000622:	3301      	adds	r3, #1
 8000624:	e018      	b.n	8000658 <__aeabi_fadd+0xc0>
 8000626:	2dff      	cmp	r5, #255	@ 0xff
 8000628:	d100      	bne.n	800062c <__aeabi_fadd+0x94>
 800062a:	e084      	b.n	8000736 <__aeabi_fadd+0x19e>
 800062c:	2180      	movs	r1, #128	@ 0x80
 800062e:	04c9      	lsls	r1, r1, #19
 8000630:	430e      	orrs	r6, r1
 8000632:	2101      	movs	r1, #1
 8000634:	2a1b      	cmp	r2, #27
 8000636:	dc08      	bgt.n	800064a <__aeabi_fadd+0xb2>
 8000638:	0031      	movs	r1, r6
 800063a:	2020      	movs	r0, #32
 800063c:	40d1      	lsrs	r1, r2
 800063e:	1a82      	subs	r2, r0, r2
 8000640:	4096      	lsls	r6, r2
 8000642:	0032      	movs	r2, r6
 8000644:	1e50      	subs	r0, r2, #1
 8000646:	4182      	sbcs	r2, r0
 8000648:	4311      	orrs	r1, r2
 800064a:	1a5b      	subs	r3, r3, r1
 800064c:	015a      	lsls	r2, r3, #5
 800064e:	d459      	bmi.n	8000704 <__aeabi_fadd+0x16c>
 8000650:	2107      	movs	r1, #7
 8000652:	002a      	movs	r2, r5
 8000654:	4019      	ands	r1, r3
 8000656:	d049      	beq.n	80006ec <__aeabi_fadd+0x154>
 8000658:	210f      	movs	r1, #15
 800065a:	4019      	ands	r1, r3
 800065c:	2904      	cmp	r1, #4
 800065e:	d000      	beq.n	8000662 <__aeabi_fadd+0xca>
 8000660:	3304      	adds	r3, #4
 8000662:	0159      	lsls	r1, r3, #5
 8000664:	d542      	bpl.n	80006ec <__aeabi_fadd+0x154>
 8000666:	1c50      	adds	r0, r2, #1
 8000668:	2afe      	cmp	r2, #254	@ 0xfe
 800066a:	d03a      	beq.n	80006e2 <__aeabi_fadd+0x14a>
 800066c:	019b      	lsls	r3, r3, #6
 800066e:	b2c0      	uxtb	r0, r0
 8000670:	0a5b      	lsrs	r3, r3, #9
 8000672:	05c0      	lsls	r0, r0, #23
 8000674:	4318      	orrs	r0, r3
 8000676:	07e4      	lsls	r4, r4, #31
 8000678:	4320      	orrs	r0, r4
 800067a:	bcc0      	pop	{r6, r7}
 800067c:	46b9      	mov	r9, r7
 800067e:	46b0      	mov	r8, r6
 8000680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000682:	20fe      	movs	r0, #254	@ 0xfe
 8000684:	4680      	mov	r8, r0
 8000686:	1c6f      	adds	r7, r5, #1
 8000688:	0038      	movs	r0, r7
 800068a:	4647      	mov	r7, r8
 800068c:	4207      	tst	r7, r0
 800068e:	d000      	beq.n	8000692 <__aeabi_fadd+0xfa>
 8000690:	e08e      	b.n	80007b0 <__aeabi_fadd+0x218>
 8000692:	2d00      	cmp	r5, #0
 8000694:	d000      	beq.n	8000698 <__aeabi_fadd+0x100>
 8000696:	e0b4      	b.n	8000802 <__aeabi_fadd+0x26a>
 8000698:	2b00      	cmp	r3, #0
 800069a:	d100      	bne.n	800069e <__aeabi_fadd+0x106>
 800069c:	e0db      	b.n	8000856 <__aeabi_fadd+0x2be>
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d06c      	beq.n	800077c <__aeabi_fadd+0x1e4>
 80006a2:	1b98      	subs	r0, r3, r6
 80006a4:	0145      	lsls	r5, r0, #5
 80006a6:	d400      	bmi.n	80006aa <__aeabi_fadd+0x112>
 80006a8:	e0f7      	b.n	800089a <__aeabi_fadd+0x302>
 80006aa:	000c      	movs	r4, r1
 80006ac:	1af3      	subs	r3, r6, r3
 80006ae:	e03d      	b.n	800072c <__aeabi_fadd+0x194>
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d01b      	beq.n	80006ec <__aeabi_fadd+0x154>
 80006b4:	1e51      	subs	r1, r2, #1
 80006b6:	2a01      	cmp	r2, #1
 80006b8:	d100      	bne.n	80006bc <__aeabi_fadd+0x124>
 80006ba:	e082      	b.n	80007c2 <__aeabi_fadd+0x22a>
 80006bc:	2aff      	cmp	r2, #255	@ 0xff
 80006be:	d03a      	beq.n	8000736 <__aeabi_fadd+0x19e>
 80006c0:	000a      	movs	r2, r1
 80006c2:	e7ab      	b.n	800061c <__aeabi_fadd+0x84>
 80006c4:	0031      	movs	r1, r6
 80006c6:	2020      	movs	r0, #32
 80006c8:	40d1      	lsrs	r1, r2
 80006ca:	1a82      	subs	r2, r0, r2
 80006cc:	4096      	lsls	r6, r2
 80006ce:	0032      	movs	r2, r6
 80006d0:	1e50      	subs	r0, r2, #1
 80006d2:	4182      	sbcs	r2, r0
 80006d4:	430a      	orrs	r2, r1
 80006d6:	189b      	adds	r3, r3, r2
 80006d8:	015a      	lsls	r2, r3, #5
 80006da:	d5b9      	bpl.n	8000650 <__aeabi_fadd+0xb8>
 80006dc:	1c6a      	adds	r2, r5, #1
 80006de:	2dfe      	cmp	r5, #254	@ 0xfe
 80006e0:	d175      	bne.n	80007ce <__aeabi_fadd+0x236>
 80006e2:	20ff      	movs	r0, #255	@ 0xff
 80006e4:	2300      	movs	r3, #0
 80006e6:	e7c4      	b.n	8000672 <__aeabi_fadd+0xda>
 80006e8:	000c      	movs	r4, r1
 80006ea:	0033      	movs	r3, r6
 80006ec:	08db      	lsrs	r3, r3, #3
 80006ee:	2aff      	cmp	r2, #255	@ 0xff
 80006f0:	d146      	bne.n	8000780 <__aeabi_fadd+0x1e8>
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f5      	beq.n	80006e2 <__aeabi_fadd+0x14a>
 80006f6:	2280      	movs	r2, #128	@ 0x80
 80006f8:	03d2      	lsls	r2, r2, #15
 80006fa:	4313      	orrs	r3, r2
 80006fc:	025b      	lsls	r3, r3, #9
 80006fe:	20ff      	movs	r0, #255	@ 0xff
 8000700:	0a5b      	lsrs	r3, r3, #9
 8000702:	e7b6      	b.n	8000672 <__aeabi_fadd+0xda>
 8000704:	019f      	lsls	r7, r3, #6
 8000706:	09bf      	lsrs	r7, r7, #6
 8000708:	0038      	movs	r0, r7
 800070a:	f002 fa01 	bl	8002b10 <__clzsi2>
 800070e:	3805      	subs	r0, #5
 8000710:	4087      	lsls	r7, r0
 8000712:	4285      	cmp	r5, r0
 8000714:	dc24      	bgt.n	8000760 <__aeabi_fadd+0x1c8>
 8000716:	003b      	movs	r3, r7
 8000718:	2120      	movs	r1, #32
 800071a:	1b42      	subs	r2, r0, r5
 800071c:	3201      	adds	r2, #1
 800071e:	40d3      	lsrs	r3, r2
 8000720:	1a8a      	subs	r2, r1, r2
 8000722:	4097      	lsls	r7, r2
 8000724:	1e7a      	subs	r2, r7, #1
 8000726:	4197      	sbcs	r7, r2
 8000728:	2200      	movs	r2, #0
 800072a:	433b      	orrs	r3, r7
 800072c:	0759      	lsls	r1, r3, #29
 800072e:	d193      	bne.n	8000658 <__aeabi_fadd+0xc0>
 8000730:	e797      	b.n	8000662 <__aeabi_fadd+0xca>
 8000732:	000c      	movs	r4, r1
 8000734:	0033      	movs	r3, r6
 8000736:	08db      	lsrs	r3, r3, #3
 8000738:	e7db      	b.n	80006f2 <__aeabi_fadd+0x15a>
 800073a:	2a00      	cmp	r2, #0
 800073c:	d014      	beq.n	8000768 <__aeabi_fadd+0x1d0>
 800073e:	1b42      	subs	r2, r0, r5
 8000740:	2d00      	cmp	r5, #0
 8000742:	d14b      	bne.n	80007dc <__aeabi_fadd+0x244>
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0d0      	beq.n	80006ea <__aeabi_fadd+0x152>
 8000748:	1e51      	subs	r1, r2, #1
 800074a:	2a01      	cmp	r2, #1
 800074c:	d100      	bne.n	8000750 <__aeabi_fadd+0x1b8>
 800074e:	e09e      	b.n	800088e <__aeabi_fadd+0x2f6>
 8000750:	2aff      	cmp	r2, #255	@ 0xff
 8000752:	d0ef      	beq.n	8000734 <__aeabi_fadd+0x19c>
 8000754:	000a      	movs	r2, r1
 8000756:	2a1b      	cmp	r2, #27
 8000758:	dd5f      	ble.n	800081a <__aeabi_fadd+0x282>
 800075a:	0002      	movs	r2, r0
 800075c:	1c73      	adds	r3, r6, #1
 800075e:	e77b      	b.n	8000658 <__aeabi_fadd+0xc0>
 8000760:	4b50      	ldr	r3, [pc, #320]	@ (80008a4 <__aeabi_fadd+0x30c>)
 8000762:	1a2a      	subs	r2, r5, r0
 8000764:	403b      	ands	r3, r7
 8000766:	e7e1      	b.n	800072c <__aeabi_fadd+0x194>
 8000768:	21fe      	movs	r1, #254	@ 0xfe
 800076a:	1c6a      	adds	r2, r5, #1
 800076c:	4211      	tst	r1, r2
 800076e:	d13b      	bne.n	80007e8 <__aeabi_fadd+0x250>
 8000770:	2d00      	cmp	r5, #0
 8000772:	d15d      	bne.n	8000830 <__aeabi_fadd+0x298>
 8000774:	2b00      	cmp	r3, #0
 8000776:	d07f      	beq.n	8000878 <__aeabi_fadd+0x2e0>
 8000778:	2e00      	cmp	r6, #0
 800077a:	d17f      	bne.n	800087c <__aeabi_fadd+0x2e4>
 800077c:	2200      	movs	r2, #0
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	025b      	lsls	r3, r3, #9
 8000782:	0a5b      	lsrs	r3, r3, #9
 8000784:	b2d0      	uxtb	r0, r2
 8000786:	e774      	b.n	8000672 <__aeabi_fadd+0xda>
 8000788:	28ff      	cmp	r0, #255	@ 0xff
 800078a:	d0d2      	beq.n	8000732 <__aeabi_fadd+0x19a>
 800078c:	2480      	movs	r4, #128	@ 0x80
 800078e:	04e4      	lsls	r4, r4, #19
 8000790:	4323      	orrs	r3, r4
 8000792:	2401      	movs	r4, #1
 8000794:	2a1b      	cmp	r2, #27
 8000796:	dc07      	bgt.n	80007a8 <__aeabi_fadd+0x210>
 8000798:	001c      	movs	r4, r3
 800079a:	2520      	movs	r5, #32
 800079c:	40d4      	lsrs	r4, r2
 800079e:	1aaa      	subs	r2, r5, r2
 80007a0:	4093      	lsls	r3, r2
 80007a2:	1e5a      	subs	r2, r3, #1
 80007a4:	4193      	sbcs	r3, r2
 80007a6:	431c      	orrs	r4, r3
 80007a8:	1b33      	subs	r3, r6, r4
 80007aa:	0005      	movs	r5, r0
 80007ac:	000c      	movs	r4, r1
 80007ae:	e74d      	b.n	800064c <__aeabi_fadd+0xb4>
 80007b0:	1b9f      	subs	r7, r3, r6
 80007b2:	017a      	lsls	r2, r7, #5
 80007b4:	d422      	bmi.n	80007fc <__aeabi_fadd+0x264>
 80007b6:	2f00      	cmp	r7, #0
 80007b8:	d1a6      	bne.n	8000708 <__aeabi_fadd+0x170>
 80007ba:	2400      	movs	r4, #0
 80007bc:	2000      	movs	r0, #0
 80007be:	2300      	movs	r3, #0
 80007c0:	e757      	b.n	8000672 <__aeabi_fadd+0xda>
 80007c2:	199b      	adds	r3, r3, r6
 80007c4:	2501      	movs	r5, #1
 80007c6:	3201      	adds	r2, #1
 80007c8:	0159      	lsls	r1, r3, #5
 80007ca:	d400      	bmi.n	80007ce <__aeabi_fadd+0x236>
 80007cc:	e740      	b.n	8000650 <__aeabi_fadd+0xb8>
 80007ce:	2101      	movs	r1, #1
 80007d0:	4835      	ldr	r0, [pc, #212]	@ (80008a8 <__aeabi_fadd+0x310>)
 80007d2:	4019      	ands	r1, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	4003      	ands	r3, r0
 80007d8:	430b      	orrs	r3, r1
 80007da:	e7a7      	b.n	800072c <__aeabi_fadd+0x194>
 80007dc:	28ff      	cmp	r0, #255	@ 0xff
 80007de:	d0a9      	beq.n	8000734 <__aeabi_fadd+0x19c>
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	04c9      	lsls	r1, r1, #19
 80007e4:	430b      	orrs	r3, r1
 80007e6:	e7b6      	b.n	8000756 <__aeabi_fadd+0x1be>
 80007e8:	2aff      	cmp	r2, #255	@ 0xff
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x256>
 80007ec:	e779      	b.n	80006e2 <__aeabi_fadd+0x14a>
 80007ee:	199b      	adds	r3, r3, r6
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	0759      	lsls	r1, r3, #29
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fadd+0x260>
 80007f6:	e72f      	b.n	8000658 <__aeabi_fadd+0xc0>
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	e7c1      	b.n	8000780 <__aeabi_fadd+0x1e8>
 80007fc:	000c      	movs	r4, r1
 80007fe:	1af7      	subs	r7, r6, r3
 8000800:	e782      	b.n	8000708 <__aeabi_fadd+0x170>
 8000802:	2b00      	cmp	r3, #0
 8000804:	d12c      	bne.n	8000860 <__aeabi_fadd+0x2c8>
 8000806:	2e00      	cmp	r6, #0
 8000808:	d193      	bne.n	8000732 <__aeabi_fadd+0x19a>
 800080a:	2380      	movs	r3, #128	@ 0x80
 800080c:	2400      	movs	r4, #0
 800080e:	20ff      	movs	r0, #255	@ 0xff
 8000810:	03db      	lsls	r3, r3, #15
 8000812:	e72e      	b.n	8000672 <__aeabi_fadd+0xda>
 8000814:	2501      	movs	r5, #1
 8000816:	1b9b      	subs	r3, r3, r6
 8000818:	e718      	b.n	800064c <__aeabi_fadd+0xb4>
 800081a:	0019      	movs	r1, r3
 800081c:	2520      	movs	r5, #32
 800081e:	40d1      	lsrs	r1, r2
 8000820:	1aaa      	subs	r2, r5, r2
 8000822:	4093      	lsls	r3, r2
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	4193      	sbcs	r3, r2
 8000828:	430b      	orrs	r3, r1
 800082a:	0005      	movs	r5, r0
 800082c:	199b      	adds	r3, r3, r6
 800082e:	e753      	b.n	80006d8 <__aeabi_fadd+0x140>
 8000830:	2b00      	cmp	r3, #0
 8000832:	d100      	bne.n	8000836 <__aeabi_fadd+0x29e>
 8000834:	e77e      	b.n	8000734 <__aeabi_fadd+0x19c>
 8000836:	2e00      	cmp	r6, #0
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x2a4>
 800083a:	e77c      	b.n	8000736 <__aeabi_fadd+0x19e>
 800083c:	2280      	movs	r2, #128	@ 0x80
 800083e:	03d2      	lsls	r2, r2, #15
 8000840:	4591      	cmp	r9, r2
 8000842:	d302      	bcc.n	800084a <__aeabi_fadd+0x2b2>
 8000844:	4594      	cmp	ip, r2
 8000846:	d200      	bcs.n	800084a <__aeabi_fadd+0x2b2>
 8000848:	0033      	movs	r3, r6
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	e753      	b.n	80006f6 <__aeabi_fadd+0x15e>
 800084e:	000c      	movs	r4, r1
 8000850:	1af3      	subs	r3, r6, r3
 8000852:	3501      	adds	r5, #1
 8000854:	e6fa      	b.n	800064c <__aeabi_fadd+0xb4>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d0af      	beq.n	80007ba <__aeabi_fadd+0x222>
 800085a:	000c      	movs	r4, r1
 800085c:	0033      	movs	r3, r6
 800085e:	e78d      	b.n	800077c <__aeabi_fadd+0x1e4>
 8000860:	2e00      	cmp	r6, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_fadd+0x2ce>
 8000864:	e767      	b.n	8000736 <__aeabi_fadd+0x19e>
 8000866:	2280      	movs	r2, #128	@ 0x80
 8000868:	03d2      	lsls	r2, r2, #15
 800086a:	4591      	cmp	r9, r2
 800086c:	d3ed      	bcc.n	800084a <__aeabi_fadd+0x2b2>
 800086e:	4594      	cmp	ip, r2
 8000870:	d2eb      	bcs.n	800084a <__aeabi_fadd+0x2b2>
 8000872:	000c      	movs	r4, r1
 8000874:	0033      	movs	r3, r6
 8000876:	e7e8      	b.n	800084a <__aeabi_fadd+0x2b2>
 8000878:	0033      	movs	r3, r6
 800087a:	e77f      	b.n	800077c <__aeabi_fadd+0x1e4>
 800087c:	199b      	adds	r3, r3, r6
 800087e:	2200      	movs	r2, #0
 8000880:	0159      	lsls	r1, r3, #5
 8000882:	d5b9      	bpl.n	80007f8 <__aeabi_fadd+0x260>
 8000884:	4a07      	ldr	r2, [pc, #28]	@ (80008a4 <__aeabi_fadd+0x30c>)
 8000886:	4013      	ands	r3, r2
 8000888:	08db      	lsrs	r3, r3, #3
 800088a:	2201      	movs	r2, #1
 800088c:	e778      	b.n	8000780 <__aeabi_fadd+0x1e8>
 800088e:	199b      	adds	r3, r3, r6
 8000890:	3201      	adds	r2, #1
 8000892:	3501      	adds	r5, #1
 8000894:	0159      	lsls	r1, r3, #5
 8000896:	d49a      	bmi.n	80007ce <__aeabi_fadd+0x236>
 8000898:	e6da      	b.n	8000650 <__aeabi_fadd+0xb8>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d08d      	beq.n	80007ba <__aeabi_fadd+0x222>
 800089e:	08db      	lsrs	r3, r3, #3
 80008a0:	e76e      	b.n	8000780 <__aeabi_fadd+0x1e8>
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	fbffffff 	.word	0xfbffffff
 80008a8:	7dffffff 	.word	0x7dffffff

080008ac <__aeabi_fmul>:
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ae:	464f      	mov	r7, r9
 80008b0:	4646      	mov	r6, r8
 80008b2:	46d6      	mov	lr, sl
 80008b4:	0243      	lsls	r3, r0, #9
 80008b6:	0a5b      	lsrs	r3, r3, #9
 80008b8:	0045      	lsls	r5, r0, #1
 80008ba:	b5c0      	push	{r6, r7, lr}
 80008bc:	4699      	mov	r9, r3
 80008be:	1c0f      	adds	r7, r1, #0
 80008c0:	0e2d      	lsrs	r5, r5, #24
 80008c2:	0fc6      	lsrs	r6, r0, #31
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d100      	bne.n	80008ca <__aeabi_fmul+0x1e>
 80008c8:	e088      	b.n	80009dc <__aeabi_fmul+0x130>
 80008ca:	2dff      	cmp	r5, #255	@ 0xff
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fmul+0x24>
 80008ce:	e08d      	b.n	80009ec <__aeabi_fmul+0x140>
 80008d0:	2280      	movs	r2, #128	@ 0x80
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	04d2      	lsls	r2, r2, #19
 80008d6:	431a      	orrs	r2, r3
 80008d8:	2300      	movs	r3, #0
 80008da:	4691      	mov	r9, r2
 80008dc:	4698      	mov	r8, r3
 80008de:	469a      	mov	sl, r3
 80008e0:	3d7f      	subs	r5, #127	@ 0x7f
 80008e2:	027c      	lsls	r4, r7, #9
 80008e4:	007b      	lsls	r3, r7, #1
 80008e6:	0a64      	lsrs	r4, r4, #9
 80008e8:	0e1b      	lsrs	r3, r3, #24
 80008ea:	0fff      	lsrs	r7, r7, #31
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d068      	beq.n	80009c2 <__aeabi_fmul+0x116>
 80008f0:	2bff      	cmp	r3, #255	@ 0xff
 80008f2:	d021      	beq.n	8000938 <__aeabi_fmul+0x8c>
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	00e4      	lsls	r4, r4, #3
 80008f8:	04d2      	lsls	r2, r2, #19
 80008fa:	4314      	orrs	r4, r2
 80008fc:	4642      	mov	r2, r8
 80008fe:	3b7f      	subs	r3, #127	@ 0x7f
 8000900:	195b      	adds	r3, r3, r5
 8000902:	2100      	movs	r1, #0
 8000904:	1c5d      	adds	r5, r3, #1
 8000906:	2a0a      	cmp	r2, #10
 8000908:	dc2e      	bgt.n	8000968 <__aeabi_fmul+0xbc>
 800090a:	407e      	eors	r6, r7
 800090c:	4642      	mov	r2, r8
 800090e:	2a02      	cmp	r2, #2
 8000910:	dc23      	bgt.n	800095a <__aeabi_fmul+0xae>
 8000912:	3a01      	subs	r2, #1
 8000914:	2a01      	cmp	r2, #1
 8000916:	d900      	bls.n	800091a <__aeabi_fmul+0x6e>
 8000918:	e0bd      	b.n	8000a96 <__aeabi_fmul+0x1ea>
 800091a:	2902      	cmp	r1, #2
 800091c:	d06e      	beq.n	80009fc <__aeabi_fmul+0x150>
 800091e:	2901      	cmp	r1, #1
 8000920:	d12c      	bne.n	800097c <__aeabi_fmul+0xd0>
 8000922:	2000      	movs	r0, #0
 8000924:	2200      	movs	r2, #0
 8000926:	05c0      	lsls	r0, r0, #23
 8000928:	07f6      	lsls	r6, r6, #31
 800092a:	4310      	orrs	r0, r2
 800092c:	4330      	orrs	r0, r6
 800092e:	bce0      	pop	{r5, r6, r7}
 8000930:	46ba      	mov	sl, r7
 8000932:	46b1      	mov	r9, r6
 8000934:	46a8      	mov	r8, r5
 8000936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000938:	002b      	movs	r3, r5
 800093a:	33ff      	adds	r3, #255	@ 0xff
 800093c:	2c00      	cmp	r4, #0
 800093e:	d065      	beq.n	8000a0c <__aeabi_fmul+0x160>
 8000940:	2203      	movs	r2, #3
 8000942:	4641      	mov	r1, r8
 8000944:	4311      	orrs	r1, r2
 8000946:	0032      	movs	r2, r6
 8000948:	3501      	adds	r5, #1
 800094a:	4688      	mov	r8, r1
 800094c:	407a      	eors	r2, r7
 800094e:	35ff      	adds	r5, #255	@ 0xff
 8000950:	290a      	cmp	r1, #10
 8000952:	dd00      	ble.n	8000956 <__aeabi_fmul+0xaa>
 8000954:	e0d8      	b.n	8000b08 <__aeabi_fmul+0x25c>
 8000956:	0016      	movs	r6, r2
 8000958:	2103      	movs	r1, #3
 800095a:	4640      	mov	r0, r8
 800095c:	2201      	movs	r2, #1
 800095e:	4082      	lsls	r2, r0
 8000960:	20a6      	movs	r0, #166	@ 0xa6
 8000962:	00c0      	lsls	r0, r0, #3
 8000964:	4202      	tst	r2, r0
 8000966:	d020      	beq.n	80009aa <__aeabi_fmul+0xfe>
 8000968:	4653      	mov	r3, sl
 800096a:	2b02      	cmp	r3, #2
 800096c:	d046      	beq.n	80009fc <__aeabi_fmul+0x150>
 800096e:	2b03      	cmp	r3, #3
 8000970:	d100      	bne.n	8000974 <__aeabi_fmul+0xc8>
 8000972:	e0bb      	b.n	8000aec <__aeabi_fmul+0x240>
 8000974:	4651      	mov	r1, sl
 8000976:	464c      	mov	r4, r9
 8000978:	2901      	cmp	r1, #1
 800097a:	d0d2      	beq.n	8000922 <__aeabi_fmul+0x76>
 800097c:	002b      	movs	r3, r5
 800097e:	337f      	adds	r3, #127	@ 0x7f
 8000980:	2b00      	cmp	r3, #0
 8000982:	dd70      	ble.n	8000a66 <__aeabi_fmul+0x1ba>
 8000984:	0762      	lsls	r2, r4, #29
 8000986:	d004      	beq.n	8000992 <__aeabi_fmul+0xe6>
 8000988:	220f      	movs	r2, #15
 800098a:	4022      	ands	r2, r4
 800098c:	2a04      	cmp	r2, #4
 800098e:	d000      	beq.n	8000992 <__aeabi_fmul+0xe6>
 8000990:	3404      	adds	r4, #4
 8000992:	0122      	lsls	r2, r4, #4
 8000994:	d503      	bpl.n	800099e <__aeabi_fmul+0xf2>
 8000996:	4b63      	ldr	r3, [pc, #396]	@ (8000b24 <__aeabi_fmul+0x278>)
 8000998:	401c      	ands	r4, r3
 800099a:	002b      	movs	r3, r5
 800099c:	3380      	adds	r3, #128	@ 0x80
 800099e:	2bfe      	cmp	r3, #254	@ 0xfe
 80009a0:	dc2c      	bgt.n	80009fc <__aeabi_fmul+0x150>
 80009a2:	01a2      	lsls	r2, r4, #6
 80009a4:	0a52      	lsrs	r2, r2, #9
 80009a6:	b2d8      	uxtb	r0, r3
 80009a8:	e7bd      	b.n	8000926 <__aeabi_fmul+0x7a>
 80009aa:	2090      	movs	r0, #144	@ 0x90
 80009ac:	0080      	lsls	r0, r0, #2
 80009ae:	4202      	tst	r2, r0
 80009b0:	d127      	bne.n	8000a02 <__aeabi_fmul+0x156>
 80009b2:	38b9      	subs	r0, #185	@ 0xb9
 80009b4:	38ff      	subs	r0, #255	@ 0xff
 80009b6:	4210      	tst	r0, r2
 80009b8:	d06d      	beq.n	8000a96 <__aeabi_fmul+0x1ea>
 80009ba:	003e      	movs	r6, r7
 80009bc:	46a1      	mov	r9, r4
 80009be:	468a      	mov	sl, r1
 80009c0:	e7d2      	b.n	8000968 <__aeabi_fmul+0xbc>
 80009c2:	2c00      	cmp	r4, #0
 80009c4:	d141      	bne.n	8000a4a <__aeabi_fmul+0x19e>
 80009c6:	2301      	movs	r3, #1
 80009c8:	4642      	mov	r2, r8
 80009ca:	431a      	orrs	r2, r3
 80009cc:	4690      	mov	r8, r2
 80009ce:	002b      	movs	r3, r5
 80009d0:	4642      	mov	r2, r8
 80009d2:	2101      	movs	r1, #1
 80009d4:	1c5d      	adds	r5, r3, #1
 80009d6:	2a0a      	cmp	r2, #10
 80009d8:	dd97      	ble.n	800090a <__aeabi_fmul+0x5e>
 80009da:	e7c5      	b.n	8000968 <__aeabi_fmul+0xbc>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d126      	bne.n	8000a2e <__aeabi_fmul+0x182>
 80009e0:	2304      	movs	r3, #4
 80009e2:	4698      	mov	r8, r3
 80009e4:	3b03      	subs	r3, #3
 80009e6:	2500      	movs	r5, #0
 80009e8:	469a      	mov	sl, r3
 80009ea:	e77a      	b.n	80008e2 <__aeabi_fmul+0x36>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d118      	bne.n	8000a22 <__aeabi_fmul+0x176>
 80009f0:	2308      	movs	r3, #8
 80009f2:	4698      	mov	r8, r3
 80009f4:	3b06      	subs	r3, #6
 80009f6:	25ff      	movs	r5, #255	@ 0xff
 80009f8:	469a      	mov	sl, r3
 80009fa:	e772      	b.n	80008e2 <__aeabi_fmul+0x36>
 80009fc:	20ff      	movs	r0, #255	@ 0xff
 80009fe:	2200      	movs	r2, #0
 8000a00:	e791      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	2600      	movs	r6, #0
 8000a06:	20ff      	movs	r0, #255	@ 0xff
 8000a08:	03d2      	lsls	r2, r2, #15
 8000a0a:	e78c      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000a0c:	4641      	mov	r1, r8
 8000a0e:	2202      	movs	r2, #2
 8000a10:	3501      	adds	r5, #1
 8000a12:	4311      	orrs	r1, r2
 8000a14:	4688      	mov	r8, r1
 8000a16:	35ff      	adds	r5, #255	@ 0xff
 8000a18:	290a      	cmp	r1, #10
 8000a1a:	dca5      	bgt.n	8000968 <__aeabi_fmul+0xbc>
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	407e      	eors	r6, r7
 8000a20:	e774      	b.n	800090c <__aeabi_fmul+0x60>
 8000a22:	230c      	movs	r3, #12
 8000a24:	4698      	mov	r8, r3
 8000a26:	3b09      	subs	r3, #9
 8000a28:	25ff      	movs	r5, #255	@ 0xff
 8000a2a:	469a      	mov	sl, r3
 8000a2c:	e759      	b.n	80008e2 <__aeabi_fmul+0x36>
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f002 f86e 	bl	8002b10 <__clzsi2>
 8000a34:	464a      	mov	r2, r9
 8000a36:	1f43      	subs	r3, r0, #5
 8000a38:	2576      	movs	r5, #118	@ 0x76
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	426d      	negs	r5, r5
 8000a40:	4691      	mov	r9, r2
 8000a42:	4698      	mov	r8, r3
 8000a44:	469a      	mov	sl, r3
 8000a46:	1a2d      	subs	r5, r5, r0
 8000a48:	e74b      	b.n	80008e2 <__aeabi_fmul+0x36>
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	f002 f860 	bl	8002b10 <__clzsi2>
 8000a50:	4642      	mov	r2, r8
 8000a52:	1f43      	subs	r3, r0, #5
 8000a54:	409c      	lsls	r4, r3
 8000a56:	1a2b      	subs	r3, r5, r0
 8000a58:	3b76      	subs	r3, #118	@ 0x76
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	1c5d      	adds	r5, r3, #1
 8000a5e:	2a0a      	cmp	r2, #10
 8000a60:	dc00      	bgt.n	8000a64 <__aeabi_fmul+0x1b8>
 8000a62:	e752      	b.n	800090a <__aeabi_fmul+0x5e>
 8000a64:	e780      	b.n	8000968 <__aeabi_fmul+0xbc>
 8000a66:	2201      	movs	r2, #1
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	2b1b      	cmp	r3, #27
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_fmul+0x1c4>
 8000a6e:	e758      	b.n	8000922 <__aeabi_fmul+0x76>
 8000a70:	359e      	adds	r5, #158	@ 0x9e
 8000a72:	0022      	movs	r2, r4
 8000a74:	40ac      	lsls	r4, r5
 8000a76:	40da      	lsrs	r2, r3
 8000a78:	1e63      	subs	r3, r4, #1
 8000a7a:	419c      	sbcs	r4, r3
 8000a7c:	4322      	orrs	r2, r4
 8000a7e:	0753      	lsls	r3, r2, #29
 8000a80:	d004      	beq.n	8000a8c <__aeabi_fmul+0x1e0>
 8000a82:	230f      	movs	r3, #15
 8000a84:	4013      	ands	r3, r2
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d000      	beq.n	8000a8c <__aeabi_fmul+0x1e0>
 8000a8a:	3204      	adds	r2, #4
 8000a8c:	0153      	lsls	r3, r2, #5
 8000a8e:	d537      	bpl.n	8000b00 <__aeabi_fmul+0x254>
 8000a90:	2001      	movs	r0, #1
 8000a92:	2200      	movs	r2, #0
 8000a94:	e747      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	464a      	mov	r2, r9
 8000a9a:	0424      	lsls	r4, r4, #16
 8000a9c:	0c24      	lsrs	r4, r4, #16
 8000a9e:	0027      	movs	r7, r4
 8000aa0:	0c10      	lsrs	r0, r2, #16
 8000aa2:	0412      	lsls	r2, r2, #16
 8000aa4:	0c12      	lsrs	r2, r2, #16
 8000aa6:	4344      	muls	r4, r0
 8000aa8:	4357      	muls	r7, r2
 8000aaa:	4348      	muls	r0, r1
 8000aac:	4351      	muls	r1, r2
 8000aae:	0c3a      	lsrs	r2, r7, #16
 8000ab0:	1909      	adds	r1, r1, r4
 8000ab2:	1852      	adds	r2, r2, r1
 8000ab4:	4294      	cmp	r4, r2
 8000ab6:	d903      	bls.n	8000ac0 <__aeabi_fmul+0x214>
 8000ab8:	2180      	movs	r1, #128	@ 0x80
 8000aba:	0249      	lsls	r1, r1, #9
 8000abc:	468c      	mov	ip, r1
 8000abe:	4460      	add	r0, ip
 8000ac0:	043f      	lsls	r7, r7, #16
 8000ac2:	0411      	lsls	r1, r2, #16
 8000ac4:	0c3f      	lsrs	r7, r7, #16
 8000ac6:	19c9      	adds	r1, r1, r7
 8000ac8:	018c      	lsls	r4, r1, #6
 8000aca:	1e67      	subs	r7, r4, #1
 8000acc:	41bc      	sbcs	r4, r7
 8000ace:	0c12      	lsrs	r2, r2, #16
 8000ad0:	0e89      	lsrs	r1, r1, #26
 8000ad2:	1812      	adds	r2, r2, r0
 8000ad4:	430c      	orrs	r4, r1
 8000ad6:	0192      	lsls	r2, r2, #6
 8000ad8:	4314      	orrs	r4, r2
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	d50e      	bpl.n	8000afc <__aeabi_fmul+0x250>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	0862      	lsrs	r2, r4, #1
 8000ae2:	401c      	ands	r4, r3
 8000ae4:	4314      	orrs	r4, r2
 8000ae6:	e749      	b.n	800097c <__aeabi_fmul+0xd0>
 8000ae8:	003e      	movs	r6, r7
 8000aea:	46a1      	mov	r9, r4
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	464b      	mov	r3, r9
 8000af0:	03d2      	lsls	r2, r2, #15
 8000af2:	431a      	orrs	r2, r3
 8000af4:	0252      	lsls	r2, r2, #9
 8000af6:	20ff      	movs	r0, #255	@ 0xff
 8000af8:	0a52      	lsrs	r2, r2, #9
 8000afa:	e714      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000afc:	001d      	movs	r5, r3
 8000afe:	e73d      	b.n	800097c <__aeabi_fmul+0xd0>
 8000b00:	0192      	lsls	r2, r2, #6
 8000b02:	2000      	movs	r0, #0
 8000b04:	0a52      	lsrs	r2, r2, #9
 8000b06:	e70e      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000b08:	290f      	cmp	r1, #15
 8000b0a:	d1ed      	bne.n	8000ae8 <__aeabi_fmul+0x23c>
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	464b      	mov	r3, r9
 8000b10:	03d2      	lsls	r2, r2, #15
 8000b12:	4213      	tst	r3, r2
 8000b14:	d0ea      	beq.n	8000aec <__aeabi_fmul+0x240>
 8000b16:	4214      	tst	r4, r2
 8000b18:	d1e8      	bne.n	8000aec <__aeabi_fmul+0x240>
 8000b1a:	003e      	movs	r6, r7
 8000b1c:	20ff      	movs	r0, #255	@ 0xff
 8000b1e:	4322      	orrs	r2, r4
 8000b20:	e701      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	f7ffffff 	.word	0xf7ffffff

08000b28 <__aeabi_f2iz>:
 8000b28:	0241      	lsls	r1, r0, #9
 8000b2a:	0042      	lsls	r2, r0, #1
 8000b2c:	0fc3      	lsrs	r3, r0, #31
 8000b2e:	0a49      	lsrs	r1, r1, #9
 8000b30:	2000      	movs	r0, #0
 8000b32:	0e12      	lsrs	r2, r2, #24
 8000b34:	2a7e      	cmp	r2, #126	@ 0x7e
 8000b36:	dd03      	ble.n	8000b40 <__aeabi_f2iz+0x18>
 8000b38:	2a9d      	cmp	r2, #157	@ 0x9d
 8000b3a:	dd02      	ble.n	8000b42 <__aeabi_f2iz+0x1a>
 8000b3c:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <__aeabi_f2iz+0x3c>)
 8000b3e:	1898      	adds	r0, r3, r2
 8000b40:	4770      	bx	lr
 8000b42:	2080      	movs	r0, #128	@ 0x80
 8000b44:	0400      	lsls	r0, r0, #16
 8000b46:	4301      	orrs	r1, r0
 8000b48:	2a95      	cmp	r2, #149	@ 0x95
 8000b4a:	dc07      	bgt.n	8000b5c <__aeabi_f2iz+0x34>
 8000b4c:	2096      	movs	r0, #150	@ 0x96
 8000b4e:	1a82      	subs	r2, r0, r2
 8000b50:	40d1      	lsrs	r1, r2
 8000b52:	4248      	negs	r0, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f3      	bne.n	8000b40 <__aeabi_f2iz+0x18>
 8000b58:	0008      	movs	r0, r1
 8000b5a:	e7f1      	b.n	8000b40 <__aeabi_f2iz+0x18>
 8000b5c:	3a96      	subs	r2, #150	@ 0x96
 8000b5e:	4091      	lsls	r1, r2
 8000b60:	e7f7      	b.n	8000b52 <__aeabi_f2iz+0x2a>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	7fffffff 	.word	0x7fffffff

08000b68 <__aeabi_i2f>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d013      	beq.n	8000b96 <__aeabi_i2f+0x2e>
 8000b6e:	17c3      	asrs	r3, r0, #31
 8000b70:	18c5      	adds	r5, r0, r3
 8000b72:	405d      	eors	r5, r3
 8000b74:	0fc4      	lsrs	r4, r0, #31
 8000b76:	0028      	movs	r0, r5
 8000b78:	f001 ffca 	bl	8002b10 <__clzsi2>
 8000b7c:	239e      	movs	r3, #158	@ 0x9e
 8000b7e:	0001      	movs	r1, r0
 8000b80:	1a1b      	subs	r3, r3, r0
 8000b82:	2b96      	cmp	r3, #150	@ 0x96
 8000b84:	dc0f      	bgt.n	8000ba6 <__aeabi_i2f+0x3e>
 8000b86:	2808      	cmp	r0, #8
 8000b88:	d034      	beq.n	8000bf4 <__aeabi_i2f+0x8c>
 8000b8a:	3908      	subs	r1, #8
 8000b8c:	408d      	lsls	r5, r1
 8000b8e:	026d      	lsls	r5, r5, #9
 8000b90:	0a6d      	lsrs	r5, r5, #9
 8000b92:	b2d8      	uxtb	r0, r3
 8000b94:	e002      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000b96:	2400      	movs	r4, #0
 8000b98:	2000      	movs	r0, #0
 8000b9a:	2500      	movs	r5, #0
 8000b9c:	05c0      	lsls	r0, r0, #23
 8000b9e:	4328      	orrs	r0, r5
 8000ba0:	07e4      	lsls	r4, r4, #31
 8000ba2:	4320      	orrs	r0, r4
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	2b99      	cmp	r3, #153	@ 0x99
 8000ba8:	dc16      	bgt.n	8000bd8 <__aeabi_i2f+0x70>
 8000baa:	1f42      	subs	r2, r0, #5
 8000bac:	2805      	cmp	r0, #5
 8000bae:	d000      	beq.n	8000bb2 <__aeabi_i2f+0x4a>
 8000bb0:	4095      	lsls	r5, r2
 8000bb2:	002a      	movs	r2, r5
 8000bb4:	4811      	ldr	r0, [pc, #68]	@ (8000bfc <__aeabi_i2f+0x94>)
 8000bb6:	4002      	ands	r2, r0
 8000bb8:	076e      	lsls	r6, r5, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_i2f+0x68>
 8000bbc:	260f      	movs	r6, #15
 8000bbe:	4035      	ands	r5, r6
 8000bc0:	2d04      	cmp	r5, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_i2f+0x68>
 8000bc4:	3204      	adds	r2, #4
 8000bc6:	0155      	lsls	r5, r2, #5
 8000bc8:	d502      	bpl.n	8000bd0 <__aeabi_i2f+0x68>
 8000bca:	239f      	movs	r3, #159	@ 0x9f
 8000bcc:	4002      	ands	r2, r0
 8000bce:	1a5b      	subs	r3, r3, r1
 8000bd0:	0192      	lsls	r2, r2, #6
 8000bd2:	0a55      	lsrs	r5, r2, #9
 8000bd4:	b2d8      	uxtb	r0, r3
 8000bd6:	e7e1      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000bd8:	2205      	movs	r2, #5
 8000bda:	1a12      	subs	r2, r2, r0
 8000bdc:	0028      	movs	r0, r5
 8000bde:	40d0      	lsrs	r0, r2
 8000be0:	0002      	movs	r2, r0
 8000be2:	0008      	movs	r0, r1
 8000be4:	301b      	adds	r0, #27
 8000be6:	4085      	lsls	r5, r0
 8000be8:	0028      	movs	r0, r5
 8000bea:	1e45      	subs	r5, r0, #1
 8000bec:	41a8      	sbcs	r0, r5
 8000bee:	4302      	orrs	r2, r0
 8000bf0:	0015      	movs	r5, r2
 8000bf2:	e7de      	b.n	8000bb2 <__aeabi_i2f+0x4a>
 8000bf4:	026d      	lsls	r5, r5, #9
 8000bf6:	2096      	movs	r0, #150	@ 0x96
 8000bf8:	0a6d      	lsrs	r5, r5, #9
 8000bfa:	e7cf      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000bfc:	fbffffff 	.word	0xfbffffff

08000c00 <__aeabi_dadd>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	464e      	mov	r6, r9
 8000c06:	4645      	mov	r5, r8
 8000c08:	46de      	mov	lr, fp
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	9000      	str	r0, [sp, #0]
 8000c10:	9101      	str	r1, [sp, #4]
 8000c12:	030c      	lsls	r4, r1, #12
 8000c14:	004f      	lsls	r7, r1, #1
 8000c16:	0fce      	lsrs	r6, r1, #31
 8000c18:	0a61      	lsrs	r1, r4, #9
 8000c1a:	9c00      	ldr	r4, [sp, #0]
 8000c1c:	031d      	lsls	r5, r3, #12
 8000c1e:	0f64      	lsrs	r4, r4, #29
 8000c20:	430c      	orrs	r4, r1
 8000c22:	9900      	ldr	r1, [sp, #0]
 8000c24:	9200      	str	r2, [sp, #0]
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	00c8      	lsls	r0, r1, #3
 8000c2a:	0059      	lsls	r1, r3, #1
 8000c2c:	0d4b      	lsrs	r3, r1, #21
 8000c2e:	4699      	mov	r9, r3
 8000c30:	9a00      	ldr	r2, [sp, #0]
 8000c32:	9b01      	ldr	r3, [sp, #4]
 8000c34:	0a6d      	lsrs	r5, r5, #9
 8000c36:	0fd9      	lsrs	r1, r3, #31
 8000c38:	0f53      	lsrs	r3, r2, #29
 8000c3a:	432b      	orrs	r3, r5
 8000c3c:	469a      	mov	sl, r3
 8000c3e:	9b00      	ldr	r3, [sp, #0]
 8000c40:	0d7f      	lsrs	r7, r7, #21
 8000c42:	00da      	lsls	r2, r3, #3
 8000c44:	4694      	mov	ip, r2
 8000c46:	464a      	mov	r2, r9
 8000c48:	46b0      	mov	r8, r6
 8000c4a:	1aba      	subs	r2, r7, r2
 8000c4c:	428e      	cmp	r6, r1
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x52>
 8000c50:	e0b0      	b.n	8000db4 <__aeabi_dadd+0x1b4>
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	dc00      	bgt.n	8000c58 <__aeabi_dadd+0x58>
 8000c56:	e078      	b.n	8000d4a <__aeabi_dadd+0x14a>
 8000c58:	4649      	mov	r1, r9
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_dadd+0x60>
 8000c5e:	e0e9      	b.n	8000e34 <__aeabi_dadd+0x234>
 8000c60:	49c9      	ldr	r1, [pc, #804]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000c62:	428f      	cmp	r7, r1
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dadd+0x68>
 8000c66:	e195      	b.n	8000f94 <__aeabi_dadd+0x394>
 8000c68:	2501      	movs	r5, #1
 8000c6a:	2a38      	cmp	r2, #56	@ 0x38
 8000c6c:	dc16      	bgt.n	8000c9c <__aeabi_dadd+0x9c>
 8000c6e:	2180      	movs	r1, #128	@ 0x80
 8000c70:	4653      	mov	r3, sl
 8000c72:	0409      	lsls	r1, r1, #16
 8000c74:	430b      	orrs	r3, r1
 8000c76:	469a      	mov	sl, r3
 8000c78:	2a1f      	cmp	r2, #31
 8000c7a:	dd00      	ble.n	8000c7e <__aeabi_dadd+0x7e>
 8000c7c:	e1e7      	b.n	800104e <__aeabi_dadd+0x44e>
 8000c7e:	2120      	movs	r1, #32
 8000c80:	4655      	mov	r5, sl
 8000c82:	1a8b      	subs	r3, r1, r2
 8000c84:	4661      	mov	r1, ip
 8000c86:	409d      	lsls	r5, r3
 8000c88:	40d1      	lsrs	r1, r2
 8000c8a:	430d      	orrs	r5, r1
 8000c8c:	4661      	mov	r1, ip
 8000c8e:	4099      	lsls	r1, r3
 8000c90:	1e4b      	subs	r3, r1, #1
 8000c92:	4199      	sbcs	r1, r3
 8000c94:	4653      	mov	r3, sl
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	430d      	orrs	r5, r1
 8000c9a:	1ae4      	subs	r4, r4, r3
 8000c9c:	1b45      	subs	r5, r0, r5
 8000c9e:	42a8      	cmp	r0, r5
 8000ca0:	4180      	sbcs	r0, r0
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	1a24      	subs	r4, r4, r0
 8000ca6:	0223      	lsls	r3, r4, #8
 8000ca8:	d400      	bmi.n	8000cac <__aeabi_dadd+0xac>
 8000caa:	e10f      	b.n	8000ecc <__aeabi_dadd+0x2cc>
 8000cac:	0264      	lsls	r4, r4, #9
 8000cae:	0a64      	lsrs	r4, r4, #9
 8000cb0:	2c00      	cmp	r4, #0
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0xb6>
 8000cb4:	e139      	b.n	8000f2a <__aeabi_dadd+0x32a>
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	f001 ff2a 	bl	8002b10 <__clzsi2>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	3b08      	subs	r3, #8
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	0028      	movs	r0, r5
 8000cc4:	1aca      	subs	r2, r1, r3
 8000cc6:	40d0      	lsrs	r0, r2
 8000cc8:	409c      	lsls	r4, r3
 8000cca:	0002      	movs	r2, r0
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	4322      	orrs	r2, r4
 8000cd0:	429f      	cmp	r7, r3
 8000cd2:	dd00      	ble.n	8000cd6 <__aeabi_dadd+0xd6>
 8000cd4:	e173      	b.n	8000fbe <__aeabi_dadd+0x3be>
 8000cd6:	1bd8      	subs	r0, r3, r7
 8000cd8:	3001      	adds	r0, #1
 8000cda:	1a09      	subs	r1, r1, r0
 8000cdc:	002c      	movs	r4, r5
 8000cde:	408d      	lsls	r5, r1
 8000ce0:	40c4      	lsrs	r4, r0
 8000ce2:	1e6b      	subs	r3, r5, #1
 8000ce4:	419d      	sbcs	r5, r3
 8000ce6:	0013      	movs	r3, r2
 8000ce8:	40c2      	lsrs	r2, r0
 8000cea:	408b      	lsls	r3, r1
 8000cec:	4325      	orrs	r5, r4
 8000cee:	2700      	movs	r7, #0
 8000cf0:	0014      	movs	r4, r2
 8000cf2:	431d      	orrs	r5, r3
 8000cf4:	076b      	lsls	r3, r5, #29
 8000cf6:	d009      	beq.n	8000d0c <__aeabi_dadd+0x10c>
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	402b      	ands	r3, r5
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d005      	beq.n	8000d0c <__aeabi_dadd+0x10c>
 8000d00:	1d2b      	adds	r3, r5, #4
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	41ad      	sbcs	r5, r5
 8000d06:	426d      	negs	r5, r5
 8000d08:	1964      	adds	r4, r4, r5
 8000d0a:	001d      	movs	r5, r3
 8000d0c:	0223      	lsls	r3, r4, #8
 8000d0e:	d400      	bmi.n	8000d12 <__aeabi_dadd+0x112>
 8000d10:	e12d      	b.n	8000f6e <__aeabi_dadd+0x36e>
 8000d12:	4a9d      	ldr	r2, [pc, #628]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000d14:	3701      	adds	r7, #1
 8000d16:	4297      	cmp	r7, r2
 8000d18:	d100      	bne.n	8000d1c <__aeabi_dadd+0x11c>
 8000d1a:	e0d3      	b.n	8000ec4 <__aeabi_dadd+0x2c4>
 8000d1c:	4646      	mov	r6, r8
 8000d1e:	499b      	ldr	r1, [pc, #620]	@ (8000f8c <__aeabi_dadd+0x38c>)
 8000d20:	08ed      	lsrs	r5, r5, #3
 8000d22:	4021      	ands	r1, r4
 8000d24:	074a      	lsls	r2, r1, #29
 8000d26:	432a      	orrs	r2, r5
 8000d28:	057c      	lsls	r4, r7, #21
 8000d2a:	024d      	lsls	r5, r1, #9
 8000d2c:	0b2d      	lsrs	r5, r5, #12
 8000d2e:	0d64      	lsrs	r4, r4, #21
 8000d30:	0524      	lsls	r4, r4, #20
 8000d32:	432c      	orrs	r4, r5
 8000d34:	07f6      	lsls	r6, r6, #31
 8000d36:	4334      	orrs	r4, r6
 8000d38:	0010      	movs	r0, r2
 8000d3a:	0021      	movs	r1, r4
 8000d3c:	b003      	add	sp, #12
 8000d3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000d40:	46bb      	mov	fp, r7
 8000d42:	46b2      	mov	sl, r6
 8000d44:	46a9      	mov	r9, r5
 8000d46:	46a0      	mov	r8, r4
 8000d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_dadd+0x150>
 8000d4e:	e084      	b.n	8000e5a <__aeabi_dadd+0x25a>
 8000d50:	464a      	mov	r2, r9
 8000d52:	1bd2      	subs	r2, r2, r7
 8000d54:	2f00      	cmp	r7, #0
 8000d56:	d000      	beq.n	8000d5a <__aeabi_dadd+0x15a>
 8000d58:	e16d      	b.n	8001036 <__aeabi_dadd+0x436>
 8000d5a:	0025      	movs	r5, r4
 8000d5c:	4305      	orrs	r5, r0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_dadd+0x162>
 8000d60:	e127      	b.n	8000fb2 <__aeabi_dadd+0x3b2>
 8000d62:	1e56      	subs	r6, r2, #1
 8000d64:	2a01      	cmp	r2, #1
 8000d66:	d100      	bne.n	8000d6a <__aeabi_dadd+0x16a>
 8000d68:	e23b      	b.n	80011e2 <__aeabi_dadd+0x5e2>
 8000d6a:	4d87      	ldr	r5, [pc, #540]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000d6c:	42aa      	cmp	r2, r5
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dadd+0x172>
 8000d70:	e26a      	b.n	8001248 <__aeabi_dadd+0x648>
 8000d72:	2501      	movs	r5, #1
 8000d74:	2e38      	cmp	r6, #56	@ 0x38
 8000d76:	dc12      	bgt.n	8000d9e <__aeabi_dadd+0x19e>
 8000d78:	0032      	movs	r2, r6
 8000d7a:	2a1f      	cmp	r2, #31
 8000d7c:	dd00      	ble.n	8000d80 <__aeabi_dadd+0x180>
 8000d7e:	e1f8      	b.n	8001172 <__aeabi_dadd+0x572>
 8000d80:	2620      	movs	r6, #32
 8000d82:	0025      	movs	r5, r4
 8000d84:	1ab6      	subs	r6, r6, r2
 8000d86:	0007      	movs	r7, r0
 8000d88:	4653      	mov	r3, sl
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	40d4      	lsrs	r4, r2
 8000d8e:	40b5      	lsls	r5, r6
 8000d90:	40d7      	lsrs	r7, r2
 8000d92:	1e46      	subs	r6, r0, #1
 8000d94:	41b0      	sbcs	r0, r6
 8000d96:	1b1b      	subs	r3, r3, r4
 8000d98:	469a      	mov	sl, r3
 8000d9a:	433d      	orrs	r5, r7
 8000d9c:	4305      	orrs	r5, r0
 8000d9e:	4662      	mov	r2, ip
 8000da0:	1b55      	subs	r5, r2, r5
 8000da2:	45ac      	cmp	ip, r5
 8000da4:	4192      	sbcs	r2, r2
 8000da6:	4653      	mov	r3, sl
 8000da8:	4252      	negs	r2, r2
 8000daa:	000e      	movs	r6, r1
 8000dac:	464f      	mov	r7, r9
 8000dae:	4688      	mov	r8, r1
 8000db0:	1a9c      	subs	r4, r3, r2
 8000db2:	e778      	b.n	8000ca6 <__aeabi_dadd+0xa6>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	dc00      	bgt.n	8000dba <__aeabi_dadd+0x1ba>
 8000db8:	e08e      	b.n	8000ed8 <__aeabi_dadd+0x2d8>
 8000dba:	4649      	mov	r1, r9
 8000dbc:	2900      	cmp	r1, #0
 8000dbe:	d175      	bne.n	8000eac <__aeabi_dadd+0x2ac>
 8000dc0:	4661      	mov	r1, ip
 8000dc2:	4653      	mov	r3, sl
 8000dc4:	4319      	orrs	r1, r3
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dadd+0x1ca>
 8000dc8:	e0f6      	b.n	8000fb8 <__aeabi_dadd+0x3b8>
 8000dca:	1e51      	subs	r1, r2, #1
 8000dcc:	2a01      	cmp	r2, #1
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_dadd+0x1d2>
 8000dd0:	e191      	b.n	80010f6 <__aeabi_dadd+0x4f6>
 8000dd2:	4d6d      	ldr	r5, [pc, #436]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000dd4:	42aa      	cmp	r2, r5
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dadd+0x1da>
 8000dd8:	e0dc      	b.n	8000f94 <__aeabi_dadd+0x394>
 8000dda:	2501      	movs	r5, #1
 8000ddc:	2938      	cmp	r1, #56	@ 0x38
 8000dde:	dc14      	bgt.n	8000e0a <__aeabi_dadd+0x20a>
 8000de0:	000a      	movs	r2, r1
 8000de2:	2a1f      	cmp	r2, #31
 8000de4:	dd00      	ble.n	8000de8 <__aeabi_dadd+0x1e8>
 8000de6:	e1a2      	b.n	800112e <__aeabi_dadd+0x52e>
 8000de8:	2120      	movs	r1, #32
 8000dea:	4653      	mov	r3, sl
 8000dec:	1a89      	subs	r1, r1, r2
 8000dee:	408b      	lsls	r3, r1
 8000df0:	001d      	movs	r5, r3
 8000df2:	4663      	mov	r3, ip
 8000df4:	40d3      	lsrs	r3, r2
 8000df6:	431d      	orrs	r5, r3
 8000df8:	4663      	mov	r3, ip
 8000dfa:	408b      	lsls	r3, r1
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	1e4b      	subs	r3, r1, #1
 8000e00:	4199      	sbcs	r1, r3
 8000e02:	4653      	mov	r3, sl
 8000e04:	40d3      	lsrs	r3, r2
 8000e06:	430d      	orrs	r5, r1
 8000e08:	18e4      	adds	r4, r4, r3
 8000e0a:	182d      	adds	r5, r5, r0
 8000e0c:	4285      	cmp	r5, r0
 8000e0e:	4180      	sbcs	r0, r0
 8000e10:	4240      	negs	r0, r0
 8000e12:	1824      	adds	r4, r4, r0
 8000e14:	0223      	lsls	r3, r4, #8
 8000e16:	d559      	bpl.n	8000ecc <__aeabi_dadd+0x2cc>
 8000e18:	4b5b      	ldr	r3, [pc, #364]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000e1a:	3701      	adds	r7, #1
 8000e1c:	429f      	cmp	r7, r3
 8000e1e:	d051      	beq.n	8000ec4 <__aeabi_dadd+0x2c4>
 8000e20:	2101      	movs	r1, #1
 8000e22:	4b5a      	ldr	r3, [pc, #360]	@ (8000f8c <__aeabi_dadd+0x38c>)
 8000e24:	086a      	lsrs	r2, r5, #1
 8000e26:	401c      	ands	r4, r3
 8000e28:	4029      	ands	r1, r5
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	07e5      	lsls	r5, r4, #31
 8000e2e:	4315      	orrs	r5, r2
 8000e30:	0864      	lsrs	r4, r4, #1
 8000e32:	e75f      	b.n	8000cf4 <__aeabi_dadd+0xf4>
 8000e34:	4661      	mov	r1, ip
 8000e36:	4653      	mov	r3, sl
 8000e38:	4319      	orrs	r1, r3
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_dadd+0x23e>
 8000e3c:	e0bc      	b.n	8000fb8 <__aeabi_dadd+0x3b8>
 8000e3e:	1e51      	subs	r1, r2, #1
 8000e40:	2a01      	cmp	r2, #1
 8000e42:	d100      	bne.n	8000e46 <__aeabi_dadd+0x246>
 8000e44:	e164      	b.n	8001110 <__aeabi_dadd+0x510>
 8000e46:	4d50      	ldr	r5, [pc, #320]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000e48:	42aa      	cmp	r2, r5
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_dadd+0x24e>
 8000e4c:	e16a      	b.n	8001124 <__aeabi_dadd+0x524>
 8000e4e:	2501      	movs	r5, #1
 8000e50:	2938      	cmp	r1, #56	@ 0x38
 8000e52:	dd00      	ble.n	8000e56 <__aeabi_dadd+0x256>
 8000e54:	e722      	b.n	8000c9c <__aeabi_dadd+0x9c>
 8000e56:	000a      	movs	r2, r1
 8000e58:	e70e      	b.n	8000c78 <__aeabi_dadd+0x78>
 8000e5a:	4a4d      	ldr	r2, [pc, #308]	@ (8000f90 <__aeabi_dadd+0x390>)
 8000e5c:	1c7d      	adds	r5, r7, #1
 8000e5e:	4215      	tst	r5, r2
 8000e60:	d000      	beq.n	8000e64 <__aeabi_dadd+0x264>
 8000e62:	e0d0      	b.n	8001006 <__aeabi_dadd+0x406>
 8000e64:	0025      	movs	r5, r4
 8000e66:	4662      	mov	r2, ip
 8000e68:	4653      	mov	r3, sl
 8000e6a:	4305      	orrs	r5, r0
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	2f00      	cmp	r7, #0
 8000e70:	d000      	beq.n	8000e74 <__aeabi_dadd+0x274>
 8000e72:	e137      	b.n	80010e4 <__aeabi_dadd+0x4e4>
 8000e74:	2d00      	cmp	r5, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dadd+0x27a>
 8000e78:	e1a8      	b.n	80011cc <__aeabi_dadd+0x5cc>
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_dadd+0x280>
 8000e7e:	e16a      	b.n	8001156 <__aeabi_dadd+0x556>
 8000e80:	4663      	mov	r3, ip
 8000e82:	1ac5      	subs	r5, r0, r3
 8000e84:	4653      	mov	r3, sl
 8000e86:	1ae2      	subs	r2, r4, r3
 8000e88:	42a8      	cmp	r0, r5
 8000e8a:	419b      	sbcs	r3, r3
 8000e8c:	425b      	negs	r3, r3
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	021a      	lsls	r2, r3, #8
 8000e92:	d400      	bmi.n	8000e96 <__aeabi_dadd+0x296>
 8000e94:	e203      	b.n	800129e <__aeabi_dadd+0x69e>
 8000e96:	4663      	mov	r3, ip
 8000e98:	1a1d      	subs	r5, r3, r0
 8000e9a:	45ac      	cmp	ip, r5
 8000e9c:	4192      	sbcs	r2, r2
 8000e9e:	4653      	mov	r3, sl
 8000ea0:	4252      	negs	r2, r2
 8000ea2:	1b1c      	subs	r4, r3, r4
 8000ea4:	000e      	movs	r6, r1
 8000ea6:	4688      	mov	r8, r1
 8000ea8:	1aa4      	subs	r4, r4, r2
 8000eaa:	e723      	b.n	8000cf4 <__aeabi_dadd+0xf4>
 8000eac:	4936      	ldr	r1, [pc, #216]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000eae:	428f      	cmp	r7, r1
 8000eb0:	d070      	beq.n	8000f94 <__aeabi_dadd+0x394>
 8000eb2:	2501      	movs	r5, #1
 8000eb4:	2a38      	cmp	r2, #56	@ 0x38
 8000eb6:	dca8      	bgt.n	8000e0a <__aeabi_dadd+0x20a>
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	4653      	mov	r3, sl
 8000ebc:	0409      	lsls	r1, r1, #16
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	469a      	mov	sl, r3
 8000ec2:	e78e      	b.n	8000de2 <__aeabi_dadd+0x1e2>
 8000ec4:	003c      	movs	r4, r7
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	2200      	movs	r2, #0
 8000eca:	e731      	b.n	8000d30 <__aeabi_dadd+0x130>
 8000ecc:	2307      	movs	r3, #7
 8000ece:	402b      	ands	r3, r5
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_dadd+0x2d6>
 8000ed4:	e710      	b.n	8000cf8 <__aeabi_dadd+0xf8>
 8000ed6:	e093      	b.n	8001000 <__aeabi_dadd+0x400>
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d074      	beq.n	8000fc6 <__aeabi_dadd+0x3c6>
 8000edc:	464a      	mov	r2, r9
 8000ede:	1bd2      	subs	r2, r2, r7
 8000ee0:	2f00      	cmp	r7, #0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_dadd+0x2e6>
 8000ee4:	e0c7      	b.n	8001076 <__aeabi_dadd+0x476>
 8000ee6:	4928      	ldr	r1, [pc, #160]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	d100      	bne.n	8000eee <__aeabi_dadd+0x2ee>
 8000eec:	e185      	b.n	80011fa <__aeabi_dadd+0x5fa>
 8000eee:	2501      	movs	r5, #1
 8000ef0:	2a38      	cmp	r2, #56	@ 0x38
 8000ef2:	dc12      	bgt.n	8000f1a <__aeabi_dadd+0x31a>
 8000ef4:	2180      	movs	r1, #128	@ 0x80
 8000ef6:	0409      	lsls	r1, r1, #16
 8000ef8:	430c      	orrs	r4, r1
 8000efa:	2a1f      	cmp	r2, #31
 8000efc:	dd00      	ble.n	8000f00 <__aeabi_dadd+0x300>
 8000efe:	e1ab      	b.n	8001258 <__aeabi_dadd+0x658>
 8000f00:	2120      	movs	r1, #32
 8000f02:	0025      	movs	r5, r4
 8000f04:	1a89      	subs	r1, r1, r2
 8000f06:	0007      	movs	r7, r0
 8000f08:	4088      	lsls	r0, r1
 8000f0a:	408d      	lsls	r5, r1
 8000f0c:	40d7      	lsrs	r7, r2
 8000f0e:	1e41      	subs	r1, r0, #1
 8000f10:	4188      	sbcs	r0, r1
 8000f12:	40d4      	lsrs	r4, r2
 8000f14:	433d      	orrs	r5, r7
 8000f16:	4305      	orrs	r5, r0
 8000f18:	44a2      	add	sl, r4
 8000f1a:	4465      	add	r5, ip
 8000f1c:	4565      	cmp	r5, ip
 8000f1e:	4192      	sbcs	r2, r2
 8000f20:	4252      	negs	r2, r2
 8000f22:	4452      	add	r2, sl
 8000f24:	0014      	movs	r4, r2
 8000f26:	464f      	mov	r7, r9
 8000f28:	e774      	b.n	8000e14 <__aeabi_dadd+0x214>
 8000f2a:	0028      	movs	r0, r5
 8000f2c:	f001 fdf0 	bl	8002b10 <__clzsi2>
 8000f30:	0003      	movs	r3, r0
 8000f32:	3318      	adds	r3, #24
 8000f34:	2b1f      	cmp	r3, #31
 8000f36:	dc00      	bgt.n	8000f3a <__aeabi_dadd+0x33a>
 8000f38:	e6c2      	b.n	8000cc0 <__aeabi_dadd+0xc0>
 8000f3a:	002a      	movs	r2, r5
 8000f3c:	3808      	subs	r0, #8
 8000f3e:	4082      	lsls	r2, r0
 8000f40:	429f      	cmp	r7, r3
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_dadd+0x346>
 8000f44:	e0a9      	b.n	800109a <__aeabi_dadd+0x49a>
 8000f46:	1bdb      	subs	r3, r3, r7
 8000f48:	1c58      	adds	r0, r3, #1
 8000f4a:	281f      	cmp	r0, #31
 8000f4c:	dc00      	bgt.n	8000f50 <__aeabi_dadd+0x350>
 8000f4e:	e1ac      	b.n	80012aa <__aeabi_dadd+0x6aa>
 8000f50:	0015      	movs	r5, r2
 8000f52:	3b1f      	subs	r3, #31
 8000f54:	40dd      	lsrs	r5, r3
 8000f56:	2820      	cmp	r0, #32
 8000f58:	d005      	beq.n	8000f66 <__aeabi_dadd+0x366>
 8000f5a:	2340      	movs	r3, #64	@ 0x40
 8000f5c:	1a1b      	subs	r3, r3, r0
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	1e53      	subs	r3, r2, #1
 8000f62:	419a      	sbcs	r2, r3
 8000f64:	4315      	orrs	r5, r2
 8000f66:	2307      	movs	r3, #7
 8000f68:	2700      	movs	r7, #0
 8000f6a:	402b      	ands	r3, r5
 8000f6c:	e7b0      	b.n	8000ed0 <__aeabi_dadd+0x2d0>
 8000f6e:	08ed      	lsrs	r5, r5, #3
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000f72:	0762      	lsls	r2, r4, #29
 8000f74:	432a      	orrs	r2, r5
 8000f76:	08e4      	lsrs	r4, r4, #3
 8000f78:	429f      	cmp	r7, r3
 8000f7a:	d00f      	beq.n	8000f9c <__aeabi_dadd+0x39c>
 8000f7c:	0324      	lsls	r4, r4, #12
 8000f7e:	0b25      	lsrs	r5, r4, #12
 8000f80:	057c      	lsls	r4, r7, #21
 8000f82:	0d64      	lsrs	r4, r4, #21
 8000f84:	e6d4      	b.n	8000d30 <__aeabi_dadd+0x130>
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	000007ff 	.word	0x000007ff
 8000f8c:	ff7fffff 	.word	0xff7fffff
 8000f90:	000007fe 	.word	0x000007fe
 8000f94:	08c0      	lsrs	r0, r0, #3
 8000f96:	0762      	lsls	r2, r4, #29
 8000f98:	4302      	orrs	r2, r0
 8000f9a:	08e4      	lsrs	r4, r4, #3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	4323      	orrs	r3, r4
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dadd+0x3a4>
 8000fa2:	e186      	b.n	80012b2 <__aeabi_dadd+0x6b2>
 8000fa4:	2580      	movs	r5, #128	@ 0x80
 8000fa6:	032d      	lsls	r5, r5, #12
 8000fa8:	4325      	orrs	r5, r4
 8000faa:	032d      	lsls	r5, r5, #12
 8000fac:	4cc3      	ldr	r4, [pc, #780]	@ (80012bc <__aeabi_dadd+0x6bc>)
 8000fae:	0b2d      	lsrs	r5, r5, #12
 8000fb0:	e6be      	b.n	8000d30 <__aeabi_dadd+0x130>
 8000fb2:	4660      	mov	r0, ip
 8000fb4:	4654      	mov	r4, sl
 8000fb6:	000e      	movs	r6, r1
 8000fb8:	0017      	movs	r7, r2
 8000fba:	08c5      	lsrs	r5, r0, #3
 8000fbc:	e7d8      	b.n	8000f70 <__aeabi_dadd+0x370>
 8000fbe:	4cc0      	ldr	r4, [pc, #768]	@ (80012c0 <__aeabi_dadd+0x6c0>)
 8000fc0:	1aff      	subs	r7, r7, r3
 8000fc2:	4014      	ands	r4, r2
 8000fc4:	e696      	b.n	8000cf4 <__aeabi_dadd+0xf4>
 8000fc6:	4abf      	ldr	r2, [pc, #764]	@ (80012c4 <__aeabi_dadd+0x6c4>)
 8000fc8:	1c79      	adds	r1, r7, #1
 8000fca:	4211      	tst	r1, r2
 8000fcc:	d16b      	bne.n	80010a6 <__aeabi_dadd+0x4a6>
 8000fce:	0022      	movs	r2, r4
 8000fd0:	4302      	orrs	r2, r0
 8000fd2:	2f00      	cmp	r7, #0
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_dadd+0x3d8>
 8000fd6:	e0db      	b.n	8001190 <__aeabi_dadd+0x590>
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	d100      	bne.n	8000fde <__aeabi_dadd+0x3de>
 8000fdc:	e12d      	b.n	800123a <__aeabi_dadd+0x63a>
 8000fde:	4662      	mov	r2, ip
 8000fe0:	4653      	mov	r3, sl
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0x3e8>
 8000fe6:	e0b6      	b.n	8001156 <__aeabi_dadd+0x556>
 8000fe8:	4663      	mov	r3, ip
 8000fea:	18c5      	adds	r5, r0, r3
 8000fec:	4285      	cmp	r5, r0
 8000fee:	4180      	sbcs	r0, r0
 8000ff0:	4454      	add	r4, sl
 8000ff2:	4240      	negs	r0, r0
 8000ff4:	1824      	adds	r4, r4, r0
 8000ff6:	0223      	lsls	r3, r4, #8
 8000ff8:	d502      	bpl.n	8001000 <__aeabi_dadd+0x400>
 8000ffa:	000f      	movs	r7, r1
 8000ffc:	4bb0      	ldr	r3, [pc, #704]	@ (80012c0 <__aeabi_dadd+0x6c0>)
 8000ffe:	401c      	ands	r4, r3
 8001000:	003a      	movs	r2, r7
 8001002:	0028      	movs	r0, r5
 8001004:	e7d8      	b.n	8000fb8 <__aeabi_dadd+0x3b8>
 8001006:	4662      	mov	r2, ip
 8001008:	1a85      	subs	r5, r0, r2
 800100a:	42a8      	cmp	r0, r5
 800100c:	4192      	sbcs	r2, r2
 800100e:	4653      	mov	r3, sl
 8001010:	4252      	negs	r2, r2
 8001012:	4691      	mov	r9, r2
 8001014:	1ae3      	subs	r3, r4, r3
 8001016:	001a      	movs	r2, r3
 8001018:	464b      	mov	r3, r9
 800101a:	1ad2      	subs	r2, r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	4691      	mov	r9, r2
 8001020:	021a      	lsls	r2, r3, #8
 8001022:	d454      	bmi.n	80010ce <__aeabi_dadd+0x4ce>
 8001024:	464a      	mov	r2, r9
 8001026:	464c      	mov	r4, r9
 8001028:	432a      	orrs	r2, r5
 800102a:	d000      	beq.n	800102e <__aeabi_dadd+0x42e>
 800102c:	e640      	b.n	8000cb0 <__aeabi_dadd+0xb0>
 800102e:	2600      	movs	r6, #0
 8001030:	2400      	movs	r4, #0
 8001032:	2500      	movs	r5, #0
 8001034:	e67c      	b.n	8000d30 <__aeabi_dadd+0x130>
 8001036:	4da1      	ldr	r5, [pc, #644]	@ (80012bc <__aeabi_dadd+0x6bc>)
 8001038:	45a9      	cmp	r9, r5
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x43e>
 800103c:	e090      	b.n	8001160 <__aeabi_dadd+0x560>
 800103e:	2501      	movs	r5, #1
 8001040:	2a38      	cmp	r2, #56	@ 0x38
 8001042:	dd00      	ble.n	8001046 <__aeabi_dadd+0x446>
 8001044:	e6ab      	b.n	8000d9e <__aeabi_dadd+0x19e>
 8001046:	2580      	movs	r5, #128	@ 0x80
 8001048:	042d      	lsls	r5, r5, #16
 800104a:	432c      	orrs	r4, r5
 800104c:	e695      	b.n	8000d7a <__aeabi_dadd+0x17a>
 800104e:	0011      	movs	r1, r2
 8001050:	4655      	mov	r5, sl
 8001052:	3920      	subs	r1, #32
 8001054:	40cd      	lsrs	r5, r1
 8001056:	46a9      	mov	r9, r5
 8001058:	2a20      	cmp	r2, #32
 800105a:	d006      	beq.n	800106a <__aeabi_dadd+0x46a>
 800105c:	2140      	movs	r1, #64	@ 0x40
 800105e:	4653      	mov	r3, sl
 8001060:	1a8a      	subs	r2, r1, r2
 8001062:	4093      	lsls	r3, r2
 8001064:	4662      	mov	r2, ip
 8001066:	431a      	orrs	r2, r3
 8001068:	4694      	mov	ip, r2
 800106a:	4665      	mov	r5, ip
 800106c:	1e6b      	subs	r3, r5, #1
 800106e:	419d      	sbcs	r5, r3
 8001070:	464b      	mov	r3, r9
 8001072:	431d      	orrs	r5, r3
 8001074:	e612      	b.n	8000c9c <__aeabi_dadd+0x9c>
 8001076:	0021      	movs	r1, r4
 8001078:	4301      	orrs	r1, r0
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x47e>
 800107c:	e0c4      	b.n	8001208 <__aeabi_dadd+0x608>
 800107e:	1e51      	subs	r1, r2, #1
 8001080:	2a01      	cmp	r2, #1
 8001082:	d100      	bne.n	8001086 <__aeabi_dadd+0x486>
 8001084:	e0fb      	b.n	800127e <__aeabi_dadd+0x67e>
 8001086:	4d8d      	ldr	r5, [pc, #564]	@ (80012bc <__aeabi_dadd+0x6bc>)
 8001088:	42aa      	cmp	r2, r5
 800108a:	d100      	bne.n	800108e <__aeabi_dadd+0x48e>
 800108c:	e0b5      	b.n	80011fa <__aeabi_dadd+0x5fa>
 800108e:	2501      	movs	r5, #1
 8001090:	2938      	cmp	r1, #56	@ 0x38
 8001092:	dd00      	ble.n	8001096 <__aeabi_dadd+0x496>
 8001094:	e741      	b.n	8000f1a <__aeabi_dadd+0x31a>
 8001096:	000a      	movs	r2, r1
 8001098:	e72f      	b.n	8000efa <__aeabi_dadd+0x2fa>
 800109a:	4c89      	ldr	r4, [pc, #548]	@ (80012c0 <__aeabi_dadd+0x6c0>)
 800109c:	1aff      	subs	r7, r7, r3
 800109e:	4014      	ands	r4, r2
 80010a0:	0762      	lsls	r2, r4, #29
 80010a2:	08e4      	lsrs	r4, r4, #3
 80010a4:	e76a      	b.n	8000f7c <__aeabi_dadd+0x37c>
 80010a6:	4a85      	ldr	r2, [pc, #532]	@ (80012bc <__aeabi_dadd+0x6bc>)
 80010a8:	4291      	cmp	r1, r2
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x4ae>
 80010ac:	e0e3      	b.n	8001276 <__aeabi_dadd+0x676>
 80010ae:	4663      	mov	r3, ip
 80010b0:	18c2      	adds	r2, r0, r3
 80010b2:	4282      	cmp	r2, r0
 80010b4:	4180      	sbcs	r0, r0
 80010b6:	0023      	movs	r3, r4
 80010b8:	4240      	negs	r0, r0
 80010ba:	4453      	add	r3, sl
 80010bc:	181b      	adds	r3, r3, r0
 80010be:	07dd      	lsls	r5, r3, #31
 80010c0:	085c      	lsrs	r4, r3, #1
 80010c2:	2307      	movs	r3, #7
 80010c4:	0852      	lsrs	r2, r2, #1
 80010c6:	4315      	orrs	r5, r2
 80010c8:	000f      	movs	r7, r1
 80010ca:	402b      	ands	r3, r5
 80010cc:	e700      	b.n	8000ed0 <__aeabi_dadd+0x2d0>
 80010ce:	4663      	mov	r3, ip
 80010d0:	1a1d      	subs	r5, r3, r0
 80010d2:	45ac      	cmp	ip, r5
 80010d4:	4192      	sbcs	r2, r2
 80010d6:	4653      	mov	r3, sl
 80010d8:	4252      	negs	r2, r2
 80010da:	1b1c      	subs	r4, r3, r4
 80010dc:	000e      	movs	r6, r1
 80010de:	4688      	mov	r8, r1
 80010e0:	1aa4      	subs	r4, r4, r2
 80010e2:	e5e5      	b.n	8000cb0 <__aeabi_dadd+0xb0>
 80010e4:	2d00      	cmp	r5, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x4ea>
 80010e8:	e091      	b.n	800120e <__aeabi_dadd+0x60e>
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d138      	bne.n	8001160 <__aeabi_dadd+0x560>
 80010ee:	2480      	movs	r4, #128	@ 0x80
 80010f0:	2600      	movs	r6, #0
 80010f2:	0324      	lsls	r4, r4, #12
 80010f4:	e756      	b.n	8000fa4 <__aeabi_dadd+0x3a4>
 80010f6:	4663      	mov	r3, ip
 80010f8:	18c5      	adds	r5, r0, r3
 80010fa:	4285      	cmp	r5, r0
 80010fc:	4180      	sbcs	r0, r0
 80010fe:	4454      	add	r4, sl
 8001100:	4240      	negs	r0, r0
 8001102:	1824      	adds	r4, r4, r0
 8001104:	2701      	movs	r7, #1
 8001106:	0223      	lsls	r3, r4, #8
 8001108:	d400      	bmi.n	800110c <__aeabi_dadd+0x50c>
 800110a:	e6df      	b.n	8000ecc <__aeabi_dadd+0x2cc>
 800110c:	2702      	movs	r7, #2
 800110e:	e687      	b.n	8000e20 <__aeabi_dadd+0x220>
 8001110:	4663      	mov	r3, ip
 8001112:	1ac5      	subs	r5, r0, r3
 8001114:	42a8      	cmp	r0, r5
 8001116:	4180      	sbcs	r0, r0
 8001118:	4653      	mov	r3, sl
 800111a:	4240      	negs	r0, r0
 800111c:	1ae4      	subs	r4, r4, r3
 800111e:	2701      	movs	r7, #1
 8001120:	1a24      	subs	r4, r4, r0
 8001122:	e5c0      	b.n	8000ca6 <__aeabi_dadd+0xa6>
 8001124:	0762      	lsls	r2, r4, #29
 8001126:	08c0      	lsrs	r0, r0, #3
 8001128:	4302      	orrs	r2, r0
 800112a:	08e4      	lsrs	r4, r4, #3
 800112c:	e736      	b.n	8000f9c <__aeabi_dadd+0x39c>
 800112e:	0011      	movs	r1, r2
 8001130:	4653      	mov	r3, sl
 8001132:	3920      	subs	r1, #32
 8001134:	40cb      	lsrs	r3, r1
 8001136:	4699      	mov	r9, r3
 8001138:	2a20      	cmp	r2, #32
 800113a:	d006      	beq.n	800114a <__aeabi_dadd+0x54a>
 800113c:	2140      	movs	r1, #64	@ 0x40
 800113e:	4653      	mov	r3, sl
 8001140:	1a8a      	subs	r2, r1, r2
 8001142:	4093      	lsls	r3, r2
 8001144:	4662      	mov	r2, ip
 8001146:	431a      	orrs	r2, r3
 8001148:	4694      	mov	ip, r2
 800114a:	4665      	mov	r5, ip
 800114c:	1e6b      	subs	r3, r5, #1
 800114e:	419d      	sbcs	r5, r3
 8001150:	464b      	mov	r3, r9
 8001152:	431d      	orrs	r5, r3
 8001154:	e659      	b.n	8000e0a <__aeabi_dadd+0x20a>
 8001156:	0762      	lsls	r2, r4, #29
 8001158:	08c0      	lsrs	r0, r0, #3
 800115a:	4302      	orrs	r2, r0
 800115c:	08e4      	lsrs	r4, r4, #3
 800115e:	e70d      	b.n	8000f7c <__aeabi_dadd+0x37c>
 8001160:	4653      	mov	r3, sl
 8001162:	075a      	lsls	r2, r3, #29
 8001164:	4663      	mov	r3, ip
 8001166:	08d8      	lsrs	r0, r3, #3
 8001168:	4653      	mov	r3, sl
 800116a:	000e      	movs	r6, r1
 800116c:	4302      	orrs	r2, r0
 800116e:	08dc      	lsrs	r4, r3, #3
 8001170:	e714      	b.n	8000f9c <__aeabi_dadd+0x39c>
 8001172:	0015      	movs	r5, r2
 8001174:	0026      	movs	r6, r4
 8001176:	3d20      	subs	r5, #32
 8001178:	40ee      	lsrs	r6, r5
 800117a:	2a20      	cmp	r2, #32
 800117c:	d003      	beq.n	8001186 <__aeabi_dadd+0x586>
 800117e:	2540      	movs	r5, #64	@ 0x40
 8001180:	1aaa      	subs	r2, r5, r2
 8001182:	4094      	lsls	r4, r2
 8001184:	4320      	orrs	r0, r4
 8001186:	1e42      	subs	r2, r0, #1
 8001188:	4190      	sbcs	r0, r2
 800118a:	0005      	movs	r5, r0
 800118c:	4335      	orrs	r5, r6
 800118e:	e606      	b.n	8000d9e <__aeabi_dadd+0x19e>
 8001190:	2a00      	cmp	r2, #0
 8001192:	d07c      	beq.n	800128e <__aeabi_dadd+0x68e>
 8001194:	4662      	mov	r2, ip
 8001196:	4653      	mov	r3, sl
 8001198:	08c0      	lsrs	r0, r0, #3
 800119a:	431a      	orrs	r2, r3
 800119c:	d100      	bne.n	80011a0 <__aeabi_dadd+0x5a0>
 800119e:	e6fa      	b.n	8000f96 <__aeabi_dadd+0x396>
 80011a0:	0762      	lsls	r2, r4, #29
 80011a2:	4310      	orrs	r0, r2
 80011a4:	2280      	movs	r2, #128	@ 0x80
 80011a6:	08e4      	lsrs	r4, r4, #3
 80011a8:	0312      	lsls	r2, r2, #12
 80011aa:	4214      	tst	r4, r2
 80011ac:	d008      	beq.n	80011c0 <__aeabi_dadd+0x5c0>
 80011ae:	08d9      	lsrs	r1, r3, #3
 80011b0:	4211      	tst	r1, r2
 80011b2:	d105      	bne.n	80011c0 <__aeabi_dadd+0x5c0>
 80011b4:	4663      	mov	r3, ip
 80011b6:	08d8      	lsrs	r0, r3, #3
 80011b8:	4653      	mov	r3, sl
 80011ba:	000c      	movs	r4, r1
 80011bc:	075b      	lsls	r3, r3, #29
 80011be:	4318      	orrs	r0, r3
 80011c0:	0f42      	lsrs	r2, r0, #29
 80011c2:	00c0      	lsls	r0, r0, #3
 80011c4:	08c0      	lsrs	r0, r0, #3
 80011c6:	0752      	lsls	r2, r2, #29
 80011c8:	4302      	orrs	r2, r0
 80011ca:	e6e7      	b.n	8000f9c <__aeabi_dadd+0x39c>
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dadd+0x5d2>
 80011d0:	e72d      	b.n	800102e <__aeabi_dadd+0x42e>
 80011d2:	4663      	mov	r3, ip
 80011d4:	08d8      	lsrs	r0, r3, #3
 80011d6:	4653      	mov	r3, sl
 80011d8:	075a      	lsls	r2, r3, #29
 80011da:	000e      	movs	r6, r1
 80011dc:	4302      	orrs	r2, r0
 80011de:	08dc      	lsrs	r4, r3, #3
 80011e0:	e6cc      	b.n	8000f7c <__aeabi_dadd+0x37c>
 80011e2:	4663      	mov	r3, ip
 80011e4:	1a1d      	subs	r5, r3, r0
 80011e6:	45ac      	cmp	ip, r5
 80011e8:	4192      	sbcs	r2, r2
 80011ea:	4653      	mov	r3, sl
 80011ec:	4252      	negs	r2, r2
 80011ee:	1b1c      	subs	r4, r3, r4
 80011f0:	000e      	movs	r6, r1
 80011f2:	4688      	mov	r8, r1
 80011f4:	1aa4      	subs	r4, r4, r2
 80011f6:	3701      	adds	r7, #1
 80011f8:	e555      	b.n	8000ca6 <__aeabi_dadd+0xa6>
 80011fa:	4663      	mov	r3, ip
 80011fc:	08d9      	lsrs	r1, r3, #3
 80011fe:	4653      	mov	r3, sl
 8001200:	075a      	lsls	r2, r3, #29
 8001202:	430a      	orrs	r2, r1
 8001204:	08dc      	lsrs	r4, r3, #3
 8001206:	e6c9      	b.n	8000f9c <__aeabi_dadd+0x39c>
 8001208:	4660      	mov	r0, ip
 800120a:	4654      	mov	r4, sl
 800120c:	e6d4      	b.n	8000fb8 <__aeabi_dadd+0x3b8>
 800120e:	08c0      	lsrs	r0, r0, #3
 8001210:	2a00      	cmp	r2, #0
 8001212:	d100      	bne.n	8001216 <__aeabi_dadd+0x616>
 8001214:	e6bf      	b.n	8000f96 <__aeabi_dadd+0x396>
 8001216:	0762      	lsls	r2, r4, #29
 8001218:	4310      	orrs	r0, r2
 800121a:	2280      	movs	r2, #128	@ 0x80
 800121c:	08e4      	lsrs	r4, r4, #3
 800121e:	0312      	lsls	r2, r2, #12
 8001220:	4214      	tst	r4, r2
 8001222:	d0cd      	beq.n	80011c0 <__aeabi_dadd+0x5c0>
 8001224:	08dd      	lsrs	r5, r3, #3
 8001226:	4215      	tst	r5, r2
 8001228:	d1ca      	bne.n	80011c0 <__aeabi_dadd+0x5c0>
 800122a:	4663      	mov	r3, ip
 800122c:	08d8      	lsrs	r0, r3, #3
 800122e:	4653      	mov	r3, sl
 8001230:	075b      	lsls	r3, r3, #29
 8001232:	000e      	movs	r6, r1
 8001234:	002c      	movs	r4, r5
 8001236:	4318      	orrs	r0, r3
 8001238:	e7c2      	b.n	80011c0 <__aeabi_dadd+0x5c0>
 800123a:	4663      	mov	r3, ip
 800123c:	08d9      	lsrs	r1, r3, #3
 800123e:	4653      	mov	r3, sl
 8001240:	075a      	lsls	r2, r3, #29
 8001242:	430a      	orrs	r2, r1
 8001244:	08dc      	lsrs	r4, r3, #3
 8001246:	e699      	b.n	8000f7c <__aeabi_dadd+0x37c>
 8001248:	4663      	mov	r3, ip
 800124a:	08d8      	lsrs	r0, r3, #3
 800124c:	4653      	mov	r3, sl
 800124e:	075a      	lsls	r2, r3, #29
 8001250:	000e      	movs	r6, r1
 8001252:	4302      	orrs	r2, r0
 8001254:	08dc      	lsrs	r4, r3, #3
 8001256:	e6a1      	b.n	8000f9c <__aeabi_dadd+0x39c>
 8001258:	0011      	movs	r1, r2
 800125a:	0027      	movs	r7, r4
 800125c:	3920      	subs	r1, #32
 800125e:	40cf      	lsrs	r7, r1
 8001260:	2a20      	cmp	r2, #32
 8001262:	d003      	beq.n	800126c <__aeabi_dadd+0x66c>
 8001264:	2140      	movs	r1, #64	@ 0x40
 8001266:	1a8a      	subs	r2, r1, r2
 8001268:	4094      	lsls	r4, r2
 800126a:	4320      	orrs	r0, r4
 800126c:	1e42      	subs	r2, r0, #1
 800126e:	4190      	sbcs	r0, r2
 8001270:	0005      	movs	r5, r0
 8001272:	433d      	orrs	r5, r7
 8001274:	e651      	b.n	8000f1a <__aeabi_dadd+0x31a>
 8001276:	000c      	movs	r4, r1
 8001278:	2500      	movs	r5, #0
 800127a:	2200      	movs	r2, #0
 800127c:	e558      	b.n	8000d30 <__aeabi_dadd+0x130>
 800127e:	4460      	add	r0, ip
 8001280:	4560      	cmp	r0, ip
 8001282:	4192      	sbcs	r2, r2
 8001284:	4454      	add	r4, sl
 8001286:	4252      	negs	r2, r2
 8001288:	0005      	movs	r5, r0
 800128a:	18a4      	adds	r4, r4, r2
 800128c:	e73a      	b.n	8001104 <__aeabi_dadd+0x504>
 800128e:	4653      	mov	r3, sl
 8001290:	075a      	lsls	r2, r3, #29
 8001292:	4663      	mov	r3, ip
 8001294:	08d9      	lsrs	r1, r3, #3
 8001296:	4653      	mov	r3, sl
 8001298:	430a      	orrs	r2, r1
 800129a:	08dc      	lsrs	r4, r3, #3
 800129c:	e67e      	b.n	8000f9c <__aeabi_dadd+0x39c>
 800129e:	001a      	movs	r2, r3
 80012a0:	001c      	movs	r4, r3
 80012a2:	432a      	orrs	r2, r5
 80012a4:	d000      	beq.n	80012a8 <__aeabi_dadd+0x6a8>
 80012a6:	e6ab      	b.n	8001000 <__aeabi_dadd+0x400>
 80012a8:	e6c1      	b.n	800102e <__aeabi_dadd+0x42e>
 80012aa:	2120      	movs	r1, #32
 80012ac:	2500      	movs	r5, #0
 80012ae:	1a09      	subs	r1, r1, r0
 80012b0:	e519      	b.n	8000ce6 <__aeabi_dadd+0xe6>
 80012b2:	2200      	movs	r2, #0
 80012b4:	2500      	movs	r5, #0
 80012b6:	4c01      	ldr	r4, [pc, #4]	@ (80012bc <__aeabi_dadd+0x6bc>)
 80012b8:	e53a      	b.n	8000d30 <__aeabi_dadd+0x130>
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	000007ff 	.word	0x000007ff
 80012c0:	ff7fffff 	.word	0xff7fffff
 80012c4:	000007fe 	.word	0x000007fe

080012c8 <__aeabi_ddiv>:
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	46de      	mov	lr, fp
 80012cc:	4645      	mov	r5, r8
 80012ce:	4657      	mov	r7, sl
 80012d0:	464e      	mov	r6, r9
 80012d2:	b5e0      	push	{r5, r6, r7, lr}
 80012d4:	b087      	sub	sp, #28
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	030b      	lsls	r3, r1, #12
 80012dc:	0b1b      	lsrs	r3, r3, #12
 80012de:	469b      	mov	fp, r3
 80012e0:	0fca      	lsrs	r2, r1, #31
 80012e2:	004b      	lsls	r3, r1, #1
 80012e4:	0004      	movs	r4, r0
 80012e6:	4680      	mov	r8, r0
 80012e8:	0d5b      	lsrs	r3, r3, #21
 80012ea:	9202      	str	r2, [sp, #8]
 80012ec:	d100      	bne.n	80012f0 <__aeabi_ddiv+0x28>
 80012ee:	e16a      	b.n	80015c6 <__aeabi_ddiv+0x2fe>
 80012f0:	4ad4      	ldr	r2, [pc, #848]	@ (8001644 <__aeabi_ddiv+0x37c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d100      	bne.n	80012f8 <__aeabi_ddiv+0x30>
 80012f6:	e18c      	b.n	8001612 <__aeabi_ddiv+0x34a>
 80012f8:	4659      	mov	r1, fp
 80012fa:	0f42      	lsrs	r2, r0, #29
 80012fc:	00c9      	lsls	r1, r1, #3
 80012fe:	430a      	orrs	r2, r1
 8001300:	2180      	movs	r1, #128	@ 0x80
 8001302:	0409      	lsls	r1, r1, #16
 8001304:	4311      	orrs	r1, r2
 8001306:	00c2      	lsls	r2, r0, #3
 8001308:	4690      	mov	r8, r2
 800130a:	4acf      	ldr	r2, [pc, #828]	@ (8001648 <__aeabi_ddiv+0x380>)
 800130c:	4689      	mov	r9, r1
 800130e:	4692      	mov	sl, r2
 8001310:	449a      	add	sl, r3
 8001312:	2300      	movs	r3, #0
 8001314:	2400      	movs	r4, #0
 8001316:	9303      	str	r3, [sp, #12]
 8001318:	9e00      	ldr	r6, [sp, #0]
 800131a:	9f01      	ldr	r7, [sp, #4]
 800131c:	033b      	lsls	r3, r7, #12
 800131e:	0b1b      	lsrs	r3, r3, #12
 8001320:	469b      	mov	fp, r3
 8001322:	007b      	lsls	r3, r7, #1
 8001324:	0030      	movs	r0, r6
 8001326:	0d5b      	lsrs	r3, r3, #21
 8001328:	0ffd      	lsrs	r5, r7, #31
 800132a:	2b00      	cmp	r3, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_ddiv+0x68>
 800132e:	e128      	b.n	8001582 <__aeabi_ddiv+0x2ba>
 8001330:	4ac4      	ldr	r2, [pc, #784]	@ (8001644 <__aeabi_ddiv+0x37c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d100      	bne.n	8001338 <__aeabi_ddiv+0x70>
 8001336:	e177      	b.n	8001628 <__aeabi_ddiv+0x360>
 8001338:	4659      	mov	r1, fp
 800133a:	0f72      	lsrs	r2, r6, #29
 800133c:	00c9      	lsls	r1, r1, #3
 800133e:	430a      	orrs	r2, r1
 8001340:	2180      	movs	r1, #128	@ 0x80
 8001342:	0409      	lsls	r1, r1, #16
 8001344:	4311      	orrs	r1, r2
 8001346:	468b      	mov	fp, r1
 8001348:	49bf      	ldr	r1, [pc, #764]	@ (8001648 <__aeabi_ddiv+0x380>)
 800134a:	00f2      	lsls	r2, r6, #3
 800134c:	468c      	mov	ip, r1
 800134e:	4651      	mov	r1, sl
 8001350:	4463      	add	r3, ip
 8001352:	1acb      	subs	r3, r1, r3
 8001354:	469a      	mov	sl, r3
 8001356:	2300      	movs	r3, #0
 8001358:	9e02      	ldr	r6, [sp, #8]
 800135a:	406e      	eors	r6, r5
 800135c:	2c0f      	cmp	r4, #15
 800135e:	d827      	bhi.n	80013b0 <__aeabi_ddiv+0xe8>
 8001360:	49ba      	ldr	r1, [pc, #744]	@ (800164c <__aeabi_ddiv+0x384>)
 8001362:	00a4      	lsls	r4, r4, #2
 8001364:	5909      	ldr	r1, [r1, r4]
 8001366:	468f      	mov	pc, r1
 8001368:	46cb      	mov	fp, r9
 800136a:	4642      	mov	r2, r8
 800136c:	9e02      	ldr	r6, [sp, #8]
 800136e:	9b03      	ldr	r3, [sp, #12]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d016      	beq.n	80013a2 <__aeabi_ddiv+0xda>
 8001374:	2b03      	cmp	r3, #3
 8001376:	d100      	bne.n	800137a <__aeabi_ddiv+0xb2>
 8001378:	e2a6      	b.n	80018c8 <__aeabi_ddiv+0x600>
 800137a:	2b01      	cmp	r3, #1
 800137c:	d000      	beq.n	8001380 <__aeabi_ddiv+0xb8>
 800137e:	e0df      	b.n	8001540 <__aeabi_ddiv+0x278>
 8001380:	2200      	movs	r2, #0
 8001382:	2300      	movs	r3, #0
 8001384:	2400      	movs	r4, #0
 8001386:	4690      	mov	r8, r2
 8001388:	051b      	lsls	r3, r3, #20
 800138a:	4323      	orrs	r3, r4
 800138c:	07f6      	lsls	r6, r6, #31
 800138e:	4333      	orrs	r3, r6
 8001390:	4640      	mov	r0, r8
 8001392:	0019      	movs	r1, r3
 8001394:	b007      	add	sp, #28
 8001396:	bcf0      	pop	{r4, r5, r6, r7}
 8001398:	46bb      	mov	fp, r7
 800139a:	46b2      	mov	sl, r6
 800139c:	46a9      	mov	r9, r5
 800139e:	46a0      	mov	r8, r4
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a2:	2200      	movs	r2, #0
 80013a4:	2400      	movs	r4, #0
 80013a6:	4690      	mov	r8, r2
 80013a8:	4ba6      	ldr	r3, [pc, #664]	@ (8001644 <__aeabi_ddiv+0x37c>)
 80013aa:	e7ed      	b.n	8001388 <__aeabi_ddiv+0xc0>
 80013ac:	002e      	movs	r6, r5
 80013ae:	e7df      	b.n	8001370 <__aeabi_ddiv+0xa8>
 80013b0:	45cb      	cmp	fp, r9
 80013b2:	d200      	bcs.n	80013b6 <__aeabi_ddiv+0xee>
 80013b4:	e1d4      	b.n	8001760 <__aeabi_ddiv+0x498>
 80013b6:	d100      	bne.n	80013ba <__aeabi_ddiv+0xf2>
 80013b8:	e1cf      	b.n	800175a <__aeabi_ddiv+0x492>
 80013ba:	2301      	movs	r3, #1
 80013bc:	425b      	negs	r3, r3
 80013be:	469c      	mov	ip, r3
 80013c0:	4644      	mov	r4, r8
 80013c2:	4648      	mov	r0, r9
 80013c4:	2700      	movs	r7, #0
 80013c6:	44e2      	add	sl, ip
 80013c8:	465b      	mov	r3, fp
 80013ca:	0e15      	lsrs	r5, r2, #24
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	431d      	orrs	r5, r3
 80013d0:	0c19      	lsrs	r1, r3, #16
 80013d2:	042b      	lsls	r3, r5, #16
 80013d4:	0212      	lsls	r2, r2, #8
 80013d6:	9500      	str	r5, [sp, #0]
 80013d8:	0c1d      	lsrs	r5, r3, #16
 80013da:	4691      	mov	r9, r2
 80013dc:	9102      	str	r1, [sp, #8]
 80013de:	9503      	str	r5, [sp, #12]
 80013e0:	f7fe ff3e 	bl	8000260 <__aeabi_uidivmod>
 80013e4:	0002      	movs	r2, r0
 80013e6:	436a      	muls	r2, r5
 80013e8:	040b      	lsls	r3, r1, #16
 80013ea:	0c21      	lsrs	r1, r4, #16
 80013ec:	4680      	mov	r8, r0
 80013ee:	4319      	orrs	r1, r3
 80013f0:	428a      	cmp	r2, r1
 80013f2:	d909      	bls.n	8001408 <__aeabi_ddiv+0x140>
 80013f4:	9d00      	ldr	r5, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	46ac      	mov	ip, r5
 80013fa:	425b      	negs	r3, r3
 80013fc:	4461      	add	r1, ip
 80013fe:	469c      	mov	ip, r3
 8001400:	44e0      	add	r8, ip
 8001402:	428d      	cmp	r5, r1
 8001404:	d800      	bhi.n	8001408 <__aeabi_ddiv+0x140>
 8001406:	e1fb      	b.n	8001800 <__aeabi_ddiv+0x538>
 8001408:	1a88      	subs	r0, r1, r2
 800140a:	9902      	ldr	r1, [sp, #8]
 800140c:	f7fe ff28 	bl	8000260 <__aeabi_uidivmod>
 8001410:	9a03      	ldr	r2, [sp, #12]
 8001412:	0424      	lsls	r4, r4, #16
 8001414:	4342      	muls	r2, r0
 8001416:	0409      	lsls	r1, r1, #16
 8001418:	0c24      	lsrs	r4, r4, #16
 800141a:	0003      	movs	r3, r0
 800141c:	430c      	orrs	r4, r1
 800141e:	42a2      	cmp	r2, r4
 8001420:	d906      	bls.n	8001430 <__aeabi_ddiv+0x168>
 8001422:	9900      	ldr	r1, [sp, #0]
 8001424:	3b01      	subs	r3, #1
 8001426:	468c      	mov	ip, r1
 8001428:	4464      	add	r4, ip
 800142a:	42a1      	cmp	r1, r4
 800142c:	d800      	bhi.n	8001430 <__aeabi_ddiv+0x168>
 800142e:	e1e1      	b.n	80017f4 <__aeabi_ddiv+0x52c>
 8001430:	1aa0      	subs	r0, r4, r2
 8001432:	4642      	mov	r2, r8
 8001434:	0412      	lsls	r2, r2, #16
 8001436:	431a      	orrs	r2, r3
 8001438:	4693      	mov	fp, r2
 800143a:	464b      	mov	r3, r9
 800143c:	4659      	mov	r1, fp
 800143e:	0c1b      	lsrs	r3, r3, #16
 8001440:	001d      	movs	r5, r3
 8001442:	9304      	str	r3, [sp, #16]
 8001444:	040b      	lsls	r3, r1, #16
 8001446:	4649      	mov	r1, r9
 8001448:	0409      	lsls	r1, r1, #16
 800144a:	0c09      	lsrs	r1, r1, #16
 800144c:	000c      	movs	r4, r1
 800144e:	0c1b      	lsrs	r3, r3, #16
 8001450:	435c      	muls	r4, r3
 8001452:	0c12      	lsrs	r2, r2, #16
 8001454:	436b      	muls	r3, r5
 8001456:	4688      	mov	r8, r1
 8001458:	4351      	muls	r1, r2
 800145a:	436a      	muls	r2, r5
 800145c:	0c25      	lsrs	r5, r4, #16
 800145e:	46ac      	mov	ip, r5
 8001460:	185b      	adds	r3, r3, r1
 8001462:	4463      	add	r3, ip
 8001464:	4299      	cmp	r1, r3
 8001466:	d903      	bls.n	8001470 <__aeabi_ddiv+0x1a8>
 8001468:	2180      	movs	r1, #128	@ 0x80
 800146a:	0249      	lsls	r1, r1, #9
 800146c:	468c      	mov	ip, r1
 800146e:	4462      	add	r2, ip
 8001470:	0c19      	lsrs	r1, r3, #16
 8001472:	0424      	lsls	r4, r4, #16
 8001474:	041b      	lsls	r3, r3, #16
 8001476:	0c24      	lsrs	r4, r4, #16
 8001478:	188a      	adds	r2, r1, r2
 800147a:	191c      	adds	r4, r3, r4
 800147c:	4290      	cmp	r0, r2
 800147e:	d302      	bcc.n	8001486 <__aeabi_ddiv+0x1be>
 8001480:	d116      	bne.n	80014b0 <__aeabi_ddiv+0x1e8>
 8001482:	42a7      	cmp	r7, r4
 8001484:	d214      	bcs.n	80014b0 <__aeabi_ddiv+0x1e8>
 8001486:	465b      	mov	r3, fp
 8001488:	9d00      	ldr	r5, [sp, #0]
 800148a:	3b01      	subs	r3, #1
 800148c:	444f      	add	r7, r9
 800148e:	9305      	str	r3, [sp, #20]
 8001490:	454f      	cmp	r7, r9
 8001492:	419b      	sbcs	r3, r3
 8001494:	46ac      	mov	ip, r5
 8001496:	425b      	negs	r3, r3
 8001498:	4463      	add	r3, ip
 800149a:	18c0      	adds	r0, r0, r3
 800149c:	4285      	cmp	r5, r0
 800149e:	d300      	bcc.n	80014a2 <__aeabi_ddiv+0x1da>
 80014a0:	e1a1      	b.n	80017e6 <__aeabi_ddiv+0x51e>
 80014a2:	4282      	cmp	r2, r0
 80014a4:	d900      	bls.n	80014a8 <__aeabi_ddiv+0x1e0>
 80014a6:	e1f6      	b.n	8001896 <__aeabi_ddiv+0x5ce>
 80014a8:	d100      	bne.n	80014ac <__aeabi_ddiv+0x1e4>
 80014aa:	e1f1      	b.n	8001890 <__aeabi_ddiv+0x5c8>
 80014ac:	9b05      	ldr	r3, [sp, #20]
 80014ae:	469b      	mov	fp, r3
 80014b0:	1b3c      	subs	r4, r7, r4
 80014b2:	42a7      	cmp	r7, r4
 80014b4:	41bf      	sbcs	r7, r7
 80014b6:	9d00      	ldr	r5, [sp, #0]
 80014b8:	1a80      	subs	r0, r0, r2
 80014ba:	427f      	negs	r7, r7
 80014bc:	1bc0      	subs	r0, r0, r7
 80014be:	4285      	cmp	r5, r0
 80014c0:	d100      	bne.n	80014c4 <__aeabi_ddiv+0x1fc>
 80014c2:	e1d0      	b.n	8001866 <__aeabi_ddiv+0x59e>
 80014c4:	9902      	ldr	r1, [sp, #8]
 80014c6:	f7fe fecb 	bl	8000260 <__aeabi_uidivmod>
 80014ca:	9a03      	ldr	r2, [sp, #12]
 80014cc:	040b      	lsls	r3, r1, #16
 80014ce:	4342      	muls	r2, r0
 80014d0:	0c21      	lsrs	r1, r4, #16
 80014d2:	0007      	movs	r7, r0
 80014d4:	4319      	orrs	r1, r3
 80014d6:	428a      	cmp	r2, r1
 80014d8:	d900      	bls.n	80014dc <__aeabi_ddiv+0x214>
 80014da:	e178      	b.n	80017ce <__aeabi_ddiv+0x506>
 80014dc:	1a88      	subs	r0, r1, r2
 80014de:	9902      	ldr	r1, [sp, #8]
 80014e0:	f7fe febe 	bl	8000260 <__aeabi_uidivmod>
 80014e4:	9a03      	ldr	r2, [sp, #12]
 80014e6:	0424      	lsls	r4, r4, #16
 80014e8:	4342      	muls	r2, r0
 80014ea:	0409      	lsls	r1, r1, #16
 80014ec:	0c24      	lsrs	r4, r4, #16
 80014ee:	0003      	movs	r3, r0
 80014f0:	430c      	orrs	r4, r1
 80014f2:	42a2      	cmp	r2, r4
 80014f4:	d900      	bls.n	80014f8 <__aeabi_ddiv+0x230>
 80014f6:	e15d      	b.n	80017b4 <__aeabi_ddiv+0x4ec>
 80014f8:	4641      	mov	r1, r8
 80014fa:	1aa4      	subs	r4, r4, r2
 80014fc:	043a      	lsls	r2, r7, #16
 80014fe:	431a      	orrs	r2, r3
 8001500:	9d04      	ldr	r5, [sp, #16]
 8001502:	0413      	lsls	r3, r2, #16
 8001504:	0c1b      	lsrs	r3, r3, #16
 8001506:	4359      	muls	r1, r3
 8001508:	4647      	mov	r7, r8
 800150a:	436b      	muls	r3, r5
 800150c:	469c      	mov	ip, r3
 800150e:	0c10      	lsrs	r0, r2, #16
 8001510:	4347      	muls	r7, r0
 8001512:	0c0b      	lsrs	r3, r1, #16
 8001514:	44bc      	add	ip, r7
 8001516:	4463      	add	r3, ip
 8001518:	4368      	muls	r0, r5
 800151a:	429f      	cmp	r7, r3
 800151c:	d903      	bls.n	8001526 <__aeabi_ddiv+0x25e>
 800151e:	2580      	movs	r5, #128	@ 0x80
 8001520:	026d      	lsls	r5, r5, #9
 8001522:	46ac      	mov	ip, r5
 8001524:	4460      	add	r0, ip
 8001526:	0c1f      	lsrs	r7, r3, #16
 8001528:	0409      	lsls	r1, r1, #16
 800152a:	041b      	lsls	r3, r3, #16
 800152c:	0c09      	lsrs	r1, r1, #16
 800152e:	183f      	adds	r7, r7, r0
 8001530:	185b      	adds	r3, r3, r1
 8001532:	42bc      	cmp	r4, r7
 8001534:	d200      	bcs.n	8001538 <__aeabi_ddiv+0x270>
 8001536:	e102      	b.n	800173e <__aeabi_ddiv+0x476>
 8001538:	d100      	bne.n	800153c <__aeabi_ddiv+0x274>
 800153a:	e0fd      	b.n	8001738 <__aeabi_ddiv+0x470>
 800153c:	2301      	movs	r3, #1
 800153e:	431a      	orrs	r2, r3
 8001540:	4b43      	ldr	r3, [pc, #268]	@ (8001650 <__aeabi_ddiv+0x388>)
 8001542:	4453      	add	r3, sl
 8001544:	2b00      	cmp	r3, #0
 8001546:	dc00      	bgt.n	800154a <__aeabi_ddiv+0x282>
 8001548:	e0ae      	b.n	80016a8 <__aeabi_ddiv+0x3e0>
 800154a:	0751      	lsls	r1, r2, #29
 800154c:	d000      	beq.n	8001550 <__aeabi_ddiv+0x288>
 800154e:	e198      	b.n	8001882 <__aeabi_ddiv+0x5ba>
 8001550:	4659      	mov	r1, fp
 8001552:	01c9      	lsls	r1, r1, #7
 8001554:	d506      	bpl.n	8001564 <__aeabi_ddiv+0x29c>
 8001556:	4659      	mov	r1, fp
 8001558:	4b3e      	ldr	r3, [pc, #248]	@ (8001654 <__aeabi_ddiv+0x38c>)
 800155a:	4019      	ands	r1, r3
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	468b      	mov	fp, r1
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4453      	add	r3, sl
 8001564:	493c      	ldr	r1, [pc, #240]	@ (8001658 <__aeabi_ddiv+0x390>)
 8001566:	428b      	cmp	r3, r1
 8001568:	dd00      	ble.n	800156c <__aeabi_ddiv+0x2a4>
 800156a:	e71a      	b.n	80013a2 <__aeabi_ddiv+0xda>
 800156c:	4659      	mov	r1, fp
 800156e:	08d2      	lsrs	r2, r2, #3
 8001570:	0749      	lsls	r1, r1, #29
 8001572:	4311      	orrs	r1, r2
 8001574:	465a      	mov	r2, fp
 8001576:	055b      	lsls	r3, r3, #21
 8001578:	0254      	lsls	r4, r2, #9
 800157a:	4688      	mov	r8, r1
 800157c:	0b24      	lsrs	r4, r4, #12
 800157e:	0d5b      	lsrs	r3, r3, #21
 8001580:	e702      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001582:	465a      	mov	r2, fp
 8001584:	9b00      	ldr	r3, [sp, #0]
 8001586:	431a      	orrs	r2, r3
 8001588:	d100      	bne.n	800158c <__aeabi_ddiv+0x2c4>
 800158a:	e07e      	b.n	800168a <__aeabi_ddiv+0x3c2>
 800158c:	465b      	mov	r3, fp
 800158e:	2b00      	cmp	r3, #0
 8001590:	d100      	bne.n	8001594 <__aeabi_ddiv+0x2cc>
 8001592:	e100      	b.n	8001796 <__aeabi_ddiv+0x4ce>
 8001594:	4658      	mov	r0, fp
 8001596:	f001 fabb 	bl	8002b10 <__clzsi2>
 800159a:	0002      	movs	r2, r0
 800159c:	0003      	movs	r3, r0
 800159e:	3a0b      	subs	r2, #11
 80015a0:	271d      	movs	r7, #29
 80015a2:	9e00      	ldr	r6, [sp, #0]
 80015a4:	1aba      	subs	r2, r7, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	4658      	mov	r0, fp
 80015aa:	40d6      	lsrs	r6, r2
 80015ac:	3908      	subs	r1, #8
 80015ae:	4088      	lsls	r0, r1
 80015b0:	0032      	movs	r2, r6
 80015b2:	4302      	orrs	r2, r0
 80015b4:	4693      	mov	fp, r2
 80015b6:	9a00      	ldr	r2, [sp, #0]
 80015b8:	408a      	lsls	r2, r1
 80015ba:	4928      	ldr	r1, [pc, #160]	@ (800165c <__aeabi_ddiv+0x394>)
 80015bc:	4453      	add	r3, sl
 80015be:	468a      	mov	sl, r1
 80015c0:	449a      	add	sl, r3
 80015c2:	2300      	movs	r3, #0
 80015c4:	e6c8      	b.n	8001358 <__aeabi_ddiv+0x90>
 80015c6:	465b      	mov	r3, fp
 80015c8:	4303      	orrs	r3, r0
 80015ca:	4699      	mov	r9, r3
 80015cc:	d056      	beq.n	800167c <__aeabi_ddiv+0x3b4>
 80015ce:	465b      	mov	r3, fp
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_ddiv+0x30e>
 80015d4:	e0cd      	b.n	8001772 <__aeabi_ddiv+0x4aa>
 80015d6:	4658      	mov	r0, fp
 80015d8:	f001 fa9a 	bl	8002b10 <__clzsi2>
 80015dc:	230b      	movs	r3, #11
 80015de:	425b      	negs	r3, r3
 80015e0:	469c      	mov	ip, r3
 80015e2:	0002      	movs	r2, r0
 80015e4:	4484      	add	ip, r0
 80015e6:	4666      	mov	r6, ip
 80015e8:	231d      	movs	r3, #29
 80015ea:	1b9b      	subs	r3, r3, r6
 80015ec:	0026      	movs	r6, r4
 80015ee:	0011      	movs	r1, r2
 80015f0:	4658      	mov	r0, fp
 80015f2:	40de      	lsrs	r6, r3
 80015f4:	3908      	subs	r1, #8
 80015f6:	4088      	lsls	r0, r1
 80015f8:	0033      	movs	r3, r6
 80015fa:	4303      	orrs	r3, r0
 80015fc:	4699      	mov	r9, r3
 80015fe:	0023      	movs	r3, r4
 8001600:	408b      	lsls	r3, r1
 8001602:	4698      	mov	r8, r3
 8001604:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <__aeabi_ddiv+0x398>)
 8001606:	2400      	movs	r4, #0
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	469a      	mov	sl, r3
 800160c:	2300      	movs	r3, #0
 800160e:	9303      	str	r3, [sp, #12]
 8001610:	e682      	b.n	8001318 <__aeabi_ddiv+0x50>
 8001612:	465a      	mov	r2, fp
 8001614:	4302      	orrs	r2, r0
 8001616:	4691      	mov	r9, r2
 8001618:	d12a      	bne.n	8001670 <__aeabi_ddiv+0x3a8>
 800161a:	2200      	movs	r2, #0
 800161c:	469a      	mov	sl, r3
 800161e:	2302      	movs	r3, #2
 8001620:	4690      	mov	r8, r2
 8001622:	2408      	movs	r4, #8
 8001624:	9303      	str	r3, [sp, #12]
 8001626:	e677      	b.n	8001318 <__aeabi_ddiv+0x50>
 8001628:	465a      	mov	r2, fp
 800162a:	9b00      	ldr	r3, [sp, #0]
 800162c:	431a      	orrs	r2, r3
 800162e:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <__aeabi_ddiv+0x39c>)
 8001630:	469c      	mov	ip, r3
 8001632:	44e2      	add	sl, ip
 8001634:	2a00      	cmp	r2, #0
 8001636:	d117      	bne.n	8001668 <__aeabi_ddiv+0x3a0>
 8001638:	2302      	movs	r3, #2
 800163a:	431c      	orrs	r4, r3
 800163c:	2300      	movs	r3, #0
 800163e:	469b      	mov	fp, r3
 8001640:	3302      	adds	r3, #2
 8001642:	e689      	b.n	8001358 <__aeabi_ddiv+0x90>
 8001644:	000007ff 	.word	0x000007ff
 8001648:	fffffc01 	.word	0xfffffc01
 800164c:	0800ec90 	.word	0x0800ec90
 8001650:	000003ff 	.word	0x000003ff
 8001654:	feffffff 	.word	0xfeffffff
 8001658:	000007fe 	.word	0x000007fe
 800165c:	000003f3 	.word	0x000003f3
 8001660:	fffffc0d 	.word	0xfffffc0d
 8001664:	fffff801 	.word	0xfffff801
 8001668:	2303      	movs	r3, #3
 800166a:	0032      	movs	r2, r6
 800166c:	431c      	orrs	r4, r3
 800166e:	e673      	b.n	8001358 <__aeabi_ddiv+0x90>
 8001670:	469a      	mov	sl, r3
 8001672:	2303      	movs	r3, #3
 8001674:	46d9      	mov	r9, fp
 8001676:	240c      	movs	r4, #12
 8001678:	9303      	str	r3, [sp, #12]
 800167a:	e64d      	b.n	8001318 <__aeabi_ddiv+0x50>
 800167c:	2300      	movs	r3, #0
 800167e:	4698      	mov	r8, r3
 8001680:	469a      	mov	sl, r3
 8001682:	3301      	adds	r3, #1
 8001684:	2404      	movs	r4, #4
 8001686:	9303      	str	r3, [sp, #12]
 8001688:	e646      	b.n	8001318 <__aeabi_ddiv+0x50>
 800168a:	2301      	movs	r3, #1
 800168c:	431c      	orrs	r4, r3
 800168e:	2300      	movs	r3, #0
 8001690:	469b      	mov	fp, r3
 8001692:	3301      	adds	r3, #1
 8001694:	e660      	b.n	8001358 <__aeabi_ddiv+0x90>
 8001696:	2300      	movs	r3, #0
 8001698:	2480      	movs	r4, #128	@ 0x80
 800169a:	4698      	mov	r8, r3
 800169c:	2600      	movs	r6, #0
 800169e:	4b92      	ldr	r3, [pc, #584]	@ (80018e8 <__aeabi_ddiv+0x620>)
 80016a0:	0324      	lsls	r4, r4, #12
 80016a2:	e671      	b.n	8001388 <__aeabi_ddiv+0xc0>
 80016a4:	2201      	movs	r2, #1
 80016a6:	4252      	negs	r2, r2
 80016a8:	2101      	movs	r1, #1
 80016aa:	1ac9      	subs	r1, r1, r3
 80016ac:	2938      	cmp	r1, #56	@ 0x38
 80016ae:	dd00      	ble.n	80016b2 <__aeabi_ddiv+0x3ea>
 80016b0:	e666      	b.n	8001380 <__aeabi_ddiv+0xb8>
 80016b2:	291f      	cmp	r1, #31
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_ddiv+0x3f0>
 80016b6:	e0ab      	b.n	8001810 <__aeabi_ddiv+0x548>
 80016b8:	201f      	movs	r0, #31
 80016ba:	4240      	negs	r0, r0
 80016bc:	1ac3      	subs	r3, r0, r3
 80016be:	4658      	mov	r0, fp
 80016c0:	40d8      	lsrs	r0, r3
 80016c2:	0003      	movs	r3, r0
 80016c4:	2920      	cmp	r1, #32
 80016c6:	d004      	beq.n	80016d2 <__aeabi_ddiv+0x40a>
 80016c8:	4658      	mov	r0, fp
 80016ca:	4988      	ldr	r1, [pc, #544]	@ (80018ec <__aeabi_ddiv+0x624>)
 80016cc:	4451      	add	r1, sl
 80016ce:	4088      	lsls	r0, r1
 80016d0:	4302      	orrs	r2, r0
 80016d2:	1e51      	subs	r1, r2, #1
 80016d4:	418a      	sbcs	r2, r1
 80016d6:	431a      	orrs	r2, r3
 80016d8:	2307      	movs	r3, #7
 80016da:	0019      	movs	r1, r3
 80016dc:	2400      	movs	r4, #0
 80016de:	4011      	ands	r1, r2
 80016e0:	4213      	tst	r3, r2
 80016e2:	d00c      	beq.n	80016fe <__aeabi_ddiv+0x436>
 80016e4:	230f      	movs	r3, #15
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d100      	bne.n	80016ee <__aeabi_ddiv+0x426>
 80016ec:	e0f9      	b.n	80018e2 <__aeabi_ddiv+0x61a>
 80016ee:	1d11      	adds	r1, r2, #4
 80016f0:	4291      	cmp	r1, r2
 80016f2:	419b      	sbcs	r3, r3
 80016f4:	000a      	movs	r2, r1
 80016f6:	425b      	negs	r3, r3
 80016f8:	0759      	lsls	r1, r3, #29
 80016fa:	025b      	lsls	r3, r3, #9
 80016fc:	0b1c      	lsrs	r4, r3, #12
 80016fe:	08d2      	lsrs	r2, r2, #3
 8001700:	430a      	orrs	r2, r1
 8001702:	4690      	mov	r8, r2
 8001704:	2300      	movs	r3, #0
 8001706:	e63f      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001708:	2480      	movs	r4, #128	@ 0x80
 800170a:	464b      	mov	r3, r9
 800170c:	0324      	lsls	r4, r4, #12
 800170e:	4223      	tst	r3, r4
 8001710:	d009      	beq.n	8001726 <__aeabi_ddiv+0x45e>
 8001712:	465b      	mov	r3, fp
 8001714:	4223      	tst	r3, r4
 8001716:	d106      	bne.n	8001726 <__aeabi_ddiv+0x45e>
 8001718:	431c      	orrs	r4, r3
 800171a:	0324      	lsls	r4, r4, #12
 800171c:	002e      	movs	r6, r5
 800171e:	4690      	mov	r8, r2
 8001720:	4b71      	ldr	r3, [pc, #452]	@ (80018e8 <__aeabi_ddiv+0x620>)
 8001722:	0b24      	lsrs	r4, r4, #12
 8001724:	e630      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001726:	2480      	movs	r4, #128	@ 0x80
 8001728:	464b      	mov	r3, r9
 800172a:	0324      	lsls	r4, r4, #12
 800172c:	431c      	orrs	r4, r3
 800172e:	0324      	lsls	r4, r4, #12
 8001730:	9e02      	ldr	r6, [sp, #8]
 8001732:	4b6d      	ldr	r3, [pc, #436]	@ (80018e8 <__aeabi_ddiv+0x620>)
 8001734:	0b24      	lsrs	r4, r4, #12
 8001736:	e627      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001738:	2b00      	cmp	r3, #0
 800173a:	d100      	bne.n	800173e <__aeabi_ddiv+0x476>
 800173c:	e700      	b.n	8001540 <__aeabi_ddiv+0x278>
 800173e:	9800      	ldr	r0, [sp, #0]
 8001740:	1e51      	subs	r1, r2, #1
 8001742:	4684      	mov	ip, r0
 8001744:	4464      	add	r4, ip
 8001746:	4284      	cmp	r4, r0
 8001748:	d200      	bcs.n	800174c <__aeabi_ddiv+0x484>
 800174a:	e084      	b.n	8001856 <__aeabi_ddiv+0x58e>
 800174c:	42bc      	cmp	r4, r7
 800174e:	d200      	bcs.n	8001752 <__aeabi_ddiv+0x48a>
 8001750:	e0ae      	b.n	80018b0 <__aeabi_ddiv+0x5e8>
 8001752:	d100      	bne.n	8001756 <__aeabi_ddiv+0x48e>
 8001754:	e0c1      	b.n	80018da <__aeabi_ddiv+0x612>
 8001756:	000a      	movs	r2, r1
 8001758:	e6f0      	b.n	800153c <__aeabi_ddiv+0x274>
 800175a:	4542      	cmp	r2, r8
 800175c:	d900      	bls.n	8001760 <__aeabi_ddiv+0x498>
 800175e:	e62c      	b.n	80013ba <__aeabi_ddiv+0xf2>
 8001760:	464b      	mov	r3, r9
 8001762:	07dc      	lsls	r4, r3, #31
 8001764:	0858      	lsrs	r0, r3, #1
 8001766:	4643      	mov	r3, r8
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	431c      	orrs	r4, r3
 800176c:	4643      	mov	r3, r8
 800176e:	07df      	lsls	r7, r3, #31
 8001770:	e62a      	b.n	80013c8 <__aeabi_ddiv+0x100>
 8001772:	f001 f9cd 	bl	8002b10 <__clzsi2>
 8001776:	2315      	movs	r3, #21
 8001778:	469c      	mov	ip, r3
 800177a:	4484      	add	ip, r0
 800177c:	0002      	movs	r2, r0
 800177e:	4663      	mov	r3, ip
 8001780:	3220      	adds	r2, #32
 8001782:	2b1c      	cmp	r3, #28
 8001784:	dc00      	bgt.n	8001788 <__aeabi_ddiv+0x4c0>
 8001786:	e72e      	b.n	80015e6 <__aeabi_ddiv+0x31e>
 8001788:	0023      	movs	r3, r4
 800178a:	3808      	subs	r0, #8
 800178c:	4083      	lsls	r3, r0
 800178e:	4699      	mov	r9, r3
 8001790:	2300      	movs	r3, #0
 8001792:	4698      	mov	r8, r3
 8001794:	e736      	b.n	8001604 <__aeabi_ddiv+0x33c>
 8001796:	f001 f9bb 	bl	8002b10 <__clzsi2>
 800179a:	0002      	movs	r2, r0
 800179c:	0003      	movs	r3, r0
 800179e:	3215      	adds	r2, #21
 80017a0:	3320      	adds	r3, #32
 80017a2:	2a1c      	cmp	r2, #28
 80017a4:	dc00      	bgt.n	80017a8 <__aeabi_ddiv+0x4e0>
 80017a6:	e6fb      	b.n	80015a0 <__aeabi_ddiv+0x2d8>
 80017a8:	9900      	ldr	r1, [sp, #0]
 80017aa:	3808      	subs	r0, #8
 80017ac:	4081      	lsls	r1, r0
 80017ae:	2200      	movs	r2, #0
 80017b0:	468b      	mov	fp, r1
 80017b2:	e702      	b.n	80015ba <__aeabi_ddiv+0x2f2>
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	468c      	mov	ip, r1
 80017ba:	4464      	add	r4, ip
 80017bc:	42a1      	cmp	r1, r4
 80017be:	d900      	bls.n	80017c2 <__aeabi_ddiv+0x4fa>
 80017c0:	e69a      	b.n	80014f8 <__aeabi_ddiv+0x230>
 80017c2:	42a2      	cmp	r2, r4
 80017c4:	d800      	bhi.n	80017c8 <__aeabi_ddiv+0x500>
 80017c6:	e697      	b.n	80014f8 <__aeabi_ddiv+0x230>
 80017c8:	1e83      	subs	r3, r0, #2
 80017ca:	4464      	add	r4, ip
 80017cc:	e694      	b.n	80014f8 <__aeabi_ddiv+0x230>
 80017ce:	46ac      	mov	ip, r5
 80017d0:	4461      	add	r1, ip
 80017d2:	3f01      	subs	r7, #1
 80017d4:	428d      	cmp	r5, r1
 80017d6:	d900      	bls.n	80017da <__aeabi_ddiv+0x512>
 80017d8:	e680      	b.n	80014dc <__aeabi_ddiv+0x214>
 80017da:	428a      	cmp	r2, r1
 80017dc:	d800      	bhi.n	80017e0 <__aeabi_ddiv+0x518>
 80017de:	e67d      	b.n	80014dc <__aeabi_ddiv+0x214>
 80017e0:	1e87      	subs	r7, r0, #2
 80017e2:	4461      	add	r1, ip
 80017e4:	e67a      	b.n	80014dc <__aeabi_ddiv+0x214>
 80017e6:	4285      	cmp	r5, r0
 80017e8:	d000      	beq.n	80017ec <__aeabi_ddiv+0x524>
 80017ea:	e65f      	b.n	80014ac <__aeabi_ddiv+0x1e4>
 80017ec:	45b9      	cmp	r9, r7
 80017ee:	d900      	bls.n	80017f2 <__aeabi_ddiv+0x52a>
 80017f0:	e65c      	b.n	80014ac <__aeabi_ddiv+0x1e4>
 80017f2:	e656      	b.n	80014a2 <__aeabi_ddiv+0x1da>
 80017f4:	42a2      	cmp	r2, r4
 80017f6:	d800      	bhi.n	80017fa <__aeabi_ddiv+0x532>
 80017f8:	e61a      	b.n	8001430 <__aeabi_ddiv+0x168>
 80017fa:	1e83      	subs	r3, r0, #2
 80017fc:	4464      	add	r4, ip
 80017fe:	e617      	b.n	8001430 <__aeabi_ddiv+0x168>
 8001800:	428a      	cmp	r2, r1
 8001802:	d800      	bhi.n	8001806 <__aeabi_ddiv+0x53e>
 8001804:	e600      	b.n	8001408 <__aeabi_ddiv+0x140>
 8001806:	46ac      	mov	ip, r5
 8001808:	1e83      	subs	r3, r0, #2
 800180a:	4698      	mov	r8, r3
 800180c:	4461      	add	r1, ip
 800180e:	e5fb      	b.n	8001408 <__aeabi_ddiv+0x140>
 8001810:	4837      	ldr	r0, [pc, #220]	@ (80018f0 <__aeabi_ddiv+0x628>)
 8001812:	0014      	movs	r4, r2
 8001814:	4450      	add	r0, sl
 8001816:	4082      	lsls	r2, r0
 8001818:	465b      	mov	r3, fp
 800181a:	0017      	movs	r7, r2
 800181c:	4083      	lsls	r3, r0
 800181e:	40cc      	lsrs	r4, r1
 8001820:	1e7a      	subs	r2, r7, #1
 8001822:	4197      	sbcs	r7, r2
 8001824:	4323      	orrs	r3, r4
 8001826:	433b      	orrs	r3, r7
 8001828:	001a      	movs	r2, r3
 800182a:	465b      	mov	r3, fp
 800182c:	40cb      	lsrs	r3, r1
 800182e:	0751      	lsls	r1, r2, #29
 8001830:	d009      	beq.n	8001846 <__aeabi_ddiv+0x57e>
 8001832:	210f      	movs	r1, #15
 8001834:	4011      	ands	r1, r2
 8001836:	2904      	cmp	r1, #4
 8001838:	d005      	beq.n	8001846 <__aeabi_ddiv+0x57e>
 800183a:	1d11      	adds	r1, r2, #4
 800183c:	4291      	cmp	r1, r2
 800183e:	4192      	sbcs	r2, r2
 8001840:	4252      	negs	r2, r2
 8001842:	189b      	adds	r3, r3, r2
 8001844:	000a      	movs	r2, r1
 8001846:	0219      	lsls	r1, r3, #8
 8001848:	d400      	bmi.n	800184c <__aeabi_ddiv+0x584>
 800184a:	e755      	b.n	80016f8 <__aeabi_ddiv+0x430>
 800184c:	2200      	movs	r2, #0
 800184e:	2301      	movs	r3, #1
 8001850:	2400      	movs	r4, #0
 8001852:	4690      	mov	r8, r2
 8001854:	e598      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001856:	000a      	movs	r2, r1
 8001858:	42bc      	cmp	r4, r7
 800185a:	d000      	beq.n	800185e <__aeabi_ddiv+0x596>
 800185c:	e66e      	b.n	800153c <__aeabi_ddiv+0x274>
 800185e:	454b      	cmp	r3, r9
 8001860:	d000      	beq.n	8001864 <__aeabi_ddiv+0x59c>
 8001862:	e66b      	b.n	800153c <__aeabi_ddiv+0x274>
 8001864:	e66c      	b.n	8001540 <__aeabi_ddiv+0x278>
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <__aeabi_ddiv+0x62c>)
 8001868:	4a23      	ldr	r2, [pc, #140]	@ (80018f8 <__aeabi_ddiv+0x630>)
 800186a:	4453      	add	r3, sl
 800186c:	4592      	cmp	sl, r2
 800186e:	da00      	bge.n	8001872 <__aeabi_ddiv+0x5aa>
 8001870:	e718      	b.n	80016a4 <__aeabi_ddiv+0x3dc>
 8001872:	2101      	movs	r1, #1
 8001874:	4249      	negs	r1, r1
 8001876:	1d0a      	adds	r2, r1, #4
 8001878:	428a      	cmp	r2, r1
 800187a:	4189      	sbcs	r1, r1
 800187c:	4249      	negs	r1, r1
 800187e:	448b      	add	fp, r1
 8001880:	e666      	b.n	8001550 <__aeabi_ddiv+0x288>
 8001882:	210f      	movs	r1, #15
 8001884:	4011      	ands	r1, r2
 8001886:	2904      	cmp	r1, #4
 8001888:	d100      	bne.n	800188c <__aeabi_ddiv+0x5c4>
 800188a:	e661      	b.n	8001550 <__aeabi_ddiv+0x288>
 800188c:	0011      	movs	r1, r2
 800188e:	e7f2      	b.n	8001876 <__aeabi_ddiv+0x5ae>
 8001890:	42bc      	cmp	r4, r7
 8001892:	d800      	bhi.n	8001896 <__aeabi_ddiv+0x5ce>
 8001894:	e60a      	b.n	80014ac <__aeabi_ddiv+0x1e4>
 8001896:	2302      	movs	r3, #2
 8001898:	425b      	negs	r3, r3
 800189a:	469c      	mov	ip, r3
 800189c:	9900      	ldr	r1, [sp, #0]
 800189e:	444f      	add	r7, r9
 80018a0:	454f      	cmp	r7, r9
 80018a2:	419b      	sbcs	r3, r3
 80018a4:	44e3      	add	fp, ip
 80018a6:	468c      	mov	ip, r1
 80018a8:	425b      	negs	r3, r3
 80018aa:	4463      	add	r3, ip
 80018ac:	18c0      	adds	r0, r0, r3
 80018ae:	e5ff      	b.n	80014b0 <__aeabi_ddiv+0x1e8>
 80018b0:	4649      	mov	r1, r9
 80018b2:	9d00      	ldr	r5, [sp, #0]
 80018b4:	0048      	lsls	r0, r1, #1
 80018b6:	4548      	cmp	r0, r9
 80018b8:	4189      	sbcs	r1, r1
 80018ba:	46ac      	mov	ip, r5
 80018bc:	4249      	negs	r1, r1
 80018be:	4461      	add	r1, ip
 80018c0:	4681      	mov	r9, r0
 80018c2:	3a02      	subs	r2, #2
 80018c4:	1864      	adds	r4, r4, r1
 80018c6:	e7c7      	b.n	8001858 <__aeabi_ddiv+0x590>
 80018c8:	2480      	movs	r4, #128	@ 0x80
 80018ca:	465b      	mov	r3, fp
 80018cc:	0324      	lsls	r4, r4, #12
 80018ce:	431c      	orrs	r4, r3
 80018d0:	0324      	lsls	r4, r4, #12
 80018d2:	4690      	mov	r8, r2
 80018d4:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <__aeabi_ddiv+0x620>)
 80018d6:	0b24      	lsrs	r4, r4, #12
 80018d8:	e556      	b.n	8001388 <__aeabi_ddiv+0xc0>
 80018da:	4599      	cmp	r9, r3
 80018dc:	d3e8      	bcc.n	80018b0 <__aeabi_ddiv+0x5e8>
 80018de:	000a      	movs	r2, r1
 80018e0:	e7bd      	b.n	800185e <__aeabi_ddiv+0x596>
 80018e2:	2300      	movs	r3, #0
 80018e4:	e708      	b.n	80016f8 <__aeabi_ddiv+0x430>
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	000007ff 	.word	0x000007ff
 80018ec:	0000043e 	.word	0x0000043e
 80018f0:	0000041e 	.word	0x0000041e
 80018f4:	000003ff 	.word	0x000003ff
 80018f8:	fffffc02 	.word	0xfffffc02

080018fc <__eqdf2>:
 80018fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fe:	4657      	mov	r7, sl
 8001900:	46de      	mov	lr, fp
 8001902:	464e      	mov	r6, r9
 8001904:	4645      	mov	r5, r8
 8001906:	b5e0      	push	{r5, r6, r7, lr}
 8001908:	000d      	movs	r5, r1
 800190a:	0004      	movs	r4, r0
 800190c:	0fe8      	lsrs	r0, r5, #31
 800190e:	4683      	mov	fp, r0
 8001910:	0309      	lsls	r1, r1, #12
 8001912:	0fd8      	lsrs	r0, r3, #31
 8001914:	0b09      	lsrs	r1, r1, #12
 8001916:	4682      	mov	sl, r0
 8001918:	4819      	ldr	r0, [pc, #100]	@ (8001980 <__eqdf2+0x84>)
 800191a:	468c      	mov	ip, r1
 800191c:	031f      	lsls	r7, r3, #12
 800191e:	0069      	lsls	r1, r5, #1
 8001920:	005e      	lsls	r6, r3, #1
 8001922:	0d49      	lsrs	r1, r1, #21
 8001924:	0b3f      	lsrs	r7, r7, #12
 8001926:	0d76      	lsrs	r6, r6, #21
 8001928:	4281      	cmp	r1, r0
 800192a:	d018      	beq.n	800195e <__eqdf2+0x62>
 800192c:	4286      	cmp	r6, r0
 800192e:	d00f      	beq.n	8001950 <__eqdf2+0x54>
 8001930:	2001      	movs	r0, #1
 8001932:	42b1      	cmp	r1, r6
 8001934:	d10d      	bne.n	8001952 <__eqdf2+0x56>
 8001936:	45bc      	cmp	ip, r7
 8001938:	d10b      	bne.n	8001952 <__eqdf2+0x56>
 800193a:	4294      	cmp	r4, r2
 800193c:	d109      	bne.n	8001952 <__eqdf2+0x56>
 800193e:	45d3      	cmp	fp, sl
 8001940:	d01c      	beq.n	800197c <__eqdf2+0x80>
 8001942:	2900      	cmp	r1, #0
 8001944:	d105      	bne.n	8001952 <__eqdf2+0x56>
 8001946:	4660      	mov	r0, ip
 8001948:	4320      	orrs	r0, r4
 800194a:	1e43      	subs	r3, r0, #1
 800194c:	4198      	sbcs	r0, r3
 800194e:	e000      	b.n	8001952 <__eqdf2+0x56>
 8001950:	2001      	movs	r0, #1
 8001952:	bcf0      	pop	{r4, r5, r6, r7}
 8001954:	46bb      	mov	fp, r7
 8001956:	46b2      	mov	sl, r6
 8001958:	46a9      	mov	r9, r5
 800195a:	46a0      	mov	r8, r4
 800195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195e:	2001      	movs	r0, #1
 8001960:	428e      	cmp	r6, r1
 8001962:	d1f6      	bne.n	8001952 <__eqdf2+0x56>
 8001964:	4661      	mov	r1, ip
 8001966:	4339      	orrs	r1, r7
 8001968:	000f      	movs	r7, r1
 800196a:	4317      	orrs	r7, r2
 800196c:	4327      	orrs	r7, r4
 800196e:	d1f0      	bne.n	8001952 <__eqdf2+0x56>
 8001970:	465b      	mov	r3, fp
 8001972:	4652      	mov	r2, sl
 8001974:	1a98      	subs	r0, r3, r2
 8001976:	1e43      	subs	r3, r0, #1
 8001978:	4198      	sbcs	r0, r3
 800197a:	e7ea      	b.n	8001952 <__eqdf2+0x56>
 800197c:	2000      	movs	r0, #0
 800197e:	e7e8      	b.n	8001952 <__eqdf2+0x56>
 8001980:	000007ff 	.word	0x000007ff

08001984 <__gedf2>:
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	4657      	mov	r7, sl
 8001988:	464e      	mov	r6, r9
 800198a:	4645      	mov	r5, r8
 800198c:	46de      	mov	lr, fp
 800198e:	b5e0      	push	{r5, r6, r7, lr}
 8001990:	000d      	movs	r5, r1
 8001992:	030f      	lsls	r7, r1, #12
 8001994:	0b39      	lsrs	r1, r7, #12
 8001996:	b083      	sub	sp, #12
 8001998:	0004      	movs	r4, r0
 800199a:	4680      	mov	r8, r0
 800199c:	9101      	str	r1, [sp, #4]
 800199e:	0058      	lsls	r0, r3, #1
 80019a0:	0fe9      	lsrs	r1, r5, #31
 80019a2:	4f31      	ldr	r7, [pc, #196]	@ (8001a68 <__gedf2+0xe4>)
 80019a4:	0d40      	lsrs	r0, r0, #21
 80019a6:	468c      	mov	ip, r1
 80019a8:	006e      	lsls	r6, r5, #1
 80019aa:	0319      	lsls	r1, r3, #12
 80019ac:	4682      	mov	sl, r0
 80019ae:	4691      	mov	r9, r2
 80019b0:	0d76      	lsrs	r6, r6, #21
 80019b2:	0b09      	lsrs	r1, r1, #12
 80019b4:	0fd8      	lsrs	r0, r3, #31
 80019b6:	42be      	cmp	r6, r7
 80019b8:	d01f      	beq.n	80019fa <__gedf2+0x76>
 80019ba:	45ba      	cmp	sl, r7
 80019bc:	d00f      	beq.n	80019de <__gedf2+0x5a>
 80019be:	2e00      	cmp	r6, #0
 80019c0:	d12f      	bne.n	8001a22 <__gedf2+0x9e>
 80019c2:	4655      	mov	r5, sl
 80019c4:	9e01      	ldr	r6, [sp, #4]
 80019c6:	4334      	orrs	r4, r6
 80019c8:	2d00      	cmp	r5, #0
 80019ca:	d127      	bne.n	8001a1c <__gedf2+0x98>
 80019cc:	430a      	orrs	r2, r1
 80019ce:	d03a      	beq.n	8001a46 <__gedf2+0xc2>
 80019d0:	2c00      	cmp	r4, #0
 80019d2:	d145      	bne.n	8001a60 <__gedf2+0xdc>
 80019d4:	2800      	cmp	r0, #0
 80019d6:	d11a      	bne.n	8001a0e <__gedf2+0x8a>
 80019d8:	2001      	movs	r0, #1
 80019da:	4240      	negs	r0, r0
 80019dc:	e017      	b.n	8001a0e <__gedf2+0x8a>
 80019de:	4311      	orrs	r1, r2
 80019e0:	d13b      	bne.n	8001a5a <__gedf2+0xd6>
 80019e2:	2e00      	cmp	r6, #0
 80019e4:	d102      	bne.n	80019ec <__gedf2+0x68>
 80019e6:	9f01      	ldr	r7, [sp, #4]
 80019e8:	4327      	orrs	r7, r4
 80019ea:	d0f3      	beq.n	80019d4 <__gedf2+0x50>
 80019ec:	4584      	cmp	ip, r0
 80019ee:	d109      	bne.n	8001a04 <__gedf2+0x80>
 80019f0:	4663      	mov	r3, ip
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <__gedf2+0x54>
 80019f6:	4660      	mov	r0, ip
 80019f8:	e009      	b.n	8001a0e <__gedf2+0x8a>
 80019fa:	9f01      	ldr	r7, [sp, #4]
 80019fc:	4327      	orrs	r7, r4
 80019fe:	d12c      	bne.n	8001a5a <__gedf2+0xd6>
 8001a00:	45b2      	cmp	sl, r6
 8001a02:	d024      	beq.n	8001a4e <__gedf2+0xca>
 8001a04:	4663      	mov	r3, ip
 8001a06:	2002      	movs	r0, #2
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	4018      	ands	r0, r3
 8001a0c:	3801      	subs	r0, #1
 8001a0e:	b003      	add	sp, #12
 8001a10:	bcf0      	pop	{r4, r5, r6, r7}
 8001a12:	46bb      	mov	fp, r7
 8001a14:	46b2      	mov	sl, r6
 8001a16:	46a9      	mov	r9, r5
 8001a18:	46a0      	mov	r8, r4
 8001a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a1c:	2c00      	cmp	r4, #0
 8001a1e:	d0d9      	beq.n	80019d4 <__gedf2+0x50>
 8001a20:	e7e4      	b.n	80019ec <__gedf2+0x68>
 8001a22:	4654      	mov	r4, sl
 8001a24:	2c00      	cmp	r4, #0
 8001a26:	d0ed      	beq.n	8001a04 <__gedf2+0x80>
 8001a28:	4584      	cmp	ip, r0
 8001a2a:	d1eb      	bne.n	8001a04 <__gedf2+0x80>
 8001a2c:	4556      	cmp	r6, sl
 8001a2e:	dce9      	bgt.n	8001a04 <__gedf2+0x80>
 8001a30:	dbde      	blt.n	80019f0 <__gedf2+0x6c>
 8001a32:	9b01      	ldr	r3, [sp, #4]
 8001a34:	428b      	cmp	r3, r1
 8001a36:	d8e5      	bhi.n	8001a04 <__gedf2+0x80>
 8001a38:	d1da      	bne.n	80019f0 <__gedf2+0x6c>
 8001a3a:	45c8      	cmp	r8, r9
 8001a3c:	d8e2      	bhi.n	8001a04 <__gedf2+0x80>
 8001a3e:	2000      	movs	r0, #0
 8001a40:	45c8      	cmp	r8, r9
 8001a42:	d2e4      	bcs.n	8001a0e <__gedf2+0x8a>
 8001a44:	e7d4      	b.n	80019f0 <__gedf2+0x6c>
 8001a46:	2000      	movs	r0, #0
 8001a48:	2c00      	cmp	r4, #0
 8001a4a:	d0e0      	beq.n	8001a0e <__gedf2+0x8a>
 8001a4c:	e7da      	b.n	8001a04 <__gedf2+0x80>
 8001a4e:	4311      	orrs	r1, r2
 8001a50:	d103      	bne.n	8001a5a <__gedf2+0xd6>
 8001a52:	4584      	cmp	ip, r0
 8001a54:	d1d6      	bne.n	8001a04 <__gedf2+0x80>
 8001a56:	2000      	movs	r0, #0
 8001a58:	e7d9      	b.n	8001a0e <__gedf2+0x8a>
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	4240      	negs	r0, r0
 8001a5e:	e7d6      	b.n	8001a0e <__gedf2+0x8a>
 8001a60:	4584      	cmp	ip, r0
 8001a62:	d0e6      	beq.n	8001a32 <__gedf2+0xae>
 8001a64:	e7ce      	b.n	8001a04 <__gedf2+0x80>
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	000007ff 	.word	0x000007ff

08001a6c <__ledf2>:
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	4657      	mov	r7, sl
 8001a70:	464e      	mov	r6, r9
 8001a72:	4645      	mov	r5, r8
 8001a74:	46de      	mov	lr, fp
 8001a76:	b5e0      	push	{r5, r6, r7, lr}
 8001a78:	000d      	movs	r5, r1
 8001a7a:	030f      	lsls	r7, r1, #12
 8001a7c:	0004      	movs	r4, r0
 8001a7e:	4680      	mov	r8, r0
 8001a80:	0fe8      	lsrs	r0, r5, #31
 8001a82:	0b39      	lsrs	r1, r7, #12
 8001a84:	4684      	mov	ip, r0
 8001a86:	b083      	sub	sp, #12
 8001a88:	0058      	lsls	r0, r3, #1
 8001a8a:	4f30      	ldr	r7, [pc, #192]	@ (8001b4c <__ledf2+0xe0>)
 8001a8c:	0d40      	lsrs	r0, r0, #21
 8001a8e:	9101      	str	r1, [sp, #4]
 8001a90:	031e      	lsls	r6, r3, #12
 8001a92:	0069      	lsls	r1, r5, #1
 8001a94:	4682      	mov	sl, r0
 8001a96:	4691      	mov	r9, r2
 8001a98:	0d49      	lsrs	r1, r1, #21
 8001a9a:	0b36      	lsrs	r6, r6, #12
 8001a9c:	0fd8      	lsrs	r0, r3, #31
 8001a9e:	42b9      	cmp	r1, r7
 8001aa0:	d020      	beq.n	8001ae4 <__ledf2+0x78>
 8001aa2:	45ba      	cmp	sl, r7
 8001aa4:	d00f      	beq.n	8001ac6 <__ledf2+0x5a>
 8001aa6:	2900      	cmp	r1, #0
 8001aa8:	d12b      	bne.n	8001b02 <__ledf2+0x96>
 8001aaa:	9901      	ldr	r1, [sp, #4]
 8001aac:	430c      	orrs	r4, r1
 8001aae:	4651      	mov	r1, sl
 8001ab0:	2900      	cmp	r1, #0
 8001ab2:	d137      	bne.n	8001b24 <__ledf2+0xb8>
 8001ab4:	4332      	orrs	r2, r6
 8001ab6:	d038      	beq.n	8001b2a <__ledf2+0xbe>
 8001ab8:	2c00      	cmp	r4, #0
 8001aba:	d144      	bne.n	8001b46 <__ledf2+0xda>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d119      	bne.n	8001af4 <__ledf2+0x88>
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	4240      	negs	r0, r0
 8001ac4:	e016      	b.n	8001af4 <__ledf2+0x88>
 8001ac6:	4316      	orrs	r6, r2
 8001ac8:	d113      	bne.n	8001af2 <__ledf2+0x86>
 8001aca:	2900      	cmp	r1, #0
 8001acc:	d102      	bne.n	8001ad4 <__ledf2+0x68>
 8001ace:	9f01      	ldr	r7, [sp, #4]
 8001ad0:	4327      	orrs	r7, r4
 8001ad2:	d0f3      	beq.n	8001abc <__ledf2+0x50>
 8001ad4:	4584      	cmp	ip, r0
 8001ad6:	d020      	beq.n	8001b1a <__ledf2+0xae>
 8001ad8:	4663      	mov	r3, ip
 8001ada:	2002      	movs	r0, #2
 8001adc:	3b01      	subs	r3, #1
 8001ade:	4018      	ands	r0, r3
 8001ae0:	3801      	subs	r0, #1
 8001ae2:	e007      	b.n	8001af4 <__ledf2+0x88>
 8001ae4:	9f01      	ldr	r7, [sp, #4]
 8001ae6:	4327      	orrs	r7, r4
 8001ae8:	d103      	bne.n	8001af2 <__ledf2+0x86>
 8001aea:	458a      	cmp	sl, r1
 8001aec:	d1f4      	bne.n	8001ad8 <__ledf2+0x6c>
 8001aee:	4316      	orrs	r6, r2
 8001af0:	d01f      	beq.n	8001b32 <__ledf2+0xc6>
 8001af2:	2002      	movs	r0, #2
 8001af4:	b003      	add	sp, #12
 8001af6:	bcf0      	pop	{r4, r5, r6, r7}
 8001af8:	46bb      	mov	fp, r7
 8001afa:	46b2      	mov	sl, r6
 8001afc:	46a9      	mov	r9, r5
 8001afe:	46a0      	mov	r8, r4
 8001b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b02:	4654      	mov	r4, sl
 8001b04:	2c00      	cmp	r4, #0
 8001b06:	d0e7      	beq.n	8001ad8 <__ledf2+0x6c>
 8001b08:	4584      	cmp	ip, r0
 8001b0a:	d1e5      	bne.n	8001ad8 <__ledf2+0x6c>
 8001b0c:	4551      	cmp	r1, sl
 8001b0e:	dce3      	bgt.n	8001ad8 <__ledf2+0x6c>
 8001b10:	db03      	blt.n	8001b1a <__ledf2+0xae>
 8001b12:	9b01      	ldr	r3, [sp, #4]
 8001b14:	42b3      	cmp	r3, r6
 8001b16:	d8df      	bhi.n	8001ad8 <__ledf2+0x6c>
 8001b18:	d00f      	beq.n	8001b3a <__ledf2+0xce>
 8001b1a:	4663      	mov	r3, ip
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0cf      	beq.n	8001ac0 <__ledf2+0x54>
 8001b20:	4660      	mov	r0, ip
 8001b22:	e7e7      	b.n	8001af4 <__ledf2+0x88>
 8001b24:	2c00      	cmp	r4, #0
 8001b26:	d0c9      	beq.n	8001abc <__ledf2+0x50>
 8001b28:	e7d4      	b.n	8001ad4 <__ledf2+0x68>
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	2c00      	cmp	r4, #0
 8001b2e:	d0e1      	beq.n	8001af4 <__ledf2+0x88>
 8001b30:	e7d2      	b.n	8001ad8 <__ledf2+0x6c>
 8001b32:	4584      	cmp	ip, r0
 8001b34:	d1d0      	bne.n	8001ad8 <__ledf2+0x6c>
 8001b36:	2000      	movs	r0, #0
 8001b38:	e7dc      	b.n	8001af4 <__ledf2+0x88>
 8001b3a:	45c8      	cmp	r8, r9
 8001b3c:	d8cc      	bhi.n	8001ad8 <__ledf2+0x6c>
 8001b3e:	2000      	movs	r0, #0
 8001b40:	45c8      	cmp	r8, r9
 8001b42:	d2d7      	bcs.n	8001af4 <__ledf2+0x88>
 8001b44:	e7e9      	b.n	8001b1a <__ledf2+0xae>
 8001b46:	4584      	cmp	ip, r0
 8001b48:	d0e3      	beq.n	8001b12 <__ledf2+0xa6>
 8001b4a:	e7c5      	b.n	8001ad8 <__ledf2+0x6c>
 8001b4c:	000007ff 	.word	0x000007ff

08001b50 <__aeabi_dmul>:
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	4657      	mov	r7, sl
 8001b54:	46de      	mov	lr, fp
 8001b56:	464e      	mov	r6, r9
 8001b58:	4645      	mov	r5, r8
 8001b5a:	b5e0      	push	{r5, r6, r7, lr}
 8001b5c:	001f      	movs	r7, r3
 8001b5e:	030b      	lsls	r3, r1, #12
 8001b60:	0b1b      	lsrs	r3, r3, #12
 8001b62:	0016      	movs	r6, r2
 8001b64:	469a      	mov	sl, r3
 8001b66:	0fca      	lsrs	r2, r1, #31
 8001b68:	004b      	lsls	r3, r1, #1
 8001b6a:	0004      	movs	r4, r0
 8001b6c:	4693      	mov	fp, r2
 8001b6e:	b087      	sub	sp, #28
 8001b70:	0d5b      	lsrs	r3, r3, #21
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dmul+0x26>
 8001b74:	e0d5      	b.n	8001d22 <__aeabi_dmul+0x1d2>
 8001b76:	4abb      	ldr	r2, [pc, #748]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dmul+0x2e>
 8001b7c:	e0f8      	b.n	8001d70 <__aeabi_dmul+0x220>
 8001b7e:	4651      	mov	r1, sl
 8001b80:	0f42      	lsrs	r2, r0, #29
 8001b82:	00c9      	lsls	r1, r1, #3
 8001b84:	430a      	orrs	r2, r1
 8001b86:	2180      	movs	r1, #128	@ 0x80
 8001b88:	0409      	lsls	r1, r1, #16
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	00c2      	lsls	r2, r0, #3
 8001b8e:	4691      	mov	r9, r2
 8001b90:	4ab5      	ldr	r2, [pc, #724]	@ (8001e68 <__aeabi_dmul+0x318>)
 8001b92:	468a      	mov	sl, r1
 8001b94:	189d      	adds	r5, r3, r2
 8001b96:	2300      	movs	r3, #0
 8001b98:	4698      	mov	r8, r3
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	033c      	lsls	r4, r7, #12
 8001b9e:	007b      	lsls	r3, r7, #1
 8001ba0:	0ffa      	lsrs	r2, r7, #31
 8001ba2:	0030      	movs	r0, r6
 8001ba4:	0b24      	lsrs	r4, r4, #12
 8001ba6:	0d5b      	lsrs	r3, r3, #21
 8001ba8:	9200      	str	r2, [sp, #0]
 8001baa:	d100      	bne.n	8001bae <__aeabi_dmul+0x5e>
 8001bac:	e096      	b.n	8001cdc <__aeabi_dmul+0x18c>
 8001bae:	4aad      	ldr	r2, [pc, #692]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <__aeabi_dmul+0xc8>
 8001bb4:	0f72      	lsrs	r2, r6, #29
 8001bb6:	00e4      	lsls	r4, r4, #3
 8001bb8:	4322      	orrs	r2, r4
 8001bba:	2480      	movs	r4, #128	@ 0x80
 8001bbc:	0424      	lsls	r4, r4, #16
 8001bbe:	4314      	orrs	r4, r2
 8001bc0:	4aa9      	ldr	r2, [pc, #676]	@ (8001e68 <__aeabi_dmul+0x318>)
 8001bc2:	00f0      	lsls	r0, r6, #3
 8001bc4:	4694      	mov	ip, r2
 8001bc6:	4463      	add	r3, ip
 8001bc8:	195b      	adds	r3, r3, r5
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	9201      	str	r2, [sp, #4]
 8001bce:	4642      	mov	r2, r8
 8001bd0:	2600      	movs	r6, #0
 8001bd2:	2a0a      	cmp	r2, #10
 8001bd4:	dc42      	bgt.n	8001c5c <__aeabi_dmul+0x10c>
 8001bd6:	465a      	mov	r2, fp
 8001bd8:	9900      	ldr	r1, [sp, #0]
 8001bda:	404a      	eors	r2, r1
 8001bdc:	4693      	mov	fp, r2
 8001bde:	4642      	mov	r2, r8
 8001be0:	2a02      	cmp	r2, #2
 8001be2:	dc32      	bgt.n	8001c4a <__aeabi_dmul+0xfa>
 8001be4:	3a01      	subs	r2, #1
 8001be6:	2a01      	cmp	r2, #1
 8001be8:	d900      	bls.n	8001bec <__aeabi_dmul+0x9c>
 8001bea:	e149      	b.n	8001e80 <__aeabi_dmul+0x330>
 8001bec:	2e02      	cmp	r6, #2
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dmul+0xa2>
 8001bf0:	e0ca      	b.n	8001d88 <__aeabi_dmul+0x238>
 8001bf2:	2e01      	cmp	r6, #1
 8001bf4:	d13d      	bne.n	8001c72 <__aeabi_dmul+0x122>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2400      	movs	r4, #0
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	465a      	mov	r2, fp
 8001c00:	051b      	lsls	r3, r3, #20
 8001c02:	4323      	orrs	r3, r4
 8001c04:	07d2      	lsls	r2, r2, #31
 8001c06:	4313      	orrs	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	b007      	add	sp, #28
 8001c0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c0e:	46bb      	mov	fp, r7
 8001c10:	46b2      	mov	sl, r6
 8001c12:	46a9      	mov	r9, r5
 8001c14:	46a0      	mov	r8, r4
 8001c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c18:	4b92      	ldr	r3, [pc, #584]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001c1a:	4326      	orrs	r6, r4
 8001c1c:	18eb      	adds	r3, r5, r3
 8001c1e:	2e00      	cmp	r6, #0
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dmul+0xd4>
 8001c22:	e0bb      	b.n	8001d9c <__aeabi_dmul+0x24c>
 8001c24:	2203      	movs	r2, #3
 8001c26:	4641      	mov	r1, r8
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	465a      	mov	r2, fp
 8001c2c:	4688      	mov	r8, r1
 8001c2e:	9900      	ldr	r1, [sp, #0]
 8001c30:	404a      	eors	r2, r1
 8001c32:	2180      	movs	r1, #128	@ 0x80
 8001c34:	0109      	lsls	r1, r1, #4
 8001c36:	468c      	mov	ip, r1
 8001c38:	0029      	movs	r1, r5
 8001c3a:	4461      	add	r1, ip
 8001c3c:	9101      	str	r1, [sp, #4]
 8001c3e:	4641      	mov	r1, r8
 8001c40:	290a      	cmp	r1, #10
 8001c42:	dd00      	ble.n	8001c46 <__aeabi_dmul+0xf6>
 8001c44:	e233      	b.n	80020ae <__aeabi_dmul+0x55e>
 8001c46:	4693      	mov	fp, r2
 8001c48:	2603      	movs	r6, #3
 8001c4a:	4642      	mov	r2, r8
 8001c4c:	2701      	movs	r7, #1
 8001c4e:	4097      	lsls	r7, r2
 8001c50:	21a6      	movs	r1, #166	@ 0xa6
 8001c52:	003a      	movs	r2, r7
 8001c54:	00c9      	lsls	r1, r1, #3
 8001c56:	400a      	ands	r2, r1
 8001c58:	420f      	tst	r7, r1
 8001c5a:	d031      	beq.n	8001cc0 <__aeabi_dmul+0x170>
 8001c5c:	9e02      	ldr	r6, [sp, #8]
 8001c5e:	2e02      	cmp	r6, #2
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dmul+0x114>
 8001c62:	e235      	b.n	80020d0 <__aeabi_dmul+0x580>
 8001c64:	2e03      	cmp	r6, #3
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dmul+0x11a>
 8001c68:	e1d2      	b.n	8002010 <__aeabi_dmul+0x4c0>
 8001c6a:	4654      	mov	r4, sl
 8001c6c:	4648      	mov	r0, r9
 8001c6e:	2e01      	cmp	r6, #1
 8001c70:	d0c1      	beq.n	8001bf6 <__aeabi_dmul+0xa6>
 8001c72:	9a01      	ldr	r2, [sp, #4]
 8001c74:	4b7d      	ldr	r3, [pc, #500]	@ (8001e6c <__aeabi_dmul+0x31c>)
 8001c76:	4694      	mov	ip, r2
 8001c78:	4463      	add	r3, ip
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	dc00      	bgt.n	8001c80 <__aeabi_dmul+0x130>
 8001c7e:	e0c0      	b.n	8001e02 <__aeabi_dmul+0x2b2>
 8001c80:	0742      	lsls	r2, r0, #29
 8001c82:	d009      	beq.n	8001c98 <__aeabi_dmul+0x148>
 8001c84:	220f      	movs	r2, #15
 8001c86:	4002      	ands	r2, r0
 8001c88:	2a04      	cmp	r2, #4
 8001c8a:	d005      	beq.n	8001c98 <__aeabi_dmul+0x148>
 8001c8c:	1d02      	adds	r2, r0, #4
 8001c8e:	4282      	cmp	r2, r0
 8001c90:	4180      	sbcs	r0, r0
 8001c92:	4240      	negs	r0, r0
 8001c94:	1824      	adds	r4, r4, r0
 8001c96:	0010      	movs	r0, r2
 8001c98:	01e2      	lsls	r2, r4, #7
 8001c9a:	d506      	bpl.n	8001caa <__aeabi_dmul+0x15a>
 8001c9c:	4b74      	ldr	r3, [pc, #464]	@ (8001e70 <__aeabi_dmul+0x320>)
 8001c9e:	9a01      	ldr	r2, [sp, #4]
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	4694      	mov	ip, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4463      	add	r3, ip
 8001caa:	4a72      	ldr	r2, [pc, #456]	@ (8001e74 <__aeabi_dmul+0x324>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	dc6b      	bgt.n	8001d88 <__aeabi_dmul+0x238>
 8001cb0:	0762      	lsls	r2, r4, #29
 8001cb2:	08c0      	lsrs	r0, r0, #3
 8001cb4:	0264      	lsls	r4, r4, #9
 8001cb6:	055b      	lsls	r3, r3, #21
 8001cb8:	4302      	orrs	r2, r0
 8001cba:	0b24      	lsrs	r4, r4, #12
 8001cbc:	0d5b      	lsrs	r3, r3, #21
 8001cbe:	e79d      	b.n	8001bfc <__aeabi_dmul+0xac>
 8001cc0:	2190      	movs	r1, #144	@ 0x90
 8001cc2:	0089      	lsls	r1, r1, #2
 8001cc4:	420f      	tst	r7, r1
 8001cc6:	d163      	bne.n	8001d90 <__aeabi_dmul+0x240>
 8001cc8:	2288      	movs	r2, #136	@ 0x88
 8001cca:	423a      	tst	r2, r7
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dmul+0x180>
 8001cce:	e0d7      	b.n	8001e80 <__aeabi_dmul+0x330>
 8001cd0:	9b00      	ldr	r3, [sp, #0]
 8001cd2:	46a2      	mov	sl, r4
 8001cd4:	469b      	mov	fp, r3
 8001cd6:	4681      	mov	r9, r0
 8001cd8:	9602      	str	r6, [sp, #8]
 8001cda:	e7bf      	b.n	8001c5c <__aeabi_dmul+0x10c>
 8001cdc:	0023      	movs	r3, r4
 8001cde:	4333      	orrs	r3, r6
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dmul+0x194>
 8001ce2:	e07f      	b.n	8001de4 <__aeabi_dmul+0x294>
 8001ce4:	2c00      	cmp	r4, #0
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dmul+0x19a>
 8001ce8:	e1ad      	b.n	8002046 <__aeabi_dmul+0x4f6>
 8001cea:	0020      	movs	r0, r4
 8001cec:	f000 ff10 	bl	8002b10 <__clzsi2>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	3a0b      	subs	r2, #11
 8001cf6:	201d      	movs	r0, #29
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	1a82      	subs	r2, r0, r2
 8001cfc:	0030      	movs	r0, r6
 8001cfe:	3908      	subs	r1, #8
 8001d00:	40d0      	lsrs	r0, r2
 8001d02:	408c      	lsls	r4, r1
 8001d04:	4304      	orrs	r4, r0
 8001d06:	0030      	movs	r0, r6
 8001d08:	4088      	lsls	r0, r1
 8001d0a:	4a5b      	ldr	r2, [pc, #364]	@ (8001e78 <__aeabi_dmul+0x328>)
 8001d0c:	1aeb      	subs	r3, r5, r3
 8001d0e:	4694      	mov	ip, r2
 8001d10:	4463      	add	r3, ip
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	9201      	str	r2, [sp, #4]
 8001d16:	4642      	mov	r2, r8
 8001d18:	2600      	movs	r6, #0
 8001d1a:	2a0a      	cmp	r2, #10
 8001d1c:	dc00      	bgt.n	8001d20 <__aeabi_dmul+0x1d0>
 8001d1e:	e75a      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001d20:	e79c      	b.n	8001c5c <__aeabi_dmul+0x10c>
 8001d22:	4653      	mov	r3, sl
 8001d24:	4303      	orrs	r3, r0
 8001d26:	4699      	mov	r9, r3
 8001d28:	d054      	beq.n	8001dd4 <__aeabi_dmul+0x284>
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dmul+0x1e2>
 8001d30:	e177      	b.n	8002022 <__aeabi_dmul+0x4d2>
 8001d32:	4650      	mov	r0, sl
 8001d34:	f000 feec 	bl	8002b10 <__clzsi2>
 8001d38:	230b      	movs	r3, #11
 8001d3a:	425b      	negs	r3, r3
 8001d3c:	469c      	mov	ip, r3
 8001d3e:	0002      	movs	r2, r0
 8001d40:	4484      	add	ip, r0
 8001d42:	0011      	movs	r1, r2
 8001d44:	4650      	mov	r0, sl
 8001d46:	3908      	subs	r1, #8
 8001d48:	4088      	lsls	r0, r1
 8001d4a:	231d      	movs	r3, #29
 8001d4c:	4680      	mov	r8, r0
 8001d4e:	4660      	mov	r0, ip
 8001d50:	1a1b      	subs	r3, r3, r0
 8001d52:	0020      	movs	r0, r4
 8001d54:	40d8      	lsrs	r0, r3
 8001d56:	0003      	movs	r3, r0
 8001d58:	4640      	mov	r0, r8
 8001d5a:	4303      	orrs	r3, r0
 8001d5c:	469a      	mov	sl, r3
 8001d5e:	0023      	movs	r3, r4
 8001d60:	408b      	lsls	r3, r1
 8001d62:	4699      	mov	r9, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	4d44      	ldr	r5, [pc, #272]	@ (8001e78 <__aeabi_dmul+0x328>)
 8001d68:	4698      	mov	r8, r3
 8001d6a:	1aad      	subs	r5, r5, r2
 8001d6c:	9302      	str	r3, [sp, #8]
 8001d6e:	e715      	b.n	8001b9c <__aeabi_dmul+0x4c>
 8001d70:	4652      	mov	r2, sl
 8001d72:	4302      	orrs	r2, r0
 8001d74:	4691      	mov	r9, r2
 8001d76:	d126      	bne.n	8001dc6 <__aeabi_dmul+0x276>
 8001d78:	2200      	movs	r2, #0
 8001d7a:	001d      	movs	r5, r3
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	4692      	mov	sl, r2
 8001d80:	3208      	adds	r2, #8
 8001d82:	4690      	mov	r8, r2
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	e709      	b.n	8001b9c <__aeabi_dmul+0x4c>
 8001d88:	2400      	movs	r4, #0
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4b35      	ldr	r3, [pc, #212]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001d8e:	e735      	b.n	8001bfc <__aeabi_dmul+0xac>
 8001d90:	2300      	movs	r3, #0
 8001d92:	2480      	movs	r4, #128	@ 0x80
 8001d94:	469b      	mov	fp, r3
 8001d96:	0324      	lsls	r4, r4, #12
 8001d98:	4b32      	ldr	r3, [pc, #200]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001d9a:	e72f      	b.n	8001bfc <__aeabi_dmul+0xac>
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	4641      	mov	r1, r8
 8001da0:	4311      	orrs	r1, r2
 8001da2:	2280      	movs	r2, #128	@ 0x80
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	4694      	mov	ip, r2
 8001da8:	002a      	movs	r2, r5
 8001daa:	4462      	add	r2, ip
 8001dac:	4688      	mov	r8, r1
 8001dae:	9201      	str	r2, [sp, #4]
 8001db0:	290a      	cmp	r1, #10
 8001db2:	dd00      	ble.n	8001db6 <__aeabi_dmul+0x266>
 8001db4:	e752      	b.n	8001c5c <__aeabi_dmul+0x10c>
 8001db6:	465a      	mov	r2, fp
 8001db8:	2000      	movs	r0, #0
 8001dba:	9900      	ldr	r1, [sp, #0]
 8001dbc:	0004      	movs	r4, r0
 8001dbe:	404a      	eors	r2, r1
 8001dc0:	4693      	mov	fp, r2
 8001dc2:	2602      	movs	r6, #2
 8001dc4:	e70b      	b.n	8001bde <__aeabi_dmul+0x8e>
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	001d      	movs	r5, r3
 8001dca:	2303      	movs	r3, #3
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4690      	mov	r8, r2
 8001dd0:	9302      	str	r3, [sp, #8]
 8001dd2:	e6e3      	b.n	8001b9c <__aeabi_dmul+0x4c>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	469a      	mov	sl, r3
 8001dd8:	3304      	adds	r3, #4
 8001dda:	4698      	mov	r8, r3
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	2500      	movs	r5, #0
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	e6db      	b.n	8001b9c <__aeabi_dmul+0x4c>
 8001de4:	4642      	mov	r2, r8
 8001de6:	3301      	adds	r3, #1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	002b      	movs	r3, r5
 8001dec:	4690      	mov	r8, r2
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	9201      	str	r2, [sp, #4]
 8001df2:	4642      	mov	r2, r8
 8001df4:	2400      	movs	r4, #0
 8001df6:	2000      	movs	r0, #0
 8001df8:	2601      	movs	r6, #1
 8001dfa:	2a0a      	cmp	r2, #10
 8001dfc:	dc00      	bgt.n	8001e00 <__aeabi_dmul+0x2b0>
 8001dfe:	e6ea      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001e00:	e72c      	b.n	8001c5c <__aeabi_dmul+0x10c>
 8001e02:	2201      	movs	r2, #1
 8001e04:	1ad2      	subs	r2, r2, r3
 8001e06:	2a38      	cmp	r2, #56	@ 0x38
 8001e08:	dd00      	ble.n	8001e0c <__aeabi_dmul+0x2bc>
 8001e0a:	e6f4      	b.n	8001bf6 <__aeabi_dmul+0xa6>
 8001e0c:	2a1f      	cmp	r2, #31
 8001e0e:	dc00      	bgt.n	8001e12 <__aeabi_dmul+0x2c2>
 8001e10:	e12a      	b.n	8002068 <__aeabi_dmul+0x518>
 8001e12:	211f      	movs	r1, #31
 8001e14:	4249      	negs	r1, r1
 8001e16:	1acb      	subs	r3, r1, r3
 8001e18:	0021      	movs	r1, r4
 8001e1a:	40d9      	lsrs	r1, r3
 8001e1c:	000b      	movs	r3, r1
 8001e1e:	2a20      	cmp	r2, #32
 8001e20:	d005      	beq.n	8001e2e <__aeabi_dmul+0x2de>
 8001e22:	4a16      	ldr	r2, [pc, #88]	@ (8001e7c <__aeabi_dmul+0x32c>)
 8001e24:	9d01      	ldr	r5, [sp, #4]
 8001e26:	4694      	mov	ip, r2
 8001e28:	4465      	add	r5, ip
 8001e2a:	40ac      	lsls	r4, r5
 8001e2c:	4320      	orrs	r0, r4
 8001e2e:	1e42      	subs	r2, r0, #1
 8001e30:	4190      	sbcs	r0, r2
 8001e32:	4318      	orrs	r0, r3
 8001e34:	2307      	movs	r3, #7
 8001e36:	0019      	movs	r1, r3
 8001e38:	2400      	movs	r4, #0
 8001e3a:	4001      	ands	r1, r0
 8001e3c:	4203      	tst	r3, r0
 8001e3e:	d00c      	beq.n	8001e5a <__aeabi_dmul+0x30a>
 8001e40:	230f      	movs	r3, #15
 8001e42:	4003      	ands	r3, r0
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dmul+0x2fa>
 8001e48:	e140      	b.n	80020cc <__aeabi_dmul+0x57c>
 8001e4a:	1d03      	adds	r3, r0, #4
 8001e4c:	4283      	cmp	r3, r0
 8001e4e:	41a4      	sbcs	r4, r4
 8001e50:	0018      	movs	r0, r3
 8001e52:	4264      	negs	r4, r4
 8001e54:	0761      	lsls	r1, r4, #29
 8001e56:	0264      	lsls	r4, r4, #9
 8001e58:	0b24      	lsrs	r4, r4, #12
 8001e5a:	08c2      	lsrs	r2, r0, #3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	e6cc      	b.n	8001bfc <__aeabi_dmul+0xac>
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	000007ff 	.word	0x000007ff
 8001e68:	fffffc01 	.word	0xfffffc01
 8001e6c:	000003ff 	.word	0x000003ff
 8001e70:	feffffff 	.word	0xfeffffff
 8001e74:	000007fe 	.word	0x000007fe
 8001e78:	fffffc0d 	.word	0xfffffc0d
 8001e7c:	0000043e 	.word	0x0000043e
 8001e80:	4649      	mov	r1, r9
 8001e82:	464a      	mov	r2, r9
 8001e84:	0409      	lsls	r1, r1, #16
 8001e86:	0c09      	lsrs	r1, r1, #16
 8001e88:	000d      	movs	r5, r1
 8001e8a:	0c16      	lsrs	r6, r2, #16
 8001e8c:	0c02      	lsrs	r2, r0, #16
 8001e8e:	0400      	lsls	r0, r0, #16
 8001e90:	0c00      	lsrs	r0, r0, #16
 8001e92:	4345      	muls	r5, r0
 8001e94:	46ac      	mov	ip, r5
 8001e96:	0005      	movs	r5, r0
 8001e98:	4375      	muls	r5, r6
 8001e9a:	46a8      	mov	r8, r5
 8001e9c:	0015      	movs	r5, r2
 8001e9e:	000f      	movs	r7, r1
 8001ea0:	4375      	muls	r5, r6
 8001ea2:	9200      	str	r2, [sp, #0]
 8001ea4:	9502      	str	r5, [sp, #8]
 8001ea6:	002a      	movs	r2, r5
 8001ea8:	9d00      	ldr	r5, [sp, #0]
 8001eaa:	436f      	muls	r7, r5
 8001eac:	4665      	mov	r5, ip
 8001eae:	0c2d      	lsrs	r5, r5, #16
 8001eb0:	46a9      	mov	r9, r5
 8001eb2:	4447      	add	r7, r8
 8001eb4:	444f      	add	r7, r9
 8001eb6:	45b8      	cmp	r8, r7
 8001eb8:	d905      	bls.n	8001ec6 <__aeabi_dmul+0x376>
 8001eba:	0015      	movs	r5, r2
 8001ebc:	2280      	movs	r2, #128	@ 0x80
 8001ebe:	0252      	lsls	r2, r2, #9
 8001ec0:	4690      	mov	r8, r2
 8001ec2:	4445      	add	r5, r8
 8001ec4:	9502      	str	r5, [sp, #8]
 8001ec6:	0c3d      	lsrs	r5, r7, #16
 8001ec8:	9503      	str	r5, [sp, #12]
 8001eca:	4665      	mov	r5, ip
 8001ecc:	042d      	lsls	r5, r5, #16
 8001ece:	043f      	lsls	r7, r7, #16
 8001ed0:	0c2d      	lsrs	r5, r5, #16
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	003d      	movs	r5, r7
 8001ed6:	4465      	add	r5, ip
 8001ed8:	9504      	str	r5, [sp, #16]
 8001eda:	0c25      	lsrs	r5, r4, #16
 8001edc:	0424      	lsls	r4, r4, #16
 8001ede:	0c24      	lsrs	r4, r4, #16
 8001ee0:	46ac      	mov	ip, r5
 8001ee2:	0025      	movs	r5, r4
 8001ee4:	4375      	muls	r5, r6
 8001ee6:	46a8      	mov	r8, r5
 8001ee8:	4665      	mov	r5, ip
 8001eea:	000f      	movs	r7, r1
 8001eec:	4369      	muls	r1, r5
 8001eee:	4441      	add	r1, r8
 8001ef0:	4689      	mov	r9, r1
 8001ef2:	4367      	muls	r7, r4
 8001ef4:	0c39      	lsrs	r1, r7, #16
 8001ef6:	4449      	add	r1, r9
 8001ef8:	436e      	muls	r6, r5
 8001efa:	4588      	cmp	r8, r1
 8001efc:	d903      	bls.n	8001f06 <__aeabi_dmul+0x3b6>
 8001efe:	2280      	movs	r2, #128	@ 0x80
 8001f00:	0252      	lsls	r2, r2, #9
 8001f02:	4690      	mov	r8, r2
 8001f04:	4446      	add	r6, r8
 8001f06:	0c0d      	lsrs	r5, r1, #16
 8001f08:	46a8      	mov	r8, r5
 8001f0a:	0035      	movs	r5, r6
 8001f0c:	4445      	add	r5, r8
 8001f0e:	9505      	str	r5, [sp, #20]
 8001f10:	9d03      	ldr	r5, [sp, #12]
 8001f12:	043f      	lsls	r7, r7, #16
 8001f14:	46a8      	mov	r8, r5
 8001f16:	0c3f      	lsrs	r7, r7, #16
 8001f18:	0409      	lsls	r1, r1, #16
 8001f1a:	19c9      	adds	r1, r1, r7
 8001f1c:	4488      	add	r8, r1
 8001f1e:	4645      	mov	r5, r8
 8001f20:	9503      	str	r5, [sp, #12]
 8001f22:	4655      	mov	r5, sl
 8001f24:	042e      	lsls	r6, r5, #16
 8001f26:	0c36      	lsrs	r6, r6, #16
 8001f28:	0c2f      	lsrs	r7, r5, #16
 8001f2a:	0035      	movs	r5, r6
 8001f2c:	4345      	muls	r5, r0
 8001f2e:	4378      	muls	r0, r7
 8001f30:	4681      	mov	r9, r0
 8001f32:	0038      	movs	r0, r7
 8001f34:	46a8      	mov	r8, r5
 8001f36:	0c2d      	lsrs	r5, r5, #16
 8001f38:	46aa      	mov	sl, r5
 8001f3a:	9a00      	ldr	r2, [sp, #0]
 8001f3c:	4350      	muls	r0, r2
 8001f3e:	4372      	muls	r2, r6
 8001f40:	444a      	add	r2, r9
 8001f42:	4452      	add	r2, sl
 8001f44:	4591      	cmp	r9, r2
 8001f46:	d903      	bls.n	8001f50 <__aeabi_dmul+0x400>
 8001f48:	2580      	movs	r5, #128	@ 0x80
 8001f4a:	026d      	lsls	r5, r5, #9
 8001f4c:	46a9      	mov	r9, r5
 8001f4e:	4448      	add	r0, r9
 8001f50:	0c15      	lsrs	r5, r2, #16
 8001f52:	46a9      	mov	r9, r5
 8001f54:	4645      	mov	r5, r8
 8001f56:	042d      	lsls	r5, r5, #16
 8001f58:	0c2d      	lsrs	r5, r5, #16
 8001f5a:	46a8      	mov	r8, r5
 8001f5c:	4665      	mov	r5, ip
 8001f5e:	437d      	muls	r5, r7
 8001f60:	0412      	lsls	r2, r2, #16
 8001f62:	4448      	add	r0, r9
 8001f64:	4490      	add	r8, r2
 8001f66:	46a9      	mov	r9, r5
 8001f68:	0032      	movs	r2, r6
 8001f6a:	4665      	mov	r5, ip
 8001f6c:	4362      	muls	r2, r4
 8001f6e:	436e      	muls	r6, r5
 8001f70:	437c      	muls	r4, r7
 8001f72:	0c17      	lsrs	r7, r2, #16
 8001f74:	1936      	adds	r6, r6, r4
 8001f76:	19bf      	adds	r7, r7, r6
 8001f78:	42bc      	cmp	r4, r7
 8001f7a:	d903      	bls.n	8001f84 <__aeabi_dmul+0x434>
 8001f7c:	2480      	movs	r4, #128	@ 0x80
 8001f7e:	0264      	lsls	r4, r4, #9
 8001f80:	46a4      	mov	ip, r4
 8001f82:	44e1      	add	r9, ip
 8001f84:	9c02      	ldr	r4, [sp, #8]
 8001f86:	9e03      	ldr	r6, [sp, #12]
 8001f88:	46a4      	mov	ip, r4
 8001f8a:	9d05      	ldr	r5, [sp, #20]
 8001f8c:	4466      	add	r6, ip
 8001f8e:	428e      	cmp	r6, r1
 8001f90:	4189      	sbcs	r1, r1
 8001f92:	46ac      	mov	ip, r5
 8001f94:	0412      	lsls	r2, r2, #16
 8001f96:	043c      	lsls	r4, r7, #16
 8001f98:	0c12      	lsrs	r2, r2, #16
 8001f9a:	18a2      	adds	r2, r4, r2
 8001f9c:	4462      	add	r2, ip
 8001f9e:	4249      	negs	r1, r1
 8001fa0:	1854      	adds	r4, r2, r1
 8001fa2:	4446      	add	r6, r8
 8001fa4:	46a4      	mov	ip, r4
 8001fa6:	4546      	cmp	r6, r8
 8001fa8:	41a4      	sbcs	r4, r4
 8001faa:	4682      	mov	sl, r0
 8001fac:	4264      	negs	r4, r4
 8001fae:	46a0      	mov	r8, r4
 8001fb0:	42aa      	cmp	r2, r5
 8001fb2:	4192      	sbcs	r2, r2
 8001fb4:	458c      	cmp	ip, r1
 8001fb6:	4189      	sbcs	r1, r1
 8001fb8:	44e2      	add	sl, ip
 8001fba:	44d0      	add	r8, sl
 8001fbc:	4249      	negs	r1, r1
 8001fbe:	4252      	negs	r2, r2
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	45a0      	cmp	r8, r4
 8001fc4:	41a4      	sbcs	r4, r4
 8001fc6:	4582      	cmp	sl, r0
 8001fc8:	4189      	sbcs	r1, r1
 8001fca:	4264      	negs	r4, r4
 8001fcc:	4249      	negs	r1, r1
 8001fce:	430c      	orrs	r4, r1
 8001fd0:	4641      	mov	r1, r8
 8001fd2:	0c3f      	lsrs	r7, r7, #16
 8001fd4:	19d2      	adds	r2, r2, r7
 8001fd6:	1912      	adds	r2, r2, r4
 8001fd8:	0dcc      	lsrs	r4, r1, #23
 8001fda:	9904      	ldr	r1, [sp, #16]
 8001fdc:	0270      	lsls	r0, r6, #9
 8001fde:	4308      	orrs	r0, r1
 8001fe0:	1e41      	subs	r1, r0, #1
 8001fe2:	4188      	sbcs	r0, r1
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	444a      	add	r2, r9
 8001fe8:	0df6      	lsrs	r6, r6, #23
 8001fea:	0252      	lsls	r2, r2, #9
 8001fec:	4330      	orrs	r0, r6
 8001fee:	0249      	lsls	r1, r1, #9
 8001ff0:	4314      	orrs	r4, r2
 8001ff2:	4308      	orrs	r0, r1
 8001ff4:	01d2      	lsls	r2, r2, #7
 8001ff6:	d535      	bpl.n	8002064 <__aeabi_dmul+0x514>
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	0843      	lsrs	r3, r0, #1
 8001ffc:	4002      	ands	r2, r0
 8001ffe:	4313      	orrs	r3, r2
 8002000:	07e0      	lsls	r0, r4, #31
 8002002:	4318      	orrs	r0, r3
 8002004:	0864      	lsrs	r4, r4, #1
 8002006:	e634      	b.n	8001c72 <__aeabi_dmul+0x122>
 8002008:	9b00      	ldr	r3, [sp, #0]
 800200a:	46a2      	mov	sl, r4
 800200c:	469b      	mov	fp, r3
 800200e:	4681      	mov	r9, r0
 8002010:	2480      	movs	r4, #128	@ 0x80
 8002012:	4653      	mov	r3, sl
 8002014:	0324      	lsls	r4, r4, #12
 8002016:	431c      	orrs	r4, r3
 8002018:	0324      	lsls	r4, r4, #12
 800201a:	464a      	mov	r2, r9
 800201c:	4b2e      	ldr	r3, [pc, #184]	@ (80020d8 <__aeabi_dmul+0x588>)
 800201e:	0b24      	lsrs	r4, r4, #12
 8002020:	e5ec      	b.n	8001bfc <__aeabi_dmul+0xac>
 8002022:	f000 fd75 	bl	8002b10 <__clzsi2>
 8002026:	2315      	movs	r3, #21
 8002028:	469c      	mov	ip, r3
 800202a:	4484      	add	ip, r0
 800202c:	0002      	movs	r2, r0
 800202e:	4663      	mov	r3, ip
 8002030:	3220      	adds	r2, #32
 8002032:	2b1c      	cmp	r3, #28
 8002034:	dc00      	bgt.n	8002038 <__aeabi_dmul+0x4e8>
 8002036:	e684      	b.n	8001d42 <__aeabi_dmul+0x1f2>
 8002038:	2300      	movs	r3, #0
 800203a:	4699      	mov	r9, r3
 800203c:	0023      	movs	r3, r4
 800203e:	3808      	subs	r0, #8
 8002040:	4083      	lsls	r3, r0
 8002042:	469a      	mov	sl, r3
 8002044:	e68e      	b.n	8001d64 <__aeabi_dmul+0x214>
 8002046:	f000 fd63 	bl	8002b10 <__clzsi2>
 800204a:	0002      	movs	r2, r0
 800204c:	0003      	movs	r3, r0
 800204e:	3215      	adds	r2, #21
 8002050:	3320      	adds	r3, #32
 8002052:	2a1c      	cmp	r2, #28
 8002054:	dc00      	bgt.n	8002058 <__aeabi_dmul+0x508>
 8002056:	e64e      	b.n	8001cf6 <__aeabi_dmul+0x1a6>
 8002058:	0002      	movs	r2, r0
 800205a:	0034      	movs	r4, r6
 800205c:	3a08      	subs	r2, #8
 800205e:	2000      	movs	r0, #0
 8002060:	4094      	lsls	r4, r2
 8002062:	e652      	b.n	8001d0a <__aeabi_dmul+0x1ba>
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	e604      	b.n	8001c72 <__aeabi_dmul+0x122>
 8002068:	4b1c      	ldr	r3, [pc, #112]	@ (80020dc <__aeabi_dmul+0x58c>)
 800206a:	0021      	movs	r1, r4
 800206c:	469c      	mov	ip, r3
 800206e:	0003      	movs	r3, r0
 8002070:	9d01      	ldr	r5, [sp, #4]
 8002072:	40d3      	lsrs	r3, r2
 8002074:	4465      	add	r5, ip
 8002076:	40a9      	lsls	r1, r5
 8002078:	4319      	orrs	r1, r3
 800207a:	0003      	movs	r3, r0
 800207c:	40ab      	lsls	r3, r5
 800207e:	1e58      	subs	r0, r3, #1
 8002080:	4183      	sbcs	r3, r0
 8002082:	4319      	orrs	r1, r3
 8002084:	0008      	movs	r0, r1
 8002086:	40d4      	lsrs	r4, r2
 8002088:	074b      	lsls	r3, r1, #29
 800208a:	d009      	beq.n	80020a0 <__aeabi_dmul+0x550>
 800208c:	230f      	movs	r3, #15
 800208e:	400b      	ands	r3, r1
 8002090:	2b04      	cmp	r3, #4
 8002092:	d005      	beq.n	80020a0 <__aeabi_dmul+0x550>
 8002094:	1d0b      	adds	r3, r1, #4
 8002096:	428b      	cmp	r3, r1
 8002098:	4180      	sbcs	r0, r0
 800209a:	4240      	negs	r0, r0
 800209c:	1824      	adds	r4, r4, r0
 800209e:	0018      	movs	r0, r3
 80020a0:	0223      	lsls	r3, r4, #8
 80020a2:	d400      	bmi.n	80020a6 <__aeabi_dmul+0x556>
 80020a4:	e6d6      	b.n	8001e54 <__aeabi_dmul+0x304>
 80020a6:	2301      	movs	r3, #1
 80020a8:	2400      	movs	r4, #0
 80020aa:	2200      	movs	r2, #0
 80020ac:	e5a6      	b.n	8001bfc <__aeabi_dmul+0xac>
 80020ae:	290f      	cmp	r1, #15
 80020b0:	d1aa      	bne.n	8002008 <__aeabi_dmul+0x4b8>
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	4652      	mov	r2, sl
 80020b6:	031b      	lsls	r3, r3, #12
 80020b8:	421a      	tst	r2, r3
 80020ba:	d0a9      	beq.n	8002010 <__aeabi_dmul+0x4c0>
 80020bc:	421c      	tst	r4, r3
 80020be:	d1a7      	bne.n	8002010 <__aeabi_dmul+0x4c0>
 80020c0:	431c      	orrs	r4, r3
 80020c2:	9b00      	ldr	r3, [sp, #0]
 80020c4:	0002      	movs	r2, r0
 80020c6:	469b      	mov	fp, r3
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <__aeabi_dmul+0x588>)
 80020ca:	e597      	b.n	8001bfc <__aeabi_dmul+0xac>
 80020cc:	2400      	movs	r4, #0
 80020ce:	e6c1      	b.n	8001e54 <__aeabi_dmul+0x304>
 80020d0:	2400      	movs	r4, #0
 80020d2:	4b01      	ldr	r3, [pc, #4]	@ (80020d8 <__aeabi_dmul+0x588>)
 80020d4:	0022      	movs	r2, r4
 80020d6:	e591      	b.n	8001bfc <__aeabi_dmul+0xac>
 80020d8:	000007ff 	.word	0x000007ff
 80020dc:	0000041e 	.word	0x0000041e

080020e0 <__aeabi_dsub>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	464e      	mov	r6, r9
 80020e4:	4645      	mov	r5, r8
 80020e6:	46de      	mov	lr, fp
 80020e8:	4657      	mov	r7, sl
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b085      	sub	sp, #20
 80020ee:	9000      	str	r0, [sp, #0]
 80020f0:	9101      	str	r1, [sp, #4]
 80020f2:	030c      	lsls	r4, r1, #12
 80020f4:	004f      	lsls	r7, r1, #1
 80020f6:	0fce      	lsrs	r6, r1, #31
 80020f8:	0a61      	lsrs	r1, r4, #9
 80020fa:	9c00      	ldr	r4, [sp, #0]
 80020fc:	46b0      	mov	r8, r6
 80020fe:	0f64      	lsrs	r4, r4, #29
 8002100:	430c      	orrs	r4, r1
 8002102:	9900      	ldr	r1, [sp, #0]
 8002104:	0d7f      	lsrs	r7, r7, #21
 8002106:	00c8      	lsls	r0, r1, #3
 8002108:	0011      	movs	r1, r2
 800210a:	001a      	movs	r2, r3
 800210c:	031b      	lsls	r3, r3, #12
 800210e:	469c      	mov	ip, r3
 8002110:	9100      	str	r1, [sp, #0]
 8002112:	9201      	str	r2, [sp, #4]
 8002114:	0051      	lsls	r1, r2, #1
 8002116:	0d4b      	lsrs	r3, r1, #21
 8002118:	4699      	mov	r9, r3
 800211a:	9b01      	ldr	r3, [sp, #4]
 800211c:	9d00      	ldr	r5, [sp, #0]
 800211e:	0fd9      	lsrs	r1, r3, #31
 8002120:	4663      	mov	r3, ip
 8002122:	0f6a      	lsrs	r2, r5, #29
 8002124:	0a5b      	lsrs	r3, r3, #9
 8002126:	4313      	orrs	r3, r2
 8002128:	00ea      	lsls	r2, r5, #3
 800212a:	4694      	mov	ip, r2
 800212c:	4693      	mov	fp, r2
 800212e:	4ac1      	ldr	r2, [pc, #772]	@ (8002434 <__aeabi_dsub+0x354>)
 8002130:	9003      	str	r0, [sp, #12]
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	4591      	cmp	r9, r2
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x5a>
 8002138:	e0cd      	b.n	80022d6 <__aeabi_dsub+0x1f6>
 800213a:	2501      	movs	r5, #1
 800213c:	4069      	eors	r1, r5
 800213e:	464d      	mov	r5, r9
 8002140:	1b7d      	subs	r5, r7, r5
 8002142:	46aa      	mov	sl, r5
 8002144:	428e      	cmp	r6, r1
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0x6a>
 8002148:	e080      	b.n	800224c <__aeabi_dsub+0x16c>
 800214a:	2d00      	cmp	r5, #0
 800214c:	dc00      	bgt.n	8002150 <__aeabi_dsub+0x70>
 800214e:	e335      	b.n	80027bc <__aeabi_dsub+0x6dc>
 8002150:	4649      	mov	r1, r9
 8002152:	2900      	cmp	r1, #0
 8002154:	d100      	bne.n	8002158 <__aeabi_dsub+0x78>
 8002156:	e0df      	b.n	8002318 <__aeabi_dsub+0x238>
 8002158:	4297      	cmp	r7, r2
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x7e>
 800215c:	e194      	b.n	8002488 <__aeabi_dsub+0x3a8>
 800215e:	4652      	mov	r2, sl
 8002160:	2501      	movs	r5, #1
 8002162:	2a38      	cmp	r2, #56	@ 0x38
 8002164:	dc19      	bgt.n	800219a <__aeabi_dsub+0xba>
 8002166:	2280      	movs	r2, #128	@ 0x80
 8002168:	9b02      	ldr	r3, [sp, #8]
 800216a:	0412      	lsls	r2, r2, #16
 800216c:	4313      	orrs	r3, r2
 800216e:	9302      	str	r3, [sp, #8]
 8002170:	4652      	mov	r2, sl
 8002172:	2a1f      	cmp	r2, #31
 8002174:	dd00      	ble.n	8002178 <__aeabi_dsub+0x98>
 8002176:	e1e3      	b.n	8002540 <__aeabi_dsub+0x460>
 8002178:	4653      	mov	r3, sl
 800217a:	2220      	movs	r2, #32
 800217c:	4661      	mov	r1, ip
 800217e:	9d02      	ldr	r5, [sp, #8]
 8002180:	1ad2      	subs	r2, r2, r3
 8002182:	4095      	lsls	r5, r2
 8002184:	40d9      	lsrs	r1, r3
 8002186:	430d      	orrs	r5, r1
 8002188:	4661      	mov	r1, ip
 800218a:	4091      	lsls	r1, r2
 800218c:	000a      	movs	r2, r1
 800218e:	1e51      	subs	r1, r2, #1
 8002190:	418a      	sbcs	r2, r1
 8002192:	4315      	orrs	r5, r2
 8002194:	9a02      	ldr	r2, [sp, #8]
 8002196:	40da      	lsrs	r2, r3
 8002198:	1aa4      	subs	r4, r4, r2
 800219a:	1b45      	subs	r5, r0, r5
 800219c:	42a8      	cmp	r0, r5
 800219e:	4180      	sbcs	r0, r0
 80021a0:	4240      	negs	r0, r0
 80021a2:	1a24      	subs	r4, r4, r0
 80021a4:	0223      	lsls	r3, r4, #8
 80021a6:	d400      	bmi.n	80021aa <__aeabi_dsub+0xca>
 80021a8:	e13d      	b.n	8002426 <__aeabi_dsub+0x346>
 80021aa:	0264      	lsls	r4, r4, #9
 80021ac:	0a64      	lsrs	r4, r4, #9
 80021ae:	2c00      	cmp	r4, #0
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0xd4>
 80021b2:	e147      	b.n	8002444 <__aeabi_dsub+0x364>
 80021b4:	0020      	movs	r0, r4
 80021b6:	f000 fcab 	bl	8002b10 <__clzsi2>
 80021ba:	0003      	movs	r3, r0
 80021bc:	3b08      	subs	r3, #8
 80021be:	2120      	movs	r1, #32
 80021c0:	0028      	movs	r0, r5
 80021c2:	1aca      	subs	r2, r1, r3
 80021c4:	40d0      	lsrs	r0, r2
 80021c6:	409c      	lsls	r4, r3
 80021c8:	0002      	movs	r2, r0
 80021ca:	409d      	lsls	r5, r3
 80021cc:	4322      	orrs	r2, r4
 80021ce:	429f      	cmp	r7, r3
 80021d0:	dd00      	ble.n	80021d4 <__aeabi_dsub+0xf4>
 80021d2:	e177      	b.n	80024c4 <__aeabi_dsub+0x3e4>
 80021d4:	1bd8      	subs	r0, r3, r7
 80021d6:	3001      	adds	r0, #1
 80021d8:	1a09      	subs	r1, r1, r0
 80021da:	002c      	movs	r4, r5
 80021dc:	408d      	lsls	r5, r1
 80021de:	40c4      	lsrs	r4, r0
 80021e0:	1e6b      	subs	r3, r5, #1
 80021e2:	419d      	sbcs	r5, r3
 80021e4:	0013      	movs	r3, r2
 80021e6:	40c2      	lsrs	r2, r0
 80021e8:	408b      	lsls	r3, r1
 80021ea:	4325      	orrs	r5, r4
 80021ec:	2700      	movs	r7, #0
 80021ee:	0014      	movs	r4, r2
 80021f0:	431d      	orrs	r5, r3
 80021f2:	076b      	lsls	r3, r5, #29
 80021f4:	d009      	beq.n	800220a <__aeabi_dsub+0x12a>
 80021f6:	230f      	movs	r3, #15
 80021f8:	402b      	ands	r3, r5
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d005      	beq.n	800220a <__aeabi_dsub+0x12a>
 80021fe:	1d2b      	adds	r3, r5, #4
 8002200:	42ab      	cmp	r3, r5
 8002202:	41ad      	sbcs	r5, r5
 8002204:	426d      	negs	r5, r5
 8002206:	1964      	adds	r4, r4, r5
 8002208:	001d      	movs	r5, r3
 800220a:	0223      	lsls	r3, r4, #8
 800220c:	d400      	bmi.n	8002210 <__aeabi_dsub+0x130>
 800220e:	e140      	b.n	8002492 <__aeabi_dsub+0x3b2>
 8002210:	4a88      	ldr	r2, [pc, #544]	@ (8002434 <__aeabi_dsub+0x354>)
 8002212:	3701      	adds	r7, #1
 8002214:	4297      	cmp	r7, r2
 8002216:	d100      	bne.n	800221a <__aeabi_dsub+0x13a>
 8002218:	e101      	b.n	800241e <__aeabi_dsub+0x33e>
 800221a:	2601      	movs	r6, #1
 800221c:	4643      	mov	r3, r8
 800221e:	4986      	ldr	r1, [pc, #536]	@ (8002438 <__aeabi_dsub+0x358>)
 8002220:	08ed      	lsrs	r5, r5, #3
 8002222:	4021      	ands	r1, r4
 8002224:	074a      	lsls	r2, r1, #29
 8002226:	432a      	orrs	r2, r5
 8002228:	057c      	lsls	r4, r7, #21
 800222a:	024d      	lsls	r5, r1, #9
 800222c:	0b2d      	lsrs	r5, r5, #12
 800222e:	0d64      	lsrs	r4, r4, #21
 8002230:	401e      	ands	r6, r3
 8002232:	0524      	lsls	r4, r4, #20
 8002234:	432c      	orrs	r4, r5
 8002236:	07f6      	lsls	r6, r6, #31
 8002238:	4334      	orrs	r4, r6
 800223a:	0010      	movs	r0, r2
 800223c:	0021      	movs	r1, r4
 800223e:	b005      	add	sp, #20
 8002240:	bcf0      	pop	{r4, r5, r6, r7}
 8002242:	46bb      	mov	fp, r7
 8002244:	46b2      	mov	sl, r6
 8002246:	46a9      	mov	r9, r5
 8002248:	46a0      	mov	r8, r4
 800224a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224c:	2d00      	cmp	r5, #0
 800224e:	dc00      	bgt.n	8002252 <__aeabi_dsub+0x172>
 8002250:	e2d0      	b.n	80027f4 <__aeabi_dsub+0x714>
 8002252:	4649      	mov	r1, r9
 8002254:	2900      	cmp	r1, #0
 8002256:	d000      	beq.n	800225a <__aeabi_dsub+0x17a>
 8002258:	e0d4      	b.n	8002404 <__aeabi_dsub+0x324>
 800225a:	4661      	mov	r1, ip
 800225c:	9b02      	ldr	r3, [sp, #8]
 800225e:	4319      	orrs	r1, r3
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x184>
 8002262:	e12b      	b.n	80024bc <__aeabi_dsub+0x3dc>
 8002264:	1e69      	subs	r1, r5, #1
 8002266:	2d01      	cmp	r5, #1
 8002268:	d100      	bne.n	800226c <__aeabi_dsub+0x18c>
 800226a:	e1d9      	b.n	8002620 <__aeabi_dsub+0x540>
 800226c:	4295      	cmp	r5, r2
 800226e:	d100      	bne.n	8002272 <__aeabi_dsub+0x192>
 8002270:	e10a      	b.n	8002488 <__aeabi_dsub+0x3a8>
 8002272:	2501      	movs	r5, #1
 8002274:	2938      	cmp	r1, #56	@ 0x38
 8002276:	dc17      	bgt.n	80022a8 <__aeabi_dsub+0x1c8>
 8002278:	468a      	mov	sl, r1
 800227a:	4653      	mov	r3, sl
 800227c:	2b1f      	cmp	r3, #31
 800227e:	dd00      	ble.n	8002282 <__aeabi_dsub+0x1a2>
 8002280:	e1e7      	b.n	8002652 <__aeabi_dsub+0x572>
 8002282:	2220      	movs	r2, #32
 8002284:	1ad2      	subs	r2, r2, r3
 8002286:	9b02      	ldr	r3, [sp, #8]
 8002288:	4661      	mov	r1, ip
 800228a:	4093      	lsls	r3, r2
 800228c:	001d      	movs	r5, r3
 800228e:	4653      	mov	r3, sl
 8002290:	40d9      	lsrs	r1, r3
 8002292:	4663      	mov	r3, ip
 8002294:	4093      	lsls	r3, r2
 8002296:	001a      	movs	r2, r3
 8002298:	430d      	orrs	r5, r1
 800229a:	1e51      	subs	r1, r2, #1
 800229c:	418a      	sbcs	r2, r1
 800229e:	4653      	mov	r3, sl
 80022a0:	4315      	orrs	r5, r2
 80022a2:	9a02      	ldr	r2, [sp, #8]
 80022a4:	40da      	lsrs	r2, r3
 80022a6:	18a4      	adds	r4, r4, r2
 80022a8:	182d      	adds	r5, r5, r0
 80022aa:	4285      	cmp	r5, r0
 80022ac:	4180      	sbcs	r0, r0
 80022ae:	4240      	negs	r0, r0
 80022b0:	1824      	adds	r4, r4, r0
 80022b2:	0223      	lsls	r3, r4, #8
 80022b4:	d400      	bmi.n	80022b8 <__aeabi_dsub+0x1d8>
 80022b6:	e0b6      	b.n	8002426 <__aeabi_dsub+0x346>
 80022b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002434 <__aeabi_dsub+0x354>)
 80022ba:	3701      	adds	r7, #1
 80022bc:	429f      	cmp	r7, r3
 80022be:	d100      	bne.n	80022c2 <__aeabi_dsub+0x1e2>
 80022c0:	e0ad      	b.n	800241e <__aeabi_dsub+0x33e>
 80022c2:	2101      	movs	r1, #1
 80022c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002438 <__aeabi_dsub+0x358>)
 80022c6:	086a      	lsrs	r2, r5, #1
 80022c8:	401c      	ands	r4, r3
 80022ca:	4029      	ands	r1, r5
 80022cc:	430a      	orrs	r2, r1
 80022ce:	07e5      	lsls	r5, r4, #31
 80022d0:	4315      	orrs	r5, r2
 80022d2:	0864      	lsrs	r4, r4, #1
 80022d4:	e78d      	b.n	80021f2 <__aeabi_dsub+0x112>
 80022d6:	4a59      	ldr	r2, [pc, #356]	@ (800243c <__aeabi_dsub+0x35c>)
 80022d8:	9b02      	ldr	r3, [sp, #8]
 80022da:	4692      	mov	sl, r2
 80022dc:	4662      	mov	r2, ip
 80022de:	44ba      	add	sl, r7
 80022e0:	431a      	orrs	r2, r3
 80022e2:	d02c      	beq.n	800233e <__aeabi_dsub+0x25e>
 80022e4:	428e      	cmp	r6, r1
 80022e6:	d02e      	beq.n	8002346 <__aeabi_dsub+0x266>
 80022e8:	4652      	mov	r2, sl
 80022ea:	2a00      	cmp	r2, #0
 80022ec:	d060      	beq.n	80023b0 <__aeabi_dsub+0x2d0>
 80022ee:	2f00      	cmp	r7, #0
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x214>
 80022f2:	e0db      	b.n	80024ac <__aeabi_dsub+0x3cc>
 80022f4:	4663      	mov	r3, ip
 80022f6:	000e      	movs	r6, r1
 80022f8:	9c02      	ldr	r4, [sp, #8]
 80022fa:	08d8      	lsrs	r0, r3, #3
 80022fc:	0762      	lsls	r2, r4, #29
 80022fe:	4302      	orrs	r2, r0
 8002300:	08e4      	lsrs	r4, r4, #3
 8002302:	0013      	movs	r3, r2
 8002304:	4323      	orrs	r3, r4
 8002306:	d100      	bne.n	800230a <__aeabi_dsub+0x22a>
 8002308:	e254      	b.n	80027b4 <__aeabi_dsub+0x6d4>
 800230a:	2580      	movs	r5, #128	@ 0x80
 800230c:	032d      	lsls	r5, r5, #12
 800230e:	4325      	orrs	r5, r4
 8002310:	032d      	lsls	r5, r5, #12
 8002312:	4c48      	ldr	r4, [pc, #288]	@ (8002434 <__aeabi_dsub+0x354>)
 8002314:	0b2d      	lsrs	r5, r5, #12
 8002316:	e78c      	b.n	8002232 <__aeabi_dsub+0x152>
 8002318:	4661      	mov	r1, ip
 800231a:	9b02      	ldr	r3, [sp, #8]
 800231c:	4319      	orrs	r1, r3
 800231e:	d100      	bne.n	8002322 <__aeabi_dsub+0x242>
 8002320:	e0cc      	b.n	80024bc <__aeabi_dsub+0x3dc>
 8002322:	0029      	movs	r1, r5
 8002324:	3901      	subs	r1, #1
 8002326:	2d01      	cmp	r5, #1
 8002328:	d100      	bne.n	800232c <__aeabi_dsub+0x24c>
 800232a:	e188      	b.n	800263e <__aeabi_dsub+0x55e>
 800232c:	4295      	cmp	r5, r2
 800232e:	d100      	bne.n	8002332 <__aeabi_dsub+0x252>
 8002330:	e0aa      	b.n	8002488 <__aeabi_dsub+0x3a8>
 8002332:	2501      	movs	r5, #1
 8002334:	2938      	cmp	r1, #56	@ 0x38
 8002336:	dd00      	ble.n	800233a <__aeabi_dsub+0x25a>
 8002338:	e72f      	b.n	800219a <__aeabi_dsub+0xba>
 800233a:	468a      	mov	sl, r1
 800233c:	e718      	b.n	8002170 <__aeabi_dsub+0x90>
 800233e:	2201      	movs	r2, #1
 8002340:	4051      	eors	r1, r2
 8002342:	428e      	cmp	r6, r1
 8002344:	d1d0      	bne.n	80022e8 <__aeabi_dsub+0x208>
 8002346:	4653      	mov	r3, sl
 8002348:	2b00      	cmp	r3, #0
 800234a:	d100      	bne.n	800234e <__aeabi_dsub+0x26e>
 800234c:	e0be      	b.n	80024cc <__aeabi_dsub+0x3ec>
 800234e:	2f00      	cmp	r7, #0
 8002350:	d000      	beq.n	8002354 <__aeabi_dsub+0x274>
 8002352:	e138      	b.n	80025c6 <__aeabi_dsub+0x4e6>
 8002354:	46ca      	mov	sl, r9
 8002356:	0022      	movs	r2, r4
 8002358:	4302      	orrs	r2, r0
 800235a:	d100      	bne.n	800235e <__aeabi_dsub+0x27e>
 800235c:	e1e2      	b.n	8002724 <__aeabi_dsub+0x644>
 800235e:	4653      	mov	r3, sl
 8002360:	1e59      	subs	r1, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x288>
 8002366:	e20d      	b.n	8002784 <__aeabi_dsub+0x6a4>
 8002368:	4a32      	ldr	r2, [pc, #200]	@ (8002434 <__aeabi_dsub+0x354>)
 800236a:	4592      	cmp	sl, r2
 800236c:	d100      	bne.n	8002370 <__aeabi_dsub+0x290>
 800236e:	e1d2      	b.n	8002716 <__aeabi_dsub+0x636>
 8002370:	2701      	movs	r7, #1
 8002372:	2938      	cmp	r1, #56	@ 0x38
 8002374:	dc13      	bgt.n	800239e <__aeabi_dsub+0x2be>
 8002376:	291f      	cmp	r1, #31
 8002378:	dd00      	ble.n	800237c <__aeabi_dsub+0x29c>
 800237a:	e1ee      	b.n	800275a <__aeabi_dsub+0x67a>
 800237c:	2220      	movs	r2, #32
 800237e:	9b02      	ldr	r3, [sp, #8]
 8002380:	1a52      	subs	r2, r2, r1
 8002382:	0025      	movs	r5, r4
 8002384:	0007      	movs	r7, r0
 8002386:	469a      	mov	sl, r3
 8002388:	40cc      	lsrs	r4, r1
 800238a:	4090      	lsls	r0, r2
 800238c:	4095      	lsls	r5, r2
 800238e:	40cf      	lsrs	r7, r1
 8002390:	44a2      	add	sl, r4
 8002392:	1e42      	subs	r2, r0, #1
 8002394:	4190      	sbcs	r0, r2
 8002396:	4653      	mov	r3, sl
 8002398:	432f      	orrs	r7, r5
 800239a:	4307      	orrs	r7, r0
 800239c:	9302      	str	r3, [sp, #8]
 800239e:	003d      	movs	r5, r7
 80023a0:	4465      	add	r5, ip
 80023a2:	4565      	cmp	r5, ip
 80023a4:	4192      	sbcs	r2, r2
 80023a6:	9b02      	ldr	r3, [sp, #8]
 80023a8:	4252      	negs	r2, r2
 80023aa:	464f      	mov	r7, r9
 80023ac:	18d4      	adds	r4, r2, r3
 80023ae:	e780      	b.n	80022b2 <__aeabi_dsub+0x1d2>
 80023b0:	4a23      	ldr	r2, [pc, #140]	@ (8002440 <__aeabi_dsub+0x360>)
 80023b2:	1c7d      	adds	r5, r7, #1
 80023b4:	4215      	tst	r5, r2
 80023b6:	d000      	beq.n	80023ba <__aeabi_dsub+0x2da>
 80023b8:	e0aa      	b.n	8002510 <__aeabi_dsub+0x430>
 80023ba:	4662      	mov	r2, ip
 80023bc:	0025      	movs	r5, r4
 80023be:	9b02      	ldr	r3, [sp, #8]
 80023c0:	4305      	orrs	r5, r0
 80023c2:	431a      	orrs	r2, r3
 80023c4:	2f00      	cmp	r7, #0
 80023c6:	d000      	beq.n	80023ca <__aeabi_dsub+0x2ea>
 80023c8:	e0f5      	b.n	80025b6 <__aeabi_dsub+0x4d6>
 80023ca:	2d00      	cmp	r5, #0
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dsub+0x2f0>
 80023ce:	e16b      	b.n	80026a8 <__aeabi_dsub+0x5c8>
 80023d0:	2a00      	cmp	r2, #0
 80023d2:	d100      	bne.n	80023d6 <__aeabi_dsub+0x2f6>
 80023d4:	e152      	b.n	800267c <__aeabi_dsub+0x59c>
 80023d6:	4663      	mov	r3, ip
 80023d8:	1ac5      	subs	r5, r0, r3
 80023da:	9b02      	ldr	r3, [sp, #8]
 80023dc:	1ae2      	subs	r2, r4, r3
 80023de:	42a8      	cmp	r0, r5
 80023e0:	419b      	sbcs	r3, r3
 80023e2:	425b      	negs	r3, r3
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	021a      	lsls	r2, r3, #8
 80023e8:	d400      	bmi.n	80023ec <__aeabi_dsub+0x30c>
 80023ea:	e1d5      	b.n	8002798 <__aeabi_dsub+0x6b8>
 80023ec:	4663      	mov	r3, ip
 80023ee:	1a1d      	subs	r5, r3, r0
 80023f0:	45ac      	cmp	ip, r5
 80023f2:	4192      	sbcs	r2, r2
 80023f4:	2601      	movs	r6, #1
 80023f6:	9b02      	ldr	r3, [sp, #8]
 80023f8:	4252      	negs	r2, r2
 80023fa:	1b1c      	subs	r4, r3, r4
 80023fc:	4688      	mov	r8, r1
 80023fe:	1aa4      	subs	r4, r4, r2
 8002400:	400e      	ands	r6, r1
 8002402:	e6f6      	b.n	80021f2 <__aeabi_dsub+0x112>
 8002404:	4297      	cmp	r7, r2
 8002406:	d03f      	beq.n	8002488 <__aeabi_dsub+0x3a8>
 8002408:	4652      	mov	r2, sl
 800240a:	2501      	movs	r5, #1
 800240c:	2a38      	cmp	r2, #56	@ 0x38
 800240e:	dd00      	ble.n	8002412 <__aeabi_dsub+0x332>
 8002410:	e74a      	b.n	80022a8 <__aeabi_dsub+0x1c8>
 8002412:	2280      	movs	r2, #128	@ 0x80
 8002414:	9b02      	ldr	r3, [sp, #8]
 8002416:	0412      	lsls	r2, r2, #16
 8002418:	4313      	orrs	r3, r2
 800241a:	9302      	str	r3, [sp, #8]
 800241c:	e72d      	b.n	800227a <__aeabi_dsub+0x19a>
 800241e:	003c      	movs	r4, r7
 8002420:	2500      	movs	r5, #0
 8002422:	2200      	movs	r2, #0
 8002424:	e705      	b.n	8002232 <__aeabi_dsub+0x152>
 8002426:	2307      	movs	r3, #7
 8002428:	402b      	ands	r3, r5
 800242a:	2b00      	cmp	r3, #0
 800242c:	d000      	beq.n	8002430 <__aeabi_dsub+0x350>
 800242e:	e6e2      	b.n	80021f6 <__aeabi_dsub+0x116>
 8002430:	e06b      	b.n	800250a <__aeabi_dsub+0x42a>
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	000007ff 	.word	0x000007ff
 8002438:	ff7fffff 	.word	0xff7fffff
 800243c:	fffff801 	.word	0xfffff801
 8002440:	000007fe 	.word	0x000007fe
 8002444:	0028      	movs	r0, r5
 8002446:	f000 fb63 	bl	8002b10 <__clzsi2>
 800244a:	0003      	movs	r3, r0
 800244c:	3318      	adds	r3, #24
 800244e:	2b1f      	cmp	r3, #31
 8002450:	dc00      	bgt.n	8002454 <__aeabi_dsub+0x374>
 8002452:	e6b4      	b.n	80021be <__aeabi_dsub+0xde>
 8002454:	002a      	movs	r2, r5
 8002456:	3808      	subs	r0, #8
 8002458:	4082      	lsls	r2, r0
 800245a:	429f      	cmp	r7, r3
 800245c:	dd00      	ble.n	8002460 <__aeabi_dsub+0x380>
 800245e:	e0b9      	b.n	80025d4 <__aeabi_dsub+0x4f4>
 8002460:	1bdb      	subs	r3, r3, r7
 8002462:	1c58      	adds	r0, r3, #1
 8002464:	281f      	cmp	r0, #31
 8002466:	dc00      	bgt.n	800246a <__aeabi_dsub+0x38a>
 8002468:	e1a0      	b.n	80027ac <__aeabi_dsub+0x6cc>
 800246a:	0015      	movs	r5, r2
 800246c:	3b1f      	subs	r3, #31
 800246e:	40dd      	lsrs	r5, r3
 8002470:	2820      	cmp	r0, #32
 8002472:	d005      	beq.n	8002480 <__aeabi_dsub+0x3a0>
 8002474:	2340      	movs	r3, #64	@ 0x40
 8002476:	1a1b      	subs	r3, r3, r0
 8002478:	409a      	lsls	r2, r3
 800247a:	1e53      	subs	r3, r2, #1
 800247c:	419a      	sbcs	r2, r3
 800247e:	4315      	orrs	r5, r2
 8002480:	2307      	movs	r3, #7
 8002482:	2700      	movs	r7, #0
 8002484:	402b      	ands	r3, r5
 8002486:	e7d0      	b.n	800242a <__aeabi_dsub+0x34a>
 8002488:	08c0      	lsrs	r0, r0, #3
 800248a:	0762      	lsls	r2, r4, #29
 800248c:	4302      	orrs	r2, r0
 800248e:	08e4      	lsrs	r4, r4, #3
 8002490:	e737      	b.n	8002302 <__aeabi_dsub+0x222>
 8002492:	08ea      	lsrs	r2, r5, #3
 8002494:	0763      	lsls	r3, r4, #29
 8002496:	431a      	orrs	r2, r3
 8002498:	4bd3      	ldr	r3, [pc, #844]	@ (80027e8 <__aeabi_dsub+0x708>)
 800249a:	08e4      	lsrs	r4, r4, #3
 800249c:	429f      	cmp	r7, r3
 800249e:	d100      	bne.n	80024a2 <__aeabi_dsub+0x3c2>
 80024a0:	e72f      	b.n	8002302 <__aeabi_dsub+0x222>
 80024a2:	0324      	lsls	r4, r4, #12
 80024a4:	0b25      	lsrs	r5, r4, #12
 80024a6:	057c      	lsls	r4, r7, #21
 80024a8:	0d64      	lsrs	r4, r4, #21
 80024aa:	e6c2      	b.n	8002232 <__aeabi_dsub+0x152>
 80024ac:	46ca      	mov	sl, r9
 80024ae:	0022      	movs	r2, r4
 80024b0:	4302      	orrs	r2, r0
 80024b2:	d158      	bne.n	8002566 <__aeabi_dsub+0x486>
 80024b4:	4663      	mov	r3, ip
 80024b6:	000e      	movs	r6, r1
 80024b8:	9c02      	ldr	r4, [sp, #8]
 80024ba:	9303      	str	r3, [sp, #12]
 80024bc:	9b03      	ldr	r3, [sp, #12]
 80024be:	4657      	mov	r7, sl
 80024c0:	08da      	lsrs	r2, r3, #3
 80024c2:	e7e7      	b.n	8002494 <__aeabi_dsub+0x3b4>
 80024c4:	4cc9      	ldr	r4, [pc, #804]	@ (80027ec <__aeabi_dsub+0x70c>)
 80024c6:	1aff      	subs	r7, r7, r3
 80024c8:	4014      	ands	r4, r2
 80024ca:	e692      	b.n	80021f2 <__aeabi_dsub+0x112>
 80024cc:	4dc8      	ldr	r5, [pc, #800]	@ (80027f0 <__aeabi_dsub+0x710>)
 80024ce:	1c7a      	adds	r2, r7, #1
 80024d0:	422a      	tst	r2, r5
 80024d2:	d000      	beq.n	80024d6 <__aeabi_dsub+0x3f6>
 80024d4:	e084      	b.n	80025e0 <__aeabi_dsub+0x500>
 80024d6:	0022      	movs	r2, r4
 80024d8:	4302      	orrs	r2, r0
 80024da:	2f00      	cmp	r7, #0
 80024dc:	d000      	beq.n	80024e0 <__aeabi_dsub+0x400>
 80024de:	e0ef      	b.n	80026c0 <__aeabi_dsub+0x5e0>
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x406>
 80024e4:	e0e5      	b.n	80026b2 <__aeabi_dsub+0x5d2>
 80024e6:	4662      	mov	r2, ip
 80024e8:	9902      	ldr	r1, [sp, #8]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	d100      	bne.n	80024f0 <__aeabi_dsub+0x410>
 80024ee:	e0c5      	b.n	800267c <__aeabi_dsub+0x59c>
 80024f0:	4663      	mov	r3, ip
 80024f2:	18c5      	adds	r5, r0, r3
 80024f4:	468c      	mov	ip, r1
 80024f6:	4285      	cmp	r5, r0
 80024f8:	4180      	sbcs	r0, r0
 80024fa:	4464      	add	r4, ip
 80024fc:	4240      	negs	r0, r0
 80024fe:	1824      	adds	r4, r4, r0
 8002500:	0223      	lsls	r3, r4, #8
 8002502:	d502      	bpl.n	800250a <__aeabi_dsub+0x42a>
 8002504:	4bb9      	ldr	r3, [pc, #740]	@ (80027ec <__aeabi_dsub+0x70c>)
 8002506:	3701      	adds	r7, #1
 8002508:	401c      	ands	r4, r3
 800250a:	46ba      	mov	sl, r7
 800250c:	9503      	str	r5, [sp, #12]
 800250e:	e7d5      	b.n	80024bc <__aeabi_dsub+0x3dc>
 8002510:	4662      	mov	r2, ip
 8002512:	1a85      	subs	r5, r0, r2
 8002514:	42a8      	cmp	r0, r5
 8002516:	4192      	sbcs	r2, r2
 8002518:	4252      	negs	r2, r2
 800251a:	4691      	mov	r9, r2
 800251c:	9b02      	ldr	r3, [sp, #8]
 800251e:	1ae3      	subs	r3, r4, r3
 8002520:	001a      	movs	r2, r3
 8002522:	464b      	mov	r3, r9
 8002524:	1ad2      	subs	r2, r2, r3
 8002526:	0013      	movs	r3, r2
 8002528:	4691      	mov	r9, r2
 800252a:	021a      	lsls	r2, r3, #8
 800252c:	d46c      	bmi.n	8002608 <__aeabi_dsub+0x528>
 800252e:	464a      	mov	r2, r9
 8002530:	464c      	mov	r4, r9
 8002532:	432a      	orrs	r2, r5
 8002534:	d000      	beq.n	8002538 <__aeabi_dsub+0x458>
 8002536:	e63a      	b.n	80021ae <__aeabi_dsub+0xce>
 8002538:	2600      	movs	r6, #0
 800253a:	2400      	movs	r4, #0
 800253c:	2500      	movs	r5, #0
 800253e:	e678      	b.n	8002232 <__aeabi_dsub+0x152>
 8002540:	9902      	ldr	r1, [sp, #8]
 8002542:	4653      	mov	r3, sl
 8002544:	000d      	movs	r5, r1
 8002546:	3a20      	subs	r2, #32
 8002548:	40d5      	lsrs	r5, r2
 800254a:	2b20      	cmp	r3, #32
 800254c:	d006      	beq.n	800255c <__aeabi_dsub+0x47c>
 800254e:	2240      	movs	r2, #64	@ 0x40
 8002550:	1ad2      	subs	r2, r2, r3
 8002552:	000b      	movs	r3, r1
 8002554:	4093      	lsls	r3, r2
 8002556:	4662      	mov	r2, ip
 8002558:	431a      	orrs	r2, r3
 800255a:	4693      	mov	fp, r2
 800255c:	465b      	mov	r3, fp
 800255e:	1e5a      	subs	r2, r3, #1
 8002560:	4193      	sbcs	r3, r2
 8002562:	431d      	orrs	r5, r3
 8002564:	e619      	b.n	800219a <__aeabi_dsub+0xba>
 8002566:	4653      	mov	r3, sl
 8002568:	1e5a      	subs	r2, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d100      	bne.n	8002570 <__aeabi_dsub+0x490>
 800256e:	e0c6      	b.n	80026fe <__aeabi_dsub+0x61e>
 8002570:	4e9d      	ldr	r6, [pc, #628]	@ (80027e8 <__aeabi_dsub+0x708>)
 8002572:	45b2      	cmp	sl, r6
 8002574:	d100      	bne.n	8002578 <__aeabi_dsub+0x498>
 8002576:	e6bd      	b.n	80022f4 <__aeabi_dsub+0x214>
 8002578:	4688      	mov	r8, r1
 800257a:	000e      	movs	r6, r1
 800257c:	2501      	movs	r5, #1
 800257e:	2a38      	cmp	r2, #56	@ 0x38
 8002580:	dc10      	bgt.n	80025a4 <__aeabi_dsub+0x4c4>
 8002582:	2a1f      	cmp	r2, #31
 8002584:	dc7f      	bgt.n	8002686 <__aeabi_dsub+0x5a6>
 8002586:	2120      	movs	r1, #32
 8002588:	0025      	movs	r5, r4
 800258a:	1a89      	subs	r1, r1, r2
 800258c:	0007      	movs	r7, r0
 800258e:	4088      	lsls	r0, r1
 8002590:	408d      	lsls	r5, r1
 8002592:	40d7      	lsrs	r7, r2
 8002594:	40d4      	lsrs	r4, r2
 8002596:	1e41      	subs	r1, r0, #1
 8002598:	4188      	sbcs	r0, r1
 800259a:	9b02      	ldr	r3, [sp, #8]
 800259c:	433d      	orrs	r5, r7
 800259e:	1b1b      	subs	r3, r3, r4
 80025a0:	4305      	orrs	r5, r0
 80025a2:	9302      	str	r3, [sp, #8]
 80025a4:	4662      	mov	r2, ip
 80025a6:	1b55      	subs	r5, r2, r5
 80025a8:	45ac      	cmp	ip, r5
 80025aa:	4192      	sbcs	r2, r2
 80025ac:	9b02      	ldr	r3, [sp, #8]
 80025ae:	4252      	negs	r2, r2
 80025b0:	464f      	mov	r7, r9
 80025b2:	1a9c      	subs	r4, r3, r2
 80025b4:	e5f6      	b.n	80021a4 <__aeabi_dsub+0xc4>
 80025b6:	2d00      	cmp	r5, #0
 80025b8:	d000      	beq.n	80025bc <__aeabi_dsub+0x4dc>
 80025ba:	e0b7      	b.n	800272c <__aeabi_dsub+0x64c>
 80025bc:	2a00      	cmp	r2, #0
 80025be:	d100      	bne.n	80025c2 <__aeabi_dsub+0x4e2>
 80025c0:	e0f0      	b.n	80027a4 <__aeabi_dsub+0x6c4>
 80025c2:	2601      	movs	r6, #1
 80025c4:	400e      	ands	r6, r1
 80025c6:	4663      	mov	r3, ip
 80025c8:	9802      	ldr	r0, [sp, #8]
 80025ca:	08d9      	lsrs	r1, r3, #3
 80025cc:	0742      	lsls	r2, r0, #29
 80025ce:	430a      	orrs	r2, r1
 80025d0:	08c4      	lsrs	r4, r0, #3
 80025d2:	e696      	b.n	8002302 <__aeabi_dsub+0x222>
 80025d4:	4c85      	ldr	r4, [pc, #532]	@ (80027ec <__aeabi_dsub+0x70c>)
 80025d6:	1aff      	subs	r7, r7, r3
 80025d8:	4014      	ands	r4, r2
 80025da:	0762      	lsls	r2, r4, #29
 80025dc:	08e4      	lsrs	r4, r4, #3
 80025de:	e760      	b.n	80024a2 <__aeabi_dsub+0x3c2>
 80025e0:	4981      	ldr	r1, [pc, #516]	@ (80027e8 <__aeabi_dsub+0x708>)
 80025e2:	428a      	cmp	r2, r1
 80025e4:	d100      	bne.n	80025e8 <__aeabi_dsub+0x508>
 80025e6:	e0c9      	b.n	800277c <__aeabi_dsub+0x69c>
 80025e8:	4663      	mov	r3, ip
 80025ea:	18c1      	adds	r1, r0, r3
 80025ec:	4281      	cmp	r1, r0
 80025ee:	4180      	sbcs	r0, r0
 80025f0:	9b02      	ldr	r3, [sp, #8]
 80025f2:	4240      	negs	r0, r0
 80025f4:	18e3      	adds	r3, r4, r3
 80025f6:	181b      	adds	r3, r3, r0
 80025f8:	07dd      	lsls	r5, r3, #31
 80025fa:	085c      	lsrs	r4, r3, #1
 80025fc:	2307      	movs	r3, #7
 80025fe:	0849      	lsrs	r1, r1, #1
 8002600:	430d      	orrs	r5, r1
 8002602:	0017      	movs	r7, r2
 8002604:	402b      	ands	r3, r5
 8002606:	e710      	b.n	800242a <__aeabi_dsub+0x34a>
 8002608:	4663      	mov	r3, ip
 800260a:	1a1d      	subs	r5, r3, r0
 800260c:	45ac      	cmp	ip, r5
 800260e:	4192      	sbcs	r2, r2
 8002610:	2601      	movs	r6, #1
 8002612:	9b02      	ldr	r3, [sp, #8]
 8002614:	4252      	negs	r2, r2
 8002616:	1b1c      	subs	r4, r3, r4
 8002618:	4688      	mov	r8, r1
 800261a:	1aa4      	subs	r4, r4, r2
 800261c:	400e      	ands	r6, r1
 800261e:	e5c6      	b.n	80021ae <__aeabi_dsub+0xce>
 8002620:	4663      	mov	r3, ip
 8002622:	18c5      	adds	r5, r0, r3
 8002624:	9b02      	ldr	r3, [sp, #8]
 8002626:	4285      	cmp	r5, r0
 8002628:	4180      	sbcs	r0, r0
 800262a:	469c      	mov	ip, r3
 800262c:	4240      	negs	r0, r0
 800262e:	4464      	add	r4, ip
 8002630:	1824      	adds	r4, r4, r0
 8002632:	2701      	movs	r7, #1
 8002634:	0223      	lsls	r3, r4, #8
 8002636:	d400      	bmi.n	800263a <__aeabi_dsub+0x55a>
 8002638:	e6f5      	b.n	8002426 <__aeabi_dsub+0x346>
 800263a:	2702      	movs	r7, #2
 800263c:	e641      	b.n	80022c2 <__aeabi_dsub+0x1e2>
 800263e:	4663      	mov	r3, ip
 8002640:	1ac5      	subs	r5, r0, r3
 8002642:	42a8      	cmp	r0, r5
 8002644:	4180      	sbcs	r0, r0
 8002646:	9b02      	ldr	r3, [sp, #8]
 8002648:	4240      	negs	r0, r0
 800264a:	1ae4      	subs	r4, r4, r3
 800264c:	2701      	movs	r7, #1
 800264e:	1a24      	subs	r4, r4, r0
 8002650:	e5a8      	b.n	80021a4 <__aeabi_dsub+0xc4>
 8002652:	9d02      	ldr	r5, [sp, #8]
 8002654:	4652      	mov	r2, sl
 8002656:	002b      	movs	r3, r5
 8002658:	3a20      	subs	r2, #32
 800265a:	40d3      	lsrs	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	4653      	mov	r3, sl
 8002660:	2b20      	cmp	r3, #32
 8002662:	d006      	beq.n	8002672 <__aeabi_dsub+0x592>
 8002664:	2240      	movs	r2, #64	@ 0x40
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	002b      	movs	r3, r5
 800266a:	4093      	lsls	r3, r2
 800266c:	4662      	mov	r2, ip
 800266e:	431a      	orrs	r2, r3
 8002670:	4693      	mov	fp, r2
 8002672:	465d      	mov	r5, fp
 8002674:	1e6b      	subs	r3, r5, #1
 8002676:	419d      	sbcs	r5, r3
 8002678:	430d      	orrs	r5, r1
 800267a:	e615      	b.n	80022a8 <__aeabi_dsub+0x1c8>
 800267c:	0762      	lsls	r2, r4, #29
 800267e:	08c0      	lsrs	r0, r0, #3
 8002680:	4302      	orrs	r2, r0
 8002682:	08e4      	lsrs	r4, r4, #3
 8002684:	e70d      	b.n	80024a2 <__aeabi_dsub+0x3c2>
 8002686:	0011      	movs	r1, r2
 8002688:	0027      	movs	r7, r4
 800268a:	3920      	subs	r1, #32
 800268c:	40cf      	lsrs	r7, r1
 800268e:	2a20      	cmp	r2, #32
 8002690:	d005      	beq.n	800269e <__aeabi_dsub+0x5be>
 8002692:	2140      	movs	r1, #64	@ 0x40
 8002694:	1a8a      	subs	r2, r1, r2
 8002696:	4094      	lsls	r4, r2
 8002698:	0025      	movs	r5, r4
 800269a:	4305      	orrs	r5, r0
 800269c:	9503      	str	r5, [sp, #12]
 800269e:	9d03      	ldr	r5, [sp, #12]
 80026a0:	1e6a      	subs	r2, r5, #1
 80026a2:	4195      	sbcs	r5, r2
 80026a4:	433d      	orrs	r5, r7
 80026a6:	e77d      	b.n	80025a4 <__aeabi_dsub+0x4c4>
 80026a8:	2a00      	cmp	r2, #0
 80026aa:	d100      	bne.n	80026ae <__aeabi_dsub+0x5ce>
 80026ac:	e744      	b.n	8002538 <__aeabi_dsub+0x458>
 80026ae:	2601      	movs	r6, #1
 80026b0:	400e      	ands	r6, r1
 80026b2:	4663      	mov	r3, ip
 80026b4:	08d9      	lsrs	r1, r3, #3
 80026b6:	9b02      	ldr	r3, [sp, #8]
 80026b8:	075a      	lsls	r2, r3, #29
 80026ba:	430a      	orrs	r2, r1
 80026bc:	08dc      	lsrs	r4, r3, #3
 80026be:	e6f0      	b.n	80024a2 <__aeabi_dsub+0x3c2>
 80026c0:	2a00      	cmp	r2, #0
 80026c2:	d028      	beq.n	8002716 <__aeabi_dsub+0x636>
 80026c4:	4662      	mov	r2, ip
 80026c6:	9f02      	ldr	r7, [sp, #8]
 80026c8:	08c0      	lsrs	r0, r0, #3
 80026ca:	433a      	orrs	r2, r7
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x5f0>
 80026ce:	e6dc      	b.n	800248a <__aeabi_dsub+0x3aa>
 80026d0:	0762      	lsls	r2, r4, #29
 80026d2:	4310      	orrs	r0, r2
 80026d4:	2280      	movs	r2, #128	@ 0x80
 80026d6:	08e4      	lsrs	r4, r4, #3
 80026d8:	0312      	lsls	r2, r2, #12
 80026da:	4214      	tst	r4, r2
 80026dc:	d009      	beq.n	80026f2 <__aeabi_dsub+0x612>
 80026de:	08fd      	lsrs	r5, r7, #3
 80026e0:	4215      	tst	r5, r2
 80026e2:	d106      	bne.n	80026f2 <__aeabi_dsub+0x612>
 80026e4:	4663      	mov	r3, ip
 80026e6:	2601      	movs	r6, #1
 80026e8:	002c      	movs	r4, r5
 80026ea:	08d8      	lsrs	r0, r3, #3
 80026ec:	077b      	lsls	r3, r7, #29
 80026ee:	4318      	orrs	r0, r3
 80026f0:	400e      	ands	r6, r1
 80026f2:	0f42      	lsrs	r2, r0, #29
 80026f4:	00c0      	lsls	r0, r0, #3
 80026f6:	08c0      	lsrs	r0, r0, #3
 80026f8:	0752      	lsls	r2, r2, #29
 80026fa:	4302      	orrs	r2, r0
 80026fc:	e601      	b.n	8002302 <__aeabi_dsub+0x222>
 80026fe:	4663      	mov	r3, ip
 8002700:	1a1d      	subs	r5, r3, r0
 8002702:	45ac      	cmp	ip, r5
 8002704:	4192      	sbcs	r2, r2
 8002706:	9b02      	ldr	r3, [sp, #8]
 8002708:	4252      	negs	r2, r2
 800270a:	1b1c      	subs	r4, r3, r4
 800270c:	000e      	movs	r6, r1
 800270e:	4688      	mov	r8, r1
 8002710:	2701      	movs	r7, #1
 8002712:	1aa4      	subs	r4, r4, r2
 8002714:	e546      	b.n	80021a4 <__aeabi_dsub+0xc4>
 8002716:	4663      	mov	r3, ip
 8002718:	08d9      	lsrs	r1, r3, #3
 800271a:	9b02      	ldr	r3, [sp, #8]
 800271c:	075a      	lsls	r2, r3, #29
 800271e:	430a      	orrs	r2, r1
 8002720:	08dc      	lsrs	r4, r3, #3
 8002722:	e5ee      	b.n	8002302 <__aeabi_dsub+0x222>
 8002724:	4663      	mov	r3, ip
 8002726:	9c02      	ldr	r4, [sp, #8]
 8002728:	9303      	str	r3, [sp, #12]
 800272a:	e6c7      	b.n	80024bc <__aeabi_dsub+0x3dc>
 800272c:	08c0      	lsrs	r0, r0, #3
 800272e:	2a00      	cmp	r2, #0
 8002730:	d100      	bne.n	8002734 <__aeabi_dsub+0x654>
 8002732:	e6aa      	b.n	800248a <__aeabi_dsub+0x3aa>
 8002734:	0762      	lsls	r2, r4, #29
 8002736:	4310      	orrs	r0, r2
 8002738:	2280      	movs	r2, #128	@ 0x80
 800273a:	08e4      	lsrs	r4, r4, #3
 800273c:	0312      	lsls	r2, r2, #12
 800273e:	4214      	tst	r4, r2
 8002740:	d0d7      	beq.n	80026f2 <__aeabi_dsub+0x612>
 8002742:	9f02      	ldr	r7, [sp, #8]
 8002744:	08fd      	lsrs	r5, r7, #3
 8002746:	4215      	tst	r5, r2
 8002748:	d1d3      	bne.n	80026f2 <__aeabi_dsub+0x612>
 800274a:	4663      	mov	r3, ip
 800274c:	2601      	movs	r6, #1
 800274e:	08d8      	lsrs	r0, r3, #3
 8002750:	077b      	lsls	r3, r7, #29
 8002752:	002c      	movs	r4, r5
 8002754:	4318      	orrs	r0, r3
 8002756:	400e      	ands	r6, r1
 8002758:	e7cb      	b.n	80026f2 <__aeabi_dsub+0x612>
 800275a:	000a      	movs	r2, r1
 800275c:	0027      	movs	r7, r4
 800275e:	3a20      	subs	r2, #32
 8002760:	40d7      	lsrs	r7, r2
 8002762:	2920      	cmp	r1, #32
 8002764:	d005      	beq.n	8002772 <__aeabi_dsub+0x692>
 8002766:	2240      	movs	r2, #64	@ 0x40
 8002768:	1a52      	subs	r2, r2, r1
 800276a:	4094      	lsls	r4, r2
 800276c:	0025      	movs	r5, r4
 800276e:	4305      	orrs	r5, r0
 8002770:	9503      	str	r5, [sp, #12]
 8002772:	9d03      	ldr	r5, [sp, #12]
 8002774:	1e6a      	subs	r2, r5, #1
 8002776:	4195      	sbcs	r5, r2
 8002778:	432f      	orrs	r7, r5
 800277a:	e610      	b.n	800239e <__aeabi_dsub+0x2be>
 800277c:	0014      	movs	r4, r2
 800277e:	2500      	movs	r5, #0
 8002780:	2200      	movs	r2, #0
 8002782:	e556      	b.n	8002232 <__aeabi_dsub+0x152>
 8002784:	9b02      	ldr	r3, [sp, #8]
 8002786:	4460      	add	r0, ip
 8002788:	4699      	mov	r9, r3
 800278a:	4560      	cmp	r0, ip
 800278c:	4192      	sbcs	r2, r2
 800278e:	444c      	add	r4, r9
 8002790:	4252      	negs	r2, r2
 8002792:	0005      	movs	r5, r0
 8002794:	18a4      	adds	r4, r4, r2
 8002796:	e74c      	b.n	8002632 <__aeabi_dsub+0x552>
 8002798:	001a      	movs	r2, r3
 800279a:	001c      	movs	r4, r3
 800279c:	432a      	orrs	r2, r5
 800279e:	d000      	beq.n	80027a2 <__aeabi_dsub+0x6c2>
 80027a0:	e6b3      	b.n	800250a <__aeabi_dsub+0x42a>
 80027a2:	e6c9      	b.n	8002538 <__aeabi_dsub+0x458>
 80027a4:	2480      	movs	r4, #128	@ 0x80
 80027a6:	2600      	movs	r6, #0
 80027a8:	0324      	lsls	r4, r4, #12
 80027aa:	e5ae      	b.n	800230a <__aeabi_dsub+0x22a>
 80027ac:	2120      	movs	r1, #32
 80027ae:	2500      	movs	r5, #0
 80027b0:	1a09      	subs	r1, r1, r0
 80027b2:	e517      	b.n	80021e4 <__aeabi_dsub+0x104>
 80027b4:	2200      	movs	r2, #0
 80027b6:	2500      	movs	r5, #0
 80027b8:	4c0b      	ldr	r4, [pc, #44]	@ (80027e8 <__aeabi_dsub+0x708>)
 80027ba:	e53a      	b.n	8002232 <__aeabi_dsub+0x152>
 80027bc:	2d00      	cmp	r5, #0
 80027be:	d100      	bne.n	80027c2 <__aeabi_dsub+0x6e2>
 80027c0:	e5f6      	b.n	80023b0 <__aeabi_dsub+0x2d0>
 80027c2:	464b      	mov	r3, r9
 80027c4:	1bda      	subs	r2, r3, r7
 80027c6:	4692      	mov	sl, r2
 80027c8:	2f00      	cmp	r7, #0
 80027ca:	d100      	bne.n	80027ce <__aeabi_dsub+0x6ee>
 80027cc:	e66f      	b.n	80024ae <__aeabi_dsub+0x3ce>
 80027ce:	2a38      	cmp	r2, #56	@ 0x38
 80027d0:	dc05      	bgt.n	80027de <__aeabi_dsub+0x6fe>
 80027d2:	2680      	movs	r6, #128	@ 0x80
 80027d4:	0436      	lsls	r6, r6, #16
 80027d6:	4334      	orrs	r4, r6
 80027d8:	4688      	mov	r8, r1
 80027da:	000e      	movs	r6, r1
 80027dc:	e6d1      	b.n	8002582 <__aeabi_dsub+0x4a2>
 80027de:	4688      	mov	r8, r1
 80027e0:	000e      	movs	r6, r1
 80027e2:	2501      	movs	r5, #1
 80027e4:	e6de      	b.n	80025a4 <__aeabi_dsub+0x4c4>
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	000007ff 	.word	0x000007ff
 80027ec:	ff7fffff 	.word	0xff7fffff
 80027f0:	000007fe 	.word	0x000007fe
 80027f4:	2d00      	cmp	r5, #0
 80027f6:	d100      	bne.n	80027fa <__aeabi_dsub+0x71a>
 80027f8:	e668      	b.n	80024cc <__aeabi_dsub+0x3ec>
 80027fa:	464b      	mov	r3, r9
 80027fc:	1bd9      	subs	r1, r3, r7
 80027fe:	2f00      	cmp	r7, #0
 8002800:	d101      	bne.n	8002806 <__aeabi_dsub+0x726>
 8002802:	468a      	mov	sl, r1
 8002804:	e5a7      	b.n	8002356 <__aeabi_dsub+0x276>
 8002806:	2701      	movs	r7, #1
 8002808:	2938      	cmp	r1, #56	@ 0x38
 800280a:	dd00      	ble.n	800280e <__aeabi_dsub+0x72e>
 800280c:	e5c7      	b.n	800239e <__aeabi_dsub+0x2be>
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	0412      	lsls	r2, r2, #16
 8002812:	4314      	orrs	r4, r2
 8002814:	e5af      	b.n	8002376 <__aeabi_dsub+0x296>
 8002816:	46c0      	nop			@ (mov r8, r8)

08002818 <__aeabi_dcmpun>:
 8002818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281a:	46c6      	mov	lr, r8
 800281c:	031e      	lsls	r6, r3, #12
 800281e:	0b36      	lsrs	r6, r6, #12
 8002820:	46b0      	mov	r8, r6
 8002822:	4e0d      	ldr	r6, [pc, #52]	@ (8002858 <__aeabi_dcmpun+0x40>)
 8002824:	030c      	lsls	r4, r1, #12
 8002826:	004d      	lsls	r5, r1, #1
 8002828:	005f      	lsls	r7, r3, #1
 800282a:	b500      	push	{lr}
 800282c:	0b24      	lsrs	r4, r4, #12
 800282e:	0d6d      	lsrs	r5, r5, #21
 8002830:	0d7f      	lsrs	r7, r7, #21
 8002832:	42b5      	cmp	r5, r6
 8002834:	d00b      	beq.n	800284e <__aeabi_dcmpun+0x36>
 8002836:	4908      	ldr	r1, [pc, #32]	@ (8002858 <__aeabi_dcmpun+0x40>)
 8002838:	2000      	movs	r0, #0
 800283a:	428f      	cmp	r7, r1
 800283c:	d104      	bne.n	8002848 <__aeabi_dcmpun+0x30>
 800283e:	4646      	mov	r6, r8
 8002840:	4316      	orrs	r6, r2
 8002842:	0030      	movs	r0, r6
 8002844:	1e43      	subs	r3, r0, #1
 8002846:	4198      	sbcs	r0, r3
 8002848:	bc80      	pop	{r7}
 800284a:	46b8      	mov	r8, r7
 800284c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800284e:	4304      	orrs	r4, r0
 8002850:	2001      	movs	r0, #1
 8002852:	2c00      	cmp	r4, #0
 8002854:	d1f8      	bne.n	8002848 <__aeabi_dcmpun+0x30>
 8002856:	e7ee      	b.n	8002836 <__aeabi_dcmpun+0x1e>
 8002858:	000007ff 	.word	0x000007ff

0800285c <__aeabi_d2iz>:
 800285c:	000b      	movs	r3, r1
 800285e:	0002      	movs	r2, r0
 8002860:	b570      	push	{r4, r5, r6, lr}
 8002862:	4d16      	ldr	r5, [pc, #88]	@ (80028bc <__aeabi_d2iz+0x60>)
 8002864:	030c      	lsls	r4, r1, #12
 8002866:	b082      	sub	sp, #8
 8002868:	0049      	lsls	r1, r1, #1
 800286a:	2000      	movs	r0, #0
 800286c:	9200      	str	r2, [sp, #0]
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	0b24      	lsrs	r4, r4, #12
 8002872:	0d49      	lsrs	r1, r1, #21
 8002874:	0fde      	lsrs	r6, r3, #31
 8002876:	42a9      	cmp	r1, r5
 8002878:	dd04      	ble.n	8002884 <__aeabi_d2iz+0x28>
 800287a:	4811      	ldr	r0, [pc, #68]	@ (80028c0 <__aeabi_d2iz+0x64>)
 800287c:	4281      	cmp	r1, r0
 800287e:	dd03      	ble.n	8002888 <__aeabi_d2iz+0x2c>
 8002880:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <__aeabi_d2iz+0x68>)
 8002882:	18f0      	adds	r0, r6, r3
 8002884:	b002      	add	sp, #8
 8002886:	bd70      	pop	{r4, r5, r6, pc}
 8002888:	2080      	movs	r0, #128	@ 0x80
 800288a:	0340      	lsls	r0, r0, #13
 800288c:	4320      	orrs	r0, r4
 800288e:	4c0e      	ldr	r4, [pc, #56]	@ (80028c8 <__aeabi_d2iz+0x6c>)
 8002890:	1a64      	subs	r4, r4, r1
 8002892:	2c1f      	cmp	r4, #31
 8002894:	dd08      	ble.n	80028a8 <__aeabi_d2iz+0x4c>
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <__aeabi_d2iz+0x70>)
 8002898:	1a5b      	subs	r3, r3, r1
 800289a:	40d8      	lsrs	r0, r3
 800289c:	0003      	movs	r3, r0
 800289e:	4258      	negs	r0, r3
 80028a0:	2e00      	cmp	r6, #0
 80028a2:	d1ef      	bne.n	8002884 <__aeabi_d2iz+0x28>
 80028a4:	0018      	movs	r0, r3
 80028a6:	e7ed      	b.n	8002884 <__aeabi_d2iz+0x28>
 80028a8:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <__aeabi_d2iz+0x74>)
 80028aa:	9a00      	ldr	r2, [sp, #0]
 80028ac:	469c      	mov	ip, r3
 80028ae:	0003      	movs	r3, r0
 80028b0:	4461      	add	r1, ip
 80028b2:	408b      	lsls	r3, r1
 80028b4:	40e2      	lsrs	r2, r4
 80028b6:	4313      	orrs	r3, r2
 80028b8:	e7f1      	b.n	800289e <__aeabi_d2iz+0x42>
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	000003fe 	.word	0x000003fe
 80028c0:	0000041d 	.word	0x0000041d
 80028c4:	7fffffff 	.word	0x7fffffff
 80028c8:	00000433 	.word	0x00000433
 80028cc:	00000413 	.word	0x00000413
 80028d0:	fffffbed 	.word	0xfffffbed

080028d4 <__aeabi_i2d>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	2800      	cmp	r0, #0
 80028d8:	d016      	beq.n	8002908 <__aeabi_i2d+0x34>
 80028da:	17c3      	asrs	r3, r0, #31
 80028dc:	18c5      	adds	r5, r0, r3
 80028de:	405d      	eors	r5, r3
 80028e0:	0fc4      	lsrs	r4, r0, #31
 80028e2:	0028      	movs	r0, r5
 80028e4:	f000 f914 	bl	8002b10 <__clzsi2>
 80028e8:	4b10      	ldr	r3, [pc, #64]	@ (800292c <__aeabi_i2d+0x58>)
 80028ea:	1a1b      	subs	r3, r3, r0
 80028ec:	055b      	lsls	r3, r3, #21
 80028ee:	0d5b      	lsrs	r3, r3, #21
 80028f0:	280a      	cmp	r0, #10
 80028f2:	dc14      	bgt.n	800291e <__aeabi_i2d+0x4a>
 80028f4:	0002      	movs	r2, r0
 80028f6:	002e      	movs	r6, r5
 80028f8:	3215      	adds	r2, #21
 80028fa:	4096      	lsls	r6, r2
 80028fc:	220b      	movs	r2, #11
 80028fe:	1a12      	subs	r2, r2, r0
 8002900:	40d5      	lsrs	r5, r2
 8002902:	032d      	lsls	r5, r5, #12
 8002904:	0b2d      	lsrs	r5, r5, #12
 8002906:	e003      	b.n	8002910 <__aeabi_i2d+0x3c>
 8002908:	2400      	movs	r4, #0
 800290a:	2300      	movs	r3, #0
 800290c:	2500      	movs	r5, #0
 800290e:	2600      	movs	r6, #0
 8002910:	051b      	lsls	r3, r3, #20
 8002912:	432b      	orrs	r3, r5
 8002914:	07e4      	lsls	r4, r4, #31
 8002916:	4323      	orrs	r3, r4
 8002918:	0030      	movs	r0, r6
 800291a:	0019      	movs	r1, r3
 800291c:	bd70      	pop	{r4, r5, r6, pc}
 800291e:	380b      	subs	r0, #11
 8002920:	4085      	lsls	r5, r0
 8002922:	032d      	lsls	r5, r5, #12
 8002924:	2600      	movs	r6, #0
 8002926:	0b2d      	lsrs	r5, r5, #12
 8002928:	e7f2      	b.n	8002910 <__aeabi_i2d+0x3c>
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	0000041e 	.word	0x0000041e

08002930 <__aeabi_ui2d>:
 8002930:	b510      	push	{r4, lr}
 8002932:	1e04      	subs	r4, r0, #0
 8002934:	d010      	beq.n	8002958 <__aeabi_ui2d+0x28>
 8002936:	f000 f8eb 	bl	8002b10 <__clzsi2>
 800293a:	4b0e      	ldr	r3, [pc, #56]	@ (8002974 <__aeabi_ui2d+0x44>)
 800293c:	1a1b      	subs	r3, r3, r0
 800293e:	055b      	lsls	r3, r3, #21
 8002940:	0d5b      	lsrs	r3, r3, #21
 8002942:	280a      	cmp	r0, #10
 8002944:	dc0f      	bgt.n	8002966 <__aeabi_ui2d+0x36>
 8002946:	220b      	movs	r2, #11
 8002948:	0021      	movs	r1, r4
 800294a:	1a12      	subs	r2, r2, r0
 800294c:	40d1      	lsrs	r1, r2
 800294e:	3015      	adds	r0, #21
 8002950:	030a      	lsls	r2, r1, #12
 8002952:	4084      	lsls	r4, r0
 8002954:	0b12      	lsrs	r2, r2, #12
 8002956:	e001      	b.n	800295c <__aeabi_ui2d+0x2c>
 8002958:	2300      	movs	r3, #0
 800295a:	2200      	movs	r2, #0
 800295c:	051b      	lsls	r3, r3, #20
 800295e:	4313      	orrs	r3, r2
 8002960:	0020      	movs	r0, r4
 8002962:	0019      	movs	r1, r3
 8002964:	bd10      	pop	{r4, pc}
 8002966:	0022      	movs	r2, r4
 8002968:	380b      	subs	r0, #11
 800296a:	4082      	lsls	r2, r0
 800296c:	0312      	lsls	r2, r2, #12
 800296e:	2400      	movs	r4, #0
 8002970:	0b12      	lsrs	r2, r2, #12
 8002972:	e7f3      	b.n	800295c <__aeabi_ui2d+0x2c>
 8002974:	0000041e 	.word	0x0000041e

08002978 <__aeabi_f2d>:
 8002978:	b570      	push	{r4, r5, r6, lr}
 800297a:	0242      	lsls	r2, r0, #9
 800297c:	0043      	lsls	r3, r0, #1
 800297e:	0fc4      	lsrs	r4, r0, #31
 8002980:	20fe      	movs	r0, #254	@ 0xfe
 8002982:	0e1b      	lsrs	r3, r3, #24
 8002984:	1c59      	adds	r1, r3, #1
 8002986:	0a55      	lsrs	r5, r2, #9
 8002988:	4208      	tst	r0, r1
 800298a:	d00c      	beq.n	80029a6 <__aeabi_f2d+0x2e>
 800298c:	21e0      	movs	r1, #224	@ 0xe0
 800298e:	0089      	lsls	r1, r1, #2
 8002990:	468c      	mov	ip, r1
 8002992:	076d      	lsls	r5, r5, #29
 8002994:	0b12      	lsrs	r2, r2, #12
 8002996:	4463      	add	r3, ip
 8002998:	051b      	lsls	r3, r3, #20
 800299a:	4313      	orrs	r3, r2
 800299c:	07e4      	lsls	r4, r4, #31
 800299e:	4323      	orrs	r3, r4
 80029a0:	0028      	movs	r0, r5
 80029a2:	0019      	movs	r1, r3
 80029a4:	bd70      	pop	{r4, r5, r6, pc}
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d114      	bne.n	80029d4 <__aeabi_f2d+0x5c>
 80029aa:	2d00      	cmp	r5, #0
 80029ac:	d01b      	beq.n	80029e6 <__aeabi_f2d+0x6e>
 80029ae:	0028      	movs	r0, r5
 80029b0:	f000 f8ae 	bl	8002b10 <__clzsi2>
 80029b4:	280a      	cmp	r0, #10
 80029b6:	dc1c      	bgt.n	80029f2 <__aeabi_f2d+0x7a>
 80029b8:	230b      	movs	r3, #11
 80029ba:	002a      	movs	r2, r5
 80029bc:	1a1b      	subs	r3, r3, r0
 80029be:	40da      	lsrs	r2, r3
 80029c0:	0003      	movs	r3, r0
 80029c2:	3315      	adds	r3, #21
 80029c4:	409d      	lsls	r5, r3
 80029c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a00 <__aeabi_f2d+0x88>)
 80029c8:	0312      	lsls	r2, r2, #12
 80029ca:	1a1b      	subs	r3, r3, r0
 80029cc:	055b      	lsls	r3, r3, #21
 80029ce:	0b12      	lsrs	r2, r2, #12
 80029d0:	0d5b      	lsrs	r3, r3, #21
 80029d2:	e7e1      	b.n	8002998 <__aeabi_f2d+0x20>
 80029d4:	2d00      	cmp	r5, #0
 80029d6:	d009      	beq.n	80029ec <__aeabi_f2d+0x74>
 80029d8:	0b13      	lsrs	r3, r2, #12
 80029da:	2280      	movs	r2, #128	@ 0x80
 80029dc:	0312      	lsls	r2, r2, #12
 80029de:	431a      	orrs	r2, r3
 80029e0:	076d      	lsls	r5, r5, #29
 80029e2:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <__aeabi_f2d+0x8c>)
 80029e4:	e7d8      	b.n	8002998 <__aeabi_f2d+0x20>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2200      	movs	r2, #0
 80029ea:	e7d5      	b.n	8002998 <__aeabi_f2d+0x20>
 80029ec:	2200      	movs	r2, #0
 80029ee:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <__aeabi_f2d+0x8c>)
 80029f0:	e7d2      	b.n	8002998 <__aeabi_f2d+0x20>
 80029f2:	0003      	movs	r3, r0
 80029f4:	002a      	movs	r2, r5
 80029f6:	3b0b      	subs	r3, #11
 80029f8:	409a      	lsls	r2, r3
 80029fa:	2500      	movs	r5, #0
 80029fc:	e7e3      	b.n	80029c6 <__aeabi_f2d+0x4e>
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	00000389 	.word	0x00000389
 8002a04:	000007ff 	.word	0x000007ff

08002a08 <__aeabi_d2f>:
 8002a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0a:	004b      	lsls	r3, r1, #1
 8002a0c:	030f      	lsls	r7, r1, #12
 8002a0e:	0d5b      	lsrs	r3, r3, #21
 8002a10:	4c3b      	ldr	r4, [pc, #236]	@ (8002b00 <__aeabi_d2f+0xf8>)
 8002a12:	0f45      	lsrs	r5, r0, #29
 8002a14:	b083      	sub	sp, #12
 8002a16:	0a7f      	lsrs	r7, r7, #9
 8002a18:	1c5e      	adds	r6, r3, #1
 8002a1a:	432f      	orrs	r7, r5
 8002a1c:	9000      	str	r0, [sp, #0]
 8002a1e:	9101      	str	r1, [sp, #4]
 8002a20:	0fca      	lsrs	r2, r1, #31
 8002a22:	00c5      	lsls	r5, r0, #3
 8002a24:	4226      	tst	r6, r4
 8002a26:	d00b      	beq.n	8002a40 <__aeabi_d2f+0x38>
 8002a28:	4936      	ldr	r1, [pc, #216]	@ (8002b04 <__aeabi_d2f+0xfc>)
 8002a2a:	185c      	adds	r4, r3, r1
 8002a2c:	2cfe      	cmp	r4, #254	@ 0xfe
 8002a2e:	dd13      	ble.n	8002a58 <__aeabi_d2f+0x50>
 8002a30:	20ff      	movs	r0, #255	@ 0xff
 8002a32:	2300      	movs	r3, #0
 8002a34:	05c0      	lsls	r0, r0, #23
 8002a36:	4318      	orrs	r0, r3
 8002a38:	07d2      	lsls	r2, r2, #31
 8002a3a:	4310      	orrs	r0, r2
 8002a3c:	b003      	add	sp, #12
 8002a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d102      	bne.n	8002a4a <__aeabi_d2f+0x42>
 8002a44:	2000      	movs	r0, #0
 8002a46:	2300      	movs	r3, #0
 8002a48:	e7f4      	b.n	8002a34 <__aeabi_d2f+0x2c>
 8002a4a:	433d      	orrs	r5, r7
 8002a4c:	d0f0      	beq.n	8002a30 <__aeabi_d2f+0x28>
 8002a4e:	2380      	movs	r3, #128	@ 0x80
 8002a50:	03db      	lsls	r3, r3, #15
 8002a52:	20ff      	movs	r0, #255	@ 0xff
 8002a54:	433b      	orrs	r3, r7
 8002a56:	e7ed      	b.n	8002a34 <__aeabi_d2f+0x2c>
 8002a58:	2c00      	cmp	r4, #0
 8002a5a:	dd14      	ble.n	8002a86 <__aeabi_d2f+0x7e>
 8002a5c:	9b00      	ldr	r3, [sp, #0]
 8002a5e:	00ff      	lsls	r7, r7, #3
 8002a60:	019b      	lsls	r3, r3, #6
 8002a62:	1e58      	subs	r0, r3, #1
 8002a64:	4183      	sbcs	r3, r0
 8002a66:	0f69      	lsrs	r1, r5, #29
 8002a68:	433b      	orrs	r3, r7
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	0759      	lsls	r1, r3, #29
 8002a6e:	d041      	beq.n	8002af4 <__aeabi_d2f+0xec>
 8002a70:	210f      	movs	r1, #15
 8002a72:	4019      	ands	r1, r3
 8002a74:	2904      	cmp	r1, #4
 8002a76:	d028      	beq.n	8002aca <__aeabi_d2f+0xc2>
 8002a78:	3304      	adds	r3, #4
 8002a7a:	0159      	lsls	r1, r3, #5
 8002a7c:	d525      	bpl.n	8002aca <__aeabi_d2f+0xc2>
 8002a7e:	3401      	adds	r4, #1
 8002a80:	2300      	movs	r3, #0
 8002a82:	b2e0      	uxtb	r0, r4
 8002a84:	e7d6      	b.n	8002a34 <__aeabi_d2f+0x2c>
 8002a86:	0021      	movs	r1, r4
 8002a88:	3117      	adds	r1, #23
 8002a8a:	dbdb      	blt.n	8002a44 <__aeabi_d2f+0x3c>
 8002a8c:	2180      	movs	r1, #128	@ 0x80
 8002a8e:	201e      	movs	r0, #30
 8002a90:	0409      	lsls	r1, r1, #16
 8002a92:	4339      	orrs	r1, r7
 8002a94:	1b00      	subs	r0, r0, r4
 8002a96:	281f      	cmp	r0, #31
 8002a98:	dd1b      	ble.n	8002ad2 <__aeabi_d2f+0xca>
 8002a9a:	2602      	movs	r6, #2
 8002a9c:	4276      	negs	r6, r6
 8002a9e:	1b34      	subs	r4, r6, r4
 8002aa0:	000e      	movs	r6, r1
 8002aa2:	40e6      	lsrs	r6, r4
 8002aa4:	0034      	movs	r4, r6
 8002aa6:	2820      	cmp	r0, #32
 8002aa8:	d004      	beq.n	8002ab4 <__aeabi_d2f+0xac>
 8002aaa:	4817      	ldr	r0, [pc, #92]	@ (8002b08 <__aeabi_d2f+0x100>)
 8002aac:	4684      	mov	ip, r0
 8002aae:	4463      	add	r3, ip
 8002ab0:	4099      	lsls	r1, r3
 8002ab2:	430d      	orrs	r5, r1
 8002ab4:	002b      	movs	r3, r5
 8002ab6:	1e59      	subs	r1, r3, #1
 8002ab8:	418b      	sbcs	r3, r1
 8002aba:	4323      	orrs	r3, r4
 8002abc:	0759      	lsls	r1, r3, #29
 8002abe:	d015      	beq.n	8002aec <__aeabi_d2f+0xe4>
 8002ac0:	210f      	movs	r1, #15
 8002ac2:	2400      	movs	r4, #0
 8002ac4:	4019      	ands	r1, r3
 8002ac6:	2904      	cmp	r1, #4
 8002ac8:	d117      	bne.n	8002afa <__aeabi_d2f+0xf2>
 8002aca:	019b      	lsls	r3, r3, #6
 8002acc:	0a5b      	lsrs	r3, r3, #9
 8002ace:	b2e0      	uxtb	r0, r4
 8002ad0:	e7b0      	b.n	8002a34 <__aeabi_d2f+0x2c>
 8002ad2:	4c0e      	ldr	r4, [pc, #56]	@ (8002b0c <__aeabi_d2f+0x104>)
 8002ad4:	191c      	adds	r4, r3, r4
 8002ad6:	002b      	movs	r3, r5
 8002ad8:	40a5      	lsls	r5, r4
 8002ada:	40c3      	lsrs	r3, r0
 8002adc:	40a1      	lsls	r1, r4
 8002ade:	1e68      	subs	r0, r5, #1
 8002ae0:	4185      	sbcs	r5, r0
 8002ae2:	4329      	orrs	r1, r5
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	2400      	movs	r4, #0
 8002ae8:	0759      	lsls	r1, r3, #29
 8002aea:	d1c1      	bne.n	8002a70 <__aeabi_d2f+0x68>
 8002aec:	019b      	lsls	r3, r3, #6
 8002aee:	2000      	movs	r0, #0
 8002af0:	0a5b      	lsrs	r3, r3, #9
 8002af2:	e79f      	b.n	8002a34 <__aeabi_d2f+0x2c>
 8002af4:	08db      	lsrs	r3, r3, #3
 8002af6:	b2e0      	uxtb	r0, r4
 8002af8:	e79c      	b.n	8002a34 <__aeabi_d2f+0x2c>
 8002afa:	3304      	adds	r3, #4
 8002afc:	e7e5      	b.n	8002aca <__aeabi_d2f+0xc2>
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	000007fe 	.word	0x000007fe
 8002b04:	fffffc80 	.word	0xfffffc80
 8002b08:	fffffca2 	.word	0xfffffca2
 8002b0c:	fffffc82 	.word	0xfffffc82

08002b10 <__clzsi2>:
 8002b10:	211c      	movs	r1, #28
 8002b12:	2301      	movs	r3, #1
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	4298      	cmp	r0, r3
 8002b18:	d301      	bcc.n	8002b1e <__clzsi2+0xe>
 8002b1a:	0c00      	lsrs	r0, r0, #16
 8002b1c:	3910      	subs	r1, #16
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	4298      	cmp	r0, r3
 8002b22:	d301      	bcc.n	8002b28 <__clzsi2+0x18>
 8002b24:	0a00      	lsrs	r0, r0, #8
 8002b26:	3908      	subs	r1, #8
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	4298      	cmp	r0, r3
 8002b2c:	d301      	bcc.n	8002b32 <__clzsi2+0x22>
 8002b2e:	0900      	lsrs	r0, r0, #4
 8002b30:	3904      	subs	r1, #4
 8002b32:	a202      	add	r2, pc, #8	@ (adr r2, 8002b3c <__clzsi2+0x2c>)
 8002b34:	5c10      	ldrb	r0, [r2, r0]
 8002b36:	1840      	adds	r0, r0, r1
 8002b38:	4770      	bx	lr
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	02020304 	.word	0x02020304
 8002b40:	01010101 	.word	0x01010101
	...

08002b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b4c:	b5b0      	push	{r4, r5, r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8002b52:	f002 f8cb 	bl	8004cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b56:	f000 f921 	bl	8002d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b5a:	f000 fe4b 	bl	80037f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b5e:	f000 fe23 	bl	80037a8 <MX_DMA_Init>
  MX_ADC_Init();
 8002b62:	f000 fc5b 	bl	800341c <MX_ADC_Init>
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
 8002b66:	f001 ff97 	bl	8004a98 <MX_USART1_UART_Init>
  HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 8002b6a:	4971      	ldr	r1, [pc, #452]	@ (8002d30 <main+0x1e4>)
 8002b6c:	4b71      	ldr	r3, [pc, #452]	@ (8002d34 <main+0x1e8>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	0018      	movs	r0, r3
 8002b72:	f005 fc22 	bl	80083ba <HAL_UART_Receive_IT>

  MX_TIM1_Init();
 8002b76:	f001 fb0d 	bl	8004194 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002b7a:	f001 fc13 	bl	80043a4 <MX_TIM3_Init>
  MX_TIM6_Init();
 8002b7e:	f001 fc9b 	bl	80044b8 <MX_TIM6_Init>
  MX_TIM14_Init();
 8002b82:	f001 fcbb 	bl	80044fc <MX_TIM14_Init>
  MX_TIM15_Init();
 8002b86:	f001 fd05 	bl	8004594 <MX_TIM15_Init>
  MX_TIM16_Init();
 8002b8a:	f001 fd75 	bl	8004678 <MX_TIM16_Init>

  HAL_TIM_Base_Start_IT(&htim3);
 8002b8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002d38 <main+0x1ec>)
 8002b90:	0018      	movs	r0, r3
 8002b92:	f003 ff7f 	bl	8006a94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8002b96:	4b69      	ldr	r3, [pc, #420]	@ (8002d3c <main+0x1f0>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f003 ff7b 	bl	8006a94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8002b9e:	4b68      	ldr	r3, [pc, #416]	@ (8002d40 <main+0x1f4>)
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f003 ff77 	bl	8006a94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 8002ba6:	4b67      	ldr	r3, [pc, #412]	@ (8002d44 <main+0x1f8>)
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f003 ff73 	bl	8006a94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8002bae:	4b66      	ldr	r3, [pc, #408]	@ (8002d48 <main+0x1fc>)
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f003 ff6f 	bl	8006a94 <HAL_TIM_Base_Start_IT>

	if(HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buf, sizeof(adc_buf)/2)!=HAL_OK)//Remember that the length of DMA is half world and size of return bytes:that is double of the data transmited so the array overfllow!
 8002bb6:	4965      	ldr	r1, [pc, #404]	@ (8002d4c <main+0x200>)
 8002bb8:	4b65      	ldr	r3, [pc, #404]	@ (8002d50 <main+0x204>)
 8002bba:	220a      	movs	r2, #10
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f002 fa39 	bl	8005034 <HAL_ADC_Start_DMA>
 8002bc2:	1e03      	subs	r3, r0, #0
 8002bc4:	d001      	beq.n	8002bca <main+0x7e>
	{
		Error_Handler(); //This function also enable the interruption
 8002bc6:	f000 f98b 	bl	8002ee0 <Error_Handler>
	}

  /* USER CODE BEGIN 2 */
	HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_4);
 8002bca:	4b62      	ldr	r3, [pc, #392]	@ (8002d54 <main+0x208>)
 8002bcc:	210c      	movs	r1, #12
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f004 f832 	bl	8006c38 <HAL_TIM_OC_Start>
	HAL_TIM_PWM_Start(&htim1, AH);
 8002bd4:	4b5f      	ldr	r3, [pc, #380]	@ (8002d54 <main+0x208>)
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f004 f937 	bl	8006e4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, BH);
 8002bde:	4b5d      	ldr	r3, [pc, #372]	@ (8002d54 <main+0x208>)
 8002be0:	2104      	movs	r1, #4
 8002be2:	0018      	movs	r0, r3
 8002be4:	f004 f932 	bl	8006e4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, CH);
 8002be8:	4b5a      	ldr	r3, [pc, #360]	@ (8002d54 <main+0x208>)
 8002bea:	2108      	movs	r1, #8
 8002bec:	0018      	movs	r0, r3
 8002bee:	f004 f92d 	bl	8006e4c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, AH);
 8002bf2:	4b58      	ldr	r3, [pc, #352]	@ (8002d54 <main+0x208>)
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f005 f96c 	bl	8007ed4 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, BH);
 8002bfc:	4b55      	ldr	r3, [pc, #340]	@ (8002d54 <main+0x208>)
 8002bfe:	2104      	movs	r1, #4
 8002c00:	0018      	movs	r0, r3
 8002c02:	f005 f967 	bl	8007ed4 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, CH);
 8002c06:	4b53      	ldr	r3, [pc, #332]	@ (8002d54 <main+0x208>)
 8002c08:	2108      	movs	r1, #8
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f005 f962 	bl	8007ed4 <HAL_TIMEx_PWMN_Start>
	HX711_Calibration(&weight_par);
 8002c10:	4b51      	ldr	r3, [pc, #324]	@ (8002d58 <main+0x20c>)
 8002c12:	0018      	movs	r0, r3
 8002c14:	f001 f8ae 	bl	8003d74 <HX711_Calibration>
	printflag.PID_Set = FALSE;
 8002c18:	4b50      	ldr	r3, [pc, #320]	@ (8002d5c <main+0x210>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	715a      	strb	r2, [r3, #5]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Kalman  filter
	if(weight_par.calibration_flag)
 8002c1e:	4b4e      	ldr	r3, [pc, #312]	@ (8002d58 <main+0x20c>)
 8002c20:	7b1b      	ldrb	r3, [r3, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01e      	beq.n	8002c64 <main+0x118>
	{
		printf_DMA("%d, %d, %0.1f\r\n",weight_par.gramAvgval, (int)htim1.Instance->CCR2, (float)(adc_val.ia-1640)*0.015);//Vofa+ chart   3.3/4095/35/0.001 = 0.023
 8002c26:	4b4c      	ldr	r3, [pc, #304]	@ (8002d58 <main+0x20c>)
 8002c28:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d54 <main+0x208>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	001d      	movs	r5, r3
 8002c32:	4b4b      	ldr	r3, [pc, #300]	@ (8002d60 <main+0x214>)
 8002c34:	891b      	ldrh	r3, [r3, #8]
 8002c36:	4a4b      	ldr	r2, [pc, #300]	@ (8002d64 <main+0x218>)
 8002c38:	4694      	mov	ip, r2
 8002c3a:	4463      	add	r3, ip
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7fd ff93 	bl	8000b68 <__aeabi_i2f>
 8002c42:	1c03      	adds	r3, r0, #0
 8002c44:	1c18      	adds	r0, r3, #0
 8002c46:	f7ff fe97 	bl	8002978 <__aeabi_f2d>
 8002c4a:	4a47      	ldr	r2, [pc, #284]	@ (8002d68 <main+0x21c>)
 8002c4c:	4b47      	ldr	r3, [pc, #284]	@ (8002d6c <main+0x220>)
 8002c4e:	f7fe ff7f 	bl	8001b50 <__aeabi_dmul>
 8002c52:	0002      	movs	r2, r0
 8002c54:	000b      	movs	r3, r1
 8002c56:	4846      	ldr	r0, [pc, #280]	@ (8002d70 <main+0x224>)
 8002c58:	9200      	str	r2, [sp, #0]
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	002a      	movs	r2, r5
 8002c5e:	0021      	movs	r1, r4
 8002c60:	f000 f912 	bl	8002e88 <printf_DMA>

//		printf_DMA("gram: %d\r\n", weight_par.gramAvgval );
		//		printf_DMA("%d\r\n", adc_val.commutation_delay);
//		HAL_UART_Transmit_DMA(&huart1, (uint8_t *) txbuff, sizeof(txbuff)+1); // if it is (uint8_t) * txbuff, then it will be force the txbuff to char, not change the addr to char
	}
	if(1100 <= printflag.TimeCNT)
 8002c64:	4b3d      	ldr	r3, [pc, #244]	@ (8002d5c <main+0x210>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a42      	ldr	r2, [pc, #264]	@ (8002d74 <main+0x228>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	dd4b      	ble.n	8002d06 <main+0x1ba>
	{
		printf_DMA("VBat%0.2fV\n",	adc_val.vbat*(Vrefint*4095/adc_val.vref_data)/4095/VBAT_FACTOR);
 8002c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d60 <main+0x214>)
 8002c70:	8a1b      	ldrh	r3, [r3, #16]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7ff fe2e 	bl	80028d4 <__aeabi_i2d>
 8002c78:	0004      	movs	r4, r0
 8002c7a:	000d      	movs	r5, r1
 8002c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d78 <main+0x22c>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	0018      	movs	r0, r3
 8002c84:	f7ff fe26 	bl	80028d4 <__aeabi_i2d>
 8002c88:	4a3c      	ldr	r2, [pc, #240]	@ (8002d7c <main+0x230>)
 8002c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d80 <main+0x234>)
 8002c8c:	f7fe ff60 	bl	8001b50 <__aeabi_dmul>
 8002c90:	0002      	movs	r2, r0
 8002c92:	000b      	movs	r3, r1
 8002c94:	0010      	movs	r0, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	2200      	movs	r2, #0
 8002c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d84 <main+0x238>)
 8002c9c:	f7fe fb14 	bl	80012c8 <__aeabi_ddiv>
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	000b      	movs	r3, r1
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	2200      	movs	r2, #0
 8002caa:	4b36      	ldr	r3, [pc, #216]	@ (8002d84 <main+0x238>)
 8002cac:	f7fe ff50 	bl	8001b50 <__aeabi_dmul>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	000b      	movs	r3, r1
 8002cb4:	603a      	str	r2, [r7, #0]
 8002cb6:	607b      	str	r3, [r7, #4]
 8002cb8:	4b29      	ldr	r3, [pc, #164]	@ (8002d60 <main+0x214>)
 8002cba:	8a5b      	ldrh	r3, [r3, #18]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7ff fe09 	bl	80028d4 <__aeabi_i2d>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	000b      	movs	r3, r1
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	f7fe fafd 	bl	80012c8 <__aeabi_ddiv>
 8002cce:	0002      	movs	r2, r0
 8002cd0:	000b      	movs	r3, r1
 8002cd2:	0020      	movs	r0, r4
 8002cd4:	0029      	movs	r1, r5
 8002cd6:	f7fe ff3b 	bl	8001b50 <__aeabi_dmul>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	000b      	movs	r3, r1
 8002cde:	0010      	movs	r0, r2
 8002ce0:	0019      	movs	r1, r3
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4b27      	ldr	r3, [pc, #156]	@ (8002d84 <main+0x238>)
 8002ce6:	f7fe faef 	bl	80012c8 <__aeabi_ddiv>
 8002cea:	0002      	movs	r2, r0
 8002cec:	000b      	movs	r3, r1
 8002cee:	0010      	movs	r0, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	4a25      	ldr	r2, [pc, #148]	@ (8002d88 <main+0x23c>)
 8002cf4:	4b25      	ldr	r3, [pc, #148]	@ (8002d8c <main+0x240>)
 8002cf6:	f7fe fae7 	bl	80012c8 <__aeabi_ddiv>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	000b      	movs	r3, r1
 8002cfe:	4924      	ldr	r1, [pc, #144]	@ (8002d90 <main+0x244>)
 8002d00:	0008      	movs	r0, r1
 8002d02:	f000 f8c1 	bl	8002e88 <printf_DMA>
	}
	if(printflag.OCP_flag)//||weight_par.sens_err_flag)
 8002d06:	4b15      	ldr	r3, [pc, #84]	@ (8002d5c <main+0x210>)
 8002d08:	7a5b      	ldrb	r3, [r3, #9]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <main+0x1ce>
	{
		printf_DMA("OCP\n");
 8002d0e:	4b21      	ldr	r3, [pc, #132]	@ (8002d94 <main+0x248>)
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 f8b9 	bl	8002e88 <printf_DMA>
		error_code();
 8002d16:	f001 f95b 	bl	8003fd0 <error_code>
	}
	if(printflag.sensor_err)
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <main+0x210>)
 8002d1c:	7a9b      	ldrb	r3, [r3, #10]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d100      	bne.n	8002d24 <main+0x1d8>
 8002d22:	e77c      	b.n	8002c1e <main+0xd2>
	{
		printf_DMA("Data un-ready\n");
 8002d24:	4b1c      	ldr	r3, [pc, #112]	@ (8002d98 <main+0x24c>)
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 f8ae 	bl	8002e88 <printf_DMA>
	if(weight_par.calibration_flag)
 8002d2c:	e777      	b.n	8002c1e <main+0xd2>
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	200006c7 	.word	0x200006c7
 8002d34:	200006cc 	.word	0x200006cc
 8002d38:	20000360 	.word	0x20000360
 8002d3c:	200003a8 	.word	0x200003a8
 8002d40:	200003f0 	.word	0x200003f0
 8002d44:	20000438 	.word	0x20000438
 8002d48:	20000480 	.word	0x20000480
 8002d4c:	20000220 	.word	0x20000220
 8002d50:	20000280 	.word	0x20000280
 8002d54:	20000318 	.word	0x20000318
 8002d58:	20000234 	.word	0x20000234
 8002d5c:	20000268 	.word	0x20000268
 8002d60:	20000000 	.word	0x20000000
 8002d64:	fffff998 	.word	0xfffff998
 8002d68:	eb851eb8 	.word	0xeb851eb8
 8002d6c:	3f8eb851 	.word	0x3f8eb851
 8002d70:	0800eba8 	.word	0x0800eba8
 8002d74:	0000044b 	.word	0x0000044b
 8002d78:	1ffff7ba 	.word	0x1ffff7ba
 8002d7c:	66666666 	.word	0x66666666
 8002d80:	400a6666 	.word	0x400a6666
 8002d84:	40affe00 	.word	0x40affe00
 8002d88:	9ba5e354 	.word	0x9ba5e354
 8002d8c:	3fc020c4 	.word	0x3fc020c4
 8002d90:	0800ebb8 	.word	0x0800ebb8
 8002d94:	0800ebc4 	.word	0x0800ebc4
 8002d98:	0800ebcc 	.word	0x0800ebcc

08002d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b095      	sub	sp, #84	@ 0x54
 8002da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002da2:	2420      	movs	r4, #32
 8002da4:	193b      	adds	r3, r7, r4
 8002da6:	0018      	movs	r0, r3
 8002da8:	2330      	movs	r3, #48	@ 0x30
 8002daa:	001a      	movs	r2, r3
 8002dac:	2100      	movs	r1, #0
 8002dae:	f008 fcd7 	bl	800b760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002db2:	2310      	movs	r3, #16
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	0018      	movs	r0, r3
 8002db8:	2310      	movs	r3, #16
 8002dba:	001a      	movs	r2, r3
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	f008 fccf 	bl	800b760 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dc2:	003b      	movs	r3, r7
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	2310      	movs	r3, #16
 8002dc8:	001a      	movs	r2, r3
 8002dca:	2100      	movs	r1, #0
 8002dcc:	f008 fcc8 	bl	800b760 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dd0:	0021      	movs	r1, r4
 8002dd2:	187b      	adds	r3, r7, r1
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	2201      	movs	r2, #1
 8002ddc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	2210      	movs	r2, #16
 8002de2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	2202      	movs	r2, #2
 8002de8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	2200      	movs	r2, #0
 8002dee:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002df0:	187b      	adds	r3, r7, r1
 8002df2:	22a0      	movs	r2, #160	@ 0xa0
 8002df4:	0392      	lsls	r2, r2, #14
 8002df6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	0018      	movs	r0, r3
 8002e02:	f003 f861 	bl	8005ec8 <HAL_RCC_OscConfig>
 8002e06:	1e03      	subs	r3, r0, #0
 8002e08:	d001      	beq.n	8002e0e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002e0a:	f000 f869 	bl	8002ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e0e:	2110      	movs	r1, #16
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	2207      	movs	r2, #7
 8002e14:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	2202      	movs	r2, #2
 8002e1a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e22:	187b      	adds	r3, r7, r1
 8002e24:	2200      	movs	r2, #0
 8002e26:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f003 fb65 	bl	80064fc <HAL_RCC_ClockConfig>
 8002e32:	1e03      	subs	r3, r0, #0
 8002e34:	d001      	beq.n	8002e3a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002e36:	f000 f853 	bl	8002ee0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e3a:	003b      	movs	r3, r7
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002e40:	003b      	movs	r3, r7
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e46:	003b      	movs	r3, r7
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f003 fc9b 	bl	8006784 <HAL_RCCEx_PeriphCLKConfig>
 8002e4e:	1e03      	subs	r3, r0, #0
 8002e50:	d001      	beq.n	8002e56 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002e52:	f000 f845 	bl	8002ee0 <Error_Handler>
  }
}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b015      	add	sp, #84	@ 0x54
 8002e5c:	bd90      	pop	{r4, r7, pc}
	...

08002e60 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&ch, sizeof(ch));

    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8002e68:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <__io_putchar+0x20>)
 8002e6a:	1d39      	adds	r1, r7, #4
 8002e6c:	4805      	ldr	r0, [pc, #20]	@ (8002e84 <__io_putchar+0x24>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f005 fa04 	bl	800827c <HAL_UART_Transmit>
    return ch;
 8002e74:	687b      	ldr	r3, [r7, #4]
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	0000ffff 	.word	0x0000ffff
 8002e84:	200006cc 	.word	0x200006cc

08002e88 <printf_DMA>:

void printf_DMA(const char *format, ...)
{
 8002e88:	b40f      	push	{r0, r1, r2, r3}
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
	uint32_t length;
	va_list args;
//	uint8_t temp = 0;

	va_start(args, format);
 8002e90:	2314      	movs	r3, #20
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	603b      	str	r3, [r7, #0]
	length = vsnprintf((char*)txbuf, sizeof(txbuf)+1, (char*)format, args);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	2180      	movs	r1, #128	@ 0x80
 8002e9c:	0049      	lsls	r1, r1, #1
 8002e9e:	480e      	ldr	r0, [pc, #56]	@ (8002ed8 <printf_DMA+0x50>)
 8002ea0:	f008 fbb2 	bl	800b608 <vsniprintf>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	607b      	str	r3, [r7, #4]
	va_end(args);

	HAL_UART_Transmit_DMA(&huart1, txbuf, length);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	490a      	ldr	r1, [pc, #40]	@ (8002ed8 <printf_DMA+0x50>)
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <printf_DMA+0x54>)
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f005 fad9 	bl	8008468 <HAL_UART_Transmit_DMA>
	while(!__HAL_UART_GET_FLAG(&huart1,UART_FLAG_TC));
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <printf_DMA+0x54>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	2240      	movs	r2, #64	@ 0x40
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b40      	cmp	r3, #64	@ 0x40
 8002ec4:	d1f8      	bne.n	8002eb8 <printf_DMA+0x30>


}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	46c0      	nop			@ (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b002      	add	sp, #8
 8002ece:	bc80      	pop	{r7}
 8002ed0:	bc08      	pop	{r3}
 8002ed2:	b004      	add	sp, #16
 8002ed4:	4718      	bx	r3
 8002ed6:	46c0      	nop			@ (mov r8, r8)
 8002ed8:	200005c8 	.word	0x200005c8
 8002edc:	200006cc 	.word	0x200006cc

08002ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee4:	b672      	cpsid	i
}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ee8:	46c0      	nop			@ (mov r8, r8)
 8002eea:	e7fd      	b.n	8002ee8 <Error_Handler+0x8>

08002eec <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	static signed int dc_pwm, pid_pwm;
	signed int temp;
	if(htim == &htim3) // Get pull force value
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4b7e      	ldr	r3, [pc, #504]	@ (80030f0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d132      	bne.n	8002f62 <HAL_TIM_PeriodElapsedCallback+0x76>
	{
		if(1 == weight_par.calibration_flag)
 8002efc:	4b7d      	ldr	r3, [pc, #500]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002efe:	7b1b      	ldrb	r3, [r3, #12]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d000      	beq.n	8002f06 <HAL_TIM_PeriodElapsedCallback+0x1a>
 8002f04:	e0f0      	b.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>
		{
			Get_weight(&weight_par);
 8002f06:	4b7b      	ldr	r3, [pc, #492]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 feed 	bl	8003ce8 <Get_weight>
			weight_par.cnt= weight_par.cnt >= 5? 0:weight_par.cnt+1;//Get average value of 5
 8002f0e:	4b79      	ldr	r3, [pc, #484]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	dc03      	bgt.n	8002f1e <HAL_TIM_PeriodElapsedCallback+0x32>
 8002f16:	4b77      	ldr	r3, [pc, #476]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_TIM_PeriodElapsedCallback+0x34>
 8002f1e:	2200      	movs	r2, #0
 8002f20:	4b74      	ldr	r3, [pc, #464]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f22:	629a      	str	r2, [r3, #40]	@ 0x28
			weight_par.gramAvg[weight_par.cnt] = weight_par.gram;
 8002f24:	4b73      	ldr	r3, [pc, #460]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f28:	4b72      	ldr	r3, [pc, #456]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f2a:	6819      	ldr	r1, [r3, #0]
 8002f2c:	4b71      	ldr	r3, [pc, #452]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f2e:	3204      	adds	r2, #4
 8002f30:	0092      	lsls	r2, r2, #2
 8002f32:	50d1      	str	r1, [r2, r3]
			weight_par.gramAvgval = (weight_par.gramAvg[0] + weight_par.gramAvg[1] + weight_par.gramAvg[2] + weight_par.gramAvg[3] + weight_par.gramAvg[4])/5;
 8002f34:	4b6f      	ldr	r3, [pc, #444]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	4b6e      	ldr	r3, [pc, #440]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	18d2      	adds	r2, r2, r3
 8002f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	18d2      	adds	r2, r2, r3
 8002f44:	4b6b      	ldr	r3, [pc, #428]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	18d2      	adds	r2, r2, r3
 8002f4a:	4b6a      	ldr	r3, [pc, #424]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	18d3      	adds	r3, r2, r3
 8002f50:	2105      	movs	r1, #5
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7fd f988 	bl	8000268 <__divsi3>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	001a      	movs	r2, r3
 8002f5c:	4b65      	ldr	r3, [pc, #404]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	else if(htim == &htim16)//1us interval for time counting
	{

	}
}
 8002f60:	e0c2      	b.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>
	else if(htim == &htim6)// PWM step 1 for accurate acceleration, change the timer to modify the ramp time
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4b64      	ldr	r3, [pc, #400]	@ (80030f8 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d164      	bne.n	8003034 <HAL_TIM_PeriodElapsedCallback+0x148>
		if((weight_par.gramAvgval<LOWER_LIMMIT&&weight_par.gramAvgval>=0)||weight_par.sens_err_flag==TRUE)//LOWER_LIMMIT)// when release the handle, turn off all
 8002f6a:	4b62      	ldr	r3, [pc, #392]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f6e:	23fa      	movs	r3, #250	@ 0xfa
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	429a      	cmp	r2, r3
 8002f74:	da03      	bge.n	8002f7e <HAL_TIM_PeriodElapsedCallback+0x92>
 8002f76:	4b5f      	ldr	r3, [pc, #380]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	da04      	bge.n	8002f88 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8002f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f80:	2231      	movs	r2, #49	@ 0x31
 8002f82:	5c9b      	ldrb	r3, [r3, r2]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d110      	bne.n	8002faa <HAL_TIM_PeriodElapsedCallback+0xbe>
			if(printflag.OCP_flag == FALSE)
 8002f88:	4b5c      	ldr	r3, [pc, #368]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002f8a:	7a5b      	ldrb	r3, [r3, #9]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_TIM_PeriodElapsedCallback+0xb0>
				IND_LED_OFF;//Turn off LED
 8002f90:	4b5b      	ldr	r3, [pc, #364]	@ (8003100 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	2101      	movs	r1, #1
 8002f96:	0018      	movs	r0, r3
 8002f98:	f002 ff5d 	bl	8005e56 <HAL_GPIO_WritePin>
			weight_par.eps_flag = FALSE;
 8002f9c:	4b55      	ldr	r3, [pc, #340]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	735a      	strb	r2, [r3, #13]
			printflag.Motor_short_flag = TRUE;
 8002fa2:	4b56      	ldr	r3, [pc, #344]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	721a      	strb	r2, [r3, #8]
}
 8002fa8:	e09e      	b.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>
			printflag.Motor_short_flag = FALSE;// if keep pulling, stop shorting motor, if = true, H/L MOS will open together
 8002faa:	4b54      	ldr	r3, [pc, #336]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	721a      	strb	r2, [r3, #8]
			temp = Incremental_PID(&weight_par, PULL_FORCE_THR, &PID_Parameters);//Get PID PWM
 8002fb0:	4a54      	ldr	r2, [pc, #336]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002fb2:	4955      	ldr	r1, [pc, #340]	@ (8003108 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002fb4:	4b4f      	ldr	r3, [pc, #316]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f000 ff80 	bl	8003ebc <Incremental_PID>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	60fb      	str	r3, [r7, #12]
			if((pid_pwm+temp) > MAX_PWM)
 8002fc0:	4b52      	ldr	r3, [pc, #328]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	18d3      	adds	r3, r2, r3
 8002fc8:	2b5a      	cmp	r3, #90	@ 0x5a
 8002fca:	dd03      	ble.n	8002fd4 <HAL_TIM_PeriodElapsedCallback+0xe8>
				pid_pwm = MAX_PWM;
 8002fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002fce:	225a      	movs	r2, #90	@ 0x5a
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e008      	b.n	8002fe6 <HAL_TIM_PeriodElapsedCallback+0xfa>
				pid_pwm = (signed int)(temp + pid_pwm)<=0	? 0		: 	temp + pid_pwm;
 8002fd4:	4b4d      	ldr	r3, [pc, #308]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	18d3      	adds	r3, r2, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da00      	bge.n	8002fe2 <HAL_TIM_PeriodElapsedCallback+0xf6>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	4a4a      	ldr	r2, [pc, #296]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002fe4:	6013      	str	r3, [r2, #0]
			dc_pwm = (0<(pid_pwm-dc_pwm)) ? dc_pwm + 1 : dc_pwm - 1;
 8002fe6:	4b49      	ldr	r3, [pc, #292]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4b49      	ldr	r3, [pc, #292]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	dd03      	ble.n	8002ffc <HAL_TIM_PeriodElapsedCallback+0x110>
 8002ff4:	4b46      	ldr	r3, [pc, #280]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	e002      	b.n	8003002 <HAL_TIM_PeriodElapsedCallback+0x116>
 8002ffc:	4b44      	ldr	r3, [pc, #272]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	1e5a      	subs	r2, r3, #1
 8003002:	4b43      	ldr	r3, [pc, #268]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8003004:	601a      	str	r2, [r3, #0]
			if(dc_pwm>10&&printflag.OCP_flag!=TRUE) //When PWM>10%, start to drive
 8003006:	4b42      	ldr	r3, [pc, #264]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b0a      	cmp	r3, #10
 800300c:	dc00      	bgt.n	8003010 <HAL_TIM_PeriodElapsedCallback+0x124>
 800300e:	e06b      	b.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>
 8003010:	4b3a      	ldr	r3, [pc, #232]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003012:	7a5b      	ldrb	r3, [r3, #9]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d067      	beq.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>
				if(0 == weight_par.eps_flag)
 8003018:	4b36      	ldr	r3, [pc, #216]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800301a:	7b5b      	ldrb	r3, [r3, #13]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d163      	bne.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>
					IND_LED_ON;// Turn on LED indicator
 8003020:	4b37      	ldr	r3, [pc, #220]	@ (8003100 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003022:	2200      	movs	r2, #0
 8003024:	2101      	movs	r1, #1
 8003026:	0018      	movs	r0, r3
 8003028:	f002 ff15 	bl	8005e56 <HAL_GPIO_WritePin>
					weight_par.eps_flag = TRUE;
 800302c:	4b31      	ldr	r3, [pc, #196]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800302e:	2201      	movs	r2, #1
 8003030:	735a      	strb	r2, [r3, #13]
}
 8003032:	e059      	b.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>
	else if(htim == &htim14)//10ms enter for E-wagon protection counting
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4b37      	ldr	r3, [pc, #220]	@ (8003114 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8003038:	429a      	cmp	r2, r3
 800303a:	d155      	bne.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>
		printflag.TimeCNT = printflag.TimeCNT>1105? 0:printflag.TimeCNT+1;
 800303c:	4b2f      	ldr	r3, [pc, #188]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x210>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a35      	ldr	r2, [pc, #212]	@ (8003118 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	dc03      	bgt.n	800304e <HAL_TIM_PeriodElapsedCallback+0x162>
 8003046:	4b2d      	ldr	r3, [pc, #180]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	e000      	b.n	8003050 <HAL_TIM_PeriodElapsedCallback+0x164>
 800304e:	2200      	movs	r2, #0
 8003050:	4b2a      	ldr	r3, [pc, #168]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003052:	601a      	str	r2, [r3, #0]
		if(adc_val.commutation_timeout >1000)//if 100ms no phase switching, 100us++
 8003054:	4b31      	ldr	r3, [pc, #196]	@ (800311c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003056:	8b5a      	ldrh	r2, [r3, #26]
 8003058:	23fa      	movs	r3, #250	@ 0xfa
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d905      	bls.n	800306c <HAL_TIM_PeriodElapsedCallback+0x180>
			adc_val.commutation_timeout = 0;
 8003060:	4b2e      	ldr	r3, [pc, #184]	@ (800311c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003062:	2200      	movs	r2, #0
 8003064:	835a      	strh	r2, [r3, #26]
			adc_val.commutation_delay 	= 0;
 8003066:	4b2d      	ldr	r3, [pc, #180]	@ (800311c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003068:	2200      	movs	r2, #0
 800306a:	831a      	strh	r2, [r3, #24]
		if(adc_val.ia>=2240)// OCP 2973:20A 2240:9A 3640:30A Based on 0.015(53.7 times)
 800306c:	4b2b      	ldr	r3, [pc, #172]	@ (800311c <HAL_TIM_PeriodElapsedCallback+0x230>)
 800306e:	891a      	ldrh	r2, [r3, #8]
 8003070:	238c      	movs	r3, #140	@ 0x8c
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	429a      	cmp	r2, r3
 8003076:	d327      	bcc.n	80030c8 <HAL_TIM_PeriodElapsedCallback+0x1dc>
			ocp_cnt++;
 8003078:	4b29      	ldr	r3, [pc, #164]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	b2da      	uxtb	r2, r3
 8003080:	4b27      	ldr	r3, [pc, #156]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8003082:	701a      	strb	r2, [r3, #0]
			if(ocp_cnt>50)
 8003084:	4b26      	ldr	r3, [pc, #152]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b32      	cmp	r3, #50	@ 0x32
 800308a:	d91d      	bls.n	80030c8 <HAL_TIM_PeriodElapsedCallback+0x1dc>
				CLOSE_PWM;
 800308c:	4b25      	ldr	r3, [pc, #148]	@ (8003124 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800308e:	2104      	movs	r1, #4
 8003090:	0018      	movs	r0, r3
 8003092:	f003 ff8d 	bl	8006fb0 <HAL_TIM_PWM_Stop>
				BRAKE;
 8003096:	4b23      	ldr	r3, [pc, #140]	@ (8003124 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003098:	2104      	movs	r1, #4
 800309a:	0018      	movs	r0, r3
 800309c:	f003 ff88 	bl	8006fb0 <HAL_TIM_PWM_Stop>
 80030a0:	2380      	movs	r3, #128	@ 0x80
 80030a2:	019b      	lsls	r3, r3, #6
 80030a4:	4820      	ldr	r0, [pc, #128]	@ (8003128 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	0019      	movs	r1, r3
 80030aa:	f002 fed4 	bl	8005e56 <HAL_GPIO_WritePin>
				BRKRLS;
 80030ae:	2380      	movs	r3, #128	@ 0x80
 80030b0:	01db      	lsls	r3, r3, #7
 80030b2:	481d      	ldr	r0, [pc, #116]	@ (8003128 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	0019      	movs	r1, r3
 80030b8:	f002 fecd 	bl	8005e56 <HAL_GPIO_WritePin>
				ocp_cnt = 0;
 80030bc:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
				printflag.OCP_flag = TRUE;
 80030c2:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x210>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	725a      	strb	r2, [r3, #9]
		if(printflag.OCP_flag == TRUE)
 80030c8:	4b0c      	ldr	r3, [pc, #48]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x210>)
 80030ca:	7a5b      	ldrb	r3, [r3, #9]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d10b      	bne.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>
			ocp_clr--;
 80030d0:	4b16      	ldr	r3, [pc, #88]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	1e5a      	subs	r2, r3, #1
 80030d6:	4b15      	ldr	r3, [pc, #84]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80030d8:	601a      	str	r2, [r3, #0]
			if(ocp_clr==0)
 80030da:	4b14      	ldr	r3, [pc, #80]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>
				printflag.OCP_flag = FALSE;
 80030e2:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x210>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	725a      	strb	r2, [r3, #9]
}
 80030e8:	46c0      	nop			@ (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b004      	add	sp, #16
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20000360 	.word	0x20000360
 80030f4:	20000234 	.word	0x20000234
 80030f8:	200003a8 	.word	0x200003a8
 80030fc:	20000268 	.word	0x20000268
 8003100:	48000800 	.word	0x48000800
 8003104:	20000020 	.word	0x20000020
 8003108:	000009c4 	.word	0x000009c4
 800310c:	20000274 	.word	0x20000274
 8003110:	20000278 	.word	0x20000278
 8003114:	200003f0 	.word	0x200003f0
 8003118:	00000451 	.word	0x00000451
 800311c:	20000000 	.word	0x20000000
 8003120:	2000027c 	.word	0x2000027c
 8003124:	20000318 	.word	0x20000318
 8003128:	48000400 	.word	0x48000400
 800312c:	2000002c 	.word	0x2000002c

08003130 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//every byte transmit complete, enter this function
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b08d      	sub	sp, #52	@ 0x34
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	4b89      	ldr	r3, [pc, #548]	@ (8003360 <HAL_UART_RxCpltCallback+0x230>)
 800313c:	429a      	cmp	r2, r3
 800313e:	d000      	beq.n	8003142 <HAL_UART_RxCpltCallback+0x12>
 8003140:	e10a      	b.n	8003358 <HAL_UART_RxCpltCallback+0x228>
	{
		extern uint8_t cnt;
		rxbuf[cnt] = rxdata;
 8003142:	4b88      	ldr	r3, [pc, #544]	@ (8003364 <HAL_UART_RxCpltCallback+0x234>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	001a      	movs	r2, r3
 8003148:	4b87      	ldr	r3, [pc, #540]	@ (8003368 <HAL_UART_RxCpltCallback+0x238>)
 800314a:	7819      	ldrb	r1, [r3, #0]
 800314c:	4b87      	ldr	r3, [pc, #540]	@ (800336c <HAL_UART_RxCpltCallback+0x23c>)
 800314e:	5499      	strb	r1, [r3, r2]
		const char cat[] = "0X13\r\n"; //APP(A:1) to Controller(C:3)
 8003150:	2314      	movs	r3, #20
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	4a86      	ldr	r2, [pc, #536]	@ (8003370 <HAL_UART_RxCpltCallback+0x240>)
 8003156:	6811      	ldr	r1, [r2, #0]
 8003158:	6019      	str	r1, [r3, #0]
 800315a:	8891      	ldrh	r1, [r2, #4]
 800315c:	8099      	strh	r1, [r3, #4]
 800315e:	7992      	ldrb	r2, [r2, #6]
 8003160:	719a      	strb	r2, [r3, #6]
		cnt=cnt==RX_BUF_NUM-1?1:cnt+1;
 8003162:	4b80      	ldr	r3, [pc, #512]	@ (8003364 <HAL_UART_RxCpltCallback+0x234>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2bfe      	cmp	r3, #254	@ 0xfe
 8003168:	d004      	beq.n	8003174 <HAL_UART_RxCpltCallback+0x44>
 800316a:	4b7e      	ldr	r3, [pc, #504]	@ (8003364 <HAL_UART_RxCpltCallback+0x234>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	3301      	adds	r3, #1
 8003170:	b2da      	uxtb	r2, r3
 8003172:	e000      	b.n	8003176 <HAL_UART_RxCpltCallback+0x46>
 8003174:	2201      	movs	r2, #1
 8003176:	4b7b      	ldr	r3, [pc, #492]	@ (8003364 <HAL_UART_RxCpltCallback+0x234>)
 8003178:	701a      	strb	r2, [r3, #0]
		float PIDV;

		char a[6];

		if(rxdata == 'e')//'\n')
 800317a:	4b7b      	ldr	r3, [pc, #492]	@ (8003368 <HAL_UART_RxCpltCallback+0x238>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b65      	cmp	r3, #101	@ 0x65
 8003180:	d14e      	bne.n	8003220 <HAL_UART_RxCpltCallback+0xf0>
		{
//			printf("sting:%s\r\n", rxbuf);

			for(int t=cnt; t<RX_BUF_NUM; t++)
 8003182:	4b78      	ldr	r3, [pc, #480]	@ (8003364 <HAL_UART_RxCpltCallback+0x234>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003188:	e007      	b.n	800319a <HAL_UART_RxCpltCallback+0x6a>
				rxbuf[t]=0;
 800318a:	4a78      	ldr	r2, [pc, #480]	@ (800336c <HAL_UART_RxCpltCallback+0x23c>)
 800318c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318e:	18d3      	adds	r3, r2, r3
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8003194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003196:	3301      	adds	r3, #1
 8003198:	62bb      	str	r3, [r7, #40]	@ 0x28
 800319a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319c:	2bfe      	cmp	r3, #254	@ 0xfe
 800319e:	ddf4      	ble.n	800318a <HAL_UART_RxCpltCallback+0x5a>
			cnt = 0;
 80031a0:	4b70      	ldr	r3, [pc, #448]	@ (8003364 <HAL_UART_RxCpltCallback+0x234>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]

			if(0 == strcmp((char*) rxbuf,"0x00"))
 80031a6:	4a73      	ldr	r2, [pc, #460]	@ (8003374 <HAL_UART_RxCpltCallback+0x244>)
 80031a8:	4b70      	ldr	r3, [pc, #448]	@ (800336c <HAL_UART_RxCpltCallback+0x23c>)
 80031aa:	0011      	movs	r1, r2
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7fc ffab 	bl	8000108 <strcmp>
 80031b2:	1e03      	subs	r3, r0, #0
 80031b4:	d104      	bne.n	80031c0 <HAL_UART_RxCpltCallback+0x90>
			{
				HAL_TIM_Base_Stop_IT(&htim6);
 80031b6:	4b70      	ldr	r3, [pc, #448]	@ (8003378 <HAL_UART_RxCpltCallback+0x248>)
 80031b8:	0018      	movs	r0, r3
 80031ba:	f003 fcb7 	bl	8006b2c <HAL_TIM_Base_Stop_IT>
 80031be:	e02f      	b.n	8003220 <HAL_UART_RxCpltCallback+0xf0>
			}

			else if(0 == strcmp((char*) rxbuf, "0x01"))
 80031c0:	4a6e      	ldr	r2, [pc, #440]	@ (800337c <HAL_UART_RxCpltCallback+0x24c>)
 80031c2:	4b6a      	ldr	r3, [pc, #424]	@ (800336c <HAL_UART_RxCpltCallback+0x23c>)
 80031c4:	0011      	movs	r1, r2
 80031c6:	0018      	movs	r0, r3
 80031c8:	f7fc ff9e 	bl	8000108 <strcmp>
 80031cc:	1e03      	subs	r3, r0, #0
 80031ce:	d104      	bne.n	80031da <HAL_UART_RxCpltCallback+0xaa>
			{
				HAL_TIM_Base_Start_IT(&htim6);
 80031d0:	4b69      	ldr	r3, [pc, #420]	@ (8003378 <HAL_UART_RxCpltCallback+0x248>)
 80031d2:	0018      	movs	r0, r3
 80031d4:	f003 fc5e 	bl	8006a94 <HAL_TIM_Base_Start_IT>
 80031d8:	e022      	b.n	8003220 <HAL_UART_RxCpltCallback+0xf0>
			}
			else if(0 == strcmp((char*)rxbuf, "0x02"))
 80031da:	4a69      	ldr	r2, [pc, #420]	@ (8003380 <HAL_UART_RxCpltCallback+0x250>)
 80031dc:	4b63      	ldr	r3, [pc, #396]	@ (800336c <HAL_UART_RxCpltCallback+0x23c>)
 80031de:	0011      	movs	r1, r2
 80031e0:	0018      	movs	r0, r3
 80031e2:	f7fc ff91 	bl	8000108 <strcmp>
 80031e6:	1e03      	subs	r3, r0, #0
 80031e8:	d103      	bne.n	80031f2 <HAL_UART_RxCpltCallback+0xc2>
			{
				BT_PWM_handle(TURE);
 80031ea:	2001      	movs	r0, #1
 80031ec:	f001 fd08 	bl	8004c00 <BT_PWM_handle>
 80031f0:	e016      	b.n	8003220 <HAL_UART_RxCpltCallback+0xf0>
			}
			else if(0 == strcmp(cat, "0x06"))
			{

			}
			else if(0 == strcmp((char*) rxbuf, MotorOn))
 80031f2:	4a64      	ldr	r2, [pc, #400]	@ (8003384 <HAL_UART_RxCpltCallback+0x254>)
 80031f4:	4b5d      	ldr	r3, [pc, #372]	@ (800336c <HAL_UART_RxCpltCallback+0x23c>)
 80031f6:	0011      	movs	r1, r2
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7fc ff85 	bl	8000108 <strcmp>
 80031fe:	1e03      	subs	r3, r0, #0
 8003200:	d103      	bne.n	800320a <HAL_UART_RxCpltCallback+0xda>
			{
				printflag.Motor_On = TRUE;
 8003202:	4b61      	ldr	r3, [pc, #388]	@ (8003388 <HAL_UART_RxCpltCallback+0x258>)
 8003204:	2201      	movs	r2, #1
 8003206:	719a      	strb	r2, [r3, #6]
 8003208:	e00a      	b.n	8003220 <HAL_UART_RxCpltCallback+0xf0>
			}
			else if(0 == strcmp((char*) rxbuf, MotorOff)) // 0X13MOff
 800320a:	4a60      	ldr	r2, [pc, #384]	@ (800338c <HAL_UART_RxCpltCallback+0x25c>)
 800320c:	4b57      	ldr	r3, [pc, #348]	@ (800336c <HAL_UART_RxCpltCallback+0x23c>)
 800320e:	0011      	movs	r1, r2
 8003210:	0018      	movs	r0, r3
 8003212:	f7fc ff79 	bl	8000108 <strcmp>
 8003216:	1e03      	subs	r3, r0, #0
 8003218:	d102      	bne.n	8003220 <HAL_UART_RxCpltCallback+0xf0>
			{
				printflag.Motor_Off = TRUE;
 800321a:	4b5b      	ldr	r3, [pc, #364]	@ (8003388 <HAL_UART_RxCpltCallback+0x258>)
 800321c:	2201      	movs	r2, #1
 800321e:	71da      	strb	r2, [r3, #7]

			}
		}
		if(rxdata == 'P') // This code comsumes 3KB?
 8003220:	4b51      	ldr	r3, [pc, #324]	@ (8003368 <HAL_UART_RxCpltCallback+0x238>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b50      	cmp	r3, #80	@ 0x50
 8003226:	d128      	bne.n	800327a <HAL_UART_RxCpltCallback+0x14a>
		{
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8003228:	4b4e      	ldr	r3, [pc, #312]	@ (8003364 <HAL_UART_RxCpltCallback+0x234>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
 800322e:	e007      	b.n	8003240 <HAL_UART_RxCpltCallback+0x110>
				rxbuf[t]=0;
 8003230:	4a4e      	ldr	r2, [pc, #312]	@ (800336c <HAL_UART_RxCpltCallback+0x23c>)
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	18d3      	adds	r3, r2, r3
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	3301      	adds	r3, #1
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	2bfe      	cmp	r3, #254	@ 0xfe
 8003244:	ddf4      	ble.n	8003230 <HAL_UART_RxCpltCallback+0x100>
			cnt = 0;
 8003246:	4b47      	ldr	r3, [pc, #284]	@ (8003364 <HAL_UART_RxCpltCallback+0x234>)
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
			sscanf(rxbuf, "%[^P]", a);
 800324c:	240c      	movs	r4, #12
 800324e:	193a      	adds	r2, r7, r4
 8003250:	494f      	ldr	r1, [pc, #316]	@ (8003390 <HAL_UART_RxCpltCallback+0x260>)
 8003252:	4b46      	ldr	r3, [pc, #280]	@ (800336c <HAL_UART_RxCpltCallback+0x23c>)
 8003254:	0018      	movs	r0, r3
 8003256:	f008 f935 	bl	800b4c4 <siscanf>
			PIDV = atof(a);
 800325a:	193b      	adds	r3, r7, r4
 800325c:	0018      	movs	r0, r3
 800325e:	f006 fb57 	bl	8009910 <atof>
 8003262:	0002      	movs	r2, r0
 8003264:	000b      	movs	r3, r1
 8003266:	0010      	movs	r0, r2
 8003268:	0019      	movs	r1, r3
 800326a:	f7ff fbcd 	bl	8002a08 <__aeabi_d2f>
 800326e:	1c03      	adds	r3, r0, #0
 8003270:	61fb      	str	r3, [r7, #28]
			PID_Parameters.Kp = PIDV;
 8003272:	4b48      	ldr	r3, [pc, #288]	@ (8003394 <HAL_UART_RxCpltCallback+0x264>)
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e068      	b.n	800334c <HAL_UART_RxCpltCallback+0x21c>
//			printflag.PID_Set = TRUE;
		}
		else if(rxdata == 'I')
 800327a:	4b3b      	ldr	r3, [pc, #236]	@ (8003368 <HAL_UART_RxCpltCallback+0x238>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b49      	cmp	r3, #73	@ 0x49
 8003280:	d128      	bne.n	80032d4 <HAL_UART_RxCpltCallback+0x1a4>
		{
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8003282:	4b38      	ldr	r3, [pc, #224]	@ (8003364 <HAL_UART_RxCpltCallback+0x234>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	623b      	str	r3, [r7, #32]
 8003288:	e007      	b.n	800329a <HAL_UART_RxCpltCallback+0x16a>
				rxbuf[t]=0;
 800328a:	4a38      	ldr	r2, [pc, #224]	@ (800336c <HAL_UART_RxCpltCallback+0x23c>)
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	18d3      	adds	r3, r2, r3
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	3301      	adds	r3, #1
 8003298:	623b      	str	r3, [r7, #32]
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	2bfe      	cmp	r3, #254	@ 0xfe
 800329e:	ddf4      	ble.n	800328a <HAL_UART_RxCpltCallback+0x15a>
			cnt = 0;
 80032a0:	4b30      	ldr	r3, [pc, #192]	@ (8003364 <HAL_UART_RxCpltCallback+0x234>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
			sscanf(rxbuf, "%[^I]", a);
 80032a6:	240c      	movs	r4, #12
 80032a8:	193a      	adds	r2, r7, r4
 80032aa:	493b      	ldr	r1, [pc, #236]	@ (8003398 <HAL_UART_RxCpltCallback+0x268>)
 80032ac:	4b2f      	ldr	r3, [pc, #188]	@ (800336c <HAL_UART_RxCpltCallback+0x23c>)
 80032ae:	0018      	movs	r0, r3
 80032b0:	f008 f908 	bl	800b4c4 <siscanf>
			PIDV = atof(a);
 80032b4:	193b      	adds	r3, r7, r4
 80032b6:	0018      	movs	r0, r3
 80032b8:	f006 fb2a 	bl	8009910 <atof>
 80032bc:	0002      	movs	r2, r0
 80032be:	000b      	movs	r3, r1
 80032c0:	0010      	movs	r0, r2
 80032c2:	0019      	movs	r1, r3
 80032c4:	f7ff fba0 	bl	8002a08 <__aeabi_d2f>
 80032c8:	1c03      	adds	r3, r0, #0
 80032ca:	61fb      	str	r3, [r7, #28]
			PID_Parameters.Ki = PIDV;
 80032cc:	4b31      	ldr	r3, [pc, #196]	@ (8003394 <HAL_UART_RxCpltCallback+0x264>)
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	e03b      	b.n	800334c <HAL_UART_RxCpltCallback+0x21c>
//			printflag.PID_Set = TRUE;
		}
		else if(rxdata == 'D'|| rxdata == 'E')
 80032d4:	4b24      	ldr	r3, [pc, #144]	@ (8003368 <HAL_UART_RxCpltCallback+0x238>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b44      	cmp	r3, #68	@ 0x44
 80032da:	d003      	beq.n	80032e4 <HAL_UART_RxCpltCallback+0x1b4>
 80032dc:	4b22      	ldr	r3, [pc, #136]	@ (8003368 <HAL_UART_RxCpltCallback+0x238>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b45      	cmp	r3, #69	@ 0x45
 80032e2:	d133      	bne.n	800334c <HAL_UART_RxCpltCallback+0x21c>
		{
			for(int t=cnt; t<RX_BUF_NUM; t++)
 80032e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003364 <HAL_UART_RxCpltCallback+0x234>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ea:	e007      	b.n	80032fc <HAL_UART_RxCpltCallback+0x1cc>
				rxbuf[t]=0;
 80032ec:	4a1f      	ldr	r2, [pc, #124]	@ (800336c <HAL_UART_RxCpltCallback+0x23c>)
 80032ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f0:	18d3      	adds	r3, r2, r3
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 80032f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f8:	3301      	adds	r3, #1
 80032fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fe:	2bfe      	cmp	r3, #254	@ 0xfe
 8003300:	ddf4      	ble.n	80032ec <HAL_UART_RxCpltCallback+0x1bc>
			cnt = 0;
 8003302:	4b18      	ldr	r3, [pc, #96]	@ (8003364 <HAL_UART_RxCpltCallback+0x234>)
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
			if(rxdata == 'D')
 8003308:	4b17      	ldr	r3, [pc, #92]	@ (8003368 <HAL_UART_RxCpltCallback+0x238>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b44      	cmp	r3, #68	@ 0x44
 800330e:	d116      	bne.n	800333e <HAL_UART_RxCpltCallback+0x20e>
			{
				sscanf(rxbuf, "%[^D]", a);
 8003310:	240c      	movs	r4, #12
 8003312:	193a      	adds	r2, r7, r4
 8003314:	4921      	ldr	r1, [pc, #132]	@ (800339c <HAL_UART_RxCpltCallback+0x26c>)
 8003316:	4b15      	ldr	r3, [pc, #84]	@ (800336c <HAL_UART_RxCpltCallback+0x23c>)
 8003318:	0018      	movs	r0, r3
 800331a:	f008 f8d3 	bl	800b4c4 <siscanf>
				PIDV = atof(a);
 800331e:	193b      	adds	r3, r7, r4
 8003320:	0018      	movs	r0, r3
 8003322:	f006 faf5 	bl	8009910 <atof>
 8003326:	0002      	movs	r2, r0
 8003328:	000b      	movs	r3, r1
 800332a:	0010      	movs	r0, r2
 800332c:	0019      	movs	r1, r3
 800332e:	f7ff fb6b 	bl	8002a08 <__aeabi_d2f>
 8003332:	1c03      	adds	r3, r0, #0
 8003334:	61fb      	str	r3, [r7, #28]
				PID_Parameters.Kd = PIDV;
 8003336:	4b17      	ldr	r3, [pc, #92]	@ (8003394 <HAL_UART_RxCpltCallback+0x264>)
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	e006      	b.n	800334c <HAL_UART_RxCpltCallback+0x21c>
//				printf_DMA("0X31 Set ok\n");
			}
			else
			{
				printflag.PID_Set = TRUE;
 800333e:	4b12      	ldr	r3, [pc, #72]	@ (8003388 <HAL_UART_RxCpltCallback+0x258>)
 8003340:	2201      	movs	r2, #1
 8003342:	715a      	strb	r2, [r3, #5]
				printf_DMA("0X31 PID align ok\n");
 8003344:	4b16      	ldr	r3, [pc, #88]	@ (80033a0 <HAL_UART_RxCpltCallback+0x270>)
 8003346:	0018      	movs	r0, r3
 8003348:	f7ff fd9e 	bl	8002e88 <printf_DMA>

			}
		}
		HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 800334c:	4906      	ldr	r1, [pc, #24]	@ (8003368 <HAL_UART_RxCpltCallback+0x238>)
 800334e:	4b04      	ldr	r3, [pc, #16]	@ (8003360 <HAL_UART_RxCpltCallback+0x230>)
 8003350:	2201      	movs	r2, #1
 8003352:	0018      	movs	r0, r3
 8003354:	f005 f831 	bl	80083ba <HAL_UART_Receive_IT>
	}
}
 8003358:	46c0      	nop			@ (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	b00d      	add	sp, #52	@ 0x34
 800335e:	bd90      	pop	{r4, r7, pc}
 8003360:	200006cc 	.word	0x200006cc
 8003364:	200006c8 	.word	0x200006c8
 8003368:	200006c7 	.word	0x200006c7
 800336c:	200004c8 	.word	0x200004c8
 8003370:	0800ec38 	.word	0x0800ec38
 8003374:	0800ebdc 	.word	0x0800ebdc
 8003378:	200003a8 	.word	0x200003a8
 800337c:	0800ebe4 	.word	0x0800ebe4
 8003380:	0800ebec 	.word	0x0800ebec
 8003384:	0800ebf4 	.word	0x0800ebf4
 8003388:	20000268 	.word	0x20000268
 800338c:	0800ec00 	.word	0x0800ec00
 8003390:	0800ec0c 	.word	0x0800ec0c
 8003394:	20000020 	.word	0x20000020
 8003398:	0800ec14 	.word	0x0800ec14
 800339c:	0800ec1c 	.word	0x0800ec1c
 80033a0:	0800ec24 	.word	0x0800ec24

080033a4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

}
 80033ac:	46c0      	nop			@ (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b002      	add	sp, #8
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)// Using tim15 to get a 88us between each trigger 50us as TIM1 cycle, 14MHz ADC(12.5+55.5 cycles) consume 4.37ms to complete conversion
{									  // The ADC sample time is for all channel, the DMA
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	@ 0x28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6278      	str	r0, [r7, #36]	@ 0x24
	My_ADC_getvalue(adc_buf, &adc_val);
 80033bc:	003b      	movs	r3, r7
 80033be:	4a04      	ldr	r2, [pc, #16]	@ (80033d0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80033c0:	4904      	ldr	r1, [pc, #16]	@ (80033d4 <HAL_ADC_ConvCpltCallback+0x20>)
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 f98a 	bl	80036dc <My_ADC_getvalue>
//	BLDC_Phase_switching(&adc_val);
}
 80033c8:	46c0      	nop			@ (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b00a      	add	sp, #40	@ 0x28
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000000 	.word	0x20000000
 80033d4:	20000220 	.word	0x20000220

080033d8 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	0002      	movs	r2, r0
 80033e0:	1dbb      	adds	r3, r7, #6
 80033e2:	801a      	strh	r2, [r3, #0]
	if(GPIO_PIN == GPIO_PIN_2)
 80033e4:	1dbb      	adds	r3, r7, #6
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d010      	beq.n	800340e <HAL_GPIO_EXTI_Callback+0x36>
	{
	//		weight_par.pw_flag = ~ weight_par.pw_flag;

	}
	else if(GPIO_PIN == GPIO_PIN_4)
 80033ec:	1dbb      	adds	r3, r7, #6
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d104      	bne.n	80033fe <HAL_GPIO_EXTI_Callback+0x26>
	{
		HAL_TIM_Base_Stop_IT(&htim6);
 80033f4:	4b08      	ldr	r3, [pc, #32]	@ (8003418 <HAL_GPIO_EXTI_Callback+0x40>)
 80033f6:	0018      	movs	r0, r3
 80033f8:	f003 fb98 	bl	8006b2c <HAL_TIM_Base_Stop_IT>
	}
	else if(GPIO_PIN == GPIO_PIN_5)
	{
		HAL_TIM_Base_Start_IT(&htim6);
	}
}
 80033fc:	e007      	b.n	800340e <HAL_GPIO_EXTI_Callback+0x36>
	else if(GPIO_PIN == GPIO_PIN_5)
 80033fe:	1dbb      	adds	r3, r7, #6
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	2b20      	cmp	r3, #32
 8003404:	d103      	bne.n	800340e <HAL_GPIO_EXTI_Callback+0x36>
		HAL_TIM_Base_Start_IT(&htim6);
 8003406:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <HAL_GPIO_EXTI_Callback+0x40>)
 8003408:	0018      	movs	r0, r3
 800340a:	f003 fb43 	bl	8006a94 <HAL_TIM_Base_Start_IT>
}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	46bd      	mov	sp, r7
 8003412:	b002      	add	sp, #8
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	200003a8 	.word	0x200003a8

0800341c <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	0018      	movs	r0, r3
 8003426:	230c      	movs	r3, #12
 8003428:	001a      	movs	r2, r3
 800342a:	2100      	movs	r1, #0
 800342c:	f008 f998 	bl	800b760 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003430:	4b60      	ldr	r3, [pc, #384]	@ (80035b4 <MX_ADC_Init+0x198>)
 8003432:	4a61      	ldr	r2, [pc, #388]	@ (80035b8 <MX_ADC_Init+0x19c>)
 8003434:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003436:	4b5f      	ldr	r3, [pc, #380]	@ (80035b4 <MX_ADC_Init+0x198>)
 8003438:	2200      	movs	r2, #0
 800343a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800343c:	4b5d      	ldr	r3, [pc, #372]	@ (80035b4 <MX_ADC_Init+0x198>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003442:	4b5c      	ldr	r3, [pc, #368]	@ (80035b4 <MX_ADC_Init+0x198>)
 8003444:	2200      	movs	r2, #0
 8003446:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003448:	4b5a      	ldr	r3, [pc, #360]	@ (80035b4 <MX_ADC_Init+0x198>)
 800344a:	2201      	movs	r2, #1
 800344c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800344e:	4b59      	ldr	r3, [pc, #356]	@ (80035b4 <MX_ADC_Init+0x198>)
 8003450:	2208      	movs	r2, #8
 8003452:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003454:	4b57      	ldr	r3, [pc, #348]	@ (80035b4 <MX_ADC_Init+0x198>)
 8003456:	2200      	movs	r2, #0
 8003458:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800345a:	4b56      	ldr	r3, [pc, #344]	@ (80035b4 <MX_ADC_Init+0x198>)
 800345c:	2200      	movs	r2, #0
 800345e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003460:	4b54      	ldr	r3, [pc, #336]	@ (80035b4 <MX_ADC_Init+0x198>)
 8003462:	2200      	movs	r2, #0
 8003464:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003466:	4b53      	ldr	r3, [pc, #332]	@ (80035b4 <MX_ADC_Init+0x198>)
 8003468:	2200      	movs	r2, #0
 800346a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800346c:	4b51      	ldr	r3, [pc, #324]	@ (80035b4 <MX_ADC_Init+0x198>)
 800346e:	22c0      	movs	r2, #192	@ 0xc0
 8003470:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003472:	4b50      	ldr	r3, [pc, #320]	@ (80035b4 <MX_ADC_Init+0x198>)
 8003474:	2280      	movs	r2, #128	@ 0x80
 8003476:	00d2      	lsls	r2, r2, #3
 8003478:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800347a:	4b4e      	ldr	r3, [pc, #312]	@ (80035b4 <MX_ADC_Init+0x198>)
 800347c:	2224      	movs	r2, #36	@ 0x24
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003482:	4b4c      	ldr	r3, [pc, #304]	@ (80035b4 <MX_ADC_Init+0x198>)
 8003484:	2201      	movs	r2, #1
 8003486:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003488:	4b4a      	ldr	r3, [pc, #296]	@ (80035b4 <MX_ADC_Init+0x198>)
 800348a:	0018      	movs	r0, r3
 800348c:	f001 fc92 	bl	8004db4 <HAL_ADC_Init>
 8003490:	1e03      	subs	r3, r0, #0
 8003492:	d001      	beq.n	8003498 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003494:	f7ff fd24 	bl	8002ee0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003498:	1d3b      	adds	r3, r7, #4
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800349e:	1d3b      	adds	r3, r7, #4
 80034a0:	2280      	movs	r2, #128	@ 0x80
 80034a2:	0152      	lsls	r2, r2, #5
 80034a4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	2207      	movs	r2, #7
 80034aa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80034ac:	1d3a      	adds	r2, r7, #4
 80034ae:	4b41      	ldr	r3, [pc, #260]	@ (80035b4 <MX_ADC_Init+0x198>)
 80034b0:	0011      	movs	r1, r2
 80034b2:	0018      	movs	r0, r3
 80034b4:	f001 fe50 	bl	8005158 <HAL_ADC_ConfigChannel>
 80034b8:	1e03      	subs	r3, r0, #0
 80034ba:	d001      	beq.n	80034c0 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80034bc:	f7ff fd10 	bl	8002ee0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80034c0:	1d3b      	adds	r3, r7, #4
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80034c6:	1d3a      	adds	r2, r7, #4
 80034c8:	4b3a      	ldr	r3, [pc, #232]	@ (80035b4 <MX_ADC_Init+0x198>)
 80034ca:	0011      	movs	r1, r2
 80034cc:	0018      	movs	r0, r3
 80034ce:	f001 fe43 	bl	8005158 <HAL_ADC_ConfigChannel>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d001      	beq.n	80034da <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80034d6:	f7ff fd03 	bl	8002ee0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	2202      	movs	r2, #2
 80034de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80034e0:	1d3a      	adds	r2, r7, #4
 80034e2:	4b34      	ldr	r3, [pc, #208]	@ (80035b4 <MX_ADC_Init+0x198>)
 80034e4:	0011      	movs	r1, r2
 80034e6:	0018      	movs	r0, r3
 80034e8:	f001 fe36 	bl	8005158 <HAL_ADC_ConfigChannel>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d001      	beq.n	80034f4 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80034f0:	f7ff fcf6 	bl	8002ee0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80034f4:	1d3b      	adds	r3, r7, #4
 80034f6:	2203      	movs	r2, #3
 80034f8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80034fa:	1d3a      	adds	r2, r7, #4
 80034fc:	4b2d      	ldr	r3, [pc, #180]	@ (80035b4 <MX_ADC_Init+0x198>)
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f001 fe29 	bl	8005158 <HAL_ADC_ConfigChannel>
 8003506:	1e03      	subs	r3, r0, #0
 8003508:	d001      	beq.n	800350e <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800350a:	f7ff fce9 	bl	8002ee0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	2204      	movs	r2, #4
 8003512:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003514:	1d3a      	adds	r2, r7, #4
 8003516:	4b27      	ldr	r3, [pc, #156]	@ (80035b4 <MX_ADC_Init+0x198>)
 8003518:	0011      	movs	r1, r2
 800351a:	0018      	movs	r0, r3
 800351c:	f001 fe1c 	bl	8005158 <HAL_ADC_ConfigChannel>
 8003520:	1e03      	subs	r3, r0, #0
 8003522:	d001      	beq.n	8003528 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8003524:	f7ff fcdc 	bl	8002ee0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	2205      	movs	r2, #5
 800352c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800352e:	1d3a      	adds	r2, r7, #4
 8003530:	4b20      	ldr	r3, [pc, #128]	@ (80035b4 <MX_ADC_Init+0x198>)
 8003532:	0011      	movs	r1, r2
 8003534:	0018      	movs	r0, r3
 8003536:	f001 fe0f 	bl	8005158 <HAL_ADC_ConfigChannel>
 800353a:	1e03      	subs	r3, r0, #0
 800353c:	d001      	beq.n	8003542 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 800353e:	f7ff fccf 	bl	8002ee0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003542:	1d3b      	adds	r3, r7, #4
 8003544:	2206      	movs	r2, #6
 8003546:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003548:	1d3a      	adds	r2, r7, #4
 800354a:	4b1a      	ldr	r3, [pc, #104]	@ (80035b4 <MX_ADC_Init+0x198>)
 800354c:	0011      	movs	r1, r2
 800354e:	0018      	movs	r0, r3
 8003550:	f001 fe02 	bl	8005158 <HAL_ADC_ConfigChannel>
 8003554:	1e03      	subs	r3, r0, #0
 8003556:	d001      	beq.n	800355c <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8003558:	f7ff fcc2 	bl	8002ee0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	2207      	movs	r2, #7
 8003560:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003562:	1d3a      	adds	r2, r7, #4
 8003564:	4b13      	ldr	r3, [pc, #76]	@ (80035b4 <MX_ADC_Init+0x198>)
 8003566:	0011      	movs	r1, r2
 8003568:	0018      	movs	r0, r3
 800356a:	f001 fdf5 	bl	8005158 <HAL_ADC_ConfigChannel>
 800356e:	1e03      	subs	r3, r0, #0
 8003570:	d001      	beq.n	8003576 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8003572:	f7ff fcb5 	bl	8002ee0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	2208      	movs	r2, #8
 800357a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800357c:	1d3a      	adds	r2, r7, #4
 800357e:	4b0d      	ldr	r3, [pc, #52]	@ (80035b4 <MX_ADC_Init+0x198>)
 8003580:	0011      	movs	r1, r2
 8003582:	0018      	movs	r0, r3
 8003584:	f001 fde8 	bl	8005158 <HAL_ADC_ConfigChannel>
 8003588:	1e03      	subs	r3, r0, #0
 800358a:	d001      	beq.n	8003590 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 800358c:	f7ff fca8 	bl	8002ee0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	2211      	movs	r2, #17
 8003594:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003596:	1d3a      	adds	r2, r7, #4
 8003598:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <MX_ADC_Init+0x198>)
 800359a:	0011      	movs	r1, r2
 800359c:	0018      	movs	r0, r3
 800359e:	f001 fddb 	bl	8005158 <HAL_ADC_ConfigChannel>
 80035a2:	1e03      	subs	r3, r0, #0
 80035a4:	d001      	beq.n	80035aa <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 80035a6:	f7ff fc9b 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b004      	add	sp, #16
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	20000280 	.word	0x20000280
 80035b8:	40012400 	.word	0x40012400

080035bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b08b      	sub	sp, #44	@ 0x2c
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	2414      	movs	r4, #20
 80035c6:	193b      	adds	r3, r7, r4
 80035c8:	0018      	movs	r0, r3
 80035ca:	2314      	movs	r3, #20
 80035cc:	001a      	movs	r2, r3
 80035ce:	2100      	movs	r1, #0
 80035d0:	f008 f8c6 	bl	800b760 <memset>
  if(adcHandle->Instance==ADC1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a3b      	ldr	r2, [pc, #236]	@ (80036c8 <HAL_ADC_MspInit+0x10c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d170      	bne.n	80036c0 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035de:	4b3b      	ldr	r3, [pc, #236]	@ (80036cc <HAL_ADC_MspInit+0x110>)
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	4b3a      	ldr	r3, [pc, #232]	@ (80036cc <HAL_ADC_MspInit+0x110>)
 80035e4:	2180      	movs	r1, #128	@ 0x80
 80035e6:	0089      	lsls	r1, r1, #2
 80035e8:	430a      	orrs	r2, r1
 80035ea:	619a      	str	r2, [r3, #24]
 80035ec:	4b37      	ldr	r3, [pc, #220]	@ (80036cc <HAL_ADC_MspInit+0x110>)
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	2380      	movs	r3, #128	@ 0x80
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fa:	4b34      	ldr	r3, [pc, #208]	@ (80036cc <HAL_ADC_MspInit+0x110>)
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	4b33      	ldr	r3, [pc, #204]	@ (80036cc <HAL_ADC_MspInit+0x110>)
 8003600:	2180      	movs	r1, #128	@ 0x80
 8003602:	0289      	lsls	r1, r1, #10
 8003604:	430a      	orrs	r2, r1
 8003606:	615a      	str	r2, [r3, #20]
 8003608:	4b30      	ldr	r3, [pc, #192]	@ (80036cc <HAL_ADC_MspInit+0x110>)
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	2380      	movs	r3, #128	@ 0x80
 800360e:	029b      	lsls	r3, r3, #10
 8003610:	4013      	ands	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003616:	4b2d      	ldr	r3, [pc, #180]	@ (80036cc <HAL_ADC_MspInit+0x110>)
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	4b2c      	ldr	r3, [pc, #176]	@ (80036cc <HAL_ADC_MspInit+0x110>)
 800361c:	2180      	movs	r1, #128	@ 0x80
 800361e:	02c9      	lsls	r1, r1, #11
 8003620:	430a      	orrs	r2, r1
 8003622:	615a      	str	r2, [r3, #20]
 8003624:	4b29      	ldr	r3, [pc, #164]	@ (80036cc <HAL_ADC_MspInit+0x110>)
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	2380      	movs	r3, #128	@ 0x80
 800362a:	02db      	lsls	r3, r3, #11
 800362c:	4013      	ands	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003632:	193b      	adds	r3, r7, r4
 8003634:	22ff      	movs	r2, #255	@ 0xff
 8003636:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003638:	193b      	adds	r3, r7, r4
 800363a:	2203      	movs	r2, #3
 800363c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	193b      	adds	r3, r7, r4
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003644:	193a      	adds	r2, r7, r4
 8003646:	2390      	movs	r3, #144	@ 0x90
 8003648:	05db      	lsls	r3, r3, #23
 800364a:	0011      	movs	r1, r2
 800364c:	0018      	movs	r0, r3
 800364e:	f002 fa75 	bl	8005b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003652:	193b      	adds	r3, r7, r4
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003658:	193b      	adds	r3, r7, r4
 800365a:	2203      	movs	r2, #3
 800365c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	193b      	adds	r3, r7, r4
 8003660:	2200      	movs	r2, #0
 8003662:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003664:	193b      	adds	r3, r7, r4
 8003666:	4a1a      	ldr	r2, [pc, #104]	@ (80036d0 <HAL_ADC_MspInit+0x114>)
 8003668:	0019      	movs	r1, r3
 800366a:	0010      	movs	r0, r2
 800366c:	f002 fa66 	bl	8005b3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003670:	4b18      	ldr	r3, [pc, #96]	@ (80036d4 <HAL_ADC_MspInit+0x118>)
 8003672:	4a19      	ldr	r2, [pc, #100]	@ (80036d8 <HAL_ADC_MspInit+0x11c>)
 8003674:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003676:	4b17      	ldr	r3, [pc, #92]	@ (80036d4 <HAL_ADC_MspInit+0x118>)
 8003678:	2200      	movs	r2, #0
 800367a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800367c:	4b15      	ldr	r3, [pc, #84]	@ (80036d4 <HAL_ADC_MspInit+0x118>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003682:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <HAL_ADC_MspInit+0x118>)
 8003684:	2280      	movs	r2, #128	@ 0x80
 8003686:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003688:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <HAL_ADC_MspInit+0x118>)
 800368a:	2280      	movs	r2, #128	@ 0x80
 800368c:	0092      	lsls	r2, r2, #2
 800368e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003690:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <HAL_ADC_MspInit+0x118>)
 8003692:	2280      	movs	r2, #128	@ 0x80
 8003694:	00d2      	lsls	r2, r2, #3
 8003696:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003698:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <HAL_ADC_MspInit+0x118>)
 800369a:	2220      	movs	r2, #32
 800369c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800369e:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <HAL_ADC_MspInit+0x118>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_ADC_MspInit+0x118>)
 80036a6:	0018      	movs	r0, r3
 80036a8:	f002 f832 	bl	8005710 <HAL_DMA_Init>
 80036ac:	1e03      	subs	r3, r0, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80036b0:	f7ff fc16 	bl	8002ee0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a07      	ldr	r2, [pc, #28]	@ (80036d4 <HAL_ADC_MspInit+0x118>)
 80036b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80036ba:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <HAL_ADC_MspInit+0x118>)
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80036c0:	46c0      	nop			@ (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b00b      	add	sp, #44	@ 0x2c
 80036c6:	bd90      	pop	{r4, r7, pc}
 80036c8:	40012400 	.word	0x40012400
 80036cc:	40021000 	.word	0x40021000
 80036d0:	48000400 	.word	0x48000400
 80036d4:	200002c0 	.word	0x200002c0
 80036d8:	40020008 	.word	0x40020008

080036dc <My_ADC_getvalue>:
//How to get the actual Vdda
//Vrefint_cal is based on 3.3V VDDA, while Vrefint_data is based on actual VDDA
//Vref_int/Vref_cal == 3.3/4095	   Vref_int/Vrefint_data == VDDA/4095 ==> VDDA = 3.3V*Vreint_cal/Vrefint_data
//Then using the actual Vdda to get the actual Vrevint and Voltage of other channels
MADC_Structure My_ADC_getvalue(uint16_t* adc_buf, MADC_Structure * adc_val)// the local array addr is not valid after function done
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]

	adc_val->bemf_pa 		= adc_buf[0] / 300>1?1:0; //620 == 0.5V
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	8819      	ldrh	r1, [r3, #0]
 80036ec:	2396      	movs	r3, #150	@ 0x96
 80036ee:	009a      	lsls	r2, r3, #2
 80036f0:	2300      	movs	r3, #0
 80036f2:	4291      	cmp	r1, r2
 80036f4:	415b      	adcs	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	001a      	movs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	801a      	strh	r2, [r3, #0]
	adc_val->bemf_pb 		= adc_buf[1] / 300>1?1:0;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	3302      	adds	r3, #2
 8003702:	8819      	ldrh	r1, [r3, #0]
 8003704:	2396      	movs	r3, #150	@ 0x96
 8003706:	009a      	lsls	r2, r3, #2
 8003708:	2300      	movs	r3, #0
 800370a:	4291      	cmp	r1, r2
 800370c:	415b      	adcs	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	001a      	movs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	805a      	strh	r2, [r3, #2]
	adc_val->bemf_pc 		= adc_buf[2] / 300>1?1:0;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	3304      	adds	r3, #4
 800371a:	8819      	ldrh	r1, [r3, #0]
 800371c:	2396      	movs	r3, #150	@ 0x96
 800371e:	009a      	lsls	r2, r3, #2
 8003720:	2300      	movs	r3, #0
 8003722:	4291      	cmp	r1, r2
 8003724:	415b      	adcs	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	001a      	movs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	809a      	strh	r2, [r3, #4]
	adc_val->vbat 			= adc_buf[3];
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	88da      	ldrh	r2, [r3, #6]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	821a      	strh	r2, [r3, #16]
	adc_val->ia				= adc_buf[4];
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	891a      	ldrh	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	811a      	strh	r2, [r3, #8]
	adc_val->ib				= adc_buf[5];
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	895a      	ldrh	r2, [r3, #10]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	815a      	strh	r2, [r3, #10]
	adc_val->isum			= adc_buf[6];
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	899a      	ldrh	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	819a      	strh	r2, [r3, #12]
	adc_val->isum_filtered 	= adc_buf[7];
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	89da      	ldrh	r2, [r3, #14]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	81da      	strh	r2, [r3, #14]
	adc_val->bemf_mid		= adc_buf[8];
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	8a1a      	ldrh	r2, [r3, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	80da      	strh	r2, [r3, #6]
	adc_val->vref_data 		= adc_buf[9];
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	8a5a      	ldrh	r2, [r3, #18]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	825a      	strh	r2, [r3, #18]

	// zero_acrross_flag <<= adc_val_bemf_pa if(zero_acrross_flag==0xff) ,

	adc_val->bemf_last = adc_val->bemf_now;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7d1a      	ldrb	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	755a      	strb	r2, [r3, #21]
	adc_val->bemf_now  = adc_val->bemf_pa * 4 + adc_val->bemf_pb * 2 + adc_val->bemf_pc * 1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	8852      	ldrh	r2, [r2, #2]
 8003778:	189b      	adds	r3, r3, r2
 800377a:	b2db      	uxtb	r3, r3
 800377c:	18db      	adds	r3, r3, r3
 800377e:	b2da      	uxtb	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	889b      	ldrh	r3, [r3, #4]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	18d3      	adds	r3, r2, r3
 8003788:	b2da      	uxtb	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	751a      	strb	r2, [r3, #20]

	return *adc_val;
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	0010      	movs	r0, r2
 8003794:	0019      	movs	r1, r3
 8003796:	231e      	movs	r3, #30
 8003798:	001a      	movs	r2, r3
 800379a:	f008 f885 	bl	800b8a8 <memcpy>
}
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b004      	add	sp, #16
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037ae:	4b10      	ldr	r3, [pc, #64]	@ (80037f0 <MX_DMA_Init+0x48>)
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	4b0f      	ldr	r3, [pc, #60]	@ (80037f0 <MX_DMA_Init+0x48>)
 80037b4:	2101      	movs	r1, #1
 80037b6:	430a      	orrs	r2, r1
 80037b8:	615a      	str	r2, [r3, #20]
 80037ba:	4b0d      	ldr	r3, [pc, #52]	@ (80037f0 <MX_DMA_Init+0x48>)
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2201      	movs	r2, #1
 80037c0:	4013      	ands	r3, r2
 80037c2:	607b      	str	r3, [r7, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2100      	movs	r1, #0
 80037ca:	2009      	movs	r0, #9
 80037cc:	f001 ff6e 	bl	80056ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80037d0:	2009      	movs	r0, #9
 80037d2:	f001 ff80 	bl	80056d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80037d6:	2200      	movs	r2, #0
 80037d8:	2100      	movs	r1, #0
 80037da:	200a      	movs	r0, #10
 80037dc:	f001 ff66 	bl	80056ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80037e0:	200a      	movs	r0, #10
 80037e2:	f001 ff78 	bl	80056d6 <HAL_NVIC_EnableIRQ>

}
 80037e6:	46c0      	nop			@ (mov r8, r8)
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b002      	add	sp, #8
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	40021000 	.word	0x40021000

080037f4 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b08b      	sub	sp, #44	@ 0x2c
 80037f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fa:	2414      	movs	r4, #20
 80037fc:	193b      	adds	r3, r7, r4
 80037fe:	0018      	movs	r0, r3
 8003800:	2314      	movs	r3, #20
 8003802:	001a      	movs	r2, r3
 8003804:	2100      	movs	r1, #0
 8003806:	f007 ffab 	bl	800b760 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800380a:	4bab      	ldr	r3, [pc, #684]	@ (8003ab8 <MX_GPIO_Init+0x2c4>)
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	4baa      	ldr	r3, [pc, #680]	@ (8003ab8 <MX_GPIO_Init+0x2c4>)
 8003810:	2180      	movs	r1, #128	@ 0x80
 8003812:	0309      	lsls	r1, r1, #12
 8003814:	430a      	orrs	r2, r1
 8003816:	615a      	str	r2, [r3, #20]
 8003818:	4ba7      	ldr	r3, [pc, #668]	@ (8003ab8 <MX_GPIO_Init+0x2c4>)
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	2380      	movs	r3, #128	@ 0x80
 800381e:	031b      	lsls	r3, r3, #12
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003826:	4ba4      	ldr	r3, [pc, #656]	@ (8003ab8 <MX_GPIO_Init+0x2c4>)
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	4ba3      	ldr	r3, [pc, #652]	@ (8003ab8 <MX_GPIO_Init+0x2c4>)
 800382c:	2180      	movs	r1, #128	@ 0x80
 800382e:	03c9      	lsls	r1, r1, #15
 8003830:	430a      	orrs	r2, r1
 8003832:	615a      	str	r2, [r3, #20]
 8003834:	4ba0      	ldr	r3, [pc, #640]	@ (8003ab8 <MX_GPIO_Init+0x2c4>)
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	2380      	movs	r3, #128	@ 0x80
 800383a:	03db      	lsls	r3, r3, #15
 800383c:	4013      	ands	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003842:	4b9d      	ldr	r3, [pc, #628]	@ (8003ab8 <MX_GPIO_Init+0x2c4>)
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	4b9c      	ldr	r3, [pc, #624]	@ (8003ab8 <MX_GPIO_Init+0x2c4>)
 8003848:	2180      	movs	r1, #128	@ 0x80
 800384a:	0289      	lsls	r1, r1, #10
 800384c:	430a      	orrs	r2, r1
 800384e:	615a      	str	r2, [r3, #20]
 8003850:	4b99      	ldr	r3, [pc, #612]	@ (8003ab8 <MX_GPIO_Init+0x2c4>)
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	2380      	movs	r3, #128	@ 0x80
 8003856:	029b      	lsls	r3, r3, #10
 8003858:	4013      	ands	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800385e:	4b96      	ldr	r3, [pc, #600]	@ (8003ab8 <MX_GPIO_Init+0x2c4>)
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	4b95      	ldr	r3, [pc, #596]	@ (8003ab8 <MX_GPIO_Init+0x2c4>)
 8003864:	2180      	movs	r1, #128	@ 0x80
 8003866:	02c9      	lsls	r1, r1, #11
 8003868:	430a      	orrs	r2, r1
 800386a:	615a      	str	r2, [r3, #20]
 800386c:	4b92      	ldr	r3, [pc, #584]	@ (8003ab8 <MX_GPIO_Init+0x2c4>)
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	2380      	movs	r3, #128	@ 0x80
 8003872:	02db      	lsls	r3, r3, #11
 8003874:	4013      	ands	r3, r2
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BTWakeUp_Pin|GPIO_PIN_3, GPIO_PIN_SET);
 800387a:	4990      	ldr	r1, [pc, #576]	@ (8003abc <MX_GPIO_Init+0x2c8>)
 800387c:	4b90      	ldr	r3, [pc, #576]	@ (8003ac0 <MX_GPIO_Init+0x2cc>)
 800387e:	2201      	movs	r2, #1
 8003880:	0018      	movs	r0, r3
 8003882:	f002 fae8 	bl	8005e56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11
 8003886:	498f      	ldr	r1, [pc, #572]	@ (8003ac4 <MX_GPIO_Init+0x2d0>)
 8003888:	4b8d      	ldr	r3, [pc, #564]	@ (8003ac0 <MX_GPIO_Init+0x2cc>)
 800388a:	2200      	movs	r2, #0
 800388c:	0018      	movs	r0, r3
 800388e:	f002 fae2 	bl	8005e56 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8003892:	4b8d      	ldr	r3, [pc, #564]	@ (8003ac8 <MX_GPIO_Init+0x2d4>)
 8003894:	2200      	movs	r2, #0
 8003896:	2110      	movs	r1, #16
 8003898:	0018      	movs	r0, r3
 800389a:	f002 fadc 	bl	8005e56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800389e:	498b      	ldr	r1, [pc, #556]	@ (8003acc <MX_GPIO_Init+0x2d8>)
 80038a0:	4b8b      	ldr	r3, [pc, #556]	@ (8003ad0 <MX_GPIO_Init+0x2dc>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	0018      	movs	r0, r3
 80038a6:	f002 fad6 	bl	8005e56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80038aa:	2380      	movs	r3, #128	@ 0x80
 80038ac:	0219      	lsls	r1, r3, #8
 80038ae:	2390      	movs	r3, #144	@ 0x90
 80038b0:	05db      	lsls	r3, r3, #23
 80038b2:	2200      	movs	r2, #0
 80038b4:	0018      	movs	r0, r3
 80038b6:	f002 face 	bl	8005e56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80038ba:	193b      	adds	r3, r7, r4
 80038bc:	2280      	movs	r2, #128	@ 0x80
 80038be:	01d2      	lsls	r2, r2, #7
 80038c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c2:	193b      	adds	r3, r7, r4
 80038c4:	2200      	movs	r2, #0
 80038c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	193b      	adds	r3, r7, r4
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ce:	193b      	adds	r3, r7, r4
 80038d0:	4a7b      	ldr	r2, [pc, #492]	@ (8003ac0 <MX_GPIO_Init+0x2cc>)
 80038d2:	0019      	movs	r1, r3
 80038d4:	0010      	movs	r0, r2
 80038d6:	f002 f931 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTWakeUp_Pin;
 80038da:	0021      	movs	r1, r4
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	2280      	movs	r2, #128	@ 0x80
 80038e0:	0212      	lsls	r2, r2, #8
 80038e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038e4:	000c      	movs	r4, r1
 80038e6:	193b      	adds	r3, r7, r4
 80038e8:	2201      	movs	r2, #1
 80038ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038ec:	193b      	adds	r3, r7, r4
 80038ee:	2201      	movs	r2, #1
 80038f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f2:	193b      	adds	r3, r7, r4
 80038f4:	2200      	movs	r2, #0
 80038f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BTWakeUp_GPIO_Port, &GPIO_InitStruct);
 80038f8:	193b      	adds	r3, r7, r4
 80038fa:	4a71      	ldr	r2, [pc, #452]	@ (8003ac0 <MX_GPIO_Init+0x2cc>)
 80038fc:	0019      	movs	r1, r3
 80038fe:	0010      	movs	r0, r2
 8003900:	f002 f91c 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 8003904:	193b      	adds	r3, r7, r4
 8003906:	2243      	movs	r2, #67	@ 0x43
 8003908:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800390a:	193b      	adds	r3, r7, r4
 800390c:	2203      	movs	r2, #3
 800390e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003910:	193b      	adds	r3, r7, r4
 8003912:	2200      	movs	r2, #0
 8003914:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003916:	193b      	adds	r3, r7, r4
 8003918:	4a6b      	ldr	r2, [pc, #428]	@ (8003ac8 <MX_GPIO_Init+0x2d4>)
 800391a:	0019      	movs	r1, r3
 800391c:	0010      	movs	r0, r2
 800391e:	f002 f90d 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003922:	193b      	adds	r3, r7, r4
 8003924:	2201      	movs	r2, #1
 8003926:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003928:	193b      	adds	r3, r7, r4
 800392a:	2201      	movs	r2, #1
 800392c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800392e:	193b      	adds	r3, r7, r4
 8003930:	2202      	movs	r2, #2
 8003932:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003934:	193b      	adds	r3, r7, r4
 8003936:	2200      	movs	r2, #0
 8003938:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393a:	193b      	adds	r3, r7, r4
 800393c:	4a60      	ldr	r2, [pc, #384]	@ (8003ac0 <MX_GPIO_Init+0x2cc>)
 800393e:	0019      	movs	r1, r3
 8003940:	0010      	movs	r0, r2
 8003942:	f002 f8fb 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003946:	193b      	adds	r3, r7, r4
 8003948:	2202      	movs	r2, #2
 800394a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800394c:	193b      	adds	r3, r7, r4
 800394e:	2203      	movs	r2, #3
 8003950:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	193b      	adds	r3, r7, r4
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003958:	193b      	adds	r3, r7, r4
 800395a:	4a59      	ldr	r2, [pc, #356]	@ (8003ac0 <MX_GPIO_Init+0x2cc>)
 800395c:	0019      	movs	r1, r3
 800395e:	0010      	movs	r0, r2
 8003960:	f002 f8ec 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003964:	0021      	movs	r1, r4
 8003966:	187b      	adds	r3, r7, r1
 8003968:	2204      	movs	r2, #4
 800396a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800396c:	187b      	adds	r3, r7, r1
 800396e:	22c4      	movs	r2, #196	@ 0xc4
 8003970:	0392      	lsls	r2, r2, #14
 8003972:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003974:	000c      	movs	r4, r1
 8003976:	193b      	adds	r3, r7, r4
 8003978:	2202      	movs	r2, #2
 800397a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800397c:	193b      	adds	r3, r7, r4
 800397e:	4a50      	ldr	r2, [pc, #320]	@ (8003ac0 <MX_GPIO_Init+0x2cc>)
 8003980:	0019      	movs	r1, r3
 8003982:	0010      	movs	r0, r2
 8003984:	f002 f8da 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC5 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11
 8003988:	193b      	adds	r3, r7, r4
 800398a:	4a52      	ldr	r2, [pc, #328]	@ (8003ad4 <MX_GPIO_Init+0x2e0>)
 800398c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800398e:	193b      	adds	r3, r7, r4
 8003990:	2201      	movs	r2, #1
 8003992:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	193b      	adds	r3, r7, r4
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399a:	193b      	adds	r3, r7, r4
 800399c:	2200      	movs	r2, #0
 800399e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a0:	193b      	adds	r3, r7, r4
 80039a2:	4a47      	ldr	r2, [pc, #284]	@ (8003ac0 <MX_GPIO_Init+0x2cc>)
 80039a4:	0019      	movs	r1, r3
 80039a6:	0010      	movs	r0, r2
 80039a8:	f002 f8c8 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80039ac:	193b      	adds	r3, r7, r4
 80039ae:	2210      	movs	r2, #16
 80039b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b2:	193b      	adds	r3, r7, r4
 80039b4:	2201      	movs	r2, #1
 80039b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	193b      	adds	r3, r7, r4
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039be:	193b      	adds	r3, r7, r4
 80039c0:	2200      	movs	r2, #0
 80039c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039c4:	193b      	adds	r3, r7, r4
 80039c6:	4a40      	ldr	r2, [pc, #256]	@ (8003ac8 <MX_GPIO_Init+0x2d4>)
 80039c8:	0019      	movs	r1, r3
 80039ca:	0010      	movs	r0, r2
 80039cc:	f002 f8b6 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80039d0:	193b      	adds	r3, r7, r4
 80039d2:	2220      	movs	r2, #32
 80039d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039d6:	193b      	adds	r3, r7, r4
 80039d8:	2200      	movs	r2, #0
 80039da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	193b      	adds	r3, r7, r4
 80039de:	2200      	movs	r2, #0
 80039e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039e2:	193b      	adds	r3, r7, r4
 80039e4:	4a38      	ldr	r2, [pc, #224]	@ (8003ac8 <MX_GPIO_Init+0x2d4>)
 80039e6:	0019      	movs	r1, r3
 80039e8:	0010      	movs	r0, r2
 80039ea:	f002 f8a7 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80039ee:	193b      	adds	r3, r7, r4
 80039f0:	4a36      	ldr	r2, [pc, #216]	@ (8003acc <MX_GPIO_Init+0x2d8>)
 80039f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f4:	193b      	adds	r3, r7, r4
 80039f6:	2201      	movs	r2, #1
 80039f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	193b      	adds	r3, r7, r4
 80039fc:	2200      	movs	r2, #0
 80039fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a00:	193b      	adds	r3, r7, r4
 8003a02:	2200      	movs	r2, #0
 8003a04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a06:	193b      	adds	r3, r7, r4
 8003a08:	4a31      	ldr	r2, [pc, #196]	@ (8003ad0 <MX_GPIO_Init+0x2dc>)
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	0010      	movs	r0, r2
 8003a0e:	f002 f895 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a12:	0021      	movs	r1, r4
 8003a14:	187b      	adds	r3, r7, r1
 8003a16:	2280      	movs	r2, #128	@ 0x80
 8003a18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a1a:	187b      	adds	r3, r7, r1
 8003a1c:	2288      	movs	r2, #136	@ 0x88
 8003a1e:	0352      	lsls	r2, r2, #13
 8003a20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	187b      	adds	r3, r7, r1
 8003a24:	2200      	movs	r2, #0
 8003a26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a28:	000c      	movs	r4, r1
 8003a2a:	187b      	adds	r3, r7, r1
 8003a2c:	4a26      	ldr	r2, [pc, #152]	@ (8003ac8 <MX_GPIO_Init+0x2d4>)
 8003a2e:	0019      	movs	r1, r3
 8003a30:	0010      	movs	r0, r2
 8003a32:	f002 f883 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a36:	0021      	movs	r1, r4
 8003a38:	187b      	adds	r3, r7, r1
 8003a3a:	2280      	movs	r2, #128	@ 0x80
 8003a3c:	0212      	lsls	r2, r2, #8
 8003a3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a40:	000c      	movs	r4, r1
 8003a42:	193b      	adds	r3, r7, r4
 8003a44:	2201      	movs	r2, #1
 8003a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	193b      	adds	r3, r7, r4
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4e:	193b      	adds	r3, r7, r4
 8003a50:	2200      	movs	r2, #0
 8003a52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a54:	193a      	adds	r2, r7, r4
 8003a56:	2390      	movs	r3, #144	@ 0x90
 8003a58:	05db      	lsls	r3, r3, #23
 8003a5a:	0011      	movs	r1, r2
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f002 f86d 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a62:	0021      	movs	r1, r4
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	22c0      	movs	r2, #192	@ 0xc0
 8003a68:	0092      	lsls	r2, r2, #2
 8003a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	2212      	movs	r2, #18
 8003a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	2201      	movs	r2, #1
 8003a82:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	4a12      	ldr	r2, [pc, #72]	@ (8003ad0 <MX_GPIO_Init+0x2dc>)
 8003a88:	0019      	movs	r1, r3
 8003a8a:	0010      	movs	r0, r2
 8003a8c:	f002 f856 	bl	8005b3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8003a90:	2200      	movs	r2, #0
 8003a92:	2103      	movs	r1, #3
 8003a94:	2006      	movs	r0, #6
 8003a96:	f001 fe09 	bl	80056ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003a9a:	2006      	movs	r0, #6
 8003a9c:	f001 fe1b 	bl	80056d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	2007      	movs	r0, #7
 8003aa6:	f001 fe01 	bl	80056ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003aaa:	2007      	movs	r0, #7
 8003aac:	f001 fe13 	bl	80056d6 <HAL_NVIC_EnableIRQ>

}
 8003ab0:	46c0      	nop			@ (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b00b      	add	sp, #44	@ 0x2c
 8003ab6:	bd90      	pop	{r4, r7, pc}
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	00008008 	.word	0x00008008
 8003ac0:	48000800 	.word	0x48000800
 8003ac4:	00001c21 	.word	0x00001c21
 8003ac8:	48001400 	.word	0x48001400
 8003acc:	00001c04 	.word	0x00001c04
 8003ad0:	48000400 	.word	0x48000400
 8003ad4:	00001c28 	.word	0x00001c28

08003ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ade:	4b0f      	ldr	r3, [pc, #60]	@ (8003b1c <HAL_MspInit+0x44>)
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <HAL_MspInit+0x44>)
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	619a      	str	r2, [r3, #24]
 8003aea:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <HAL_MspInit+0x44>)
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	2201      	movs	r2, #1
 8003af0:	4013      	ands	r3, r2
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003af6:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <HAL_MspInit+0x44>)
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	4b08      	ldr	r3, [pc, #32]	@ (8003b1c <HAL_MspInit+0x44>)
 8003afc:	2180      	movs	r1, #128	@ 0x80
 8003afe:	0549      	lsls	r1, r1, #21
 8003b00:	430a      	orrs	r2, r1
 8003b02:	61da      	str	r2, [r3, #28]
 8003b04:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <HAL_MspInit+0x44>)
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	2380      	movs	r3, #128	@ 0x80
 8003b0a:	055b      	lsls	r3, r3, #21
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b002      	add	sp, #8
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	40021000 	.word	0x40021000

08003b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b24:	46c0      	nop			@ (mov r8, r8)
 8003b26:	e7fd      	b.n	8003b24 <NMI_Handler+0x4>

08003b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b2c:	46c0      	nop			@ (mov r8, r8)
 8003b2e:	e7fd      	b.n	8003b2c <HardFault_Handler+0x4>

08003b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b48:	f001 f918 	bl	8004d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b4c:	46c0      	nop			@ (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003b56:	2004      	movs	r0, #4
 8003b58:	f002 f99a 	bl	8005e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003b5c:	46c0      	nop			@ (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003b66:	2080      	movs	r0, #128	@ 0x80
 8003b68:	f002 f992 	bl	8005e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003b6c:	46c0      	nop			@ (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

//	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_buf,sizeof(adc_buf));
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003b78:	4b03      	ldr	r3, [pc, #12]	@ (8003b88 <DMA1_Channel1_IRQHandler+0x14>)
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f001 fef3 	bl	8005966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b80:	46c0      	nop			@ (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	200002c0 	.word	0x200002c0

08003b8c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003b90:	4b03      	ldr	r3, [pc, #12]	@ (8003ba0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003b92:	0018      	movs	r0, r3
 8003b94:	f001 fee7 	bl	8005966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003b98:	46c0      	nop			@ (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			@ (mov r8, r8)
 8003ba0:	20000754 	.word	0x20000754

08003ba4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ba8:	4b03      	ldr	r3, [pc, #12]	@ (8003bb8 <TIM3_IRQHandler+0x14>)
 8003baa:	0018      	movs	r0, r3
 8003bac:	f003 fa7c 	bl	80070a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bb0:	46c0      	nop			@ (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	20000360 	.word	0x20000360

08003bbc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <TIM6_IRQHandler+0x14>)
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f003 fa70 	bl	80070a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003bc8:	46c0      	nop			@ (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	200003a8 	.word	0x200003a8

08003bd4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003bd8:	4b03      	ldr	r3, [pc, #12]	@ (8003be8 <TIM14_IRQHandler+0x14>)
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f003 fa64 	bl	80070a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003be0:	46c0      	nop			@ (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	200003f0 	.word	0x200003f0

08003bec <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003bf0:	4b03      	ldr	r3, [pc, #12]	@ (8003c00 <TIM15_IRQHandler+0x14>)
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f003 fa58 	bl	80070a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003bf8:	46c0      	nop			@ (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	20000438 	.word	0x20000438

08003c04 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003c08:	4b03      	ldr	r3, [pc, #12]	@ (8003c18 <TIM16_IRQHandler+0x14>)
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f003 fa4c 	bl	80070a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003c10:	46c0      	nop			@ (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	20000480 	.word	0x20000480

08003c1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c20:	4b03      	ldr	r3, [pc, #12]	@ (8003c30 <USART1_IRQHandler+0x14>)
 8003c22:	0018      	movs	r0, r3
 8003c24:	f004 fcb0 	bl	8008588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c28:	46c0      	nop			@ (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			@ (mov r8, r8)
 8003c30:	200006cc 	.word	0x200006cc

08003c34 <Get_24bit_Weight>:
 */
#include "sw_spi.h"
#include "main.h"

unsigned int Get_24bit_Weight(char channel_gain)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	0002      	movs	r2, r0
 8003c3c:	1dfb      	adds	r3, r7, #7
 8003c3e:	701a      	strb	r2, [r3, #0]
	unsigned int weight=0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]
	SW_SPI_PWR_ON; //Pull down clk
 8003c44:	4b27      	ldr	r3, [pc, #156]	@ (8003ce4 <Get_24bit_Weight+0xb0>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	2110      	movs	r1, #16
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f002 f903 	bl	8005e56 <HAL_GPIO_WritePin>

	while(SW_SPI_DAT_RDY)
 8003c50:	46c0      	nop			@ (mov r8, r8)
 8003c52:	4b24      	ldr	r3, [pc, #144]	@ (8003ce4 <Get_24bit_Weight+0xb0>)
 8003c54:	2120      	movs	r1, #32
 8003c56:	0018      	movs	r0, r3
 8003c58:	f002 f8e0 	bl	8005e1c <HAL_GPIO_ReadPin>
 8003c5c:	1e03      	subs	r3, r0, #0
 8003c5e:	d1f8      	bne.n	8003c52 <Get_24bit_Weight+0x1e>
	{
//		SW_SPI_CLK_H;
//		SW_SPI_CLK_L;
	}

	for(char i = 24; i!=0; i--)
 8003c60:	230b      	movs	r3, #11
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	2218      	movs	r2, #24
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	e021      	b.n	8003cae <Get_24bit_Weight+0x7a>
	{
		SW_SPI_CLK_H;
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce4 <Get_24bit_Weight+0xb0>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	2110      	movs	r1, #16
 8003c70:	0018      	movs	r0, r3
 8003c72:	f002 f8f0 	bl	8005e56 <HAL_GPIO_WritePin>
		weight = weight<<1;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	60fb      	str	r3, [r7, #12]
		SW_SPI_CLK_L;
 8003c7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ce4 <Get_24bit_Weight+0xb0>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2110      	movs	r1, #16
 8003c82:	0018      	movs	r0, r3
 8003c84:	f002 f8e7 	bl	8005e56 <HAL_GPIO_WritePin>
		if(SW_SPI_DAT_RDY)
 8003c88:	4b16      	ldr	r3, [pc, #88]	@ (8003ce4 <Get_24bit_Weight+0xb0>)
 8003c8a:	2120      	movs	r1, #32
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f002 f8c5 	bl	8005e1c <HAL_GPIO_ReadPin>
 8003c92:	1e03      	subs	r3, r0, #0
 8003c94:	d002      	beq.n	8003c9c <Get_24bit_Weight+0x68>
		{
		 weight+=1;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]
		}
		delay_us(1);
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	f000 feb5 	bl	8004a0c <delay_us>
	for(char i = 24; i!=0; i--)
 8003ca2:	210b      	movs	r1, #11
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	187b      	adds	r3, r7, r1
 8003caa:	3a01      	subs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	230b      	movs	r3, #11
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1d8      	bne.n	8003c6a <Get_24bit_Weight+0x36>
	}
	SW_SPI_CLK_H;
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce4 <Get_24bit_Weight+0xb0>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	2110      	movs	r1, #16
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f002 f8c9 	bl	8005e56 <HAL_GPIO_WritePin>
	weight = weight^0x800000;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2280      	movs	r2, #128	@ 0x80
 8003cc8:	0412      	lsls	r2, r2, #16
 8003cca:	4053      	eors	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
	SW_SPI_CLK_L;
 8003cce:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <Get_24bit_Weight+0xb0>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2110      	movs	r1, #16
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f002 f8be 	bl	8005e56 <HAL_GPIO_WritePin>

	//Preserved for channel selection

	return weight;
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b004      	add	sp, #16
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	48001400 	.word	0x48001400

08003ce8 <Get_weight>:

void Get_weight(HX711_Structure* weight_par)		// AKg * AVDDmV/X Kg = Y   A:weight AVDD:sensor power X:max weight of load cell Y:AD reading from module
{													// Example: A Kg * 3.24mV/10Kg => A*128 = 0.324*128AmV = 41.472AmV  => 41.472AmV/AD = 3.24V/0xffffff => AD = 214748.352A(Kg)  A(g) = AD/214.748
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	if(weight_par->calibration_flag)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	7b1b      	ldrb	r3, [r3, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d035      	beq.n	8003d64 <Get_weight+0x7c>
	{
		weight_par->gross_weight = Get_24bit_Weight(CHA_128);
 8003cf8:	2019      	movs	r0, #25
 8003cfa:	f7ff ff9b 	bl	8003c34 <Get_24bit_Weight>
 8003cfe:	0003      	movs	r3, r0
 8003d00:	001a      	movs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	605a      	str	r2, [r3, #4]
		if(weight_par->gross_weight >= weight_par->calibrated_value)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	db11      	blt.n	8003d36 <Get_weight+0x4e>
		{
			weight_par->sens_err_flag = FALSE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2231      	movs	r2, #49	@ 0x31
 8003d16:	2100      	movs	r1, #0
 8003d18:	5499      	strb	r1, [r3, r2]
			weight_par->gram = ((weight_par->gross_weight - weight_par->calibrated_value)/LOAD_CELL_FACTOR);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2119      	movs	r1, #25
 8003d26:	0018      	movs	r0, r3
 8003d28:	f7fc fa9e 	bl	8000268 <__divsi3>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	001a      	movs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	601a      	str	r2, [r3, #0]
		{
			weight_par->sens_err_flag = TRUE;
			weight_par->gram  = 0;
		}
	}
}
 8003d34:	e016      	b.n	8003d64 <Get_weight+0x7c>
		else if(((weight_par->gross_weight - weight_par->calibrated_value)< -1000)||((weight_par->gross_weight - weight_par->calibrated_value)/LOAD_CELL_FACTOR>30000))//Sensor disconnected
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	4a0a      	ldr	r2, [pc, #40]	@ (8003d6c <Get_weight+0x84>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	db07      	blt.n	8003d56 <Get_weight+0x6e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	4a07      	ldr	r2, [pc, #28]	@ (8003d70 <Get_weight+0x88>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	dd06      	ble.n	8003d64 <Get_weight+0x7c>
			weight_par->sens_err_flag = TRUE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2231      	movs	r2, #49	@ 0x31
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	5499      	strb	r1, [r3, r2]
			weight_par->gram  = 0;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b002      	add	sp, #8
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	fffffc18 	.word	0xfffffc18
 8003d70:	000b71c8 	.word	0x000b71c8

08003d74 <HX711_Calibration>:

void HX711_Calibration(HX711_Structure* weight_par)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	  /*******Get gross weight**************/
	for(char i=0;i<5;i++)
 8003d7c:	230f      	movs	r3, #15
 8003d7e:	18fb      	adds	r3, r7, r3
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	e020      	b.n	8003dc8 <HX711_Calibration+0x54>
	{
		SW_SPI_PWR_OFF;
 8003d86:	4b48      	ldr	r3, [pc, #288]	@ (8003ea8 <HX711_Calibration+0x134>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	2110      	movs	r1, #16
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f002 f862 	bl	8005e56 <HAL_GPIO_WritePin>
		delay_us(2000);
 8003d92:	23fa      	movs	r3, #250	@ 0xfa
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	0018      	movs	r0, r3
 8003d98:	f000 fe38 	bl	8004a0c <delay_us>
		SW_SPI_PWR_ON;
 8003d9c:	4b42      	ldr	r3, [pc, #264]	@ (8003ea8 <HX711_Calibration+0x134>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2110      	movs	r1, #16
 8003da2:	0018      	movs	r0, r3
 8003da4:	f002 f857 	bl	8005e56 <HAL_GPIO_WritePin>
		weight_par->calibrated_value+= Get_24bit_Weight(CHA_128);
 8003da8:	2019      	movs	r0, #25
 8003daa:	f7ff ff43 	bl	8003c34 <Get_24bit_Weight>
 8003dae:	0002      	movs	r2, r0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	18d3      	adds	r3, r2, r3
 8003db6:	001a      	movs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	609a      	str	r2, [r3, #8]
	for(char i=0;i<5;i++)
 8003dbc:	210f      	movs	r1, #15
 8003dbe:	187b      	adds	r3, r7, r1
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	187b      	adds	r3, r7, r1
 8003dc4:	3201      	adds	r2, #1
 8003dc6:	701a      	strb	r2, [r3, #0]
 8003dc8:	230f      	movs	r3, #15
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d9d9      	bls.n	8003d86 <HX711_Calibration+0x12>
	}
	weight_par->calibrated_value /=5;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2105      	movs	r1, #5
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7fc fa45 	bl	8000268 <__divsi3>
 8003dde:	0003      	movs	r3, r0
 8003de0:	001a      	movs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	609a      	str	r2, [r3, #8]



	  while(!(weight_par->calibrated_value>= CALIBRATION_RANGE_L && weight_par->calibrated_value<=CALIBRATION_RANGE_H))
 8003de6:	e025      	b.n	8003e34 <HX711_Calibration+0xc0>
	  {
		  printf("Sensor initial error, re-calibrating\r\n");
 8003de8:	4b30      	ldr	r3, [pc, #192]	@ (8003eac <HX711_Calibration+0x138>)
 8003dea:	0018      	movs	r0, r3
 8003dec:	f007 fb40 	bl	800b470 <puts>
		  SW_SPI_PWR_OFF;
 8003df0:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea8 <HX711_Calibration+0x134>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	2110      	movs	r1, #16
 8003df6:	0018      	movs	r0, r3
 8003df8:	f002 f82d 	bl	8005e56 <HAL_GPIO_WritePin>
		  delay_us(200);
 8003dfc:	20c8      	movs	r0, #200	@ 0xc8
 8003dfe:	f000 fe05 	bl	8004a0c <delay_us>
		  SW_SPI_PWR_ON;
 8003e02:	4b29      	ldr	r3, [pc, #164]	@ (8003ea8 <HX711_Calibration+0x134>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	2110      	movs	r1, #16
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f002 f824 	bl	8005e56 <HAL_GPIO_WritePin>
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 8003e0e:	2019      	movs	r0, #25
 8003e10:	f7ff ff10 	bl	8003c34 <Get_24bit_Weight>
 8003e14:	0003      	movs	r3, r0
 8003e16:	001a      	movs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	609a      	str	r2, [r3, #8]
		  delay_us(2000);
 8003e1c:	23fa      	movs	r3, #250	@ 0xfa
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	0018      	movs	r0, r3
 8003e22:	f000 fdf3 	bl	8004a0c <delay_us>
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 8003e26:	2019      	movs	r0, #25
 8003e28:	f7ff ff04 	bl	8003c34 <Get_24bit_Weight>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	001a      	movs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	609a      	str	r2, [r3, #8]
	  while(!(weight_par->calibrated_value>= CALIBRATION_RANGE_L && weight_par->calibrated_value<=CALIBRATION_RANGE_H))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb0 <HX711_Calibration+0x13c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	ddd4      	ble.n	8003de8 <HX711_Calibration+0x74>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb4 <HX711_Calibration+0x140>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	dccf      	bgt.n	8003de8 <HX711_Calibration+0x74>
	  }
	  SW_SPI_PWR_OFF;
 8003e48:	4b17      	ldr	r3, [pc, #92]	@ (8003ea8 <HX711_Calibration+0x134>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	2110      	movs	r1, #16
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f002 f801 	bl	8005e56 <HAL_GPIO_WritePin>
	  delay_us(200);
 8003e54:	20c8      	movs	r0, #200	@ 0xc8
 8003e56:	f000 fdd9 	bl	8004a0c <delay_us>
	  SW_SPI_PWR_ON;
 8003e5a:	4b13      	ldr	r3, [pc, #76]	@ (8003ea8 <HX711_Calibration+0x134>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2110      	movs	r1, #16
 8003e60:	0018      	movs	r0, r3
 8003e62:	f001 fff8 	bl	8005e56 <HAL_GPIO_WritePin>
	  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 8003e66:	2019      	movs	r0, #25
 8003e68:	f7ff fee4 	bl	8003c34 <Get_24bit_Weight>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	001a      	movs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	609a      	str	r2, [r3, #8]
	  delay_us(2000);
 8003e74:	23fa      	movs	r3, #250	@ 0xfa
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f000 fdc7 	bl	8004a0c <delay_us>
	  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 8003e7e:	2019      	movs	r0, #25
 8003e80:	f7ff fed8 	bl	8003c34 <Get_24bit_Weight>
 8003e84:	0003      	movs	r3, r0
 8003e86:	001a      	movs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	609a      	str	r2, [r3, #8]

	  printf_DMA("calibration ok weight:%d\r\n", weight_par->calibrated_value);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	4b09      	ldr	r3, [pc, #36]	@ (8003eb8 <HX711_Calibration+0x144>)
 8003e92:	0011      	movs	r1, r2
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7fe fff7 	bl	8002e88 <printf_DMA>
	  weight_par->calibration_flag = 1; //Calibration done
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	731a      	strb	r2, [r3, #12]

}
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b004      	add	sp, #16
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	48001400 	.word	0x48001400
 8003eac:	0800ec40 	.word	0x0800ec40
 8003eb0:	007a11ff 	.word	0x007a11ff
 8003eb4:	00864700 	.word	0x00864700
 8003eb8:	0800ec68 	.word	0x0800ec68

08003ebc <Incremental_PID>:
// In this motor control we use P
// PWM = Kp[e(k) - e(k-1)]
//Target is pull _force_thr, but keep calculating if the force is bigger than 500

signed char Incremental_PID(HX711_Structure* weight_par, uint16_t pull_force_thr, PID_ParameterStruct* PID_Parameters)
{
 8003ebc:	b5b0      	push	{r4, r5, r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	230a      	movs	r3, #10
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	1c0a      	adds	r2, r1, #0
 8003ecc:	801a      	strh	r2, [r3, #0]
	static signed int   Bias=0, Last_bias=0, Last1_bias = 0;
	static signed int PWM = 0; //need to be static?
	Bias = weight_par->gramAvgval> LOWER_LIMMIT? weight_par->gramAvgval - PULL_FORCE_THR : 0;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed2:	23fa      	movs	r3, #250	@ 0xfa
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	dd04      	ble.n	8003ee4 <Incremental_PID+0x28>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ede:	4a37      	ldr	r2, [pc, #220]	@ (8003fbc <Incremental_PID+0x100>)
 8003ee0:	189a      	adds	r2, r3, r2
 8003ee2:	e000      	b.n	8003ee6 <Incremental_PID+0x2a>
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	4b36      	ldr	r3, [pc, #216]	@ (8003fc0 <Incremental_PID+0x104>)
 8003ee8:	601a      	str	r2, [r3, #0]
	//sum_integral +=Bias*Ki;
	PWM = PID_Parameters->Kp*(Bias-Last_bias)+PID_Parameters->Ki*Bias + PID_Parameters->Kd*((Bias - Last_bias) + (Bias-2*Last_bias+Last1_bias));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681c      	ldr	r4, [r3, #0]
 8003eee:	4b34      	ldr	r3, [pc, #208]	@ (8003fc0 <Incremental_PID+0x104>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b34      	ldr	r3, [pc, #208]	@ (8003fc4 <Incremental_PID+0x108>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7fc fe35 	bl	8000b68 <__aeabi_i2f>
 8003efe:	1c03      	adds	r3, r0, #0
 8003f00:	1c19      	adds	r1, r3, #0
 8003f02:	1c20      	adds	r0, r4, #0
 8003f04:	f7fc fcd2 	bl	80008ac <__aeabi_fmul>
 8003f08:	1c03      	adds	r3, r0, #0
 8003f0a:	1c1d      	adds	r5, r3, #0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685c      	ldr	r4, [r3, #4]
 8003f10:	4b2b      	ldr	r3, [pc, #172]	@ (8003fc0 <Incremental_PID+0x104>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7fc fe27 	bl	8000b68 <__aeabi_i2f>
 8003f1a:	1c03      	adds	r3, r0, #0
 8003f1c:	1c19      	adds	r1, r3, #0
 8003f1e:	1c20      	adds	r0, r4, #0
 8003f20:	f7fc fcc4 	bl	80008ac <__aeabi_fmul>
 8003f24:	1c03      	adds	r3, r0, #0
 8003f26:	1c19      	adds	r1, r3, #0
 8003f28:	1c28      	adds	r0, r5, #0
 8003f2a:	f7fc fb35 	bl	8000598 <__aeabi_fadd>
 8003f2e:	1c03      	adds	r3, r0, #0
 8003f30:	1c1d      	adds	r5, r3, #0
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689c      	ldr	r4, [r3, #8]
 8003f36:	4b22      	ldr	r3, [pc, #136]	@ (8003fc0 <Incremental_PID+0x104>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4b22      	ldr	r3, [pc, #136]	@ (8003fc4 <Incremental_PID+0x108>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	1ad2      	subs	r2, r2, r3
 8003f40:	4b1f      	ldr	r3, [pc, #124]	@ (8003fc0 <Incremental_PID+0x104>)
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	4b1f      	ldr	r3, [pc, #124]	@ (8003fc4 <Incremental_PID+0x108>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	1ac9      	subs	r1, r1, r3
 8003f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc8 <Incremental_PID+0x10c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	18cb      	adds	r3, r1, r3
 8003f52:	18d3      	adds	r3, r2, r3
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7fc fe07 	bl	8000b68 <__aeabi_i2f>
 8003f5a:	1c03      	adds	r3, r0, #0
 8003f5c:	1c19      	adds	r1, r3, #0
 8003f5e:	1c20      	adds	r0, r4, #0
 8003f60:	f7fc fca4 	bl	80008ac <__aeabi_fmul>
 8003f64:	1c03      	adds	r3, r0, #0
 8003f66:	1c19      	adds	r1, r3, #0
 8003f68:	1c28      	adds	r0, r5, #0
 8003f6a:	f7fc fb15 	bl	8000598 <__aeabi_fadd>
 8003f6e:	1c03      	adds	r3, r0, #0
 8003f70:	1c18      	adds	r0, r3, #0
 8003f72:	f7fc fdd9 	bl	8000b28 <__aeabi_f2iz>
 8003f76:	0002      	movs	r2, r0
 8003f78:	4b14      	ldr	r3, [pc, #80]	@ (8003fcc <Incremental_PID+0x110>)
 8003f7a:	601a      	str	r2, [r3, #0]
	Last1_bias = Last_bias;
 8003f7c:	4b11      	ldr	r3, [pc, #68]	@ (8003fc4 <Incremental_PID+0x108>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b11      	ldr	r3, [pc, #68]	@ (8003fc8 <Incremental_PID+0x10c>)
 8003f82:	601a      	str	r2, [r3, #0]
	Last_bias = Bias;
 8003f84:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc0 <Incremental_PID+0x104>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc4 <Incremental_PID+0x108>)
 8003f8a:	601a      	str	r2, [r3, #0]


	PWM = PWM>50 ? 50:PWM;
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fcc <Incremental_PID+0x110>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b32      	cmp	r3, #50	@ 0x32
 8003f92:	dd00      	ble.n	8003f96 <Incremental_PID+0xda>
 8003f94:	2332      	movs	r3, #50	@ 0x32
 8003f96:	4a0d      	ldr	r2, [pc, #52]	@ (8003fcc <Incremental_PID+0x110>)
 8003f98:	6013      	str	r3, [r2, #0]
	PWM = PWM<-50? -50: PWM;
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fcc <Incremental_PID+0x110>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	3232      	adds	r2, #50	@ 0x32
 8003fa2:	da01      	bge.n	8003fa8 <Incremental_PID+0xec>
 8003fa4:	2332      	movs	r3, #50	@ 0x32
 8003fa6:	425b      	negs	r3, r3
 8003fa8:	4a08      	ldr	r2, [pc, #32]	@ (8003fcc <Incremental_PID+0x110>)
 8003faa:	6013      	str	r3, [r2, #0]

	return PWM;//Bit operation can lead to negtive value
 8003fac:	4b07      	ldr	r3, [pc, #28]	@ (8003fcc <Incremental_PID+0x110>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	b25b      	sxtb	r3, r3
}
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b004      	add	sp, #16
 8003fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fba:	46c0      	nop			@ (mov r8, r8)
 8003fbc:	fffff63c 	.word	0xfffff63c
 8003fc0:	20000304 	.word	0x20000304
 8003fc4:	20000308 	.word	0x20000308
 8003fc8:	2000030c 	.word	0x2000030c
 8003fcc:	20000310 	.word	0x20000310

08003fd0 <error_code>:

void error_code()
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
	IND_LED_ON;
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <error_code+0x38>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2101      	movs	r1, #1
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f001 ff3b 	bl	8005e56 <HAL_GPIO_WritePin>
	delay_ms(500);
 8003fe0:	23fa      	movs	r3, #250	@ 0xfa
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f000 fd3f 	bl	8004a68 <delay_ms>
	IND_LED_OFF;
 8003fea:	4b07      	ldr	r3, [pc, #28]	@ (8004008 <error_code+0x38>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	2101      	movs	r1, #1
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f001 ff30 	bl	8005e56 <HAL_GPIO_WritePin>
	delay_ms(500);
 8003ff6:	23fa      	movs	r3, #250	@ 0xfa
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f000 fd34 	bl	8004a68 <delay_ms>
}
 8004000:	46c0      	nop			@ (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	46c0      	nop			@ (mov r8, r8)
 8004008:	48000800 	.word	0x48000800

0800400c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  return 1;
 8004010:	2301      	movs	r3, #1
}
 8004012:	0018      	movs	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <_kill>:

int _kill(int pid, int sig)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004022:	f007 fc09 	bl	800b838 <__errno>
 8004026:	0003      	movs	r3, r0
 8004028:	2216      	movs	r2, #22
 800402a:	601a      	str	r2, [r3, #0]
  return -1;
 800402c:	2301      	movs	r3, #1
 800402e:	425b      	negs	r3, r3
}
 8004030:	0018      	movs	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	b002      	add	sp, #8
 8004036:	bd80      	pop	{r7, pc}

08004038 <_exit>:

void _exit (int status)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004040:	2301      	movs	r3, #1
 8004042:	425a      	negs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	0011      	movs	r1, r2
 8004048:	0018      	movs	r0, r3
 800404a:	f7ff ffe5 	bl	8004018 <_kill>
  while (1) {}    /* Make sure we hang here */
 800404e:	46c0      	nop			@ (mov r8, r8)
 8004050:	e7fd      	b.n	800404e <_exit+0x16>

08004052 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e00a      	b.n	800407a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004064:	e000      	b.n	8004068 <_read+0x16>
 8004066:	bf00      	nop
 8004068:	0001      	movs	r1, r0
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	60ba      	str	r2, [r7, #8]
 8004070:	b2ca      	uxtb	r2, r1
 8004072:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	3301      	adds	r3, #1
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	429a      	cmp	r2, r3
 8004080:	dbf0      	blt.n	8004064 <_read+0x12>
  }

  return len;
 8004082:	687b      	ldr	r3, [r7, #4]
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b006      	add	sp, #24
 800408a:	bd80      	pop	{r7, pc}

0800408c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e009      	b.n	80040b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	60ba      	str	r2, [r7, #8]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f7fe feda 	bl	8002e60 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3301      	adds	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	dbf1      	blt.n	800409e <_write+0x12>
  }
  return len;
 80040ba:	687b      	ldr	r3, [r7, #4]
}
 80040bc:	0018      	movs	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	b006      	add	sp, #24
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <_close>:
		}
		return len;
}*/

int _close(int file)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80040cc:	2301      	movs	r3, #1
 80040ce:	425b      	negs	r3, r3
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b002      	add	sp, #8
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2280      	movs	r2, #128	@ 0x80
 80040e6:	0192      	lsls	r2, r2, #6
 80040e8:	605a      	str	r2, [r3, #4]
  return 0;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	0018      	movs	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b002      	add	sp, #8
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <_isatty>:

int _isatty(int file)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80040fc:	2301      	movs	r3, #1
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b002      	add	sp, #8
 8004104:	bd80      	pop	{r7, pc}

08004106 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004112:	2300      	movs	r3, #0
}
 8004114:	0018      	movs	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	b004      	add	sp, #16
 800411a:	bd80      	pop	{r7, pc}

0800411c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004124:	4a14      	ldr	r2, [pc, #80]	@ (8004178 <_sbrk+0x5c>)
 8004126:	4b15      	ldr	r3, [pc, #84]	@ (800417c <_sbrk+0x60>)
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004130:	4b13      	ldr	r3, [pc, #76]	@ (8004180 <_sbrk+0x64>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d102      	bne.n	800413e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004138:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <_sbrk+0x64>)
 800413a:	4a12      	ldr	r2, [pc, #72]	@ (8004184 <_sbrk+0x68>)
 800413c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800413e:	4b10      	ldr	r3, [pc, #64]	@ (8004180 <_sbrk+0x64>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	18d3      	adds	r3, r2, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	429a      	cmp	r2, r3
 800414a:	d207      	bcs.n	800415c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800414c:	f007 fb74 	bl	800b838 <__errno>
 8004150:	0003      	movs	r3, r0
 8004152:	220c      	movs	r2, #12
 8004154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004156:	2301      	movs	r3, #1
 8004158:	425b      	negs	r3, r3
 800415a:	e009      	b.n	8004170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800415c:	4b08      	ldr	r3, [pc, #32]	@ (8004180 <_sbrk+0x64>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004162:	4b07      	ldr	r3, [pc, #28]	@ (8004180 <_sbrk+0x64>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	18d2      	adds	r2, r2, r3
 800416a:	4b05      	ldr	r3, [pc, #20]	@ (8004180 <_sbrk+0x64>)
 800416c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800416e:	68fb      	ldr	r3, [r7, #12]
}
 8004170:	0018      	movs	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	b006      	add	sp, #24
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20002000 	.word	0x20002000
 800417c:	00000400 	.word	0x00000400
 8004180:	20000314 	.word	0x20000314
 8004184:	200008f0 	.word	0x200008f0

08004188 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800418c:	46c0      	nop			@ (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b09a      	sub	sp, #104	@ 0x68
 8004198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800419a:	2358      	movs	r3, #88	@ 0x58
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	0018      	movs	r0, r3
 80041a0:	2310      	movs	r3, #16
 80041a2:	001a      	movs	r2, r3
 80041a4:	2100      	movs	r1, #0
 80041a6:	f007 fadb 	bl	800b760 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80041aa:	2344      	movs	r3, #68	@ 0x44
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	0018      	movs	r0, r3
 80041b0:	2314      	movs	r3, #20
 80041b2:	001a      	movs	r2, r3
 80041b4:	2100      	movs	r1, #0
 80041b6:	f007 fad3 	bl	800b760 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041ba:	233c      	movs	r3, #60	@ 0x3c
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	0018      	movs	r0, r3
 80041c0:	2308      	movs	r3, #8
 80041c2:	001a      	movs	r2, r3
 80041c4:	2100      	movs	r1, #0
 80041c6:	f007 facb 	bl	800b760 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041ca:	2320      	movs	r3, #32
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	0018      	movs	r0, r3
 80041d0:	231c      	movs	r3, #28
 80041d2:	001a      	movs	r2, r3
 80041d4:	2100      	movs	r1, #0
 80041d6:	f007 fac3 	bl	800b760 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80041da:	003b      	movs	r3, r7
 80041dc:	0018      	movs	r0, r3
 80041de:	2320      	movs	r3, #32
 80041e0:	001a      	movs	r2, r3
 80041e2:	2100      	movs	r1, #0
 80041e4:	f007 fabc 	bl	800b760 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80041e8:	4b6c      	ldr	r3, [pc, #432]	@ (800439c <MX_TIM1_Init+0x208>)
 80041ea:	4a6d      	ldr	r2, [pc, #436]	@ (80043a0 <MX_TIM1_Init+0x20c>)
 80041ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80041ee:	4b6b      	ldr	r3, [pc, #428]	@ (800439c <MX_TIM1_Init+0x208>)
 80041f0:	220f      	movs	r2, #15
 80041f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f4:	4b69      	ldr	r3, [pc, #420]	@ (800439c <MX_TIM1_Init+0x208>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80041fa:	4b68      	ldr	r3, [pc, #416]	@ (800439c <MX_TIM1_Init+0x208>)
 80041fc:	2263      	movs	r2, #99	@ 0x63
 80041fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004200:	4b66      	ldr	r3, [pc, #408]	@ (800439c <MX_TIM1_Init+0x208>)
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004206:	4b65      	ldr	r3, [pc, #404]	@ (800439c <MX_TIM1_Init+0x208>)
 8004208:	2200      	movs	r2, #0
 800420a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800420c:	4b63      	ldr	r3, [pc, #396]	@ (800439c <MX_TIM1_Init+0x208>)
 800420e:	2200      	movs	r2, #0
 8004210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004212:	4b62      	ldr	r3, [pc, #392]	@ (800439c <MX_TIM1_Init+0x208>)
 8004214:	0018      	movs	r0, r3
 8004216:	f002 fb83 	bl	8006920 <HAL_TIM_Base_Init>
 800421a:	1e03      	subs	r3, r0, #0
 800421c:	d001      	beq.n	8004222 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800421e:	f7fe fe5f 	bl	8002ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004222:	2158      	movs	r1, #88	@ 0x58
 8004224:	187b      	adds	r3, r7, r1
 8004226:	2280      	movs	r2, #128	@ 0x80
 8004228:	0152      	lsls	r2, r2, #5
 800422a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800422c:	187a      	adds	r2, r7, r1
 800422e:	4b5b      	ldr	r3, [pc, #364]	@ (800439c <MX_TIM1_Init+0x208>)
 8004230:	0011      	movs	r1, r2
 8004232:	0018      	movs	r0, r3
 8004234:	f003 f944 	bl	80074c0 <HAL_TIM_ConfigClockSource>
 8004238:	1e03      	subs	r3, r0, #0
 800423a:	d001      	beq.n	8004240 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800423c:	f7fe fe50 	bl	8002ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004240:	4b56      	ldr	r3, [pc, #344]	@ (800439c <MX_TIM1_Init+0x208>)
 8004242:	0018      	movs	r0, r3
 8004244:	f002 fdaa 	bl	8006d9c <HAL_TIM_PWM_Init>
 8004248:	1e03      	subs	r3, r0, #0
 800424a:	d001      	beq.n	8004250 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800424c:	f7fe fe48 	bl	8002ee0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004250:	4b52      	ldr	r3, [pc, #328]	@ (800439c <MX_TIM1_Init+0x208>)
 8004252:	0018      	movs	r0, r3
 8004254:	f002 fc98 	bl	8006b88 <HAL_TIM_OC_Init>
 8004258:	1e03      	subs	r3, r0, #0
 800425a:	d001      	beq.n	8004260 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800425c:	f7fe fe40 	bl	8002ee0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8004260:	2144      	movs	r1, #68	@ 0x44
 8004262:	187b      	adds	r3, r7, r1
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004268:	187b      	adds	r3, r7, r1
 800426a:	2200      	movs	r2, #0
 800426c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800426e:	187a      	adds	r2, r7, r1
 8004270:	4b4a      	ldr	r3, [pc, #296]	@ (800439c <MX_TIM1_Init+0x208>)
 8004272:	0011      	movs	r1, r2
 8004274:	0018      	movs	r0, r3
 8004276:	f003 f9f7 	bl	8007668 <HAL_TIM_SlaveConfigSynchro>
 800427a:	1e03      	subs	r3, r0, #0
 800427c:	d001      	beq.n	8004282 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800427e:	f7fe fe2f 	bl	8002ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8004282:	213c      	movs	r1, #60	@ 0x3c
 8004284:	187b      	adds	r3, r7, r1
 8004286:	2270      	movs	r2, #112	@ 0x70
 8004288:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800428a:	187b      	adds	r3, r7, r1
 800428c:	2200      	movs	r2, #0
 800428e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004290:	187a      	adds	r2, r7, r1
 8004292:	4b42      	ldr	r3, [pc, #264]	@ (800439c <MX_TIM1_Init+0x208>)
 8004294:	0011      	movs	r1, r2
 8004296:	0018      	movs	r0, r3
 8004298:	f003 feb2 	bl	8008000 <HAL_TIMEx_MasterConfigSynchronization>
 800429c:	1e03      	subs	r3, r0, #0
 800429e:	d001      	beq.n	80042a4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80042a0:	f7fe fe1e 	bl	8002ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042a4:	2120      	movs	r1, #32
 80042a6:	187b      	adds	r3, r7, r1
 80042a8:	2260      	movs	r2, #96	@ 0x60
 80042aa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 80042ac:	187b      	adds	r3, r7, r1
 80042ae:	2232      	movs	r2, #50	@ 0x32
 80042b0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042b2:	187b      	adds	r3, r7, r1
 80042b4:	2200      	movs	r2, #0
 80042b6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80042b8:	187b      	adds	r3, r7, r1
 80042ba:	2200      	movs	r2, #0
 80042bc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042be:	187b      	adds	r3, r7, r1
 80042c0:	2200      	movs	r2, #0
 80042c2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80042c4:	187b      	adds	r3, r7, r1
 80042c6:	2200      	movs	r2, #0
 80042c8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042ca:	187b      	adds	r3, r7, r1
 80042cc:	2200      	movs	r2, #0
 80042ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042d0:	1879      	adds	r1, r7, r1
 80042d2:	4b32      	ldr	r3, [pc, #200]	@ (800439c <MX_TIM1_Init+0x208>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	0018      	movs	r0, r3
 80042d8:	f003 f82c 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d001      	beq.n	80042e4 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80042e0:	f7fe fdfe 	bl	8002ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042e4:	2320      	movs	r3, #32
 80042e6:	18f9      	adds	r1, r7, r3
 80042e8:	4b2c      	ldr	r3, [pc, #176]	@ (800439c <MX_TIM1_Init+0x208>)
 80042ea:	2204      	movs	r2, #4
 80042ec:	0018      	movs	r0, r3
 80042ee:	f003 f821 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 80042f2:	1e03      	subs	r3, r0, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 80042f6:	f7fe fdf3 	bl	8002ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80042fa:	2320      	movs	r3, #32
 80042fc:	18f9      	adds	r1, r7, r3
 80042fe:	4b27      	ldr	r3, [pc, #156]	@ (800439c <MX_TIM1_Init+0x208>)
 8004300:	2208      	movs	r2, #8
 8004302:	0018      	movs	r0, r3
 8004304:	f003 f816 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d001      	beq.n	8004310 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 800430c:	f7fe fde8 	bl	8002ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004310:	2120      	movs	r1, #32
 8004312:	187b      	adds	r3, r7, r1
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004318:	1879      	adds	r1, r7, r1
 800431a:	4b20      	ldr	r3, [pc, #128]	@ (800439c <MX_TIM1_Init+0x208>)
 800431c:	220c      	movs	r2, #12
 800431e:	0018      	movs	r0, r3
 8004320:	f002 ffb0 	bl	8007284 <HAL_TIM_OC_ConfigChannel>
 8004324:	1e03      	subs	r3, r0, #0
 8004326:	d001      	beq.n	800432c <MX_TIM1_Init+0x198>
  {
    Error_Handler();
 8004328:	f7fe fdda 	bl	8002ee0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800432c:	003b      	movs	r3, r7
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004332:	003b      	movs	r3, r7
 8004334:	2200      	movs	r2, #0
 8004336:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004338:	003b      	movs	r3, r7
 800433a:	2200      	movs	r2, #0
 800433c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 1;
 800433e:	003b      	movs	r3, r7
 8004340:	2201      	movs	r2, #1
 8004342:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004344:	003b      	movs	r3, r7
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800434a:	003b      	movs	r3, r7
 800434c:	2280      	movs	r2, #128	@ 0x80
 800434e:	0192      	lsls	r2, r2, #6
 8004350:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8004352:	003b      	movs	r3, r7
 8004354:	2280      	movs	r2, #128	@ 0x80
 8004356:	01d2      	lsls	r2, r2, #7
 8004358:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800435a:	003a      	movs	r2, r7
 800435c:	4b0f      	ldr	r3, [pc, #60]	@ (800439c <MX_TIM1_Init+0x208>)
 800435e:	0011      	movs	r1, r2
 8004360:	0018      	movs	r0, r3
 8004362:	f003 fea5 	bl	80080b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004366:	1e03      	subs	r3, r0, #0
 8004368:	d001      	beq.n	800436e <MX_TIM1_Init+0x1da>
  {
    Error_Handler();
 800436a:	f7fe fdb9 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  sBreakDeadTimeConfig.DeadTime = 499;//50 = 1us
 800436e:	003b      	movs	r3, r7
 8004370:	22f4      	movs	r2, #244	@ 0xf4
 8004372:	32ff      	adds	r2, #255	@ 0xff
 8004374:	60da      	str	r2, [r3, #12]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004376:	003a      	movs	r2, r7
 8004378:	4b08      	ldr	r3, [pc, #32]	@ (800439c <MX_TIM1_Init+0x208>)
 800437a:	0011      	movs	r1, r2
 800437c:	0018      	movs	r0, r3
 800437e:	f003 fe97 	bl	80080b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004382:	1e03      	subs	r3, r0, #0
 8004384:	d001      	beq.n	800438a <MX_TIM1_Init+0x1f6>
  {
    Error_Handler();
 8004386:	f7fe fdab 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800438a:	4b04      	ldr	r3, [pc, #16]	@ (800439c <MX_TIM1_Init+0x208>)
 800438c:	0018      	movs	r0, r3
 800438e:	f000 faa9 	bl	80048e4 <HAL_TIM_MspPostInit>

}
 8004392:	46c0      	nop			@ (mov r8, r8)
 8004394:	46bd      	mov	sp, r7
 8004396:	b01a      	add	sp, #104	@ 0x68
 8004398:	bd80      	pop	{r7, pc}
 800439a:	46c0      	nop			@ (mov r8, r8)
 800439c:	20000318 	.word	0x20000318
 80043a0:	40012c00 	.word	0x40012c00

080043a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08e      	sub	sp, #56	@ 0x38
 80043a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043aa:	2328      	movs	r3, #40	@ 0x28
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	0018      	movs	r0, r3
 80043b0:	2310      	movs	r3, #16
 80043b2:	001a      	movs	r2, r3
 80043b4:	2100      	movs	r1, #0
 80043b6:	f007 f9d3 	bl	800b760 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043ba:	2320      	movs	r3, #32
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	0018      	movs	r0, r3
 80043c0:	2308      	movs	r3, #8
 80043c2:	001a      	movs	r2, r3
 80043c4:	2100      	movs	r1, #0
 80043c6:	f007 f9cb 	bl	800b760 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043ca:	1d3b      	adds	r3, r7, #4
 80043cc:	0018      	movs	r0, r3
 80043ce:	231c      	movs	r3, #28
 80043d0:	001a      	movs	r2, r3
 80043d2:	2100      	movs	r1, #0
 80043d4:	f007 f9c4 	bl	800b760 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80043d8:	4b34      	ldr	r3, [pc, #208]	@ (80044ac <MX_TIM3_Init+0x108>)
 80043da:	4a35      	ldr	r2, [pc, #212]	@ (80044b0 <MX_TIM3_Init+0x10c>)
 80043dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 80043de:	4b33      	ldr	r3, [pc, #204]	@ (80044ac <MX_TIM3_Init+0x108>)
 80043e0:	4a34      	ldr	r2, [pc, #208]	@ (80044b4 <MX_TIM3_Init+0x110>)
 80043e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043e4:	4b31      	ldr	r3, [pc, #196]	@ (80044ac <MX_TIM3_Init+0x108>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20-1;
 80043ea:	4b30      	ldr	r3, [pc, #192]	@ (80044ac <MX_TIM3_Init+0x108>)
 80043ec:	2213      	movs	r2, #19
 80043ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043f0:	4b2e      	ldr	r3, [pc, #184]	@ (80044ac <MX_TIM3_Init+0x108>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043f6:	4b2d      	ldr	r3, [pc, #180]	@ (80044ac <MX_TIM3_Init+0x108>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80043fc:	4b2b      	ldr	r3, [pc, #172]	@ (80044ac <MX_TIM3_Init+0x108>)
 80043fe:	0018      	movs	r0, r3
 8004400:	f002 fa8e 	bl	8006920 <HAL_TIM_Base_Init>
 8004404:	1e03      	subs	r3, r0, #0
 8004406:	d001      	beq.n	800440c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004408:	f7fe fd6a 	bl	8002ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800440c:	2128      	movs	r1, #40	@ 0x28
 800440e:	187b      	adds	r3, r7, r1
 8004410:	2280      	movs	r2, #128	@ 0x80
 8004412:	0152      	lsls	r2, r2, #5
 8004414:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004416:	187a      	adds	r2, r7, r1
 8004418:	4b24      	ldr	r3, [pc, #144]	@ (80044ac <MX_TIM3_Init+0x108>)
 800441a:	0011      	movs	r1, r2
 800441c:	0018      	movs	r0, r3
 800441e:	f003 f84f 	bl	80074c0 <HAL_TIM_ConfigClockSource>
 8004422:	1e03      	subs	r3, r0, #0
 8004424:	d001      	beq.n	800442a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8004426:	f7fe fd5b 	bl	8002ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800442a:	4b20      	ldr	r3, [pc, #128]	@ (80044ac <MX_TIM3_Init+0x108>)
 800442c:	0018      	movs	r0, r3
 800442e:	f002 fcb5 	bl	8006d9c <HAL_TIM_PWM_Init>
 8004432:	1e03      	subs	r3, r0, #0
 8004434:	d001      	beq.n	800443a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004436:	f7fe fd53 	bl	8002ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800443a:	2120      	movs	r1, #32
 800443c:	187b      	adds	r3, r7, r1
 800443e:	2270      	movs	r2, #112	@ 0x70
 8004440:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004442:	187b      	adds	r3, r7, r1
 8004444:	2200      	movs	r2, #0
 8004446:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004448:	187a      	adds	r2, r7, r1
 800444a:	4b18      	ldr	r3, [pc, #96]	@ (80044ac <MX_TIM3_Init+0x108>)
 800444c:	0011      	movs	r1, r2
 800444e:	0018      	movs	r0, r3
 8004450:	f003 fdd6 	bl	8008000 <HAL_TIMEx_MasterConfigSynchronization>
 8004454:	1e03      	subs	r3, r0, #0
 8004456:	d001      	beq.n	800445c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8004458:	f7fe fd42 	bl	8002ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800445c:	1d3b      	adds	r3, r7, #4
 800445e:	2260      	movs	r2, #96	@ 0x60
 8004460:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004462:	1d3b      	adds	r3, r7, #4
 8004464:	2200      	movs	r2, #0
 8004466:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004468:	1d3b      	adds	r3, r7, #4
 800446a:	2200      	movs	r2, #0
 800446c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800446e:	1d3b      	adds	r3, r7, #4
 8004470:	2200      	movs	r2, #0
 8004472:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004474:	1d39      	adds	r1, r7, #4
 8004476:	4b0d      	ldr	r3, [pc, #52]	@ (80044ac <MX_TIM3_Init+0x108>)
 8004478:	2200      	movs	r2, #0
 800447a:	0018      	movs	r0, r3
 800447c:	f002 ff5a 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8004480:	1e03      	subs	r3, r0, #0
 8004482:	d001      	beq.n	8004488 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8004484:	f7fe fd2c 	bl	8002ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004488:	1d39      	adds	r1, r7, #4
 800448a:	4b08      	ldr	r3, [pc, #32]	@ (80044ac <MX_TIM3_Init+0x108>)
 800448c:	2204      	movs	r2, #4
 800448e:	0018      	movs	r0, r3
 8004490:	f002 ff50 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8004494:	1e03      	subs	r3, r0, #0
 8004496:	d001      	beq.n	800449c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8004498:	f7fe fd22 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800449c:	4b03      	ldr	r3, [pc, #12]	@ (80044ac <MX_TIM3_Init+0x108>)
 800449e:	0018      	movs	r0, r3
 80044a0:	f000 fa20 	bl	80048e4 <HAL_TIM_MspPostInit>

}
 80044a4:	46c0      	nop			@ (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b00e      	add	sp, #56	@ 0x38
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000360 	.word	0x20000360
 80044b0:	40000400 	.word	0x40000400
 80044b4:	0000bb7f 	.word	0x0000bb7f

080044b8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80044bc:	4b0c      	ldr	r3, [pc, #48]	@ (80044f0 <MX_TIM6_Init+0x38>)
 80044be:	4a0d      	ldr	r2, [pc, #52]	@ (80044f4 <MX_TIM6_Init+0x3c>)
 80044c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000-1;
 80044c2:	4b0b      	ldr	r3, [pc, #44]	@ (80044f0 <MX_TIM6_Init+0x38>)
 80044c4:	4a0c      	ldr	r2, [pc, #48]	@ (80044f8 <MX_TIM6_Init+0x40>)
 80044c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c8:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <MX_TIM6_Init+0x38>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 80044ce:	4b08      	ldr	r3, [pc, #32]	@ (80044f0 <MX_TIM6_Init+0x38>)
 80044d0:	2214      	movs	r2, #20
 80044d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044d4:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <MX_TIM6_Init+0x38>)
 80044d6:	2280      	movs	r2, #128	@ 0x80
 80044d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80044da:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <MX_TIM6_Init+0x38>)
 80044dc:	0018      	movs	r0, r3
 80044de:	f002 fa1f 	bl	8006920 <HAL_TIM_Base_Init>
 80044e2:	1e03      	subs	r3, r0, #0
 80044e4:	d001      	beq.n	80044ea <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 80044e6:	f7fe fcfb 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80044ea:	46c0      	nop			@ (mov r8, r8)
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	200003a8 	.word	0x200003a8
 80044f4:	40001000 	.word	0x40001000
 80044f8:	0000bb7f 	.word	0x0000bb7f

080044fc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004502:	1d3b      	adds	r3, r7, #4
 8004504:	0018      	movs	r0, r3
 8004506:	231c      	movs	r3, #28
 8004508:	001a      	movs	r2, r3
 800450a:	2100      	movs	r1, #0
 800450c:	f007 f928 	bl	800b760 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004510:	4b1d      	ldr	r3, [pc, #116]	@ (8004588 <MX_TIM14_Init+0x8c>)
 8004512:	4a1e      	ldr	r2, [pc, #120]	@ (800458c <MX_TIM14_Init+0x90>)
 8004514:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4800-1;
 8004516:	4b1c      	ldr	r3, [pc, #112]	@ (8004588 <MX_TIM14_Init+0x8c>)
 8004518:	4a1d      	ldr	r2, [pc, #116]	@ (8004590 <MX_TIM14_Init+0x94>)
 800451a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800451c:	4b1a      	ldr	r3, [pc, #104]	@ (8004588 <MX_TIM14_Init+0x8c>)
 800451e:	2200      	movs	r2, #0
 8004520:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 8004522:	4b19      	ldr	r3, [pc, #100]	@ (8004588 <MX_TIM14_Init+0x8c>)
 8004524:	2263      	movs	r2, #99	@ 0x63
 8004526:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004528:	4b17      	ldr	r3, [pc, #92]	@ (8004588 <MX_TIM14_Init+0x8c>)
 800452a:	2200      	movs	r2, #0
 800452c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800452e:	4b16      	ldr	r3, [pc, #88]	@ (8004588 <MX_TIM14_Init+0x8c>)
 8004530:	2280      	movs	r2, #128	@ 0x80
 8004532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004534:	4b14      	ldr	r3, [pc, #80]	@ (8004588 <MX_TIM14_Init+0x8c>)
 8004536:	0018      	movs	r0, r3
 8004538:	f002 f9f2 	bl	8006920 <HAL_TIM_Base_Init>
 800453c:	1e03      	subs	r3, r0, #0
 800453e:	d001      	beq.n	8004544 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8004540:	f7fe fcce 	bl	8002ee0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8004544:	4b10      	ldr	r3, [pc, #64]	@ (8004588 <MX_TIM14_Init+0x8c>)
 8004546:	0018      	movs	r0, r3
 8004548:	f002 fb1e 	bl	8006b88 <HAL_TIM_OC_Init>
 800454c:	1e03      	subs	r3, r0, #0
 800454e:	d001      	beq.n	8004554 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8004550:	f7fe fcc6 	bl	8002ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800455a:	1d3b      	adds	r3, r7, #4
 800455c:	2200      	movs	r2, #0
 800455e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004560:	1d3b      	adds	r3, r7, #4
 8004562:	2200      	movs	r2, #0
 8004564:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004566:	1d3b      	adds	r3, r7, #4
 8004568:	2200      	movs	r2, #0
 800456a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800456c:	1d39      	adds	r1, r7, #4
 800456e:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <MX_TIM14_Init+0x8c>)
 8004570:	2200      	movs	r2, #0
 8004572:	0018      	movs	r0, r3
 8004574:	f002 fe86 	bl	8007284 <HAL_TIM_OC_ConfigChannel>
 8004578:	1e03      	subs	r3, r0, #0
 800457a:	d001      	beq.n	8004580 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800457c:	f7fe fcb0 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004580:	46c0      	nop			@ (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	b008      	add	sp, #32
 8004586:	bd80      	pop	{r7, pc}
 8004588:	200003f0 	.word	0x200003f0
 800458c:	40002000 	.word	0x40002000
 8004590:	000012bf 	.word	0x000012bf

08004594 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08c      	sub	sp, #48	@ 0x30
 8004598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800459a:	2320      	movs	r3, #32
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	0018      	movs	r0, r3
 80045a0:	2310      	movs	r3, #16
 80045a2:	001a      	movs	r2, r3
 80045a4:	2100      	movs	r1, #0
 80045a6:	f007 f8db 	bl	800b760 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80045aa:	230c      	movs	r3, #12
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	0018      	movs	r0, r3
 80045b0:	2314      	movs	r3, #20
 80045b2:	001a      	movs	r2, r3
 80045b4:	2100      	movs	r1, #0
 80045b6:	f007 f8d3 	bl	800b760 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	0018      	movs	r0, r3
 80045be:	2308      	movs	r3, #8
 80045c0:	001a      	movs	r2, r3
 80045c2:	2100      	movs	r1, #0
 80045c4:	f007 f8cc 	bl	800b760 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80045c8:	4b28      	ldr	r3, [pc, #160]	@ (800466c <MX_TIM15_Init+0xd8>)
 80045ca:	4a29      	ldr	r2, [pc, #164]	@ (8004670 <MX_TIM15_Init+0xdc>)
 80045cc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48-1;
 80045ce:	4b27      	ldr	r3, [pc, #156]	@ (800466c <MX_TIM15_Init+0xd8>)
 80045d0:	222f      	movs	r2, #47	@ 0x2f
 80045d2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045d4:	4b25      	ldr	r3, [pc, #148]	@ (800466c <MX_TIM15_Init+0xd8>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535-1;
 80045da:	4b24      	ldr	r3, [pc, #144]	@ (800466c <MX_TIM15_Init+0xd8>)
 80045dc:	4a25      	ldr	r2, [pc, #148]	@ (8004674 <MX_TIM15_Init+0xe0>)
 80045de:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045e0:	4b22      	ldr	r3, [pc, #136]	@ (800466c <MX_TIM15_Init+0xd8>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80045e6:	4b21      	ldr	r3, [pc, #132]	@ (800466c <MX_TIM15_Init+0xd8>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045ec:	4b1f      	ldr	r3, [pc, #124]	@ (800466c <MX_TIM15_Init+0xd8>)
 80045ee:	2280      	movs	r2, #128	@ 0x80
 80045f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80045f2:	4b1e      	ldr	r3, [pc, #120]	@ (800466c <MX_TIM15_Init+0xd8>)
 80045f4:	0018      	movs	r0, r3
 80045f6:	f002 f993 	bl	8006920 <HAL_TIM_Base_Init>
 80045fa:	1e03      	subs	r3, r0, #0
 80045fc:	d001      	beq.n	8004602 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80045fe:	f7fe fc6f 	bl	8002ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004602:	2120      	movs	r1, #32
 8004604:	187b      	adds	r3, r7, r1
 8004606:	2280      	movs	r2, #128	@ 0x80
 8004608:	0152      	lsls	r2, r2, #5
 800460a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800460c:	187a      	adds	r2, r7, r1
 800460e:	4b17      	ldr	r3, [pc, #92]	@ (800466c <MX_TIM15_Init+0xd8>)
 8004610:	0011      	movs	r1, r2
 8004612:	0018      	movs	r0, r3
 8004614:	f002 ff54 	bl	80074c0 <HAL_TIM_ConfigClockSource>
 8004618:	1e03      	subs	r3, r0, #0
 800461a:	d001      	beq.n	8004620 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800461c:	f7fe fc60 	bl	8002ee0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8004620:	210c      	movs	r1, #12
 8004622:	187b      	adds	r3, r7, r1
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004628:	187b      	adds	r3, r7, r1
 800462a:	2200      	movs	r2, #0
 800462c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 800462e:	187a      	adds	r2, r7, r1
 8004630:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <MX_TIM15_Init+0xd8>)
 8004632:	0011      	movs	r1, r2
 8004634:	0018      	movs	r0, r3
 8004636:	f003 f817 	bl	8007668 <HAL_TIM_SlaveConfigSynchro>
 800463a:	1e03      	subs	r3, r0, #0
 800463c:	d001      	beq.n	8004642 <MX_TIM15_Init+0xae>
  {
    Error_Handler();
 800463e:	f7fe fc4f 	bl	8002ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004642:	1d3b      	adds	r3, r7, #4
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	2200      	movs	r2, #0
 800464c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800464e:	1d3a      	adds	r2, r7, #4
 8004650:	4b06      	ldr	r3, [pc, #24]	@ (800466c <MX_TIM15_Init+0xd8>)
 8004652:	0011      	movs	r1, r2
 8004654:	0018      	movs	r0, r3
 8004656:	f003 fcd3 	bl	8008000 <HAL_TIMEx_MasterConfigSynchronization>
 800465a:	1e03      	subs	r3, r0, #0
 800465c:	d001      	beq.n	8004662 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800465e:	f7fe fc3f 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	b00c      	add	sp, #48	@ 0x30
 8004668:	bd80      	pop	{r7, pc}
 800466a:	46c0      	nop			@ (mov r8, r8)
 800466c:	20000438 	.word	0x20000438
 8004670:	40014000 	.word	0x40014000
 8004674:	0000fffe 	.word	0x0000fffe

08004678 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800467c:	4b0f      	ldr	r3, [pc, #60]	@ (80046bc <MX_TIM16_Init+0x44>)
 800467e:	4a10      	ldr	r2, [pc, #64]	@ (80046c0 <MX_TIM16_Init+0x48>)
 8004680:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48-1;
 8004682:	4b0e      	ldr	r3, [pc, #56]	@ (80046bc <MX_TIM16_Init+0x44>)
 8004684:	222f      	movs	r2, #47	@ 0x2f
 8004686:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004688:	4b0c      	ldr	r3, [pc, #48]	@ (80046bc <MX_TIM16_Init+0x44>)
 800468a:	2200      	movs	r2, #0
 800468c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535-1;
 800468e:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <MX_TIM16_Init+0x44>)
 8004690:	4a0c      	ldr	r2, [pc, #48]	@ (80046c4 <MX_TIM16_Init+0x4c>)
 8004692:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004694:	4b09      	ldr	r3, [pc, #36]	@ (80046bc <MX_TIM16_Init+0x44>)
 8004696:	2200      	movs	r2, #0
 8004698:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800469a:	4b08      	ldr	r3, [pc, #32]	@ (80046bc <MX_TIM16_Init+0x44>)
 800469c:	2200      	movs	r2, #0
 800469e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046a0:	4b06      	ldr	r3, [pc, #24]	@ (80046bc <MX_TIM16_Init+0x44>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80046a6:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <MX_TIM16_Init+0x44>)
 80046a8:	0018      	movs	r0, r3
 80046aa:	f002 f939 	bl	8006920 <HAL_TIM_Base_Init>
 80046ae:	1e03      	subs	r3, r0, #0
 80046b0:	d001      	beq.n	80046b6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80046b2:	f7fe fc15 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20000480 	.word	0x20000480
 80046c0:	40014400 	.word	0x40014400
 80046c4:	0000fffe 	.word	0x0000fffe

080046c8 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM17_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b091      	sub	sp, #68	@ 0x44
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d0:	232c      	movs	r3, #44	@ 0x2c
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	0018      	movs	r0, r3
 80046d6:	2314      	movs	r3, #20
 80046d8:	001a      	movs	r2, r3
 80046da:	2100      	movs	r1, #0
 80046dc:	f007 f840 	bl	800b760 <memset>
  if(tim_baseHandle->Instance==TIM1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a76      	ldr	r2, [pc, #472]	@ (80048c0 <HAL_TIM_Base_MspInit+0x1f8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d10e      	bne.n	8004708 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046ea:	4b76      	ldr	r3, [pc, #472]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	4b75      	ldr	r3, [pc, #468]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 80046f0:	2180      	movs	r1, #128	@ 0x80
 80046f2:	0109      	lsls	r1, r1, #4
 80046f4:	430a      	orrs	r2, r1
 80046f6:	619a      	str	r2, [r3, #24]
 80046f8:	4b72      	ldr	r3, [pc, #456]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 80046fa:	699a      	ldr	r2, [r3, #24]
 80046fc:	2380      	movs	r3, #128	@ 0x80
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	4013      	ands	r3, r2
 8004702:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004706:	e0d7      	b.n	80048b8 <HAL_TIM_Base_MspInit+0x1f0>
  else if(tim_baseHandle->Instance==TIM3)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a6e      	ldr	r2, [pc, #440]	@ (80048c8 <HAL_TIM_Base_MspInit+0x200>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d151      	bne.n	80047b6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004712:	4b6c      	ldr	r3, [pc, #432]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	4b6b      	ldr	r3, [pc, #428]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 8004718:	2102      	movs	r1, #2
 800471a:	430a      	orrs	r2, r1
 800471c:	61da      	str	r2, [r3, #28]
 800471e:	4b69      	ldr	r3, [pc, #420]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	2202      	movs	r2, #2
 8004724:	4013      	ands	r3, r2
 8004726:	627b      	str	r3, [r7, #36]	@ 0x24
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800472a:	4b66      	ldr	r3, [pc, #408]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	4b65      	ldr	r3, [pc, #404]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 8004730:	2180      	movs	r1, #128	@ 0x80
 8004732:	0309      	lsls	r1, r1, #12
 8004734:	430a      	orrs	r2, r1
 8004736:	615a      	str	r2, [r3, #20]
 8004738:	4b62      	ldr	r3, [pc, #392]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 800473a:	695a      	ldr	r2, [r3, #20]
 800473c:	2380      	movs	r3, #128	@ 0x80
 800473e:	031b      	lsls	r3, r3, #12
 8004740:	4013      	ands	r3, r2
 8004742:	623b      	str	r3, [r7, #32]
 8004744:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004746:	212c      	movs	r1, #44	@ 0x2c
 8004748:	187b      	adds	r3, r7, r1
 800474a:	2280      	movs	r2, #128	@ 0x80
 800474c:	0052      	lsls	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004750:	000c      	movs	r4, r1
 8004752:	193b      	adds	r3, r7, r4
 8004754:	2202      	movs	r2, #2
 8004756:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004758:	193b      	adds	r3, r7, r4
 800475a:	2200      	movs	r2, #0
 800475c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800475e:	193b      	adds	r3, r7, r4
 8004760:	2200      	movs	r2, #0
 8004762:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8004764:	193b      	adds	r3, r7, r4
 8004766:	2200      	movs	r2, #0
 8004768:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800476a:	193b      	adds	r3, r7, r4
 800476c:	4a57      	ldr	r2, [pc, #348]	@ (80048cc <HAL_TIM_Base_MspInit+0x204>)
 800476e:	0019      	movs	r1, r3
 8004770:	0010      	movs	r0, r2
 8004772:	f001 f9e3 	bl	8005b3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004776:	0021      	movs	r1, r4
 8004778:	187b      	adds	r3, r7, r1
 800477a:	2280      	movs	r2, #128	@ 0x80
 800477c:	0092      	lsls	r2, r2, #2
 800477e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004780:	187b      	adds	r3, r7, r1
 8004782:	2202      	movs	r2, #2
 8004784:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004786:	187b      	adds	r3, r7, r1
 8004788:	2200      	movs	r2, #0
 800478a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478c:	187b      	adds	r3, r7, r1
 800478e:	2200      	movs	r2, #0
 8004790:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004792:	187b      	adds	r3, r7, r1
 8004794:	2200      	movs	r2, #0
 8004796:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004798:	187b      	adds	r3, r7, r1
 800479a:	4a4c      	ldr	r2, [pc, #304]	@ (80048cc <HAL_TIM_Base_MspInit+0x204>)
 800479c:	0019      	movs	r1, r3
 800479e:	0010      	movs	r0, r2
 80047a0:	f001 f9cc 	bl	8005b3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80047a4:	2200      	movs	r2, #0
 80047a6:	2100      	movs	r1, #0
 80047a8:	2010      	movs	r0, #16
 80047aa:	f000 ff7f 	bl	80056ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80047ae:	2010      	movs	r0, #16
 80047b0:	f000 ff91 	bl	80056d6 <HAL_NVIC_EnableIRQ>
}
 80047b4:	e080      	b.n	80048b8 <HAL_TIM_Base_MspInit+0x1f0>
  else if(tim_baseHandle->Instance==TIM6)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a45      	ldr	r2, [pc, #276]	@ (80048d0 <HAL_TIM_Base_MspInit+0x208>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d114      	bne.n	80047ea <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80047c0:	4b40      	ldr	r3, [pc, #256]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	4b3f      	ldr	r3, [pc, #252]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 80047c6:	2110      	movs	r1, #16
 80047c8:	430a      	orrs	r2, r1
 80047ca:	61da      	str	r2, [r3, #28]
 80047cc:	4b3d      	ldr	r3, [pc, #244]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	2210      	movs	r2, #16
 80047d2:	4013      	ands	r3, r2
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 0);
 80047d8:	2200      	movs	r2, #0
 80047da:	2102      	movs	r1, #2
 80047dc:	2011      	movs	r0, #17
 80047de:	f000 ff65 	bl	80056ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80047e2:	2011      	movs	r0, #17
 80047e4:	f000 ff77 	bl	80056d6 <HAL_NVIC_EnableIRQ>
}
 80047e8:	e066      	b.n	80048b8 <HAL_TIM_Base_MspInit+0x1f0>
  else if(tim_baseHandle->Instance==TIM14)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a39      	ldr	r2, [pc, #228]	@ (80048d4 <HAL_TIM_Base_MspInit+0x20c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d116      	bne.n	8004822 <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80047f4:	4b33      	ldr	r3, [pc, #204]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	4b32      	ldr	r3, [pc, #200]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 80047fa:	2180      	movs	r1, #128	@ 0x80
 80047fc:	0049      	lsls	r1, r1, #1
 80047fe:	430a      	orrs	r2, r1
 8004800:	61da      	str	r2, [r3, #28]
 8004802:	4b30      	ldr	r3, [pc, #192]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 8004804:	69da      	ldr	r2, [r3, #28]
 8004806:	2380      	movs	r3, #128	@ 0x80
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	4013      	ands	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8004810:	2200      	movs	r2, #0
 8004812:	2101      	movs	r1, #1
 8004814:	2013      	movs	r0, #19
 8004816:	f000 ff49 	bl	80056ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800481a:	2013      	movs	r0, #19
 800481c:	f000 ff5b 	bl	80056d6 <HAL_NVIC_EnableIRQ>
}
 8004820:	e04a      	b.n	80048b8 <HAL_TIM_Base_MspInit+0x1f0>
  else if(tim_baseHandle->Instance==TIM15)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2c      	ldr	r2, [pc, #176]	@ (80048d8 <HAL_TIM_Base_MspInit+0x210>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d116      	bne.n	800485a <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800482c:	4b25      	ldr	r3, [pc, #148]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	4b24      	ldr	r3, [pc, #144]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 8004832:	2180      	movs	r1, #128	@ 0x80
 8004834:	0249      	lsls	r1, r1, #9
 8004836:	430a      	orrs	r2, r1
 8004838:	619a      	str	r2, [r3, #24]
 800483a:	4b22      	ldr	r3, [pc, #136]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	2380      	movs	r3, #128	@ 0x80
 8004840:	025b      	lsls	r3, r3, #9
 8004842:	4013      	ands	r3, r2
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM15_IRQn, 2, 0);
 8004848:	2200      	movs	r2, #0
 800484a:	2102      	movs	r1, #2
 800484c:	2014      	movs	r0, #20
 800484e:	f000 ff2d 	bl	80056ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004852:	2014      	movs	r0, #20
 8004854:	f000 ff3f 	bl	80056d6 <HAL_NVIC_EnableIRQ>
}
 8004858:	e02e      	b.n	80048b8 <HAL_TIM_Base_MspInit+0x1f0>
  else if(tim_baseHandle->Instance==TIM16)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1f      	ldr	r2, [pc, #124]	@ (80048dc <HAL_TIM_Base_MspInit+0x214>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d116      	bne.n	8004892 <HAL_TIM_Base_MspInit+0x1ca>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004864:	4b17      	ldr	r3, [pc, #92]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 8004866:	699a      	ldr	r2, [r3, #24]
 8004868:	4b16      	ldr	r3, [pc, #88]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 800486a:	2180      	movs	r1, #128	@ 0x80
 800486c:	0289      	lsls	r1, r1, #10
 800486e:	430a      	orrs	r2, r1
 8004870:	619a      	str	r2, [r3, #24]
 8004872:	4b14      	ldr	r3, [pc, #80]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	2380      	movs	r3, #128	@ 0x80
 8004878:	029b      	lsls	r3, r3, #10
 800487a:	4013      	ands	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 2, 0);
 8004880:	2200      	movs	r2, #0
 8004882:	2102      	movs	r1, #2
 8004884:	2015      	movs	r0, #21
 8004886:	f000 ff11 	bl	80056ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800488a:	2015      	movs	r0, #21
 800488c:	f000 ff23 	bl	80056d6 <HAL_NVIC_EnableIRQ>
}
 8004890:	e012      	b.n	80048b8 <HAL_TIM_Base_MspInit+0x1f0>
  else if(tim_baseHandle->Instance==TIM17)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a12      	ldr	r2, [pc, #72]	@ (80048e0 <HAL_TIM_Base_MspInit+0x218>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d10d      	bne.n	80048b8 <HAL_TIM_Base_MspInit+0x1f0>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800489c:	4b09      	ldr	r3, [pc, #36]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 800489e:	699a      	ldr	r2, [r3, #24]
 80048a0:	4b08      	ldr	r3, [pc, #32]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 80048a2:	2180      	movs	r1, #128	@ 0x80
 80048a4:	02c9      	lsls	r1, r1, #11
 80048a6:	430a      	orrs	r2, r1
 80048a8:	619a      	str	r2, [r3, #24]
 80048aa:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <HAL_TIM_Base_MspInit+0x1fc>)
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	2380      	movs	r3, #128	@ 0x80
 80048b0:	02db      	lsls	r3, r3, #11
 80048b2:	4013      	ands	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	68fb      	ldr	r3, [r7, #12]
}
 80048b8:	46c0      	nop			@ (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b011      	add	sp, #68	@ 0x44
 80048be:	bd90      	pop	{r4, r7, pc}
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	48000800 	.word	0x48000800
 80048d0:	40001000 	.word	0x40001000
 80048d4:	40002000 	.word	0x40002000
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40014400 	.word	0x40014400
 80048e0:	40014800 	.word	0x40014800

080048e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b08b      	sub	sp, #44	@ 0x2c
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ec:	2414      	movs	r4, #20
 80048ee:	193b      	adds	r3, r7, r4
 80048f0:	0018      	movs	r0, r3
 80048f2:	2314      	movs	r3, #20
 80048f4:	001a      	movs	r2, r3
 80048f6:	2100      	movs	r1, #0
 80048f8:	f006 ff32 	bl	800b760 <memset>
  if(timHandle->Instance==TIM1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a3d      	ldr	r2, [pc, #244]	@ (80049f8 <HAL_TIM_MspPostInit+0x114>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d14a      	bne.n	800499c <HAL_TIM_MspPostInit+0xb8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004906:	4b3d      	ldr	r3, [pc, #244]	@ (80049fc <HAL_TIM_MspPostInit+0x118>)
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	4b3c      	ldr	r3, [pc, #240]	@ (80049fc <HAL_TIM_MspPostInit+0x118>)
 800490c:	2180      	movs	r1, #128	@ 0x80
 800490e:	02c9      	lsls	r1, r1, #11
 8004910:	430a      	orrs	r2, r1
 8004912:	615a      	str	r2, [r3, #20]
 8004914:	4b39      	ldr	r3, [pc, #228]	@ (80049fc <HAL_TIM_MspPostInit+0x118>)
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	2380      	movs	r3, #128	@ 0x80
 800491a:	02db      	lsls	r3, r3, #11
 800491c:	4013      	ands	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004922:	4b36      	ldr	r3, [pc, #216]	@ (80049fc <HAL_TIM_MspPostInit+0x118>)
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	4b35      	ldr	r3, [pc, #212]	@ (80049fc <HAL_TIM_MspPostInit+0x118>)
 8004928:	2180      	movs	r1, #128	@ 0x80
 800492a:	0289      	lsls	r1, r1, #10
 800492c:	430a      	orrs	r2, r1
 800492e:	615a      	str	r2, [r3, #20]
 8004930:	4b32      	ldr	r3, [pc, #200]	@ (80049fc <HAL_TIM_MspPostInit+0x118>)
 8004932:	695a      	ldr	r2, [r3, #20]
 8004934:	2380      	movs	r3, #128	@ 0x80
 8004936:	029b      	lsls	r3, r3, #10
 8004938:	4013      	ands	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800493e:	193b      	adds	r3, r7, r4
 8004940:	22e0      	movs	r2, #224	@ 0xe0
 8004942:	0212      	lsls	r2, r2, #8
 8004944:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004946:	193b      	adds	r3, r7, r4
 8004948:	2202      	movs	r2, #2
 800494a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494c:	193b      	adds	r3, r7, r4
 800494e:	2200      	movs	r2, #0
 8004950:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004952:	193b      	adds	r3, r7, r4
 8004954:	2200      	movs	r2, #0
 8004956:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004958:	193b      	adds	r3, r7, r4
 800495a:	2202      	movs	r2, #2
 800495c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800495e:	193b      	adds	r3, r7, r4
 8004960:	4a27      	ldr	r2, [pc, #156]	@ (8004a00 <HAL_TIM_MspPostInit+0x11c>)
 8004962:	0019      	movs	r1, r3
 8004964:	0010      	movs	r0, r2
 8004966:	f001 f8e9 	bl	8005b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800496a:	0021      	movs	r1, r4
 800496c:	187b      	adds	r3, r7, r1
 800496e:	22e0      	movs	r2, #224	@ 0xe0
 8004970:	00d2      	lsls	r2, r2, #3
 8004972:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004974:	187b      	adds	r3, r7, r1
 8004976:	2202      	movs	r2, #2
 8004978:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497a:	187b      	adds	r3, r7, r1
 800497c:	2200      	movs	r2, #0
 800497e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004980:	187b      	adds	r3, r7, r1
 8004982:	2200      	movs	r2, #0
 8004984:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004986:	187b      	adds	r3, r7, r1
 8004988:	2202      	movs	r2, #2
 800498a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800498c:	187a      	adds	r2, r7, r1
 800498e:	2390      	movs	r3, #144	@ 0x90
 8004990:	05db      	lsls	r3, r3, #23
 8004992:	0011      	movs	r1, r2
 8004994:	0018      	movs	r0, r3
 8004996:	f001 f8d1 	bl	8005b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800499a:	e028      	b.n	80049ee <HAL_TIM_MspPostInit+0x10a>
  else if(timHandle->Instance==TIM3)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <HAL_TIM_MspPostInit+0x120>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d123      	bne.n	80049ee <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049a6:	4b15      	ldr	r3, [pc, #84]	@ (80049fc <HAL_TIM_MspPostInit+0x118>)
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	4b14      	ldr	r3, [pc, #80]	@ (80049fc <HAL_TIM_MspPostInit+0x118>)
 80049ac:	2180      	movs	r1, #128	@ 0x80
 80049ae:	0309      	lsls	r1, r1, #12
 80049b0:	430a      	orrs	r2, r1
 80049b2:	615a      	str	r2, [r3, #20]
 80049b4:	4b11      	ldr	r3, [pc, #68]	@ (80049fc <HAL_TIM_MspPostInit+0x118>)
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	2380      	movs	r3, #128	@ 0x80
 80049ba:	031b      	lsls	r3, r3, #12
 80049bc:	4013      	ands	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049c2:	2114      	movs	r1, #20
 80049c4:	187b      	adds	r3, r7, r1
 80049c6:	22c0      	movs	r2, #192	@ 0xc0
 80049c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ca:	187b      	adds	r3, r7, r1
 80049cc:	2202      	movs	r2, #2
 80049ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d0:	187b      	adds	r3, r7, r1
 80049d2:	2200      	movs	r2, #0
 80049d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d6:	187b      	adds	r3, r7, r1
 80049d8:	2200      	movs	r2, #0
 80049da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80049dc:	187b      	adds	r3, r7, r1
 80049de:	2200      	movs	r2, #0
 80049e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049e2:	187b      	adds	r3, r7, r1
 80049e4:	4a08      	ldr	r2, [pc, #32]	@ (8004a08 <HAL_TIM_MspPostInit+0x124>)
 80049e6:	0019      	movs	r1, r3
 80049e8:	0010      	movs	r0, r2
 80049ea:	f001 f8a7 	bl	8005b3c <HAL_GPIO_Init>
}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b00b      	add	sp, #44	@ 0x2c
 80049f4:	bd90      	pop	{r4, r7, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40021000 	.word	0x40021000
 8004a00:	48000400 	.word	0x48000400
 8004a04:	40000400 	.word	0x40000400
 8004a08:	48000800 	.word	0x48000800

08004a0c <delay_us>:

/* USER CODE BEGIN 1 */


void delay_us(uint16_t us)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	0002      	movs	r2, r0
 8004a14:	1dbb      	adds	r3, r7, #6
 8004a16:	801a      	strh	r2, [r3, #0]
	us = 0xffff - us-10;
 8004a18:	1dbb      	adds	r3, r7, #6
 8004a1a:	1dba      	adds	r2, r7, #6
 8004a1c:	8812      	ldrh	r2, [r2, #0]
 8004a1e:	210b      	movs	r1, #11
 8004a20:	4249      	negs	r1, r1
 8004a22:	1a8a      	subs	r2, r1, r2
 8004a24:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim15, us);//the auto reload is set to 65535
 8004a26:	4b0e      	ldr	r3, [pc, #56]	@ (8004a60 <delay_us+0x54>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	1dba      	adds	r2, r7, #6
 8004a2c:	8812      	ldrh	r2, [r2, #0]
 8004a2e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim15);
 8004a30:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <delay_us+0x54>)
 8004a32:	0018      	movs	r0, r3
 8004a34:	f001 ffc4 	bl	80069c0 <HAL_TIM_Base_Start>
	while(us<0xffff-10)
 8004a38:	e004      	b.n	8004a44 <delay_us+0x38>
	{
		us = __HAL_TIM_GET_COUNTER(&htim15);
 8004a3a:	4b09      	ldr	r3, [pc, #36]	@ (8004a60 <delay_us+0x54>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a40:	1dbb      	adds	r3, r7, #6
 8004a42:	801a      	strh	r2, [r3, #0]
	while(us<0xffff-10)
 8004a44:	1dbb      	adds	r3, r7, #6
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	4a06      	ldr	r2, [pc, #24]	@ (8004a64 <delay_us+0x58>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d9f5      	bls.n	8004a3a <delay_us+0x2e>
	}
	HAL_TIM_Base_Stop(&htim15);
 8004a4e:	4b04      	ldr	r3, [pc, #16]	@ (8004a60 <delay_us+0x54>)
 8004a50:	0018      	movs	r0, r3
 8004a52:	f001 fff9 	bl	8006a48 <HAL_TIM_Base_Stop>
}
 8004a56:	46c0      	nop			@ (mov r8, r8)
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	20000438 	.word	0x20000438
 8004a64:	0000fff4 	.word	0x0000fff4

08004a68 <delay_ms>:

void delay_ms(uint32_t delay)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	uint32_t tick_start;
	tick_start = HAL_GetTick();
 8004a70:	f000 f996 	bl	8004da0 <HAL_GetTick>
 8004a74:	0003      	movs	r3, r0
 8004a76:	60fb      	str	r3, [r7, #12]
	while((HAL_GetTick()-tick_start)<delay)
 8004a78:	e000      	b.n	8004a7c <delay_ms+0x14>
		__NOP();
 8004a7a:	46c0      	nop			@ (mov r8, r8)
	while((HAL_GetTick()-tick_start)<delay)
 8004a7c:	f000 f990 	bl	8004da0 <HAL_GetTick>
 8004a80:	0002      	movs	r2, r0
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d8f6      	bhi.n	8004a7a <delay_ms+0x12>
}
 8004a8c:	46c0      	nop			@ (mov r8, r8)
 8004a8e:	46c0      	nop			@ (mov r8, r8)
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b004      	add	sp, #16
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a9c:	4b16      	ldr	r3, [pc, #88]	@ (8004af8 <MX_USART1_UART_Init+0x60>)
 8004a9e:	4a17      	ldr	r2, [pc, #92]	@ (8004afc <MX_USART1_UART_Init+0x64>)
 8004aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004aa2:	4b15      	ldr	r3, [pc, #84]	@ (8004af8 <MX_USART1_UART_Init+0x60>)
 8004aa4:	22e1      	movs	r2, #225	@ 0xe1
 8004aa6:	0252      	lsls	r2, r2, #9
 8004aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004aaa:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <MX_USART1_UART_Init+0x60>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004ab0:	4b11      	ldr	r3, [pc, #68]	@ (8004af8 <MX_USART1_UART_Init+0x60>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004ab6:	4b10      	ldr	r3, [pc, #64]	@ (8004af8 <MX_USART1_UART_Init+0x60>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004abc:	4b0e      	ldr	r3, [pc, #56]	@ (8004af8 <MX_USART1_UART_Init+0x60>)
 8004abe:	220c      	movs	r2, #12
 8004ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8004af8 <MX_USART1_UART_Init+0x60>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8004af8 <MX_USART1_UART_Init+0x60>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ace:	4b0a      	ldr	r3, [pc, #40]	@ (8004af8 <MX_USART1_UART_Init+0x60>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004ad4:	4b08      	ldr	r3, [pc, #32]	@ (8004af8 <MX_USART1_UART_Init+0x60>)
 8004ad6:	2208      	movs	r2, #8
 8004ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004ada:	4b07      	ldr	r3, [pc, #28]	@ (8004af8 <MX_USART1_UART_Init+0x60>)
 8004adc:	2280      	movs	r2, #128	@ 0x80
 8004ade:	0212      	lsls	r2, r2, #8
 8004ae0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004ae2:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <MX_USART1_UART_Init+0x60>)
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f003 fb75 	bl	80081d4 <HAL_UART_Init>
 8004aea:	1e03      	subs	r3, r0, #0
 8004aec:	d001      	beq.n	8004af2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8004aee:	f7fe f9f7 	bl	8002ee0 <Error_Handler>
  {
    Error_Handler();
  }*/
  /* USER CODE END USART1_Init 2 */

}
 8004af2:	46c0      	nop			@ (mov r8, r8)
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	200006cc 	.word	0x200006cc
 8004afc:	40013800 	.word	0x40013800

08004b00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b08b      	sub	sp, #44	@ 0x2c
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b08:	2414      	movs	r4, #20
 8004b0a:	193b      	adds	r3, r7, r4
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	2314      	movs	r3, #20
 8004b10:	001a      	movs	r2, r3
 8004b12:	2100      	movs	r1, #0
 8004b14:	f006 fe24 	bl	800b760 <memset>
  if(uartHandle->Instance==USART1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a33      	ldr	r2, [pc, #204]	@ (8004bec <HAL_UART_MspInit+0xec>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d15f      	bne.n	8004be2 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b22:	4b33      	ldr	r3, [pc, #204]	@ (8004bf0 <HAL_UART_MspInit+0xf0>)
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	4b32      	ldr	r3, [pc, #200]	@ (8004bf0 <HAL_UART_MspInit+0xf0>)
 8004b28:	2180      	movs	r1, #128	@ 0x80
 8004b2a:	01c9      	lsls	r1, r1, #7
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	619a      	str	r2, [r3, #24]
 8004b30:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf0 <HAL_UART_MspInit+0xf0>)
 8004b32:	699a      	ldr	r2, [r3, #24]
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	01db      	lsls	r3, r3, #7
 8004b38:	4013      	ands	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8004bf0 <HAL_UART_MspInit+0xf0>)
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf0 <HAL_UART_MspInit+0xf0>)
 8004b44:	2180      	movs	r1, #128	@ 0x80
 8004b46:	02c9      	lsls	r1, r1, #11
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	615a      	str	r2, [r3, #20]
 8004b4c:	4b28      	ldr	r3, [pc, #160]	@ (8004bf0 <HAL_UART_MspInit+0xf0>)
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	2380      	movs	r3, #128	@ 0x80
 8004b52:	02db      	lsls	r3, r3, #11
 8004b54:	4013      	ands	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b5a:	0021      	movs	r1, r4
 8004b5c:	187b      	adds	r3, r7, r1
 8004b5e:	22c0      	movs	r2, #192	@ 0xc0
 8004b60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b62:	187b      	adds	r3, r7, r1
 8004b64:	2202      	movs	r2, #2
 8004b66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b68:	187b      	adds	r3, r7, r1
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b6e:	187b      	adds	r3, r7, r1
 8004b70:	2203      	movs	r2, #3
 8004b72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004b74:	187b      	adds	r3, r7, r1
 8004b76:	2200      	movs	r2, #0
 8004b78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b7a:	187b      	adds	r3, r7, r1
 8004b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf4 <HAL_UART_MspInit+0xf4>)
 8004b7e:	0019      	movs	r1, r3
 8004b80:	0010      	movs	r0, r2
 8004b82:	f000 ffdb 	bl	8005b3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8004b86:	4b1c      	ldr	r3, [pc, #112]	@ (8004bf8 <HAL_UART_MspInit+0xf8>)
 8004b88:	4a1c      	ldr	r2, [pc, #112]	@ (8004bfc <HAL_UART_MspInit+0xfc>)
 8004b8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf8 <HAL_UART_MspInit+0xf8>)
 8004b8e:	2210      	movs	r2, #16
 8004b90:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b92:	4b19      	ldr	r3, [pc, #100]	@ (8004bf8 <HAL_UART_MspInit+0xf8>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b98:	4b17      	ldr	r3, [pc, #92]	@ (8004bf8 <HAL_UART_MspInit+0xf8>)
 8004b9a:	2280      	movs	r2, #128	@ 0x80
 8004b9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b9e:	4b16      	ldr	r3, [pc, #88]	@ (8004bf8 <HAL_UART_MspInit+0xf8>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ba4:	4b14      	ldr	r3, [pc, #80]	@ (8004bf8 <HAL_UART_MspInit+0xf8>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004baa:	4b13      	ldr	r3, [pc, #76]	@ (8004bf8 <HAL_UART_MspInit+0xf8>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bb0:	4b11      	ldr	r3, [pc, #68]	@ (8004bf8 <HAL_UART_MspInit+0xf8>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004bb6:	4b10      	ldr	r3, [pc, #64]	@ (8004bf8 <HAL_UART_MspInit+0xf8>)
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f000 fda9 	bl	8005710 <HAL_DMA_Init>
 8004bbe:	1e03      	subs	r3, r0, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004bc2:	f7fe f98d 	bl	8002ee0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf8 <HAL_UART_MspInit+0xf8>)
 8004bca:	671a      	str	r2, [r3, #112]	@ 0x70
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf8 <HAL_UART_MspInit+0xf8>)
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	201b      	movs	r0, #27
 8004bd8:	f000 fd68 	bl	80056ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004bdc:	201b      	movs	r0, #27
 8004bde:	f000 fd7a 	bl	80056d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b00b      	add	sp, #44	@ 0x2c
 8004be8:	bd90      	pop	{r4, r7, pc}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	40013800 	.word	0x40013800
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	48000400 	.word	0x48000400
 8004bf8:	20000754 	.word	0x20000754
 8004bfc:	4002001c 	.word	0x4002001c

08004c00 <BT_PWM_handle>:
  }
}

/* USER CODE BEGIN 1 */
void BT_PWM_handle(char flag)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	0002      	movs	r2, r0
 8004c08:	1dfb      	adds	r3, r7, #7
 8004c0a:	701a      	strb	r2, [r3, #0]
	static signed char ch1=0;
	if(flag == TURE)
 8004c0c:	1dfb      	adds	r3, r7, #7
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d110      	bne.n	8004c36 <BT_PWM_handle+0x36>
	{
		ch1 = ch1+1>=10? 10:ch1+1;
 8004c14:	4b1e      	ldr	r3, [pc, #120]	@ (8004c90 <BT_PWM_handle+0x90>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	b25b      	sxtb	r3, r3
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	dc07      	bgt.n	8004c2e <BT_PWM_handle+0x2e>
 8004c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8004c90 <BT_PWM_handle+0x90>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	b25b      	sxtb	r3, r3
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	3301      	adds	r3, #1
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	b25a      	sxtb	r2, r3
 8004c2c:	e000      	b.n	8004c30 <BT_PWM_handle+0x30>
 8004c2e:	220a      	movs	r2, #10
 8004c30:	4b17      	ldr	r3, [pc, #92]	@ (8004c90 <BT_PWM_handle+0x90>)
 8004c32:	701a      	strb	r2, [r3, #0]
 8004c34:	e00f      	b.n	8004c56 <BT_PWM_handle+0x56>
	}
	else
	{
		ch1 = ch1-1<=0?0:ch1-1;
 8004c36:	4b16      	ldr	r3, [pc, #88]	@ (8004c90 <BT_PWM_handle+0x90>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	b25b      	sxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	dd07      	ble.n	8004c50 <BT_PWM_handle+0x50>
 8004c40:	4b13      	ldr	r3, [pc, #76]	@ (8004c90 <BT_PWM_handle+0x90>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	b25b      	sxtb	r3, r3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	b25a      	sxtb	r2, r3
 8004c4e:	e000      	b.n	8004c52 <BT_PWM_handle+0x52>
 8004c50:	2200      	movs	r2, #0
 8004c52:	4b0f      	ldr	r3, [pc, #60]	@ (8004c90 <BT_PWM_handle+0x90>)
 8004c54:	701a      	strb	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ch1);
 8004c56:	4b0e      	ldr	r3, [pc, #56]	@ (8004c90 <BT_PWM_handle+0x90>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	569a      	ldrsb	r2, [r3, r2]
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c94 <BT_PWM_handle+0x94>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ch1);
 8004c62:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <BT_PWM_handle+0x90>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	569a      	ldrsb	r2, [r3, r2]
 8004c68:	4b0a      	ldr	r3, [pc, #40]	@ (8004c94 <BT_PWM_handle+0x94>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ch1);
 8004c6e:	4b08      	ldr	r3, [pc, #32]	@ (8004c90 <BT_PWM_handle+0x90>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	569a      	ldrsb	r2, [r3, r2]
 8004c74:	4b07      	ldr	r3, [pc, #28]	@ (8004c94 <BT_PWM_handle+0x94>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ch1);
 8004c7a:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <BT_PWM_handle+0x90>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	569a      	ldrsb	r2, [r3, r2]
 8004c80:	4b04      	ldr	r3, [pc, #16]	@ (8004c94 <BT_PWM_handle+0x94>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004c86:	46c0      	nop			@ (mov r8, r8)
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b002      	add	sp, #8
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	46c0      	nop			@ (mov r8, r8)
 8004c90:	20000798 	.word	0x20000798
 8004c94:	20000360 	.word	0x20000360

08004c98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004c98:	480d      	ldr	r0, [pc, #52]	@ (8004cd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004c9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c9c:	f7ff fa74 	bl	8004188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ca0:	480c      	ldr	r0, [pc, #48]	@ (8004cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004ca2:	490d      	ldr	r1, [pc, #52]	@ (8004cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8004cdc <LoopForever+0xe>)
  movs r3, #0
 8004ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ca8:	e002      	b.n	8004cb0 <LoopCopyDataInit>

08004caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cae:	3304      	adds	r3, #4

08004cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cb4:	d3f9      	bcc.n	8004caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8004ce4 <LoopForever+0x16>)
  movs r3, #0
 8004cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cbc:	e001      	b.n	8004cc2 <LoopFillZerobss>

08004cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cc0:	3204      	adds	r2, #4

08004cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cc4:	d3fb      	bcc.n	8004cbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004cc6:	f006 fdbd 	bl	800b844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004cca:	f7fd ff3f 	bl	8002b4c <main>

08004cce <LoopForever>:

LoopForever:
    b LoopForever
 8004cce:	e7fe      	b.n	8004cce <LoopForever>
  ldr   r0, =_estack
 8004cd0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cd8:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8004cdc:	0800f15c 	.word	0x0800f15c
  ldr r2, =_sbss
 8004ce0:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8004ce4:	200008ec 	.word	0x200008ec

08004ce8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ce8:	e7fe      	b.n	8004ce8 <ADC1_IRQHandler>
	...

08004cec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cf0:	4b07      	ldr	r3, [pc, #28]	@ (8004d10 <HAL_Init+0x24>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <HAL_Init+0x24>)
 8004cf6:	2110      	movs	r1, #16
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004cfc:	2003      	movs	r0, #3
 8004cfe:	f000 f809 	bl	8004d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d02:	f7fe fee9 	bl	8003ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	0018      	movs	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	46c0      	nop			@ (mov r8, r8)
 8004d10:	40022000 	.word	0x40022000

08004d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d14:	b590      	push	{r4, r7, lr}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d1c:	4b14      	ldr	r3, [pc, #80]	@ (8004d70 <HAL_InitTick+0x5c>)
 8004d1e:	681c      	ldr	r4, [r3, #0]
 8004d20:	4b14      	ldr	r3, [pc, #80]	@ (8004d74 <HAL_InitTick+0x60>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	0019      	movs	r1, r3
 8004d26:	23fa      	movs	r3, #250	@ 0xfa
 8004d28:	0098      	lsls	r0, r3, #2
 8004d2a:	f7fb fa13 	bl	8000154 <__udivsi3>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	0019      	movs	r1, r3
 8004d32:	0020      	movs	r0, r4
 8004d34:	f7fb fa0e 	bl	8000154 <__udivsi3>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f000 fcdb 	bl	80056f6 <HAL_SYSTICK_Config>
 8004d40:	1e03      	subs	r3, r0, #0
 8004d42:	d001      	beq.n	8004d48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e00f      	b.n	8004d68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d80b      	bhi.n	8004d66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	2301      	movs	r3, #1
 8004d52:	425b      	negs	r3, r3
 8004d54:	2200      	movs	r2, #0
 8004d56:	0018      	movs	r0, r3
 8004d58:	f000 fca8 	bl	80056ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <HAL_InitTick+0x64>)
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e000      	b.n	8004d68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b003      	add	sp, #12
 8004d6e:	bd90      	pop	{r4, r7, pc}
 8004d70:	20000030 	.word	0x20000030
 8004d74:	20000038 	.word	0x20000038
 8004d78:	20000034 	.word	0x20000034

08004d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d80:	4b05      	ldr	r3, [pc, #20]	@ (8004d98 <HAL_IncTick+0x1c>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	001a      	movs	r2, r3
 8004d86:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <HAL_IncTick+0x20>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	18d2      	adds	r2, r2, r3
 8004d8c:	4b03      	ldr	r3, [pc, #12]	@ (8004d9c <HAL_IncTick+0x20>)
 8004d8e:	601a      	str	r2, [r3, #0]
}
 8004d90:	46c0      	nop			@ (mov r8, r8)
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	20000038 	.word	0x20000038
 8004d9c:	2000079c 	.word	0x2000079c

08004da0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  return uwTick;
 8004da4:	4b02      	ldr	r3, [pc, #8]	@ (8004db0 <HAL_GetTick+0x10>)
 8004da6:	681b      	ldr	r3, [r3, #0]
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	46c0      	nop			@ (mov r8, r8)
 8004db0:	2000079c 	.word	0x2000079c

08004db4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dbc:	230f      	movs	r3, #15
 8004dbe:	18fb      	adds	r3, r7, r3
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e125      	b.n	800501e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2234      	movs	r2, #52	@ 0x34
 8004de4:	2100      	movs	r1, #0
 8004de6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	0018      	movs	r0, r3
 8004dec:	f7fe fbe6 	bl	80035bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	2210      	movs	r2, #16
 8004df6:	4013      	ands	r3, r2
 8004df8:	d000      	beq.n	8004dfc <HAL_ADC_Init+0x48>
 8004dfa:	e103      	b.n	8005004 <HAL_ADC_Init+0x250>
 8004dfc:	230f      	movs	r3, #15
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d000      	beq.n	8004e08 <HAL_ADC_Init+0x54>
 8004e06:	e0fd      	b.n	8005004 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2204      	movs	r2, #4
 8004e10:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8004e12:	d000      	beq.n	8004e16 <HAL_ADC_Init+0x62>
 8004e14:	e0f6      	b.n	8005004 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1a:	4a83      	ldr	r2, [pc, #524]	@ (8005028 <HAL_ADC_Init+0x274>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2202      	movs	r2, #2
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d112      	bne.n	8004e5a <HAL_ADC_Init+0xa6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d009      	beq.n	8004e56 <HAL_ADC_Init+0xa2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	2380      	movs	r3, #128	@ 0x80
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	401a      	ands	r2, r3
 8004e4e:	2380      	movs	r3, #128	@ 0x80
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d101      	bne.n	8004e5a <HAL_ADC_Init+0xa6>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <HAL_ADC_Init+0xa8>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d116      	bne.n	8004e8e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	2218      	movs	r2, #24
 8004e68:	4393      	bics	r3, r2
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	0899      	lsrs	r1, r3, #2
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4964      	ldr	r1, [pc, #400]	@ (800502c <HAL_ADC_Init+0x278>)
 8004e9a:	400a      	ands	r2, r1
 8004e9c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	7e1b      	ldrb	r3, [r3, #24]
 8004ea2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	7e5b      	ldrb	r3, [r3, #25]
 8004ea8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004eaa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	7e9b      	ldrb	r3, [r3, #26]
 8004eb0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004eb2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d002      	beq.n	8004ec2 <HAL_ADC_Init+0x10e>
 8004ebc:	2380      	movs	r3, #128	@ 0x80
 8004ebe:	015b      	lsls	r3, r3, #5
 8004ec0:	e000      	b.n	8004ec4 <HAL_ADC_Init+0x110>
 8004ec2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004ec4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004eca:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d101      	bne.n	8004ed8 <HAL_ADC_Init+0x124>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	e000      	b.n	8004eda <HAL_ADC_Init+0x126>
 8004ed8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004eda:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2124      	movs	r1, #36	@ 0x24
 8004ee0:	5c5b      	ldrb	r3, [r3, r1]
 8004ee2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004ee4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	7edb      	ldrb	r3, [r3, #27]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d115      	bne.n	8004f20 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	7e9b      	ldrb	r3, [r3, #26]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d105      	bne.n	8004f08 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2280      	movs	r2, #128	@ 0x80
 8004f00:	0252      	lsls	r2, r2, #9
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	e00b      	b.n	8004f20 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f18:	2201      	movs	r2, #1
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	23c2      	movs	r3, #194	@ 0xc2
 8004f26:	33ff      	adds	r3, #255	@ 0xff
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d007      	beq.n	8004f3c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004f34:	4313      	orrs	r3, r2
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68d9      	ldr	r1, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f50:	2380      	movs	r3, #128	@ 0x80
 8004f52:	055b      	lsls	r3, r3, #21
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d01b      	beq.n	8004f90 <HAL_ADC_Init+0x1dc>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d017      	beq.n	8004f90 <HAL_ADC_Init+0x1dc>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d013      	beq.n	8004f90 <HAL_ADC_Init+0x1dc>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d00f      	beq.n	8004f90 <HAL_ADC_Init+0x1dc>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d00b      	beq.n	8004f90 <HAL_ADC_Init+0x1dc>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7c:	2b05      	cmp	r3, #5
 8004f7e:	d007      	beq.n	8004f90 <HAL_ADC_Init+0x1dc>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	2b06      	cmp	r3, #6
 8004f86:	d003      	beq.n	8004f90 <HAL_ADC_Init+0x1dc>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8c:	2b07      	cmp	r3, #7
 8004f8e:	d112      	bne.n	8004fb6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2107      	movs	r1, #7
 8004f9c:	438a      	bics	r2, r1
 8004f9e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6959      	ldr	r1, [r3, #20]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	2207      	movs	r2, #7
 8004fac:	401a      	ands	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005030 <HAL_ADC_Init+0x27c>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d10b      	bne.n	8004fde <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	4393      	bics	r3, r2
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004fdc:	e01c      	b.n	8005018 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe2:	2212      	movs	r2, #18
 8004fe4:	4393      	bics	r3, r2
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004ffa:	230f      	movs	r3, #15
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	2201      	movs	r2, #1
 8005000:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005002:	e009      	b.n	8005018 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005008:	2210      	movs	r2, #16
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8005010:	230f      	movs	r3, #15
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005018:	230f      	movs	r3, #15
 800501a:	18fb      	adds	r3, r7, r3
 800501c:	781b      	ldrb	r3, [r3, #0]
}
 800501e:	0018      	movs	r0, r3
 8005020:	46bd      	mov	sp, r7
 8005022:	b004      	add	sp, #16
 8005024:	bd80      	pop	{r7, pc}
 8005026:	46c0      	nop			@ (mov r8, r8)
 8005028:	fffffefd 	.word	0xfffffefd
 800502c:	fffe0219 	.word	0xfffe0219
 8005030:	833fffe7 	.word	0x833fffe7

08005034 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005034:	b590      	push	{r4, r7, lr}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005040:	2317      	movs	r3, #23
 8005042:	18fb      	adds	r3, r7, r3
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2204      	movs	r2, #4
 8005050:	4013      	ands	r3, r2
 8005052:	d15e      	bne.n	8005112 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2234      	movs	r2, #52	@ 0x34
 8005058:	5c9b      	ldrb	r3, [r3, r2]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_ADC_Start_DMA+0x2e>
 800505e:	2302      	movs	r3, #2
 8005060:	e05e      	b.n	8005120 <HAL_ADC_Start_DMA+0xec>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2234      	movs	r2, #52	@ 0x34
 8005066:	2101      	movs	r1, #1
 8005068:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	7e5b      	ldrb	r3, [r3, #25]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d007      	beq.n	8005082 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005072:	2317      	movs	r3, #23
 8005074:	18fc      	adds	r4, r7, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	0018      	movs	r0, r3
 800507a:	f000 f963 	bl	8005344 <ADC_Enable>
 800507e:	0003      	movs	r3, r0
 8005080:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005082:	2317      	movs	r3, #23
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d146      	bne.n	800511a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005090:	4a25      	ldr	r2, [pc, #148]	@ (8005128 <HAL_ADC_Start_DMA+0xf4>)
 8005092:	4013      	ands	r3, r2
 8005094:	2280      	movs	r2, #128	@ 0x80
 8005096:	0052      	lsls	r2, r2, #1
 8005098:	431a      	orrs	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2234      	movs	r2, #52	@ 0x34
 80050a8:	2100      	movs	r1, #0
 80050aa:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b0:	4a1e      	ldr	r2, [pc, #120]	@ (800512c <HAL_ADC_Start_DMA+0xf8>)
 80050b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005130 <HAL_ADC_Start_DMA+0xfc>)
 80050ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005134 <HAL_ADC_Start_DMA+0x100>)
 80050c2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	221c      	movs	r2, #28
 80050ca:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2110      	movs	r1, #16
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2101      	movs	r1, #1
 80050e8:	430a      	orrs	r2, r1
 80050ea:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3340      	adds	r3, #64	@ 0x40
 80050f6:	0019      	movs	r1, r3
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f000 fb50 	bl	80057a0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2104      	movs	r1, #4
 800510c:	430a      	orrs	r2, r1
 800510e:	609a      	str	r2, [r3, #8]
 8005110:	e003      	b.n	800511a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005112:	2317      	movs	r3, #23
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	2202      	movs	r2, #2
 8005118:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800511a:	2317      	movs	r3, #23
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	781b      	ldrb	r3, [r3, #0]
}
 8005120:	0018      	movs	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	b007      	add	sp, #28
 8005126:	bd90      	pop	{r4, r7, pc}
 8005128:	fffff0fe 	.word	0xfffff0fe
 800512c:	0800544d 	.word	0x0800544d
 8005130:	08005501 	.word	0x08005501
 8005134:	0800551f 	.word	0x0800551f

08005138 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005140:	46c0      	nop			@ (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	b002      	add	sp, #8
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005150:	46c0      	nop			@ (mov r8, r8)
 8005152:	46bd      	mov	sp, r7
 8005154:	b002      	add	sp, #8
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005162:	230f      	movs	r3, #15
 8005164:	18fb      	adds	r3, r7, r3
 8005166:	2200      	movs	r2, #0
 8005168:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005172:	2380      	movs	r3, #128	@ 0x80
 8005174:	055b      	lsls	r3, r3, #21
 8005176:	429a      	cmp	r2, r3
 8005178:	d011      	beq.n	800519e <HAL_ADC_ConfigChannel+0x46>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d00d      	beq.n	800519e <HAL_ADC_ConfigChannel+0x46>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005186:	2b02      	cmp	r3, #2
 8005188:	d009      	beq.n	800519e <HAL_ADC_ConfigChannel+0x46>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	2b03      	cmp	r3, #3
 8005190:	d005      	beq.n	800519e <HAL_ADC_ConfigChannel+0x46>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	2b04      	cmp	r3, #4
 8005198:	d001      	beq.n	800519e <HAL_ADC_ConfigChannel+0x46>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2234      	movs	r2, #52	@ 0x34
 80051a2:	5c9b      	ldrb	r3, [r3, r2]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x54>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e0bb      	b.n	8005324 <HAL_ADC_ConfigChannel+0x1cc>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2234      	movs	r2, #52	@ 0x34
 80051b0:	2101      	movs	r1, #1
 80051b2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2204      	movs	r2, #4
 80051bc:	4013      	ands	r3, r2
 80051be:	d000      	beq.n	80051c2 <HAL_ADC_ConfigChannel+0x6a>
 80051c0:	e09f      	b.n	8005302 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	4a59      	ldr	r2, [pc, #356]	@ (800532c <HAL_ADC_ConfigChannel+0x1d4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d100      	bne.n	80051ce <HAL_ADC_ConfigChannel+0x76>
 80051cc:	e077      	b.n	80052be <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2201      	movs	r2, #1
 80051da:	409a      	lsls	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e8:	2380      	movs	r3, #128	@ 0x80
 80051ea:	055b      	lsls	r3, r3, #21
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d037      	beq.n	8005260 <HAL_ADC_ConfigChannel+0x108>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d033      	beq.n	8005260 <HAL_ADC_ConfigChannel+0x108>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d02f      	beq.n	8005260 <HAL_ADC_ConfigChannel+0x108>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	2b03      	cmp	r3, #3
 8005206:	d02b      	beq.n	8005260 <HAL_ADC_ConfigChannel+0x108>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520c:	2b04      	cmp	r3, #4
 800520e:	d027      	beq.n	8005260 <HAL_ADC_ConfigChannel+0x108>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	2b05      	cmp	r3, #5
 8005216:	d023      	beq.n	8005260 <HAL_ADC_ConfigChannel+0x108>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521c:	2b06      	cmp	r3, #6
 800521e:	d01f      	beq.n	8005260 <HAL_ADC_ConfigChannel+0x108>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005224:	2b07      	cmp	r3, #7
 8005226:	d01b      	beq.n	8005260 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	2107      	movs	r1, #7
 8005234:	400b      	ands	r3, r1
 8005236:	429a      	cmp	r2, r3
 8005238:	d012      	beq.n	8005260 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695a      	ldr	r2, [r3, #20]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2107      	movs	r1, #7
 8005246:	438a      	bics	r2, r1
 8005248:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6959      	ldr	r1, [r3, #20]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2207      	movs	r2, #7
 8005256:	401a      	ands	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b10      	cmp	r3, #16
 8005266:	d003      	beq.n	8005270 <HAL_ADC_ConfigChannel+0x118>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b11      	cmp	r3, #17
 800526e:	d152      	bne.n	8005316 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005270:	4b2f      	ldr	r3, [pc, #188]	@ (8005330 <HAL_ADC_ConfigChannel+0x1d8>)
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b10      	cmp	r3, #16
 800527a:	d102      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x12a>
 800527c:	2380      	movs	r3, #128	@ 0x80
 800527e:	041b      	lsls	r3, r3, #16
 8005280:	e001      	b.n	8005286 <HAL_ADC_ConfigChannel+0x12e>
 8005282:	2380      	movs	r3, #128	@ 0x80
 8005284:	03db      	lsls	r3, r3, #15
 8005286:	4a2a      	ldr	r2, [pc, #168]	@ (8005330 <HAL_ADC_ConfigChannel+0x1d8>)
 8005288:	430b      	orrs	r3, r1
 800528a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b10      	cmp	r3, #16
 8005292:	d140      	bne.n	8005316 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005294:	4b27      	ldr	r3, [pc, #156]	@ (8005334 <HAL_ADC_ConfigChannel+0x1dc>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4927      	ldr	r1, [pc, #156]	@ (8005338 <HAL_ADC_ConfigChannel+0x1e0>)
 800529a:	0018      	movs	r0, r3
 800529c:	f7fa ff5a 	bl	8000154 <__udivsi3>
 80052a0:	0003      	movs	r3, r0
 80052a2:	001a      	movs	r2, r3
 80052a4:	0013      	movs	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	189b      	adds	r3, r3, r2
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80052ae:	e002      	b.n	80052b6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f9      	bne.n	80052b0 <HAL_ADC_ConfigChannel+0x158>
 80052bc:	e02b      	b.n	8005316 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2101      	movs	r1, #1
 80052ca:	4099      	lsls	r1, r3
 80052cc:	000b      	movs	r3, r1
 80052ce:	43d9      	mvns	r1, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	400a      	ands	r2, r1
 80052d6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d003      	beq.n	80052e8 <HAL_ADC_ConfigChannel+0x190>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b11      	cmp	r3, #17
 80052e6:	d116      	bne.n	8005316 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80052e8:	4b11      	ldr	r3, [pc, #68]	@ (8005330 <HAL_ADC_ConfigChannel+0x1d8>)
 80052ea:	6819      	ldr	r1, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d101      	bne.n	80052f8 <HAL_ADC_ConfigChannel+0x1a0>
 80052f4:	4a11      	ldr	r2, [pc, #68]	@ (800533c <HAL_ADC_ConfigChannel+0x1e4>)
 80052f6:	e000      	b.n	80052fa <HAL_ADC_ConfigChannel+0x1a2>
 80052f8:	4a11      	ldr	r2, [pc, #68]	@ (8005340 <HAL_ADC_ConfigChannel+0x1e8>)
 80052fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005330 <HAL_ADC_ConfigChannel+0x1d8>)
 80052fc:	400a      	ands	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e009      	b.n	8005316 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005306:	2220      	movs	r2, #32
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 800530e:	230f      	movs	r3, #15
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	2201      	movs	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2234      	movs	r2, #52	@ 0x34
 800531a:	2100      	movs	r1, #0
 800531c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800531e:	230f      	movs	r3, #15
 8005320:	18fb      	adds	r3, r7, r3
 8005322:	781b      	ldrb	r3, [r3, #0]
}
 8005324:	0018      	movs	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	b004      	add	sp, #16
 800532a:	bd80      	pop	{r7, pc}
 800532c:	00001001 	.word	0x00001001
 8005330:	40012708 	.word	0x40012708
 8005334:	20000030 	.word	0x20000030
 8005338:	000f4240 	.word	0x000f4240
 800533c:	ff7fffff 	.word	0xff7fffff
 8005340:	ffbfffff 	.word	0xffbfffff

08005344 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2203      	movs	r2, #3
 800535c:	4013      	ands	r3, r2
 800535e:	2b01      	cmp	r3, #1
 8005360:	d112      	bne.n	8005388 <ADC_Enable+0x44>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2201      	movs	r2, #1
 800536a:	4013      	ands	r3, r2
 800536c:	2b01      	cmp	r3, #1
 800536e:	d009      	beq.n	8005384 <ADC_Enable+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	2380      	movs	r3, #128	@ 0x80
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	401a      	ands	r2, r3
 800537c:	2380      	movs	r3, #128	@ 0x80
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	429a      	cmp	r2, r3
 8005382:	d101      	bne.n	8005388 <ADC_Enable+0x44>
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <ADC_Enable+0x46>
 8005388:	2300      	movs	r3, #0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d152      	bne.n	8005434 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	4a2a      	ldr	r2, [pc, #168]	@ (8005440 <ADC_Enable+0xfc>)
 8005396:	4013      	ands	r3, r2
 8005398:	d00d      	beq.n	80053b6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	2210      	movs	r2, #16
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053aa:	2201      	movs	r2, #1
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e03f      	b.n	8005436 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2101      	movs	r1, #1
 80053c2:	430a      	orrs	r2, r1
 80053c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80053c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005444 <ADC_Enable+0x100>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	491f      	ldr	r1, [pc, #124]	@ (8005448 <ADC_Enable+0x104>)
 80053cc:	0018      	movs	r0, r3
 80053ce:	f7fa fec1 	bl	8000154 <__udivsi3>
 80053d2:	0003      	movs	r3, r0
 80053d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80053d6:	e002      	b.n	80053de <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	3b01      	subs	r3, #1
 80053dc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1f9      	bne.n	80053d8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80053e4:	f7ff fcdc 	bl	8004da0 <HAL_GetTick>
 80053e8:	0003      	movs	r3, r0
 80053ea:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80053ec:	e01b      	b.n	8005426 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053ee:	f7ff fcd7 	bl	8004da0 <HAL_GetTick>
 80053f2:	0002      	movs	r2, r0
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d914      	bls.n	8005426 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2201      	movs	r2, #1
 8005404:	4013      	ands	r3, r2
 8005406:	2b01      	cmp	r3, #1
 8005408:	d00d      	beq.n	8005426 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540e:	2210      	movs	r2, #16
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541a:	2201      	movs	r2, #1
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e007      	b.n	8005436 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2201      	movs	r2, #1
 800542e:	4013      	ands	r3, r2
 8005430:	2b01      	cmp	r3, #1
 8005432:	d1dc      	bne.n	80053ee <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	0018      	movs	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	b004      	add	sp, #16
 800543c:	bd80      	pop	{r7, pc}
 800543e:	46c0      	nop			@ (mov r8, r8)
 8005440:	80000017 	.word	0x80000017
 8005444:	20000030 	.word	0x20000030
 8005448:	000f4240 	.word	0x000f4240

0800544c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005458:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545e:	2250      	movs	r2, #80	@ 0x50
 8005460:	4013      	ands	r3, r2
 8005462:	d140      	bne.n	80054e6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005468:	2280      	movs	r2, #128	@ 0x80
 800546a:	0092      	lsls	r2, r2, #2
 800546c:	431a      	orrs	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	23c0      	movs	r3, #192	@ 0xc0
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	4013      	ands	r3, r2
 800547e:	d12d      	bne.n	80054dc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005484:	2b00      	cmp	r3, #0
 8005486:	d129      	bne.n	80054dc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2208      	movs	r2, #8
 8005490:	4013      	ands	r3, r2
 8005492:	2b08      	cmp	r3, #8
 8005494:	d122      	bne.n	80054dc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2204      	movs	r2, #4
 800549e:	4013      	ands	r3, r2
 80054a0:	d110      	bne.n	80054c4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	210c      	movs	r1, #12
 80054ae:	438a      	bics	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b6:	4a11      	ldr	r2, [pc, #68]	@ (80054fc <ADC_DMAConvCplt+0xb0>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	2201      	movs	r2, #1
 80054bc:	431a      	orrs	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80054c2:	e00b      	b.n	80054dc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c8:	2220      	movs	r2, #32
 80054ca:	431a      	orrs	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d4:	2201      	movs	r2, #1
 80054d6:	431a      	orrs	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	0018      	movs	r0, r3
 80054e0:	f7fd ff68 	bl	80033b4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80054e4:	e005      	b.n	80054f2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	0010      	movs	r0, r2
 80054f0:	4798      	blx	r3
}
 80054f2:	46c0      	nop			@ (mov r8, r8)
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b004      	add	sp, #16
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	46c0      	nop			@ (mov r8, r8)
 80054fc:	fffffefe 	.word	0xfffffefe

08005500 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	0018      	movs	r0, r3
 8005512:	f7ff fe11 	bl	8005138 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005516:	46c0      	nop			@ (mov r8, r8)
 8005518:	46bd      	mov	sp, r7
 800551a:	b004      	add	sp, #16
 800551c:	bd80      	pop	{r7, pc}

0800551e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005530:	2240      	movs	r2, #64	@ 0x40
 8005532:	431a      	orrs	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553c:	2204      	movs	r2, #4
 800553e:	431a      	orrs	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	0018      	movs	r0, r3
 8005548:	f7ff fdfe 	bl	8005148 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800554c:	46c0      	nop			@ (mov r8, r8)
 800554e:	46bd      	mov	sp, r7
 8005550:	b004      	add	sp, #16
 8005552:	bd80      	pop	{r7, pc}

08005554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	0002      	movs	r2, r0
 800555c:	1dfb      	adds	r3, r7, #7
 800555e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005560:	1dfb      	adds	r3, r7, #7
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b7f      	cmp	r3, #127	@ 0x7f
 8005566:	d809      	bhi.n	800557c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005568:	1dfb      	adds	r3, r7, #7
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	001a      	movs	r2, r3
 800556e:	231f      	movs	r3, #31
 8005570:	401a      	ands	r2, r3
 8005572:	4b04      	ldr	r3, [pc, #16]	@ (8005584 <__NVIC_EnableIRQ+0x30>)
 8005574:	2101      	movs	r1, #1
 8005576:	4091      	lsls	r1, r2
 8005578:	000a      	movs	r2, r1
 800557a:	601a      	str	r2, [r3, #0]
  }
}
 800557c:	46c0      	nop			@ (mov r8, r8)
 800557e:	46bd      	mov	sp, r7
 8005580:	b002      	add	sp, #8
 8005582:	bd80      	pop	{r7, pc}
 8005584:	e000e100 	.word	0xe000e100

08005588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	0002      	movs	r2, r0
 8005590:	6039      	str	r1, [r7, #0]
 8005592:	1dfb      	adds	r3, r7, #7
 8005594:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005596:	1dfb      	adds	r3, r7, #7
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b7f      	cmp	r3, #127	@ 0x7f
 800559c:	d828      	bhi.n	80055f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800559e:	4a2f      	ldr	r2, [pc, #188]	@ (800565c <__NVIC_SetPriority+0xd4>)
 80055a0:	1dfb      	adds	r3, r7, #7
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	b25b      	sxtb	r3, r3
 80055a6:	089b      	lsrs	r3, r3, #2
 80055a8:	33c0      	adds	r3, #192	@ 0xc0
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	589b      	ldr	r3, [r3, r2]
 80055ae:	1dfa      	adds	r2, r7, #7
 80055b0:	7812      	ldrb	r2, [r2, #0]
 80055b2:	0011      	movs	r1, r2
 80055b4:	2203      	movs	r2, #3
 80055b6:	400a      	ands	r2, r1
 80055b8:	00d2      	lsls	r2, r2, #3
 80055ba:	21ff      	movs	r1, #255	@ 0xff
 80055bc:	4091      	lsls	r1, r2
 80055be:	000a      	movs	r2, r1
 80055c0:	43d2      	mvns	r2, r2
 80055c2:	401a      	ands	r2, r3
 80055c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	019b      	lsls	r3, r3, #6
 80055ca:	22ff      	movs	r2, #255	@ 0xff
 80055cc:	401a      	ands	r2, r3
 80055ce:	1dfb      	adds	r3, r7, #7
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	0018      	movs	r0, r3
 80055d4:	2303      	movs	r3, #3
 80055d6:	4003      	ands	r3, r0
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055dc:	481f      	ldr	r0, [pc, #124]	@ (800565c <__NVIC_SetPriority+0xd4>)
 80055de:	1dfb      	adds	r3, r7, #7
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	b25b      	sxtb	r3, r3
 80055e4:	089b      	lsrs	r3, r3, #2
 80055e6:	430a      	orrs	r2, r1
 80055e8:	33c0      	adds	r3, #192	@ 0xc0
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80055ee:	e031      	b.n	8005654 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005660 <__NVIC_SetPriority+0xd8>)
 80055f2:	1dfb      	adds	r3, r7, #7
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	0019      	movs	r1, r3
 80055f8:	230f      	movs	r3, #15
 80055fa:	400b      	ands	r3, r1
 80055fc:	3b08      	subs	r3, #8
 80055fe:	089b      	lsrs	r3, r3, #2
 8005600:	3306      	adds	r3, #6
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	18d3      	adds	r3, r2, r3
 8005606:	3304      	adds	r3, #4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	1dfa      	adds	r2, r7, #7
 800560c:	7812      	ldrb	r2, [r2, #0]
 800560e:	0011      	movs	r1, r2
 8005610:	2203      	movs	r2, #3
 8005612:	400a      	ands	r2, r1
 8005614:	00d2      	lsls	r2, r2, #3
 8005616:	21ff      	movs	r1, #255	@ 0xff
 8005618:	4091      	lsls	r1, r2
 800561a:	000a      	movs	r2, r1
 800561c:	43d2      	mvns	r2, r2
 800561e:	401a      	ands	r2, r3
 8005620:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	019b      	lsls	r3, r3, #6
 8005626:	22ff      	movs	r2, #255	@ 0xff
 8005628:	401a      	ands	r2, r3
 800562a:	1dfb      	adds	r3, r7, #7
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	0018      	movs	r0, r3
 8005630:	2303      	movs	r3, #3
 8005632:	4003      	ands	r3, r0
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005638:	4809      	ldr	r0, [pc, #36]	@ (8005660 <__NVIC_SetPriority+0xd8>)
 800563a:	1dfb      	adds	r3, r7, #7
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	001c      	movs	r4, r3
 8005640:	230f      	movs	r3, #15
 8005642:	4023      	ands	r3, r4
 8005644:	3b08      	subs	r3, #8
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	430a      	orrs	r2, r1
 800564a:	3306      	adds	r3, #6
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	18c3      	adds	r3, r0, r3
 8005650:	3304      	adds	r3, #4
 8005652:	601a      	str	r2, [r3, #0]
}
 8005654:	46c0      	nop			@ (mov r8, r8)
 8005656:	46bd      	mov	sp, r7
 8005658:	b003      	add	sp, #12
 800565a:	bd90      	pop	{r4, r7, pc}
 800565c:	e000e100 	.word	0xe000e100
 8005660:	e000ed00 	.word	0xe000ed00

08005664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	1e5a      	subs	r2, r3, #1
 8005670:	2380      	movs	r3, #128	@ 0x80
 8005672:	045b      	lsls	r3, r3, #17
 8005674:	429a      	cmp	r2, r3
 8005676:	d301      	bcc.n	800567c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005678:	2301      	movs	r3, #1
 800567a:	e010      	b.n	800569e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800567c:	4b0a      	ldr	r3, [pc, #40]	@ (80056a8 <SysTick_Config+0x44>)
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	3a01      	subs	r2, #1
 8005682:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005684:	2301      	movs	r3, #1
 8005686:	425b      	negs	r3, r3
 8005688:	2103      	movs	r1, #3
 800568a:	0018      	movs	r0, r3
 800568c:	f7ff ff7c 	bl	8005588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005690:	4b05      	ldr	r3, [pc, #20]	@ (80056a8 <SysTick_Config+0x44>)
 8005692:	2200      	movs	r2, #0
 8005694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005696:	4b04      	ldr	r3, [pc, #16]	@ (80056a8 <SysTick_Config+0x44>)
 8005698:	2207      	movs	r2, #7
 800569a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800569c:	2300      	movs	r3, #0
}
 800569e:	0018      	movs	r0, r3
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b002      	add	sp, #8
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	46c0      	nop			@ (mov r8, r8)
 80056a8:	e000e010 	.word	0xe000e010

080056ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	210f      	movs	r1, #15
 80056b8:	187b      	adds	r3, r7, r1
 80056ba:	1c02      	adds	r2, r0, #0
 80056bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	187b      	adds	r3, r7, r1
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	b25b      	sxtb	r3, r3
 80056c6:	0011      	movs	r1, r2
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7ff ff5d 	bl	8005588 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80056ce:	46c0      	nop			@ (mov r8, r8)
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b004      	add	sp, #16
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	0002      	movs	r2, r0
 80056de:	1dfb      	adds	r3, r7, #7
 80056e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056e2:	1dfb      	adds	r3, r7, #7
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	b25b      	sxtb	r3, r3
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7ff ff33 	bl	8005554 <__NVIC_EnableIRQ>
}
 80056ee:	46c0      	nop			@ (mov r8, r8)
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b002      	add	sp, #8
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	0018      	movs	r0, r3
 8005702:	f7ff ffaf 	bl	8005664 <SysTick_Config>
 8005706:	0003      	movs	r3, r0
}
 8005708:	0018      	movs	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	b002      	add	sp, #8
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e036      	b.n	8005794 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2221      	movs	r2, #33	@ 0x21
 800572a:	2102      	movs	r1, #2
 800572c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a18      	ldr	r2, [pc, #96]	@ (800579c <HAL_DMA_Init+0x8c>)
 800573a:	4013      	ands	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005746:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800575e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	0018      	movs	r0, r3
 8005778:	f000 f9c4 	bl	8005b04 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2221      	movs	r2, #33	@ 0x21
 8005786:	2101      	movs	r1, #1
 8005788:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	2100      	movs	r1, #0
 8005790:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	0018      	movs	r0, r3
 8005796:	46bd      	mov	sp, r7
 8005798:	b004      	add	sp, #16
 800579a:	bd80      	pop	{r7, pc}
 800579c:	ffffc00f 	.word	0xffffc00f

080057a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ae:	2317      	movs	r3, #23
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	2200      	movs	r2, #0
 80057b4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2220      	movs	r2, #32
 80057ba:	5c9b      	ldrb	r3, [r3, r2]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_DMA_Start_IT+0x24>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e04f      	b.n	8005864 <HAL_DMA_Start_IT+0xc4>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2220      	movs	r2, #32
 80057c8:	2101      	movs	r1, #1
 80057ca:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2221      	movs	r2, #33	@ 0x21
 80057d0:	5c9b      	ldrb	r3, [r3, r2]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d13a      	bne.n	800584e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2221      	movs	r2, #33	@ 0x21
 80057dc:	2102      	movs	r1, #2
 80057de:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2101      	movs	r1, #1
 80057f2:	438a      	bics	r2, r1
 80057f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f954 	bl	8005aaa <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	210e      	movs	r1, #14
 8005816:	430a      	orrs	r2, r1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e00f      	b.n	800583c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	210a      	movs	r1, #10
 8005828:	430a      	orrs	r2, r1
 800582a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2104      	movs	r1, #4
 8005838:	438a      	bics	r2, r1
 800583a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2101      	movs	r1, #1
 8005848:	430a      	orrs	r2, r1
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	e007      	b.n	800585e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	2100      	movs	r1, #0
 8005854:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005856:	2317      	movs	r3, #23
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	2202      	movs	r2, #2
 800585c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800585e:	2317      	movs	r3, #23
 8005860:	18fb      	adds	r3, r7, r3
 8005862:	781b      	ldrb	r3, [r3, #0]
}
 8005864:	0018      	movs	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	b006      	add	sp, #24
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2221      	movs	r2, #33	@ 0x21
 8005878:	5c9b      	ldrb	r3, [r3, r2]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d008      	beq.n	8005892 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2204      	movs	r2, #4
 8005884:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	2100      	movs	r1, #0
 800588c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e020      	b.n	80058d4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	210e      	movs	r1, #14
 800589e:	438a      	bics	r2, r1
 80058a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2101      	movs	r1, #1
 80058ae:	438a      	bics	r2, r1
 80058b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ba:	2101      	movs	r1, #1
 80058bc:	4091      	lsls	r1, r2
 80058be:	000a      	movs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2221      	movs	r2, #33	@ 0x21
 80058c6:	2101      	movs	r1, #1
 80058c8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	2100      	movs	r1, #0
 80058d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	0018      	movs	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b002      	add	sp, #8
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e4:	210f      	movs	r1, #15
 80058e6:	187b      	adds	r3, r7, r1
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2221      	movs	r2, #33	@ 0x21
 80058f0:	5c9b      	ldrb	r3, [r3, r2]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d006      	beq.n	8005906 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2204      	movs	r2, #4
 80058fc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80058fe:	187b      	adds	r3, r7, r1
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
 8005904:	e028      	b.n	8005958 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	210e      	movs	r1, #14
 8005912:	438a      	bics	r2, r1
 8005914:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2101      	movs	r1, #1
 8005922:	438a      	bics	r2, r1
 8005924:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592e:	2101      	movs	r1, #1
 8005930:	4091      	lsls	r1, r2
 8005932:	000a      	movs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2221      	movs	r2, #33	@ 0x21
 800593a:	2101      	movs	r1, #1
 800593c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	2100      	movs	r1, #0
 8005944:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	0010      	movs	r0, r2
 8005956:	4798      	blx	r3
    }
  }
  return status;
 8005958:	230f      	movs	r3, #15
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	781b      	ldrb	r3, [r3, #0]
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b004      	add	sp, #16
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005982:	2204      	movs	r2, #4
 8005984:	409a      	lsls	r2, r3
 8005986:	0013      	movs	r3, r2
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4013      	ands	r3, r2
 800598c:	d024      	beq.n	80059d8 <HAL_DMA_IRQHandler+0x72>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2204      	movs	r2, #4
 8005992:	4013      	ands	r3, r2
 8005994:	d020      	beq.n	80059d8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2220      	movs	r2, #32
 800599e:	4013      	ands	r3, r2
 80059a0:	d107      	bne.n	80059b2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2104      	movs	r1, #4
 80059ae:	438a      	bics	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ba:	2104      	movs	r1, #4
 80059bc:	4091      	lsls	r1, r2
 80059be:	000a      	movs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d100      	bne.n	80059cc <HAL_DMA_IRQHandler+0x66>
 80059ca:	e06a      	b.n	8005aa2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	0010      	movs	r0, r2
 80059d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80059d6:	e064      	b.n	8005aa2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059dc:	2202      	movs	r2, #2
 80059de:	409a      	lsls	r2, r3
 80059e0:	0013      	movs	r3, r2
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4013      	ands	r3, r2
 80059e6:	d02b      	beq.n	8005a40 <HAL_DMA_IRQHandler+0xda>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2202      	movs	r2, #2
 80059ec:	4013      	ands	r3, r2
 80059ee:	d027      	beq.n	8005a40 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2220      	movs	r2, #32
 80059f8:	4013      	ands	r3, r2
 80059fa:	d10b      	bne.n	8005a14 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	210a      	movs	r1, #10
 8005a08:	438a      	bics	r2, r1
 8005a0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2221      	movs	r2, #33	@ 0x21
 8005a10:	2101      	movs	r1, #1
 8005a12:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1c:	2102      	movs	r1, #2
 8005a1e:	4091      	lsls	r1, r2
 8005a20:	000a      	movs	r2, r1
 8005a22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	2100      	movs	r1, #0
 8005a2a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d036      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	0010      	movs	r0, r2
 8005a3c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a3e:	e030      	b.n	8005aa2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a44:	2208      	movs	r2, #8
 8005a46:	409a      	lsls	r2, r3
 8005a48:	0013      	movs	r3, r2
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d028      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x13c>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2208      	movs	r2, #8
 8005a54:	4013      	ands	r3, r2
 8005a56:	d024      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	210e      	movs	r1, #14
 8005a64:	438a      	bics	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a70:	2101      	movs	r1, #1
 8005a72:	4091      	lsls	r1, r2
 8005a74:	000a      	movs	r2, r1
 8005a76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2221      	movs	r2, #33	@ 0x21
 8005a82:	2101      	movs	r1, #1
 8005a84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d005      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	0010      	movs	r0, r2
 8005a9e:	4798      	blx	r3
    }
  }
}
 8005aa0:	e7ff      	b.n	8005aa2 <HAL_DMA_IRQHandler+0x13c>
 8005aa2:	46c0      	nop			@ (mov r8, r8)
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b004      	add	sp, #16
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	4091      	lsls	r1, r2
 8005ac4:	000a      	movs	r2, r1
 8005ac6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b10      	cmp	r3, #16
 8005ad6:	d108      	bne.n	8005aea <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ae8:	e007      	b.n	8005afa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	60da      	str	r2, [r3, #12]
}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	46bd      	mov	sp, r7
 8005afe:	b004      	add	sp, #16
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a08      	ldr	r2, [pc, #32]	@ (8005b34 <DMA_CalcBaseAndBitshift+0x30>)
 8005b12:	4694      	mov	ip, r2
 8005b14:	4463      	add	r3, ip
 8005b16:	2114      	movs	r1, #20
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f7fa fb1b 	bl	8000154 <__udivsi3>
 8005b1e:	0003      	movs	r3, r0
 8005b20:	009a      	lsls	r2, r3, #2
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a03      	ldr	r2, [pc, #12]	@ (8005b38 <DMA_CalcBaseAndBitshift+0x34>)
 8005b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8005b2c:	46c0      	nop			@ (mov r8, r8)
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b002      	add	sp, #8
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	bffdfff8 	.word	0xbffdfff8
 8005b38:	40020000 	.word	0x40020000

08005b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b4a:	e14f      	b.n	8005dec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2101      	movs	r1, #1
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4091      	lsls	r1, r2
 8005b56:	000a      	movs	r2, r1
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d100      	bne.n	8005b64 <HAL_GPIO_Init+0x28>
 8005b62:	e140      	b.n	8005de6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2203      	movs	r2, #3
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d005      	beq.n	8005b7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2203      	movs	r2, #3
 8005b76:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d130      	bne.n	8005bde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	2203      	movs	r2, #3
 8005b88:	409a      	lsls	r2, r3
 8005b8a:	0013      	movs	r3, r2
 8005b8c:	43da      	mvns	r2, r3
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4013      	ands	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	409a      	lsls	r2, r3
 8005b9e:	0013      	movs	r3, r2
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	409a      	lsls	r2, r3
 8005bb8:	0013      	movs	r3, r2
 8005bba:	43da      	mvns	r2, r3
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	091b      	lsrs	r3, r3, #4
 8005bc8:	2201      	movs	r2, #1
 8005bca:	401a      	ands	r2, r3
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	409a      	lsls	r2, r3
 8005bd0:	0013      	movs	r3, r2
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2203      	movs	r2, #3
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d017      	beq.n	8005c1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	409a      	lsls	r2, r3
 8005bf8:	0013      	movs	r3, r2
 8005bfa:	43da      	mvns	r2, r3
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	0013      	movs	r3, r2
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2203      	movs	r2, #3
 8005c20:	4013      	ands	r3, r2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d123      	bne.n	8005c6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	08da      	lsrs	r2, r3, #3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3208      	adds	r2, #8
 8005c2e:	0092      	lsls	r2, r2, #2
 8005c30:	58d3      	ldr	r3, [r2, r3]
 8005c32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2207      	movs	r2, #7
 8005c38:	4013      	ands	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	220f      	movs	r2, #15
 8005c3e:	409a      	lsls	r2, r3
 8005c40:	0013      	movs	r3, r2
 8005c42:	43da      	mvns	r2, r3
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4013      	ands	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2107      	movs	r1, #7
 8005c52:	400b      	ands	r3, r1
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	409a      	lsls	r2, r3
 8005c58:	0013      	movs	r3, r2
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	08da      	lsrs	r2, r3, #3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3208      	adds	r2, #8
 8005c68:	0092      	lsls	r2, r2, #2
 8005c6a:	6939      	ldr	r1, [r7, #16]
 8005c6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	2203      	movs	r2, #3
 8005c7a:	409a      	lsls	r2, r3
 8005c7c:	0013      	movs	r3, r2
 8005c7e:	43da      	mvns	r2, r3
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4013      	ands	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	401a      	ands	r2, r3
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	409a      	lsls	r2, r3
 8005c94:	0013      	movs	r3, r2
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	23c0      	movs	r3, #192	@ 0xc0
 8005ca8:	029b      	lsls	r3, r3, #10
 8005caa:	4013      	ands	r3, r2
 8005cac:	d100      	bne.n	8005cb0 <HAL_GPIO_Init+0x174>
 8005cae:	e09a      	b.n	8005de6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cb0:	4b54      	ldr	r3, [pc, #336]	@ (8005e04 <HAL_GPIO_Init+0x2c8>)
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	4b53      	ldr	r3, [pc, #332]	@ (8005e04 <HAL_GPIO_Init+0x2c8>)
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	619a      	str	r2, [r3, #24]
 8005cbc:	4b51      	ldr	r3, [pc, #324]	@ (8005e04 <HAL_GPIO_Init+0x2c8>)
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005cc8:	4a4f      	ldr	r2, [pc, #316]	@ (8005e08 <HAL_GPIO_Init+0x2cc>)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	089b      	lsrs	r3, r3, #2
 8005cce:	3302      	adds	r3, #2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	589b      	ldr	r3, [r3, r2]
 8005cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2203      	movs	r2, #3
 8005cda:	4013      	ands	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	220f      	movs	r2, #15
 8005ce0:	409a      	lsls	r2, r3
 8005ce2:	0013      	movs	r3, r2
 8005ce4:	43da      	mvns	r2, r3
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	2390      	movs	r3, #144	@ 0x90
 8005cf0:	05db      	lsls	r3, r3, #23
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d013      	beq.n	8005d1e <HAL_GPIO_Init+0x1e2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a44      	ldr	r2, [pc, #272]	@ (8005e0c <HAL_GPIO_Init+0x2d0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00d      	beq.n	8005d1a <HAL_GPIO_Init+0x1de>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a43      	ldr	r2, [pc, #268]	@ (8005e10 <HAL_GPIO_Init+0x2d4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d007      	beq.n	8005d16 <HAL_GPIO_Init+0x1da>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a42      	ldr	r2, [pc, #264]	@ (8005e14 <HAL_GPIO_Init+0x2d8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d101      	bne.n	8005d12 <HAL_GPIO_Init+0x1d6>
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e006      	b.n	8005d20 <HAL_GPIO_Init+0x1e4>
 8005d12:	2305      	movs	r3, #5
 8005d14:	e004      	b.n	8005d20 <HAL_GPIO_Init+0x1e4>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e002      	b.n	8005d20 <HAL_GPIO_Init+0x1e4>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e000      	b.n	8005d20 <HAL_GPIO_Init+0x1e4>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	2103      	movs	r1, #3
 8005d24:	400a      	ands	r2, r1
 8005d26:	0092      	lsls	r2, r2, #2
 8005d28:	4093      	lsls	r3, r2
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d30:	4935      	ldr	r1, [pc, #212]	@ (8005e08 <HAL_GPIO_Init+0x2cc>)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	089b      	lsrs	r3, r3, #2
 8005d36:	3302      	adds	r3, #2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d3e:	4b36      	ldr	r3, [pc, #216]	@ (8005e18 <HAL_GPIO_Init+0x2dc>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	43da      	mvns	r2, r3
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	2380      	movs	r3, #128	@ 0x80
 8005d54:	035b      	lsls	r3, r3, #13
 8005d56:	4013      	ands	r3, r2
 8005d58:	d003      	beq.n	8005d62 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005d62:	4b2d      	ldr	r3, [pc, #180]	@ (8005e18 <HAL_GPIO_Init+0x2dc>)
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005d68:	4b2b      	ldr	r3, [pc, #172]	@ (8005e18 <HAL_GPIO_Init+0x2dc>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	43da      	mvns	r2, r3
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4013      	ands	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	2380      	movs	r3, #128	@ 0x80
 8005d7e:	039b      	lsls	r3, r3, #14
 8005d80:	4013      	ands	r3, r2
 8005d82:	d003      	beq.n	8005d8c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005d8c:	4b22      	ldr	r3, [pc, #136]	@ (8005e18 <HAL_GPIO_Init+0x2dc>)
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8005d92:	4b21      	ldr	r3, [pc, #132]	@ (8005e18 <HAL_GPIO_Init+0x2dc>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	43da      	mvns	r2, r3
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	2380      	movs	r3, #128	@ 0x80
 8005da8:	029b      	lsls	r3, r3, #10
 8005daa:	4013      	ands	r3, r2
 8005dac:	d003      	beq.n	8005db6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005db6:	4b18      	ldr	r3, [pc, #96]	@ (8005e18 <HAL_GPIO_Init+0x2dc>)
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8005dbc:	4b16      	ldr	r3, [pc, #88]	@ (8005e18 <HAL_GPIO_Init+0x2dc>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	43da      	mvns	r2, r3
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	2380      	movs	r3, #128	@ 0x80
 8005dd2:	025b      	lsls	r3, r3, #9
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005de0:	4b0d      	ldr	r3, [pc, #52]	@ (8005e18 <HAL_GPIO_Init+0x2dc>)
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	3301      	adds	r3, #1
 8005dea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	40da      	lsrs	r2, r3
 8005df4:	1e13      	subs	r3, r2, #0
 8005df6:	d000      	beq.n	8005dfa <HAL_GPIO_Init+0x2be>
 8005df8:	e6a8      	b.n	8005b4c <HAL_GPIO_Init+0x10>
  } 
}
 8005dfa:	46c0      	nop			@ (mov r8, r8)
 8005dfc:	46c0      	nop			@ (mov r8, r8)
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b006      	add	sp, #24
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40021000 	.word	0x40021000
 8005e08:	40010000 	.word	0x40010000
 8005e0c:	48000400 	.word	0x48000400
 8005e10:	48000800 	.word	0x48000800
 8005e14:	48000c00 	.word	0x48000c00
 8005e18:	40010400 	.word	0x40010400

08005e1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	000a      	movs	r2, r1
 8005e26:	1cbb      	adds	r3, r7, #2
 8005e28:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	1cba      	adds	r2, r7, #2
 8005e30:	8812      	ldrh	r2, [r2, #0]
 8005e32:	4013      	ands	r3, r2
 8005e34:	d004      	beq.n	8005e40 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005e36:	230f      	movs	r3, #15
 8005e38:	18fb      	adds	r3, r7, r3
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	e003      	b.n	8005e48 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e40:	230f      	movs	r3, #15
 8005e42:	18fb      	adds	r3, r7, r3
 8005e44:	2200      	movs	r2, #0
 8005e46:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005e48:	230f      	movs	r3, #15
 8005e4a:	18fb      	adds	r3, r7, r3
 8005e4c:	781b      	ldrb	r3, [r3, #0]
  }
 8005e4e:	0018      	movs	r0, r3
 8005e50:	46bd      	mov	sp, r7
 8005e52:	b004      	add	sp, #16
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b082      	sub	sp, #8
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	0008      	movs	r0, r1
 8005e60:	0011      	movs	r1, r2
 8005e62:	1cbb      	adds	r3, r7, #2
 8005e64:	1c02      	adds	r2, r0, #0
 8005e66:	801a      	strh	r2, [r3, #0]
 8005e68:	1c7b      	adds	r3, r7, #1
 8005e6a:	1c0a      	adds	r2, r1, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e6e:	1c7b      	adds	r3, r7, #1
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d004      	beq.n	8005e80 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e76:	1cbb      	adds	r3, r7, #2
 8005e78:	881a      	ldrh	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e7e:	e003      	b.n	8005e88 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e80:	1cbb      	adds	r3, r7, #2
 8005e82:	881a      	ldrh	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005e88:	46c0      	nop			@ (mov r8, r8)
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b002      	add	sp, #8
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	0002      	movs	r2, r0
 8005e98:	1dbb      	adds	r3, r7, #6
 8005e9a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005e9c:	4b09      	ldr	r3, [pc, #36]	@ (8005ec4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	1dba      	adds	r2, r7, #6
 8005ea2:	8812      	ldrh	r2, [r2, #0]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d008      	beq.n	8005eba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ea8:	4b06      	ldr	r3, [pc, #24]	@ (8005ec4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005eaa:	1dba      	adds	r2, r7, #6
 8005eac:	8812      	ldrh	r2, [r2, #0]
 8005eae:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005eb0:	1dbb      	adds	r3, r7, #6
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f7fd fa8f 	bl	80033d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005eba:	46c0      	nop			@ (mov r8, r8)
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	b002      	add	sp, #8
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	46c0      	nop			@ (mov r8, r8)
 8005ec4:	40010400 	.word	0x40010400

08005ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e301      	b.n	80064de <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d100      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x1e>
 8005ee4:	e08d      	b.n	8006002 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005ee6:	4bc3      	ldr	r3, [pc, #780]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	220c      	movs	r2, #12
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d00e      	beq.n	8005f10 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ef2:	4bc0      	ldr	r3, [pc, #768]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	220c      	movs	r2, #12
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d116      	bne.n	8005f2c <HAL_RCC_OscConfig+0x64>
 8005efe:	4bbd      	ldr	r3, [pc, #756]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	2380      	movs	r3, #128	@ 0x80
 8005f04:	025b      	lsls	r3, r3, #9
 8005f06:	401a      	ands	r2, r3
 8005f08:	2380      	movs	r3, #128	@ 0x80
 8005f0a:	025b      	lsls	r3, r3, #9
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d10d      	bne.n	8005f2c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f10:	4bb8      	ldr	r3, [pc, #736]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	2380      	movs	r3, #128	@ 0x80
 8005f16:	029b      	lsls	r3, r3, #10
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d100      	bne.n	8005f1e <HAL_RCC_OscConfig+0x56>
 8005f1c:	e070      	b.n	8006000 <HAL_RCC_OscConfig+0x138>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d000      	beq.n	8005f28 <HAL_RCC_OscConfig+0x60>
 8005f26:	e06b      	b.n	8006000 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e2d8      	b.n	80064de <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d107      	bne.n	8005f44 <HAL_RCC_OscConfig+0x7c>
 8005f34:	4baf      	ldr	r3, [pc, #700]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4bae      	ldr	r3, [pc, #696]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f3a:	2180      	movs	r1, #128	@ 0x80
 8005f3c:	0249      	lsls	r1, r1, #9
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	e02f      	b.n	8005fa4 <HAL_RCC_OscConfig+0xdc>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10c      	bne.n	8005f66 <HAL_RCC_OscConfig+0x9e>
 8005f4c:	4ba9      	ldr	r3, [pc, #676]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	4ba8      	ldr	r3, [pc, #672]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f52:	49a9      	ldr	r1, [pc, #676]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8005f54:	400a      	ands	r2, r1
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	4ba6      	ldr	r3, [pc, #664]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	4ba5      	ldr	r3, [pc, #660]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f5e:	49a7      	ldr	r1, [pc, #668]	@ (80061fc <HAL_RCC_OscConfig+0x334>)
 8005f60:	400a      	ands	r2, r1
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	e01e      	b.n	8005fa4 <HAL_RCC_OscConfig+0xdc>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2b05      	cmp	r3, #5
 8005f6c:	d10e      	bne.n	8005f8c <HAL_RCC_OscConfig+0xc4>
 8005f6e:	4ba1      	ldr	r3, [pc, #644]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4ba0      	ldr	r3, [pc, #640]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f74:	2180      	movs	r1, #128	@ 0x80
 8005f76:	02c9      	lsls	r1, r1, #11
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	4b9d      	ldr	r3, [pc, #628]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4b9c      	ldr	r3, [pc, #624]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f82:	2180      	movs	r1, #128	@ 0x80
 8005f84:	0249      	lsls	r1, r1, #9
 8005f86:	430a      	orrs	r2, r1
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	e00b      	b.n	8005fa4 <HAL_RCC_OscConfig+0xdc>
 8005f8c:	4b99      	ldr	r3, [pc, #612]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	4b98      	ldr	r3, [pc, #608]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f92:	4999      	ldr	r1, [pc, #612]	@ (80061f8 <HAL_RCC_OscConfig+0x330>)
 8005f94:	400a      	ands	r2, r1
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	4b96      	ldr	r3, [pc, #600]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	4b95      	ldr	r3, [pc, #596]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005f9e:	4997      	ldr	r1, [pc, #604]	@ (80061fc <HAL_RCC_OscConfig+0x334>)
 8005fa0:	400a      	ands	r2, r1
 8005fa2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d014      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fac:	f7fe fef8 	bl	8004da0 <HAL_GetTick>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fb6:	f7fe fef3 	bl	8004da0 <HAL_GetTick>
 8005fba:	0002      	movs	r2, r0
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b64      	cmp	r3, #100	@ 0x64
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e28a      	b.n	80064de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc8:	4b8a      	ldr	r3, [pc, #552]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	2380      	movs	r3, #128	@ 0x80
 8005fce:	029b      	lsls	r3, r3, #10
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	d0f0      	beq.n	8005fb6 <HAL_RCC_OscConfig+0xee>
 8005fd4:	e015      	b.n	8006002 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd6:	f7fe fee3 	bl	8004da0 <HAL_GetTick>
 8005fda:	0003      	movs	r3, r0
 8005fdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fe0:	f7fe fede 	bl	8004da0 <HAL_GetTick>
 8005fe4:	0002      	movs	r2, r0
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b64      	cmp	r3, #100	@ 0x64
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e275      	b.n	80064de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ff2:	4b80      	ldr	r3, [pc, #512]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	2380      	movs	r3, #128	@ 0x80
 8005ff8:	029b      	lsls	r3, r3, #10
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d1f0      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x118>
 8005ffe:	e000      	b.n	8006002 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006000:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2202      	movs	r2, #2
 8006008:	4013      	ands	r3, r2
 800600a:	d100      	bne.n	800600e <HAL_RCC_OscConfig+0x146>
 800600c:	e069      	b.n	80060e2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800600e:	4b79      	ldr	r3, [pc, #484]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	220c      	movs	r2, #12
 8006014:	4013      	ands	r3, r2
 8006016:	d00b      	beq.n	8006030 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006018:	4b76      	ldr	r3, [pc, #472]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	220c      	movs	r2, #12
 800601e:	4013      	ands	r3, r2
 8006020:	2b08      	cmp	r3, #8
 8006022:	d11c      	bne.n	800605e <HAL_RCC_OscConfig+0x196>
 8006024:	4b73      	ldr	r3, [pc, #460]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	2380      	movs	r3, #128	@ 0x80
 800602a:	025b      	lsls	r3, r3, #9
 800602c:	4013      	ands	r3, r2
 800602e:	d116      	bne.n	800605e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006030:	4b70      	ldr	r3, [pc, #448]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2202      	movs	r2, #2
 8006036:	4013      	ands	r3, r2
 8006038:	d005      	beq.n	8006046 <HAL_RCC_OscConfig+0x17e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d001      	beq.n	8006046 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e24b      	b.n	80064de <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006046:	4b6b      	ldr	r3, [pc, #428]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	22f8      	movs	r2, #248	@ 0xf8
 800604c:	4393      	bics	r3, r2
 800604e:	0019      	movs	r1, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	00da      	lsls	r2, r3, #3
 8006056:	4b67      	ldr	r3, [pc, #412]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8006058:	430a      	orrs	r2, r1
 800605a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800605c:	e041      	b.n	80060e2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d024      	beq.n	80060b0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006066:	4b63      	ldr	r3, [pc, #396]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b62      	ldr	r3, [pc, #392]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 800606c:	2101      	movs	r1, #1
 800606e:	430a      	orrs	r2, r1
 8006070:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006072:	f7fe fe95 	bl	8004da0 <HAL_GetTick>
 8006076:	0003      	movs	r3, r0
 8006078:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800607c:	f7fe fe90 	bl	8004da0 <HAL_GetTick>
 8006080:	0002      	movs	r2, r0
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e227      	b.n	80064de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800608e:	4b59      	ldr	r3, [pc, #356]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2202      	movs	r2, #2
 8006094:	4013      	ands	r3, r2
 8006096:	d0f1      	beq.n	800607c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006098:	4b56      	ldr	r3, [pc, #344]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	22f8      	movs	r2, #248	@ 0xf8
 800609e:	4393      	bics	r3, r2
 80060a0:	0019      	movs	r1, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	00da      	lsls	r2, r3, #3
 80060a8:	4b52      	ldr	r3, [pc, #328]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 80060aa:	430a      	orrs	r2, r1
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	e018      	b.n	80060e2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060b0:	4b50      	ldr	r3, [pc, #320]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b4f      	ldr	r3, [pc, #316]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 80060b6:	2101      	movs	r1, #1
 80060b8:	438a      	bics	r2, r1
 80060ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060bc:	f7fe fe70 	bl	8004da0 <HAL_GetTick>
 80060c0:	0003      	movs	r3, r0
 80060c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060c6:	f7fe fe6b 	bl	8004da0 <HAL_GetTick>
 80060ca:	0002      	movs	r2, r0
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e202      	b.n	80064de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d8:	4b46      	ldr	r3, [pc, #280]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2202      	movs	r2, #2
 80060de:	4013      	ands	r3, r2
 80060e0:	d1f1      	bne.n	80060c6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2208      	movs	r2, #8
 80060e8:	4013      	ands	r3, r2
 80060ea:	d036      	beq.n	800615a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d019      	beq.n	8006128 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f4:	4b3f      	ldr	r3, [pc, #252]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 80060f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060f8:	4b3e      	ldr	r3, [pc, #248]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 80060fa:	2101      	movs	r1, #1
 80060fc:	430a      	orrs	r2, r1
 80060fe:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006100:	f7fe fe4e 	bl	8004da0 <HAL_GetTick>
 8006104:	0003      	movs	r3, r0
 8006106:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006108:	e008      	b.n	800611c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800610a:	f7fe fe49 	bl	8004da0 <HAL_GetTick>
 800610e:	0002      	movs	r2, r0
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e1e0      	b.n	80064de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800611c:	4b35      	ldr	r3, [pc, #212]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 800611e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006120:	2202      	movs	r2, #2
 8006122:	4013      	ands	r3, r2
 8006124:	d0f1      	beq.n	800610a <HAL_RCC_OscConfig+0x242>
 8006126:	e018      	b.n	800615a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006128:	4b32      	ldr	r3, [pc, #200]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 800612a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800612c:	4b31      	ldr	r3, [pc, #196]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 800612e:	2101      	movs	r1, #1
 8006130:	438a      	bics	r2, r1
 8006132:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006134:	f7fe fe34 	bl	8004da0 <HAL_GetTick>
 8006138:	0003      	movs	r3, r0
 800613a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800613e:	f7fe fe2f 	bl	8004da0 <HAL_GetTick>
 8006142:	0002      	movs	r2, r0
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e1c6      	b.n	80064de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006150:	4b28      	ldr	r3, [pc, #160]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8006152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006154:	2202      	movs	r2, #2
 8006156:	4013      	ands	r3, r2
 8006158:	d1f1      	bne.n	800613e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2204      	movs	r2, #4
 8006160:	4013      	ands	r3, r2
 8006162:	d100      	bne.n	8006166 <HAL_RCC_OscConfig+0x29e>
 8006164:	e0b4      	b.n	80062d0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006166:	201f      	movs	r0, #31
 8006168:	183b      	adds	r3, r7, r0
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800616e:	4b21      	ldr	r3, [pc, #132]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8006170:	69da      	ldr	r2, [r3, #28]
 8006172:	2380      	movs	r3, #128	@ 0x80
 8006174:	055b      	lsls	r3, r3, #21
 8006176:	4013      	ands	r3, r2
 8006178:	d110      	bne.n	800619c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800617a:	4b1e      	ldr	r3, [pc, #120]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 800617c:	69da      	ldr	r2, [r3, #28]
 800617e:	4b1d      	ldr	r3, [pc, #116]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 8006180:	2180      	movs	r1, #128	@ 0x80
 8006182:	0549      	lsls	r1, r1, #21
 8006184:	430a      	orrs	r2, r1
 8006186:	61da      	str	r2, [r3, #28]
 8006188:	4b1a      	ldr	r3, [pc, #104]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	2380      	movs	r3, #128	@ 0x80
 800618e:	055b      	lsls	r3, r3, #21
 8006190:	4013      	ands	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006196:	183b      	adds	r3, r7, r0
 8006198:	2201      	movs	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619c:	4b18      	ldr	r3, [pc, #96]	@ (8006200 <HAL_RCC_OscConfig+0x338>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	2380      	movs	r3, #128	@ 0x80
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	4013      	ands	r3, r2
 80061a6:	d11a      	bne.n	80061de <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061a8:	4b15      	ldr	r3, [pc, #84]	@ (8006200 <HAL_RCC_OscConfig+0x338>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	4b14      	ldr	r3, [pc, #80]	@ (8006200 <HAL_RCC_OscConfig+0x338>)
 80061ae:	2180      	movs	r1, #128	@ 0x80
 80061b0:	0049      	lsls	r1, r1, #1
 80061b2:	430a      	orrs	r2, r1
 80061b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061b6:	f7fe fdf3 	bl	8004da0 <HAL_GetTick>
 80061ba:	0003      	movs	r3, r0
 80061bc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c0:	f7fe fdee 	bl	8004da0 <HAL_GetTick>
 80061c4:	0002      	movs	r2, r0
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b64      	cmp	r3, #100	@ 0x64
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e185      	b.n	80064de <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006200 <HAL_RCC_OscConfig+0x338>)
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	2380      	movs	r3, #128	@ 0x80
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	4013      	ands	r3, r2
 80061dc:	d0f0      	beq.n	80061c0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d10e      	bne.n	8006204 <HAL_RCC_OscConfig+0x33c>
 80061e6:	4b03      	ldr	r3, [pc, #12]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 80061e8:	6a1a      	ldr	r2, [r3, #32]
 80061ea:	4b02      	ldr	r3, [pc, #8]	@ (80061f4 <HAL_RCC_OscConfig+0x32c>)
 80061ec:	2101      	movs	r1, #1
 80061ee:	430a      	orrs	r2, r1
 80061f0:	621a      	str	r2, [r3, #32]
 80061f2:	e035      	b.n	8006260 <HAL_RCC_OscConfig+0x398>
 80061f4:	40021000 	.word	0x40021000
 80061f8:	fffeffff 	.word	0xfffeffff
 80061fc:	fffbffff 	.word	0xfffbffff
 8006200:	40007000 	.word	0x40007000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10c      	bne.n	8006226 <HAL_RCC_OscConfig+0x35e>
 800620c:	4bb6      	ldr	r3, [pc, #728]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800620e:	6a1a      	ldr	r2, [r3, #32]
 8006210:	4bb5      	ldr	r3, [pc, #724]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006212:	2101      	movs	r1, #1
 8006214:	438a      	bics	r2, r1
 8006216:	621a      	str	r2, [r3, #32]
 8006218:	4bb3      	ldr	r3, [pc, #716]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800621a:	6a1a      	ldr	r2, [r3, #32]
 800621c:	4bb2      	ldr	r3, [pc, #712]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800621e:	2104      	movs	r1, #4
 8006220:	438a      	bics	r2, r1
 8006222:	621a      	str	r2, [r3, #32]
 8006224:	e01c      	b.n	8006260 <HAL_RCC_OscConfig+0x398>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b05      	cmp	r3, #5
 800622c:	d10c      	bne.n	8006248 <HAL_RCC_OscConfig+0x380>
 800622e:	4bae      	ldr	r3, [pc, #696]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006230:	6a1a      	ldr	r2, [r3, #32]
 8006232:	4bad      	ldr	r3, [pc, #692]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006234:	2104      	movs	r1, #4
 8006236:	430a      	orrs	r2, r1
 8006238:	621a      	str	r2, [r3, #32]
 800623a:	4bab      	ldr	r3, [pc, #684]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800623c:	6a1a      	ldr	r2, [r3, #32]
 800623e:	4baa      	ldr	r3, [pc, #680]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006240:	2101      	movs	r1, #1
 8006242:	430a      	orrs	r2, r1
 8006244:	621a      	str	r2, [r3, #32]
 8006246:	e00b      	b.n	8006260 <HAL_RCC_OscConfig+0x398>
 8006248:	4ba7      	ldr	r3, [pc, #668]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800624a:	6a1a      	ldr	r2, [r3, #32]
 800624c:	4ba6      	ldr	r3, [pc, #664]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800624e:	2101      	movs	r1, #1
 8006250:	438a      	bics	r2, r1
 8006252:	621a      	str	r2, [r3, #32]
 8006254:	4ba4      	ldr	r3, [pc, #656]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006256:	6a1a      	ldr	r2, [r3, #32]
 8006258:	4ba3      	ldr	r3, [pc, #652]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800625a:	2104      	movs	r1, #4
 800625c:	438a      	bics	r2, r1
 800625e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d014      	beq.n	8006292 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006268:	f7fe fd9a 	bl	8004da0 <HAL_GetTick>
 800626c:	0003      	movs	r3, r0
 800626e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006270:	e009      	b.n	8006286 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006272:	f7fe fd95 	bl	8004da0 <HAL_GetTick>
 8006276:	0002      	movs	r2, r0
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	4a9b      	ldr	r2, [pc, #620]	@ (80064ec <HAL_RCC_OscConfig+0x624>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e12b      	b.n	80064de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006286:	4b98      	ldr	r3, [pc, #608]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	2202      	movs	r2, #2
 800628c:	4013      	ands	r3, r2
 800628e:	d0f0      	beq.n	8006272 <HAL_RCC_OscConfig+0x3aa>
 8006290:	e013      	b.n	80062ba <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006292:	f7fe fd85 	bl	8004da0 <HAL_GetTick>
 8006296:	0003      	movs	r3, r0
 8006298:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800629a:	e009      	b.n	80062b0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800629c:	f7fe fd80 	bl	8004da0 <HAL_GetTick>
 80062a0:	0002      	movs	r2, r0
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	4a91      	ldr	r2, [pc, #580]	@ (80064ec <HAL_RCC_OscConfig+0x624>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e116      	b.n	80064de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062b0:	4b8d      	ldr	r3, [pc, #564]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	2202      	movs	r2, #2
 80062b6:	4013      	ands	r3, r2
 80062b8:	d1f0      	bne.n	800629c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062ba:	231f      	movs	r3, #31
 80062bc:	18fb      	adds	r3, r7, r3
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d105      	bne.n	80062d0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062c4:	4b88      	ldr	r3, [pc, #544]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80062c6:	69da      	ldr	r2, [r3, #28]
 80062c8:	4b87      	ldr	r3, [pc, #540]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80062ca:	4989      	ldr	r1, [pc, #548]	@ (80064f0 <HAL_RCC_OscConfig+0x628>)
 80062cc:	400a      	ands	r2, r1
 80062ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2210      	movs	r2, #16
 80062d6:	4013      	ands	r3, r2
 80062d8:	d063      	beq.n	80063a2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d12a      	bne.n	8006338 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80062e2:	4b81      	ldr	r3, [pc, #516]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80062e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062e6:	4b80      	ldr	r3, [pc, #512]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80062e8:	2104      	movs	r1, #4
 80062ea:	430a      	orrs	r2, r1
 80062ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80062ee:	4b7e      	ldr	r3, [pc, #504]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80062f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062f2:	4b7d      	ldr	r3, [pc, #500]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80062f4:	2101      	movs	r1, #1
 80062f6:	430a      	orrs	r2, r1
 80062f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062fa:	f7fe fd51 	bl	8004da0 <HAL_GetTick>
 80062fe:	0003      	movs	r3, r0
 8006300:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006304:	f7fe fd4c 	bl	8004da0 <HAL_GetTick>
 8006308:	0002      	movs	r2, r0
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e0e3      	b.n	80064de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006316:	4b74      	ldr	r3, [pc, #464]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800631a:	2202      	movs	r2, #2
 800631c:	4013      	ands	r3, r2
 800631e:	d0f1      	beq.n	8006304 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006320:	4b71      	ldr	r3, [pc, #452]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006324:	22f8      	movs	r2, #248	@ 0xf8
 8006326:	4393      	bics	r3, r2
 8006328:	0019      	movs	r1, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	00da      	lsls	r2, r3, #3
 8006330:	4b6d      	ldr	r3, [pc, #436]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006332:	430a      	orrs	r2, r1
 8006334:	635a      	str	r2, [r3, #52]	@ 0x34
 8006336:	e034      	b.n	80063a2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	3305      	adds	r3, #5
 800633e:	d111      	bne.n	8006364 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006340:	4b69      	ldr	r3, [pc, #420]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006344:	4b68      	ldr	r3, [pc, #416]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006346:	2104      	movs	r1, #4
 8006348:	438a      	bics	r2, r1
 800634a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800634c:	4b66      	ldr	r3, [pc, #408]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800634e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006350:	22f8      	movs	r2, #248	@ 0xf8
 8006352:	4393      	bics	r3, r2
 8006354:	0019      	movs	r1, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	00da      	lsls	r2, r3, #3
 800635c:	4b62      	ldr	r3, [pc, #392]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800635e:	430a      	orrs	r2, r1
 8006360:	635a      	str	r2, [r3, #52]	@ 0x34
 8006362:	e01e      	b.n	80063a2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006364:	4b60      	ldr	r3, [pc, #384]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006368:	4b5f      	ldr	r3, [pc, #380]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800636a:	2104      	movs	r1, #4
 800636c:	430a      	orrs	r2, r1
 800636e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006370:	4b5d      	ldr	r3, [pc, #372]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006374:	4b5c      	ldr	r3, [pc, #368]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006376:	2101      	movs	r1, #1
 8006378:	438a      	bics	r2, r1
 800637a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800637c:	f7fe fd10 	bl	8004da0 <HAL_GetTick>
 8006380:	0003      	movs	r3, r0
 8006382:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006386:	f7fe fd0b 	bl	8004da0 <HAL_GetTick>
 800638a:	0002      	movs	r2, r0
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e0a2      	b.n	80064de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006398:	4b53      	ldr	r3, [pc, #332]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800639a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800639c:	2202      	movs	r2, #2
 800639e:	4013      	ands	r3, r2
 80063a0:	d1f1      	bne.n	8006386 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d100      	bne.n	80063ac <HAL_RCC_OscConfig+0x4e4>
 80063aa:	e097      	b.n	80064dc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063ac:	4b4e      	ldr	r3, [pc, #312]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	220c      	movs	r2, #12
 80063b2:	4013      	ands	r3, r2
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d100      	bne.n	80063ba <HAL_RCC_OscConfig+0x4f2>
 80063b8:	e06b      	b.n	8006492 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d14c      	bne.n	800645c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c2:	4b49      	ldr	r3, [pc, #292]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	4b48      	ldr	r3, [pc, #288]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80063c8:	494a      	ldr	r1, [pc, #296]	@ (80064f4 <HAL_RCC_OscConfig+0x62c>)
 80063ca:	400a      	ands	r2, r1
 80063cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ce:	f7fe fce7 	bl	8004da0 <HAL_GetTick>
 80063d2:	0003      	movs	r3, r0
 80063d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063d8:	f7fe fce2 	bl	8004da0 <HAL_GetTick>
 80063dc:	0002      	movs	r2, r0
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e079      	b.n	80064de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063ea:	4b3f      	ldr	r3, [pc, #252]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	2380      	movs	r3, #128	@ 0x80
 80063f0:	049b      	lsls	r3, r3, #18
 80063f2:	4013      	ands	r3, r2
 80063f4:	d1f0      	bne.n	80063d8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063f6:	4b3c      	ldr	r3, [pc, #240]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80063f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fa:	220f      	movs	r2, #15
 80063fc:	4393      	bics	r3, r2
 80063fe:	0019      	movs	r1, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006404:	4b38      	ldr	r3, [pc, #224]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006406:	430a      	orrs	r2, r1
 8006408:	62da      	str	r2, [r3, #44]	@ 0x2c
 800640a:	4b37      	ldr	r3, [pc, #220]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	4a3a      	ldr	r2, [pc, #232]	@ (80064f8 <HAL_RCC_OscConfig+0x630>)
 8006410:	4013      	ands	r3, r2
 8006412:	0019      	movs	r1, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641c:	431a      	orrs	r2, r3
 800641e:	4b32      	ldr	r3, [pc, #200]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006420:	430a      	orrs	r2, r1
 8006422:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006424:	4b30      	ldr	r3, [pc, #192]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	4b2f      	ldr	r3, [pc, #188]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800642a:	2180      	movs	r1, #128	@ 0x80
 800642c:	0449      	lsls	r1, r1, #17
 800642e:	430a      	orrs	r2, r1
 8006430:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006432:	f7fe fcb5 	bl	8004da0 <HAL_GetTick>
 8006436:	0003      	movs	r3, r0
 8006438:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800643c:	f7fe fcb0 	bl	8004da0 <HAL_GetTick>
 8006440:	0002      	movs	r2, r0
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e047      	b.n	80064de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800644e:	4b26      	ldr	r3, [pc, #152]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	2380      	movs	r3, #128	@ 0x80
 8006454:	049b      	lsls	r3, r3, #18
 8006456:	4013      	ands	r3, r2
 8006458:	d0f0      	beq.n	800643c <HAL_RCC_OscConfig+0x574>
 800645a:	e03f      	b.n	80064dc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800645c:	4b22      	ldr	r3, [pc, #136]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	4b21      	ldr	r3, [pc, #132]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006462:	4924      	ldr	r1, [pc, #144]	@ (80064f4 <HAL_RCC_OscConfig+0x62c>)
 8006464:	400a      	ands	r2, r1
 8006466:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006468:	f7fe fc9a 	bl	8004da0 <HAL_GetTick>
 800646c:	0003      	movs	r3, r0
 800646e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006472:	f7fe fc95 	bl	8004da0 <HAL_GetTick>
 8006476:	0002      	movs	r2, r0
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e02c      	b.n	80064de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006484:	4b18      	ldr	r3, [pc, #96]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	2380      	movs	r3, #128	@ 0x80
 800648a:	049b      	lsls	r3, r3, #18
 800648c:	4013      	ands	r3, r2
 800648e:	d1f0      	bne.n	8006472 <HAL_RCC_OscConfig+0x5aa>
 8006490:	e024      	b.n	80064dc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d101      	bne.n	800649e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e01f      	b.n	80064de <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800649e:	4b12      	ldr	r3, [pc, #72]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80064a4:	4b10      	ldr	r3, [pc, #64]	@ (80064e8 <HAL_RCC_OscConfig+0x620>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	2380      	movs	r3, #128	@ 0x80
 80064ae:	025b      	lsls	r3, r3, #9
 80064b0:	401a      	ands	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d10e      	bne.n	80064d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	220f      	movs	r2, #15
 80064be:	401a      	ands	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d107      	bne.n	80064d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	23f0      	movs	r3, #240	@ 0xf0
 80064cc:	039b      	lsls	r3, r3, #14
 80064ce:	401a      	ands	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d001      	beq.n	80064dc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e000      	b.n	80064de <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	0018      	movs	r0, r3
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b008      	add	sp, #32
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	46c0      	nop			@ (mov r8, r8)
 80064e8:	40021000 	.word	0x40021000
 80064ec:	00001388 	.word	0x00001388
 80064f0:	efffffff 	.word	0xefffffff
 80064f4:	feffffff 	.word	0xfeffffff
 80064f8:	ffc2ffff 	.word	0xffc2ffff

080064fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e0b3      	b.n	8006678 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006510:	4b5b      	ldr	r3, [pc, #364]	@ (8006680 <HAL_RCC_ClockConfig+0x184>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2201      	movs	r2, #1
 8006516:	4013      	ands	r3, r2
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d911      	bls.n	8006542 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651e:	4b58      	ldr	r3, [pc, #352]	@ (8006680 <HAL_RCC_ClockConfig+0x184>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2201      	movs	r2, #1
 8006524:	4393      	bics	r3, r2
 8006526:	0019      	movs	r1, r3
 8006528:	4b55      	ldr	r3, [pc, #340]	@ (8006680 <HAL_RCC_ClockConfig+0x184>)
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006530:	4b53      	ldr	r3, [pc, #332]	@ (8006680 <HAL_RCC_ClockConfig+0x184>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2201      	movs	r2, #1
 8006536:	4013      	ands	r3, r2
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d001      	beq.n	8006542 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e09a      	b.n	8006678 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2202      	movs	r2, #2
 8006548:	4013      	ands	r3, r2
 800654a:	d015      	beq.n	8006578 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2204      	movs	r2, #4
 8006552:	4013      	ands	r3, r2
 8006554:	d006      	beq.n	8006564 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006556:	4b4b      	ldr	r3, [pc, #300]	@ (8006684 <HAL_RCC_ClockConfig+0x188>)
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	4b4a      	ldr	r3, [pc, #296]	@ (8006684 <HAL_RCC_ClockConfig+0x188>)
 800655c:	21e0      	movs	r1, #224	@ 0xe0
 800655e:	00c9      	lsls	r1, r1, #3
 8006560:	430a      	orrs	r2, r1
 8006562:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006564:	4b47      	ldr	r3, [pc, #284]	@ (8006684 <HAL_RCC_ClockConfig+0x188>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	22f0      	movs	r2, #240	@ 0xf0
 800656a:	4393      	bics	r3, r2
 800656c:	0019      	movs	r1, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	4b44      	ldr	r3, [pc, #272]	@ (8006684 <HAL_RCC_ClockConfig+0x188>)
 8006574:	430a      	orrs	r2, r1
 8006576:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2201      	movs	r2, #1
 800657e:	4013      	ands	r3, r2
 8006580:	d040      	beq.n	8006604 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d107      	bne.n	800659a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800658a:	4b3e      	ldr	r3, [pc, #248]	@ (8006684 <HAL_RCC_ClockConfig+0x188>)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	2380      	movs	r3, #128	@ 0x80
 8006590:	029b      	lsls	r3, r3, #10
 8006592:	4013      	ands	r3, r2
 8006594:	d114      	bne.n	80065c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e06e      	b.n	8006678 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d107      	bne.n	80065b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a2:	4b38      	ldr	r3, [pc, #224]	@ (8006684 <HAL_RCC_ClockConfig+0x188>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	2380      	movs	r3, #128	@ 0x80
 80065a8:	049b      	lsls	r3, r3, #18
 80065aa:	4013      	ands	r3, r2
 80065ac:	d108      	bne.n	80065c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e062      	b.n	8006678 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b2:	4b34      	ldr	r3, [pc, #208]	@ (8006684 <HAL_RCC_ClockConfig+0x188>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2202      	movs	r2, #2
 80065b8:	4013      	ands	r3, r2
 80065ba:	d101      	bne.n	80065c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e05b      	b.n	8006678 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065c0:	4b30      	ldr	r3, [pc, #192]	@ (8006684 <HAL_RCC_ClockConfig+0x188>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2203      	movs	r2, #3
 80065c6:	4393      	bics	r3, r2
 80065c8:	0019      	movs	r1, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006684 <HAL_RCC_ClockConfig+0x188>)
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065d4:	f7fe fbe4 	bl	8004da0 <HAL_GetTick>
 80065d8:	0003      	movs	r3, r0
 80065da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065dc:	e009      	b.n	80065f2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065de:	f7fe fbdf 	bl	8004da0 <HAL_GetTick>
 80065e2:	0002      	movs	r2, r0
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	4a27      	ldr	r2, [pc, #156]	@ (8006688 <HAL_RCC_ClockConfig+0x18c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e042      	b.n	8006678 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f2:	4b24      	ldr	r3, [pc, #144]	@ (8006684 <HAL_RCC_ClockConfig+0x188>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	220c      	movs	r2, #12
 80065f8:	401a      	ands	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	429a      	cmp	r2, r3
 8006602:	d1ec      	bne.n	80065de <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006604:	4b1e      	ldr	r3, [pc, #120]	@ (8006680 <HAL_RCC_ClockConfig+0x184>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2201      	movs	r2, #1
 800660a:	4013      	ands	r3, r2
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d211      	bcs.n	8006636 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006612:	4b1b      	ldr	r3, [pc, #108]	@ (8006680 <HAL_RCC_ClockConfig+0x184>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2201      	movs	r2, #1
 8006618:	4393      	bics	r3, r2
 800661a:	0019      	movs	r1, r3
 800661c:	4b18      	ldr	r3, [pc, #96]	@ (8006680 <HAL_RCC_ClockConfig+0x184>)
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006624:	4b16      	ldr	r3, [pc, #88]	@ (8006680 <HAL_RCC_ClockConfig+0x184>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2201      	movs	r2, #1
 800662a:	4013      	ands	r3, r2
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d001      	beq.n	8006636 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e020      	b.n	8006678 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2204      	movs	r2, #4
 800663c:	4013      	ands	r3, r2
 800663e:	d009      	beq.n	8006654 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006640:	4b10      	ldr	r3, [pc, #64]	@ (8006684 <HAL_RCC_ClockConfig+0x188>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	4a11      	ldr	r2, [pc, #68]	@ (800668c <HAL_RCC_ClockConfig+0x190>)
 8006646:	4013      	ands	r3, r2
 8006648:	0019      	movs	r1, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	4b0d      	ldr	r3, [pc, #52]	@ (8006684 <HAL_RCC_ClockConfig+0x188>)
 8006650:	430a      	orrs	r2, r1
 8006652:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006654:	f000 f820 	bl	8006698 <HAL_RCC_GetSysClockFreq>
 8006658:	0001      	movs	r1, r0
 800665a:	4b0a      	ldr	r3, [pc, #40]	@ (8006684 <HAL_RCC_ClockConfig+0x188>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	091b      	lsrs	r3, r3, #4
 8006660:	220f      	movs	r2, #15
 8006662:	4013      	ands	r3, r2
 8006664:	4a0a      	ldr	r2, [pc, #40]	@ (8006690 <HAL_RCC_ClockConfig+0x194>)
 8006666:	5cd3      	ldrb	r3, [r2, r3]
 8006668:	000a      	movs	r2, r1
 800666a:	40da      	lsrs	r2, r3
 800666c:	4b09      	ldr	r3, [pc, #36]	@ (8006694 <HAL_RCC_ClockConfig+0x198>)
 800666e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006670:	2003      	movs	r0, #3
 8006672:	f7fe fb4f 	bl	8004d14 <HAL_InitTick>
  
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	0018      	movs	r0, r3
 800667a:	46bd      	mov	sp, r7
 800667c:	b004      	add	sp, #16
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40022000 	.word	0x40022000
 8006684:	40021000 	.word	0x40021000
 8006688:	00001388 	.word	0x00001388
 800668c:	fffff8ff 	.word	0xfffff8ff
 8006690:	0800ecd0 	.word	0x0800ecd0
 8006694:	20000030 	.word	0x20000030

08006698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	2300      	movs	r3, #0
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	2300      	movs	r3, #0
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	2300      	movs	r3, #0
 80066ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80066b2:	4b20      	ldr	r3, [pc, #128]	@ (8006734 <HAL_RCC_GetSysClockFreq+0x9c>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	220c      	movs	r2, #12
 80066bc:	4013      	ands	r3, r2
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d002      	beq.n	80066c8 <HAL_RCC_GetSysClockFreq+0x30>
 80066c2:	2b08      	cmp	r3, #8
 80066c4:	d003      	beq.n	80066ce <HAL_RCC_GetSysClockFreq+0x36>
 80066c6:	e02c      	b.n	8006722 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80066c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006738 <HAL_RCC_GetSysClockFreq+0xa0>)
 80066ca:	613b      	str	r3, [r7, #16]
      break;
 80066cc:	e02c      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	0c9b      	lsrs	r3, r3, #18
 80066d2:	220f      	movs	r2, #15
 80066d4:	4013      	ands	r3, r2
 80066d6:	4a19      	ldr	r2, [pc, #100]	@ (800673c <HAL_RCC_GetSysClockFreq+0xa4>)
 80066d8:	5cd3      	ldrb	r3, [r2, r3]
 80066da:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80066dc:	4b15      	ldr	r3, [pc, #84]	@ (8006734 <HAL_RCC_GetSysClockFreq+0x9c>)
 80066de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e0:	220f      	movs	r2, #15
 80066e2:	4013      	ands	r3, r2
 80066e4:	4a16      	ldr	r2, [pc, #88]	@ (8006740 <HAL_RCC_GetSysClockFreq+0xa8>)
 80066e6:	5cd3      	ldrb	r3, [r2, r3]
 80066e8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	2380      	movs	r3, #128	@ 0x80
 80066ee:	025b      	lsls	r3, r3, #9
 80066f0:	4013      	ands	r3, r2
 80066f2:	d009      	beq.n	8006708 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	4810      	ldr	r0, [pc, #64]	@ (8006738 <HAL_RCC_GetSysClockFreq+0xa0>)
 80066f8:	f7f9 fd2c 	bl	8000154 <__udivsi3>
 80066fc:	0003      	movs	r3, r0
 80066fe:	001a      	movs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4353      	muls	r3, r2
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	e009      	b.n	800671c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	000a      	movs	r2, r1
 800670c:	0152      	lsls	r2, r2, #5
 800670e:	1a52      	subs	r2, r2, r1
 8006710:	0193      	lsls	r3, r2, #6
 8006712:	1a9b      	subs	r3, r3, r2
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	185b      	adds	r3, r3, r1
 8006718:	021b      	lsls	r3, r3, #8
 800671a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	613b      	str	r3, [r7, #16]
      break;
 8006720:	e002      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006722:	4b05      	ldr	r3, [pc, #20]	@ (8006738 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006724:	613b      	str	r3, [r7, #16]
      break;
 8006726:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006728:	693b      	ldr	r3, [r7, #16]
}
 800672a:	0018      	movs	r0, r3
 800672c:	46bd      	mov	sp, r7
 800672e:	b006      	add	sp, #24
 8006730:	bd80      	pop	{r7, pc}
 8006732:	46c0      	nop			@ (mov r8, r8)
 8006734:	40021000 	.word	0x40021000
 8006738:	007a1200 	.word	0x007a1200
 800673c:	0800ece8 	.word	0x0800ece8
 8006740:	0800ecf8 	.word	0x0800ecf8

08006744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006748:	4b02      	ldr	r3, [pc, #8]	@ (8006754 <HAL_RCC_GetHCLKFreq+0x10>)
 800674a:	681b      	ldr	r3, [r3, #0]
}
 800674c:	0018      	movs	r0, r3
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	46c0      	nop			@ (mov r8, r8)
 8006754:	20000030 	.word	0x20000030

08006758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800675c:	f7ff fff2 	bl	8006744 <HAL_RCC_GetHCLKFreq>
 8006760:	0001      	movs	r1, r0
 8006762:	4b06      	ldr	r3, [pc, #24]	@ (800677c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	2207      	movs	r2, #7
 800676a:	4013      	ands	r3, r2
 800676c:	4a04      	ldr	r2, [pc, #16]	@ (8006780 <HAL_RCC_GetPCLK1Freq+0x28>)
 800676e:	5cd3      	ldrb	r3, [r2, r3]
 8006770:	40d9      	lsrs	r1, r3
 8006772:	000b      	movs	r3, r1
}    
 8006774:	0018      	movs	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	46c0      	nop			@ (mov r8, r8)
 800677c:	40021000 	.word	0x40021000
 8006780:	0800ece0 	.word	0x0800ece0

08006784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	2380      	movs	r3, #128	@ 0x80
 800679a:	025b      	lsls	r3, r3, #9
 800679c:	4013      	ands	r3, r2
 800679e:	d100      	bne.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80067a0:	e08e      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80067a2:	2017      	movs	r0, #23
 80067a4:	183b      	adds	r3, r7, r0
 80067a6:	2200      	movs	r2, #0
 80067a8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067aa:	4b57      	ldr	r3, [pc, #348]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80067ac:	69da      	ldr	r2, [r3, #28]
 80067ae:	2380      	movs	r3, #128	@ 0x80
 80067b0:	055b      	lsls	r3, r3, #21
 80067b2:	4013      	ands	r3, r2
 80067b4:	d110      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80067b6:	4b54      	ldr	r3, [pc, #336]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80067b8:	69da      	ldr	r2, [r3, #28]
 80067ba:	4b53      	ldr	r3, [pc, #332]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80067bc:	2180      	movs	r1, #128	@ 0x80
 80067be:	0549      	lsls	r1, r1, #21
 80067c0:	430a      	orrs	r2, r1
 80067c2:	61da      	str	r2, [r3, #28]
 80067c4:	4b50      	ldr	r3, [pc, #320]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80067c6:	69da      	ldr	r2, [r3, #28]
 80067c8:	2380      	movs	r3, #128	@ 0x80
 80067ca:	055b      	lsls	r3, r3, #21
 80067cc:	4013      	ands	r3, r2
 80067ce:	60bb      	str	r3, [r7, #8]
 80067d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067d2:	183b      	adds	r3, r7, r0
 80067d4:	2201      	movs	r2, #1
 80067d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067d8:	4b4c      	ldr	r3, [pc, #304]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	2380      	movs	r3, #128	@ 0x80
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	4013      	ands	r3, r2
 80067e2:	d11a      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067e4:	4b49      	ldr	r3, [pc, #292]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	4b48      	ldr	r3, [pc, #288]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80067ea:	2180      	movs	r1, #128	@ 0x80
 80067ec:	0049      	lsls	r1, r1, #1
 80067ee:	430a      	orrs	r2, r1
 80067f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067f2:	f7fe fad5 	bl	8004da0 <HAL_GetTick>
 80067f6:	0003      	movs	r3, r0
 80067f8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067fa:	e008      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067fc:	f7fe fad0 	bl	8004da0 <HAL_GetTick>
 8006800:	0002      	movs	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b64      	cmp	r3, #100	@ 0x64
 8006808:	d901      	bls.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e077      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800680e:	4b3f      	ldr	r3, [pc, #252]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	2380      	movs	r3, #128	@ 0x80
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	4013      	ands	r3, r2
 8006818:	d0f0      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800681a:	4b3b      	ldr	r3, [pc, #236]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800681c:	6a1a      	ldr	r2, [r3, #32]
 800681e:	23c0      	movs	r3, #192	@ 0xc0
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4013      	ands	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d034      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	23c0      	movs	r3, #192	@ 0xc0
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4013      	ands	r3, r2
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	429a      	cmp	r2, r3
 800683a:	d02c      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800683c:	4b32      	ldr	r3, [pc, #200]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	4a33      	ldr	r2, [pc, #204]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006842:	4013      	ands	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006846:	4b30      	ldr	r3, [pc, #192]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006848:	6a1a      	ldr	r2, [r3, #32]
 800684a:	4b2f      	ldr	r3, [pc, #188]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800684c:	2180      	movs	r1, #128	@ 0x80
 800684e:	0249      	lsls	r1, r1, #9
 8006850:	430a      	orrs	r2, r1
 8006852:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006854:	4b2c      	ldr	r3, [pc, #176]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006856:	6a1a      	ldr	r2, [r3, #32]
 8006858:	4b2b      	ldr	r3, [pc, #172]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800685a:	492e      	ldr	r1, [pc, #184]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800685c:	400a      	ands	r2, r1
 800685e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006860:	4b29      	ldr	r3, [pc, #164]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	4013      	ands	r3, r2
 800686c:	d013      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800686e:	f7fe fa97 	bl	8004da0 <HAL_GetTick>
 8006872:	0003      	movs	r3, r0
 8006874:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006876:	e009      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006878:	f7fe fa92 	bl	8004da0 <HAL_GetTick>
 800687c:	0002      	movs	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	4a25      	ldr	r2, [pc, #148]	@ (8006918 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d901      	bls.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e038      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800688c:	4b1e      	ldr	r3, [pc, #120]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	2202      	movs	r2, #2
 8006892:	4013      	ands	r3, r2
 8006894:	d0f0      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006896:	4b1c      	ldr	r3, [pc, #112]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	4a1d      	ldr	r2, [pc, #116]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800689c:	4013      	ands	r3, r2
 800689e:	0019      	movs	r1, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	4b18      	ldr	r3, [pc, #96]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068a6:	430a      	orrs	r2, r1
 80068a8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80068aa:	2317      	movs	r3, #23
 80068ac:	18fb      	adds	r3, r7, r3
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d105      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068b4:	4b14      	ldr	r3, [pc, #80]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	4b13      	ldr	r3, [pc, #76]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068ba:	4918      	ldr	r1, [pc, #96]	@ (800691c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80068bc:	400a      	ands	r2, r1
 80068be:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2201      	movs	r2, #1
 80068c6:	4013      	ands	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ce:	2203      	movs	r2, #3
 80068d0:	4393      	bics	r3, r2
 80068d2:	0019      	movs	r1, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068da:	430a      	orrs	r2, r1
 80068dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2220      	movs	r2, #32
 80068e4:	4013      	ands	r3, r2
 80068e6:	d009      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068e8:	4b07      	ldr	r3, [pc, #28]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ec:	2210      	movs	r2, #16
 80068ee:	4393      	bics	r3, r2
 80068f0:	0019      	movs	r1, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	4b04      	ldr	r3, [pc, #16]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80068f8:	430a      	orrs	r2, r1
 80068fa:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	0018      	movs	r0, r3
 8006900:	46bd      	mov	sp, r7
 8006902:	b006      	add	sp, #24
 8006904:	bd80      	pop	{r7, pc}
 8006906:	46c0      	nop			@ (mov r8, r8)
 8006908:	40021000 	.word	0x40021000
 800690c:	40007000 	.word	0x40007000
 8006910:	fffffcff 	.word	0xfffffcff
 8006914:	fffeffff 	.word	0xfffeffff
 8006918:	00001388 	.word	0x00001388
 800691c:	efffffff 	.word	0xefffffff

08006920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e042      	b.n	80069b8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	223d      	movs	r2, #61	@ 0x3d
 8006936:	5c9b      	ldrb	r3, [r3, r2]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d107      	bne.n	800694e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	223c      	movs	r2, #60	@ 0x3c
 8006942:	2100      	movs	r1, #0
 8006944:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	0018      	movs	r0, r3
 800694a:	f7fd febd 	bl	80046c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	223d      	movs	r2, #61	@ 0x3d
 8006952:	2102      	movs	r1, #2
 8006954:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3304      	adds	r3, #4
 800695e:	0019      	movs	r1, r3
 8006960:	0010      	movs	r0, r2
 8006962:	f000 fee7 	bl	8007734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2246      	movs	r2, #70	@ 0x46
 800696a:	2101      	movs	r1, #1
 800696c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	223e      	movs	r2, #62	@ 0x3e
 8006972:	2101      	movs	r1, #1
 8006974:	5499      	strb	r1, [r3, r2]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	223f      	movs	r2, #63	@ 0x3f
 800697a:	2101      	movs	r1, #1
 800697c:	5499      	strb	r1, [r3, r2]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2240      	movs	r2, #64	@ 0x40
 8006982:	2101      	movs	r1, #1
 8006984:	5499      	strb	r1, [r3, r2]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2241      	movs	r2, #65	@ 0x41
 800698a:	2101      	movs	r1, #1
 800698c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2242      	movs	r2, #66	@ 0x42
 8006992:	2101      	movs	r1, #1
 8006994:	5499      	strb	r1, [r3, r2]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2243      	movs	r2, #67	@ 0x43
 800699a:	2101      	movs	r1, #1
 800699c:	5499      	strb	r1, [r3, r2]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2244      	movs	r2, #68	@ 0x44
 80069a2:	2101      	movs	r1, #1
 80069a4:	5499      	strb	r1, [r3, r2]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2245      	movs	r2, #69	@ 0x45
 80069aa:	2101      	movs	r1, #1
 80069ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	223d      	movs	r2, #61	@ 0x3d
 80069b2:	2101      	movs	r1, #1
 80069b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	0018      	movs	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b002      	add	sp, #8
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	223d      	movs	r2, #61	@ 0x3d
 80069cc:	5c9b      	ldrb	r3, [r3, r2]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d001      	beq.n	80069d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e02d      	b.n	8006a34 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	223d      	movs	r2, #61	@ 0x3d
 80069dc:	2102      	movs	r1, #2
 80069de:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a15      	ldr	r2, [pc, #84]	@ (8006a3c <HAL_TIM_Base_Start+0x7c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d009      	beq.n	80069fe <HAL_TIM_Base_Start+0x3e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a14      	ldr	r2, [pc, #80]	@ (8006a40 <HAL_TIM_Base_Start+0x80>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d004      	beq.n	80069fe <HAL_TIM_Base_Start+0x3e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a12      	ldr	r2, [pc, #72]	@ (8006a44 <HAL_TIM_Base_Start+0x84>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d111      	bne.n	8006a22 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2207      	movs	r2, #7
 8006a06:	4013      	ands	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b06      	cmp	r3, #6
 8006a0e:	d010      	beq.n	8006a32 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a20:	e007      	b.n	8006a32 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	0018      	movs	r0, r3
 8006a36:	46bd      	mov	sp, r7
 8006a38:	b004      	add	sp, #16
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40012c00 	.word	0x40012c00
 8006a40:	40000400 	.word	0x40000400
 8006a44:	40014000 	.word	0x40014000

08006a48 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	4a0d      	ldr	r2, [pc, #52]	@ (8006a8c <HAL_TIM_Base_Stop+0x44>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	d10d      	bne.n	8006a78 <HAL_TIM_Base_Stop+0x30>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	4a0b      	ldr	r2, [pc, #44]	@ (8006a90 <HAL_TIM_Base_Stop+0x48>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	d107      	bne.n	8006a78 <HAL_TIM_Base_Stop+0x30>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2101      	movs	r1, #1
 8006a74:	438a      	bics	r2, r1
 8006a76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	223d      	movs	r2, #61	@ 0x3d
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	0018      	movs	r0, r3
 8006a84:	46bd      	mov	sp, r7
 8006a86:	b002      	add	sp, #8
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	46c0      	nop			@ (mov r8, r8)
 8006a8c:	00001111 	.word	0x00001111
 8006a90:	00000444 	.word	0x00000444

08006a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	223d      	movs	r2, #61	@ 0x3d
 8006aa0:	5c9b      	ldrb	r3, [r3, r2]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d001      	beq.n	8006aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e035      	b.n	8006b18 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	223d      	movs	r2, #61	@ 0x3d
 8006ab0:	2102      	movs	r1, #2
 8006ab2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2101      	movs	r1, #1
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a15      	ldr	r2, [pc, #84]	@ (8006b20 <HAL_TIM_Base_Start_IT+0x8c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d009      	beq.n	8006ae2 <HAL_TIM_Base_Start_IT+0x4e>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a14      	ldr	r2, [pc, #80]	@ (8006b24 <HAL_TIM_Base_Start_IT+0x90>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d004      	beq.n	8006ae2 <HAL_TIM_Base_Start_IT+0x4e>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a12      	ldr	r2, [pc, #72]	@ (8006b28 <HAL_TIM_Base_Start_IT+0x94>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d111      	bne.n	8006b06 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2207      	movs	r2, #7
 8006aea:	4013      	ands	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b06      	cmp	r3, #6
 8006af2:	d010      	beq.n	8006b16 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2101      	movs	r1, #1
 8006b00:	430a      	orrs	r2, r1
 8006b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b04:	e007      	b.n	8006b16 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2101      	movs	r1, #1
 8006b12:	430a      	orrs	r2, r1
 8006b14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	0018      	movs	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b004      	add	sp, #16
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40012c00 	.word	0x40012c00
 8006b24:	40000400 	.word	0x40000400
 8006b28:	40014000 	.word	0x40014000

08006b2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2101      	movs	r1, #1
 8006b40:	438a      	bics	r2, r1
 8006b42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8006b80 <HAL_TIM_Base_Stop_IT+0x54>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	d10d      	bne.n	8006b6c <HAL_TIM_Base_Stop_IT+0x40>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	4a0b      	ldr	r2, [pc, #44]	@ (8006b84 <HAL_TIM_Base_Stop_IT+0x58>)
 8006b58:	4013      	ands	r3, r2
 8006b5a:	d107      	bne.n	8006b6c <HAL_TIM_Base_Stop_IT+0x40>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2101      	movs	r1, #1
 8006b68:	438a      	bics	r2, r1
 8006b6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	223d      	movs	r2, #61	@ 0x3d
 8006b70:	2101      	movs	r1, #1
 8006b72:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	0018      	movs	r0, r3
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	b002      	add	sp, #8
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	46c0      	nop			@ (mov r8, r8)
 8006b80:	00001111 	.word	0x00001111
 8006b84:	00000444 	.word	0x00000444

08006b88 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e042      	b.n	8006c20 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	223d      	movs	r2, #61	@ 0x3d
 8006b9e:	5c9b      	ldrb	r3, [r3, r2]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d107      	bne.n	8006bb6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	223c      	movs	r2, #60	@ 0x3c
 8006baa:	2100      	movs	r1, #0
 8006bac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f000 f839 	bl	8006c28 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	223d      	movs	r2, #61	@ 0x3d
 8006bba:	2102      	movs	r1, #2
 8006bbc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	0019      	movs	r1, r3
 8006bc8:	0010      	movs	r0, r2
 8006bca:	f000 fdb3 	bl	8007734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2246      	movs	r2, #70	@ 0x46
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	223e      	movs	r2, #62	@ 0x3e
 8006bda:	2101      	movs	r1, #1
 8006bdc:	5499      	strb	r1, [r3, r2]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	223f      	movs	r2, #63	@ 0x3f
 8006be2:	2101      	movs	r1, #1
 8006be4:	5499      	strb	r1, [r3, r2]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2240      	movs	r2, #64	@ 0x40
 8006bea:	2101      	movs	r1, #1
 8006bec:	5499      	strb	r1, [r3, r2]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2241      	movs	r2, #65	@ 0x41
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2242      	movs	r2, #66	@ 0x42
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	5499      	strb	r1, [r3, r2]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2243      	movs	r2, #67	@ 0x43
 8006c02:	2101      	movs	r1, #1
 8006c04:	5499      	strb	r1, [r3, r2]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2244      	movs	r2, #68	@ 0x44
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	5499      	strb	r1, [r3, r2]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2245      	movs	r2, #69	@ 0x45
 8006c12:	2101      	movs	r1, #1
 8006c14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	223d      	movs	r2, #61	@ 0x3d
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	0018      	movs	r0, r3
 8006c22:	46bd      	mov	sp, r7
 8006c24:	b002      	add	sp, #8
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006c30:	46c0      	nop			@ (mov r8, r8)
 8006c32:	46bd      	mov	sp, r7
 8006c34:	b002      	add	sp, #8
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d108      	bne.n	8006c5a <HAL_TIM_OC_Start+0x22>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	223e      	movs	r2, #62	@ 0x3e
 8006c4c:	5c9b      	ldrb	r3, [r3, r2]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	3b01      	subs	r3, #1
 8006c52:	1e5a      	subs	r2, r3, #1
 8006c54:	4193      	sbcs	r3, r2
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	e01f      	b.n	8006c9a <HAL_TIM_OC_Start+0x62>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d108      	bne.n	8006c72 <HAL_TIM_OC_Start+0x3a>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	223f      	movs	r2, #63	@ 0x3f
 8006c64:	5c9b      	ldrb	r3, [r3, r2]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	1e5a      	subs	r2, r3, #1
 8006c6c:	4193      	sbcs	r3, r2
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	e013      	b.n	8006c9a <HAL_TIM_OC_Start+0x62>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d108      	bne.n	8006c8a <HAL_TIM_OC_Start+0x52>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2240      	movs	r2, #64	@ 0x40
 8006c7c:	5c9b      	ldrb	r3, [r3, r2]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	3b01      	subs	r3, #1
 8006c82:	1e5a      	subs	r2, r3, #1
 8006c84:	4193      	sbcs	r3, r2
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	e007      	b.n	8006c9a <HAL_TIM_OC_Start+0x62>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2241      	movs	r2, #65	@ 0x41
 8006c8e:	5c9b      	ldrb	r3, [r3, r2]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	3b01      	subs	r3, #1
 8006c94:	1e5a      	subs	r2, r3, #1
 8006c96:	4193      	sbcs	r3, r2
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <HAL_TIM_OC_Start+0x6a>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e06e      	b.n	8006d80 <HAL_TIM_OC_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d104      	bne.n	8006cb2 <HAL_TIM_OC_Start+0x7a>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	223e      	movs	r2, #62	@ 0x3e
 8006cac:	2102      	movs	r1, #2
 8006cae:	5499      	strb	r1, [r3, r2]
 8006cb0:	e013      	b.n	8006cda <HAL_TIM_OC_Start+0xa2>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d104      	bne.n	8006cc2 <HAL_TIM_OC_Start+0x8a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	223f      	movs	r2, #63	@ 0x3f
 8006cbc:	2102      	movs	r1, #2
 8006cbe:	5499      	strb	r1, [r3, r2]
 8006cc0:	e00b      	b.n	8006cda <HAL_TIM_OC_Start+0xa2>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d104      	bne.n	8006cd2 <HAL_TIM_OC_Start+0x9a>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2240      	movs	r2, #64	@ 0x40
 8006ccc:	2102      	movs	r1, #2
 8006cce:	5499      	strb	r1, [r3, r2]
 8006cd0:	e003      	b.n	8006cda <HAL_TIM_OC_Start+0xa2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2241      	movs	r2, #65	@ 0x41
 8006cd6:	2102      	movs	r1, #2
 8006cd8:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f001 f8d2 	bl	8007e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a26      	ldr	r2, [pc, #152]	@ (8006d88 <HAL_TIM_OC_Start+0x150>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00e      	beq.n	8006d10 <HAL_TIM_OC_Start+0xd8>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a25      	ldr	r2, [pc, #148]	@ (8006d8c <HAL_TIM_OC_Start+0x154>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d009      	beq.n	8006d10 <HAL_TIM_OC_Start+0xd8>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a23      	ldr	r2, [pc, #140]	@ (8006d90 <HAL_TIM_OC_Start+0x158>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_TIM_OC_Start+0xd8>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a22      	ldr	r2, [pc, #136]	@ (8006d94 <HAL_TIM_OC_Start+0x15c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d101      	bne.n	8006d14 <HAL_TIM_OC_Start+0xdc>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <HAL_TIM_OC_Start+0xde>
 8006d14:	2300      	movs	r3, #0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d008      	beq.n	8006d2c <HAL_TIM_OC_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2180      	movs	r1, #128	@ 0x80
 8006d26:	0209      	lsls	r1, r1, #8
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a15      	ldr	r2, [pc, #84]	@ (8006d88 <HAL_TIM_OC_Start+0x150>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d009      	beq.n	8006d4a <HAL_TIM_OC_Start+0x112>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a17      	ldr	r2, [pc, #92]	@ (8006d98 <HAL_TIM_OC_Start+0x160>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d004      	beq.n	8006d4a <HAL_TIM_OC_Start+0x112>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a11      	ldr	r2, [pc, #68]	@ (8006d8c <HAL_TIM_OC_Start+0x154>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d111      	bne.n	8006d6e <HAL_TIM_OC_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2207      	movs	r2, #7
 8006d52:	4013      	ands	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b06      	cmp	r3, #6
 8006d5a:	d010      	beq.n	8006d7e <HAL_TIM_OC_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2101      	movs	r1, #1
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6c:	e007      	b.n	8006d7e <HAL_TIM_OC_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2101      	movs	r1, #1
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	0018      	movs	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	b004      	add	sp, #16
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	40012c00 	.word	0x40012c00
 8006d8c:	40014000 	.word	0x40014000
 8006d90:	40014400 	.word	0x40014400
 8006d94:	40014800 	.word	0x40014800
 8006d98:	40000400 	.word	0x40000400

08006d9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e042      	b.n	8006e34 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	223d      	movs	r2, #61	@ 0x3d
 8006db2:	5c9b      	ldrb	r3, [r3, r2]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d107      	bne.n	8006dca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	223c      	movs	r2, #60	@ 0x3c
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f000 f839 	bl	8006e3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	223d      	movs	r2, #61	@ 0x3d
 8006dce:	2102      	movs	r1, #2
 8006dd0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	0019      	movs	r1, r3
 8006ddc:	0010      	movs	r0, r2
 8006dde:	f000 fca9 	bl	8007734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2246      	movs	r2, #70	@ 0x46
 8006de6:	2101      	movs	r1, #1
 8006de8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	223e      	movs	r2, #62	@ 0x3e
 8006dee:	2101      	movs	r1, #1
 8006df0:	5499      	strb	r1, [r3, r2]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	223f      	movs	r2, #63	@ 0x3f
 8006df6:	2101      	movs	r1, #1
 8006df8:	5499      	strb	r1, [r3, r2]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2240      	movs	r2, #64	@ 0x40
 8006dfe:	2101      	movs	r1, #1
 8006e00:	5499      	strb	r1, [r3, r2]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2241      	movs	r2, #65	@ 0x41
 8006e06:	2101      	movs	r1, #1
 8006e08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2242      	movs	r2, #66	@ 0x42
 8006e0e:	2101      	movs	r1, #1
 8006e10:	5499      	strb	r1, [r3, r2]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2243      	movs	r2, #67	@ 0x43
 8006e16:	2101      	movs	r1, #1
 8006e18:	5499      	strb	r1, [r3, r2]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2244      	movs	r2, #68	@ 0x44
 8006e1e:	2101      	movs	r1, #1
 8006e20:	5499      	strb	r1, [r3, r2]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2245      	movs	r2, #69	@ 0x45
 8006e26:	2101      	movs	r1, #1
 8006e28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	223d      	movs	r2, #61	@ 0x3d
 8006e2e:	2101      	movs	r1, #1
 8006e30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	0018      	movs	r0, r3
 8006e36:	46bd      	mov	sp, r7
 8006e38:	b002      	add	sp, #8
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e44:	46c0      	nop			@ (mov r8, r8)
 8006e46:	46bd      	mov	sp, r7
 8006e48:	b002      	add	sp, #8
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d108      	bne.n	8006e6e <HAL_TIM_PWM_Start+0x22>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	223e      	movs	r2, #62	@ 0x3e
 8006e60:	5c9b      	ldrb	r3, [r3, r2]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	1e5a      	subs	r2, r3, #1
 8006e68:	4193      	sbcs	r3, r2
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	e01f      	b.n	8006eae <HAL_TIM_PWM_Start+0x62>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	d108      	bne.n	8006e86 <HAL_TIM_PWM_Start+0x3a>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	223f      	movs	r2, #63	@ 0x3f
 8006e78:	5c9b      	ldrb	r3, [r3, r2]
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	1e5a      	subs	r2, r3, #1
 8006e80:	4193      	sbcs	r3, r2
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	e013      	b.n	8006eae <HAL_TIM_PWM_Start+0x62>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d108      	bne.n	8006e9e <HAL_TIM_PWM_Start+0x52>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2240      	movs	r2, #64	@ 0x40
 8006e90:	5c9b      	ldrb	r3, [r3, r2]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	3b01      	subs	r3, #1
 8006e96:	1e5a      	subs	r2, r3, #1
 8006e98:	4193      	sbcs	r3, r2
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	e007      	b.n	8006eae <HAL_TIM_PWM_Start+0x62>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2241      	movs	r2, #65	@ 0x41
 8006ea2:	5c9b      	ldrb	r3, [r3, r2]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	1e5a      	subs	r2, r3, #1
 8006eaa:	4193      	sbcs	r3, r2
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e06e      	b.n	8006f94 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d104      	bne.n	8006ec6 <HAL_TIM_PWM_Start+0x7a>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	223e      	movs	r2, #62	@ 0x3e
 8006ec0:	2102      	movs	r1, #2
 8006ec2:	5499      	strb	r1, [r3, r2]
 8006ec4:	e013      	b.n	8006eee <HAL_TIM_PWM_Start+0xa2>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d104      	bne.n	8006ed6 <HAL_TIM_PWM_Start+0x8a>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	223f      	movs	r2, #63	@ 0x3f
 8006ed0:	2102      	movs	r1, #2
 8006ed2:	5499      	strb	r1, [r3, r2]
 8006ed4:	e00b      	b.n	8006eee <HAL_TIM_PWM_Start+0xa2>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d104      	bne.n	8006ee6 <HAL_TIM_PWM_Start+0x9a>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2240      	movs	r2, #64	@ 0x40
 8006ee0:	2102      	movs	r1, #2
 8006ee2:	5499      	strb	r1, [r3, r2]
 8006ee4:	e003      	b.n	8006eee <HAL_TIM_PWM_Start+0xa2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2241      	movs	r2, #65	@ 0x41
 8006eea:	2102      	movs	r1, #2
 8006eec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	f000 ffc8 	bl	8007e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a26      	ldr	r2, [pc, #152]	@ (8006f9c <HAL_TIM_PWM_Start+0x150>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00e      	beq.n	8006f24 <HAL_TIM_PWM_Start+0xd8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a25      	ldr	r2, [pc, #148]	@ (8006fa0 <HAL_TIM_PWM_Start+0x154>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d009      	beq.n	8006f24 <HAL_TIM_PWM_Start+0xd8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a23      	ldr	r2, [pc, #140]	@ (8006fa4 <HAL_TIM_PWM_Start+0x158>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d004      	beq.n	8006f24 <HAL_TIM_PWM_Start+0xd8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a22      	ldr	r2, [pc, #136]	@ (8006fa8 <HAL_TIM_PWM_Start+0x15c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d101      	bne.n	8006f28 <HAL_TIM_PWM_Start+0xdc>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <HAL_TIM_PWM_Start+0xde>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2180      	movs	r1, #128	@ 0x80
 8006f3a:	0209      	lsls	r1, r1, #8
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a15      	ldr	r2, [pc, #84]	@ (8006f9c <HAL_TIM_PWM_Start+0x150>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d009      	beq.n	8006f5e <HAL_TIM_PWM_Start+0x112>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a17      	ldr	r2, [pc, #92]	@ (8006fac <HAL_TIM_PWM_Start+0x160>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d004      	beq.n	8006f5e <HAL_TIM_PWM_Start+0x112>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a11      	ldr	r2, [pc, #68]	@ (8006fa0 <HAL_TIM_PWM_Start+0x154>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d111      	bne.n	8006f82 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	2207      	movs	r2, #7
 8006f66:	4013      	ands	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b06      	cmp	r3, #6
 8006f6e:	d010      	beq.n	8006f92 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f80:	e007      	b.n	8006f92 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	0018      	movs	r0, r3
 8006f96:	46bd      	mov	sp, r7
 8006f98:	b004      	add	sp, #16
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	40012c00 	.word	0x40012c00
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	40014400 	.word	0x40014400
 8006fa8:	40014800 	.word	0x40014800
 8006fac:	40000400 	.word	0x40000400

08006fb0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f000 ff62 	bl	8007e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800708c <HAL_TIM_PWM_Stop+0xdc>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00e      	beq.n	8006ff0 <HAL_TIM_PWM_Stop+0x40>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a2e      	ldr	r2, [pc, #184]	@ (8007090 <HAL_TIM_PWM_Stop+0xe0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d009      	beq.n	8006ff0 <HAL_TIM_PWM_Stop+0x40>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a2c      	ldr	r2, [pc, #176]	@ (8007094 <HAL_TIM_PWM_Stop+0xe4>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_TIM_PWM_Stop+0x40>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a2b      	ldr	r2, [pc, #172]	@ (8007098 <HAL_TIM_PWM_Stop+0xe8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d101      	bne.n	8006ff4 <HAL_TIM_PWM_Stop+0x44>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e000      	b.n	8006ff6 <HAL_TIM_PWM_Stop+0x46>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d013      	beq.n	8007022 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	4a26      	ldr	r2, [pc, #152]	@ (800709c <HAL_TIM_PWM_Stop+0xec>)
 8007002:	4013      	ands	r3, r2
 8007004:	d10d      	bne.n	8007022 <HAL_TIM_PWM_Stop+0x72>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	4a24      	ldr	r2, [pc, #144]	@ (80070a0 <HAL_TIM_PWM_Stop+0xf0>)
 800700e:	4013      	ands	r3, r2
 8007010:	d107      	bne.n	8007022 <HAL_TIM_PWM_Stop+0x72>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4921      	ldr	r1, [pc, #132]	@ (80070a4 <HAL_TIM_PWM_Stop+0xf4>)
 800701e:	400a      	ands	r2, r1
 8007020:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	4a1c      	ldr	r2, [pc, #112]	@ (800709c <HAL_TIM_PWM_Stop+0xec>)
 800702a:	4013      	ands	r3, r2
 800702c:	d10d      	bne.n	800704a <HAL_TIM_PWM_Stop+0x9a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	4a1a      	ldr	r2, [pc, #104]	@ (80070a0 <HAL_TIM_PWM_Stop+0xf0>)
 8007036:	4013      	ands	r3, r2
 8007038:	d107      	bne.n	800704a <HAL_TIM_PWM_Stop+0x9a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2101      	movs	r1, #1
 8007046:	438a      	bics	r2, r1
 8007048:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <HAL_TIM_PWM_Stop+0xaa>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	223e      	movs	r2, #62	@ 0x3e
 8007054:	2101      	movs	r1, #1
 8007056:	5499      	strb	r1, [r3, r2]
 8007058:	e013      	b.n	8007082 <HAL_TIM_PWM_Stop+0xd2>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b04      	cmp	r3, #4
 800705e:	d104      	bne.n	800706a <HAL_TIM_PWM_Stop+0xba>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	223f      	movs	r2, #63	@ 0x3f
 8007064:	2101      	movs	r1, #1
 8007066:	5499      	strb	r1, [r3, r2]
 8007068:	e00b      	b.n	8007082 <HAL_TIM_PWM_Stop+0xd2>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b08      	cmp	r3, #8
 800706e:	d104      	bne.n	800707a <HAL_TIM_PWM_Stop+0xca>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2240      	movs	r2, #64	@ 0x40
 8007074:	2101      	movs	r1, #1
 8007076:	5499      	strb	r1, [r3, r2]
 8007078:	e003      	b.n	8007082 <HAL_TIM_PWM_Stop+0xd2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2241      	movs	r2, #65	@ 0x41
 800707e:	2101      	movs	r1, #1
 8007080:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	0018      	movs	r0, r3
 8007086:	46bd      	mov	sp, r7
 8007088:	b002      	add	sp, #8
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40012c00 	.word	0x40012c00
 8007090:	40014000 	.word	0x40014000
 8007094:	40014400 	.word	0x40014400
 8007098:	40014800 	.word	0x40014800
 800709c:	00001111 	.word	0x00001111
 80070a0:	00000444 	.word	0x00000444
 80070a4:	ffff7fff 	.word	0xffff7fff

080070a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2202      	movs	r2, #2
 80070c4:	4013      	ands	r3, r2
 80070c6:	d021      	beq.n	800710c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2202      	movs	r2, #2
 80070cc:	4013      	ands	r3, r2
 80070ce:	d01d      	beq.n	800710c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2203      	movs	r2, #3
 80070d6:	4252      	negs	r2, r2
 80070d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	2203      	movs	r2, #3
 80070e8:	4013      	ands	r3, r2
 80070ea:	d004      	beq.n	80070f6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	0018      	movs	r0, r3
 80070f0:	f000 fb08 	bl	8007704 <HAL_TIM_IC_CaptureCallback>
 80070f4:	e007      	b.n	8007106 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	0018      	movs	r0, r3
 80070fa:	f000 fafb 	bl	80076f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	0018      	movs	r0, r3
 8007102:	f000 fb07 	bl	8007714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2204      	movs	r2, #4
 8007110:	4013      	ands	r3, r2
 8007112:	d022      	beq.n	800715a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2204      	movs	r2, #4
 8007118:	4013      	ands	r3, r2
 800711a:	d01e      	beq.n	800715a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2205      	movs	r2, #5
 8007122:	4252      	negs	r2, r2
 8007124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2202      	movs	r2, #2
 800712a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699a      	ldr	r2, [r3, #24]
 8007132:	23c0      	movs	r3, #192	@ 0xc0
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4013      	ands	r3, r2
 8007138:	d004      	beq.n	8007144 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	0018      	movs	r0, r3
 800713e:	f000 fae1 	bl	8007704 <HAL_TIM_IC_CaptureCallback>
 8007142:	e007      	b.n	8007154 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	0018      	movs	r0, r3
 8007148:	f000 fad4 	bl	80076f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	0018      	movs	r0, r3
 8007150:	f000 fae0 	bl	8007714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2208      	movs	r2, #8
 800715e:	4013      	ands	r3, r2
 8007160:	d021      	beq.n	80071a6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2208      	movs	r2, #8
 8007166:	4013      	ands	r3, r2
 8007168:	d01d      	beq.n	80071a6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2209      	movs	r2, #9
 8007170:	4252      	negs	r2, r2
 8007172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2204      	movs	r2, #4
 8007178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	2203      	movs	r2, #3
 8007182:	4013      	ands	r3, r2
 8007184:	d004      	beq.n	8007190 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	0018      	movs	r0, r3
 800718a:	f000 fabb 	bl	8007704 <HAL_TIM_IC_CaptureCallback>
 800718e:	e007      	b.n	80071a0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	0018      	movs	r0, r3
 8007194:	f000 faae 	bl	80076f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	0018      	movs	r0, r3
 800719c:	f000 faba 	bl	8007714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2210      	movs	r2, #16
 80071aa:	4013      	ands	r3, r2
 80071ac:	d022      	beq.n	80071f4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2210      	movs	r2, #16
 80071b2:	4013      	ands	r3, r2
 80071b4:	d01e      	beq.n	80071f4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2211      	movs	r2, #17
 80071bc:	4252      	negs	r2, r2
 80071be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2208      	movs	r2, #8
 80071c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69da      	ldr	r2, [r3, #28]
 80071cc:	23c0      	movs	r3, #192	@ 0xc0
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4013      	ands	r3, r2
 80071d2:	d004      	beq.n	80071de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	0018      	movs	r0, r3
 80071d8:	f000 fa94 	bl	8007704 <HAL_TIM_IC_CaptureCallback>
 80071dc:	e007      	b.n	80071ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	0018      	movs	r0, r3
 80071e2:	f000 fa87 	bl	80076f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	0018      	movs	r0, r3
 80071ea:	f000 fa93 	bl	8007714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2201      	movs	r2, #1
 80071f8:	4013      	ands	r3, r2
 80071fa:	d00c      	beq.n	8007216 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	4013      	ands	r3, r2
 8007202:	d008      	beq.n	8007216 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2202      	movs	r2, #2
 800720a:	4252      	negs	r2, r2
 800720c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	0018      	movs	r0, r3
 8007212:	f7fb fe6b 	bl	8002eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2280      	movs	r2, #128	@ 0x80
 800721a:	4013      	ands	r3, r2
 800721c:	d00c      	beq.n	8007238 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2280      	movs	r2, #128	@ 0x80
 8007222:	4013      	ands	r3, r2
 8007224:	d008      	beq.n	8007238 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2281      	movs	r2, #129	@ 0x81
 800722c:	4252      	negs	r2, r2
 800722e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	0018      	movs	r0, r3
 8007234:	f000 ffa2 	bl	800817c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2240      	movs	r2, #64	@ 0x40
 800723c:	4013      	ands	r3, r2
 800723e:	d00c      	beq.n	800725a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2240      	movs	r2, #64	@ 0x40
 8007244:	4013      	ands	r3, r2
 8007246:	d008      	beq.n	800725a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2241      	movs	r2, #65	@ 0x41
 800724e:	4252      	negs	r2, r2
 8007250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	0018      	movs	r0, r3
 8007256:	f000 fa65 	bl	8007724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2220      	movs	r2, #32
 800725e:	4013      	ands	r3, r2
 8007260:	d00c      	beq.n	800727c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2220      	movs	r2, #32
 8007266:	4013      	ands	r3, r2
 8007268:	d008      	beq.n	800727c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2221      	movs	r2, #33	@ 0x21
 8007270:	4252      	negs	r2, r2
 8007272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	0018      	movs	r0, r3
 8007278:	f000 ff78 	bl	800816c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800727c:	46c0      	nop			@ (mov r8, r8)
 800727e:	46bd      	mov	sp, r7
 8007280:	b004      	add	sp, #16
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007290:	2317      	movs	r3, #23
 8007292:	18fb      	adds	r3, r7, r3
 8007294:	2200      	movs	r2, #0
 8007296:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	223c      	movs	r2, #60	@ 0x3c
 800729c:	5c9b      	ldrb	r3, [r3, r2]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <HAL_TIM_OC_ConfigChannel+0x22>
 80072a2:	2302      	movs	r3, #2
 80072a4:	e042      	b.n	800732c <HAL_TIM_OC_ConfigChannel+0xa8>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	223c      	movs	r2, #60	@ 0x3c
 80072aa:	2101      	movs	r1, #1
 80072ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b0c      	cmp	r3, #12
 80072b2:	d027      	beq.n	8007304 <HAL_TIM_OC_ConfigChannel+0x80>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b0c      	cmp	r3, #12
 80072b8:	d82c      	bhi.n	8007314 <HAL_TIM_OC_ConfigChannel+0x90>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d019      	beq.n	80072f4 <HAL_TIM_OC_ConfigChannel+0x70>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b08      	cmp	r3, #8
 80072c4:	d826      	bhi.n	8007314 <HAL_TIM_OC_ConfigChannel+0x90>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <HAL_TIM_OC_ConfigChannel+0x50>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d008      	beq.n	80072e4 <HAL_TIM_OC_ConfigChannel+0x60>
 80072d2:	e01f      	b.n	8007314 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	0011      	movs	r1, r2
 80072dc:	0018      	movs	r0, r3
 80072de:	f000 faad 	bl	800783c <TIM_OC1_SetConfig>
      break;
 80072e2:	e01c      	b.n	800731e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	0011      	movs	r1, r2
 80072ec:	0018      	movs	r0, r3
 80072ee:	f000 fb2d 	bl	800794c <TIM_OC2_SetConfig>
      break;
 80072f2:	e014      	b.n	800731e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	0011      	movs	r1, r2
 80072fc:	0018      	movs	r0, r3
 80072fe:	f000 fba9 	bl	8007a54 <TIM_OC3_SetConfig>
      break;
 8007302:	e00c      	b.n	800731e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	0011      	movs	r1, r2
 800730c:	0018      	movs	r0, r3
 800730e:	f000 fc27 	bl	8007b60 <TIM_OC4_SetConfig>
      break;
 8007312:	e004      	b.n	800731e <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8007314:	2317      	movs	r3, #23
 8007316:	18fb      	adds	r3, r7, r3
 8007318:	2201      	movs	r2, #1
 800731a:	701a      	strb	r2, [r3, #0]
      break;
 800731c:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	223c      	movs	r2, #60	@ 0x3c
 8007322:	2100      	movs	r1, #0
 8007324:	5499      	strb	r1, [r3, r2]

  return status;
 8007326:	2317      	movs	r3, #23
 8007328:	18fb      	adds	r3, r7, r3
 800732a:	781b      	ldrb	r3, [r3, #0]
}
 800732c:	0018      	movs	r0, r3
 800732e:	46bd      	mov	sp, r7
 8007330:	b006      	add	sp, #24
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007340:	2317      	movs	r3, #23
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	2200      	movs	r2, #0
 8007346:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	223c      	movs	r2, #60	@ 0x3c
 800734c:	5c9b      	ldrb	r3, [r3, r2]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <HAL_TIM_PWM_ConfigChannel+0x22>
 8007352:	2302      	movs	r3, #2
 8007354:	e0ad      	b.n	80074b2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	223c      	movs	r2, #60	@ 0x3c
 800735a:	2101      	movs	r1, #1
 800735c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b0c      	cmp	r3, #12
 8007362:	d100      	bne.n	8007366 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007364:	e076      	b.n	8007454 <HAL_TIM_PWM_ConfigChannel+0x120>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b0c      	cmp	r3, #12
 800736a:	d900      	bls.n	800736e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800736c:	e095      	b.n	800749a <HAL_TIM_PWM_ConfigChannel+0x166>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b08      	cmp	r3, #8
 8007372:	d04e      	beq.n	8007412 <HAL_TIM_PWM_ConfigChannel+0xde>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b08      	cmp	r3, #8
 8007378:	d900      	bls.n	800737c <HAL_TIM_PWM_ConfigChannel+0x48>
 800737a:	e08e      	b.n	800749a <HAL_TIM_PWM_ConfigChannel+0x166>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <HAL_TIM_PWM_ConfigChannel+0x56>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b04      	cmp	r3, #4
 8007386:	d021      	beq.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x98>
 8007388:	e087      	b.n	800749a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	0011      	movs	r1, r2
 8007392:	0018      	movs	r0, r3
 8007394:	f000 fa52 	bl	800783c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2108      	movs	r1, #8
 80073a4:	430a      	orrs	r2, r1
 80073a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2104      	movs	r1, #4
 80073b4:	438a      	bics	r2, r1
 80073b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6999      	ldr	r1, [r3, #24]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	691a      	ldr	r2, [r3, #16]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	619a      	str	r2, [r3, #24]
      break;
 80073ca:	e06b      	b.n	80074a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	0011      	movs	r1, r2
 80073d4:	0018      	movs	r0, r3
 80073d6:	f000 fab9 	bl	800794c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699a      	ldr	r2, [r3, #24]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2180      	movs	r1, #128	@ 0x80
 80073e6:	0109      	lsls	r1, r1, #4
 80073e8:	430a      	orrs	r2, r1
 80073ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699a      	ldr	r2, [r3, #24]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4931      	ldr	r1, [pc, #196]	@ (80074bc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80073f8:	400a      	ands	r2, r1
 80073fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6999      	ldr	r1, [r3, #24]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	021a      	lsls	r2, r3, #8
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	619a      	str	r2, [r3, #24]
      break;
 8007410:	e048      	b.n	80074a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	0011      	movs	r1, r2
 800741a:	0018      	movs	r0, r3
 800741c:	f000 fb1a 	bl	8007a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	69da      	ldr	r2, [r3, #28]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2108      	movs	r1, #8
 800742c:	430a      	orrs	r2, r1
 800742e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	69da      	ldr	r2, [r3, #28]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2104      	movs	r1, #4
 800743c:	438a      	bics	r2, r1
 800743e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	69d9      	ldr	r1, [r3, #28]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	691a      	ldr	r2, [r3, #16]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	61da      	str	r2, [r3, #28]
      break;
 8007452:	e027      	b.n	80074a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	0011      	movs	r1, r2
 800745c:	0018      	movs	r0, r3
 800745e:	f000 fb7f 	bl	8007b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69da      	ldr	r2, [r3, #28]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2180      	movs	r1, #128	@ 0x80
 800746e:	0109      	lsls	r1, r1, #4
 8007470:	430a      	orrs	r2, r1
 8007472:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	69da      	ldr	r2, [r3, #28]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	490f      	ldr	r1, [pc, #60]	@ (80074bc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007480:	400a      	ands	r2, r1
 8007482:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	69d9      	ldr	r1, [r3, #28]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	021a      	lsls	r2, r3, #8
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	61da      	str	r2, [r3, #28]
      break;
 8007498:	e004      	b.n	80074a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800749a:	2317      	movs	r3, #23
 800749c:	18fb      	adds	r3, r7, r3
 800749e:	2201      	movs	r2, #1
 80074a0:	701a      	strb	r2, [r3, #0]
      break;
 80074a2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	223c      	movs	r2, #60	@ 0x3c
 80074a8:	2100      	movs	r1, #0
 80074aa:	5499      	strb	r1, [r3, r2]

  return status;
 80074ac:	2317      	movs	r3, #23
 80074ae:	18fb      	adds	r3, r7, r3
 80074b0:	781b      	ldrb	r3, [r3, #0]
}
 80074b2:	0018      	movs	r0, r3
 80074b4:	46bd      	mov	sp, r7
 80074b6:	b006      	add	sp, #24
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	46c0      	nop			@ (mov r8, r8)
 80074bc:	fffffbff 	.word	0xfffffbff

080074c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074ca:	230f      	movs	r3, #15
 80074cc:	18fb      	adds	r3, r7, r3
 80074ce:	2200      	movs	r2, #0
 80074d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	223c      	movs	r2, #60	@ 0x3c
 80074d6:	5c9b      	ldrb	r3, [r3, r2]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_TIM_ConfigClockSource+0x20>
 80074dc:	2302      	movs	r3, #2
 80074de:	e0bc      	b.n	800765a <HAL_TIM_ConfigClockSource+0x19a>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	223c      	movs	r2, #60	@ 0x3c
 80074e4:	2101      	movs	r1, #1
 80074e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	223d      	movs	r2, #61	@ 0x3d
 80074ec:	2102      	movs	r1, #2
 80074ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2277      	movs	r2, #119	@ 0x77
 80074fc:	4393      	bics	r3, r2
 80074fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4a58      	ldr	r2, [pc, #352]	@ (8007664 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007504:	4013      	ands	r3, r2
 8007506:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2280      	movs	r2, #128	@ 0x80
 8007516:	0192      	lsls	r2, r2, #6
 8007518:	4293      	cmp	r3, r2
 800751a:	d040      	beq.n	800759e <HAL_TIM_ConfigClockSource+0xde>
 800751c:	2280      	movs	r2, #128	@ 0x80
 800751e:	0192      	lsls	r2, r2, #6
 8007520:	4293      	cmp	r3, r2
 8007522:	d900      	bls.n	8007526 <HAL_TIM_ConfigClockSource+0x66>
 8007524:	e088      	b.n	8007638 <HAL_TIM_ConfigClockSource+0x178>
 8007526:	2280      	movs	r2, #128	@ 0x80
 8007528:	0152      	lsls	r2, r2, #5
 800752a:	4293      	cmp	r3, r2
 800752c:	d100      	bne.n	8007530 <HAL_TIM_ConfigClockSource+0x70>
 800752e:	e088      	b.n	8007642 <HAL_TIM_ConfigClockSource+0x182>
 8007530:	2280      	movs	r2, #128	@ 0x80
 8007532:	0152      	lsls	r2, r2, #5
 8007534:	4293      	cmp	r3, r2
 8007536:	d900      	bls.n	800753a <HAL_TIM_ConfigClockSource+0x7a>
 8007538:	e07e      	b.n	8007638 <HAL_TIM_ConfigClockSource+0x178>
 800753a:	2b70      	cmp	r3, #112	@ 0x70
 800753c:	d018      	beq.n	8007570 <HAL_TIM_ConfigClockSource+0xb0>
 800753e:	d900      	bls.n	8007542 <HAL_TIM_ConfigClockSource+0x82>
 8007540:	e07a      	b.n	8007638 <HAL_TIM_ConfigClockSource+0x178>
 8007542:	2b60      	cmp	r3, #96	@ 0x60
 8007544:	d04f      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x126>
 8007546:	d900      	bls.n	800754a <HAL_TIM_ConfigClockSource+0x8a>
 8007548:	e076      	b.n	8007638 <HAL_TIM_ConfigClockSource+0x178>
 800754a:	2b50      	cmp	r3, #80	@ 0x50
 800754c:	d03b      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0x106>
 800754e:	d900      	bls.n	8007552 <HAL_TIM_ConfigClockSource+0x92>
 8007550:	e072      	b.n	8007638 <HAL_TIM_ConfigClockSource+0x178>
 8007552:	2b40      	cmp	r3, #64	@ 0x40
 8007554:	d057      	beq.n	8007606 <HAL_TIM_ConfigClockSource+0x146>
 8007556:	d900      	bls.n	800755a <HAL_TIM_ConfigClockSource+0x9a>
 8007558:	e06e      	b.n	8007638 <HAL_TIM_ConfigClockSource+0x178>
 800755a:	2b30      	cmp	r3, #48	@ 0x30
 800755c:	d063      	beq.n	8007626 <HAL_TIM_ConfigClockSource+0x166>
 800755e:	d86b      	bhi.n	8007638 <HAL_TIM_ConfigClockSource+0x178>
 8007560:	2b20      	cmp	r3, #32
 8007562:	d060      	beq.n	8007626 <HAL_TIM_ConfigClockSource+0x166>
 8007564:	d868      	bhi.n	8007638 <HAL_TIM_ConfigClockSource+0x178>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d05d      	beq.n	8007626 <HAL_TIM_ConfigClockSource+0x166>
 800756a:	2b10      	cmp	r3, #16
 800756c:	d05b      	beq.n	8007626 <HAL_TIM_ConfigClockSource+0x166>
 800756e:	e063      	b.n	8007638 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007580:	f000 fc64 	bl	8007e4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2277      	movs	r2, #119	@ 0x77
 8007590:	4313      	orrs	r3, r2
 8007592:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	609a      	str	r2, [r3, #8]
      break;
 800759c:	e052      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075ae:	f000 fc4d 	bl	8007e4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2180      	movs	r1, #128	@ 0x80
 80075be:	01c9      	lsls	r1, r1, #7
 80075c0:	430a      	orrs	r2, r1
 80075c2:	609a      	str	r2, [r3, #8]
      break;
 80075c4:	e03e      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075d2:	001a      	movs	r2, r3
 80075d4:	f000 fbc0 	bl	8007d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2150      	movs	r1, #80	@ 0x50
 80075de:	0018      	movs	r0, r3
 80075e0:	f000 fc1a 	bl	8007e18 <TIM_ITRx_SetConfig>
      break;
 80075e4:	e02e      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075f2:	001a      	movs	r2, r3
 80075f4:	f000 fbde 	bl	8007db4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2160      	movs	r1, #96	@ 0x60
 80075fe:	0018      	movs	r0, r3
 8007600:	f000 fc0a 	bl	8007e18 <TIM_ITRx_SetConfig>
      break;
 8007604:	e01e      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007612:	001a      	movs	r2, r3
 8007614:	f000 fba0 	bl	8007d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2140      	movs	r1, #64	@ 0x40
 800761e:	0018      	movs	r0, r3
 8007620:	f000 fbfa 	bl	8007e18 <TIM_ITRx_SetConfig>
      break;
 8007624:	e00e      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	0019      	movs	r1, r3
 8007630:	0010      	movs	r0, r2
 8007632:	f000 fbf1 	bl	8007e18 <TIM_ITRx_SetConfig>
      break;
 8007636:	e005      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007638:	230f      	movs	r3, #15
 800763a:	18fb      	adds	r3, r7, r3
 800763c:	2201      	movs	r2, #1
 800763e:	701a      	strb	r2, [r3, #0]
      break;
 8007640:	e000      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007642:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	223d      	movs	r2, #61	@ 0x3d
 8007648:	2101      	movs	r1, #1
 800764a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	223c      	movs	r2, #60	@ 0x3c
 8007650:	2100      	movs	r1, #0
 8007652:	5499      	strb	r1, [r3, r2]

  return status;
 8007654:	230f      	movs	r3, #15
 8007656:	18fb      	adds	r3, r7, r3
 8007658:	781b      	ldrb	r3, [r3, #0]
}
 800765a:	0018      	movs	r0, r3
 800765c:	46bd      	mov	sp, r7
 800765e:	b004      	add	sp, #16
 8007660:	bd80      	pop	{r7, pc}
 8007662:	46c0      	nop			@ (mov r8, r8)
 8007664:	ffff00ff 	.word	0xffff00ff

08007668 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	223c      	movs	r2, #60	@ 0x3c
 8007676:	5c9b      	ldrb	r3, [r3, r2]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_TIM_SlaveConfigSynchro+0x18>
 800767c:	2302      	movs	r3, #2
 800767e:	e032      	b.n	80076e6 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	223c      	movs	r2, #60	@ 0x3c
 8007684:	2101      	movs	r1, #1
 8007686:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	223d      	movs	r2, #61	@ 0x3d
 800768c:	2102      	movs	r1, #2
 800768e:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	0011      	movs	r1, r2
 8007696:	0018      	movs	r0, r3
 8007698:	f000 facc 	bl	8007c34 <TIM_SlaveTimer_SetConfig>
 800769c:	1e03      	subs	r3, r0, #0
 800769e:	d009      	beq.n	80076b4 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	223d      	movs	r2, #61	@ 0x3d
 80076a4:	2101      	movs	r1, #1
 80076a6:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	223c      	movs	r2, #60	@ 0x3c
 80076ac:	2100      	movs	r1, #0
 80076ae:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e018      	b.n	80076e6 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2140      	movs	r1, #64	@ 0x40
 80076c0:	438a      	bics	r2, r1
 80076c2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4908      	ldr	r1, [pc, #32]	@ (80076f0 <HAL_TIM_SlaveConfigSynchro+0x88>)
 80076d0:	400a      	ands	r2, r1
 80076d2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	223d      	movs	r2, #61	@ 0x3d
 80076d8:	2101      	movs	r1, #1
 80076da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	223c      	movs	r2, #60	@ 0x3c
 80076e0:	2100      	movs	r1, #0
 80076e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	0018      	movs	r0, r3
 80076e8:	46bd      	mov	sp, r7
 80076ea:	b002      	add	sp, #8
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	46c0      	nop			@ (mov r8, r8)
 80076f0:	ffffbfff 	.word	0xffffbfff

080076f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076fc:	46c0      	nop			@ (mov r8, r8)
 80076fe:	46bd      	mov	sp, r7
 8007700:	b002      	add	sp, #8
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800770c:	46c0      	nop			@ (mov r8, r8)
 800770e:	46bd      	mov	sp, r7
 8007710:	b002      	add	sp, #8
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800771c:	46c0      	nop			@ (mov r8, r8)
 800771e:	46bd      	mov	sp, r7
 8007720:	b002      	add	sp, #8
 8007722:	bd80      	pop	{r7, pc}

08007724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800772c:	46c0      	nop			@ (mov r8, r8)
 800772e:	46bd      	mov	sp, r7
 8007730:	b002      	add	sp, #8
 8007732:	bd80      	pop	{r7, pc}

08007734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a36      	ldr	r2, [pc, #216]	@ (8007820 <TIM_Base_SetConfig+0xec>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d003      	beq.n	8007754 <TIM_Base_SetConfig+0x20>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a35      	ldr	r2, [pc, #212]	@ (8007824 <TIM_Base_SetConfig+0xf0>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d108      	bne.n	8007766 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2270      	movs	r2, #112	@ 0x70
 8007758:	4393      	bics	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a2d      	ldr	r2, [pc, #180]	@ (8007820 <TIM_Base_SetConfig+0xec>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d013      	beq.n	8007796 <TIM_Base_SetConfig+0x62>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a2c      	ldr	r2, [pc, #176]	@ (8007824 <TIM_Base_SetConfig+0xf0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d00f      	beq.n	8007796 <TIM_Base_SetConfig+0x62>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a2b      	ldr	r2, [pc, #172]	@ (8007828 <TIM_Base_SetConfig+0xf4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d00b      	beq.n	8007796 <TIM_Base_SetConfig+0x62>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a2a      	ldr	r2, [pc, #168]	@ (800782c <TIM_Base_SetConfig+0xf8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d007      	beq.n	8007796 <TIM_Base_SetConfig+0x62>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a29      	ldr	r2, [pc, #164]	@ (8007830 <TIM_Base_SetConfig+0xfc>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d003      	beq.n	8007796 <TIM_Base_SetConfig+0x62>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a28      	ldr	r2, [pc, #160]	@ (8007834 <TIM_Base_SetConfig+0x100>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d108      	bne.n	80077a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	4a27      	ldr	r2, [pc, #156]	@ (8007838 <TIM_Base_SetConfig+0x104>)
 800779a:	4013      	ands	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2280      	movs	r2, #128	@ 0x80
 80077ac:	4393      	bics	r3, r2
 80077ae:	001a      	movs	r2, r3
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a13      	ldr	r2, [pc, #76]	@ (8007820 <TIM_Base_SetConfig+0xec>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d00b      	beq.n	80077ee <TIM_Base_SetConfig+0xba>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a14      	ldr	r2, [pc, #80]	@ (800782c <TIM_Base_SetConfig+0xf8>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d007      	beq.n	80077ee <TIM_Base_SetConfig+0xba>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a13      	ldr	r2, [pc, #76]	@ (8007830 <TIM_Base_SetConfig+0xfc>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d003      	beq.n	80077ee <TIM_Base_SetConfig+0xba>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a12      	ldr	r2, [pc, #72]	@ (8007834 <TIM_Base_SetConfig+0x100>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d103      	bne.n	80077f6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	691a      	ldr	r2, [r3, #16]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2201      	movs	r2, #1
 8007802:	4013      	ands	r3, r2
 8007804:	2b01      	cmp	r3, #1
 8007806:	d106      	bne.n	8007816 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	2201      	movs	r2, #1
 800780e:	4393      	bics	r3, r2
 8007810:	001a      	movs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	611a      	str	r2, [r3, #16]
  }
}
 8007816:	46c0      	nop			@ (mov r8, r8)
 8007818:	46bd      	mov	sp, r7
 800781a:	b004      	add	sp, #16
 800781c:	bd80      	pop	{r7, pc}
 800781e:	46c0      	nop			@ (mov r8, r8)
 8007820:	40012c00 	.word	0x40012c00
 8007824:	40000400 	.word	0x40000400
 8007828:	40002000 	.word	0x40002000
 800782c:	40014000 	.word	0x40014000
 8007830:	40014400 	.word	0x40014400
 8007834:	40014800 	.word	0x40014800
 8007838:	fffffcff 	.word	0xfffffcff

0800783c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	2201      	movs	r2, #1
 8007852:	4393      	bics	r3, r2
 8007854:	001a      	movs	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2270      	movs	r2, #112	@ 0x70
 800786a:	4393      	bics	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2203      	movs	r2, #3
 8007872:	4393      	bics	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4313      	orrs	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2202      	movs	r2, #2
 8007884:	4393      	bics	r3, r2
 8007886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	4313      	orrs	r3, r2
 8007890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a27      	ldr	r2, [pc, #156]	@ (8007934 <TIM_OC1_SetConfig+0xf8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00b      	beq.n	80078b2 <TIM_OC1_SetConfig+0x76>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a26      	ldr	r2, [pc, #152]	@ (8007938 <TIM_OC1_SetConfig+0xfc>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d007      	beq.n	80078b2 <TIM_OC1_SetConfig+0x76>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a25      	ldr	r2, [pc, #148]	@ (800793c <TIM_OC1_SetConfig+0x100>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d003      	beq.n	80078b2 <TIM_OC1_SetConfig+0x76>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a24      	ldr	r2, [pc, #144]	@ (8007940 <TIM_OC1_SetConfig+0x104>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d10c      	bne.n	80078cc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2208      	movs	r2, #8
 80078b6:	4393      	bics	r3, r2
 80078b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2204      	movs	r2, #4
 80078c8:	4393      	bics	r3, r2
 80078ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a19      	ldr	r2, [pc, #100]	@ (8007934 <TIM_OC1_SetConfig+0xf8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00b      	beq.n	80078ec <TIM_OC1_SetConfig+0xb0>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a18      	ldr	r2, [pc, #96]	@ (8007938 <TIM_OC1_SetConfig+0xfc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d007      	beq.n	80078ec <TIM_OC1_SetConfig+0xb0>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a17      	ldr	r2, [pc, #92]	@ (800793c <TIM_OC1_SetConfig+0x100>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d003      	beq.n	80078ec <TIM_OC1_SetConfig+0xb0>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a16      	ldr	r2, [pc, #88]	@ (8007940 <TIM_OC1_SetConfig+0x104>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d111      	bne.n	8007910 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	4a15      	ldr	r2, [pc, #84]	@ (8007944 <TIM_OC1_SetConfig+0x108>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	4a14      	ldr	r2, [pc, #80]	@ (8007948 <TIM_OC1_SetConfig+0x10c>)
 80078f8:	4013      	ands	r3, r2
 80078fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4313      	orrs	r3, r2
 8007904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	621a      	str	r2, [r3, #32]
}
 800792a:	46c0      	nop			@ (mov r8, r8)
 800792c:	46bd      	mov	sp, r7
 800792e:	b006      	add	sp, #24
 8007930:	bd80      	pop	{r7, pc}
 8007932:	46c0      	nop			@ (mov r8, r8)
 8007934:	40012c00 	.word	0x40012c00
 8007938:	40014000 	.word	0x40014000
 800793c:	40014400 	.word	0x40014400
 8007940:	40014800 	.word	0x40014800
 8007944:	fffffeff 	.word	0xfffffeff
 8007948:	fffffdff 	.word	0xfffffdff

0800794c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a1b      	ldr	r3, [r3, #32]
 8007960:	2210      	movs	r2, #16
 8007962:	4393      	bics	r3, r2
 8007964:	001a      	movs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4a2e      	ldr	r2, [pc, #184]	@ (8007a34 <TIM_OC2_SetConfig+0xe8>)
 800797a:	4013      	ands	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4a2d      	ldr	r2, [pc, #180]	@ (8007a38 <TIM_OC2_SetConfig+0xec>)
 8007982:	4013      	ands	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2220      	movs	r2, #32
 8007996:	4393      	bics	r3, r2
 8007998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a24      	ldr	r2, [pc, #144]	@ (8007a3c <TIM_OC2_SetConfig+0xf0>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d10d      	bne.n	80079ca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2280      	movs	r2, #128	@ 0x80
 80079b2:	4393      	bics	r3, r2
 80079b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2240      	movs	r2, #64	@ 0x40
 80079c6:	4393      	bics	r3, r2
 80079c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a1b      	ldr	r2, [pc, #108]	@ (8007a3c <TIM_OC2_SetConfig+0xf0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00b      	beq.n	80079ea <TIM_OC2_SetConfig+0x9e>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007a40 <TIM_OC2_SetConfig+0xf4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d007      	beq.n	80079ea <TIM_OC2_SetConfig+0x9e>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a19      	ldr	r2, [pc, #100]	@ (8007a44 <TIM_OC2_SetConfig+0xf8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d003      	beq.n	80079ea <TIM_OC2_SetConfig+0x9e>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a18      	ldr	r2, [pc, #96]	@ (8007a48 <TIM_OC2_SetConfig+0xfc>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d113      	bne.n	8007a12 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	4a17      	ldr	r2, [pc, #92]	@ (8007a4c <TIM_OC2_SetConfig+0x100>)
 80079ee:	4013      	ands	r3, r2
 80079f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	4a16      	ldr	r2, [pc, #88]	@ (8007a50 <TIM_OC2_SetConfig+0x104>)
 80079f6:	4013      	ands	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	621a      	str	r2, [r3, #32]
}
 8007a2c:	46c0      	nop			@ (mov r8, r8)
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	b006      	add	sp, #24
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	ffff8fff 	.word	0xffff8fff
 8007a38:	fffffcff 	.word	0xfffffcff
 8007a3c:	40012c00 	.word	0x40012c00
 8007a40:	40014000 	.word	0x40014000
 8007a44:	40014400 	.word	0x40014400
 8007a48:	40014800 	.word	0x40014800
 8007a4c:	fffffbff 	.word	0xfffffbff
 8007a50:	fffff7ff 	.word	0xfffff7ff

08007a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a1b      	ldr	r3, [r3, #32]
 8007a68:	4a33      	ldr	r2, [pc, #204]	@ (8007b38 <TIM_OC3_SetConfig+0xe4>)
 8007a6a:	401a      	ands	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2270      	movs	r2, #112	@ 0x70
 8007a80:	4393      	bics	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2203      	movs	r2, #3
 8007a88:	4393      	bics	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	4a28      	ldr	r2, [pc, #160]	@ (8007b3c <TIM_OC3_SetConfig+0xe8>)
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	021b      	lsls	r3, r3, #8
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a24      	ldr	r2, [pc, #144]	@ (8007b40 <TIM_OC3_SetConfig+0xec>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d10d      	bne.n	8007ace <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	4a23      	ldr	r2, [pc, #140]	@ (8007b44 <TIM_OC3_SetConfig+0xf0>)
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	021b      	lsls	r3, r3, #8
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8007b48 <TIM_OC3_SetConfig+0xf4>)
 8007aca:	4013      	ands	r3, r2
 8007acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8007b40 <TIM_OC3_SetConfig+0xec>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00b      	beq.n	8007aee <TIM_OC3_SetConfig+0x9a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8007b4c <TIM_OC3_SetConfig+0xf8>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d007      	beq.n	8007aee <TIM_OC3_SetConfig+0x9a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8007b50 <TIM_OC3_SetConfig+0xfc>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d003      	beq.n	8007aee <TIM_OC3_SetConfig+0x9a>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8007b54 <TIM_OC3_SetConfig+0x100>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d113      	bne.n	8007b16 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	4a19      	ldr	r2, [pc, #100]	@ (8007b58 <TIM_OC3_SetConfig+0x104>)
 8007af2:	4013      	ands	r3, r2
 8007af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	4a18      	ldr	r2, [pc, #96]	@ (8007b5c <TIM_OC3_SetConfig+0x108>)
 8007afa:	4013      	ands	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	621a      	str	r2, [r3, #32]
}
 8007b30:	46c0      	nop			@ (mov r8, r8)
 8007b32:	46bd      	mov	sp, r7
 8007b34:	b006      	add	sp, #24
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	fffffeff 	.word	0xfffffeff
 8007b3c:	fffffdff 	.word	0xfffffdff
 8007b40:	40012c00 	.word	0x40012c00
 8007b44:	fffff7ff 	.word	0xfffff7ff
 8007b48:	fffffbff 	.word	0xfffffbff
 8007b4c:	40014000 	.word	0x40014000
 8007b50:	40014400 	.word	0x40014400
 8007b54:	40014800 	.word	0x40014800
 8007b58:	ffffefff 	.word	0xffffefff
 8007b5c:	ffffdfff 	.word	0xffffdfff

08007b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	4a26      	ldr	r2, [pc, #152]	@ (8007c10 <TIM_OC4_SetConfig+0xb0>)
 8007b76:	401a      	ands	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4a22      	ldr	r2, [pc, #136]	@ (8007c14 <TIM_OC4_SetConfig+0xb4>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4a21      	ldr	r2, [pc, #132]	@ (8007c18 <TIM_OC4_SetConfig+0xb8>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8007c1c <TIM_OC4_SetConfig+0xbc>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	031b      	lsls	r3, r3, #12
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a19      	ldr	r2, [pc, #100]	@ (8007c20 <TIM_OC4_SetConfig+0xc0>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d00b      	beq.n	8007bd8 <TIM_OC4_SetConfig+0x78>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a18      	ldr	r2, [pc, #96]	@ (8007c24 <TIM_OC4_SetConfig+0xc4>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d007      	beq.n	8007bd8 <TIM_OC4_SetConfig+0x78>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a17      	ldr	r2, [pc, #92]	@ (8007c28 <TIM_OC4_SetConfig+0xc8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d003      	beq.n	8007bd8 <TIM_OC4_SetConfig+0x78>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a16      	ldr	r2, [pc, #88]	@ (8007c2c <TIM_OC4_SetConfig+0xcc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d109      	bne.n	8007bec <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	4a15      	ldr	r2, [pc, #84]	@ (8007c30 <TIM_OC4_SetConfig+0xd0>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	019b      	lsls	r3, r3, #6
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	621a      	str	r2, [r3, #32]
}
 8007c06:	46c0      	nop			@ (mov r8, r8)
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	b006      	add	sp, #24
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	ffffefff 	.word	0xffffefff
 8007c14:	ffff8fff 	.word	0xffff8fff
 8007c18:	fffffcff 	.word	0xfffffcff
 8007c1c:	ffffdfff 	.word	0xffffdfff
 8007c20:	40012c00 	.word	0x40012c00
 8007c24:	40014000 	.word	0x40014000
 8007c28:	40014400 	.word	0x40014400
 8007c2c:	40014800 	.word	0x40014800
 8007c30:	ffffbfff 	.word	0xffffbfff

08007c34 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c3e:	2317      	movs	r3, #23
 8007c40:	18fb      	adds	r3, r7, r3
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	2270      	movs	r2, #112	@ 0x70
 8007c52:	4393      	bics	r3, r2
 8007c54:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	2207      	movs	r2, #7
 8007c64:	4393      	bics	r3, r2
 8007c66:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	2b70      	cmp	r3, #112	@ 0x70
 8007c80:	d015      	beq.n	8007cae <TIM_SlaveTimer_SetConfig+0x7a>
 8007c82:	d900      	bls.n	8007c86 <TIM_SlaveTimer_SetConfig+0x52>
 8007c84:	e05b      	b.n	8007d3e <TIM_SlaveTimer_SetConfig+0x10a>
 8007c86:	2b60      	cmp	r3, #96	@ 0x60
 8007c88:	d04f      	beq.n	8007d2a <TIM_SlaveTimer_SetConfig+0xf6>
 8007c8a:	d858      	bhi.n	8007d3e <TIM_SlaveTimer_SetConfig+0x10a>
 8007c8c:	2b50      	cmp	r3, #80	@ 0x50
 8007c8e:	d042      	beq.n	8007d16 <TIM_SlaveTimer_SetConfig+0xe2>
 8007c90:	d855      	bhi.n	8007d3e <TIM_SlaveTimer_SetConfig+0x10a>
 8007c92:	2b40      	cmp	r3, #64	@ 0x40
 8007c94:	d016      	beq.n	8007cc4 <TIM_SlaveTimer_SetConfig+0x90>
 8007c96:	d852      	bhi.n	8007d3e <TIM_SlaveTimer_SetConfig+0x10a>
 8007c98:	2b30      	cmp	r3, #48	@ 0x30
 8007c9a:	d055      	beq.n	8007d48 <TIM_SlaveTimer_SetConfig+0x114>
 8007c9c:	d84f      	bhi.n	8007d3e <TIM_SlaveTimer_SetConfig+0x10a>
 8007c9e:	2b20      	cmp	r3, #32
 8007ca0:	d052      	beq.n	8007d48 <TIM_SlaveTimer_SetConfig+0x114>
 8007ca2:	d84c      	bhi.n	8007d3e <TIM_SlaveTimer_SetConfig+0x10a>
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d04f      	beq.n	8007d48 <TIM_SlaveTimer_SetConfig+0x114>
 8007ca8:	2b10      	cmp	r3, #16
 8007caa:	d04d      	beq.n	8007d48 <TIM_SlaveTimer_SetConfig+0x114>
 8007cac:	e047      	b.n	8007d3e <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007cbe:	f000 f8c5 	bl	8007e4c <TIM_ETR_SetConfig>
      break;
 8007cc2:	e042      	b.n	8007d4a <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b05      	cmp	r3, #5
 8007cca:	d101      	bne.n	8007cd0 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e03f      	b.n	8007d50 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6a1a      	ldr	r2, [r3, #32]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	438a      	bics	r2, r1
 8007ce6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	22f0      	movs	r2, #240	@ 0xf0
 8007cf4:	4393      	bics	r3, r2
 8007cf6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	011b      	lsls	r3, r3, #4
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	621a      	str	r2, [r3, #32]
      break;
 8007d14:	e019      	b.n	8007d4a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d22:	001a      	movs	r2, r3
 8007d24:	f000 f818 	bl	8007d58 <TIM_TI1_ConfigInputStage>
      break;
 8007d28:	e00f      	b.n	8007d4a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d36:	001a      	movs	r2, r3
 8007d38:	f000 f83c 	bl	8007db4 <TIM_TI2_ConfigInputStage>
      break;
 8007d3c:	e005      	b.n	8007d4a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007d3e:	2317      	movs	r3, #23
 8007d40:	18fb      	adds	r3, r7, r3
 8007d42:	2201      	movs	r2, #1
 8007d44:	701a      	strb	r2, [r3, #0]
      break;
 8007d46:	e000      	b.n	8007d4a <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8007d48:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8007d4a:	2317      	movs	r3, #23
 8007d4c:	18fb      	adds	r3, r7, r3
 8007d4e:	781b      	ldrb	r3, [r3, #0]
}
 8007d50:	0018      	movs	r0, r3
 8007d52:	46bd      	mov	sp, r7
 8007d54:	b006      	add	sp, #24
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	4393      	bics	r3, r2
 8007d72:	001a      	movs	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	22f0      	movs	r2, #240	@ 0xf0
 8007d82:	4393      	bics	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	220a      	movs	r2, #10
 8007d94:	4393      	bics	r3, r2
 8007d96:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	621a      	str	r2, [r3, #32]
}
 8007dac:	46c0      	nop			@ (mov r8, r8)
 8007dae:	46bd      	mov	sp, r7
 8007db0:	b006      	add	sp, #24
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	2210      	movs	r2, #16
 8007dcc:	4393      	bics	r3, r2
 8007dce:	001a      	movs	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8007e14 <TIM_TI2_ConfigInputStage+0x60>)
 8007dde:	4013      	ands	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	031b      	lsls	r3, r3, #12
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	22a0      	movs	r2, #160	@ 0xa0
 8007df0:	4393      	bics	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	011b      	lsls	r3, r3, #4
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	621a      	str	r2, [r3, #32]
}
 8007e0a:	46c0      	nop			@ (mov r8, r8)
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b006      	add	sp, #24
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	46c0      	nop			@ (mov r8, r8)
 8007e14:	ffff0fff 	.word	0xffff0fff

08007e18 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2270      	movs	r2, #112	@ 0x70
 8007e2c:	4393      	bics	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	2207      	movs	r2, #7
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	609a      	str	r2, [r3, #8]
}
 8007e42:	46c0      	nop			@ (mov r8, r8)
 8007e44:	46bd      	mov	sp, r7
 8007e46:	b004      	add	sp, #16
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	4a09      	ldr	r2, [pc, #36]	@ (8007e88 <TIM_ETR_SetConfig+0x3c>)
 8007e64:	4013      	ands	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	021a      	lsls	r2, r3, #8
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	609a      	str	r2, [r3, #8]
}
 8007e80:	46c0      	nop			@ (mov r8, r8)
 8007e82:	46bd      	mov	sp, r7
 8007e84:	b006      	add	sp, #24
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	ffff00ff 	.word	0xffff00ff

08007e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	221f      	movs	r2, #31
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	409a      	lsls	r2, r3
 8007ea2:	0013      	movs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	43d2      	mvns	r2, r2
 8007eae:	401a      	ands	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6a1a      	ldr	r2, [r3, #32]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	211f      	movs	r1, #31
 8007ebc:	400b      	ands	r3, r1
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	4099      	lsls	r1, r3
 8007ec2:	000b      	movs	r3, r1
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	621a      	str	r2, [r3, #32]
}
 8007eca:	46c0      	nop			@ (mov r8, r8)
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	b006      	add	sp, #24
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d108      	bne.n	8007ef6 <HAL_TIMEx_PWMN_Start+0x22>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2242      	movs	r2, #66	@ 0x42
 8007ee8:	5c9b      	ldrb	r3, [r3, r2]
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	3b01      	subs	r3, #1
 8007eee:	1e5a      	subs	r2, r3, #1
 8007ef0:	4193      	sbcs	r3, r2
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	e01f      	b.n	8007f36 <HAL_TIMEx_PWMN_Start+0x62>
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d108      	bne.n	8007f0e <HAL_TIMEx_PWMN_Start+0x3a>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2243      	movs	r2, #67	@ 0x43
 8007f00:	5c9b      	ldrb	r3, [r3, r2]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	3b01      	subs	r3, #1
 8007f06:	1e5a      	subs	r2, r3, #1
 8007f08:	4193      	sbcs	r3, r2
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	e013      	b.n	8007f36 <HAL_TIMEx_PWMN_Start+0x62>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b08      	cmp	r3, #8
 8007f12:	d108      	bne.n	8007f26 <HAL_TIMEx_PWMN_Start+0x52>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2244      	movs	r2, #68	@ 0x44
 8007f18:	5c9b      	ldrb	r3, [r3, r2]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	1e5a      	subs	r2, r3, #1
 8007f20:	4193      	sbcs	r3, r2
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	e007      	b.n	8007f36 <HAL_TIMEx_PWMN_Start+0x62>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2245      	movs	r2, #69	@ 0x45
 8007f2a:	5c9b      	ldrb	r3, [r3, r2]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	1e5a      	subs	r2, r3, #1
 8007f32:	4193      	sbcs	r3, r2
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e055      	b.n	8007fea <HAL_TIMEx_PWMN_Start+0x116>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d104      	bne.n	8007f4e <HAL_TIMEx_PWMN_Start+0x7a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2242      	movs	r2, #66	@ 0x42
 8007f48:	2102      	movs	r1, #2
 8007f4a:	5499      	strb	r1, [r3, r2]
 8007f4c:	e013      	b.n	8007f76 <HAL_TIMEx_PWMN_Start+0xa2>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d104      	bne.n	8007f5e <HAL_TIMEx_PWMN_Start+0x8a>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2243      	movs	r2, #67	@ 0x43
 8007f58:	2102      	movs	r1, #2
 8007f5a:	5499      	strb	r1, [r3, r2]
 8007f5c:	e00b      	b.n	8007f76 <HAL_TIMEx_PWMN_Start+0xa2>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b08      	cmp	r3, #8
 8007f62:	d104      	bne.n	8007f6e <HAL_TIMEx_PWMN_Start+0x9a>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2244      	movs	r2, #68	@ 0x44
 8007f68:	2102      	movs	r1, #2
 8007f6a:	5499      	strb	r1, [r3, r2]
 8007f6c:	e003      	b.n	8007f76 <HAL_TIMEx_PWMN_Start+0xa2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2245      	movs	r2, #69	@ 0x45
 8007f72:	2102      	movs	r1, #2
 8007f74:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f000 f904 	bl	800818c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2180      	movs	r1, #128	@ 0x80
 8007f90:	0209      	lsls	r1, r1, #8
 8007f92:	430a      	orrs	r2, r1
 8007f94:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a16      	ldr	r2, [pc, #88]	@ (8007ff4 <HAL_TIMEx_PWMN_Start+0x120>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d009      	beq.n	8007fb4 <HAL_TIMEx_PWMN_Start+0xe0>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a14      	ldr	r2, [pc, #80]	@ (8007ff8 <HAL_TIMEx_PWMN_Start+0x124>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d004      	beq.n	8007fb4 <HAL_TIMEx_PWMN_Start+0xe0>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a13      	ldr	r2, [pc, #76]	@ (8007ffc <HAL_TIMEx_PWMN_Start+0x128>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d111      	bne.n	8007fd8 <HAL_TIMEx_PWMN_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2207      	movs	r2, #7
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b06      	cmp	r3, #6
 8007fc4:	d010      	beq.n	8007fe8 <HAL_TIMEx_PWMN_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd6:	e007      	b.n	8007fe8 <HAL_TIMEx_PWMN_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	0018      	movs	r0, r3
 8007fec:	46bd      	mov	sp, r7
 8007fee:	b004      	add	sp, #16
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	46c0      	nop			@ (mov r8, r8)
 8007ff4:	40012c00 	.word	0x40012c00
 8007ff8:	40000400 	.word	0x40000400
 8007ffc:	40014000 	.word	0x40014000

08008000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	223c      	movs	r2, #60	@ 0x3c
 800800e:	5c9b      	ldrb	r3, [r3, r2]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d101      	bne.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008014:	2302      	movs	r3, #2
 8008016:	e041      	b.n	800809c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	223c      	movs	r2, #60	@ 0x3c
 800801c:	2101      	movs	r1, #1
 800801e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	223d      	movs	r2, #61	@ 0x3d
 8008024:	2102      	movs	r1, #2
 8008026:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2270      	movs	r2, #112	@ 0x70
 800803c:	4393      	bics	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	4313      	orrs	r3, r2
 8008048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a13      	ldr	r2, [pc, #76]	@ (80080a4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d009      	beq.n	8008070 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a11      	ldr	r2, [pc, #68]	@ (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d004      	beq.n	8008070 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a10      	ldr	r2, [pc, #64]	@ (80080ac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d10c      	bne.n	800808a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2280      	movs	r2, #128	@ 0x80
 8008074:	4393      	bics	r3, r2
 8008076:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	4313      	orrs	r3, r2
 8008080:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	223d      	movs	r2, #61	@ 0x3d
 800808e:	2101      	movs	r1, #1
 8008090:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	223c      	movs	r2, #60	@ 0x3c
 8008096:	2100      	movs	r1, #0
 8008098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	0018      	movs	r0, r3
 800809e:	46bd      	mov	sp, r7
 80080a0:	b004      	add	sp, #16
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	40012c00 	.word	0x40012c00
 80080a8:	40000400 	.word	0x40000400
 80080ac:	40014000 	.word	0x40014000

080080b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	223c      	movs	r2, #60	@ 0x3c
 80080c2:	5c9b      	ldrb	r3, [r3, r2]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d101      	bne.n	80080cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80080c8:	2302      	movs	r3, #2
 80080ca:	e03e      	b.n	800814a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	223c      	movs	r2, #60	@ 0x3c
 80080d0:	2101      	movs	r1, #1
 80080d2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	22ff      	movs	r2, #255	@ 0xff
 80080d8:	4393      	bics	r3, r2
 80080da:	001a      	movs	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008154 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80080e8:	401a      	ands	r2, r3
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4a18      	ldr	r2, [pc, #96]	@ (8008158 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80080f6:	401a      	ands	r2, r3
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4a16      	ldr	r2, [pc, #88]	@ (800815c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8008104:	401a      	ands	r2, r3
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4a13      	ldr	r2, [pc, #76]	@ (8008160 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8008112:	401a      	ands	r2, r3
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4a11      	ldr	r2, [pc, #68]	@ (8008164 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8008120:	401a      	ands	r2, r3
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4a0e      	ldr	r2, [pc, #56]	@ (8008168 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800812e:	401a      	ands	r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	4313      	orrs	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	223c      	movs	r2, #60	@ 0x3c
 8008144:	2100      	movs	r1, #0
 8008146:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	0018      	movs	r0, r3
 800814c:	46bd      	mov	sp, r7
 800814e:	b004      	add	sp, #16
 8008150:	bd80      	pop	{r7, pc}
 8008152:	46c0      	nop			@ (mov r8, r8)
 8008154:	fffffcff 	.word	0xfffffcff
 8008158:	fffffbff 	.word	0xfffffbff
 800815c:	fffff7ff 	.word	0xfffff7ff
 8008160:	ffffefff 	.word	0xffffefff
 8008164:	ffffdfff 	.word	0xffffdfff
 8008168:	ffffbfff 	.word	0xffffbfff

0800816c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008174:	46c0      	nop			@ (mov r8, r8)
 8008176:	46bd      	mov	sp, r7
 8008178:	b002      	add	sp, #8
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008184:	46c0      	nop			@ (mov r8, r8)
 8008186:	46bd      	mov	sp, r7
 8008188:	b002      	add	sp, #8
 800818a:	bd80      	pop	{r7, pc}

0800818c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	220f      	movs	r2, #15
 800819c:	4013      	ands	r3, r2
 800819e:	2204      	movs	r2, #4
 80081a0:	409a      	lsls	r2, r3
 80081a2:	0013      	movs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	43d2      	mvns	r2, r2
 80081ae:	401a      	ands	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6a1a      	ldr	r2, [r3, #32]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	210f      	movs	r1, #15
 80081bc:	400b      	ands	r3, r1
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	4099      	lsls	r1, r3
 80081c2:	000b      	movs	r3, r1
 80081c4:	431a      	orrs	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	621a      	str	r2, [r3, #32]
}
 80081ca:	46c0      	nop			@ (mov r8, r8)
 80081cc:	46bd      	mov	sp, r7
 80081ce:	b006      	add	sp, #24
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e044      	b.n	8008270 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d107      	bne.n	80081fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2278      	movs	r2, #120	@ 0x78
 80081f2:	2100      	movs	r1, #0
 80081f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	0018      	movs	r0, r3
 80081fa:	f7fc fc81 	bl	8004b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2224      	movs	r2, #36	@ 0x24
 8008202:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2101      	movs	r1, #1
 8008210:	438a      	bics	r2, r1
 8008212:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	0018      	movs	r0, r3
 8008220:	f000 fdd6 	bl	8008dd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	0018      	movs	r0, r3
 8008228:	f000 fc92 	bl	8008b50 <UART_SetConfig>
 800822c:	0003      	movs	r3, r0
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e01c      	b.n	8008270 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	490d      	ldr	r1, [pc, #52]	@ (8008278 <HAL_UART_Init+0xa4>)
 8008242:	400a      	ands	r2, r1
 8008244:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2108      	movs	r1, #8
 8008252:	438a      	bics	r2, r1
 8008254:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2101      	movs	r1, #1
 8008262:	430a      	orrs	r2, r1
 8008264:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	0018      	movs	r0, r3
 800826a:	f000 fe65 	bl	8008f38 <UART_CheckIdleState>
 800826e:	0003      	movs	r3, r0
}
 8008270:	0018      	movs	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	b002      	add	sp, #8
 8008276:	bd80      	pop	{r7, pc}
 8008278:	fffff7ff 	.word	0xfffff7ff

0800827c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08a      	sub	sp, #40	@ 0x28
 8008280:	af02      	add	r7, sp, #8
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	603b      	str	r3, [r7, #0]
 8008288:	1dbb      	adds	r3, r7, #6
 800828a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008290:	2b20      	cmp	r3, #32
 8008292:	d000      	beq.n	8008296 <HAL_UART_Transmit+0x1a>
 8008294:	e08c      	b.n	80083b0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <HAL_UART_Transmit+0x28>
 800829c:	1dbb      	adds	r3, r7, #6
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e084      	b.n	80083b2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	2380      	movs	r3, #128	@ 0x80
 80082ae:	015b      	lsls	r3, r3, #5
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d109      	bne.n	80082c8 <HAL_UART_Transmit+0x4c>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d105      	bne.n	80082c8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2201      	movs	r2, #1
 80082c0:	4013      	ands	r3, r2
 80082c2:	d001      	beq.n	80082c8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e074      	b.n	80083b2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2284      	movs	r2, #132	@ 0x84
 80082cc:	2100      	movs	r1, #0
 80082ce:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2221      	movs	r2, #33	@ 0x21
 80082d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082d6:	f7fc fd63 	bl	8004da0 <HAL_GetTick>
 80082da:	0003      	movs	r3, r0
 80082dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	1dba      	adds	r2, r7, #6
 80082e2:	2150      	movs	r1, #80	@ 0x50
 80082e4:	8812      	ldrh	r2, [r2, #0]
 80082e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	1dba      	adds	r2, r7, #6
 80082ec:	2152      	movs	r1, #82	@ 0x52
 80082ee:	8812      	ldrh	r2, [r2, #0]
 80082f0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	689a      	ldr	r2, [r3, #8]
 80082f6:	2380      	movs	r3, #128	@ 0x80
 80082f8:	015b      	lsls	r3, r3, #5
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d108      	bne.n	8008310 <HAL_UART_Transmit+0x94>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d104      	bne.n	8008310 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	61bb      	str	r3, [r7, #24]
 800830e:	e003      	b.n	8008318 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008314:	2300      	movs	r3, #0
 8008316:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008318:	e02f      	b.n	800837a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	0013      	movs	r3, r2
 8008324:	2200      	movs	r2, #0
 8008326:	2180      	movs	r1, #128	@ 0x80
 8008328:	f000 feae 	bl	8009088 <UART_WaitOnFlagUntilTimeout>
 800832c:	1e03      	subs	r3, r0, #0
 800832e:	d004      	beq.n	800833a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2220      	movs	r2, #32
 8008334:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e03b      	b.n	80083b2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10b      	bne.n	8008358 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	881a      	ldrh	r2, [r3, #0]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	05d2      	lsls	r2, r2, #23
 800834a:	0dd2      	lsrs	r2, r2, #23
 800834c:	b292      	uxth	r2, r2
 800834e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	3302      	adds	r3, #2
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	e007      	b.n	8008368 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	781a      	ldrb	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	3301      	adds	r3, #1
 8008366:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2252      	movs	r2, #82	@ 0x52
 800836c:	5a9b      	ldrh	r3, [r3, r2]
 800836e:	b29b      	uxth	r3, r3
 8008370:	3b01      	subs	r3, #1
 8008372:	b299      	uxth	r1, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2252      	movs	r2, #82	@ 0x52
 8008378:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2252      	movs	r2, #82	@ 0x52
 800837e:	5a9b      	ldrh	r3, [r3, r2]
 8008380:	b29b      	uxth	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1c9      	bne.n	800831a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	0013      	movs	r3, r2
 8008390:	2200      	movs	r2, #0
 8008392:	2140      	movs	r1, #64	@ 0x40
 8008394:	f000 fe78 	bl	8009088 <UART_WaitOnFlagUntilTimeout>
 8008398:	1e03      	subs	r3, r0, #0
 800839a:	d004      	beq.n	80083a6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2220      	movs	r2, #32
 80083a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e005      	b.n	80083b2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2220      	movs	r2, #32
 80083aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	e000      	b.n	80083b2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80083b0:	2302      	movs	r3, #2
  }
}
 80083b2:	0018      	movs	r0, r3
 80083b4:	46bd      	mov	sp, r7
 80083b6:	b008      	add	sp, #32
 80083b8:	bd80      	pop	{r7, pc}

080083ba <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b088      	sub	sp, #32
 80083be:	af00      	add	r7, sp, #0
 80083c0:	60f8      	str	r0, [r7, #12]
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	1dbb      	adds	r3, r7, #6
 80083c6:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2280      	movs	r2, #128	@ 0x80
 80083cc:	589b      	ldr	r3, [r3, r2]
 80083ce:	2b20      	cmp	r3, #32
 80083d0:	d145      	bne.n	800845e <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <HAL_UART_Receive_IT+0x26>
 80083d8:	1dbb      	adds	r3, r7, #6
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e03d      	b.n	8008460 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	2380      	movs	r3, #128	@ 0x80
 80083ea:	015b      	lsls	r3, r3, #5
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d109      	bne.n	8008404 <HAL_UART_Receive_IT+0x4a>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d105      	bne.n	8008404 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2201      	movs	r2, #1
 80083fc:	4013      	ands	r3, r2
 80083fe:	d001      	beq.n	8008404 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e02d      	b.n	8008460 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	2380      	movs	r3, #128	@ 0x80
 8008412:	041b      	lsls	r3, r3, #16
 8008414:	4013      	ands	r3, r2
 8008416:	d019      	beq.n	800844c <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008418:	f3ef 8310 	mrs	r3, PRIMASK
 800841c:	613b      	str	r3, [r7, #16]
  return(result);
 800841e:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008420:	61fb      	str	r3, [r7, #28]
 8008422:	2301      	movs	r3, #1
 8008424:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f383 8810 	msr	PRIMASK, r3
}
 800842c:	46c0      	nop			@ (mov r8, r8)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2180      	movs	r1, #128	@ 0x80
 800843a:	04c9      	lsls	r1, r1, #19
 800843c:	430a      	orrs	r2, r1
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	f383 8810 	msr	PRIMASK, r3
}
 800844a:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800844c:	1dbb      	adds	r3, r7, #6
 800844e:	881a      	ldrh	r2, [r3, #0]
 8008450:	68b9      	ldr	r1, [r7, #8]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	0018      	movs	r0, r3
 8008456:	f000 fe87 	bl	8009168 <UART_Start_Receive_IT>
 800845a:	0003      	movs	r3, r0
 800845c:	e000      	b.n	8008460 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800845e:	2302      	movs	r3, #2
  }
}
 8008460:	0018      	movs	r0, r3
 8008462:	46bd      	mov	sp, r7
 8008464:	b008      	add	sp, #32
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b088      	sub	sp, #32
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	1dbb      	adds	r3, r7, #6
 8008474:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800847a:	2b20      	cmp	r3, #32
 800847c:	d000      	beq.n	8008480 <HAL_UART_Transmit_DMA+0x18>
 800847e:	e077      	b.n	8008570 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_UART_Transmit_DMA+0x26>
 8008486:	1dbb      	adds	r3, r7, #6
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e06f      	b.n	8008572 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	2380      	movs	r3, #128	@ 0x80
 8008498:	015b      	lsls	r3, r3, #5
 800849a:	429a      	cmp	r2, r3
 800849c:	d109      	bne.n	80084b2 <HAL_UART_Transmit_DMA+0x4a>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d105      	bne.n	80084b2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2201      	movs	r2, #1
 80084aa:	4013      	ands	r3, r2
 80084ac:	d001      	beq.n	80084b2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e05f      	b.n	8008572 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	1dba      	adds	r2, r7, #6
 80084bc:	2150      	movs	r1, #80	@ 0x50
 80084be:	8812      	ldrh	r2, [r2, #0]
 80084c0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	1dba      	adds	r2, r7, #6
 80084c6:	2152      	movs	r1, #82	@ 0x52
 80084c8:	8812      	ldrh	r2, [r2, #0]
 80084ca:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2284      	movs	r2, #132	@ 0x84
 80084d0:	2100      	movs	r1, #0
 80084d2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2221      	movs	r2, #33	@ 0x21
 80084d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d027      	beq.n	8008532 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084e6:	4a25      	ldr	r2, [pc, #148]	@ (800857c <HAL_UART_Transmit_DMA+0x114>)
 80084e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ee:	4a24      	ldr	r2, [pc, #144]	@ (8008580 <HAL_UART_Transmit_DMA+0x118>)
 80084f0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084f6:	4a23      	ldr	r2, [pc, #140]	@ (8008584 <HAL_UART_Transmit_DMA+0x11c>)
 80084f8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084fe:	2200      	movs	r2, #0
 8008500:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800850a:	0019      	movs	r1, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3328      	adds	r3, #40	@ 0x28
 8008512:	001a      	movs	r2, r3
 8008514:	1dbb      	adds	r3, r7, #6
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	f7fd f942 	bl	80057a0 <HAL_DMA_Start_IT>
 800851c:	1e03      	subs	r3, r0, #0
 800851e:	d008      	beq.n	8008532 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2284      	movs	r2, #132	@ 0x84
 8008524:	2110      	movs	r1, #16
 8008526:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2220      	movs	r2, #32
 800852c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e01f      	b.n	8008572 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2240      	movs	r2, #64	@ 0x40
 8008538:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800853a:	f3ef 8310 	mrs	r3, PRIMASK
 800853e:	613b      	str	r3, [r7, #16]
  return(result);
 8008540:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008542:	61fb      	str	r3, [r7, #28]
 8008544:	2301      	movs	r3, #1
 8008546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f383 8810 	msr	PRIMASK, r3
}
 800854e:	46c0      	nop			@ (mov r8, r8)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2180      	movs	r1, #128	@ 0x80
 800855c:	430a      	orrs	r2, r1
 800855e:	609a      	str	r2, [r3, #8]
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	f383 8810 	msr	PRIMASK, r3
}
 800856a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	e000      	b.n	8008572 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008570:	2302      	movs	r3, #2
  }
}
 8008572:	0018      	movs	r0, r3
 8008574:	46bd      	mov	sp, r7
 8008576:	b008      	add	sp, #32
 8008578:	bd80      	pop	{r7, pc}
 800857a:	46c0      	nop			@ (mov r8, r8)
 800857c:	080093e5 	.word	0x080093e5
 8008580:	08009479 	.word	0x08009479
 8008584:	08009497 	.word	0x08009497

08008588 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008588:	b590      	push	{r4, r7, lr}
 800858a:	b0ab      	sub	sp, #172	@ 0xac
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	22a4      	movs	r2, #164	@ 0xa4
 8008598:	18b9      	adds	r1, r7, r2
 800859a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	20a0      	movs	r0, #160	@ 0xa0
 80085a4:	1839      	adds	r1, r7, r0
 80085a6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	219c      	movs	r1, #156	@ 0x9c
 80085b0:	1879      	adds	r1, r7, r1
 80085b2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085b4:	0011      	movs	r1, r2
 80085b6:	18bb      	adds	r3, r7, r2
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a99      	ldr	r2, [pc, #612]	@ (8008820 <HAL_UART_IRQHandler+0x298>)
 80085bc:	4013      	ands	r3, r2
 80085be:	2298      	movs	r2, #152	@ 0x98
 80085c0:	18bc      	adds	r4, r7, r2
 80085c2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80085c4:	18bb      	adds	r3, r7, r2
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d114      	bne.n	80085f6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80085cc:	187b      	adds	r3, r7, r1
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2220      	movs	r2, #32
 80085d2:	4013      	ands	r3, r2
 80085d4:	d00f      	beq.n	80085f6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085d6:	183b      	adds	r3, r7, r0
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2220      	movs	r2, #32
 80085dc:	4013      	ands	r3, r2
 80085de:	d00a      	beq.n	80085f6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d100      	bne.n	80085ea <HAL_UART_IRQHandler+0x62>
 80085e8:	e286      	b.n	8008af8 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	0010      	movs	r0, r2
 80085f2:	4798      	blx	r3
      }
      return;
 80085f4:	e280      	b.n	8008af8 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085f6:	2398      	movs	r3, #152	@ 0x98
 80085f8:	18fb      	adds	r3, r7, r3
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d100      	bne.n	8008602 <HAL_UART_IRQHandler+0x7a>
 8008600:	e114      	b.n	800882c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008602:	239c      	movs	r3, #156	@ 0x9c
 8008604:	18fb      	adds	r3, r7, r3
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2201      	movs	r2, #1
 800860a:	4013      	ands	r3, r2
 800860c:	d106      	bne.n	800861c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800860e:	23a0      	movs	r3, #160	@ 0xa0
 8008610:	18fb      	adds	r3, r7, r3
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a83      	ldr	r2, [pc, #524]	@ (8008824 <HAL_UART_IRQHandler+0x29c>)
 8008616:	4013      	ands	r3, r2
 8008618:	d100      	bne.n	800861c <HAL_UART_IRQHandler+0x94>
 800861a:	e107      	b.n	800882c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800861c:	23a4      	movs	r3, #164	@ 0xa4
 800861e:	18fb      	adds	r3, r7, r3
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2201      	movs	r2, #1
 8008624:	4013      	ands	r3, r2
 8008626:	d012      	beq.n	800864e <HAL_UART_IRQHandler+0xc6>
 8008628:	23a0      	movs	r3, #160	@ 0xa0
 800862a:	18fb      	adds	r3, r7, r3
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	2380      	movs	r3, #128	@ 0x80
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	4013      	ands	r3, r2
 8008634:	d00b      	beq.n	800864e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2201      	movs	r2, #1
 800863c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2284      	movs	r2, #132	@ 0x84
 8008642:	589b      	ldr	r3, [r3, r2]
 8008644:	2201      	movs	r2, #1
 8008646:	431a      	orrs	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2184      	movs	r1, #132	@ 0x84
 800864c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800864e:	23a4      	movs	r3, #164	@ 0xa4
 8008650:	18fb      	adds	r3, r7, r3
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2202      	movs	r2, #2
 8008656:	4013      	ands	r3, r2
 8008658:	d011      	beq.n	800867e <HAL_UART_IRQHandler+0xf6>
 800865a:	239c      	movs	r3, #156	@ 0x9c
 800865c:	18fb      	adds	r3, r7, r3
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2201      	movs	r2, #1
 8008662:	4013      	ands	r3, r2
 8008664:	d00b      	beq.n	800867e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2202      	movs	r2, #2
 800866c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2284      	movs	r2, #132	@ 0x84
 8008672:	589b      	ldr	r3, [r3, r2]
 8008674:	2204      	movs	r2, #4
 8008676:	431a      	orrs	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2184      	movs	r1, #132	@ 0x84
 800867c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800867e:	23a4      	movs	r3, #164	@ 0xa4
 8008680:	18fb      	adds	r3, r7, r3
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2204      	movs	r2, #4
 8008686:	4013      	ands	r3, r2
 8008688:	d011      	beq.n	80086ae <HAL_UART_IRQHandler+0x126>
 800868a:	239c      	movs	r3, #156	@ 0x9c
 800868c:	18fb      	adds	r3, r7, r3
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2201      	movs	r2, #1
 8008692:	4013      	ands	r3, r2
 8008694:	d00b      	beq.n	80086ae <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2204      	movs	r2, #4
 800869c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2284      	movs	r2, #132	@ 0x84
 80086a2:	589b      	ldr	r3, [r3, r2]
 80086a4:	2202      	movs	r2, #2
 80086a6:	431a      	orrs	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2184      	movs	r1, #132	@ 0x84
 80086ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086ae:	23a4      	movs	r3, #164	@ 0xa4
 80086b0:	18fb      	adds	r3, r7, r3
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2208      	movs	r2, #8
 80086b6:	4013      	ands	r3, r2
 80086b8:	d017      	beq.n	80086ea <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086ba:	23a0      	movs	r3, #160	@ 0xa0
 80086bc:	18fb      	adds	r3, r7, r3
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2220      	movs	r2, #32
 80086c2:	4013      	ands	r3, r2
 80086c4:	d105      	bne.n	80086d2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80086c6:	239c      	movs	r3, #156	@ 0x9c
 80086c8:	18fb      	adds	r3, r7, r3
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2201      	movs	r2, #1
 80086ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086d0:	d00b      	beq.n	80086ea <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2208      	movs	r2, #8
 80086d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2284      	movs	r2, #132	@ 0x84
 80086de:	589b      	ldr	r3, [r3, r2]
 80086e0:	2208      	movs	r2, #8
 80086e2:	431a      	orrs	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2184      	movs	r1, #132	@ 0x84
 80086e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086ea:	23a4      	movs	r3, #164	@ 0xa4
 80086ec:	18fb      	adds	r3, r7, r3
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	2380      	movs	r3, #128	@ 0x80
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	4013      	ands	r3, r2
 80086f6:	d013      	beq.n	8008720 <HAL_UART_IRQHandler+0x198>
 80086f8:	23a0      	movs	r3, #160	@ 0xa0
 80086fa:	18fb      	adds	r3, r7, r3
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	2380      	movs	r3, #128	@ 0x80
 8008700:	04db      	lsls	r3, r3, #19
 8008702:	4013      	ands	r3, r2
 8008704:	d00c      	beq.n	8008720 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2280      	movs	r2, #128	@ 0x80
 800870c:	0112      	lsls	r2, r2, #4
 800870e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2284      	movs	r2, #132	@ 0x84
 8008714:	589b      	ldr	r3, [r3, r2]
 8008716:	2220      	movs	r2, #32
 8008718:	431a      	orrs	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2184      	movs	r1, #132	@ 0x84
 800871e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2284      	movs	r2, #132	@ 0x84
 8008724:	589b      	ldr	r3, [r3, r2]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d100      	bne.n	800872c <HAL_UART_IRQHandler+0x1a4>
 800872a:	e1e7      	b.n	8008afc <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800872c:	23a4      	movs	r3, #164	@ 0xa4
 800872e:	18fb      	adds	r3, r7, r3
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2220      	movs	r2, #32
 8008734:	4013      	ands	r3, r2
 8008736:	d00e      	beq.n	8008756 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008738:	23a0      	movs	r3, #160	@ 0xa0
 800873a:	18fb      	adds	r3, r7, r3
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2220      	movs	r2, #32
 8008740:	4013      	ands	r3, r2
 8008742:	d008      	beq.n	8008756 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008748:	2b00      	cmp	r3, #0
 800874a:	d004      	beq.n	8008756 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	0010      	movs	r0, r2
 8008754:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2284      	movs	r2, #132	@ 0x84
 800875a:	589b      	ldr	r3, [r3, r2]
 800875c:	2194      	movs	r1, #148	@ 0x94
 800875e:	187a      	adds	r2, r7, r1
 8008760:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	2240      	movs	r2, #64	@ 0x40
 800876a:	4013      	ands	r3, r2
 800876c:	2b40      	cmp	r3, #64	@ 0x40
 800876e:	d004      	beq.n	800877a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008770:	187b      	adds	r3, r7, r1
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2228      	movs	r2, #40	@ 0x28
 8008776:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008778:	d047      	beq.n	800880a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	0018      	movs	r0, r3
 800877e:	f000 fdcd 	bl	800931c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	2240      	movs	r2, #64	@ 0x40
 800878a:	4013      	ands	r3, r2
 800878c:	2b40      	cmp	r3, #64	@ 0x40
 800878e:	d137      	bne.n	8008800 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008790:	f3ef 8310 	mrs	r3, PRIMASK
 8008794:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8008796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008798:	2090      	movs	r0, #144	@ 0x90
 800879a:	183a      	adds	r2, r7, r0
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	2301      	movs	r3, #1
 80087a0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087a4:	f383 8810 	msr	PRIMASK, r3
}
 80087a8:	46c0      	nop			@ (mov r8, r8)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689a      	ldr	r2, [r3, #8]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2140      	movs	r1, #64	@ 0x40
 80087b6:	438a      	bics	r2, r1
 80087b8:	609a      	str	r2, [r3, #8]
 80087ba:	183b      	adds	r3, r7, r0
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087c2:	f383 8810 	msr	PRIMASK, r3
}
 80087c6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d012      	beq.n	80087f6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087d4:	4a14      	ldr	r2, [pc, #80]	@ (8008828 <HAL_UART_IRQHandler+0x2a0>)
 80087d6:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087dc:	0018      	movs	r0, r3
 80087de:	f7fd f87d 	bl	80058dc <HAL_DMA_Abort_IT>
 80087e2:	1e03      	subs	r3, r0, #0
 80087e4:	d01a      	beq.n	800881c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087f0:	0018      	movs	r0, r3
 80087f2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f4:	e012      	b.n	800881c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	0018      	movs	r0, r3
 80087fa:	f000 f995 	bl	8008b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087fe:	e00d      	b.n	800881c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	0018      	movs	r0, r3
 8008804:	f000 f990 	bl	8008b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008808:	e008      	b.n	800881c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	0018      	movs	r0, r3
 800880e:	f000 f98b 	bl	8008b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2284      	movs	r2, #132	@ 0x84
 8008816:	2100      	movs	r1, #0
 8008818:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800881a:	e16f      	b.n	8008afc <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800881c:	46c0      	nop			@ (mov r8, r8)
    return;
 800881e:	e16d      	b.n	8008afc <HAL_UART_IRQHandler+0x574>
 8008820:	0000080f 	.word	0x0000080f
 8008824:	04000120 	.word	0x04000120
 8008828:	0800951b 	.word	0x0800951b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008830:	2b01      	cmp	r3, #1
 8008832:	d000      	beq.n	8008836 <HAL_UART_IRQHandler+0x2ae>
 8008834:	e139      	b.n	8008aaa <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008836:	23a4      	movs	r3, #164	@ 0xa4
 8008838:	18fb      	adds	r3, r7, r3
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2210      	movs	r2, #16
 800883e:	4013      	ands	r3, r2
 8008840:	d100      	bne.n	8008844 <HAL_UART_IRQHandler+0x2bc>
 8008842:	e132      	b.n	8008aaa <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008844:	23a0      	movs	r3, #160	@ 0xa0
 8008846:	18fb      	adds	r3, r7, r3
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2210      	movs	r2, #16
 800884c:	4013      	ands	r3, r2
 800884e:	d100      	bne.n	8008852 <HAL_UART_IRQHandler+0x2ca>
 8008850:	e12b      	b.n	8008aaa <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2210      	movs	r2, #16
 8008858:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	2240      	movs	r2, #64	@ 0x40
 8008862:	4013      	ands	r3, r2
 8008864:	2b40      	cmp	r3, #64	@ 0x40
 8008866:	d000      	beq.n	800886a <HAL_UART_IRQHandler+0x2e2>
 8008868:	e09f      	b.n	80089aa <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	217e      	movs	r1, #126	@ 0x7e
 8008874:	187b      	adds	r3, r7, r1
 8008876:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008878:	187b      	adds	r3, r7, r1
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d100      	bne.n	8008882 <HAL_UART_IRQHandler+0x2fa>
 8008880:	e13e      	b.n	8008b00 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2258      	movs	r2, #88	@ 0x58
 8008886:	5a9b      	ldrh	r3, [r3, r2]
 8008888:	187a      	adds	r2, r7, r1
 800888a:	8812      	ldrh	r2, [r2, #0]
 800888c:	429a      	cmp	r2, r3
 800888e:	d300      	bcc.n	8008892 <HAL_UART_IRQHandler+0x30a>
 8008890:	e136      	b.n	8008b00 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	187a      	adds	r2, r7, r1
 8008896:	215a      	movs	r1, #90	@ 0x5a
 8008898:	8812      	ldrh	r2, [r2, #0]
 800889a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	2b20      	cmp	r3, #32
 80088a4:	d06f      	beq.n	8008986 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a6:	f3ef 8310 	mrs	r3, PRIMASK
 80088aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80088ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088b0:	2301      	movs	r3, #1
 80088b2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088b6:	f383 8810 	msr	PRIMASK, r3
}
 80088ba:	46c0      	nop			@ (mov r8, r8)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4992      	ldr	r1, [pc, #584]	@ (8008b10 <HAL_UART_IRQHandler+0x588>)
 80088c8:	400a      	ands	r2, r1
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d2:	f383 8810 	msr	PRIMASK, r3
}
 80088d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088d8:	f3ef 8310 	mrs	r3, PRIMASK
 80088dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80088de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80088e2:	2301      	movs	r3, #1
 80088e4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088e8:	f383 8810 	msr	PRIMASK, r3
}
 80088ec:	46c0      	nop			@ (mov r8, r8)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2101      	movs	r1, #1
 80088fa:	438a      	bics	r2, r1
 80088fc:	609a      	str	r2, [r3, #8]
 80088fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008900:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008904:	f383 8810 	msr	PRIMASK, r3
}
 8008908:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800890a:	f3ef 8310 	mrs	r3, PRIMASK
 800890e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008912:	673b      	str	r3, [r7, #112]	@ 0x70
 8008914:	2301      	movs	r3, #1
 8008916:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800891a:	f383 8810 	msr	PRIMASK, r3
}
 800891e:	46c0      	nop			@ (mov r8, r8)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689a      	ldr	r2, [r3, #8]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2140      	movs	r1, #64	@ 0x40
 800892c:	438a      	bics	r2, r1
 800892e:	609a      	str	r2, [r3, #8]
 8008930:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008932:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008936:	f383 8810 	msr	PRIMASK, r3
}
 800893a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2280      	movs	r2, #128	@ 0x80
 8008940:	2120      	movs	r1, #32
 8008942:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800894a:	f3ef 8310 	mrs	r3, PRIMASK
 800894e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8008950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008952:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008954:	2301      	movs	r3, #1
 8008956:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008958:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800895a:	f383 8810 	msr	PRIMASK, r3
}
 800895e:	46c0      	nop			@ (mov r8, r8)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2110      	movs	r1, #16
 800896c:	438a      	bics	r2, r1
 800896e:	601a      	str	r2, [r3, #0]
 8008970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008972:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008974:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008976:	f383 8810 	msr	PRIMASK, r3
}
 800897a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008980:	0018      	movs	r0, r3
 8008982:	f7fc ff73 	bl	800586c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2202      	movs	r2, #2
 800898a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2258      	movs	r2, #88	@ 0x58
 8008990:	5a9a      	ldrh	r2, [r3, r2]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	215a      	movs	r1, #90	@ 0x5a
 8008996:	5a5b      	ldrh	r3, [r3, r1]
 8008998:	b29b      	uxth	r3, r3
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	b29a      	uxth	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	0011      	movs	r1, r2
 80089a2:	0018      	movs	r0, r3
 80089a4:	f000 f8c8 	bl	8008b38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089a8:	e0aa      	b.n	8008b00 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2258      	movs	r2, #88	@ 0x58
 80089ae:	5a99      	ldrh	r1, [r3, r2]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	225a      	movs	r2, #90	@ 0x5a
 80089b4:	5a9b      	ldrh	r3, [r3, r2]
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	208e      	movs	r0, #142	@ 0x8e
 80089ba:	183b      	adds	r3, r7, r0
 80089bc:	1a8a      	subs	r2, r1, r2
 80089be:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	225a      	movs	r2, #90	@ 0x5a
 80089c4:	5a9b      	ldrh	r3, [r3, r2]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d100      	bne.n	80089ce <HAL_UART_IRQHandler+0x446>
 80089cc:	e09a      	b.n	8008b04 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80089ce:	183b      	adds	r3, r7, r0
 80089d0:	881b      	ldrh	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d100      	bne.n	80089d8 <HAL_UART_IRQHandler+0x450>
 80089d6:	e095      	b.n	8008b04 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089d8:	f3ef 8310 	mrs	r3, PRIMASK
 80089dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80089de:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089e0:	2488      	movs	r4, #136	@ 0x88
 80089e2:	193a      	adds	r2, r7, r4
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	2301      	movs	r3, #1
 80089e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	f383 8810 	msr	PRIMASK, r3
}
 80089f0:	46c0      	nop			@ (mov r8, r8)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4945      	ldr	r1, [pc, #276]	@ (8008b14 <HAL_UART_IRQHandler+0x58c>)
 80089fe:	400a      	ands	r2, r1
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	193b      	adds	r3, r7, r4
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f383 8810 	msr	PRIMASK, r3
}
 8008a0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a10:	f3ef 8310 	mrs	r3, PRIMASK
 8008a14:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a16:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a18:	2484      	movs	r4, #132	@ 0x84
 8008a1a:	193a      	adds	r2, r7, r4
 8008a1c:	6013      	str	r3, [r2, #0]
 8008a1e:	2301      	movs	r3, #1
 8008a20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	f383 8810 	msr	PRIMASK, r3
}
 8008a28:	46c0      	nop			@ (mov r8, r8)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	689a      	ldr	r2, [r3, #8]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2101      	movs	r1, #1
 8008a36:	438a      	bics	r2, r1
 8008a38:	609a      	str	r2, [r3, #8]
 8008a3a:	193b      	adds	r3, r7, r4
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	f383 8810 	msr	PRIMASK, r3
}
 8008a46:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2280      	movs	r2, #128	@ 0x80
 8008a4c:	2120      	movs	r1, #32
 8008a4e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a60:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a64:	2480      	movs	r4, #128	@ 0x80
 8008a66:	193a      	adds	r2, r7, r4
 8008a68:	6013      	str	r3, [r2, #0]
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a70:	f383 8810 	msr	PRIMASK, r3
}
 8008a74:	46c0      	nop			@ (mov r8, r8)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2110      	movs	r1, #16
 8008a82:	438a      	bics	r2, r1
 8008a84:	601a      	str	r2, [r3, #0]
 8008a86:	193b      	adds	r3, r7, r4
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8e:	f383 8810 	msr	PRIMASK, r3
}
 8008a92:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2202      	movs	r2, #2
 8008a98:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a9a:	183b      	adds	r3, r7, r0
 8008a9c:	881a      	ldrh	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	0011      	movs	r1, r2
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	f000 f848 	bl	8008b38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008aa8:	e02c      	b.n	8008b04 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008aaa:	23a4      	movs	r3, #164	@ 0xa4
 8008aac:	18fb      	adds	r3, r7, r3
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2280      	movs	r2, #128	@ 0x80
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	d00f      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008ab6:	23a0      	movs	r3, #160	@ 0xa0
 8008ab8:	18fb      	adds	r3, r7, r3
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2280      	movs	r2, #128	@ 0x80
 8008abe:	4013      	ands	r3, r2
 8008ac0:	d009      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d01e      	beq.n	8008b08 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	0010      	movs	r0, r2
 8008ad2:	4798      	blx	r3
    }
    return;
 8008ad4:	e018      	b.n	8008b08 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ad6:	23a4      	movs	r3, #164	@ 0xa4
 8008ad8:	18fb      	adds	r3, r7, r3
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2240      	movs	r2, #64	@ 0x40
 8008ade:	4013      	ands	r3, r2
 8008ae0:	d013      	beq.n	8008b0a <HAL_UART_IRQHandler+0x582>
 8008ae2:	23a0      	movs	r3, #160	@ 0xa0
 8008ae4:	18fb      	adds	r3, r7, r3
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2240      	movs	r2, #64	@ 0x40
 8008aea:	4013      	ands	r3, r2
 8008aec:	d00d      	beq.n	8008b0a <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	0018      	movs	r0, r3
 8008af2:	f000 fd29 	bl	8009548 <UART_EndTransmit_IT>
    return;
 8008af6:	e008      	b.n	8008b0a <HAL_UART_IRQHandler+0x582>
      return;
 8008af8:	46c0      	nop			@ (mov r8, r8)
 8008afa:	e006      	b.n	8008b0a <HAL_UART_IRQHandler+0x582>
    return;
 8008afc:	46c0      	nop			@ (mov r8, r8)
 8008afe:	e004      	b.n	8008b0a <HAL_UART_IRQHandler+0x582>
      return;
 8008b00:	46c0      	nop			@ (mov r8, r8)
 8008b02:	e002      	b.n	8008b0a <HAL_UART_IRQHandler+0x582>
      return;
 8008b04:	46c0      	nop			@ (mov r8, r8)
 8008b06:	e000      	b.n	8008b0a <HAL_UART_IRQHandler+0x582>
    return;
 8008b08:	46c0      	nop			@ (mov r8, r8)
  }

}
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	b02b      	add	sp, #172	@ 0xac
 8008b0e:	bd90      	pop	{r4, r7, pc}
 8008b10:	fffffeff 	.word	0xfffffeff
 8008b14:	fffffedf 	.word	0xfffffedf

08008b18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b20:	46c0      	nop			@ (mov r8, r8)
 8008b22:	46bd      	mov	sp, r7
 8008b24:	b002      	add	sp, #8
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b30:	46c0      	nop			@ (mov r8, r8)
 8008b32:	46bd      	mov	sp, r7
 8008b34:	b002      	add	sp, #8
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	000a      	movs	r2, r1
 8008b42:	1cbb      	adds	r3, r7, #2
 8008b44:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b46:	46c0      	nop			@ (mov r8, r8)
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	b002      	add	sp, #8
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b088      	sub	sp, #32
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b58:	231e      	movs	r3, #30
 8008b5a:	18fb      	adds	r3, r7, r3
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	431a      	orrs	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	69db      	ldr	r3, [r3, #28]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a8d      	ldr	r2, [pc, #564]	@ (8008db4 <UART_SetConfig+0x264>)
 8008b80:	4013      	ands	r3, r2
 8008b82:	0019      	movs	r1, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	4a88      	ldr	r2, [pc, #544]	@ (8008db8 <UART_SetConfig+0x268>)
 8008b96:	4013      	ands	r3, r2
 8008b98:	0019      	movs	r1, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68da      	ldr	r2, [r3, #12]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	4a7f      	ldr	r2, [pc, #508]	@ (8008dbc <UART_SetConfig+0x26c>)
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	0019      	movs	r1, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a7b      	ldr	r2, [pc, #492]	@ (8008dc0 <UART_SetConfig+0x270>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d127      	bne.n	8008c26 <UART_SetConfig+0xd6>
 8008bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8008dc4 <UART_SetConfig+0x274>)
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bda:	2203      	movs	r2, #3
 8008bdc:	4013      	ands	r3, r2
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d00d      	beq.n	8008bfe <UART_SetConfig+0xae>
 8008be2:	d81b      	bhi.n	8008c1c <UART_SetConfig+0xcc>
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d014      	beq.n	8008c12 <UART_SetConfig+0xc2>
 8008be8:	d818      	bhi.n	8008c1c <UART_SetConfig+0xcc>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <UART_SetConfig+0xa4>
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d00a      	beq.n	8008c08 <UART_SetConfig+0xb8>
 8008bf2:	e013      	b.n	8008c1c <UART_SetConfig+0xcc>
 8008bf4:	231f      	movs	r3, #31
 8008bf6:	18fb      	adds	r3, r7, r3
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	701a      	strb	r2, [r3, #0]
 8008bfc:	e021      	b.n	8008c42 <UART_SetConfig+0xf2>
 8008bfe:	231f      	movs	r3, #31
 8008c00:	18fb      	adds	r3, r7, r3
 8008c02:	2202      	movs	r2, #2
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	e01c      	b.n	8008c42 <UART_SetConfig+0xf2>
 8008c08:	231f      	movs	r3, #31
 8008c0a:	18fb      	adds	r3, r7, r3
 8008c0c:	2204      	movs	r2, #4
 8008c0e:	701a      	strb	r2, [r3, #0]
 8008c10:	e017      	b.n	8008c42 <UART_SetConfig+0xf2>
 8008c12:	231f      	movs	r3, #31
 8008c14:	18fb      	adds	r3, r7, r3
 8008c16:	2208      	movs	r2, #8
 8008c18:	701a      	strb	r2, [r3, #0]
 8008c1a:	e012      	b.n	8008c42 <UART_SetConfig+0xf2>
 8008c1c:	231f      	movs	r3, #31
 8008c1e:	18fb      	adds	r3, r7, r3
 8008c20:	2210      	movs	r2, #16
 8008c22:	701a      	strb	r2, [r3, #0]
 8008c24:	e00d      	b.n	8008c42 <UART_SetConfig+0xf2>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a67      	ldr	r2, [pc, #412]	@ (8008dc8 <UART_SetConfig+0x278>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d104      	bne.n	8008c3a <UART_SetConfig+0xea>
 8008c30:	231f      	movs	r3, #31
 8008c32:	18fb      	adds	r3, r7, r3
 8008c34:	2200      	movs	r2, #0
 8008c36:	701a      	strb	r2, [r3, #0]
 8008c38:	e003      	b.n	8008c42 <UART_SetConfig+0xf2>
 8008c3a:	231f      	movs	r3, #31
 8008c3c:	18fb      	adds	r3, r7, r3
 8008c3e:	2210      	movs	r2, #16
 8008c40:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	69da      	ldr	r2, [r3, #28]
 8008c46:	2380      	movs	r3, #128	@ 0x80
 8008c48:	021b      	lsls	r3, r3, #8
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d15c      	bne.n	8008d08 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8008c4e:	231f      	movs	r3, #31
 8008c50:	18fb      	adds	r3, r7, r3
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b08      	cmp	r3, #8
 8008c56:	d015      	beq.n	8008c84 <UART_SetConfig+0x134>
 8008c58:	dc18      	bgt.n	8008c8c <UART_SetConfig+0x13c>
 8008c5a:	2b04      	cmp	r3, #4
 8008c5c:	d00d      	beq.n	8008c7a <UART_SetConfig+0x12a>
 8008c5e:	dc15      	bgt.n	8008c8c <UART_SetConfig+0x13c>
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d002      	beq.n	8008c6a <UART_SetConfig+0x11a>
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d005      	beq.n	8008c74 <UART_SetConfig+0x124>
 8008c68:	e010      	b.n	8008c8c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c6a:	f7fd fd75 	bl	8006758 <HAL_RCC_GetPCLK1Freq>
 8008c6e:	0003      	movs	r3, r0
 8008c70:	61bb      	str	r3, [r7, #24]
        break;
 8008c72:	e012      	b.n	8008c9a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c74:	4b55      	ldr	r3, [pc, #340]	@ (8008dcc <UART_SetConfig+0x27c>)
 8008c76:	61bb      	str	r3, [r7, #24]
        break;
 8008c78:	e00f      	b.n	8008c9a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c7a:	f7fd fd0d 	bl	8006698 <HAL_RCC_GetSysClockFreq>
 8008c7e:	0003      	movs	r3, r0
 8008c80:	61bb      	str	r3, [r7, #24]
        break;
 8008c82:	e00a      	b.n	8008c9a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c84:	2380      	movs	r3, #128	@ 0x80
 8008c86:	021b      	lsls	r3, r3, #8
 8008c88:	61bb      	str	r3, [r7, #24]
        break;
 8008c8a:	e006      	b.n	8008c9a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c90:	231e      	movs	r3, #30
 8008c92:	18fb      	adds	r3, r7, r3
 8008c94:	2201      	movs	r2, #1
 8008c96:	701a      	strb	r2, [r3, #0]
        break;
 8008c98:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d100      	bne.n	8008ca2 <UART_SetConfig+0x152>
 8008ca0:	e07a      	b.n	8008d98 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	005a      	lsls	r2, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	085b      	lsrs	r3, r3, #1
 8008cac:	18d2      	adds	r2, r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	0019      	movs	r1, r3
 8008cb4:	0010      	movs	r0, r2
 8008cb6:	f7f7 fa4d 	bl	8000154 <__udivsi3>
 8008cba:	0003      	movs	r3, r0
 8008cbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2b0f      	cmp	r3, #15
 8008cc2:	d91c      	bls.n	8008cfe <UART_SetConfig+0x1ae>
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	2380      	movs	r3, #128	@ 0x80
 8008cc8:	025b      	lsls	r3, r3, #9
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d217      	bcs.n	8008cfe <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	200e      	movs	r0, #14
 8008cd4:	183b      	adds	r3, r7, r0
 8008cd6:	210f      	movs	r1, #15
 8008cd8:	438a      	bics	r2, r1
 8008cda:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	085b      	lsrs	r3, r3, #1
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	2207      	movs	r2, #7
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	b299      	uxth	r1, r3
 8008ce8:	183b      	adds	r3, r7, r0
 8008cea:	183a      	adds	r2, r7, r0
 8008cec:	8812      	ldrh	r2, [r2, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	183a      	adds	r2, r7, r0
 8008cf8:	8812      	ldrh	r2, [r2, #0]
 8008cfa:	60da      	str	r2, [r3, #12]
 8008cfc:	e04c      	b.n	8008d98 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8008cfe:	231e      	movs	r3, #30
 8008d00:	18fb      	adds	r3, r7, r3
 8008d02:	2201      	movs	r2, #1
 8008d04:	701a      	strb	r2, [r3, #0]
 8008d06:	e047      	b.n	8008d98 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d08:	231f      	movs	r3, #31
 8008d0a:	18fb      	adds	r3, r7, r3
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b08      	cmp	r3, #8
 8008d10:	d015      	beq.n	8008d3e <UART_SetConfig+0x1ee>
 8008d12:	dc18      	bgt.n	8008d46 <UART_SetConfig+0x1f6>
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d00d      	beq.n	8008d34 <UART_SetConfig+0x1e4>
 8008d18:	dc15      	bgt.n	8008d46 <UART_SetConfig+0x1f6>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <UART_SetConfig+0x1d4>
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d005      	beq.n	8008d2e <UART_SetConfig+0x1de>
 8008d22:	e010      	b.n	8008d46 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d24:	f7fd fd18 	bl	8006758 <HAL_RCC_GetPCLK1Freq>
 8008d28:	0003      	movs	r3, r0
 8008d2a:	61bb      	str	r3, [r7, #24]
        break;
 8008d2c:	e012      	b.n	8008d54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d2e:	4b27      	ldr	r3, [pc, #156]	@ (8008dcc <UART_SetConfig+0x27c>)
 8008d30:	61bb      	str	r3, [r7, #24]
        break;
 8008d32:	e00f      	b.n	8008d54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d34:	f7fd fcb0 	bl	8006698 <HAL_RCC_GetSysClockFreq>
 8008d38:	0003      	movs	r3, r0
 8008d3a:	61bb      	str	r3, [r7, #24]
        break;
 8008d3c:	e00a      	b.n	8008d54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d3e:	2380      	movs	r3, #128	@ 0x80
 8008d40:	021b      	lsls	r3, r3, #8
 8008d42:	61bb      	str	r3, [r7, #24]
        break;
 8008d44:	e006      	b.n	8008d54 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d4a:	231e      	movs	r3, #30
 8008d4c:	18fb      	adds	r3, r7, r3
 8008d4e:	2201      	movs	r2, #1
 8008d50:	701a      	strb	r2, [r3, #0]
        break;
 8008d52:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01e      	beq.n	8008d98 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	085a      	lsrs	r2, r3, #1
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	18d2      	adds	r2, r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	0019      	movs	r1, r3
 8008d6a:	0010      	movs	r0, r2
 8008d6c:	f7f7 f9f2 	bl	8000154 <__udivsi3>
 8008d70:	0003      	movs	r3, r0
 8008d72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	2b0f      	cmp	r3, #15
 8008d78:	d90a      	bls.n	8008d90 <UART_SetConfig+0x240>
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	2380      	movs	r3, #128	@ 0x80
 8008d7e:	025b      	lsls	r3, r3, #9
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d205      	bcs.n	8008d90 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	60da      	str	r2, [r3, #12]
 8008d8e:	e003      	b.n	8008d98 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8008d90:	231e      	movs	r3, #30
 8008d92:	18fb      	adds	r3, r7, r3
 8008d94:	2201      	movs	r2, #1
 8008d96:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008da4:	231e      	movs	r3, #30
 8008da6:	18fb      	adds	r3, r7, r3
 8008da8:	781b      	ldrb	r3, [r3, #0]
}
 8008daa:	0018      	movs	r0, r3
 8008dac:	46bd      	mov	sp, r7
 8008dae:	b008      	add	sp, #32
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	46c0      	nop			@ (mov r8, r8)
 8008db4:	ffff69f3 	.word	0xffff69f3
 8008db8:	ffffcfff 	.word	0xffffcfff
 8008dbc:	fffff4ff 	.word	0xfffff4ff
 8008dc0:	40013800 	.word	0x40013800
 8008dc4:	40021000 	.word	0x40021000
 8008dc8:	40004400 	.word	0x40004400
 8008dcc:	007a1200 	.word	0x007a1200

08008dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ddc:	2208      	movs	r2, #8
 8008dde:	4013      	ands	r3, r2
 8008de0:	d00b      	beq.n	8008dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	4a4a      	ldr	r2, [pc, #296]	@ (8008f14 <UART_AdvFeatureConfig+0x144>)
 8008dea:	4013      	ands	r3, r2
 8008dec:	0019      	movs	r1, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfe:	2201      	movs	r2, #1
 8008e00:	4013      	ands	r3, r2
 8008e02:	d00b      	beq.n	8008e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	4a43      	ldr	r2, [pc, #268]	@ (8008f18 <UART_AdvFeatureConfig+0x148>)
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	0019      	movs	r1, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e20:	2202      	movs	r2, #2
 8008e22:	4013      	ands	r3, r2
 8008e24:	d00b      	beq.n	8008e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	4a3b      	ldr	r2, [pc, #236]	@ (8008f1c <UART_AdvFeatureConfig+0x14c>)
 8008e2e:	4013      	ands	r3, r2
 8008e30:	0019      	movs	r1, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e42:	2204      	movs	r2, #4
 8008e44:	4013      	ands	r3, r2
 8008e46:	d00b      	beq.n	8008e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	4a34      	ldr	r2, [pc, #208]	@ (8008f20 <UART_AdvFeatureConfig+0x150>)
 8008e50:	4013      	ands	r3, r2
 8008e52:	0019      	movs	r1, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e64:	2210      	movs	r2, #16
 8008e66:	4013      	ands	r3, r2
 8008e68:	d00b      	beq.n	8008e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	4a2c      	ldr	r2, [pc, #176]	@ (8008f24 <UART_AdvFeatureConfig+0x154>)
 8008e72:	4013      	ands	r3, r2
 8008e74:	0019      	movs	r1, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e86:	2220      	movs	r2, #32
 8008e88:	4013      	ands	r3, r2
 8008e8a:	d00b      	beq.n	8008ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	4a25      	ldr	r2, [pc, #148]	@ (8008f28 <UART_AdvFeatureConfig+0x158>)
 8008e94:	4013      	ands	r3, r2
 8008e96:	0019      	movs	r1, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea8:	2240      	movs	r2, #64	@ 0x40
 8008eaa:	4013      	ands	r3, r2
 8008eac:	d01d      	beq.n	8008eea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8008f2c <UART_AdvFeatureConfig+0x15c>)
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	0019      	movs	r1, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008eca:	2380      	movs	r3, #128	@ 0x80
 8008ecc:	035b      	lsls	r3, r3, #13
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d10b      	bne.n	8008eea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	4a15      	ldr	r2, [pc, #84]	@ (8008f30 <UART_AdvFeatureConfig+0x160>)
 8008eda:	4013      	ands	r3, r2
 8008edc:	0019      	movs	r1, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eee:	2280      	movs	r2, #128	@ 0x80
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	d00b      	beq.n	8008f0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	4a0e      	ldr	r2, [pc, #56]	@ (8008f34 <UART_AdvFeatureConfig+0x164>)
 8008efc:	4013      	ands	r3, r2
 8008efe:	0019      	movs	r1, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	605a      	str	r2, [r3, #4]
  }
}
 8008f0c:	46c0      	nop			@ (mov r8, r8)
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	b002      	add	sp, #8
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	ffff7fff 	.word	0xffff7fff
 8008f18:	fffdffff 	.word	0xfffdffff
 8008f1c:	fffeffff 	.word	0xfffeffff
 8008f20:	fffbffff 	.word	0xfffbffff
 8008f24:	ffffefff 	.word	0xffffefff
 8008f28:	ffffdfff 	.word	0xffffdfff
 8008f2c:	ffefffff 	.word	0xffefffff
 8008f30:	ff9fffff 	.word	0xff9fffff
 8008f34:	fff7ffff 	.word	0xfff7ffff

08008f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b092      	sub	sp, #72	@ 0x48
 8008f3c:	af02      	add	r7, sp, #8
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2284      	movs	r2, #132	@ 0x84
 8008f44:	2100      	movs	r1, #0
 8008f46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f48:	f7fb ff2a 	bl	8004da0 <HAL_GetTick>
 8008f4c:	0003      	movs	r3, r0
 8008f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2208      	movs	r2, #8
 8008f58:	4013      	ands	r3, r2
 8008f5a:	2b08      	cmp	r3, #8
 8008f5c:	d12c      	bne.n	8008fb8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f60:	2280      	movs	r2, #128	@ 0x80
 8008f62:	0391      	lsls	r1, r2, #14
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	4a46      	ldr	r2, [pc, #280]	@ (8009080 <UART_CheckIdleState+0x148>)
 8008f68:	9200      	str	r2, [sp, #0]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f000 f88c 	bl	8009088 <UART_WaitOnFlagUntilTimeout>
 8008f70:	1e03      	subs	r3, r0, #0
 8008f72:	d021      	beq.n	8008fb8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f74:	f3ef 8310 	mrs	r3, PRIMASK
 8008f78:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f7e:	2301      	movs	r3, #1
 8008f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f84:	f383 8810 	msr	PRIMASK, r3
}
 8008f88:	46c0      	nop			@ (mov r8, r8)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2180      	movs	r1, #128	@ 0x80
 8008f96:	438a      	bics	r2, r1
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa0:	f383 8810 	msr	PRIMASK, r3
}
 8008fa4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2278      	movs	r2, #120	@ 0x78
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e05f      	b.n	8009078 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2204      	movs	r2, #4
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d146      	bne.n	8009054 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fc8:	2280      	movs	r2, #128	@ 0x80
 8008fca:	03d1      	lsls	r1, r2, #15
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	4a2c      	ldr	r2, [pc, #176]	@ (8009080 <UART_CheckIdleState+0x148>)
 8008fd0:	9200      	str	r2, [sp, #0]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f000 f858 	bl	8009088 <UART_WaitOnFlagUntilTimeout>
 8008fd8:	1e03      	subs	r3, r0, #0
 8008fda:	d03b      	beq.n	8009054 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8008fe0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f383 8810 	msr	PRIMASK, r3
}
 8008ff0:	46c0      	nop			@ (mov r8, r8)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4921      	ldr	r1, [pc, #132]	@ (8009084 <UART_CheckIdleState+0x14c>)
 8008ffe:	400a      	ands	r2, r1
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009004:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f383 8810 	msr	PRIMASK, r3
}
 800900c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800900e:	f3ef 8310 	mrs	r3, PRIMASK
 8009012:	61bb      	str	r3, [r7, #24]
  return(result);
 8009014:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009016:	633b      	str	r3, [r7, #48]	@ 0x30
 8009018:	2301      	movs	r3, #1
 800901a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	f383 8810 	msr	PRIMASK, r3
}
 8009022:	46c0      	nop			@ (mov r8, r8)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689a      	ldr	r2, [r3, #8]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2101      	movs	r1, #1
 8009030:	438a      	bics	r2, r1
 8009032:	609a      	str	r2, [r3, #8]
 8009034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009036:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	f383 8810 	msr	PRIMASK, r3
}
 800903e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2280      	movs	r2, #128	@ 0x80
 8009044:	2120      	movs	r1, #32
 8009046:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2278      	movs	r2, #120	@ 0x78
 800904c:	2100      	movs	r1, #0
 800904e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e011      	b.n	8009078 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2220      	movs	r2, #32
 8009058:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2280      	movs	r2, #128	@ 0x80
 800905e:	2120      	movs	r1, #32
 8009060:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2278      	movs	r2, #120	@ 0x78
 8009072:	2100      	movs	r1, #0
 8009074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	0018      	movs	r0, r3
 800907a:	46bd      	mov	sp, r7
 800907c:	b010      	add	sp, #64	@ 0x40
 800907e:	bd80      	pop	{r7, pc}
 8009080:	01ffffff 	.word	0x01ffffff
 8009084:	fffffedf 	.word	0xfffffedf

08009088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	1dfb      	adds	r3, r7, #7
 8009096:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009098:	e051      	b.n	800913e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	3301      	adds	r3, #1
 800909e:	d04e      	beq.n	800913e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090a0:	f7fb fe7e 	bl	8004da0 <HAL_GetTick>
 80090a4:	0002      	movs	r2, r0
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	69ba      	ldr	r2, [r7, #24]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d302      	bcc.n	80090b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e051      	b.n	800915e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2204      	movs	r2, #4
 80090c2:	4013      	ands	r3, r2
 80090c4:	d03b      	beq.n	800913e <UART_WaitOnFlagUntilTimeout+0xb6>
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2b80      	cmp	r3, #128	@ 0x80
 80090ca:	d038      	beq.n	800913e <UART_WaitOnFlagUntilTimeout+0xb6>
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2b40      	cmp	r3, #64	@ 0x40
 80090d0:	d035      	beq.n	800913e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	69db      	ldr	r3, [r3, #28]
 80090d8:	2208      	movs	r2, #8
 80090da:	4013      	ands	r3, r2
 80090dc:	2b08      	cmp	r3, #8
 80090de:	d111      	bne.n	8009104 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2208      	movs	r2, #8
 80090e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	0018      	movs	r0, r3
 80090ec:	f000 f916 	bl	800931c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2284      	movs	r2, #132	@ 0x84
 80090f4:	2108      	movs	r1, #8
 80090f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2278      	movs	r2, #120	@ 0x78
 80090fc:	2100      	movs	r1, #0
 80090fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e02c      	b.n	800915e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	69da      	ldr	r2, [r3, #28]
 800910a:	2380      	movs	r3, #128	@ 0x80
 800910c:	011b      	lsls	r3, r3, #4
 800910e:	401a      	ands	r2, r3
 8009110:	2380      	movs	r3, #128	@ 0x80
 8009112:	011b      	lsls	r3, r3, #4
 8009114:	429a      	cmp	r2, r3
 8009116:	d112      	bne.n	800913e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2280      	movs	r2, #128	@ 0x80
 800911e:	0112      	lsls	r2, r2, #4
 8009120:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	0018      	movs	r0, r3
 8009126:	f000 f8f9 	bl	800931c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2284      	movs	r2, #132	@ 0x84
 800912e:	2120      	movs	r1, #32
 8009130:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2278      	movs	r2, #120	@ 0x78
 8009136:	2100      	movs	r1, #0
 8009138:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e00f      	b.n	800915e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	4013      	ands	r3, r2
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	425a      	negs	r2, r3
 800914e:	4153      	adcs	r3, r2
 8009150:	b2db      	uxtb	r3, r3
 8009152:	001a      	movs	r2, r3
 8009154:	1dfb      	adds	r3, r7, #7
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	429a      	cmp	r2, r3
 800915a:	d09e      	beq.n	800909a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	0018      	movs	r0, r3
 8009160:	46bd      	mov	sp, r7
 8009162:	b004      	add	sp, #16
 8009164:	bd80      	pop	{r7, pc}
	...

08009168 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b090      	sub	sp, #64	@ 0x40
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	1dbb      	adds	r3, r7, #6
 8009174:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	1dba      	adds	r2, r7, #6
 8009180:	2158      	movs	r1, #88	@ 0x58
 8009182:	8812      	ldrh	r2, [r2, #0]
 8009184:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	1dba      	adds	r2, r7, #6
 800918a:	215a      	movs	r1, #90	@ 0x5a
 800918c:	8812      	ldrh	r2, [r2, #0]
 800918e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689a      	ldr	r2, [r3, #8]
 800919a:	2380      	movs	r3, #128	@ 0x80
 800919c:	015b      	lsls	r3, r3, #5
 800919e:	429a      	cmp	r2, r3
 80091a0:	d10d      	bne.n	80091be <UART_Start_Receive_IT+0x56>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d104      	bne.n	80091b4 <UART_Start_Receive_IT+0x4c>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	225c      	movs	r2, #92	@ 0x5c
 80091ae:	4946      	ldr	r1, [pc, #280]	@ (80092c8 <UART_Start_Receive_IT+0x160>)
 80091b0:	5299      	strh	r1, [r3, r2]
 80091b2:	e01a      	b.n	80091ea <UART_Start_Receive_IT+0x82>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	225c      	movs	r2, #92	@ 0x5c
 80091b8:	21ff      	movs	r1, #255	@ 0xff
 80091ba:	5299      	strh	r1, [r3, r2]
 80091bc:	e015      	b.n	80091ea <UART_Start_Receive_IT+0x82>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10d      	bne.n	80091e2 <UART_Start_Receive_IT+0x7a>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d104      	bne.n	80091d8 <UART_Start_Receive_IT+0x70>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	225c      	movs	r2, #92	@ 0x5c
 80091d2:	21ff      	movs	r1, #255	@ 0xff
 80091d4:	5299      	strh	r1, [r3, r2]
 80091d6:	e008      	b.n	80091ea <UART_Start_Receive_IT+0x82>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	225c      	movs	r2, #92	@ 0x5c
 80091dc:	217f      	movs	r1, #127	@ 0x7f
 80091de:	5299      	strh	r1, [r3, r2]
 80091e0:	e003      	b.n	80091ea <UART_Start_Receive_IT+0x82>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	225c      	movs	r2, #92	@ 0x5c
 80091e6:	2100      	movs	r1, #0
 80091e8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2284      	movs	r2, #132	@ 0x84
 80091ee:	2100      	movs	r1, #0
 80091f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2280      	movs	r2, #128	@ 0x80
 80091f6:	2122      	movs	r1, #34	@ 0x22
 80091f8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091fa:	f3ef 8310 	mrs	r3, PRIMASK
 80091fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8009200:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009204:	2301      	movs	r3, #1
 8009206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920a:	f383 8810 	msr	PRIMASK, r3
}
 800920e:	46c0      	nop			@ (mov r8, r8)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689a      	ldr	r2, [r3, #8]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2101      	movs	r1, #1
 800921c:	430a      	orrs	r2, r1
 800921e:	609a      	str	r2, [r3, #8]
 8009220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009222:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009226:	f383 8810 	msr	PRIMASK, r3
}
 800922a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	689a      	ldr	r2, [r3, #8]
 8009230:	2380      	movs	r3, #128	@ 0x80
 8009232:	015b      	lsls	r3, r3, #5
 8009234:	429a      	cmp	r2, r3
 8009236:	d107      	bne.n	8009248 <UART_Start_Receive_IT+0xe0>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d103      	bne.n	8009248 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4a22      	ldr	r2, [pc, #136]	@ (80092cc <UART_Start_Receive_IT+0x164>)
 8009244:	669a      	str	r2, [r3, #104]	@ 0x68
 8009246:	e002      	b.n	800924e <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	4a21      	ldr	r2, [pc, #132]	@ (80092d0 <UART_Start_Receive_IT+0x168>)
 800924c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d019      	beq.n	800928a <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009256:	f3ef 8310 	mrs	r3, PRIMASK
 800925a:	61fb      	str	r3, [r7, #28]
  return(result);
 800925c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800925e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009260:	2301      	movs	r3, #1
 8009262:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	f383 8810 	msr	PRIMASK, r3
}
 800926a:	46c0      	nop			@ (mov r8, r8)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2190      	movs	r1, #144	@ 0x90
 8009278:	0049      	lsls	r1, r1, #1
 800927a:	430a      	orrs	r2, r1
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009280:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009284:	f383 8810 	msr	PRIMASK, r3
}
 8009288:	e018      	b.n	80092bc <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800928a:	f3ef 8310 	mrs	r3, PRIMASK
 800928e:	613b      	str	r3, [r7, #16]
  return(result);
 8009290:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009292:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009294:	2301      	movs	r3, #1
 8009296:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f383 8810 	msr	PRIMASK, r3
}
 800929e:	46c0      	nop			@ (mov r8, r8)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2120      	movs	r1, #32
 80092ac:	430a      	orrs	r2, r1
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	f383 8810 	msr	PRIMASK, r3
}
 80092ba:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	0018      	movs	r0, r3
 80092c0:	46bd      	mov	sp, r7
 80092c2:	b010      	add	sp, #64	@ 0x40
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	46c0      	nop			@ (mov r8, r8)
 80092c8:	000001ff 	.word	0x000001ff
 80092cc:	08009759 	.word	0x08009759
 80092d0:	080095a1 	.word	0x080095a1

080092d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092dc:	f3ef 8310 	mrs	r3, PRIMASK
 80092e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80092e2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80092e4:	617b      	str	r3, [r7, #20]
 80092e6:	2301      	movs	r3, #1
 80092e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f383 8810 	msr	PRIMASK, r3
}
 80092f0:	46c0      	nop			@ (mov r8, r8)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	21c0      	movs	r1, #192	@ 0xc0
 80092fe:	438a      	bics	r2, r1
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	f383 8810 	msr	PRIMASK, r3
}
 800930c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2220      	movs	r2, #32
 8009312:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009314:	46c0      	nop			@ (mov r8, r8)
 8009316:	46bd      	mov	sp, r7
 8009318:	b006      	add	sp, #24
 800931a:	bd80      	pop	{r7, pc}

0800931c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b08e      	sub	sp, #56	@ 0x38
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009324:	f3ef 8310 	mrs	r3, PRIMASK
 8009328:	617b      	str	r3, [r7, #20]
  return(result);
 800932a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800932c:	637b      	str	r3, [r7, #52]	@ 0x34
 800932e:	2301      	movs	r3, #1
 8009330:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	f383 8810 	msr	PRIMASK, r3
}
 8009338:	46c0      	nop			@ (mov r8, r8)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4926      	ldr	r1, [pc, #152]	@ (80093e0 <UART_EndRxTransfer+0xc4>)
 8009346:	400a      	ands	r2, r1
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800934c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	f383 8810 	msr	PRIMASK, r3
}
 8009354:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009356:	f3ef 8310 	mrs	r3, PRIMASK
 800935a:	623b      	str	r3, [r7, #32]
  return(result);
 800935c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009360:	2301      	movs	r3, #1
 8009362:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009366:	f383 8810 	msr	PRIMASK, r3
}
 800936a:	46c0      	nop			@ (mov r8, r8)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689a      	ldr	r2, [r3, #8]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2101      	movs	r1, #1
 8009378:	438a      	bics	r2, r1
 800937a:	609a      	str	r2, [r3, #8]
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009382:	f383 8810 	msr	PRIMASK, r3
}
 8009386:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800938c:	2b01      	cmp	r3, #1
 800938e:	d118      	bne.n	80093c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009390:	f3ef 8310 	mrs	r3, PRIMASK
 8009394:	60bb      	str	r3, [r7, #8]
  return(result);
 8009396:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800939a:	2301      	movs	r3, #1
 800939c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f383 8810 	msr	PRIMASK, r3
}
 80093a4:	46c0      	nop			@ (mov r8, r8)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2110      	movs	r1, #16
 80093b2:	438a      	bics	r2, r1
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f383 8810 	msr	PRIMASK, r3
}
 80093c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2280      	movs	r2, #128	@ 0x80
 80093c6:	2120      	movs	r1, #32
 80093c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80093d6:	46c0      	nop			@ (mov r8, r8)
 80093d8:	46bd      	mov	sp, r7
 80093da:	b00e      	add	sp, #56	@ 0x38
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	46c0      	nop			@ (mov r8, r8)
 80093e0:	fffffedf 	.word	0xfffffedf

080093e4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08c      	sub	sp, #48	@ 0x30
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	2b20      	cmp	r3, #32
 80093f8:	d035      	beq.n	8009466 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 80093fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fc:	2252      	movs	r2, #82	@ 0x52
 80093fe:	2100      	movs	r1, #0
 8009400:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009402:	f3ef 8310 	mrs	r3, PRIMASK
 8009406:	60fb      	str	r3, [r7, #12]
  return(result);
 8009408:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800940a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800940c:	2301      	movs	r3, #1
 800940e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	f383 8810 	msr	PRIMASK, r3
}
 8009416:	46c0      	nop			@ (mov r8, r8)
 8009418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689a      	ldr	r2, [r3, #8]
 800941e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2180      	movs	r1, #128	@ 0x80
 8009424:	438a      	bics	r2, r1
 8009426:	609a      	str	r2, [r3, #8]
 8009428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f383 8810 	msr	PRIMASK, r3
}
 8009432:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009434:	f3ef 8310 	mrs	r3, PRIMASK
 8009438:	61bb      	str	r3, [r7, #24]
  return(result);
 800943a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800943c:	627b      	str	r3, [r7, #36]	@ 0x24
 800943e:	2301      	movs	r3, #1
 8009440:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	f383 8810 	msr	PRIMASK, r3
}
 8009448:	46c0      	nop			@ (mov r8, r8)
 800944a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2140      	movs	r1, #64	@ 0x40
 8009456:	430a      	orrs	r2, r1
 8009458:	601a      	str	r2, [r3, #0]
 800945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	f383 8810 	msr	PRIMASK, r3
}
 8009464:	e004      	b.n	8009470 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8009466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009468:	0018      	movs	r0, r3
 800946a:	f7f9 ff9b 	bl	80033a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800946e:	46c0      	nop			@ (mov r8, r8)
 8009470:	46c0      	nop			@ (mov r8, r8)
 8009472:	46bd      	mov	sp, r7
 8009474:	b00c      	add	sp, #48	@ 0x30
 8009476:	bd80      	pop	{r7, pc}

08009478 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009484:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	0018      	movs	r0, r3
 800948a:	f7ff fb45 	bl	8008b18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800948e:	46c0      	nop			@ (mov r8, r8)
 8009490:	46bd      	mov	sp, r7
 8009492:	b004      	add	sp, #16
 8009494:	bd80      	pop	{r7, pc}

08009496 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b086      	sub	sp, #24
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2280      	movs	r2, #128	@ 0x80
 80094ae:	589b      	ldr	r3, [r3, r2]
 80094b0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	2280      	movs	r2, #128	@ 0x80
 80094ba:	4013      	ands	r3, r2
 80094bc:	2b80      	cmp	r3, #128	@ 0x80
 80094be:	d10a      	bne.n	80094d6 <UART_DMAError+0x40>
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	2b21      	cmp	r3, #33	@ 0x21
 80094c4:	d107      	bne.n	80094d6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	2252      	movs	r2, #82	@ 0x52
 80094ca:	2100      	movs	r1, #0
 80094cc:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	0018      	movs	r0, r3
 80094d2:	f7ff feff 	bl	80092d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	2240      	movs	r2, #64	@ 0x40
 80094de:	4013      	ands	r3, r2
 80094e0:	2b40      	cmp	r3, #64	@ 0x40
 80094e2:	d10a      	bne.n	80094fa <UART_DMAError+0x64>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b22      	cmp	r3, #34	@ 0x22
 80094e8:	d107      	bne.n	80094fa <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	225a      	movs	r2, #90	@ 0x5a
 80094ee:	2100      	movs	r1, #0
 80094f0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	0018      	movs	r0, r3
 80094f6:	f7ff ff11 	bl	800931c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	2284      	movs	r2, #132	@ 0x84
 80094fe:	589b      	ldr	r3, [r3, r2]
 8009500:	2210      	movs	r2, #16
 8009502:	431a      	orrs	r2, r3
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	2184      	movs	r1, #132	@ 0x84
 8009508:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	0018      	movs	r0, r3
 800950e:	f7ff fb0b 	bl	8008b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009512:	46c0      	nop			@ (mov r8, r8)
 8009514:	46bd      	mov	sp, r7
 8009516:	b006      	add	sp, #24
 8009518:	bd80      	pop	{r7, pc}

0800951a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009526:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	225a      	movs	r2, #90	@ 0x5a
 800952c:	2100      	movs	r1, #0
 800952e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2252      	movs	r2, #82	@ 0x52
 8009534:	2100      	movs	r1, #0
 8009536:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	0018      	movs	r0, r3
 800953c:	f7ff faf4 	bl	8008b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009540:	46c0      	nop			@ (mov r8, r8)
 8009542:	46bd      	mov	sp, r7
 8009544:	b004      	add	sp, #16
 8009546:	bd80      	pop	{r7, pc}

08009548 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009550:	f3ef 8310 	mrs	r3, PRIMASK
 8009554:	60bb      	str	r3, [r7, #8]
  return(result);
 8009556:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	2301      	movs	r3, #1
 800955c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f383 8810 	msr	PRIMASK, r3
}
 8009564:	46c0      	nop			@ (mov r8, r8)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2140      	movs	r1, #64	@ 0x40
 8009572:	438a      	bics	r2, r1
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	f383 8810 	msr	PRIMASK, r3
}
 8009580:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	0018      	movs	r0, r3
 8009592:	f7f9 ff07 	bl	80033a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009596:	46c0      	nop			@ (mov r8, r8)
 8009598:	46bd      	mov	sp, r7
 800959a:	b006      	add	sp, #24
 800959c:	bd80      	pop	{r7, pc}
	...

080095a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b094      	sub	sp, #80	@ 0x50
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80095a8:	204e      	movs	r0, #78	@ 0x4e
 80095aa:	183b      	adds	r3, r7, r0
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	215c      	movs	r1, #92	@ 0x5c
 80095b0:	5a52      	ldrh	r2, [r2, r1]
 80095b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2280      	movs	r2, #128	@ 0x80
 80095b8:	589b      	ldr	r3, [r3, r2]
 80095ba:	2b22      	cmp	r3, #34	@ 0x22
 80095bc:	d000      	beq.n	80095c0 <UART_RxISR_8BIT+0x20>
 80095be:	e0ba      	b.n	8009736 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	214c      	movs	r1, #76	@ 0x4c
 80095c6:	187b      	adds	r3, r7, r1
 80095c8:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80095ca:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095cc:	187b      	adds	r3, r7, r1
 80095ce:	881b      	ldrh	r3, [r3, #0]
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	183b      	adds	r3, r7, r0
 80095d4:	881b      	ldrh	r3, [r3, #0]
 80095d6:	b2d9      	uxtb	r1, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095dc:	400a      	ands	r2, r1
 80095de:	b2d2      	uxtb	r2, r2
 80095e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	225a      	movs	r2, #90	@ 0x5a
 80095f0:	5a9b      	ldrh	r3, [r3, r2]
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	3b01      	subs	r3, #1
 80095f6:	b299      	uxth	r1, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	225a      	movs	r2, #90	@ 0x5a
 80095fc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	225a      	movs	r2, #90	@ 0x5a
 8009602:	5a9b      	ldrh	r3, [r3, r2]
 8009604:	b29b      	uxth	r3, r3
 8009606:	2b00      	cmp	r3, #0
 8009608:	d000      	beq.n	800960c <UART_RxISR_8BIT+0x6c>
 800960a:	e09c      	b.n	8009746 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800960c:	f3ef 8310 	mrs	r3, PRIMASK
 8009610:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009614:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009616:	2301      	movs	r3, #1
 8009618:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	f383 8810 	msr	PRIMASK, r3
}
 8009620:	46c0      	nop			@ (mov r8, r8)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4948      	ldr	r1, [pc, #288]	@ (8009750 <UART_RxISR_8BIT+0x1b0>)
 800962e:	400a      	ands	r2, r1
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009638:	f383 8810 	msr	PRIMASK, r3
}
 800963c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800963e:	f3ef 8310 	mrs	r3, PRIMASK
 8009642:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009646:	647b      	str	r3, [r7, #68]	@ 0x44
 8009648:	2301      	movs	r3, #1
 800964a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800964c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800964e:	f383 8810 	msr	PRIMASK, r3
}
 8009652:	46c0      	nop			@ (mov r8, r8)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689a      	ldr	r2, [r3, #8]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2101      	movs	r1, #1
 8009660:	438a      	bics	r2, r1
 8009662:	609a      	str	r2, [r3, #8]
 8009664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009666:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966a:	f383 8810 	msr	PRIMASK, r3
}
 800966e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2280      	movs	r2, #128	@ 0x80
 8009674:	2120      	movs	r1, #32
 8009676:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	685a      	ldr	r2, [r3, #4]
 800968a:	2380      	movs	r3, #128	@ 0x80
 800968c:	041b      	lsls	r3, r3, #16
 800968e:	4013      	ands	r3, r2
 8009690:	d018      	beq.n	80096c4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009692:	f3ef 8310 	mrs	r3, PRIMASK
 8009696:	61bb      	str	r3, [r7, #24]
  return(result);
 8009698:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800969a:	643b      	str	r3, [r7, #64]	@ 0x40
 800969c:	2301      	movs	r3, #1
 800969e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	f383 8810 	msr	PRIMASK, r3
}
 80096a6:	46c0      	nop			@ (mov r8, r8)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4928      	ldr	r1, [pc, #160]	@ (8009754 <UART_RxISR_8BIT+0x1b4>)
 80096b4:	400a      	ands	r2, r1
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	f383 8810 	msr	PRIMASK, r3
}
 80096c2:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d12f      	bne.n	800972c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096d2:	f3ef 8310 	mrs	r3, PRIMASK
 80096d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80096d8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096dc:	2301      	movs	r3, #1
 80096de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f383 8810 	msr	PRIMASK, r3
}
 80096e6:	46c0      	nop			@ (mov r8, r8)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2110      	movs	r1, #16
 80096f4:	438a      	bics	r2, r1
 80096f6:	601a      	str	r2, [r3, #0]
 80096f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	f383 8810 	msr	PRIMASK, r3
}
 8009702:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	2210      	movs	r2, #16
 800970c:	4013      	ands	r3, r2
 800970e:	2b10      	cmp	r3, #16
 8009710:	d103      	bne.n	800971a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2210      	movs	r2, #16
 8009718:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2258      	movs	r2, #88	@ 0x58
 800971e:	5a9a      	ldrh	r2, [r3, r2]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	0011      	movs	r1, r2
 8009724:	0018      	movs	r0, r3
 8009726:	f7ff fa07 	bl	8008b38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800972a:	e00c      	b.n	8009746 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	0018      	movs	r0, r3
 8009730:	f7f9 fcfe 	bl	8003130 <HAL_UART_RxCpltCallback>
}
 8009734:	e007      	b.n	8009746 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	699a      	ldr	r2, [r3, #24]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2108      	movs	r1, #8
 8009742:	430a      	orrs	r2, r1
 8009744:	619a      	str	r2, [r3, #24]
}
 8009746:	46c0      	nop			@ (mov r8, r8)
 8009748:	46bd      	mov	sp, r7
 800974a:	b014      	add	sp, #80	@ 0x50
 800974c:	bd80      	pop	{r7, pc}
 800974e:	46c0      	nop			@ (mov r8, r8)
 8009750:	fffffedf 	.word	0xfffffedf
 8009754:	fbffffff 	.word	0xfbffffff

08009758 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b094      	sub	sp, #80	@ 0x50
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009760:	204e      	movs	r0, #78	@ 0x4e
 8009762:	183b      	adds	r3, r7, r0
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	215c      	movs	r1, #92	@ 0x5c
 8009768:	5a52      	ldrh	r2, [r2, r1]
 800976a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2280      	movs	r2, #128	@ 0x80
 8009770:	589b      	ldr	r3, [r3, r2]
 8009772:	2b22      	cmp	r3, #34	@ 0x22
 8009774:	d000      	beq.n	8009778 <UART_RxISR_16BIT+0x20>
 8009776:	e0ba      	b.n	80098ee <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	214c      	movs	r1, #76	@ 0x4c
 800977e:	187b      	adds	r3, r7, r1
 8009780:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8009782:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009788:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800978a:	187b      	adds	r3, r7, r1
 800978c:	183a      	adds	r2, r7, r0
 800978e:	881b      	ldrh	r3, [r3, #0]
 8009790:	8812      	ldrh	r2, [r2, #0]
 8009792:	4013      	ands	r3, r2
 8009794:	b29a      	uxth	r2, r3
 8009796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009798:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800979e:	1c9a      	adds	r2, r3, #2
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	225a      	movs	r2, #90	@ 0x5a
 80097a8:	5a9b      	ldrh	r3, [r3, r2]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	3b01      	subs	r3, #1
 80097ae:	b299      	uxth	r1, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	225a      	movs	r2, #90	@ 0x5a
 80097b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	225a      	movs	r2, #90	@ 0x5a
 80097ba:	5a9b      	ldrh	r3, [r3, r2]
 80097bc:	b29b      	uxth	r3, r3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d000      	beq.n	80097c4 <UART_RxISR_16BIT+0x6c>
 80097c2:	e09c      	b.n	80098fe <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097c4:	f3ef 8310 	mrs	r3, PRIMASK
 80097c8:	623b      	str	r3, [r7, #32]
  return(result);
 80097ca:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80097ce:	2301      	movs	r3, #1
 80097d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d4:	f383 8810 	msr	PRIMASK, r3
}
 80097d8:	46c0      	nop			@ (mov r8, r8)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4948      	ldr	r1, [pc, #288]	@ (8009908 <UART_RxISR_16BIT+0x1b0>)
 80097e6:	400a      	ands	r2, r1
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f0:	f383 8810 	msr	PRIMASK, r3
}
 80097f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097f6:	f3ef 8310 	mrs	r3, PRIMASK
 80097fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80097fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8009800:	2301      	movs	r3, #1
 8009802:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009806:	f383 8810 	msr	PRIMASK, r3
}
 800980a:	46c0      	nop			@ (mov r8, r8)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	689a      	ldr	r2, [r3, #8]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2101      	movs	r1, #1
 8009818:	438a      	bics	r2, r1
 800981a:	609a      	str	r2, [r3, #8]
 800981c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800981e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009822:	f383 8810 	msr	PRIMASK, r3
}
 8009826:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2280      	movs	r2, #128	@ 0x80
 800982c:	2120      	movs	r1, #32
 800982e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	2380      	movs	r3, #128	@ 0x80
 8009844:	041b      	lsls	r3, r3, #16
 8009846:	4013      	ands	r3, r2
 8009848:	d018      	beq.n	800987c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800984a:	f3ef 8310 	mrs	r3, PRIMASK
 800984e:	617b      	str	r3, [r7, #20]
  return(result);
 8009850:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009854:	2301      	movs	r3, #1
 8009856:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	f383 8810 	msr	PRIMASK, r3
}
 800985e:	46c0      	nop			@ (mov r8, r8)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4928      	ldr	r1, [pc, #160]	@ (800990c <UART_RxISR_16BIT+0x1b4>)
 800986c:	400a      	ands	r2, r1
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009872:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	f383 8810 	msr	PRIMASK, r3
}
 800987a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009880:	2b01      	cmp	r3, #1
 8009882:	d12f      	bne.n	80098e4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800988a:	f3ef 8310 	mrs	r3, PRIMASK
 800988e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009890:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009892:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009894:	2301      	movs	r3, #1
 8009896:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f383 8810 	msr	PRIMASK, r3
}
 800989e:	46c0      	nop			@ (mov r8, r8)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2110      	movs	r1, #16
 80098ac:	438a      	bics	r2, r1
 80098ae:	601a      	str	r2, [r3, #0]
 80098b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	f383 8810 	msr	PRIMASK, r3
}
 80098ba:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	2210      	movs	r2, #16
 80098c4:	4013      	ands	r3, r2
 80098c6:	2b10      	cmp	r3, #16
 80098c8:	d103      	bne.n	80098d2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2210      	movs	r2, #16
 80098d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2258      	movs	r2, #88	@ 0x58
 80098d6:	5a9a      	ldrh	r2, [r3, r2]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	0011      	movs	r1, r2
 80098dc:	0018      	movs	r0, r3
 80098de:	f7ff f92b 	bl	8008b38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098e2:	e00c      	b.n	80098fe <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	0018      	movs	r0, r3
 80098e8:	f7f9 fc22 	bl	8003130 <HAL_UART_RxCpltCallback>
}
 80098ec:	e007      	b.n	80098fe <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	699a      	ldr	r2, [r3, #24]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2108      	movs	r1, #8
 80098fa:	430a      	orrs	r2, r1
 80098fc:	619a      	str	r2, [r3, #24]
}
 80098fe:	46c0      	nop			@ (mov r8, r8)
 8009900:	46bd      	mov	sp, r7
 8009902:	b014      	add	sp, #80	@ 0x50
 8009904:	bd80      	pop	{r7, pc}
 8009906:	46c0      	nop			@ (mov r8, r8)
 8009908:	fffffedf 	.word	0xfffffedf
 800990c:	fbffffff 	.word	0xfbffffff

08009910 <atof>:
 8009910:	b510      	push	{r4, lr}
 8009912:	2100      	movs	r1, #0
 8009914:	f000 fe14 	bl	800a540 <strtod>
 8009918:	bd10      	pop	{r4, pc}
	...

0800991c <sulp>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	0016      	movs	r6, r2
 8009920:	000d      	movs	r5, r1
 8009922:	f003 fe59 	bl	800d5d8 <__ulp>
 8009926:	2e00      	cmp	r6, #0
 8009928:	d00d      	beq.n	8009946 <sulp+0x2a>
 800992a:	236b      	movs	r3, #107	@ 0x6b
 800992c:	006a      	lsls	r2, r5, #1
 800992e:	0d52      	lsrs	r2, r2, #21
 8009930:	1a9b      	subs	r3, r3, r2
 8009932:	2b00      	cmp	r3, #0
 8009934:	dd07      	ble.n	8009946 <sulp+0x2a>
 8009936:	2400      	movs	r4, #0
 8009938:	4a03      	ldr	r2, [pc, #12]	@ (8009948 <sulp+0x2c>)
 800993a:	051b      	lsls	r3, r3, #20
 800993c:	189d      	adds	r5, r3, r2
 800993e:	002b      	movs	r3, r5
 8009940:	0022      	movs	r2, r4
 8009942:	f7f8 f905 	bl	8001b50 <__aeabi_dmul>
 8009946:	bd70      	pop	{r4, r5, r6, pc}
 8009948:	3ff00000 	.word	0x3ff00000

0800994c <_strtod_l>:
 800994c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800994e:	b0a3      	sub	sp, #140	@ 0x8c
 8009950:	921b      	str	r2, [sp, #108]	@ 0x6c
 8009952:	2200      	movs	r2, #0
 8009954:	2600      	movs	r6, #0
 8009956:	2700      	movs	r7, #0
 8009958:	9005      	str	r0, [sp, #20]
 800995a:	9109      	str	r1, [sp, #36]	@ 0x24
 800995c:	921e      	str	r2, [sp, #120]	@ 0x78
 800995e:	911d      	str	r1, [sp, #116]	@ 0x74
 8009960:	780a      	ldrb	r2, [r1, #0]
 8009962:	2a2b      	cmp	r2, #43	@ 0x2b
 8009964:	d053      	beq.n	8009a0e <_strtod_l+0xc2>
 8009966:	d83f      	bhi.n	80099e8 <_strtod_l+0x9c>
 8009968:	2a0d      	cmp	r2, #13
 800996a:	d839      	bhi.n	80099e0 <_strtod_l+0x94>
 800996c:	2a08      	cmp	r2, #8
 800996e:	d839      	bhi.n	80099e4 <_strtod_l+0x98>
 8009970:	2a00      	cmp	r2, #0
 8009972:	d042      	beq.n	80099fa <_strtod_l+0xae>
 8009974:	2200      	movs	r2, #0
 8009976:	9212      	str	r2, [sp, #72]	@ 0x48
 8009978:	2100      	movs	r1, #0
 800997a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800997c:	910c      	str	r1, [sp, #48]	@ 0x30
 800997e:	782a      	ldrb	r2, [r5, #0]
 8009980:	2a30      	cmp	r2, #48	@ 0x30
 8009982:	d000      	beq.n	8009986 <_strtod_l+0x3a>
 8009984:	e083      	b.n	8009a8e <_strtod_l+0x142>
 8009986:	786a      	ldrb	r2, [r5, #1]
 8009988:	3120      	adds	r1, #32
 800998a:	438a      	bics	r2, r1
 800998c:	2a58      	cmp	r2, #88	@ 0x58
 800998e:	d000      	beq.n	8009992 <_strtod_l+0x46>
 8009990:	e073      	b.n	8009a7a <_strtod_l+0x12e>
 8009992:	9302      	str	r3, [sp, #8]
 8009994:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009996:	4a95      	ldr	r2, [pc, #596]	@ (8009bec <_strtod_l+0x2a0>)
 8009998:	9301      	str	r3, [sp, #4]
 800999a:	ab1e      	add	r3, sp, #120	@ 0x78
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	9805      	ldr	r0, [sp, #20]
 80099a0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80099a2:	a91d      	add	r1, sp, #116	@ 0x74
 80099a4:	f002 fec8 	bl	800c738 <__gethex>
 80099a8:	230f      	movs	r3, #15
 80099aa:	0002      	movs	r2, r0
 80099ac:	401a      	ands	r2, r3
 80099ae:	0004      	movs	r4, r0
 80099b0:	9206      	str	r2, [sp, #24]
 80099b2:	4218      	tst	r0, r3
 80099b4:	d005      	beq.n	80099c2 <_strtod_l+0x76>
 80099b6:	2a06      	cmp	r2, #6
 80099b8:	d12b      	bne.n	8009a12 <_strtod_l+0xc6>
 80099ba:	2300      	movs	r3, #0
 80099bc:	3501      	adds	r5, #1
 80099be:	951d      	str	r5, [sp, #116]	@ 0x74
 80099c0:	9312      	str	r3, [sp, #72]	@ 0x48
 80099c2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <_strtod_l+0x82>
 80099c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80099ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d019      	beq.n	8009a08 <_strtod_l+0xbc>
 80099d4:	2380      	movs	r3, #128	@ 0x80
 80099d6:	0030      	movs	r0, r6
 80099d8:	061b      	lsls	r3, r3, #24
 80099da:	18f9      	adds	r1, r7, r3
 80099dc:	b023      	add	sp, #140	@ 0x8c
 80099de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e0:	2a20      	cmp	r2, #32
 80099e2:	d1c7      	bne.n	8009974 <_strtod_l+0x28>
 80099e4:	3101      	adds	r1, #1
 80099e6:	e7ba      	b.n	800995e <_strtod_l+0x12>
 80099e8:	2a2d      	cmp	r2, #45	@ 0x2d
 80099ea:	d1c3      	bne.n	8009974 <_strtod_l+0x28>
 80099ec:	3a2c      	subs	r2, #44	@ 0x2c
 80099ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80099f0:	1c4a      	adds	r2, r1, #1
 80099f2:	921d      	str	r2, [sp, #116]	@ 0x74
 80099f4:	784a      	ldrb	r2, [r1, #1]
 80099f6:	2a00      	cmp	r2, #0
 80099f8:	d1be      	bne.n	8009978 <_strtod_l+0x2c>
 80099fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099fc:	931d      	str	r3, [sp, #116]	@ 0x74
 80099fe:	2300      	movs	r3, #0
 8009a00:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a02:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1df      	bne.n	80099c8 <_strtod_l+0x7c>
 8009a08:	0030      	movs	r0, r6
 8009a0a:	0039      	movs	r1, r7
 8009a0c:	e7e6      	b.n	80099dc <_strtod_l+0x90>
 8009a0e:	2200      	movs	r2, #0
 8009a10:	e7ed      	b.n	80099ee <_strtod_l+0xa2>
 8009a12:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009a14:	2a00      	cmp	r2, #0
 8009a16:	d007      	beq.n	8009a28 <_strtod_l+0xdc>
 8009a18:	2135      	movs	r1, #53	@ 0x35
 8009a1a:	a820      	add	r0, sp, #128	@ 0x80
 8009a1c:	f003 fed2 	bl	800d7c4 <__copybits>
 8009a20:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009a22:	9805      	ldr	r0, [sp, #20]
 8009a24:	f003 fa8c 	bl	800cf40 <_Bfree>
 8009a28:	9806      	ldr	r0, [sp, #24]
 8009a2a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009a2c:	3801      	subs	r0, #1
 8009a2e:	2804      	cmp	r0, #4
 8009a30:	d806      	bhi.n	8009a40 <_strtod_l+0xf4>
 8009a32:	f7f6 fb7b 	bl	800012c <__gnu_thumb1_case_uqi>
 8009a36:	0312      	.short	0x0312
 8009a38:	1e1c      	.short	0x1e1c
 8009a3a:	12          	.byte	0x12
 8009a3b:	00          	.byte	0x00
 8009a3c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009a3e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8009a40:	05e4      	lsls	r4, r4, #23
 8009a42:	d502      	bpl.n	8009a4a <_strtod_l+0xfe>
 8009a44:	2380      	movs	r3, #128	@ 0x80
 8009a46:	061b      	lsls	r3, r3, #24
 8009a48:	431f      	orrs	r7, r3
 8009a4a:	4b69      	ldr	r3, [pc, #420]	@ (8009bf0 <_strtod_l+0x2a4>)
 8009a4c:	423b      	tst	r3, r7
 8009a4e:	d1b8      	bne.n	80099c2 <_strtod_l+0x76>
 8009a50:	f001 fef2 	bl	800b838 <__errno>
 8009a54:	2322      	movs	r3, #34	@ 0x22
 8009a56:	6003      	str	r3, [r0, #0]
 8009a58:	e7b3      	b.n	80099c2 <_strtod_l+0x76>
 8009a5a:	4966      	ldr	r1, [pc, #408]	@ (8009bf4 <_strtod_l+0x2a8>)
 8009a5c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009a5e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009a60:	400a      	ands	r2, r1
 8009a62:	4965      	ldr	r1, [pc, #404]	@ (8009bf8 <_strtod_l+0x2ac>)
 8009a64:	185b      	adds	r3, r3, r1
 8009a66:	051b      	lsls	r3, r3, #20
 8009a68:	431a      	orrs	r2, r3
 8009a6a:	0017      	movs	r7, r2
 8009a6c:	e7e8      	b.n	8009a40 <_strtod_l+0xf4>
 8009a6e:	4f60      	ldr	r7, [pc, #384]	@ (8009bf0 <_strtod_l+0x2a4>)
 8009a70:	e7e6      	b.n	8009a40 <_strtod_l+0xf4>
 8009a72:	2601      	movs	r6, #1
 8009a74:	4f61      	ldr	r7, [pc, #388]	@ (8009bfc <_strtod_l+0x2b0>)
 8009a76:	4276      	negs	r6, r6
 8009a78:	e7e2      	b.n	8009a40 <_strtod_l+0xf4>
 8009a7a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009a7c:	1c5a      	adds	r2, r3, #1
 8009a7e:	921d      	str	r2, [sp, #116]	@ 0x74
 8009a80:	785b      	ldrb	r3, [r3, #1]
 8009a82:	2b30      	cmp	r3, #48	@ 0x30
 8009a84:	d0f9      	beq.n	8009a7a <_strtod_l+0x12e>
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d09b      	beq.n	80099c2 <_strtod_l+0x76>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a8e:	2500      	movs	r5, #0
 8009a90:	220a      	movs	r2, #10
 8009a92:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009a94:	950d      	str	r5, [sp, #52]	@ 0x34
 8009a96:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a98:	9508      	str	r5, [sp, #32]
 8009a9a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8009a9c:	7804      	ldrb	r4, [r0, #0]
 8009a9e:	0023      	movs	r3, r4
 8009aa0:	3b30      	subs	r3, #48	@ 0x30
 8009aa2:	b2d9      	uxtb	r1, r3
 8009aa4:	2909      	cmp	r1, #9
 8009aa6:	d927      	bls.n	8009af8 <_strtod_l+0x1ac>
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	4955      	ldr	r1, [pc, #340]	@ (8009c00 <_strtod_l+0x2b4>)
 8009aac:	f001 fe60 	bl	800b770 <strncmp>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d031      	beq.n	8009b18 <_strtod_l+0x1cc>
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	0023      	movs	r3, r4
 8009ab8:	4684      	mov	ip, r0
 8009aba:	9a08      	ldr	r2, [sp, #32]
 8009abc:	900e      	str	r0, [sp, #56]	@ 0x38
 8009abe:	9206      	str	r2, [sp, #24]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	0019      	movs	r1, r3
 8009ac4:	4391      	bics	r1, r2
 8009ac6:	000a      	movs	r2, r1
 8009ac8:	2100      	movs	r1, #0
 8009aca:	9107      	str	r1, [sp, #28]
 8009acc:	2a45      	cmp	r2, #69	@ 0x45
 8009ace:	d000      	beq.n	8009ad2 <_strtod_l+0x186>
 8009ad0:	e0c0      	b.n	8009c54 <_strtod_l+0x308>
 8009ad2:	9b06      	ldr	r3, [sp, #24]
 8009ad4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009ad6:	4303      	orrs	r3, r0
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	428b      	cmp	r3, r1
 8009adc:	d08d      	beq.n	80099fa <_strtod_l+0xae>
 8009ade:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	931d      	str	r3, [sp, #116]	@ 0x74
 8009ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae8:	785b      	ldrb	r3, [r3, #1]
 8009aea:	2b2b      	cmp	r3, #43	@ 0x2b
 8009aec:	d070      	beq.n	8009bd0 <_strtod_l+0x284>
 8009aee:	000c      	movs	r4, r1
 8009af0:	2b2d      	cmp	r3, #45	@ 0x2d
 8009af2:	d173      	bne.n	8009bdc <_strtod_l+0x290>
 8009af4:	2401      	movs	r4, #1
 8009af6:	e06c      	b.n	8009bd2 <_strtod_l+0x286>
 8009af8:	9908      	ldr	r1, [sp, #32]
 8009afa:	2908      	cmp	r1, #8
 8009afc:	dc09      	bgt.n	8009b12 <_strtod_l+0x1c6>
 8009afe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009b00:	4351      	muls	r1, r2
 8009b02:	185b      	adds	r3, r3, r1
 8009b04:	930d      	str	r3, [sp, #52]	@ 0x34
 8009b06:	9b08      	ldr	r3, [sp, #32]
 8009b08:	3001      	adds	r0, #1
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	9308      	str	r3, [sp, #32]
 8009b0e:	901d      	str	r0, [sp, #116]	@ 0x74
 8009b10:	e7c3      	b.n	8009a9a <_strtod_l+0x14e>
 8009b12:	4355      	muls	r5, r2
 8009b14:	195d      	adds	r5, r3, r5
 8009b16:	e7f6      	b.n	8009b06 <_strtod_l+0x1ba>
 8009b18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009b1a:	1c5a      	adds	r2, r3, #1
 8009b1c:	921d      	str	r2, [sp, #116]	@ 0x74
 8009b1e:	9a08      	ldr	r2, [sp, #32]
 8009b20:	785b      	ldrb	r3, [r3, #1]
 8009b22:	2a00      	cmp	r2, #0
 8009b24:	d03a      	beq.n	8009b9c <_strtod_l+0x250>
 8009b26:	900e      	str	r0, [sp, #56]	@ 0x38
 8009b28:	9206      	str	r2, [sp, #24]
 8009b2a:	001a      	movs	r2, r3
 8009b2c:	3a30      	subs	r2, #48	@ 0x30
 8009b2e:	2a09      	cmp	r2, #9
 8009b30:	d912      	bls.n	8009b58 <_strtod_l+0x20c>
 8009b32:	2201      	movs	r2, #1
 8009b34:	4694      	mov	ip, r2
 8009b36:	e7c3      	b.n	8009ac0 <_strtod_l+0x174>
 8009b38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	1c5a      	adds	r2, r3, #1
 8009b3e:	921d      	str	r2, [sp, #116]	@ 0x74
 8009b40:	785b      	ldrb	r3, [r3, #1]
 8009b42:	2b30      	cmp	r3, #48	@ 0x30
 8009b44:	d0f8      	beq.n	8009b38 <_strtod_l+0x1ec>
 8009b46:	001a      	movs	r2, r3
 8009b48:	3a31      	subs	r2, #49	@ 0x31
 8009b4a:	2a08      	cmp	r2, #8
 8009b4c:	d83b      	bhi.n	8009bc6 <_strtod_l+0x27a>
 8009b4e:	900e      	str	r0, [sp, #56]	@ 0x38
 8009b50:	2000      	movs	r0, #0
 8009b52:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009b54:	9006      	str	r0, [sp, #24]
 8009b56:	9213      	str	r2, [sp, #76]	@ 0x4c
 8009b58:	001a      	movs	r2, r3
 8009b5a:	1c41      	adds	r1, r0, #1
 8009b5c:	3a30      	subs	r2, #48	@ 0x30
 8009b5e:	2b30      	cmp	r3, #48	@ 0x30
 8009b60:	d016      	beq.n	8009b90 <_strtod_l+0x244>
 8009b62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b64:	185b      	adds	r3, r3, r1
 8009b66:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b68:	9b06      	ldr	r3, [sp, #24]
 8009b6a:	210a      	movs	r1, #10
 8009b6c:	469c      	mov	ip, r3
 8009b6e:	4484      	add	ip, r0
 8009b70:	459c      	cmp	ip, r3
 8009b72:	d115      	bne.n	8009ba0 <_strtod_l+0x254>
 8009b74:	9906      	ldr	r1, [sp, #24]
 8009b76:	9b06      	ldr	r3, [sp, #24]
 8009b78:	3101      	adds	r1, #1
 8009b7a:	1809      	adds	r1, r1, r0
 8009b7c:	181b      	adds	r3, r3, r0
 8009b7e:	9106      	str	r1, [sp, #24]
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	dc19      	bgt.n	8009bb8 <_strtod_l+0x26c>
 8009b84:	230a      	movs	r3, #10
 8009b86:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009b88:	434b      	muls	r3, r1
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	18d3      	adds	r3, r2, r3
 8009b8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009b90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009b92:	0008      	movs	r0, r1
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	921d      	str	r2, [sp, #116]	@ 0x74
 8009b98:	785b      	ldrb	r3, [r3, #1]
 8009b9a:	e7c6      	b.n	8009b2a <_strtod_l+0x1de>
 8009b9c:	9808      	ldr	r0, [sp, #32]
 8009b9e:	e7d0      	b.n	8009b42 <_strtod_l+0x1f6>
 8009ba0:	1c5c      	adds	r4, r3, #1
 8009ba2:	2b08      	cmp	r3, #8
 8009ba4:	dc04      	bgt.n	8009bb0 <_strtod_l+0x264>
 8009ba6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ba8:	434b      	muls	r3, r1
 8009baa:	930d      	str	r3, [sp, #52]	@ 0x34
 8009bac:	0023      	movs	r3, r4
 8009bae:	e7df      	b.n	8009b70 <_strtod_l+0x224>
 8009bb0:	2c10      	cmp	r4, #16
 8009bb2:	dcfb      	bgt.n	8009bac <_strtod_l+0x260>
 8009bb4:	434d      	muls	r5, r1
 8009bb6:	e7f9      	b.n	8009bac <_strtod_l+0x260>
 8009bb8:	2100      	movs	r1, #0
 8009bba:	2b0f      	cmp	r3, #15
 8009bbc:	dce8      	bgt.n	8009b90 <_strtod_l+0x244>
 8009bbe:	230a      	movs	r3, #10
 8009bc0:	435d      	muls	r5, r3
 8009bc2:	1955      	adds	r5, r2, r5
 8009bc4:	e7e4      	b.n	8009b90 <_strtod_l+0x244>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bca:	9206      	str	r2, [sp, #24]
 8009bcc:	3201      	adds	r2, #1
 8009bce:	e7b1      	b.n	8009b34 <_strtod_l+0x1e8>
 8009bd0:	2400      	movs	r4, #0
 8009bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd4:	3302      	adds	r3, #2
 8009bd6:	931d      	str	r3, [sp, #116]	@ 0x74
 8009bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bda:	789b      	ldrb	r3, [r3, #2]
 8009bdc:	001a      	movs	r2, r3
 8009bde:	3a30      	subs	r2, #48	@ 0x30
 8009be0:	2a09      	cmp	r2, #9
 8009be2:	d913      	bls.n	8009c0c <_strtod_l+0x2c0>
 8009be4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009be6:	921d      	str	r2, [sp, #116]	@ 0x74
 8009be8:	2200      	movs	r2, #0
 8009bea:	e032      	b.n	8009c52 <_strtod_l+0x306>
 8009bec:	0800ed20 	.word	0x0800ed20
 8009bf0:	7ff00000 	.word	0x7ff00000
 8009bf4:	ffefffff 	.word	0xffefffff
 8009bf8:	00000433 	.word	0x00000433
 8009bfc:	7fffffff 	.word	0x7fffffff
 8009c00:	0800ed08 	.word	0x0800ed08
 8009c04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	921d      	str	r2, [sp, #116]	@ 0x74
 8009c0a:	785b      	ldrb	r3, [r3, #1]
 8009c0c:	2b30      	cmp	r3, #48	@ 0x30
 8009c0e:	d0f9      	beq.n	8009c04 <_strtod_l+0x2b8>
 8009c10:	2200      	movs	r2, #0
 8009c12:	9207      	str	r2, [sp, #28]
 8009c14:	001a      	movs	r2, r3
 8009c16:	3a31      	subs	r2, #49	@ 0x31
 8009c18:	2a08      	cmp	r2, #8
 8009c1a:	d81b      	bhi.n	8009c54 <_strtod_l+0x308>
 8009c1c:	3b30      	subs	r3, #48	@ 0x30
 8009c1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c22:	9307      	str	r3, [sp, #28]
 8009c24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c26:	1c59      	adds	r1, r3, #1
 8009c28:	911d      	str	r1, [sp, #116]	@ 0x74
 8009c2a:	785b      	ldrb	r3, [r3, #1]
 8009c2c:	001a      	movs	r2, r3
 8009c2e:	3a30      	subs	r2, #48	@ 0x30
 8009c30:	2a09      	cmp	r2, #9
 8009c32:	d93a      	bls.n	8009caa <_strtod_l+0x35e>
 8009c34:	9a07      	ldr	r2, [sp, #28]
 8009c36:	1a8a      	subs	r2, r1, r2
 8009c38:	49b4      	ldr	r1, [pc, #720]	@ (8009f0c <_strtod_l+0x5c0>)
 8009c3a:	9107      	str	r1, [sp, #28]
 8009c3c:	2a08      	cmp	r2, #8
 8009c3e:	dc04      	bgt.n	8009c4a <_strtod_l+0x2fe>
 8009c40:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009c42:	9207      	str	r2, [sp, #28]
 8009c44:	428a      	cmp	r2, r1
 8009c46:	dd00      	ble.n	8009c4a <_strtod_l+0x2fe>
 8009c48:	9107      	str	r1, [sp, #28]
 8009c4a:	2c00      	cmp	r4, #0
 8009c4c:	d002      	beq.n	8009c54 <_strtod_l+0x308>
 8009c4e:	9a07      	ldr	r2, [sp, #28]
 8009c50:	4252      	negs	r2, r2
 8009c52:	9207      	str	r2, [sp, #28]
 8009c54:	9a06      	ldr	r2, [sp, #24]
 8009c56:	2a00      	cmp	r2, #0
 8009c58:	d14d      	bne.n	8009cf6 <_strtod_l+0x3aa>
 8009c5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009c5c:	4310      	orrs	r0, r2
 8009c5e:	d000      	beq.n	8009c62 <_strtod_l+0x316>
 8009c60:	e6af      	b.n	80099c2 <_strtod_l+0x76>
 8009c62:	4662      	mov	r2, ip
 8009c64:	2a00      	cmp	r2, #0
 8009c66:	d000      	beq.n	8009c6a <_strtod_l+0x31e>
 8009c68:	e6c7      	b.n	80099fa <_strtod_l+0xae>
 8009c6a:	2b69      	cmp	r3, #105	@ 0x69
 8009c6c:	d027      	beq.n	8009cbe <_strtod_l+0x372>
 8009c6e:	dc23      	bgt.n	8009cb8 <_strtod_l+0x36c>
 8009c70:	2b49      	cmp	r3, #73	@ 0x49
 8009c72:	d024      	beq.n	8009cbe <_strtod_l+0x372>
 8009c74:	2b4e      	cmp	r3, #78	@ 0x4e
 8009c76:	d000      	beq.n	8009c7a <_strtod_l+0x32e>
 8009c78:	e6bf      	b.n	80099fa <_strtod_l+0xae>
 8009c7a:	49a5      	ldr	r1, [pc, #660]	@ (8009f10 <_strtod_l+0x5c4>)
 8009c7c:	a81d      	add	r0, sp, #116	@ 0x74
 8009c7e:	f002 ff91 	bl	800cba4 <__match>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d100      	bne.n	8009c88 <_strtod_l+0x33c>
 8009c86:	e6b8      	b.n	80099fa <_strtod_l+0xae>
 8009c88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2b28      	cmp	r3, #40	@ 0x28
 8009c8e:	d12c      	bne.n	8009cea <_strtod_l+0x39e>
 8009c90:	49a0      	ldr	r1, [pc, #640]	@ (8009f14 <_strtod_l+0x5c8>)
 8009c92:	aa20      	add	r2, sp, #128	@ 0x80
 8009c94:	a81d      	add	r0, sp, #116	@ 0x74
 8009c96:	f002 ff99 	bl	800cbcc <__hexnan>
 8009c9a:	2805      	cmp	r0, #5
 8009c9c:	d125      	bne.n	8009cea <_strtod_l+0x39e>
 8009c9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ca0:	4a9d      	ldr	r2, [pc, #628]	@ (8009f18 <_strtod_l+0x5cc>)
 8009ca2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	0017      	movs	r7, r2
 8009ca8:	e68b      	b.n	80099c2 <_strtod_l+0x76>
 8009caa:	220a      	movs	r2, #10
 8009cac:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009cae:	434a      	muls	r2, r1
 8009cb0:	18d2      	adds	r2, r2, r3
 8009cb2:	3a30      	subs	r2, #48	@ 0x30
 8009cb4:	9210      	str	r2, [sp, #64]	@ 0x40
 8009cb6:	e7b5      	b.n	8009c24 <_strtod_l+0x2d8>
 8009cb8:	2b6e      	cmp	r3, #110	@ 0x6e
 8009cba:	d0de      	beq.n	8009c7a <_strtod_l+0x32e>
 8009cbc:	e69d      	b.n	80099fa <_strtod_l+0xae>
 8009cbe:	4997      	ldr	r1, [pc, #604]	@ (8009f1c <_strtod_l+0x5d0>)
 8009cc0:	a81d      	add	r0, sp, #116	@ 0x74
 8009cc2:	f002 ff6f 	bl	800cba4 <__match>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d100      	bne.n	8009ccc <_strtod_l+0x380>
 8009cca:	e696      	b.n	80099fa <_strtod_l+0xae>
 8009ccc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009cce:	4994      	ldr	r1, [pc, #592]	@ (8009f20 <_strtod_l+0x5d4>)
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	a81d      	add	r0, sp, #116	@ 0x74
 8009cd4:	931d      	str	r3, [sp, #116]	@ 0x74
 8009cd6:	f002 ff65 	bl	800cba4 <__match>
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d102      	bne.n	8009ce4 <_strtod_l+0x398>
 8009cde:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	931d      	str	r3, [sp, #116]	@ 0x74
 8009ce4:	2600      	movs	r6, #0
 8009ce6:	4f8c      	ldr	r7, [pc, #560]	@ (8009f18 <_strtod_l+0x5cc>)
 8009ce8:	e66b      	b.n	80099c2 <_strtod_l+0x76>
 8009cea:	488e      	ldr	r0, [pc, #568]	@ (8009f24 <_strtod_l+0x5d8>)
 8009cec:	f001 fde6 	bl	800b8bc <nan>
 8009cf0:	0006      	movs	r6, r0
 8009cf2:	000f      	movs	r7, r1
 8009cf4:	e665      	b.n	80099c2 <_strtod_l+0x76>
 8009cf6:	9b07      	ldr	r3, [sp, #28]
 8009cf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cfa:	1a9b      	subs	r3, r3, r2
 8009cfc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009cfe:	9b08      	ldr	r3, [sp, #32]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <_strtod_l+0x3bc>
 8009d04:	9b06      	ldr	r3, [sp, #24]
 8009d06:	9308      	str	r3, [sp, #32]
 8009d08:	9c06      	ldr	r4, [sp, #24]
 8009d0a:	2c10      	cmp	r4, #16
 8009d0c:	dd00      	ble.n	8009d10 <_strtod_l+0x3c4>
 8009d0e:	2410      	movs	r4, #16
 8009d10:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009d12:	f7f8 fe0d 	bl	8002930 <__aeabi_ui2d>
 8009d16:	9b06      	ldr	r3, [sp, #24]
 8009d18:	0006      	movs	r6, r0
 8009d1a:	000f      	movs	r7, r1
 8009d1c:	2b09      	cmp	r3, #9
 8009d1e:	dc13      	bgt.n	8009d48 <_strtod_l+0x3fc>
 8009d20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d100      	bne.n	8009d28 <_strtod_l+0x3dc>
 8009d26:	e64c      	b.n	80099c2 <_strtod_l+0x76>
 8009d28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	dc00      	bgt.n	8009d30 <_strtod_l+0x3e4>
 8009d2e:	e07e      	b.n	8009e2e <_strtod_l+0x4e2>
 8009d30:	2b16      	cmp	r3, #22
 8009d32:	dc63      	bgt.n	8009dfc <_strtod_l+0x4b0>
 8009d34:	497c      	ldr	r1, [pc, #496]	@ (8009f28 <_strtod_l+0x5dc>)
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	18c9      	adds	r1, r1, r3
 8009d3a:	0032      	movs	r2, r6
 8009d3c:	6808      	ldr	r0, [r1, #0]
 8009d3e:	6849      	ldr	r1, [r1, #4]
 8009d40:	003b      	movs	r3, r7
 8009d42:	f7f7 ff05 	bl	8001b50 <__aeabi_dmul>
 8009d46:	e7d3      	b.n	8009cf0 <_strtod_l+0x3a4>
 8009d48:	0022      	movs	r2, r4
 8009d4a:	4b77      	ldr	r3, [pc, #476]	@ (8009f28 <_strtod_l+0x5dc>)
 8009d4c:	3a09      	subs	r2, #9
 8009d4e:	00d2      	lsls	r2, r2, #3
 8009d50:	189b      	adds	r3, r3, r2
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	f7f7 fefb 	bl	8001b50 <__aeabi_dmul>
 8009d5a:	0006      	movs	r6, r0
 8009d5c:	0028      	movs	r0, r5
 8009d5e:	000f      	movs	r7, r1
 8009d60:	f7f8 fde6 	bl	8002930 <__aeabi_ui2d>
 8009d64:	000b      	movs	r3, r1
 8009d66:	0002      	movs	r2, r0
 8009d68:	0039      	movs	r1, r7
 8009d6a:	0030      	movs	r0, r6
 8009d6c:	f7f6 ff48 	bl	8000c00 <__aeabi_dadd>
 8009d70:	9b06      	ldr	r3, [sp, #24]
 8009d72:	0006      	movs	r6, r0
 8009d74:	000f      	movs	r7, r1
 8009d76:	2b0f      	cmp	r3, #15
 8009d78:	ddd2      	ble.n	8009d20 <_strtod_l+0x3d4>
 8009d7a:	9b06      	ldr	r3, [sp, #24]
 8009d7c:	1b1c      	subs	r4, r3, r4
 8009d7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d80:	18e4      	adds	r4, r4, r3
 8009d82:	2c00      	cmp	r4, #0
 8009d84:	dc00      	bgt.n	8009d88 <_strtod_l+0x43c>
 8009d86:	e09b      	b.n	8009ec0 <_strtod_l+0x574>
 8009d88:	220f      	movs	r2, #15
 8009d8a:	0023      	movs	r3, r4
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	4214      	tst	r4, r2
 8009d90:	d00a      	beq.n	8009da8 <_strtod_l+0x45c>
 8009d92:	4965      	ldr	r1, [pc, #404]	@ (8009f28 <_strtod_l+0x5dc>)
 8009d94:	00db      	lsls	r3, r3, #3
 8009d96:	18c9      	adds	r1, r1, r3
 8009d98:	0032      	movs	r2, r6
 8009d9a:	6808      	ldr	r0, [r1, #0]
 8009d9c:	6849      	ldr	r1, [r1, #4]
 8009d9e:	003b      	movs	r3, r7
 8009da0:	f7f7 fed6 	bl	8001b50 <__aeabi_dmul>
 8009da4:	0006      	movs	r6, r0
 8009da6:	000f      	movs	r7, r1
 8009da8:	230f      	movs	r3, #15
 8009daa:	439c      	bics	r4, r3
 8009dac:	d073      	beq.n	8009e96 <_strtod_l+0x54a>
 8009dae:	3326      	adds	r3, #38	@ 0x26
 8009db0:	33ff      	adds	r3, #255	@ 0xff
 8009db2:	429c      	cmp	r4, r3
 8009db4:	dd4b      	ble.n	8009e4e <_strtod_l+0x502>
 8009db6:	2300      	movs	r3, #0
 8009db8:	9306      	str	r3, [sp, #24]
 8009dba:	9307      	str	r3, [sp, #28]
 8009dbc:	930d      	str	r3, [sp, #52]	@ 0x34
 8009dbe:	9308      	str	r3, [sp, #32]
 8009dc0:	2322      	movs	r3, #34	@ 0x22
 8009dc2:	2600      	movs	r6, #0
 8009dc4:	9a05      	ldr	r2, [sp, #20]
 8009dc6:	4f54      	ldr	r7, [pc, #336]	@ (8009f18 <_strtod_l+0x5cc>)
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009dcc:	42b3      	cmp	r3, r6
 8009dce:	d100      	bne.n	8009dd2 <_strtod_l+0x486>
 8009dd0:	e5f7      	b.n	80099c2 <_strtod_l+0x76>
 8009dd2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009dd4:	9805      	ldr	r0, [sp, #20]
 8009dd6:	f003 f8b3 	bl	800cf40 <_Bfree>
 8009dda:	9908      	ldr	r1, [sp, #32]
 8009ddc:	9805      	ldr	r0, [sp, #20]
 8009dde:	f003 f8af 	bl	800cf40 <_Bfree>
 8009de2:	9907      	ldr	r1, [sp, #28]
 8009de4:	9805      	ldr	r0, [sp, #20]
 8009de6:	f003 f8ab 	bl	800cf40 <_Bfree>
 8009dea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009dec:	9805      	ldr	r0, [sp, #20]
 8009dee:	f003 f8a7 	bl	800cf40 <_Bfree>
 8009df2:	9906      	ldr	r1, [sp, #24]
 8009df4:	9805      	ldr	r0, [sp, #20]
 8009df6:	f003 f8a3 	bl	800cf40 <_Bfree>
 8009dfa:	e5e2      	b.n	80099c2 <_strtod_l+0x76>
 8009dfc:	2325      	movs	r3, #37	@ 0x25
 8009dfe:	9a06      	ldr	r2, [sp, #24]
 8009e00:	1a9b      	subs	r3, r3, r2
 8009e02:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e04:	4293      	cmp	r3, r2
 8009e06:	dbb8      	blt.n	8009d7a <_strtod_l+0x42e>
 8009e08:	240f      	movs	r4, #15
 8009e0a:	9b06      	ldr	r3, [sp, #24]
 8009e0c:	4d46      	ldr	r5, [pc, #280]	@ (8009f28 <_strtod_l+0x5dc>)
 8009e0e:	1ae4      	subs	r4, r4, r3
 8009e10:	00e1      	lsls	r1, r4, #3
 8009e12:	1869      	adds	r1, r5, r1
 8009e14:	0032      	movs	r2, r6
 8009e16:	6808      	ldr	r0, [r1, #0]
 8009e18:	6849      	ldr	r1, [r1, #4]
 8009e1a:	003b      	movs	r3, r7
 8009e1c:	f7f7 fe98 	bl	8001b50 <__aeabi_dmul>
 8009e20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e22:	1b1c      	subs	r4, r3, r4
 8009e24:	00e4      	lsls	r4, r4, #3
 8009e26:	192d      	adds	r5, r5, r4
 8009e28:	682a      	ldr	r2, [r5, #0]
 8009e2a:	686b      	ldr	r3, [r5, #4]
 8009e2c:	e789      	b.n	8009d42 <_strtod_l+0x3f6>
 8009e2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e30:	3316      	adds	r3, #22
 8009e32:	dba2      	blt.n	8009d7a <_strtod_l+0x42e>
 8009e34:	9907      	ldr	r1, [sp, #28]
 8009e36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e38:	4b3b      	ldr	r3, [pc, #236]	@ (8009f28 <_strtod_l+0x5dc>)
 8009e3a:	1a52      	subs	r2, r2, r1
 8009e3c:	00d2      	lsls	r2, r2, #3
 8009e3e:	189b      	adds	r3, r3, r2
 8009e40:	0030      	movs	r0, r6
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	0039      	movs	r1, r7
 8009e48:	f7f7 fa3e 	bl	80012c8 <__aeabi_ddiv>
 8009e4c:	e750      	b.n	8009cf0 <_strtod_l+0x3a4>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	0030      	movs	r0, r6
 8009e52:	0039      	movs	r1, r7
 8009e54:	4d35      	ldr	r5, [pc, #212]	@ (8009f2c <_strtod_l+0x5e0>)
 8009e56:	1124      	asrs	r4, r4, #4
 8009e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e5a:	2c01      	cmp	r4, #1
 8009e5c:	dc1e      	bgt.n	8009e9c <_strtod_l+0x550>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <_strtod_l+0x51a>
 8009e62:	0006      	movs	r6, r0
 8009e64:	000f      	movs	r7, r1
 8009e66:	4b32      	ldr	r3, [pc, #200]	@ (8009f30 <_strtod_l+0x5e4>)
 8009e68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e6a:	18ff      	adds	r7, r7, r3
 8009e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8009f2c <_strtod_l+0x5e0>)
 8009e6e:	00d5      	lsls	r5, r2, #3
 8009e70:	195d      	adds	r5, r3, r5
 8009e72:	0032      	movs	r2, r6
 8009e74:	6828      	ldr	r0, [r5, #0]
 8009e76:	6869      	ldr	r1, [r5, #4]
 8009e78:	003b      	movs	r3, r7
 8009e7a:	f7f7 fe69 	bl	8001b50 <__aeabi_dmul>
 8009e7e:	4b26      	ldr	r3, [pc, #152]	@ (8009f18 <_strtod_l+0x5cc>)
 8009e80:	4a2c      	ldr	r2, [pc, #176]	@ (8009f34 <_strtod_l+0x5e8>)
 8009e82:	0006      	movs	r6, r0
 8009e84:	400b      	ands	r3, r1
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d895      	bhi.n	8009db6 <_strtod_l+0x46a>
 8009e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8009f38 <_strtod_l+0x5ec>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d913      	bls.n	8009eb8 <_strtod_l+0x56c>
 8009e90:	2601      	movs	r6, #1
 8009e92:	4f2a      	ldr	r7, [pc, #168]	@ (8009f3c <_strtod_l+0x5f0>)
 8009e94:	4276      	negs	r6, r6
 8009e96:	2300      	movs	r3, #0
 8009e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e9a:	e086      	b.n	8009faa <_strtod_l+0x65e>
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	4214      	tst	r4, r2
 8009ea0:	d004      	beq.n	8009eac <_strtod_l+0x560>
 8009ea2:	682a      	ldr	r2, [r5, #0]
 8009ea4:	686b      	ldr	r3, [r5, #4]
 8009ea6:	f7f7 fe53 	bl	8001b50 <__aeabi_dmul>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009eae:	1064      	asrs	r4, r4, #1
 8009eb0:	3201      	adds	r2, #1
 8009eb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009eb4:	3508      	adds	r5, #8
 8009eb6:	e7d0      	b.n	8009e5a <_strtod_l+0x50e>
 8009eb8:	23d4      	movs	r3, #212	@ 0xd4
 8009eba:	049b      	lsls	r3, r3, #18
 8009ebc:	18cf      	adds	r7, r1, r3
 8009ebe:	e7ea      	b.n	8009e96 <_strtod_l+0x54a>
 8009ec0:	2c00      	cmp	r4, #0
 8009ec2:	d0e8      	beq.n	8009e96 <_strtod_l+0x54a>
 8009ec4:	4264      	negs	r4, r4
 8009ec6:	230f      	movs	r3, #15
 8009ec8:	0022      	movs	r2, r4
 8009eca:	401a      	ands	r2, r3
 8009ecc:	421c      	tst	r4, r3
 8009ece:	d00a      	beq.n	8009ee6 <_strtod_l+0x59a>
 8009ed0:	4b15      	ldr	r3, [pc, #84]	@ (8009f28 <_strtod_l+0x5dc>)
 8009ed2:	00d2      	lsls	r2, r2, #3
 8009ed4:	189b      	adds	r3, r3, r2
 8009ed6:	0030      	movs	r0, r6
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	0039      	movs	r1, r7
 8009ede:	f7f7 f9f3 	bl	80012c8 <__aeabi_ddiv>
 8009ee2:	0006      	movs	r6, r0
 8009ee4:	000f      	movs	r7, r1
 8009ee6:	1124      	asrs	r4, r4, #4
 8009ee8:	d0d5      	beq.n	8009e96 <_strtod_l+0x54a>
 8009eea:	2c1f      	cmp	r4, #31
 8009eec:	dd28      	ble.n	8009f40 <_strtod_l+0x5f4>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	9306      	str	r3, [sp, #24]
 8009ef2:	9307      	str	r3, [sp, #28]
 8009ef4:	930d      	str	r3, [sp, #52]	@ 0x34
 8009ef6:	9308      	str	r3, [sp, #32]
 8009ef8:	2322      	movs	r3, #34	@ 0x22
 8009efa:	9a05      	ldr	r2, [sp, #20]
 8009efc:	2600      	movs	r6, #0
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f02:	2700      	movs	r7, #0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d000      	beq.n	8009f0a <_strtod_l+0x5be>
 8009f08:	e763      	b.n	8009dd2 <_strtod_l+0x486>
 8009f0a:	e55a      	b.n	80099c2 <_strtod_l+0x76>
 8009f0c:	00004e1f 	.word	0x00004e1f
 8009f10:	0800ed6d 	.word	0x0800ed6d
 8009f14:	0800ed0c 	.word	0x0800ed0c
 8009f18:	7ff00000 	.word	0x7ff00000
 8009f1c:	0800ed65 	.word	0x0800ed65
 8009f20:	0800eda2 	.word	0x0800eda2
 8009f24:	0800f150 	.word	0x0800f150
 8009f28:	0800ef20 	.word	0x0800ef20
 8009f2c:	0800eef8 	.word	0x0800eef8
 8009f30:	fcb00000 	.word	0xfcb00000
 8009f34:	7ca00000 	.word	0x7ca00000
 8009f38:	7c900000 	.word	0x7c900000
 8009f3c:	7fefffff 	.word	0x7fefffff
 8009f40:	2310      	movs	r3, #16
 8009f42:	0022      	movs	r2, r4
 8009f44:	401a      	ands	r2, r3
 8009f46:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f48:	421c      	tst	r4, r3
 8009f4a:	d001      	beq.n	8009f50 <_strtod_l+0x604>
 8009f4c:	335a      	adds	r3, #90	@ 0x5a
 8009f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f50:	0030      	movs	r0, r6
 8009f52:	0039      	movs	r1, r7
 8009f54:	2300      	movs	r3, #0
 8009f56:	4dbf      	ldr	r5, [pc, #764]	@ (800a254 <_strtod_l+0x908>)
 8009f58:	2201      	movs	r2, #1
 8009f5a:	4214      	tst	r4, r2
 8009f5c:	d004      	beq.n	8009f68 <_strtod_l+0x61c>
 8009f5e:	682a      	ldr	r2, [r5, #0]
 8009f60:	686b      	ldr	r3, [r5, #4]
 8009f62:	f7f7 fdf5 	bl	8001b50 <__aeabi_dmul>
 8009f66:	2301      	movs	r3, #1
 8009f68:	1064      	asrs	r4, r4, #1
 8009f6a:	3508      	adds	r5, #8
 8009f6c:	2c00      	cmp	r4, #0
 8009f6e:	d1f3      	bne.n	8009f58 <_strtod_l+0x60c>
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <_strtod_l+0x62c>
 8009f74:	0006      	movs	r6, r0
 8009f76:	000f      	movs	r7, r1
 8009f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00d      	beq.n	8009f9a <_strtod_l+0x64e>
 8009f7e:	236b      	movs	r3, #107	@ 0x6b
 8009f80:	007a      	lsls	r2, r7, #1
 8009f82:	0d52      	lsrs	r2, r2, #21
 8009f84:	0039      	movs	r1, r7
 8009f86:	1a9b      	subs	r3, r3, r2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	dd06      	ble.n	8009f9a <_strtod_l+0x64e>
 8009f8c:	2b1f      	cmp	r3, #31
 8009f8e:	dd5a      	ble.n	800a046 <_strtod_l+0x6fa>
 8009f90:	2600      	movs	r6, #0
 8009f92:	2b34      	cmp	r3, #52	@ 0x34
 8009f94:	dd50      	ble.n	800a038 <_strtod_l+0x6ec>
 8009f96:	27dc      	movs	r7, #220	@ 0xdc
 8009f98:	04bf      	lsls	r7, r7, #18
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	0030      	movs	r0, r6
 8009fa0:	0039      	movs	r1, r7
 8009fa2:	f7f6 fa5d 	bl	8000460 <__aeabi_dcmpeq>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d1a1      	bne.n	8009eee <_strtod_l+0x5a2>
 8009faa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fac:	9a08      	ldr	r2, [sp, #32]
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009fb2:	9b06      	ldr	r3, [sp, #24]
 8009fb4:	9805      	ldr	r0, [sp, #20]
 8009fb6:	f003 f82b 	bl	800d010 <__s2b>
 8009fba:	900d      	str	r0, [sp, #52]	@ 0x34
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d100      	bne.n	8009fc2 <_strtod_l+0x676>
 8009fc0:	e6f9      	b.n	8009db6 <_strtod_l+0x46a>
 8009fc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fc4:	9907      	ldr	r1, [sp, #28]
 8009fc6:	17da      	asrs	r2, r3, #31
 8009fc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fca:	1a5b      	subs	r3, r3, r1
 8009fcc:	401a      	ands	r2, r3
 8009fce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fd0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009fd2:	43db      	mvns	r3, r3
 8009fd4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009fd6:	17db      	asrs	r3, r3, #31
 8009fd8:	401a      	ands	r2, r3
 8009fda:	2300      	movs	r3, #0
 8009fdc:	921a      	str	r2, [sp, #104]	@ 0x68
 8009fde:	9306      	str	r3, [sp, #24]
 8009fe0:	9307      	str	r3, [sp, #28]
 8009fe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fe4:	9805      	ldr	r0, [sp, #20]
 8009fe6:	6859      	ldr	r1, [r3, #4]
 8009fe8:	f002 ff66 	bl	800ceb8 <_Balloc>
 8009fec:	9008      	str	r0, [sp, #32]
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d100      	bne.n	8009ff4 <_strtod_l+0x6a8>
 8009ff2:	e6e5      	b.n	8009dc0 <_strtod_l+0x474>
 8009ff4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ff6:	300c      	adds	r0, #12
 8009ff8:	0019      	movs	r1, r3
 8009ffa:	691a      	ldr	r2, [r3, #16]
 8009ffc:	310c      	adds	r1, #12
 8009ffe:	3202      	adds	r2, #2
 800a000:	0092      	lsls	r2, r2, #2
 800a002:	f001 fc51 	bl	800b8a8 <memcpy>
 800a006:	ab20      	add	r3, sp, #128	@ 0x80
 800a008:	9301      	str	r3, [sp, #4]
 800a00a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	0032      	movs	r2, r6
 800a010:	003b      	movs	r3, r7
 800a012:	9805      	ldr	r0, [sp, #20]
 800a014:	9610      	str	r6, [sp, #64]	@ 0x40
 800a016:	9711      	str	r7, [sp, #68]	@ 0x44
 800a018:	f003 fb4a 	bl	800d6b0 <__d2b>
 800a01c:	901e      	str	r0, [sp, #120]	@ 0x78
 800a01e:	2800      	cmp	r0, #0
 800a020:	d100      	bne.n	800a024 <_strtod_l+0x6d8>
 800a022:	e6cd      	b.n	8009dc0 <_strtod_l+0x474>
 800a024:	2101      	movs	r1, #1
 800a026:	9805      	ldr	r0, [sp, #20]
 800a028:	f003 f88e 	bl	800d148 <__i2b>
 800a02c:	9007      	str	r0, [sp, #28]
 800a02e:	2800      	cmp	r0, #0
 800a030:	d10e      	bne.n	800a050 <_strtod_l+0x704>
 800a032:	2300      	movs	r3, #0
 800a034:	9307      	str	r3, [sp, #28]
 800a036:	e6c3      	b.n	8009dc0 <_strtod_l+0x474>
 800a038:	234b      	movs	r3, #75	@ 0x4b
 800a03a:	1a9a      	subs	r2, r3, r2
 800a03c:	3b4c      	subs	r3, #76	@ 0x4c
 800a03e:	4093      	lsls	r3, r2
 800a040:	4019      	ands	r1, r3
 800a042:	000f      	movs	r7, r1
 800a044:	e7a9      	b.n	8009f9a <_strtod_l+0x64e>
 800a046:	2201      	movs	r2, #1
 800a048:	4252      	negs	r2, r2
 800a04a:	409a      	lsls	r2, r3
 800a04c:	4016      	ands	r6, r2
 800a04e:	e7a4      	b.n	8009f9a <_strtod_l+0x64e>
 800a050:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a052:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a054:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800a056:	1ad4      	subs	r4, r2, r3
 800a058:	2b00      	cmp	r3, #0
 800a05a:	db01      	blt.n	800a060 <_strtod_l+0x714>
 800a05c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800a05e:	195d      	adds	r5, r3, r5
 800a060:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a062:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a064:	1a5b      	subs	r3, r3, r1
 800a066:	2136      	movs	r1, #54	@ 0x36
 800a068:	189b      	adds	r3, r3, r2
 800a06a:	1a8a      	subs	r2, r1, r2
 800a06c:	497a      	ldr	r1, [pc, #488]	@ (800a258 <_strtod_l+0x90c>)
 800a06e:	2001      	movs	r0, #1
 800a070:	468c      	mov	ip, r1
 800a072:	2100      	movs	r1, #0
 800a074:	3b01      	subs	r3, #1
 800a076:	9116      	str	r1, [sp, #88]	@ 0x58
 800a078:	9014      	str	r0, [sp, #80]	@ 0x50
 800a07a:	4563      	cmp	r3, ip
 800a07c:	da06      	bge.n	800a08c <_strtod_l+0x740>
 800a07e:	4661      	mov	r1, ip
 800a080:	1ac9      	subs	r1, r1, r3
 800a082:	1a52      	subs	r2, r2, r1
 800a084:	291f      	cmp	r1, #31
 800a086:	dc3f      	bgt.n	800a108 <_strtod_l+0x7bc>
 800a088:	4088      	lsls	r0, r1
 800a08a:	9014      	str	r0, [sp, #80]	@ 0x50
 800a08c:	18ab      	adds	r3, r5, r2
 800a08e:	930e      	str	r3, [sp, #56]	@ 0x38
 800a090:	18a4      	adds	r4, r4, r2
 800a092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a096:	191c      	adds	r4, r3, r4
 800a098:	002b      	movs	r3, r5
 800a09a:	4295      	cmp	r5, r2
 800a09c:	dd00      	ble.n	800a0a0 <_strtod_l+0x754>
 800a09e:	0013      	movs	r3, r2
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	dd00      	ble.n	800a0a6 <_strtod_l+0x75a>
 800a0a4:	0023      	movs	r3, r4
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	dd04      	ble.n	800a0b4 <_strtod_l+0x768>
 800a0aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0ac:	1ae4      	subs	r4, r4, r3
 800a0ae:	1ad2      	subs	r2, r2, r3
 800a0b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0b2:	1aed      	subs	r5, r5, r3
 800a0b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	dd16      	ble.n	800a0e8 <_strtod_l+0x79c>
 800a0ba:	001a      	movs	r2, r3
 800a0bc:	9907      	ldr	r1, [sp, #28]
 800a0be:	9805      	ldr	r0, [sp, #20]
 800a0c0:	f003 f90c 	bl	800d2dc <__pow5mult>
 800a0c4:	9007      	str	r0, [sp, #28]
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d0b3      	beq.n	800a032 <_strtod_l+0x6e6>
 800a0ca:	0001      	movs	r1, r0
 800a0cc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800a0ce:	9805      	ldr	r0, [sp, #20]
 800a0d0:	f003 f852 	bl	800d178 <__multiply>
 800a0d4:	9013      	str	r0, [sp, #76]	@ 0x4c
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d100      	bne.n	800a0dc <_strtod_l+0x790>
 800a0da:	e671      	b.n	8009dc0 <_strtod_l+0x474>
 800a0dc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a0de:	9805      	ldr	r0, [sp, #20]
 800a0e0:	f002 ff2e 	bl	800cf40 <_Bfree>
 800a0e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a0e6:	931e      	str	r3, [sp, #120]	@ 0x78
 800a0e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	dc12      	bgt.n	800a114 <_strtod_l+0x7c8>
 800a0ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	dd18      	ble.n	800a126 <_strtod_l+0x7da>
 800a0f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a0f6:	9908      	ldr	r1, [sp, #32]
 800a0f8:	9805      	ldr	r0, [sp, #20]
 800a0fa:	f003 f8ef 	bl	800d2dc <__pow5mult>
 800a0fe:	9008      	str	r0, [sp, #32]
 800a100:	2800      	cmp	r0, #0
 800a102:	d110      	bne.n	800a126 <_strtod_l+0x7da>
 800a104:	2300      	movs	r3, #0
 800a106:	e65a      	b.n	8009dbe <_strtod_l+0x472>
 800a108:	4954      	ldr	r1, [pc, #336]	@ (800a25c <_strtod_l+0x910>)
 800a10a:	1acb      	subs	r3, r1, r3
 800a10c:	0001      	movs	r1, r0
 800a10e:	4099      	lsls	r1, r3
 800a110:	9116      	str	r1, [sp, #88]	@ 0x58
 800a112:	e7ba      	b.n	800a08a <_strtod_l+0x73e>
 800a114:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a116:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a118:	9805      	ldr	r0, [sp, #20]
 800a11a:	f003 f93b 	bl	800d394 <__lshift>
 800a11e:	901e      	str	r0, [sp, #120]	@ 0x78
 800a120:	2800      	cmp	r0, #0
 800a122:	d1e4      	bne.n	800a0ee <_strtod_l+0x7a2>
 800a124:	e64c      	b.n	8009dc0 <_strtod_l+0x474>
 800a126:	2c00      	cmp	r4, #0
 800a128:	dd07      	ble.n	800a13a <_strtod_l+0x7ee>
 800a12a:	0022      	movs	r2, r4
 800a12c:	9908      	ldr	r1, [sp, #32]
 800a12e:	9805      	ldr	r0, [sp, #20]
 800a130:	f003 f930 	bl	800d394 <__lshift>
 800a134:	9008      	str	r0, [sp, #32]
 800a136:	2800      	cmp	r0, #0
 800a138:	d0e4      	beq.n	800a104 <_strtod_l+0x7b8>
 800a13a:	2d00      	cmp	r5, #0
 800a13c:	dd08      	ble.n	800a150 <_strtod_l+0x804>
 800a13e:	002a      	movs	r2, r5
 800a140:	9907      	ldr	r1, [sp, #28]
 800a142:	9805      	ldr	r0, [sp, #20]
 800a144:	f003 f926 	bl	800d394 <__lshift>
 800a148:	9007      	str	r0, [sp, #28]
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d100      	bne.n	800a150 <_strtod_l+0x804>
 800a14e:	e637      	b.n	8009dc0 <_strtod_l+0x474>
 800a150:	9a08      	ldr	r2, [sp, #32]
 800a152:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a154:	9805      	ldr	r0, [sp, #20]
 800a156:	f003 f9a5 	bl	800d4a4 <__mdiff>
 800a15a:	9006      	str	r0, [sp, #24]
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d100      	bne.n	800a162 <_strtod_l+0x816>
 800a160:	e62e      	b.n	8009dc0 <_strtod_l+0x474>
 800a162:	68c3      	ldr	r3, [r0, #12]
 800a164:	9907      	ldr	r1, [sp, #28]
 800a166:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a168:	2300      	movs	r3, #0
 800a16a:	60c3      	str	r3, [r0, #12]
 800a16c:	f003 f97e 	bl	800d46c <__mcmp>
 800a170:	2800      	cmp	r0, #0
 800a172:	da3b      	bge.n	800a1ec <_strtod_l+0x8a0>
 800a174:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a176:	4333      	orrs	r3, r6
 800a178:	d167      	bne.n	800a24a <_strtod_l+0x8fe>
 800a17a:	033b      	lsls	r3, r7, #12
 800a17c:	d165      	bne.n	800a24a <_strtod_l+0x8fe>
 800a17e:	22d6      	movs	r2, #214	@ 0xd6
 800a180:	4b37      	ldr	r3, [pc, #220]	@ (800a260 <_strtod_l+0x914>)
 800a182:	04d2      	lsls	r2, r2, #19
 800a184:	403b      	ands	r3, r7
 800a186:	4293      	cmp	r3, r2
 800a188:	d95f      	bls.n	800a24a <_strtod_l+0x8fe>
 800a18a:	9b06      	ldr	r3, [sp, #24]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d103      	bne.n	800a19a <_strtod_l+0x84e>
 800a192:	9b06      	ldr	r3, [sp, #24]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	2b01      	cmp	r3, #1
 800a198:	dd57      	ble.n	800a24a <_strtod_l+0x8fe>
 800a19a:	9906      	ldr	r1, [sp, #24]
 800a19c:	2201      	movs	r2, #1
 800a19e:	9805      	ldr	r0, [sp, #20]
 800a1a0:	f003 f8f8 	bl	800d394 <__lshift>
 800a1a4:	9907      	ldr	r1, [sp, #28]
 800a1a6:	9006      	str	r0, [sp, #24]
 800a1a8:	f003 f960 	bl	800d46c <__mcmp>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	dd4c      	ble.n	800a24a <_strtod_l+0x8fe>
 800a1b0:	4b2b      	ldr	r3, [pc, #172]	@ (800a260 <_strtod_l+0x914>)
 800a1b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1b4:	403b      	ands	r3, r7
 800a1b6:	2a00      	cmp	r2, #0
 800a1b8:	d074      	beq.n	800a2a4 <_strtod_l+0x958>
 800a1ba:	22d6      	movs	r2, #214	@ 0xd6
 800a1bc:	04d2      	lsls	r2, r2, #19
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d870      	bhi.n	800a2a4 <_strtod_l+0x958>
 800a1c2:	22dc      	movs	r2, #220	@ 0xdc
 800a1c4:	0492      	lsls	r2, r2, #18
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d800      	bhi.n	800a1cc <_strtod_l+0x880>
 800a1ca:	e695      	b.n	8009ef8 <_strtod_l+0x5ac>
 800a1cc:	0030      	movs	r0, r6
 800a1ce:	0039      	movs	r1, r7
 800a1d0:	4b24      	ldr	r3, [pc, #144]	@ (800a264 <_strtod_l+0x918>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f7f7 fcbc 	bl	8001b50 <__aeabi_dmul>
 800a1d8:	4b21      	ldr	r3, [pc, #132]	@ (800a260 <_strtod_l+0x914>)
 800a1da:	0006      	movs	r6, r0
 800a1dc:	000f      	movs	r7, r1
 800a1de:	420b      	tst	r3, r1
 800a1e0:	d000      	beq.n	800a1e4 <_strtod_l+0x898>
 800a1e2:	e5f6      	b.n	8009dd2 <_strtod_l+0x486>
 800a1e4:	2322      	movs	r3, #34	@ 0x22
 800a1e6:	9a05      	ldr	r2, [sp, #20]
 800a1e8:	6013      	str	r3, [r2, #0]
 800a1ea:	e5f2      	b.n	8009dd2 <_strtod_l+0x486>
 800a1ec:	970e      	str	r7, [sp, #56]	@ 0x38
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d175      	bne.n	800a2de <_strtod_l+0x992>
 800a1f2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a1f4:	033b      	lsls	r3, r7, #12
 800a1f6:	0b1b      	lsrs	r3, r3, #12
 800a1f8:	2a00      	cmp	r2, #0
 800a1fa:	d039      	beq.n	800a270 <_strtod_l+0x924>
 800a1fc:	4a1a      	ldr	r2, [pc, #104]	@ (800a268 <_strtod_l+0x91c>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d138      	bne.n	800a274 <_strtod_l+0x928>
 800a202:	2101      	movs	r1, #1
 800a204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a206:	4249      	negs	r1, r1
 800a208:	0032      	movs	r2, r6
 800a20a:	0008      	movs	r0, r1
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00b      	beq.n	800a228 <_strtod_l+0x8dc>
 800a210:	24d4      	movs	r4, #212	@ 0xd4
 800a212:	4b13      	ldr	r3, [pc, #76]	@ (800a260 <_strtod_l+0x914>)
 800a214:	0008      	movs	r0, r1
 800a216:	403b      	ands	r3, r7
 800a218:	04e4      	lsls	r4, r4, #19
 800a21a:	42a3      	cmp	r3, r4
 800a21c:	d804      	bhi.n	800a228 <_strtod_l+0x8dc>
 800a21e:	306c      	adds	r0, #108	@ 0x6c
 800a220:	0d1b      	lsrs	r3, r3, #20
 800a222:	1ac3      	subs	r3, r0, r3
 800a224:	4099      	lsls	r1, r3
 800a226:	0008      	movs	r0, r1
 800a228:	4282      	cmp	r2, r0
 800a22a:	d123      	bne.n	800a274 <_strtod_l+0x928>
 800a22c:	4b0f      	ldr	r3, [pc, #60]	@ (800a26c <_strtod_l+0x920>)
 800a22e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a230:	4299      	cmp	r1, r3
 800a232:	d102      	bne.n	800a23a <_strtod_l+0x8ee>
 800a234:	3201      	adds	r2, #1
 800a236:	d100      	bne.n	800a23a <_strtod_l+0x8ee>
 800a238:	e5c2      	b.n	8009dc0 <_strtod_l+0x474>
 800a23a:	4b09      	ldr	r3, [pc, #36]	@ (800a260 <_strtod_l+0x914>)
 800a23c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a23e:	2600      	movs	r6, #0
 800a240:	401a      	ands	r2, r3
 800a242:	0013      	movs	r3, r2
 800a244:	2280      	movs	r2, #128	@ 0x80
 800a246:	0352      	lsls	r2, r2, #13
 800a248:	189f      	adds	r7, r3, r2
 800a24a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1bd      	bne.n	800a1cc <_strtod_l+0x880>
 800a250:	e5bf      	b.n	8009dd2 <_strtod_l+0x486>
 800a252:	46c0      	nop			@ (mov r8, r8)
 800a254:	0800ed38 	.word	0x0800ed38
 800a258:	fffffc02 	.word	0xfffffc02
 800a25c:	fffffbe2 	.word	0xfffffbe2
 800a260:	7ff00000 	.word	0x7ff00000
 800a264:	39500000 	.word	0x39500000
 800a268:	000fffff 	.word	0x000fffff
 800a26c:	7fefffff 	.word	0x7fefffff
 800a270:	4333      	orrs	r3, r6
 800a272:	d09d      	beq.n	800a1b0 <_strtod_l+0x864>
 800a274:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a276:	2b00      	cmp	r3, #0
 800a278:	d01c      	beq.n	800a2b4 <_strtod_l+0x968>
 800a27a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a27c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a27e:	4213      	tst	r3, r2
 800a280:	d0e3      	beq.n	800a24a <_strtod_l+0x8fe>
 800a282:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a284:	0030      	movs	r0, r6
 800a286:	0039      	movs	r1, r7
 800a288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d016      	beq.n	800a2bc <_strtod_l+0x970>
 800a28e:	f7ff fb45 	bl	800991c <sulp>
 800a292:	0002      	movs	r2, r0
 800a294:	000b      	movs	r3, r1
 800a296:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a298:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a29a:	f7f6 fcb1 	bl	8000c00 <__aeabi_dadd>
 800a29e:	0006      	movs	r6, r0
 800a2a0:	000f      	movs	r7, r1
 800a2a2:	e7d2      	b.n	800a24a <_strtod_l+0x8fe>
 800a2a4:	2601      	movs	r6, #1
 800a2a6:	4a92      	ldr	r2, [pc, #584]	@ (800a4f0 <_strtod_l+0xba4>)
 800a2a8:	4276      	negs	r6, r6
 800a2aa:	189b      	adds	r3, r3, r2
 800a2ac:	4a91      	ldr	r2, [pc, #580]	@ (800a4f4 <_strtod_l+0xba8>)
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	0017      	movs	r7, r2
 800a2b2:	e7ca      	b.n	800a24a <_strtod_l+0x8fe>
 800a2b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a2b6:	4233      	tst	r3, r6
 800a2b8:	d0c7      	beq.n	800a24a <_strtod_l+0x8fe>
 800a2ba:	e7e2      	b.n	800a282 <_strtod_l+0x936>
 800a2bc:	f7ff fb2e 	bl	800991c <sulp>
 800a2c0:	0002      	movs	r2, r0
 800a2c2:	000b      	movs	r3, r1
 800a2c4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a2c6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a2c8:	f7f7 ff0a 	bl	80020e0 <__aeabi_dsub>
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	0006      	movs	r6, r0
 800a2d2:	000f      	movs	r7, r1
 800a2d4:	f7f6 f8c4 	bl	8000460 <__aeabi_dcmpeq>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d0b6      	beq.n	800a24a <_strtod_l+0x8fe>
 800a2dc:	e60c      	b.n	8009ef8 <_strtod_l+0x5ac>
 800a2de:	9907      	ldr	r1, [sp, #28]
 800a2e0:	9806      	ldr	r0, [sp, #24]
 800a2e2:	f003 fa45 	bl	800d770 <__ratio>
 800a2e6:	2380      	movs	r3, #128	@ 0x80
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	05db      	lsls	r3, r3, #23
 800a2ec:	0004      	movs	r4, r0
 800a2ee:	000d      	movs	r5, r1
 800a2f0:	f7f6 f8c6 	bl	8000480 <__aeabi_dcmple>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d06c      	beq.n	800a3d2 <_strtod_l+0xa86>
 800a2f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d177      	bne.n	800a3ee <_strtod_l+0xaa2>
 800a2fe:	2e00      	cmp	r6, #0
 800a300:	d157      	bne.n	800a3b2 <_strtod_l+0xa66>
 800a302:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a304:	031b      	lsls	r3, r3, #12
 800a306:	d15a      	bne.n	800a3be <_strtod_l+0xa72>
 800a308:	2200      	movs	r2, #0
 800a30a:	0020      	movs	r0, r4
 800a30c:	0029      	movs	r1, r5
 800a30e:	4b7a      	ldr	r3, [pc, #488]	@ (800a4f8 <_strtod_l+0xbac>)
 800a310:	f7f6 f8ac 	bl	800046c <__aeabi_dcmplt>
 800a314:	2800      	cmp	r0, #0
 800a316:	d159      	bne.n	800a3cc <_strtod_l+0xa80>
 800a318:	0020      	movs	r0, r4
 800a31a:	0029      	movs	r1, r5
 800a31c:	2200      	movs	r2, #0
 800a31e:	4b77      	ldr	r3, [pc, #476]	@ (800a4fc <_strtod_l+0xbb0>)
 800a320:	f7f7 fc16 	bl	8001b50 <__aeabi_dmul>
 800a324:	0004      	movs	r4, r0
 800a326:	000d      	movs	r5, r1
 800a328:	2380      	movs	r3, #128	@ 0x80
 800a32a:	061b      	lsls	r3, r3, #24
 800a32c:	18eb      	adds	r3, r5, r3
 800a32e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a330:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a332:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a334:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a336:	9214      	str	r2, [sp, #80]	@ 0x50
 800a338:	9315      	str	r3, [sp, #84]	@ 0x54
 800a33a:	4a71      	ldr	r2, [pc, #452]	@ (800a500 <_strtod_l+0xbb4>)
 800a33c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a33e:	4013      	ands	r3, r2
 800a340:	9316      	str	r3, [sp, #88]	@ 0x58
 800a342:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a344:	4b6f      	ldr	r3, [pc, #444]	@ (800a504 <_strtod_l+0xbb8>)
 800a346:	429a      	cmp	r2, r3
 800a348:	d000      	beq.n	800a34c <_strtod_l+0xa00>
 800a34a:	e087      	b.n	800a45c <_strtod_l+0xb10>
 800a34c:	4a6e      	ldr	r2, [pc, #440]	@ (800a508 <_strtod_l+0xbbc>)
 800a34e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a350:	4694      	mov	ip, r2
 800a352:	4463      	add	r3, ip
 800a354:	001f      	movs	r7, r3
 800a356:	0030      	movs	r0, r6
 800a358:	0019      	movs	r1, r3
 800a35a:	f003 f93d 	bl	800d5d8 <__ulp>
 800a35e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a360:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a362:	f7f7 fbf5 	bl	8001b50 <__aeabi_dmul>
 800a366:	0032      	movs	r2, r6
 800a368:	003b      	movs	r3, r7
 800a36a:	f7f6 fc49 	bl	8000c00 <__aeabi_dadd>
 800a36e:	4a64      	ldr	r2, [pc, #400]	@ (800a500 <_strtod_l+0xbb4>)
 800a370:	4b66      	ldr	r3, [pc, #408]	@ (800a50c <_strtod_l+0xbc0>)
 800a372:	0006      	movs	r6, r0
 800a374:	400a      	ands	r2, r1
 800a376:	429a      	cmp	r2, r3
 800a378:	d940      	bls.n	800a3fc <_strtod_l+0xab0>
 800a37a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a37c:	4a64      	ldr	r2, [pc, #400]	@ (800a510 <_strtod_l+0xbc4>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d103      	bne.n	800a38a <_strtod_l+0xa3e>
 800a382:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a384:	3301      	adds	r3, #1
 800a386:	d100      	bne.n	800a38a <_strtod_l+0xa3e>
 800a388:	e51a      	b.n	8009dc0 <_strtod_l+0x474>
 800a38a:	2601      	movs	r6, #1
 800a38c:	4f60      	ldr	r7, [pc, #384]	@ (800a510 <_strtod_l+0xbc4>)
 800a38e:	4276      	negs	r6, r6
 800a390:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a392:	9805      	ldr	r0, [sp, #20]
 800a394:	f002 fdd4 	bl	800cf40 <_Bfree>
 800a398:	9908      	ldr	r1, [sp, #32]
 800a39a:	9805      	ldr	r0, [sp, #20]
 800a39c:	f002 fdd0 	bl	800cf40 <_Bfree>
 800a3a0:	9907      	ldr	r1, [sp, #28]
 800a3a2:	9805      	ldr	r0, [sp, #20]
 800a3a4:	f002 fdcc 	bl	800cf40 <_Bfree>
 800a3a8:	9906      	ldr	r1, [sp, #24]
 800a3aa:	9805      	ldr	r0, [sp, #20]
 800a3ac:	f002 fdc8 	bl	800cf40 <_Bfree>
 800a3b0:	e617      	b.n	8009fe2 <_strtod_l+0x696>
 800a3b2:	2e01      	cmp	r6, #1
 800a3b4:	d103      	bne.n	800a3be <_strtod_l+0xa72>
 800a3b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d100      	bne.n	800a3be <_strtod_l+0xa72>
 800a3bc:	e59c      	b.n	8009ef8 <_strtod_l+0x5ac>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	4c54      	ldr	r4, [pc, #336]	@ (800a514 <_strtod_l+0xbc8>)
 800a3c2:	4d4d      	ldr	r5, [pc, #308]	@ (800a4f8 <_strtod_l+0xbac>)
 800a3c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a3c8:	2400      	movs	r4, #0
 800a3ca:	e7b2      	b.n	800a332 <_strtod_l+0x9e6>
 800a3cc:	2400      	movs	r4, #0
 800a3ce:	4d4b      	ldr	r5, [pc, #300]	@ (800a4fc <_strtod_l+0xbb0>)
 800a3d0:	e7aa      	b.n	800a328 <_strtod_l+0x9dc>
 800a3d2:	0020      	movs	r0, r4
 800a3d4:	0029      	movs	r1, r5
 800a3d6:	4b49      	ldr	r3, [pc, #292]	@ (800a4fc <_strtod_l+0xbb0>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f7f7 fbb9 	bl	8001b50 <__aeabi_dmul>
 800a3de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3e0:	0004      	movs	r4, r0
 800a3e2:	000d      	movs	r5, r1
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d09f      	beq.n	800a328 <_strtod_l+0x9dc>
 800a3e8:	940a      	str	r4, [sp, #40]	@ 0x28
 800a3ea:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a3ec:	e7a1      	b.n	800a332 <_strtod_l+0x9e6>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	4c41      	ldr	r4, [pc, #260]	@ (800a4f8 <_strtod_l+0xbac>)
 800a3f2:	0025      	movs	r5, r4
 800a3f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a3f8:	001c      	movs	r4, r3
 800a3fa:	e79a      	b.n	800a332 <_strtod_l+0x9e6>
 800a3fc:	23d4      	movs	r3, #212	@ 0xd4
 800a3fe:	049b      	lsls	r3, r3, #18
 800a400:	18cf      	adds	r7, r1, r3
 800a402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a404:	9710      	str	r7, [sp, #64]	@ 0x40
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1c2      	bne.n	800a390 <_strtod_l+0xa44>
 800a40a:	4b3d      	ldr	r3, [pc, #244]	@ (800a500 <_strtod_l+0xbb4>)
 800a40c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a40e:	403b      	ands	r3, r7
 800a410:	429a      	cmp	r2, r3
 800a412:	d1bd      	bne.n	800a390 <_strtod_l+0xa44>
 800a414:	0020      	movs	r0, r4
 800a416:	0029      	movs	r1, r5
 800a418:	f7f6 f86e 	bl	80004f8 <__aeabi_d2lz>
 800a41c:	f7f6 f8a6 	bl	800056c <__aeabi_l2d>
 800a420:	0002      	movs	r2, r0
 800a422:	000b      	movs	r3, r1
 800a424:	0020      	movs	r0, r4
 800a426:	0029      	movs	r1, r5
 800a428:	f7f7 fe5a 	bl	80020e0 <__aeabi_dsub>
 800a42c:	033c      	lsls	r4, r7, #12
 800a42e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a430:	0b24      	lsrs	r4, r4, #12
 800a432:	4334      	orrs	r4, r6
 800a434:	900e      	str	r0, [sp, #56]	@ 0x38
 800a436:	910f      	str	r1, [sp, #60]	@ 0x3c
 800a438:	4a37      	ldr	r2, [pc, #220]	@ (800a518 <_strtod_l+0xbcc>)
 800a43a:	431c      	orrs	r4, r3
 800a43c:	d052      	beq.n	800a4e4 <_strtod_l+0xb98>
 800a43e:	4b37      	ldr	r3, [pc, #220]	@ (800a51c <_strtod_l+0xbd0>)
 800a440:	f7f6 f814 	bl	800046c <__aeabi_dcmplt>
 800a444:	2800      	cmp	r0, #0
 800a446:	d000      	beq.n	800a44a <_strtod_l+0xafe>
 800a448:	e4c3      	b.n	8009dd2 <_strtod_l+0x486>
 800a44a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a44c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a44e:	4a34      	ldr	r2, [pc, #208]	@ (800a520 <_strtod_l+0xbd4>)
 800a450:	4b2a      	ldr	r3, [pc, #168]	@ (800a4fc <_strtod_l+0xbb0>)
 800a452:	f7f6 f81f 	bl	8000494 <__aeabi_dcmpgt>
 800a456:	2800      	cmp	r0, #0
 800a458:	d09a      	beq.n	800a390 <_strtod_l+0xa44>
 800a45a:	e4ba      	b.n	8009dd2 <_strtod_l+0x486>
 800a45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d02a      	beq.n	800a4b8 <_strtod_l+0xb6c>
 800a462:	23d4      	movs	r3, #212	@ 0xd4
 800a464:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a466:	04db      	lsls	r3, r3, #19
 800a468:	429a      	cmp	r2, r3
 800a46a:	d825      	bhi.n	800a4b8 <_strtod_l+0xb6c>
 800a46c:	0020      	movs	r0, r4
 800a46e:	0029      	movs	r1, r5
 800a470:	4a2c      	ldr	r2, [pc, #176]	@ (800a524 <_strtod_l+0xbd8>)
 800a472:	4b2d      	ldr	r3, [pc, #180]	@ (800a528 <_strtod_l+0xbdc>)
 800a474:	f7f6 f804 	bl	8000480 <__aeabi_dcmple>
 800a478:	2800      	cmp	r0, #0
 800a47a:	d016      	beq.n	800a4aa <_strtod_l+0xb5e>
 800a47c:	0020      	movs	r0, r4
 800a47e:	0029      	movs	r1, r5
 800a480:	f7f6 f81c 	bl	80004bc <__aeabi_d2uiz>
 800a484:	2800      	cmp	r0, #0
 800a486:	d100      	bne.n	800a48a <_strtod_l+0xb3e>
 800a488:	3001      	adds	r0, #1
 800a48a:	f7f8 fa51 	bl	8002930 <__aeabi_ui2d>
 800a48e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a490:	0004      	movs	r4, r0
 800a492:	000d      	movs	r5, r1
 800a494:	2b00      	cmp	r3, #0
 800a496:	d122      	bne.n	800a4de <_strtod_l+0xb92>
 800a498:	2380      	movs	r3, #128	@ 0x80
 800a49a:	061b      	lsls	r3, r3, #24
 800a49c:	18cb      	adds	r3, r1, r3
 800a49e:	9018      	str	r0, [sp, #96]	@ 0x60
 800a4a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a4a2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a4a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4a6:	9214      	str	r2, [sp, #80]	@ 0x50
 800a4a8:	9315      	str	r3, [sp, #84]	@ 0x54
 800a4aa:	22d6      	movs	r2, #214	@ 0xd6
 800a4ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a4ae:	04d2      	lsls	r2, r2, #19
 800a4b0:	189b      	adds	r3, r3, r2
 800a4b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a4b4:	1a9b      	subs	r3, r3, r2
 800a4b6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a4b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a4ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a4bc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a4be:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800a4c0:	f003 f88a 	bl	800d5d8 <__ulp>
 800a4c4:	0002      	movs	r2, r0
 800a4c6:	000b      	movs	r3, r1
 800a4c8:	0030      	movs	r0, r6
 800a4ca:	0039      	movs	r1, r7
 800a4cc:	f7f7 fb40 	bl	8001b50 <__aeabi_dmul>
 800a4d0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a4d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4d4:	f7f6 fb94 	bl	8000c00 <__aeabi_dadd>
 800a4d8:	0006      	movs	r6, r0
 800a4da:	000f      	movs	r7, r1
 800a4dc:	e791      	b.n	800a402 <_strtod_l+0xab6>
 800a4de:	9418      	str	r4, [sp, #96]	@ 0x60
 800a4e0:	9519      	str	r5, [sp, #100]	@ 0x64
 800a4e2:	e7de      	b.n	800a4a2 <_strtod_l+0xb56>
 800a4e4:	4b11      	ldr	r3, [pc, #68]	@ (800a52c <_strtod_l+0xbe0>)
 800a4e6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a4e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a4ea:	f7f5 ffbf 	bl	800046c <__aeabi_dcmplt>
 800a4ee:	e7b2      	b.n	800a456 <_strtod_l+0xb0a>
 800a4f0:	fff00000 	.word	0xfff00000
 800a4f4:	000fffff 	.word	0x000fffff
 800a4f8:	3ff00000 	.word	0x3ff00000
 800a4fc:	3fe00000 	.word	0x3fe00000
 800a500:	7ff00000 	.word	0x7ff00000
 800a504:	7fe00000 	.word	0x7fe00000
 800a508:	fcb00000 	.word	0xfcb00000
 800a50c:	7c9fffff 	.word	0x7c9fffff
 800a510:	7fefffff 	.word	0x7fefffff
 800a514:	bff00000 	.word	0xbff00000
 800a518:	94a03595 	.word	0x94a03595
 800a51c:	3fdfffff 	.word	0x3fdfffff
 800a520:	35afe535 	.word	0x35afe535
 800a524:	ffc00000 	.word	0xffc00000
 800a528:	41dfffff 	.word	0x41dfffff
 800a52c:	3fcfffff 	.word	0x3fcfffff

0800a530 <_strtod_r>:
 800a530:	b510      	push	{r4, lr}
 800a532:	4b02      	ldr	r3, [pc, #8]	@ (800a53c <_strtod_r+0xc>)
 800a534:	f7ff fa0a 	bl	800994c <_strtod_l>
 800a538:	bd10      	pop	{r4, pc}
 800a53a:	46c0      	nop			@ (mov r8, r8)
 800a53c:	20000048 	.word	0x20000048

0800a540 <strtod>:
 800a540:	b510      	push	{r4, lr}
 800a542:	4c04      	ldr	r4, [pc, #16]	@ (800a554 <strtod+0x14>)
 800a544:	000a      	movs	r2, r1
 800a546:	0001      	movs	r1, r0
 800a548:	4b03      	ldr	r3, [pc, #12]	@ (800a558 <strtod+0x18>)
 800a54a:	6820      	ldr	r0, [r4, #0]
 800a54c:	f7ff f9fe 	bl	800994c <_strtod_l>
 800a550:	bd10      	pop	{r4, pc}
 800a552:	46c0      	nop			@ (mov r8, r8)
 800a554:	200001b4 	.word	0x200001b4
 800a558:	20000048 	.word	0x20000048

0800a55c <__cvt>:
 800a55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a55e:	001f      	movs	r7, r3
 800a560:	2300      	movs	r3, #0
 800a562:	0016      	movs	r6, r2
 800a564:	b08b      	sub	sp, #44	@ 0x2c
 800a566:	429f      	cmp	r7, r3
 800a568:	da04      	bge.n	800a574 <__cvt+0x18>
 800a56a:	2180      	movs	r1, #128	@ 0x80
 800a56c:	0609      	lsls	r1, r1, #24
 800a56e:	187b      	adds	r3, r7, r1
 800a570:	001f      	movs	r7, r3
 800a572:	232d      	movs	r3, #45	@ 0x2d
 800a574:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a576:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a578:	7013      	strb	r3, [r2, #0]
 800a57a:	2320      	movs	r3, #32
 800a57c:	2203      	movs	r2, #3
 800a57e:	439d      	bics	r5, r3
 800a580:	2d46      	cmp	r5, #70	@ 0x46
 800a582:	d007      	beq.n	800a594 <__cvt+0x38>
 800a584:	002b      	movs	r3, r5
 800a586:	3b45      	subs	r3, #69	@ 0x45
 800a588:	4259      	negs	r1, r3
 800a58a:	414b      	adcs	r3, r1
 800a58c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a58e:	3a01      	subs	r2, #1
 800a590:	18cb      	adds	r3, r1, r3
 800a592:	9310      	str	r3, [sp, #64]	@ 0x40
 800a594:	ab09      	add	r3, sp, #36	@ 0x24
 800a596:	9304      	str	r3, [sp, #16]
 800a598:	ab08      	add	r3, sp, #32
 800a59a:	9303      	str	r3, [sp, #12]
 800a59c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a59e:	9200      	str	r2, [sp, #0]
 800a5a0:	9302      	str	r3, [sp, #8]
 800a5a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5a4:	0032      	movs	r2, r6
 800a5a6:	9301      	str	r3, [sp, #4]
 800a5a8:	003b      	movs	r3, r7
 800a5aa:	f001 fa1f 	bl	800b9ec <_dtoa_r>
 800a5ae:	0004      	movs	r4, r0
 800a5b0:	2d47      	cmp	r5, #71	@ 0x47
 800a5b2:	d11b      	bne.n	800a5ec <__cvt+0x90>
 800a5b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5b6:	07db      	lsls	r3, r3, #31
 800a5b8:	d511      	bpl.n	800a5de <__cvt+0x82>
 800a5ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5bc:	18c3      	adds	r3, r0, r3
 800a5be:	9307      	str	r3, [sp, #28]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	0030      	movs	r0, r6
 800a5c6:	0039      	movs	r1, r7
 800a5c8:	f7f5 ff4a 	bl	8000460 <__aeabi_dcmpeq>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d001      	beq.n	800a5d4 <__cvt+0x78>
 800a5d0:	9b07      	ldr	r3, [sp, #28]
 800a5d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5d4:	2230      	movs	r2, #48	@ 0x30
 800a5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5d8:	9907      	ldr	r1, [sp, #28]
 800a5da:	428b      	cmp	r3, r1
 800a5dc:	d320      	bcc.n	800a620 <__cvt+0xc4>
 800a5de:	0020      	movs	r0, r4
 800a5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a5e4:	1b1b      	subs	r3, r3, r4
 800a5e6:	6013      	str	r3, [r2, #0]
 800a5e8:	b00b      	add	sp, #44	@ 0x2c
 800a5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5ee:	18c3      	adds	r3, r0, r3
 800a5f0:	9307      	str	r3, [sp, #28]
 800a5f2:	2d46      	cmp	r5, #70	@ 0x46
 800a5f4:	d1e4      	bne.n	800a5c0 <__cvt+0x64>
 800a5f6:	7803      	ldrb	r3, [r0, #0]
 800a5f8:	2b30      	cmp	r3, #48	@ 0x30
 800a5fa:	d10c      	bne.n	800a616 <__cvt+0xba>
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	2300      	movs	r3, #0
 800a600:	0030      	movs	r0, r6
 800a602:	0039      	movs	r1, r7
 800a604:	f7f5 ff2c 	bl	8000460 <__aeabi_dcmpeq>
 800a608:	2800      	cmp	r0, #0
 800a60a:	d104      	bne.n	800a616 <__cvt+0xba>
 800a60c:	2301      	movs	r3, #1
 800a60e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a610:	1a9b      	subs	r3, r3, r2
 800a612:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a614:	6013      	str	r3, [r2, #0]
 800a616:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a618:	9a07      	ldr	r2, [sp, #28]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	18d3      	adds	r3, r2, r3
 800a61e:	e7ce      	b.n	800a5be <__cvt+0x62>
 800a620:	1c59      	adds	r1, r3, #1
 800a622:	9109      	str	r1, [sp, #36]	@ 0x24
 800a624:	701a      	strb	r2, [r3, #0]
 800a626:	e7d6      	b.n	800a5d6 <__cvt+0x7a>

0800a628 <__exponent>:
 800a628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a62a:	232b      	movs	r3, #43	@ 0x2b
 800a62c:	0005      	movs	r5, r0
 800a62e:	000c      	movs	r4, r1
 800a630:	b085      	sub	sp, #20
 800a632:	7002      	strb	r2, [r0, #0]
 800a634:	2900      	cmp	r1, #0
 800a636:	da01      	bge.n	800a63c <__exponent+0x14>
 800a638:	424c      	negs	r4, r1
 800a63a:	3302      	adds	r3, #2
 800a63c:	706b      	strb	r3, [r5, #1]
 800a63e:	2c09      	cmp	r4, #9
 800a640:	dd2c      	ble.n	800a69c <__exponent+0x74>
 800a642:	ab02      	add	r3, sp, #8
 800a644:	1dde      	adds	r6, r3, #7
 800a646:	0020      	movs	r0, r4
 800a648:	210a      	movs	r1, #10
 800a64a:	f7f5 fef3 	bl	8000434 <__aeabi_idivmod>
 800a64e:	0037      	movs	r7, r6
 800a650:	3130      	adds	r1, #48	@ 0x30
 800a652:	3e01      	subs	r6, #1
 800a654:	0020      	movs	r0, r4
 800a656:	7031      	strb	r1, [r6, #0]
 800a658:	210a      	movs	r1, #10
 800a65a:	9401      	str	r4, [sp, #4]
 800a65c:	f7f5 fe04 	bl	8000268 <__divsi3>
 800a660:	9b01      	ldr	r3, [sp, #4]
 800a662:	0004      	movs	r4, r0
 800a664:	2b63      	cmp	r3, #99	@ 0x63
 800a666:	dcee      	bgt.n	800a646 <__exponent+0x1e>
 800a668:	1eba      	subs	r2, r7, #2
 800a66a:	1ca8      	adds	r0, r5, #2
 800a66c:	0001      	movs	r1, r0
 800a66e:	0013      	movs	r3, r2
 800a670:	3430      	adds	r4, #48	@ 0x30
 800a672:	7014      	strb	r4, [r2, #0]
 800a674:	ac02      	add	r4, sp, #8
 800a676:	3407      	adds	r4, #7
 800a678:	429c      	cmp	r4, r3
 800a67a:	d80a      	bhi.n	800a692 <__exponent+0x6a>
 800a67c:	2300      	movs	r3, #0
 800a67e:	42a2      	cmp	r2, r4
 800a680:	d803      	bhi.n	800a68a <__exponent+0x62>
 800a682:	3309      	adds	r3, #9
 800a684:	aa02      	add	r2, sp, #8
 800a686:	189b      	adds	r3, r3, r2
 800a688:	1bdb      	subs	r3, r3, r7
 800a68a:	18c0      	adds	r0, r0, r3
 800a68c:	1b40      	subs	r0, r0, r5
 800a68e:	b005      	add	sp, #20
 800a690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a692:	781c      	ldrb	r4, [r3, #0]
 800a694:	3301      	adds	r3, #1
 800a696:	700c      	strb	r4, [r1, #0]
 800a698:	3101      	adds	r1, #1
 800a69a:	e7eb      	b.n	800a674 <__exponent+0x4c>
 800a69c:	2330      	movs	r3, #48	@ 0x30
 800a69e:	18e4      	adds	r4, r4, r3
 800a6a0:	70ab      	strb	r3, [r5, #2]
 800a6a2:	1d28      	adds	r0, r5, #4
 800a6a4:	70ec      	strb	r4, [r5, #3]
 800a6a6:	e7f1      	b.n	800a68c <__exponent+0x64>

0800a6a8 <_printf_float>:
 800a6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6aa:	b097      	sub	sp, #92	@ 0x5c
 800a6ac:	000d      	movs	r5, r1
 800a6ae:	920a      	str	r2, [sp, #40]	@ 0x28
 800a6b0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800a6b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6b4:	9009      	str	r0, [sp, #36]	@ 0x24
 800a6b6:	f001 f86d 	bl	800b794 <_localeconv_r>
 800a6ba:	6803      	ldr	r3, [r0, #0]
 800a6bc:	0018      	movs	r0, r3
 800a6be:	930d      	str	r3, [sp, #52]	@ 0x34
 800a6c0:	f7f5 fd2c 	bl	800011c <strlen>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a6c8:	9314      	str	r3, [sp, #80]	@ 0x50
 800a6ca:	7e2b      	ldrb	r3, [r5, #24]
 800a6cc:	2207      	movs	r2, #7
 800a6ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	930e      	str	r3, [sp, #56]	@ 0x38
 800a6d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a6d6:	6823      	ldr	r3, [r4, #0]
 800a6d8:	05c9      	lsls	r1, r1, #23
 800a6da:	d545      	bpl.n	800a768 <_printf_float+0xc0>
 800a6dc:	189b      	adds	r3, r3, r2
 800a6de:	4393      	bics	r3, r2
 800a6e0:	001a      	movs	r2, r3
 800a6e2:	3208      	adds	r2, #8
 800a6e4:	6022      	str	r2, [r4, #0]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	681e      	ldr	r6, [r3, #0]
 800a6ea:	685f      	ldr	r7, [r3, #4]
 800a6ec:	007b      	lsls	r3, r7, #1
 800a6ee:	085b      	lsrs	r3, r3, #1
 800a6f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a6f2:	9610      	str	r6, [sp, #64]	@ 0x40
 800a6f4:	64ae      	str	r6, [r5, #72]	@ 0x48
 800a6f6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800a6f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a6fa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a6fc:	4ba7      	ldr	r3, [pc, #668]	@ (800a99c <_printf_float+0x2f4>)
 800a6fe:	4252      	negs	r2, r2
 800a700:	f7f8 f88a 	bl	8002818 <__aeabi_dcmpun>
 800a704:	2800      	cmp	r0, #0
 800a706:	d131      	bne.n	800a76c <_printf_float+0xc4>
 800a708:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a70a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a70c:	2201      	movs	r2, #1
 800a70e:	4ba3      	ldr	r3, [pc, #652]	@ (800a99c <_printf_float+0x2f4>)
 800a710:	4252      	negs	r2, r2
 800a712:	f7f5 feb5 	bl	8000480 <__aeabi_dcmple>
 800a716:	2800      	cmp	r0, #0
 800a718:	d128      	bne.n	800a76c <_printf_float+0xc4>
 800a71a:	2200      	movs	r2, #0
 800a71c:	2300      	movs	r3, #0
 800a71e:	0030      	movs	r0, r6
 800a720:	0039      	movs	r1, r7
 800a722:	f7f5 fea3 	bl	800046c <__aeabi_dcmplt>
 800a726:	2800      	cmp	r0, #0
 800a728:	d003      	beq.n	800a732 <_printf_float+0x8a>
 800a72a:	002b      	movs	r3, r5
 800a72c:	222d      	movs	r2, #45	@ 0x2d
 800a72e:	3343      	adds	r3, #67	@ 0x43
 800a730:	701a      	strb	r2, [r3, #0]
 800a732:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a734:	4f9a      	ldr	r7, [pc, #616]	@ (800a9a0 <_printf_float+0x2f8>)
 800a736:	2b47      	cmp	r3, #71	@ 0x47
 800a738:	d900      	bls.n	800a73c <_printf_float+0x94>
 800a73a:	4f9a      	ldr	r7, [pc, #616]	@ (800a9a4 <_printf_float+0x2fc>)
 800a73c:	2303      	movs	r3, #3
 800a73e:	2400      	movs	r4, #0
 800a740:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a742:	612b      	str	r3, [r5, #16]
 800a744:	3301      	adds	r3, #1
 800a746:	439a      	bics	r2, r3
 800a748:	602a      	str	r2, [r5, #0]
 800a74a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a74c:	0029      	movs	r1, r5
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a752:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a754:	aa15      	add	r2, sp, #84	@ 0x54
 800a756:	f000 f9e5 	bl	800ab24 <_printf_common>
 800a75a:	3001      	adds	r0, #1
 800a75c:	d000      	beq.n	800a760 <_printf_float+0xb8>
 800a75e:	e09f      	b.n	800a8a0 <_printf_float+0x1f8>
 800a760:	2001      	movs	r0, #1
 800a762:	4240      	negs	r0, r0
 800a764:	b017      	add	sp, #92	@ 0x5c
 800a766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a768:	3307      	adds	r3, #7
 800a76a:	e7b8      	b.n	800a6de <_printf_float+0x36>
 800a76c:	0032      	movs	r2, r6
 800a76e:	003b      	movs	r3, r7
 800a770:	0030      	movs	r0, r6
 800a772:	0039      	movs	r1, r7
 800a774:	f7f8 f850 	bl	8002818 <__aeabi_dcmpun>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d00b      	beq.n	800a794 <_printf_float+0xec>
 800a77c:	2f00      	cmp	r7, #0
 800a77e:	da03      	bge.n	800a788 <_printf_float+0xe0>
 800a780:	002b      	movs	r3, r5
 800a782:	222d      	movs	r2, #45	@ 0x2d
 800a784:	3343      	adds	r3, #67	@ 0x43
 800a786:	701a      	strb	r2, [r3, #0]
 800a788:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a78a:	4f87      	ldr	r7, [pc, #540]	@ (800a9a8 <_printf_float+0x300>)
 800a78c:	2b47      	cmp	r3, #71	@ 0x47
 800a78e:	d9d5      	bls.n	800a73c <_printf_float+0x94>
 800a790:	4f86      	ldr	r7, [pc, #536]	@ (800a9ac <_printf_float+0x304>)
 800a792:	e7d3      	b.n	800a73c <_printf_float+0x94>
 800a794:	2220      	movs	r2, #32
 800a796:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a798:	686b      	ldr	r3, [r5, #4]
 800a79a:	4394      	bics	r4, r2
 800a79c:	1c5a      	adds	r2, r3, #1
 800a79e:	d146      	bne.n	800a82e <_printf_float+0x186>
 800a7a0:	3307      	adds	r3, #7
 800a7a2:	606b      	str	r3, [r5, #4]
 800a7a4:	2380      	movs	r3, #128	@ 0x80
 800a7a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7a8:	00db      	lsls	r3, r3, #3
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	602b      	str	r3, [r5, #0]
 800a7b0:	9206      	str	r2, [sp, #24]
 800a7b2:	aa14      	add	r2, sp, #80	@ 0x50
 800a7b4:	9205      	str	r2, [sp, #20]
 800a7b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a7b8:	a90a      	add	r1, sp, #40	@ 0x28
 800a7ba:	9204      	str	r2, [sp, #16]
 800a7bc:	aa13      	add	r2, sp, #76	@ 0x4c
 800a7be:	9203      	str	r2, [sp, #12]
 800a7c0:	2223      	movs	r2, #35	@ 0x23
 800a7c2:	1852      	adds	r2, r2, r1
 800a7c4:	9202      	str	r2, [sp, #8]
 800a7c6:	9301      	str	r3, [sp, #4]
 800a7c8:	686b      	ldr	r3, [r5, #4]
 800a7ca:	0032      	movs	r2, r6
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7d0:	003b      	movs	r3, r7
 800a7d2:	f7ff fec3 	bl	800a55c <__cvt>
 800a7d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a7d8:	0007      	movs	r7, r0
 800a7da:	2c47      	cmp	r4, #71	@ 0x47
 800a7dc:	d12d      	bne.n	800a83a <_printf_float+0x192>
 800a7de:	1cd3      	adds	r3, r2, #3
 800a7e0:	db02      	blt.n	800a7e8 <_printf_float+0x140>
 800a7e2:	686b      	ldr	r3, [r5, #4]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	dd48      	ble.n	800a87a <_printf_float+0x1d2>
 800a7e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a7ec:	3b02      	subs	r3, #2
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7f2:	0028      	movs	r0, r5
 800a7f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a7f6:	3901      	subs	r1, #1
 800a7f8:	3050      	adds	r0, #80	@ 0x50
 800a7fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a7fc:	f7ff ff14 	bl	800a628 <__exponent>
 800a800:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a802:	0004      	movs	r4, r0
 800a804:	1813      	adds	r3, r2, r0
 800a806:	612b      	str	r3, [r5, #16]
 800a808:	2a01      	cmp	r2, #1
 800a80a:	dc02      	bgt.n	800a812 <_printf_float+0x16a>
 800a80c:	682a      	ldr	r2, [r5, #0]
 800a80e:	07d2      	lsls	r2, r2, #31
 800a810:	d501      	bpl.n	800a816 <_printf_float+0x16e>
 800a812:	3301      	adds	r3, #1
 800a814:	612b      	str	r3, [r5, #16]
 800a816:	2323      	movs	r3, #35	@ 0x23
 800a818:	aa0a      	add	r2, sp, #40	@ 0x28
 800a81a:	189b      	adds	r3, r3, r2
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d100      	bne.n	800a824 <_printf_float+0x17c>
 800a822:	e792      	b.n	800a74a <_printf_float+0xa2>
 800a824:	002b      	movs	r3, r5
 800a826:	222d      	movs	r2, #45	@ 0x2d
 800a828:	3343      	adds	r3, #67	@ 0x43
 800a82a:	701a      	strb	r2, [r3, #0]
 800a82c:	e78d      	b.n	800a74a <_printf_float+0xa2>
 800a82e:	2c47      	cmp	r4, #71	@ 0x47
 800a830:	d1b8      	bne.n	800a7a4 <_printf_float+0xfc>
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1b6      	bne.n	800a7a4 <_printf_float+0xfc>
 800a836:	3301      	adds	r3, #1
 800a838:	e7b3      	b.n	800a7a2 <_printf_float+0xfa>
 800a83a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a83c:	0011      	movs	r1, r2
 800a83e:	2b65      	cmp	r3, #101	@ 0x65
 800a840:	d9d7      	bls.n	800a7f2 <_printf_float+0x14a>
 800a842:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a844:	2b66      	cmp	r3, #102	@ 0x66
 800a846:	d11a      	bne.n	800a87e <_printf_float+0x1d6>
 800a848:	686b      	ldr	r3, [r5, #4]
 800a84a:	2a00      	cmp	r2, #0
 800a84c:	dd09      	ble.n	800a862 <_printf_float+0x1ba>
 800a84e:	612a      	str	r2, [r5, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d102      	bne.n	800a85a <_printf_float+0x1b2>
 800a854:	6829      	ldr	r1, [r5, #0]
 800a856:	07c9      	lsls	r1, r1, #31
 800a858:	d50b      	bpl.n	800a872 <_printf_float+0x1ca>
 800a85a:	3301      	adds	r3, #1
 800a85c:	189b      	adds	r3, r3, r2
 800a85e:	612b      	str	r3, [r5, #16]
 800a860:	e007      	b.n	800a872 <_printf_float+0x1ca>
 800a862:	2b00      	cmp	r3, #0
 800a864:	d103      	bne.n	800a86e <_printf_float+0x1c6>
 800a866:	2201      	movs	r2, #1
 800a868:	6829      	ldr	r1, [r5, #0]
 800a86a:	4211      	tst	r1, r2
 800a86c:	d000      	beq.n	800a870 <_printf_float+0x1c8>
 800a86e:	1c9a      	adds	r2, r3, #2
 800a870:	612a      	str	r2, [r5, #16]
 800a872:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a874:	2400      	movs	r4, #0
 800a876:	65ab      	str	r3, [r5, #88]	@ 0x58
 800a878:	e7cd      	b.n	800a816 <_printf_float+0x16e>
 800a87a:	2367      	movs	r3, #103	@ 0x67
 800a87c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a87e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a880:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a882:	4299      	cmp	r1, r3
 800a884:	db06      	blt.n	800a894 <_printf_float+0x1ec>
 800a886:	682b      	ldr	r3, [r5, #0]
 800a888:	6129      	str	r1, [r5, #16]
 800a88a:	07db      	lsls	r3, r3, #31
 800a88c:	d5f1      	bpl.n	800a872 <_printf_float+0x1ca>
 800a88e:	3101      	adds	r1, #1
 800a890:	6129      	str	r1, [r5, #16]
 800a892:	e7ee      	b.n	800a872 <_printf_float+0x1ca>
 800a894:	2201      	movs	r2, #1
 800a896:	2900      	cmp	r1, #0
 800a898:	dce0      	bgt.n	800a85c <_printf_float+0x1b4>
 800a89a:	1892      	adds	r2, r2, r2
 800a89c:	1a52      	subs	r2, r2, r1
 800a89e:	e7dd      	b.n	800a85c <_printf_float+0x1b4>
 800a8a0:	682a      	ldr	r2, [r5, #0]
 800a8a2:	0553      	lsls	r3, r2, #21
 800a8a4:	d408      	bmi.n	800a8b8 <_printf_float+0x210>
 800a8a6:	692b      	ldr	r3, [r5, #16]
 800a8a8:	003a      	movs	r2, r7
 800a8aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8ae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a8b0:	47a0      	blx	r4
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	d129      	bne.n	800a90a <_printf_float+0x262>
 800a8b6:	e753      	b.n	800a760 <_printf_float+0xb8>
 800a8b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8ba:	2b65      	cmp	r3, #101	@ 0x65
 800a8bc:	d800      	bhi.n	800a8c0 <_printf_float+0x218>
 800a8be:	e0da      	b.n	800aa76 <_printf_float+0x3ce>
 800a8c0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a8c2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f7f5 fdca 	bl	8000460 <__aeabi_dcmpeq>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d033      	beq.n	800a938 <_printf_float+0x290>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	4a37      	ldr	r2, [pc, #220]	@ (800a9b0 <_printf_float+0x308>)
 800a8d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8d8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a8da:	47a0      	blx	r4
 800a8dc:	3001      	adds	r0, #1
 800a8de:	d100      	bne.n	800a8e2 <_printf_float+0x23a>
 800a8e0:	e73e      	b.n	800a760 <_printf_float+0xb8>
 800a8e2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a8e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a8e6:	42b3      	cmp	r3, r6
 800a8e8:	db02      	blt.n	800a8f0 <_printf_float+0x248>
 800a8ea:	682b      	ldr	r3, [r5, #0]
 800a8ec:	07db      	lsls	r3, r3, #31
 800a8ee:	d50c      	bpl.n	800a90a <_printf_float+0x262>
 800a8f0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a8f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a8f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8fa:	47a0      	blx	r4
 800a8fc:	2400      	movs	r4, #0
 800a8fe:	3001      	adds	r0, #1
 800a900:	d100      	bne.n	800a904 <_printf_float+0x25c>
 800a902:	e72d      	b.n	800a760 <_printf_float+0xb8>
 800a904:	1e73      	subs	r3, r6, #1
 800a906:	42a3      	cmp	r3, r4
 800a908:	dc0a      	bgt.n	800a920 <_printf_float+0x278>
 800a90a:	682b      	ldr	r3, [r5, #0]
 800a90c:	079b      	lsls	r3, r3, #30
 800a90e:	d500      	bpl.n	800a912 <_printf_float+0x26a>
 800a910:	e105      	b.n	800ab1e <_printf_float+0x476>
 800a912:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a914:	68e8      	ldr	r0, [r5, #12]
 800a916:	4298      	cmp	r0, r3
 800a918:	db00      	blt.n	800a91c <_printf_float+0x274>
 800a91a:	e723      	b.n	800a764 <_printf_float+0xbc>
 800a91c:	0018      	movs	r0, r3
 800a91e:	e721      	b.n	800a764 <_printf_float+0xbc>
 800a920:	002a      	movs	r2, r5
 800a922:	2301      	movs	r3, #1
 800a924:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a928:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a92a:	321a      	adds	r2, #26
 800a92c:	47b8      	blx	r7
 800a92e:	3001      	adds	r0, #1
 800a930:	d100      	bne.n	800a934 <_printf_float+0x28c>
 800a932:	e715      	b.n	800a760 <_printf_float+0xb8>
 800a934:	3401      	adds	r4, #1
 800a936:	e7e5      	b.n	800a904 <_printf_float+0x25c>
 800a938:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	dc3a      	bgt.n	800a9b4 <_printf_float+0x30c>
 800a93e:	2301      	movs	r3, #1
 800a940:	4a1b      	ldr	r2, [pc, #108]	@ (800a9b0 <_printf_float+0x308>)
 800a942:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a944:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a946:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a948:	47a0      	blx	r4
 800a94a:	3001      	adds	r0, #1
 800a94c:	d100      	bne.n	800a950 <_printf_float+0x2a8>
 800a94e:	e707      	b.n	800a760 <_printf_float+0xb8>
 800a950:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a952:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a954:	4333      	orrs	r3, r6
 800a956:	d102      	bne.n	800a95e <_printf_float+0x2b6>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	07db      	lsls	r3, r3, #31
 800a95c:	d5d5      	bpl.n	800a90a <_printf_float+0x262>
 800a95e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a960:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a962:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a964:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a966:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a968:	47a0      	blx	r4
 800a96a:	2300      	movs	r3, #0
 800a96c:	3001      	adds	r0, #1
 800a96e:	d100      	bne.n	800a972 <_printf_float+0x2ca>
 800a970:	e6f6      	b.n	800a760 <_printf_float+0xb8>
 800a972:	930c      	str	r3, [sp, #48]	@ 0x30
 800a974:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a976:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a978:	425b      	negs	r3, r3
 800a97a:	4293      	cmp	r3, r2
 800a97c:	dc01      	bgt.n	800a982 <_printf_float+0x2da>
 800a97e:	0033      	movs	r3, r6
 800a980:	e792      	b.n	800a8a8 <_printf_float+0x200>
 800a982:	002a      	movs	r2, r5
 800a984:	2301      	movs	r3, #1
 800a986:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a988:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a98a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a98c:	321a      	adds	r2, #26
 800a98e:	47a0      	blx	r4
 800a990:	3001      	adds	r0, #1
 800a992:	d100      	bne.n	800a996 <_printf_float+0x2ee>
 800a994:	e6e4      	b.n	800a760 <_printf_float+0xb8>
 800a996:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a998:	3301      	adds	r3, #1
 800a99a:	e7ea      	b.n	800a972 <_printf_float+0x2ca>
 800a99c:	7fefffff 	.word	0x7fefffff
 800a9a0:	0800ed60 	.word	0x0800ed60
 800a9a4:	0800ed64 	.word	0x0800ed64
 800a9a8:	0800ed68 	.word	0x0800ed68
 800a9ac:	0800ed6c 	.word	0x0800ed6c
 800a9b0:	0800f110 	.word	0x0800f110
 800a9b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a9b6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a9b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a9ba:	429e      	cmp	r6, r3
 800a9bc:	dd00      	ble.n	800a9c0 <_printf_float+0x318>
 800a9be:	001e      	movs	r6, r3
 800a9c0:	2e00      	cmp	r6, #0
 800a9c2:	dc31      	bgt.n	800aa28 <_printf_float+0x380>
 800a9c4:	43f3      	mvns	r3, r6
 800a9c6:	2400      	movs	r4, #0
 800a9c8:	17db      	asrs	r3, r3, #31
 800a9ca:	4033      	ands	r3, r6
 800a9cc:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9ce:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a9d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9d2:	1af3      	subs	r3, r6, r3
 800a9d4:	42a3      	cmp	r3, r4
 800a9d6:	dc30      	bgt.n	800aa3a <_printf_float+0x392>
 800a9d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a9da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	dc38      	bgt.n	800aa52 <_printf_float+0x3aa>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	07db      	lsls	r3, r3, #31
 800a9e4:	d435      	bmi.n	800aa52 <_printf_float+0x3aa>
 800a9e6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a9e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a9ec:	1b9b      	subs	r3, r3, r6
 800a9ee:	1b14      	subs	r4, r2, r4
 800a9f0:	429c      	cmp	r4, r3
 800a9f2:	dd00      	ble.n	800a9f6 <_printf_float+0x34e>
 800a9f4:	001c      	movs	r4, r3
 800a9f6:	2c00      	cmp	r4, #0
 800a9f8:	dc34      	bgt.n	800aa64 <_printf_float+0x3bc>
 800a9fa:	43e3      	mvns	r3, r4
 800a9fc:	2600      	movs	r6, #0
 800a9fe:	17db      	asrs	r3, r3, #31
 800aa00:	401c      	ands	r4, r3
 800aa02:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa04:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	1b1b      	subs	r3, r3, r4
 800aa0a:	42b3      	cmp	r3, r6
 800aa0c:	dc00      	bgt.n	800aa10 <_printf_float+0x368>
 800aa0e:	e77c      	b.n	800a90a <_printf_float+0x262>
 800aa10:	002a      	movs	r2, r5
 800aa12:	2301      	movs	r3, #1
 800aa14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa18:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800aa1a:	321a      	adds	r2, #26
 800aa1c:	47b8      	blx	r7
 800aa1e:	3001      	adds	r0, #1
 800aa20:	d100      	bne.n	800aa24 <_printf_float+0x37c>
 800aa22:	e69d      	b.n	800a760 <_printf_float+0xb8>
 800aa24:	3601      	adds	r6, #1
 800aa26:	e7ec      	b.n	800aa02 <_printf_float+0x35a>
 800aa28:	0033      	movs	r3, r6
 800aa2a:	003a      	movs	r2, r7
 800aa2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800aa32:	47a0      	blx	r4
 800aa34:	3001      	adds	r0, #1
 800aa36:	d1c5      	bne.n	800a9c4 <_printf_float+0x31c>
 800aa38:	e692      	b.n	800a760 <_printf_float+0xb8>
 800aa3a:	002a      	movs	r2, r5
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa42:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800aa44:	321a      	adds	r2, #26
 800aa46:	47b0      	blx	r6
 800aa48:	3001      	adds	r0, #1
 800aa4a:	d100      	bne.n	800aa4e <_printf_float+0x3a6>
 800aa4c:	e688      	b.n	800a760 <_printf_float+0xb8>
 800aa4e:	3401      	adds	r4, #1
 800aa50:	e7bd      	b.n	800a9ce <_printf_float+0x326>
 800aa52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aa56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa5a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800aa5c:	47a0      	blx	r4
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d1c1      	bne.n	800a9e6 <_printf_float+0x33e>
 800aa62:	e67d      	b.n	800a760 <_printf_float+0xb8>
 800aa64:	19ba      	adds	r2, r7, r6
 800aa66:	0023      	movs	r3, r4
 800aa68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa6c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800aa6e:	47b0      	blx	r6
 800aa70:	3001      	adds	r0, #1
 800aa72:	d1c2      	bne.n	800a9fa <_printf_float+0x352>
 800aa74:	e674      	b.n	800a760 <_printf_float+0xb8>
 800aa76:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aa78:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	dc02      	bgt.n	800aa84 <_printf_float+0x3dc>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	421a      	tst	r2, r3
 800aa82:	d039      	beq.n	800aaf8 <_printf_float+0x450>
 800aa84:	2301      	movs	r3, #1
 800aa86:	003a      	movs	r2, r7
 800aa88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa8c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800aa8e:	47b0      	blx	r6
 800aa90:	3001      	adds	r0, #1
 800aa92:	d100      	bne.n	800aa96 <_printf_float+0x3ee>
 800aa94:	e664      	b.n	800a760 <_printf_float+0xb8>
 800aa96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aa9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa9e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800aaa0:	47b0      	blx	r6
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	d100      	bne.n	800aaa8 <_printf_float+0x400>
 800aaa6:	e65b      	b.n	800a760 <_printf_float+0xb8>
 800aaa8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800aaaa:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800aaac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aaae:	2200      	movs	r2, #0
 800aab0:	3b01      	subs	r3, #1
 800aab2:	930c      	str	r3, [sp, #48]	@ 0x30
 800aab4:	2300      	movs	r3, #0
 800aab6:	f7f5 fcd3 	bl	8000460 <__aeabi_dcmpeq>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d11a      	bne.n	800aaf4 <_printf_float+0x44c>
 800aabe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aac0:	1c7a      	adds	r2, r7, #1
 800aac2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aac4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aac6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800aac8:	47b0      	blx	r6
 800aaca:	3001      	adds	r0, #1
 800aacc:	d10e      	bne.n	800aaec <_printf_float+0x444>
 800aace:	e647      	b.n	800a760 <_printf_float+0xb8>
 800aad0:	002a      	movs	r2, r5
 800aad2:	2301      	movs	r3, #1
 800aad4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aad8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800aada:	321a      	adds	r2, #26
 800aadc:	47b8      	blx	r7
 800aade:	3001      	adds	r0, #1
 800aae0:	d100      	bne.n	800aae4 <_printf_float+0x43c>
 800aae2:	e63d      	b.n	800a760 <_printf_float+0xb8>
 800aae4:	3601      	adds	r6, #1
 800aae6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aae8:	429e      	cmp	r6, r3
 800aaea:	dbf1      	blt.n	800aad0 <_printf_float+0x428>
 800aaec:	002a      	movs	r2, r5
 800aaee:	0023      	movs	r3, r4
 800aaf0:	3250      	adds	r2, #80	@ 0x50
 800aaf2:	e6da      	b.n	800a8aa <_printf_float+0x202>
 800aaf4:	2600      	movs	r6, #0
 800aaf6:	e7f6      	b.n	800aae6 <_printf_float+0x43e>
 800aaf8:	003a      	movs	r2, r7
 800aafa:	e7e2      	b.n	800aac2 <_printf_float+0x41a>
 800aafc:	002a      	movs	r2, r5
 800aafe:	2301      	movs	r3, #1
 800ab00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab04:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ab06:	3219      	adds	r2, #25
 800ab08:	47b0      	blx	r6
 800ab0a:	3001      	adds	r0, #1
 800ab0c:	d100      	bne.n	800ab10 <_printf_float+0x468>
 800ab0e:	e627      	b.n	800a760 <_printf_float+0xb8>
 800ab10:	3401      	adds	r4, #1
 800ab12:	68eb      	ldr	r3, [r5, #12]
 800ab14:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ab16:	1a9b      	subs	r3, r3, r2
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	dcef      	bgt.n	800aafc <_printf_float+0x454>
 800ab1c:	e6f9      	b.n	800a912 <_printf_float+0x26a>
 800ab1e:	2400      	movs	r4, #0
 800ab20:	e7f7      	b.n	800ab12 <_printf_float+0x46a>
 800ab22:	46c0      	nop			@ (mov r8, r8)

0800ab24 <_printf_common>:
 800ab24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab26:	0016      	movs	r6, r2
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	688a      	ldr	r2, [r1, #8]
 800ab2c:	690b      	ldr	r3, [r1, #16]
 800ab2e:	000c      	movs	r4, r1
 800ab30:	9000      	str	r0, [sp, #0]
 800ab32:	4293      	cmp	r3, r2
 800ab34:	da00      	bge.n	800ab38 <_printf_common+0x14>
 800ab36:	0013      	movs	r3, r2
 800ab38:	0022      	movs	r2, r4
 800ab3a:	6033      	str	r3, [r6, #0]
 800ab3c:	3243      	adds	r2, #67	@ 0x43
 800ab3e:	7812      	ldrb	r2, [r2, #0]
 800ab40:	2a00      	cmp	r2, #0
 800ab42:	d001      	beq.n	800ab48 <_printf_common+0x24>
 800ab44:	3301      	adds	r3, #1
 800ab46:	6033      	str	r3, [r6, #0]
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	069b      	lsls	r3, r3, #26
 800ab4c:	d502      	bpl.n	800ab54 <_printf_common+0x30>
 800ab4e:	6833      	ldr	r3, [r6, #0]
 800ab50:	3302      	adds	r3, #2
 800ab52:	6033      	str	r3, [r6, #0]
 800ab54:	6822      	ldr	r2, [r4, #0]
 800ab56:	2306      	movs	r3, #6
 800ab58:	0015      	movs	r5, r2
 800ab5a:	401d      	ands	r5, r3
 800ab5c:	421a      	tst	r2, r3
 800ab5e:	d027      	beq.n	800abb0 <_printf_common+0x8c>
 800ab60:	0023      	movs	r3, r4
 800ab62:	3343      	adds	r3, #67	@ 0x43
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	1e5a      	subs	r2, r3, #1
 800ab68:	4193      	sbcs	r3, r2
 800ab6a:	6822      	ldr	r2, [r4, #0]
 800ab6c:	0692      	lsls	r2, r2, #26
 800ab6e:	d430      	bmi.n	800abd2 <_printf_common+0xae>
 800ab70:	0022      	movs	r2, r4
 800ab72:	9901      	ldr	r1, [sp, #4]
 800ab74:	9800      	ldr	r0, [sp, #0]
 800ab76:	9d08      	ldr	r5, [sp, #32]
 800ab78:	3243      	adds	r2, #67	@ 0x43
 800ab7a:	47a8      	blx	r5
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	d025      	beq.n	800abcc <_printf_common+0xa8>
 800ab80:	2206      	movs	r2, #6
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	2500      	movs	r5, #0
 800ab86:	4013      	ands	r3, r2
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	d105      	bne.n	800ab98 <_printf_common+0x74>
 800ab8c:	6833      	ldr	r3, [r6, #0]
 800ab8e:	68e5      	ldr	r5, [r4, #12]
 800ab90:	1aed      	subs	r5, r5, r3
 800ab92:	43eb      	mvns	r3, r5
 800ab94:	17db      	asrs	r3, r3, #31
 800ab96:	401d      	ands	r5, r3
 800ab98:	68a3      	ldr	r3, [r4, #8]
 800ab9a:	6922      	ldr	r2, [r4, #16]
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	dd01      	ble.n	800aba4 <_printf_common+0x80>
 800aba0:	1a9b      	subs	r3, r3, r2
 800aba2:	18ed      	adds	r5, r5, r3
 800aba4:	2600      	movs	r6, #0
 800aba6:	42b5      	cmp	r5, r6
 800aba8:	d120      	bne.n	800abec <_printf_common+0xc8>
 800abaa:	2000      	movs	r0, #0
 800abac:	e010      	b.n	800abd0 <_printf_common+0xac>
 800abae:	3501      	adds	r5, #1
 800abb0:	68e3      	ldr	r3, [r4, #12]
 800abb2:	6832      	ldr	r2, [r6, #0]
 800abb4:	1a9b      	subs	r3, r3, r2
 800abb6:	42ab      	cmp	r3, r5
 800abb8:	ddd2      	ble.n	800ab60 <_printf_common+0x3c>
 800abba:	0022      	movs	r2, r4
 800abbc:	2301      	movs	r3, #1
 800abbe:	9901      	ldr	r1, [sp, #4]
 800abc0:	9800      	ldr	r0, [sp, #0]
 800abc2:	9f08      	ldr	r7, [sp, #32]
 800abc4:	3219      	adds	r2, #25
 800abc6:	47b8      	blx	r7
 800abc8:	3001      	adds	r0, #1
 800abca:	d1f0      	bne.n	800abae <_printf_common+0x8a>
 800abcc:	2001      	movs	r0, #1
 800abce:	4240      	negs	r0, r0
 800abd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800abd2:	2030      	movs	r0, #48	@ 0x30
 800abd4:	18e1      	adds	r1, r4, r3
 800abd6:	3143      	adds	r1, #67	@ 0x43
 800abd8:	7008      	strb	r0, [r1, #0]
 800abda:	0021      	movs	r1, r4
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	3145      	adds	r1, #69	@ 0x45
 800abe0:	7809      	ldrb	r1, [r1, #0]
 800abe2:	18a2      	adds	r2, r4, r2
 800abe4:	3243      	adds	r2, #67	@ 0x43
 800abe6:	3302      	adds	r3, #2
 800abe8:	7011      	strb	r1, [r2, #0]
 800abea:	e7c1      	b.n	800ab70 <_printf_common+0x4c>
 800abec:	0022      	movs	r2, r4
 800abee:	2301      	movs	r3, #1
 800abf0:	9901      	ldr	r1, [sp, #4]
 800abf2:	9800      	ldr	r0, [sp, #0]
 800abf4:	9f08      	ldr	r7, [sp, #32]
 800abf6:	321a      	adds	r2, #26
 800abf8:	47b8      	blx	r7
 800abfa:	3001      	adds	r0, #1
 800abfc:	d0e6      	beq.n	800abcc <_printf_common+0xa8>
 800abfe:	3601      	adds	r6, #1
 800ac00:	e7d1      	b.n	800aba6 <_printf_common+0x82>
	...

0800ac04 <_printf_i>:
 800ac04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac06:	b08b      	sub	sp, #44	@ 0x2c
 800ac08:	9206      	str	r2, [sp, #24]
 800ac0a:	000a      	movs	r2, r1
 800ac0c:	3243      	adds	r2, #67	@ 0x43
 800ac0e:	9307      	str	r3, [sp, #28]
 800ac10:	9005      	str	r0, [sp, #20]
 800ac12:	9203      	str	r2, [sp, #12]
 800ac14:	7e0a      	ldrb	r2, [r1, #24]
 800ac16:	000c      	movs	r4, r1
 800ac18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac1a:	2a78      	cmp	r2, #120	@ 0x78
 800ac1c:	d809      	bhi.n	800ac32 <_printf_i+0x2e>
 800ac1e:	2a62      	cmp	r2, #98	@ 0x62
 800ac20:	d80b      	bhi.n	800ac3a <_printf_i+0x36>
 800ac22:	2a00      	cmp	r2, #0
 800ac24:	d100      	bne.n	800ac28 <_printf_i+0x24>
 800ac26:	e0bc      	b.n	800ada2 <_printf_i+0x19e>
 800ac28:	497b      	ldr	r1, [pc, #492]	@ (800ae18 <_printf_i+0x214>)
 800ac2a:	9104      	str	r1, [sp, #16]
 800ac2c:	2a58      	cmp	r2, #88	@ 0x58
 800ac2e:	d100      	bne.n	800ac32 <_printf_i+0x2e>
 800ac30:	e090      	b.n	800ad54 <_printf_i+0x150>
 800ac32:	0025      	movs	r5, r4
 800ac34:	3542      	adds	r5, #66	@ 0x42
 800ac36:	702a      	strb	r2, [r5, #0]
 800ac38:	e022      	b.n	800ac80 <_printf_i+0x7c>
 800ac3a:	0010      	movs	r0, r2
 800ac3c:	3863      	subs	r0, #99	@ 0x63
 800ac3e:	2815      	cmp	r0, #21
 800ac40:	d8f7      	bhi.n	800ac32 <_printf_i+0x2e>
 800ac42:	f7f5 fa7d 	bl	8000140 <__gnu_thumb1_case_shi>
 800ac46:	0016      	.short	0x0016
 800ac48:	fff6001f 	.word	0xfff6001f
 800ac4c:	fff6fff6 	.word	0xfff6fff6
 800ac50:	001ffff6 	.word	0x001ffff6
 800ac54:	fff6fff6 	.word	0xfff6fff6
 800ac58:	fff6fff6 	.word	0xfff6fff6
 800ac5c:	003600a1 	.word	0x003600a1
 800ac60:	fff60080 	.word	0xfff60080
 800ac64:	00b2fff6 	.word	0x00b2fff6
 800ac68:	0036fff6 	.word	0x0036fff6
 800ac6c:	fff6fff6 	.word	0xfff6fff6
 800ac70:	0084      	.short	0x0084
 800ac72:	0025      	movs	r5, r4
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	3542      	adds	r5, #66	@ 0x42
 800ac78:	1d11      	adds	r1, r2, #4
 800ac7a:	6019      	str	r1, [r3, #0]
 800ac7c:	6813      	ldr	r3, [r2, #0]
 800ac7e:	702b      	strb	r3, [r5, #0]
 800ac80:	2301      	movs	r3, #1
 800ac82:	e0a0      	b.n	800adc6 <_printf_i+0x1c2>
 800ac84:	6818      	ldr	r0, [r3, #0]
 800ac86:	6809      	ldr	r1, [r1, #0]
 800ac88:	1d02      	adds	r2, r0, #4
 800ac8a:	060d      	lsls	r5, r1, #24
 800ac8c:	d50b      	bpl.n	800aca6 <_printf_i+0xa2>
 800ac8e:	6806      	ldr	r6, [r0, #0]
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	2e00      	cmp	r6, #0
 800ac94:	da03      	bge.n	800ac9e <_printf_i+0x9a>
 800ac96:	232d      	movs	r3, #45	@ 0x2d
 800ac98:	9a03      	ldr	r2, [sp, #12]
 800ac9a:	4276      	negs	r6, r6
 800ac9c:	7013      	strb	r3, [r2, #0]
 800ac9e:	4b5e      	ldr	r3, [pc, #376]	@ (800ae18 <_printf_i+0x214>)
 800aca0:	270a      	movs	r7, #10
 800aca2:	9304      	str	r3, [sp, #16]
 800aca4:	e018      	b.n	800acd8 <_printf_i+0xd4>
 800aca6:	6806      	ldr	r6, [r0, #0]
 800aca8:	601a      	str	r2, [r3, #0]
 800acaa:	0649      	lsls	r1, r1, #25
 800acac:	d5f1      	bpl.n	800ac92 <_printf_i+0x8e>
 800acae:	b236      	sxth	r6, r6
 800acb0:	e7ef      	b.n	800ac92 <_printf_i+0x8e>
 800acb2:	6808      	ldr	r0, [r1, #0]
 800acb4:	6819      	ldr	r1, [r3, #0]
 800acb6:	c940      	ldmia	r1!, {r6}
 800acb8:	0605      	lsls	r5, r0, #24
 800acba:	d402      	bmi.n	800acc2 <_printf_i+0xbe>
 800acbc:	0640      	lsls	r0, r0, #25
 800acbe:	d500      	bpl.n	800acc2 <_printf_i+0xbe>
 800acc0:	b2b6      	uxth	r6, r6
 800acc2:	6019      	str	r1, [r3, #0]
 800acc4:	4b54      	ldr	r3, [pc, #336]	@ (800ae18 <_printf_i+0x214>)
 800acc6:	270a      	movs	r7, #10
 800acc8:	9304      	str	r3, [sp, #16]
 800acca:	2a6f      	cmp	r2, #111	@ 0x6f
 800accc:	d100      	bne.n	800acd0 <_printf_i+0xcc>
 800acce:	3f02      	subs	r7, #2
 800acd0:	0023      	movs	r3, r4
 800acd2:	2200      	movs	r2, #0
 800acd4:	3343      	adds	r3, #67	@ 0x43
 800acd6:	701a      	strb	r2, [r3, #0]
 800acd8:	6863      	ldr	r3, [r4, #4]
 800acda:	60a3      	str	r3, [r4, #8]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	db03      	blt.n	800ace8 <_printf_i+0xe4>
 800ace0:	2104      	movs	r1, #4
 800ace2:	6822      	ldr	r2, [r4, #0]
 800ace4:	438a      	bics	r2, r1
 800ace6:	6022      	str	r2, [r4, #0]
 800ace8:	2e00      	cmp	r6, #0
 800acea:	d102      	bne.n	800acf2 <_printf_i+0xee>
 800acec:	9d03      	ldr	r5, [sp, #12]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00c      	beq.n	800ad0c <_printf_i+0x108>
 800acf2:	9d03      	ldr	r5, [sp, #12]
 800acf4:	0030      	movs	r0, r6
 800acf6:	0039      	movs	r1, r7
 800acf8:	f7f5 fab2 	bl	8000260 <__aeabi_uidivmod>
 800acfc:	9b04      	ldr	r3, [sp, #16]
 800acfe:	3d01      	subs	r5, #1
 800ad00:	5c5b      	ldrb	r3, [r3, r1]
 800ad02:	702b      	strb	r3, [r5, #0]
 800ad04:	0033      	movs	r3, r6
 800ad06:	0006      	movs	r6, r0
 800ad08:	429f      	cmp	r7, r3
 800ad0a:	d9f3      	bls.n	800acf4 <_printf_i+0xf0>
 800ad0c:	2f08      	cmp	r7, #8
 800ad0e:	d109      	bne.n	800ad24 <_printf_i+0x120>
 800ad10:	6823      	ldr	r3, [r4, #0]
 800ad12:	07db      	lsls	r3, r3, #31
 800ad14:	d506      	bpl.n	800ad24 <_printf_i+0x120>
 800ad16:	6862      	ldr	r2, [r4, #4]
 800ad18:	6923      	ldr	r3, [r4, #16]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	dc02      	bgt.n	800ad24 <_printf_i+0x120>
 800ad1e:	2330      	movs	r3, #48	@ 0x30
 800ad20:	3d01      	subs	r5, #1
 800ad22:	702b      	strb	r3, [r5, #0]
 800ad24:	9b03      	ldr	r3, [sp, #12]
 800ad26:	1b5b      	subs	r3, r3, r5
 800ad28:	6123      	str	r3, [r4, #16]
 800ad2a:	9b07      	ldr	r3, [sp, #28]
 800ad2c:	0021      	movs	r1, r4
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	9805      	ldr	r0, [sp, #20]
 800ad32:	9b06      	ldr	r3, [sp, #24]
 800ad34:	aa09      	add	r2, sp, #36	@ 0x24
 800ad36:	f7ff fef5 	bl	800ab24 <_printf_common>
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	d148      	bne.n	800add0 <_printf_i+0x1cc>
 800ad3e:	2001      	movs	r0, #1
 800ad40:	4240      	negs	r0, r0
 800ad42:	b00b      	add	sp, #44	@ 0x2c
 800ad44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad46:	2220      	movs	r2, #32
 800ad48:	6809      	ldr	r1, [r1, #0]
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	6022      	str	r2, [r4, #0]
 800ad4e:	2278      	movs	r2, #120	@ 0x78
 800ad50:	4932      	ldr	r1, [pc, #200]	@ (800ae1c <_printf_i+0x218>)
 800ad52:	9104      	str	r1, [sp, #16]
 800ad54:	0021      	movs	r1, r4
 800ad56:	3145      	adds	r1, #69	@ 0x45
 800ad58:	700a      	strb	r2, [r1, #0]
 800ad5a:	6819      	ldr	r1, [r3, #0]
 800ad5c:	6822      	ldr	r2, [r4, #0]
 800ad5e:	c940      	ldmia	r1!, {r6}
 800ad60:	0610      	lsls	r0, r2, #24
 800ad62:	d402      	bmi.n	800ad6a <_printf_i+0x166>
 800ad64:	0650      	lsls	r0, r2, #25
 800ad66:	d500      	bpl.n	800ad6a <_printf_i+0x166>
 800ad68:	b2b6      	uxth	r6, r6
 800ad6a:	6019      	str	r1, [r3, #0]
 800ad6c:	07d3      	lsls	r3, r2, #31
 800ad6e:	d502      	bpl.n	800ad76 <_printf_i+0x172>
 800ad70:	2320      	movs	r3, #32
 800ad72:	4313      	orrs	r3, r2
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	2e00      	cmp	r6, #0
 800ad78:	d001      	beq.n	800ad7e <_printf_i+0x17a>
 800ad7a:	2710      	movs	r7, #16
 800ad7c:	e7a8      	b.n	800acd0 <_printf_i+0xcc>
 800ad7e:	2220      	movs	r2, #32
 800ad80:	6823      	ldr	r3, [r4, #0]
 800ad82:	4393      	bics	r3, r2
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	e7f8      	b.n	800ad7a <_printf_i+0x176>
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	680d      	ldr	r5, [r1, #0]
 800ad8c:	1d10      	adds	r0, r2, #4
 800ad8e:	6949      	ldr	r1, [r1, #20]
 800ad90:	6018      	str	r0, [r3, #0]
 800ad92:	6813      	ldr	r3, [r2, #0]
 800ad94:	062e      	lsls	r6, r5, #24
 800ad96:	d501      	bpl.n	800ad9c <_printf_i+0x198>
 800ad98:	6019      	str	r1, [r3, #0]
 800ad9a:	e002      	b.n	800ada2 <_printf_i+0x19e>
 800ad9c:	066d      	lsls	r5, r5, #25
 800ad9e:	d5fb      	bpl.n	800ad98 <_printf_i+0x194>
 800ada0:	8019      	strh	r1, [r3, #0]
 800ada2:	2300      	movs	r3, #0
 800ada4:	9d03      	ldr	r5, [sp, #12]
 800ada6:	6123      	str	r3, [r4, #16]
 800ada8:	e7bf      	b.n	800ad2a <_printf_i+0x126>
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	1d11      	adds	r1, r2, #4
 800adae:	6019      	str	r1, [r3, #0]
 800adb0:	6815      	ldr	r5, [r2, #0]
 800adb2:	2100      	movs	r1, #0
 800adb4:	0028      	movs	r0, r5
 800adb6:	6862      	ldr	r2, [r4, #4]
 800adb8:	f000 fd6b 	bl	800b892 <memchr>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d001      	beq.n	800adc4 <_printf_i+0x1c0>
 800adc0:	1b40      	subs	r0, r0, r5
 800adc2:	6060      	str	r0, [r4, #4]
 800adc4:	6863      	ldr	r3, [r4, #4]
 800adc6:	6123      	str	r3, [r4, #16]
 800adc8:	2300      	movs	r3, #0
 800adca:	9a03      	ldr	r2, [sp, #12]
 800adcc:	7013      	strb	r3, [r2, #0]
 800adce:	e7ac      	b.n	800ad2a <_printf_i+0x126>
 800add0:	002a      	movs	r2, r5
 800add2:	6923      	ldr	r3, [r4, #16]
 800add4:	9906      	ldr	r1, [sp, #24]
 800add6:	9805      	ldr	r0, [sp, #20]
 800add8:	9d07      	ldr	r5, [sp, #28]
 800adda:	47a8      	blx	r5
 800addc:	3001      	adds	r0, #1
 800adde:	d0ae      	beq.n	800ad3e <_printf_i+0x13a>
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	079b      	lsls	r3, r3, #30
 800ade4:	d415      	bmi.n	800ae12 <_printf_i+0x20e>
 800ade6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ade8:	68e0      	ldr	r0, [r4, #12]
 800adea:	4298      	cmp	r0, r3
 800adec:	daa9      	bge.n	800ad42 <_printf_i+0x13e>
 800adee:	0018      	movs	r0, r3
 800adf0:	e7a7      	b.n	800ad42 <_printf_i+0x13e>
 800adf2:	0022      	movs	r2, r4
 800adf4:	2301      	movs	r3, #1
 800adf6:	9906      	ldr	r1, [sp, #24]
 800adf8:	9805      	ldr	r0, [sp, #20]
 800adfa:	9e07      	ldr	r6, [sp, #28]
 800adfc:	3219      	adds	r2, #25
 800adfe:	47b0      	blx	r6
 800ae00:	3001      	adds	r0, #1
 800ae02:	d09c      	beq.n	800ad3e <_printf_i+0x13a>
 800ae04:	3501      	adds	r5, #1
 800ae06:	68e3      	ldr	r3, [r4, #12]
 800ae08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae0a:	1a9b      	subs	r3, r3, r2
 800ae0c:	42ab      	cmp	r3, r5
 800ae0e:	dcf0      	bgt.n	800adf2 <_printf_i+0x1ee>
 800ae10:	e7e9      	b.n	800ade6 <_printf_i+0x1e2>
 800ae12:	2500      	movs	r5, #0
 800ae14:	e7f7      	b.n	800ae06 <_printf_i+0x202>
 800ae16:	46c0      	nop			@ (mov r8, r8)
 800ae18:	0800ed70 	.word	0x0800ed70
 800ae1c:	0800ed81 	.word	0x0800ed81

0800ae20 <_scanf_float>:
 800ae20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae22:	b08b      	sub	sp, #44	@ 0x2c
 800ae24:	0016      	movs	r6, r2
 800ae26:	9003      	str	r0, [sp, #12]
 800ae28:	22ae      	movs	r2, #174	@ 0xae
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	9307      	str	r3, [sp, #28]
 800ae2e:	688b      	ldr	r3, [r1, #8]
 800ae30:	000c      	movs	r4, r1
 800ae32:	1e59      	subs	r1, r3, #1
 800ae34:	0052      	lsls	r2, r2, #1
 800ae36:	9006      	str	r0, [sp, #24]
 800ae38:	4291      	cmp	r1, r2
 800ae3a:	d905      	bls.n	800ae48 <_scanf_float+0x28>
 800ae3c:	3b5e      	subs	r3, #94	@ 0x5e
 800ae3e:	3bff      	subs	r3, #255	@ 0xff
 800ae40:	9306      	str	r3, [sp, #24]
 800ae42:	235e      	movs	r3, #94	@ 0x5e
 800ae44:	33ff      	adds	r3, #255	@ 0xff
 800ae46:	60a3      	str	r3, [r4, #8]
 800ae48:	23f0      	movs	r3, #240	@ 0xf0
 800ae4a:	6822      	ldr	r2, [r4, #0]
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	0023      	movs	r3, r4
 800ae54:	2500      	movs	r5, #0
 800ae56:	331c      	adds	r3, #28
 800ae58:	001f      	movs	r7, r3
 800ae5a:	9304      	str	r3, [sp, #16]
 800ae5c:	9502      	str	r5, [sp, #8]
 800ae5e:	9509      	str	r5, [sp, #36]	@ 0x24
 800ae60:	9508      	str	r5, [sp, #32]
 800ae62:	9501      	str	r5, [sp, #4]
 800ae64:	9505      	str	r5, [sp, #20]
 800ae66:	68a2      	ldr	r2, [r4, #8]
 800ae68:	2a00      	cmp	r2, #0
 800ae6a:	d00a      	beq.n	800ae82 <_scanf_float+0x62>
 800ae6c:	6833      	ldr	r3, [r6, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	2b4e      	cmp	r3, #78	@ 0x4e
 800ae72:	d844      	bhi.n	800aefe <_scanf_float+0xde>
 800ae74:	0018      	movs	r0, r3
 800ae76:	2b40      	cmp	r3, #64	@ 0x40
 800ae78:	d82c      	bhi.n	800aed4 <_scanf_float+0xb4>
 800ae7a:	382b      	subs	r0, #43	@ 0x2b
 800ae7c:	b2c1      	uxtb	r1, r0
 800ae7e:	290e      	cmp	r1, #14
 800ae80:	d92a      	bls.n	800aed8 <_scanf_float+0xb8>
 800ae82:	9b01      	ldr	r3, [sp, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d003      	beq.n	800ae90 <_scanf_float+0x70>
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	4aa6      	ldr	r2, [pc, #664]	@ (800b124 <_scanf_float+0x304>)
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	6023      	str	r3, [r4, #0]
 800ae90:	9b02      	ldr	r3, [sp, #8]
 800ae92:	3b01      	subs	r3, #1
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d900      	bls.n	800ae9a <_scanf_float+0x7a>
 800ae98:	e0fe      	b.n	800b098 <_scanf_float+0x278>
 800ae9a:	25be      	movs	r5, #190	@ 0xbe
 800ae9c:	006d      	lsls	r5, r5, #1
 800ae9e:	9b04      	ldr	r3, [sp, #16]
 800aea0:	429f      	cmp	r7, r3
 800aea2:	d900      	bls.n	800aea6 <_scanf_float+0x86>
 800aea4:	e0ee      	b.n	800b084 <_scanf_float+0x264>
 800aea6:	2001      	movs	r0, #1
 800aea8:	b00b      	add	sp, #44	@ 0x2c
 800aeaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeac:	0018      	movs	r0, r3
 800aeae:	3861      	subs	r0, #97	@ 0x61
 800aeb0:	280d      	cmp	r0, #13
 800aeb2:	d8e6      	bhi.n	800ae82 <_scanf_float+0x62>
 800aeb4:	f7f5 f944 	bl	8000140 <__gnu_thumb1_case_shi>
 800aeb8:	ffe50089 	.word	0xffe50089
 800aebc:	ffe5ffe5 	.word	0xffe5ffe5
 800aec0:	00a700bb 	.word	0x00a700bb
 800aec4:	ffe5ffe5 	.word	0xffe5ffe5
 800aec8:	ffe5008f 	.word	0xffe5008f
 800aecc:	ffe5ffe5 	.word	0xffe5ffe5
 800aed0:	006bffe5 	.word	0x006bffe5
 800aed4:	3841      	subs	r0, #65	@ 0x41
 800aed6:	e7eb      	b.n	800aeb0 <_scanf_float+0x90>
 800aed8:	280e      	cmp	r0, #14
 800aeda:	d8d2      	bhi.n	800ae82 <_scanf_float+0x62>
 800aedc:	f7f5 f930 	bl	8000140 <__gnu_thumb1_case_shi>
 800aee0:	ffd1004f 	.word	0xffd1004f
 800aee4:	009d004f 	.word	0x009d004f
 800aee8:	0021ffd1 	.word	0x0021ffd1
 800aeec:	00410041 	.word	0x00410041
 800aef0:	00410041 	.word	0x00410041
 800aef4:	00410041 	.word	0x00410041
 800aef8:	00410041 	.word	0x00410041
 800aefc:	0041      	.short	0x0041
 800aefe:	2b6e      	cmp	r3, #110	@ 0x6e
 800af00:	d80a      	bhi.n	800af18 <_scanf_float+0xf8>
 800af02:	2b60      	cmp	r3, #96	@ 0x60
 800af04:	d8d2      	bhi.n	800aeac <_scanf_float+0x8c>
 800af06:	2b54      	cmp	r3, #84	@ 0x54
 800af08:	d100      	bne.n	800af0c <_scanf_float+0xec>
 800af0a:	e081      	b.n	800b010 <_scanf_float+0x1f0>
 800af0c:	2b59      	cmp	r3, #89	@ 0x59
 800af0e:	d1b8      	bne.n	800ae82 <_scanf_float+0x62>
 800af10:	2d07      	cmp	r5, #7
 800af12:	d1b6      	bne.n	800ae82 <_scanf_float+0x62>
 800af14:	2508      	movs	r5, #8
 800af16:	e02f      	b.n	800af78 <_scanf_float+0x158>
 800af18:	2b74      	cmp	r3, #116	@ 0x74
 800af1a:	d079      	beq.n	800b010 <_scanf_float+0x1f0>
 800af1c:	2b79      	cmp	r3, #121	@ 0x79
 800af1e:	d0f7      	beq.n	800af10 <_scanf_float+0xf0>
 800af20:	e7af      	b.n	800ae82 <_scanf_float+0x62>
 800af22:	6821      	ldr	r1, [r4, #0]
 800af24:	05c8      	lsls	r0, r1, #23
 800af26:	d51c      	bpl.n	800af62 <_scanf_float+0x142>
 800af28:	2380      	movs	r3, #128	@ 0x80
 800af2a:	4399      	bics	r1, r3
 800af2c:	9b01      	ldr	r3, [sp, #4]
 800af2e:	6021      	str	r1, [r4, #0]
 800af30:	3301      	adds	r3, #1
 800af32:	9301      	str	r3, [sp, #4]
 800af34:	9b06      	ldr	r3, [sp, #24]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d003      	beq.n	800af42 <_scanf_float+0x122>
 800af3a:	3b01      	subs	r3, #1
 800af3c:	3201      	adds	r2, #1
 800af3e:	9306      	str	r3, [sp, #24]
 800af40:	60a2      	str	r2, [r4, #8]
 800af42:	68a3      	ldr	r3, [r4, #8]
 800af44:	3b01      	subs	r3, #1
 800af46:	60a3      	str	r3, [r4, #8]
 800af48:	6923      	ldr	r3, [r4, #16]
 800af4a:	3301      	adds	r3, #1
 800af4c:	6123      	str	r3, [r4, #16]
 800af4e:	6873      	ldr	r3, [r6, #4]
 800af50:	3b01      	subs	r3, #1
 800af52:	6073      	str	r3, [r6, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	dc00      	bgt.n	800af5a <_scanf_float+0x13a>
 800af58:	e08a      	b.n	800b070 <_scanf_float+0x250>
 800af5a:	6833      	ldr	r3, [r6, #0]
 800af5c:	3301      	adds	r3, #1
 800af5e:	6033      	str	r3, [r6, #0]
 800af60:	e781      	b.n	800ae66 <_scanf_float+0x46>
 800af62:	9a02      	ldr	r2, [sp, #8]
 800af64:	1951      	adds	r1, r2, r5
 800af66:	2900      	cmp	r1, #0
 800af68:	d000      	beq.n	800af6c <_scanf_float+0x14c>
 800af6a:	e78a      	b.n	800ae82 <_scanf_float+0x62>
 800af6c:	000d      	movs	r5, r1
 800af6e:	6822      	ldr	r2, [r4, #0]
 800af70:	486d      	ldr	r0, [pc, #436]	@ (800b128 <_scanf_float+0x308>)
 800af72:	9102      	str	r1, [sp, #8]
 800af74:	4002      	ands	r2, r0
 800af76:	6022      	str	r2, [r4, #0]
 800af78:	703b      	strb	r3, [r7, #0]
 800af7a:	3701      	adds	r7, #1
 800af7c:	e7e1      	b.n	800af42 <_scanf_float+0x122>
 800af7e:	2180      	movs	r1, #128	@ 0x80
 800af80:	6822      	ldr	r2, [r4, #0]
 800af82:	420a      	tst	r2, r1
 800af84:	d100      	bne.n	800af88 <_scanf_float+0x168>
 800af86:	e77c      	b.n	800ae82 <_scanf_float+0x62>
 800af88:	438a      	bics	r2, r1
 800af8a:	6022      	str	r2, [r4, #0]
 800af8c:	e7f4      	b.n	800af78 <_scanf_float+0x158>
 800af8e:	9a02      	ldr	r2, [sp, #8]
 800af90:	2a00      	cmp	r2, #0
 800af92:	d10f      	bne.n	800afb4 <_scanf_float+0x194>
 800af94:	9a01      	ldr	r2, [sp, #4]
 800af96:	2a00      	cmp	r2, #0
 800af98:	d10f      	bne.n	800afba <_scanf_float+0x19a>
 800af9a:	6822      	ldr	r2, [r4, #0]
 800af9c:	21e0      	movs	r1, #224	@ 0xe0
 800af9e:	0010      	movs	r0, r2
 800afa0:	00c9      	lsls	r1, r1, #3
 800afa2:	4008      	ands	r0, r1
 800afa4:	4288      	cmp	r0, r1
 800afa6:	d108      	bne.n	800afba <_scanf_float+0x19a>
 800afa8:	4960      	ldr	r1, [pc, #384]	@ (800b12c <_scanf_float+0x30c>)
 800afaa:	400a      	ands	r2, r1
 800afac:	6022      	str	r2, [r4, #0]
 800afae:	2201      	movs	r2, #1
 800afb0:	9202      	str	r2, [sp, #8]
 800afb2:	e7e1      	b.n	800af78 <_scanf_float+0x158>
 800afb4:	9a02      	ldr	r2, [sp, #8]
 800afb6:	2a02      	cmp	r2, #2
 800afb8:	d058      	beq.n	800b06c <_scanf_float+0x24c>
 800afba:	2d01      	cmp	r5, #1
 800afbc:	d002      	beq.n	800afc4 <_scanf_float+0x1a4>
 800afbe:	2d04      	cmp	r5, #4
 800afc0:	d000      	beq.n	800afc4 <_scanf_float+0x1a4>
 800afc2:	e75e      	b.n	800ae82 <_scanf_float+0x62>
 800afc4:	3501      	adds	r5, #1
 800afc6:	b2ed      	uxtb	r5, r5
 800afc8:	e7d6      	b.n	800af78 <_scanf_float+0x158>
 800afca:	9a02      	ldr	r2, [sp, #8]
 800afcc:	2a01      	cmp	r2, #1
 800afce:	d000      	beq.n	800afd2 <_scanf_float+0x1b2>
 800afd0:	e757      	b.n	800ae82 <_scanf_float+0x62>
 800afd2:	2202      	movs	r2, #2
 800afd4:	e7ec      	b.n	800afb0 <_scanf_float+0x190>
 800afd6:	2d00      	cmp	r5, #0
 800afd8:	d110      	bne.n	800affc <_scanf_float+0x1dc>
 800afda:	9a01      	ldr	r2, [sp, #4]
 800afdc:	2a00      	cmp	r2, #0
 800afde:	d000      	beq.n	800afe2 <_scanf_float+0x1c2>
 800afe0:	e752      	b.n	800ae88 <_scanf_float+0x68>
 800afe2:	6822      	ldr	r2, [r4, #0]
 800afe4:	21e0      	movs	r1, #224	@ 0xe0
 800afe6:	0010      	movs	r0, r2
 800afe8:	00c9      	lsls	r1, r1, #3
 800afea:	4008      	ands	r0, r1
 800afec:	4288      	cmp	r0, r1
 800afee:	d000      	beq.n	800aff2 <_scanf_float+0x1d2>
 800aff0:	e11d      	b.n	800b22e <_scanf_float+0x40e>
 800aff2:	494e      	ldr	r1, [pc, #312]	@ (800b12c <_scanf_float+0x30c>)
 800aff4:	3501      	adds	r5, #1
 800aff6:	400a      	ands	r2, r1
 800aff8:	6022      	str	r2, [r4, #0]
 800affa:	e7bd      	b.n	800af78 <_scanf_float+0x158>
 800affc:	21fd      	movs	r1, #253	@ 0xfd
 800affe:	1eea      	subs	r2, r5, #3
 800b000:	420a      	tst	r2, r1
 800b002:	d0df      	beq.n	800afc4 <_scanf_float+0x1a4>
 800b004:	e73d      	b.n	800ae82 <_scanf_float+0x62>
 800b006:	2d02      	cmp	r5, #2
 800b008:	d000      	beq.n	800b00c <_scanf_float+0x1ec>
 800b00a:	e73a      	b.n	800ae82 <_scanf_float+0x62>
 800b00c:	2503      	movs	r5, #3
 800b00e:	e7b3      	b.n	800af78 <_scanf_float+0x158>
 800b010:	2d06      	cmp	r5, #6
 800b012:	d000      	beq.n	800b016 <_scanf_float+0x1f6>
 800b014:	e735      	b.n	800ae82 <_scanf_float+0x62>
 800b016:	2507      	movs	r5, #7
 800b018:	e7ae      	b.n	800af78 <_scanf_float+0x158>
 800b01a:	6822      	ldr	r2, [r4, #0]
 800b01c:	0591      	lsls	r1, r2, #22
 800b01e:	d400      	bmi.n	800b022 <_scanf_float+0x202>
 800b020:	e72f      	b.n	800ae82 <_scanf_float+0x62>
 800b022:	4943      	ldr	r1, [pc, #268]	@ (800b130 <_scanf_float+0x310>)
 800b024:	400a      	ands	r2, r1
 800b026:	6022      	str	r2, [r4, #0]
 800b028:	9a01      	ldr	r2, [sp, #4]
 800b02a:	9205      	str	r2, [sp, #20]
 800b02c:	e7a4      	b.n	800af78 <_scanf_float+0x158>
 800b02e:	21a0      	movs	r1, #160	@ 0xa0
 800b030:	2080      	movs	r0, #128	@ 0x80
 800b032:	6822      	ldr	r2, [r4, #0]
 800b034:	00c9      	lsls	r1, r1, #3
 800b036:	4011      	ands	r1, r2
 800b038:	00c0      	lsls	r0, r0, #3
 800b03a:	4281      	cmp	r1, r0
 800b03c:	d006      	beq.n	800b04c <_scanf_float+0x22c>
 800b03e:	4202      	tst	r2, r0
 800b040:	d100      	bne.n	800b044 <_scanf_float+0x224>
 800b042:	e71e      	b.n	800ae82 <_scanf_float+0x62>
 800b044:	9901      	ldr	r1, [sp, #4]
 800b046:	2900      	cmp	r1, #0
 800b048:	d100      	bne.n	800b04c <_scanf_float+0x22c>
 800b04a:	e0f0      	b.n	800b22e <_scanf_float+0x40e>
 800b04c:	0591      	lsls	r1, r2, #22
 800b04e:	d404      	bmi.n	800b05a <_scanf_float+0x23a>
 800b050:	9901      	ldr	r1, [sp, #4]
 800b052:	9805      	ldr	r0, [sp, #20]
 800b054:	9709      	str	r7, [sp, #36]	@ 0x24
 800b056:	1a09      	subs	r1, r1, r0
 800b058:	9108      	str	r1, [sp, #32]
 800b05a:	4934      	ldr	r1, [pc, #208]	@ (800b12c <_scanf_float+0x30c>)
 800b05c:	400a      	ands	r2, r1
 800b05e:	21c0      	movs	r1, #192	@ 0xc0
 800b060:	0049      	lsls	r1, r1, #1
 800b062:	430a      	orrs	r2, r1
 800b064:	6022      	str	r2, [r4, #0]
 800b066:	2200      	movs	r2, #0
 800b068:	9201      	str	r2, [sp, #4]
 800b06a:	e785      	b.n	800af78 <_scanf_float+0x158>
 800b06c:	2203      	movs	r2, #3
 800b06e:	e79f      	b.n	800afb0 <_scanf_float+0x190>
 800b070:	23c0      	movs	r3, #192	@ 0xc0
 800b072:	005b      	lsls	r3, r3, #1
 800b074:	0031      	movs	r1, r6
 800b076:	58e3      	ldr	r3, [r4, r3]
 800b078:	9803      	ldr	r0, [sp, #12]
 800b07a:	4798      	blx	r3
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d100      	bne.n	800b082 <_scanf_float+0x262>
 800b080:	e6f1      	b.n	800ae66 <_scanf_float+0x46>
 800b082:	e6fe      	b.n	800ae82 <_scanf_float+0x62>
 800b084:	3f01      	subs	r7, #1
 800b086:	5963      	ldr	r3, [r4, r5]
 800b088:	0032      	movs	r2, r6
 800b08a:	7839      	ldrb	r1, [r7, #0]
 800b08c:	9803      	ldr	r0, [sp, #12]
 800b08e:	4798      	blx	r3
 800b090:	6923      	ldr	r3, [r4, #16]
 800b092:	3b01      	subs	r3, #1
 800b094:	6123      	str	r3, [r4, #16]
 800b096:	e702      	b.n	800ae9e <_scanf_float+0x7e>
 800b098:	1e6b      	subs	r3, r5, #1
 800b09a:	2b06      	cmp	r3, #6
 800b09c:	d80e      	bhi.n	800b0bc <_scanf_float+0x29c>
 800b09e:	9702      	str	r7, [sp, #8]
 800b0a0:	2d02      	cmp	r5, #2
 800b0a2:	d920      	bls.n	800b0e6 <_scanf_float+0x2c6>
 800b0a4:	1beb      	subs	r3, r5, r7
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	9306      	str	r3, [sp, #24]
 800b0aa:	9b02      	ldr	r3, [sp, #8]
 800b0ac:	9a06      	ldr	r2, [sp, #24]
 800b0ae:	189b      	adds	r3, r3, r2
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d127      	bne.n	800b106 <_scanf_float+0x2e6>
 800b0b6:	3d03      	subs	r5, #3
 800b0b8:	b2ed      	uxtb	r5, r5
 800b0ba:	1b7f      	subs	r7, r7, r5
 800b0bc:	6823      	ldr	r3, [r4, #0]
 800b0be:	05da      	lsls	r2, r3, #23
 800b0c0:	d553      	bpl.n	800b16a <_scanf_float+0x34a>
 800b0c2:	055b      	lsls	r3, r3, #21
 800b0c4:	d536      	bpl.n	800b134 <_scanf_float+0x314>
 800b0c6:	25be      	movs	r5, #190	@ 0xbe
 800b0c8:	006d      	lsls	r5, r5, #1
 800b0ca:	9b04      	ldr	r3, [sp, #16]
 800b0cc:	429f      	cmp	r7, r3
 800b0ce:	d800      	bhi.n	800b0d2 <_scanf_float+0x2b2>
 800b0d0:	e6e9      	b.n	800aea6 <_scanf_float+0x86>
 800b0d2:	3f01      	subs	r7, #1
 800b0d4:	5963      	ldr	r3, [r4, r5]
 800b0d6:	0032      	movs	r2, r6
 800b0d8:	7839      	ldrb	r1, [r7, #0]
 800b0da:	9803      	ldr	r0, [sp, #12]
 800b0dc:	4798      	blx	r3
 800b0de:	6923      	ldr	r3, [r4, #16]
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	6123      	str	r3, [r4, #16]
 800b0e4:	e7f1      	b.n	800b0ca <_scanf_float+0x2aa>
 800b0e6:	25be      	movs	r5, #190	@ 0xbe
 800b0e8:	006d      	lsls	r5, r5, #1
 800b0ea:	9b04      	ldr	r3, [sp, #16]
 800b0ec:	429f      	cmp	r7, r3
 800b0ee:	d800      	bhi.n	800b0f2 <_scanf_float+0x2d2>
 800b0f0:	e6d9      	b.n	800aea6 <_scanf_float+0x86>
 800b0f2:	3f01      	subs	r7, #1
 800b0f4:	5963      	ldr	r3, [r4, r5]
 800b0f6:	0032      	movs	r2, r6
 800b0f8:	7839      	ldrb	r1, [r7, #0]
 800b0fa:	9803      	ldr	r0, [sp, #12]
 800b0fc:	4798      	blx	r3
 800b0fe:	6923      	ldr	r3, [r4, #16]
 800b100:	3b01      	subs	r3, #1
 800b102:	6123      	str	r3, [r4, #16]
 800b104:	e7f1      	b.n	800b0ea <_scanf_float+0x2ca>
 800b106:	9b02      	ldr	r3, [sp, #8]
 800b108:	0032      	movs	r2, r6
 800b10a:	3b01      	subs	r3, #1
 800b10c:	7819      	ldrb	r1, [r3, #0]
 800b10e:	9302      	str	r3, [sp, #8]
 800b110:	23be      	movs	r3, #190	@ 0xbe
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	58e3      	ldr	r3, [r4, r3]
 800b116:	9803      	ldr	r0, [sp, #12]
 800b118:	4798      	blx	r3
 800b11a:	6923      	ldr	r3, [r4, #16]
 800b11c:	3b01      	subs	r3, #1
 800b11e:	6123      	str	r3, [r4, #16]
 800b120:	e7c3      	b.n	800b0aa <_scanf_float+0x28a>
 800b122:	46c0      	nop			@ (mov r8, r8)
 800b124:	fffffeff 	.word	0xfffffeff
 800b128:	fffffe7f 	.word	0xfffffe7f
 800b12c:	fffff87f 	.word	0xfffff87f
 800b130:	fffffd7f 	.word	0xfffffd7f
 800b134:	6923      	ldr	r3, [r4, #16]
 800b136:	1e7d      	subs	r5, r7, #1
 800b138:	7829      	ldrb	r1, [r5, #0]
 800b13a:	3b01      	subs	r3, #1
 800b13c:	6123      	str	r3, [r4, #16]
 800b13e:	2965      	cmp	r1, #101	@ 0x65
 800b140:	d00c      	beq.n	800b15c <_scanf_float+0x33c>
 800b142:	2945      	cmp	r1, #69	@ 0x45
 800b144:	d00a      	beq.n	800b15c <_scanf_float+0x33c>
 800b146:	23be      	movs	r3, #190	@ 0xbe
 800b148:	005b      	lsls	r3, r3, #1
 800b14a:	58e3      	ldr	r3, [r4, r3]
 800b14c:	0032      	movs	r2, r6
 800b14e:	9803      	ldr	r0, [sp, #12]
 800b150:	4798      	blx	r3
 800b152:	6923      	ldr	r3, [r4, #16]
 800b154:	1ebd      	subs	r5, r7, #2
 800b156:	3b01      	subs	r3, #1
 800b158:	7829      	ldrb	r1, [r5, #0]
 800b15a:	6123      	str	r3, [r4, #16]
 800b15c:	23be      	movs	r3, #190	@ 0xbe
 800b15e:	005b      	lsls	r3, r3, #1
 800b160:	0032      	movs	r2, r6
 800b162:	58e3      	ldr	r3, [r4, r3]
 800b164:	9803      	ldr	r0, [sp, #12]
 800b166:	4798      	blx	r3
 800b168:	002f      	movs	r7, r5
 800b16a:	6821      	ldr	r1, [r4, #0]
 800b16c:	2310      	movs	r3, #16
 800b16e:	000a      	movs	r2, r1
 800b170:	401a      	ands	r2, r3
 800b172:	4219      	tst	r1, r3
 800b174:	d001      	beq.n	800b17a <_scanf_float+0x35a>
 800b176:	2000      	movs	r0, #0
 800b178:	e696      	b.n	800aea8 <_scanf_float+0x88>
 800b17a:	21c0      	movs	r1, #192	@ 0xc0
 800b17c:	703a      	strb	r2, [r7, #0]
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	00c9      	lsls	r1, r1, #3
 800b182:	400b      	ands	r3, r1
 800b184:	2180      	movs	r1, #128	@ 0x80
 800b186:	00c9      	lsls	r1, r1, #3
 800b188:	428b      	cmp	r3, r1
 800b18a:	d11c      	bne.n	800b1c6 <_scanf_float+0x3a6>
 800b18c:	9b05      	ldr	r3, [sp, #20]
 800b18e:	9a01      	ldr	r2, [sp, #4]
 800b190:	9905      	ldr	r1, [sp, #20]
 800b192:	1a9a      	subs	r2, r3, r2
 800b194:	9b01      	ldr	r3, [sp, #4]
 800b196:	428b      	cmp	r3, r1
 800b198:	d121      	bne.n	800b1de <_scanf_float+0x3be>
 800b19a:	2200      	movs	r2, #0
 800b19c:	9904      	ldr	r1, [sp, #16]
 800b19e:	9803      	ldr	r0, [sp, #12]
 800b1a0:	f7ff f9c6 	bl	800a530 <_strtod_r>
 800b1a4:	9b07      	ldr	r3, [sp, #28]
 800b1a6:	6822      	ldr	r2, [r4, #0]
 800b1a8:	0006      	movs	r6, r0
 800b1aa:	000f      	movs	r7, r1
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	0791      	lsls	r1, r2, #30
 800b1b0:	d522      	bpl.n	800b1f8 <_scanf_float+0x3d8>
 800b1b2:	9907      	ldr	r1, [sp, #28]
 800b1b4:	1d1a      	adds	r2, r3, #4
 800b1b6:	600a      	str	r2, [r1, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	601e      	str	r6, [r3, #0]
 800b1bc:	605f      	str	r7, [r3, #4]
 800b1be:	68e3      	ldr	r3, [r4, #12]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	60e3      	str	r3, [r4, #12]
 800b1c4:	e7d7      	b.n	800b176 <_scanf_float+0x356>
 800b1c6:	9b08      	ldr	r3, [sp, #32]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d0e6      	beq.n	800b19a <_scanf_float+0x37a>
 800b1cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ce:	9803      	ldr	r0, [sp, #12]
 800b1d0:	1c59      	adds	r1, r3, #1
 800b1d2:	230a      	movs	r3, #10
 800b1d4:	f002 fbc4 	bl	800d960 <_strtol_r>
 800b1d8:	9b08      	ldr	r3, [sp, #32]
 800b1da:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800b1dc:	1ac2      	subs	r2, r0, r3
 800b1de:	0023      	movs	r3, r4
 800b1e0:	3370      	adds	r3, #112	@ 0x70
 800b1e2:	33ff      	adds	r3, #255	@ 0xff
 800b1e4:	429f      	cmp	r7, r3
 800b1e6:	d302      	bcc.n	800b1ee <_scanf_float+0x3ce>
 800b1e8:	0027      	movs	r7, r4
 800b1ea:	376f      	adds	r7, #111	@ 0x6f
 800b1ec:	37ff      	adds	r7, #255	@ 0xff
 800b1ee:	0038      	movs	r0, r7
 800b1f0:	4910      	ldr	r1, [pc, #64]	@ (800b234 <_scanf_float+0x414>)
 800b1f2:	f000 f947 	bl	800b484 <siprintf>
 800b1f6:	e7d0      	b.n	800b19a <_scanf_float+0x37a>
 800b1f8:	1d19      	adds	r1, r3, #4
 800b1fa:	0752      	lsls	r2, r2, #29
 800b1fc:	d502      	bpl.n	800b204 <_scanf_float+0x3e4>
 800b1fe:	9a07      	ldr	r2, [sp, #28]
 800b200:	6011      	str	r1, [r2, #0]
 800b202:	e7d9      	b.n	800b1b8 <_scanf_float+0x398>
 800b204:	9a07      	ldr	r2, [sp, #28]
 800b206:	0030      	movs	r0, r6
 800b208:	6011      	str	r1, [r2, #0]
 800b20a:	681d      	ldr	r5, [r3, #0]
 800b20c:	0032      	movs	r2, r6
 800b20e:	003b      	movs	r3, r7
 800b210:	0039      	movs	r1, r7
 800b212:	f7f7 fb01 	bl	8002818 <__aeabi_dcmpun>
 800b216:	2800      	cmp	r0, #0
 800b218:	d004      	beq.n	800b224 <_scanf_float+0x404>
 800b21a:	4807      	ldr	r0, [pc, #28]	@ (800b238 <_scanf_float+0x418>)
 800b21c:	f000 fb54 	bl	800b8c8 <nanf>
 800b220:	6028      	str	r0, [r5, #0]
 800b222:	e7cc      	b.n	800b1be <_scanf_float+0x39e>
 800b224:	0030      	movs	r0, r6
 800b226:	0039      	movs	r1, r7
 800b228:	f7f7 fbee 	bl	8002a08 <__aeabi_d2f>
 800b22c:	e7f8      	b.n	800b220 <_scanf_float+0x400>
 800b22e:	2300      	movs	r3, #0
 800b230:	9301      	str	r3, [sp, #4]
 800b232:	e62d      	b.n	800ae90 <_scanf_float+0x70>
 800b234:	0800ed92 	.word	0x0800ed92
 800b238:	0800f150 	.word	0x0800f150

0800b23c <std>:
 800b23c:	2300      	movs	r3, #0
 800b23e:	b510      	push	{r4, lr}
 800b240:	0004      	movs	r4, r0
 800b242:	6003      	str	r3, [r0, #0]
 800b244:	6043      	str	r3, [r0, #4]
 800b246:	6083      	str	r3, [r0, #8]
 800b248:	8181      	strh	r1, [r0, #12]
 800b24a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b24c:	81c2      	strh	r2, [r0, #14]
 800b24e:	6103      	str	r3, [r0, #16]
 800b250:	6143      	str	r3, [r0, #20]
 800b252:	6183      	str	r3, [r0, #24]
 800b254:	0019      	movs	r1, r3
 800b256:	2208      	movs	r2, #8
 800b258:	305c      	adds	r0, #92	@ 0x5c
 800b25a:	f000 fa81 	bl	800b760 <memset>
 800b25e:	4b0b      	ldr	r3, [pc, #44]	@ (800b28c <std+0x50>)
 800b260:	6224      	str	r4, [r4, #32]
 800b262:	6263      	str	r3, [r4, #36]	@ 0x24
 800b264:	4b0a      	ldr	r3, [pc, #40]	@ (800b290 <std+0x54>)
 800b266:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b268:	4b0a      	ldr	r3, [pc, #40]	@ (800b294 <std+0x58>)
 800b26a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b26c:	4b0a      	ldr	r3, [pc, #40]	@ (800b298 <std+0x5c>)
 800b26e:	6323      	str	r3, [r4, #48]	@ 0x30
 800b270:	4b0a      	ldr	r3, [pc, #40]	@ (800b29c <std+0x60>)
 800b272:	429c      	cmp	r4, r3
 800b274:	d005      	beq.n	800b282 <std+0x46>
 800b276:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a0 <std+0x64>)
 800b278:	429c      	cmp	r4, r3
 800b27a:	d002      	beq.n	800b282 <std+0x46>
 800b27c:	4b09      	ldr	r3, [pc, #36]	@ (800b2a4 <std+0x68>)
 800b27e:	429c      	cmp	r4, r3
 800b280:	d103      	bne.n	800b28a <std+0x4e>
 800b282:	0020      	movs	r0, r4
 800b284:	3058      	adds	r0, #88	@ 0x58
 800b286:	f000 fb01 	bl	800b88c <__retarget_lock_init_recursive>
 800b28a:	bd10      	pop	{r4, pc}
 800b28c:	0800b515 	.word	0x0800b515
 800b290:	0800b541 	.word	0x0800b541
 800b294:	0800b579 	.word	0x0800b579
 800b298:	0800b5a5 	.word	0x0800b5a5
 800b29c:	200007a0 	.word	0x200007a0
 800b2a0:	20000808 	.word	0x20000808
 800b2a4:	20000870 	.word	0x20000870

0800b2a8 <stdio_exit_handler>:
 800b2a8:	b510      	push	{r4, lr}
 800b2aa:	4a03      	ldr	r2, [pc, #12]	@ (800b2b8 <stdio_exit_handler+0x10>)
 800b2ac:	4903      	ldr	r1, [pc, #12]	@ (800b2bc <stdio_exit_handler+0x14>)
 800b2ae:	4804      	ldr	r0, [pc, #16]	@ (800b2c0 <stdio_exit_handler+0x18>)
 800b2b0:	f000 f86c 	bl	800b38c <_fwalk_sglue>
 800b2b4:	bd10      	pop	{r4, pc}
 800b2b6:	46c0      	nop			@ (mov r8, r8)
 800b2b8:	2000003c 	.word	0x2000003c
 800b2bc:	0800e611 	.word	0x0800e611
 800b2c0:	200001b8 	.word	0x200001b8

0800b2c4 <cleanup_stdio>:
 800b2c4:	6841      	ldr	r1, [r0, #4]
 800b2c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f4 <cleanup_stdio+0x30>)
 800b2c8:	b510      	push	{r4, lr}
 800b2ca:	0004      	movs	r4, r0
 800b2cc:	4299      	cmp	r1, r3
 800b2ce:	d001      	beq.n	800b2d4 <cleanup_stdio+0x10>
 800b2d0:	f003 f99e 	bl	800e610 <_fflush_r>
 800b2d4:	68a1      	ldr	r1, [r4, #8]
 800b2d6:	4b08      	ldr	r3, [pc, #32]	@ (800b2f8 <cleanup_stdio+0x34>)
 800b2d8:	4299      	cmp	r1, r3
 800b2da:	d002      	beq.n	800b2e2 <cleanup_stdio+0x1e>
 800b2dc:	0020      	movs	r0, r4
 800b2de:	f003 f997 	bl	800e610 <_fflush_r>
 800b2e2:	68e1      	ldr	r1, [r4, #12]
 800b2e4:	4b05      	ldr	r3, [pc, #20]	@ (800b2fc <cleanup_stdio+0x38>)
 800b2e6:	4299      	cmp	r1, r3
 800b2e8:	d002      	beq.n	800b2f0 <cleanup_stdio+0x2c>
 800b2ea:	0020      	movs	r0, r4
 800b2ec:	f003 f990 	bl	800e610 <_fflush_r>
 800b2f0:	bd10      	pop	{r4, pc}
 800b2f2:	46c0      	nop			@ (mov r8, r8)
 800b2f4:	200007a0 	.word	0x200007a0
 800b2f8:	20000808 	.word	0x20000808
 800b2fc:	20000870 	.word	0x20000870

0800b300 <global_stdio_init.part.0>:
 800b300:	b510      	push	{r4, lr}
 800b302:	4b09      	ldr	r3, [pc, #36]	@ (800b328 <global_stdio_init.part.0+0x28>)
 800b304:	4a09      	ldr	r2, [pc, #36]	@ (800b32c <global_stdio_init.part.0+0x2c>)
 800b306:	2104      	movs	r1, #4
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	4809      	ldr	r0, [pc, #36]	@ (800b330 <global_stdio_init.part.0+0x30>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	f7ff ff95 	bl	800b23c <std>
 800b312:	2201      	movs	r2, #1
 800b314:	2109      	movs	r1, #9
 800b316:	4807      	ldr	r0, [pc, #28]	@ (800b334 <global_stdio_init.part.0+0x34>)
 800b318:	f7ff ff90 	bl	800b23c <std>
 800b31c:	2202      	movs	r2, #2
 800b31e:	2112      	movs	r1, #18
 800b320:	4805      	ldr	r0, [pc, #20]	@ (800b338 <global_stdio_init.part.0+0x38>)
 800b322:	f7ff ff8b 	bl	800b23c <std>
 800b326:	bd10      	pop	{r4, pc}
 800b328:	200008d8 	.word	0x200008d8
 800b32c:	0800b2a9 	.word	0x0800b2a9
 800b330:	200007a0 	.word	0x200007a0
 800b334:	20000808 	.word	0x20000808
 800b338:	20000870 	.word	0x20000870

0800b33c <__sfp_lock_acquire>:
 800b33c:	b510      	push	{r4, lr}
 800b33e:	4802      	ldr	r0, [pc, #8]	@ (800b348 <__sfp_lock_acquire+0xc>)
 800b340:	f000 faa5 	bl	800b88e <__retarget_lock_acquire_recursive>
 800b344:	bd10      	pop	{r4, pc}
 800b346:	46c0      	nop			@ (mov r8, r8)
 800b348:	200008e1 	.word	0x200008e1

0800b34c <__sfp_lock_release>:
 800b34c:	b510      	push	{r4, lr}
 800b34e:	4802      	ldr	r0, [pc, #8]	@ (800b358 <__sfp_lock_release+0xc>)
 800b350:	f000 fa9e 	bl	800b890 <__retarget_lock_release_recursive>
 800b354:	bd10      	pop	{r4, pc}
 800b356:	46c0      	nop			@ (mov r8, r8)
 800b358:	200008e1 	.word	0x200008e1

0800b35c <__sinit>:
 800b35c:	b510      	push	{r4, lr}
 800b35e:	0004      	movs	r4, r0
 800b360:	f7ff ffec 	bl	800b33c <__sfp_lock_acquire>
 800b364:	6a23      	ldr	r3, [r4, #32]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d002      	beq.n	800b370 <__sinit+0x14>
 800b36a:	f7ff ffef 	bl	800b34c <__sfp_lock_release>
 800b36e:	bd10      	pop	{r4, pc}
 800b370:	4b04      	ldr	r3, [pc, #16]	@ (800b384 <__sinit+0x28>)
 800b372:	6223      	str	r3, [r4, #32]
 800b374:	4b04      	ldr	r3, [pc, #16]	@ (800b388 <__sinit+0x2c>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1f6      	bne.n	800b36a <__sinit+0xe>
 800b37c:	f7ff ffc0 	bl	800b300 <global_stdio_init.part.0>
 800b380:	e7f3      	b.n	800b36a <__sinit+0xe>
 800b382:	46c0      	nop			@ (mov r8, r8)
 800b384:	0800b2c5 	.word	0x0800b2c5
 800b388:	200008d8 	.word	0x200008d8

0800b38c <_fwalk_sglue>:
 800b38c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b38e:	0014      	movs	r4, r2
 800b390:	2600      	movs	r6, #0
 800b392:	9000      	str	r0, [sp, #0]
 800b394:	9101      	str	r1, [sp, #4]
 800b396:	68a5      	ldr	r5, [r4, #8]
 800b398:	6867      	ldr	r7, [r4, #4]
 800b39a:	3f01      	subs	r7, #1
 800b39c:	d504      	bpl.n	800b3a8 <_fwalk_sglue+0x1c>
 800b39e:	6824      	ldr	r4, [r4, #0]
 800b3a0:	2c00      	cmp	r4, #0
 800b3a2:	d1f8      	bne.n	800b396 <_fwalk_sglue+0xa>
 800b3a4:	0030      	movs	r0, r6
 800b3a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b3a8:	89ab      	ldrh	r3, [r5, #12]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d908      	bls.n	800b3c0 <_fwalk_sglue+0x34>
 800b3ae:	220e      	movs	r2, #14
 800b3b0:	5eab      	ldrsh	r3, [r5, r2]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	d004      	beq.n	800b3c0 <_fwalk_sglue+0x34>
 800b3b6:	0029      	movs	r1, r5
 800b3b8:	9800      	ldr	r0, [sp, #0]
 800b3ba:	9b01      	ldr	r3, [sp, #4]
 800b3bc:	4798      	blx	r3
 800b3be:	4306      	orrs	r6, r0
 800b3c0:	3568      	adds	r5, #104	@ 0x68
 800b3c2:	e7ea      	b.n	800b39a <_fwalk_sglue+0xe>

0800b3c4 <_puts_r>:
 800b3c4:	6a03      	ldr	r3, [r0, #32]
 800b3c6:	b570      	push	{r4, r5, r6, lr}
 800b3c8:	0005      	movs	r5, r0
 800b3ca:	000e      	movs	r6, r1
 800b3cc:	6884      	ldr	r4, [r0, #8]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d101      	bne.n	800b3d6 <_puts_r+0x12>
 800b3d2:	f7ff ffc3 	bl	800b35c <__sinit>
 800b3d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3d8:	07db      	lsls	r3, r3, #31
 800b3da:	d405      	bmi.n	800b3e8 <_puts_r+0x24>
 800b3dc:	89a3      	ldrh	r3, [r4, #12]
 800b3de:	059b      	lsls	r3, r3, #22
 800b3e0:	d402      	bmi.n	800b3e8 <_puts_r+0x24>
 800b3e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3e4:	f000 fa53 	bl	800b88e <__retarget_lock_acquire_recursive>
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	071b      	lsls	r3, r3, #28
 800b3ec:	d502      	bpl.n	800b3f4 <_puts_r+0x30>
 800b3ee:	6923      	ldr	r3, [r4, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d11f      	bne.n	800b434 <_puts_r+0x70>
 800b3f4:	0021      	movs	r1, r4
 800b3f6:	0028      	movs	r0, r5
 800b3f8:	f000 f954 	bl	800b6a4 <__swsetup_r>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d019      	beq.n	800b434 <_puts_r+0x70>
 800b400:	2501      	movs	r5, #1
 800b402:	426d      	negs	r5, r5
 800b404:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b406:	07db      	lsls	r3, r3, #31
 800b408:	d405      	bmi.n	800b416 <_puts_r+0x52>
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	059b      	lsls	r3, r3, #22
 800b40e:	d402      	bmi.n	800b416 <_puts_r+0x52>
 800b410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b412:	f000 fa3d 	bl	800b890 <__retarget_lock_release_recursive>
 800b416:	0028      	movs	r0, r5
 800b418:	bd70      	pop	{r4, r5, r6, pc}
 800b41a:	3601      	adds	r6, #1
 800b41c:	60a3      	str	r3, [r4, #8]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	da04      	bge.n	800b42c <_puts_r+0x68>
 800b422:	69a2      	ldr	r2, [r4, #24]
 800b424:	429a      	cmp	r2, r3
 800b426:	dc16      	bgt.n	800b456 <_puts_r+0x92>
 800b428:	290a      	cmp	r1, #10
 800b42a:	d014      	beq.n	800b456 <_puts_r+0x92>
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	1c5a      	adds	r2, r3, #1
 800b430:	6022      	str	r2, [r4, #0]
 800b432:	7019      	strb	r1, [r3, #0]
 800b434:	68a3      	ldr	r3, [r4, #8]
 800b436:	7831      	ldrb	r1, [r6, #0]
 800b438:	3b01      	subs	r3, #1
 800b43a:	2900      	cmp	r1, #0
 800b43c:	d1ed      	bne.n	800b41a <_puts_r+0x56>
 800b43e:	60a3      	str	r3, [r4, #8]
 800b440:	2b00      	cmp	r3, #0
 800b442:	da0f      	bge.n	800b464 <_puts_r+0xa0>
 800b444:	0022      	movs	r2, r4
 800b446:	0028      	movs	r0, r5
 800b448:	310a      	adds	r1, #10
 800b44a:	f000 f8e9 	bl	800b620 <__swbuf_r>
 800b44e:	3001      	adds	r0, #1
 800b450:	d0d6      	beq.n	800b400 <_puts_r+0x3c>
 800b452:	250a      	movs	r5, #10
 800b454:	e7d6      	b.n	800b404 <_puts_r+0x40>
 800b456:	0022      	movs	r2, r4
 800b458:	0028      	movs	r0, r5
 800b45a:	f000 f8e1 	bl	800b620 <__swbuf_r>
 800b45e:	3001      	adds	r0, #1
 800b460:	d1e8      	bne.n	800b434 <_puts_r+0x70>
 800b462:	e7cd      	b.n	800b400 <_puts_r+0x3c>
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	1c5a      	adds	r2, r3, #1
 800b468:	6022      	str	r2, [r4, #0]
 800b46a:	220a      	movs	r2, #10
 800b46c:	701a      	strb	r2, [r3, #0]
 800b46e:	e7f0      	b.n	800b452 <_puts_r+0x8e>

0800b470 <puts>:
 800b470:	b510      	push	{r4, lr}
 800b472:	4b03      	ldr	r3, [pc, #12]	@ (800b480 <puts+0x10>)
 800b474:	0001      	movs	r1, r0
 800b476:	6818      	ldr	r0, [r3, #0]
 800b478:	f7ff ffa4 	bl	800b3c4 <_puts_r>
 800b47c:	bd10      	pop	{r4, pc}
 800b47e:	46c0      	nop			@ (mov r8, r8)
 800b480:	200001b4 	.word	0x200001b4

0800b484 <siprintf>:
 800b484:	b40e      	push	{r1, r2, r3}
 800b486:	b500      	push	{lr}
 800b488:	490b      	ldr	r1, [pc, #44]	@ (800b4b8 <siprintf+0x34>)
 800b48a:	b09c      	sub	sp, #112	@ 0x70
 800b48c:	ab1d      	add	r3, sp, #116	@ 0x74
 800b48e:	9002      	str	r0, [sp, #8]
 800b490:	9006      	str	r0, [sp, #24]
 800b492:	9107      	str	r1, [sp, #28]
 800b494:	9104      	str	r1, [sp, #16]
 800b496:	4809      	ldr	r0, [pc, #36]	@ (800b4bc <siprintf+0x38>)
 800b498:	4909      	ldr	r1, [pc, #36]	@ (800b4c0 <siprintf+0x3c>)
 800b49a:	cb04      	ldmia	r3!, {r2}
 800b49c:	9105      	str	r1, [sp, #20]
 800b49e:	6800      	ldr	r0, [r0, #0]
 800b4a0:	a902      	add	r1, sp, #8
 800b4a2:	9301      	str	r3, [sp, #4]
 800b4a4:	f002 face 	bl	800da44 <_svfiprintf_r>
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	9b02      	ldr	r3, [sp, #8]
 800b4ac:	701a      	strb	r2, [r3, #0]
 800b4ae:	b01c      	add	sp, #112	@ 0x70
 800b4b0:	bc08      	pop	{r3}
 800b4b2:	b003      	add	sp, #12
 800b4b4:	4718      	bx	r3
 800b4b6:	46c0      	nop			@ (mov r8, r8)
 800b4b8:	7fffffff 	.word	0x7fffffff
 800b4bc:	200001b4 	.word	0x200001b4
 800b4c0:	ffff0208 	.word	0xffff0208

0800b4c4 <siscanf>:
 800b4c4:	b40e      	push	{r1, r2, r3}
 800b4c6:	b530      	push	{r4, r5, lr}
 800b4c8:	2381      	movs	r3, #129	@ 0x81
 800b4ca:	b09c      	sub	sp, #112	@ 0x70
 800b4cc:	466a      	mov	r2, sp
 800b4ce:	ac1f      	add	r4, sp, #124	@ 0x7c
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	cc20      	ldmia	r4!, {r5}
 800b4d4:	8293      	strh	r3, [r2, #20]
 800b4d6:	9002      	str	r0, [sp, #8]
 800b4d8:	9006      	str	r0, [sp, #24]
 800b4da:	f7f4 fe1f 	bl	800011c <strlen>
 800b4de:	4b0b      	ldr	r3, [pc, #44]	@ (800b50c <siscanf+0x48>)
 800b4e0:	466a      	mov	r2, sp
 800b4e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	9003      	str	r0, [sp, #12]
 800b4e8:	9007      	str	r0, [sp, #28]
 800b4ea:	4809      	ldr	r0, [pc, #36]	@ (800b510 <siscanf+0x4c>)
 800b4ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4ee:	9314      	str	r3, [sp, #80]	@ 0x50
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	82d3      	strh	r3, [r2, #22]
 800b4f4:	a902      	add	r1, sp, #8
 800b4f6:	0023      	movs	r3, r4
 800b4f8:	002a      	movs	r2, r5
 800b4fa:	6800      	ldr	r0, [r0, #0]
 800b4fc:	9401      	str	r4, [sp, #4]
 800b4fe:	f002 fbfb 	bl	800dcf8 <__ssvfiscanf_r>
 800b502:	b01c      	add	sp, #112	@ 0x70
 800b504:	bc30      	pop	{r4, r5}
 800b506:	bc08      	pop	{r3}
 800b508:	b003      	add	sp, #12
 800b50a:	4718      	bx	r3
 800b50c:	0800b53d 	.word	0x0800b53d
 800b510:	200001b4 	.word	0x200001b4

0800b514 <__sread>:
 800b514:	b570      	push	{r4, r5, r6, lr}
 800b516:	000c      	movs	r4, r1
 800b518:	250e      	movs	r5, #14
 800b51a:	5f49      	ldrsh	r1, [r1, r5]
 800b51c:	f000 f964 	bl	800b7e8 <_read_r>
 800b520:	2800      	cmp	r0, #0
 800b522:	db03      	blt.n	800b52c <__sread+0x18>
 800b524:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b526:	181b      	adds	r3, r3, r0
 800b528:	6563      	str	r3, [r4, #84]	@ 0x54
 800b52a:	bd70      	pop	{r4, r5, r6, pc}
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	4a02      	ldr	r2, [pc, #8]	@ (800b538 <__sread+0x24>)
 800b530:	4013      	ands	r3, r2
 800b532:	81a3      	strh	r3, [r4, #12]
 800b534:	e7f9      	b.n	800b52a <__sread+0x16>
 800b536:	46c0      	nop			@ (mov r8, r8)
 800b538:	ffffefff 	.word	0xffffefff

0800b53c <__seofread>:
 800b53c:	2000      	movs	r0, #0
 800b53e:	4770      	bx	lr

0800b540 <__swrite>:
 800b540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b542:	001f      	movs	r7, r3
 800b544:	898b      	ldrh	r3, [r1, #12]
 800b546:	0005      	movs	r5, r0
 800b548:	000c      	movs	r4, r1
 800b54a:	0016      	movs	r6, r2
 800b54c:	05db      	lsls	r3, r3, #23
 800b54e:	d505      	bpl.n	800b55c <__swrite+0x1c>
 800b550:	230e      	movs	r3, #14
 800b552:	5ec9      	ldrsh	r1, [r1, r3]
 800b554:	2200      	movs	r2, #0
 800b556:	2302      	movs	r3, #2
 800b558:	f000 f932 	bl	800b7c0 <_lseek_r>
 800b55c:	89a3      	ldrh	r3, [r4, #12]
 800b55e:	4a05      	ldr	r2, [pc, #20]	@ (800b574 <__swrite+0x34>)
 800b560:	0028      	movs	r0, r5
 800b562:	4013      	ands	r3, r2
 800b564:	81a3      	strh	r3, [r4, #12]
 800b566:	0032      	movs	r2, r6
 800b568:	230e      	movs	r3, #14
 800b56a:	5ee1      	ldrsh	r1, [r4, r3]
 800b56c:	003b      	movs	r3, r7
 800b56e:	f000 f94f 	bl	800b810 <_write_r>
 800b572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b574:	ffffefff 	.word	0xffffefff

0800b578 <__sseek>:
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	000c      	movs	r4, r1
 800b57c:	250e      	movs	r5, #14
 800b57e:	5f49      	ldrsh	r1, [r1, r5]
 800b580:	f000 f91e 	bl	800b7c0 <_lseek_r>
 800b584:	89a3      	ldrh	r3, [r4, #12]
 800b586:	1c42      	adds	r2, r0, #1
 800b588:	d103      	bne.n	800b592 <__sseek+0x1a>
 800b58a:	4a05      	ldr	r2, [pc, #20]	@ (800b5a0 <__sseek+0x28>)
 800b58c:	4013      	ands	r3, r2
 800b58e:	81a3      	strh	r3, [r4, #12]
 800b590:	bd70      	pop	{r4, r5, r6, pc}
 800b592:	2280      	movs	r2, #128	@ 0x80
 800b594:	0152      	lsls	r2, r2, #5
 800b596:	4313      	orrs	r3, r2
 800b598:	81a3      	strh	r3, [r4, #12]
 800b59a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b59c:	e7f8      	b.n	800b590 <__sseek+0x18>
 800b59e:	46c0      	nop			@ (mov r8, r8)
 800b5a0:	ffffefff 	.word	0xffffefff

0800b5a4 <__sclose>:
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	230e      	movs	r3, #14
 800b5a8:	5ec9      	ldrsh	r1, [r1, r3]
 800b5aa:	f000 f8f7 	bl	800b79c <_close_r>
 800b5ae:	bd10      	pop	{r4, pc}

0800b5b0 <_vsniprintf_r>:
 800b5b0:	b530      	push	{r4, r5, lr}
 800b5b2:	0014      	movs	r4, r2
 800b5b4:	0005      	movs	r5, r0
 800b5b6:	001a      	movs	r2, r3
 800b5b8:	b09b      	sub	sp, #108	@ 0x6c
 800b5ba:	2c00      	cmp	r4, #0
 800b5bc:	da05      	bge.n	800b5ca <_vsniprintf_r+0x1a>
 800b5be:	238b      	movs	r3, #139	@ 0x8b
 800b5c0:	6003      	str	r3, [r0, #0]
 800b5c2:	2001      	movs	r0, #1
 800b5c4:	4240      	negs	r0, r0
 800b5c6:	b01b      	add	sp, #108	@ 0x6c
 800b5c8:	bd30      	pop	{r4, r5, pc}
 800b5ca:	2382      	movs	r3, #130	@ 0x82
 800b5cc:	4668      	mov	r0, sp
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	8183      	strh	r3, [r0, #12]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	9100      	str	r1, [sp, #0]
 800b5d6:	9104      	str	r1, [sp, #16]
 800b5d8:	429c      	cmp	r4, r3
 800b5da:	d000      	beq.n	800b5de <_vsniprintf_r+0x2e>
 800b5dc:	1e63      	subs	r3, r4, #1
 800b5de:	9302      	str	r3, [sp, #8]
 800b5e0:	9305      	str	r3, [sp, #20]
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	4669      	mov	r1, sp
 800b5e6:	425b      	negs	r3, r3
 800b5e8:	81cb      	strh	r3, [r1, #14]
 800b5ea:	0028      	movs	r0, r5
 800b5ec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b5ee:	f002 fa29 	bl	800da44 <_svfiprintf_r>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	da01      	bge.n	800b5fa <_vsniprintf_r+0x4a>
 800b5f6:	238b      	movs	r3, #139	@ 0x8b
 800b5f8:	602b      	str	r3, [r5, #0]
 800b5fa:	2c00      	cmp	r4, #0
 800b5fc:	d0e3      	beq.n	800b5c6 <_vsniprintf_r+0x16>
 800b5fe:	2200      	movs	r2, #0
 800b600:	9b00      	ldr	r3, [sp, #0]
 800b602:	701a      	strb	r2, [r3, #0]
 800b604:	e7df      	b.n	800b5c6 <_vsniprintf_r+0x16>
	...

0800b608 <vsniprintf>:
 800b608:	b513      	push	{r0, r1, r4, lr}
 800b60a:	4c04      	ldr	r4, [pc, #16]	@ (800b61c <vsniprintf+0x14>)
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	0013      	movs	r3, r2
 800b610:	000a      	movs	r2, r1
 800b612:	0001      	movs	r1, r0
 800b614:	6820      	ldr	r0, [r4, #0]
 800b616:	f7ff ffcb 	bl	800b5b0 <_vsniprintf_r>
 800b61a:	bd16      	pop	{r1, r2, r4, pc}
 800b61c:	200001b4 	.word	0x200001b4

0800b620 <__swbuf_r>:
 800b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b622:	0006      	movs	r6, r0
 800b624:	000d      	movs	r5, r1
 800b626:	0014      	movs	r4, r2
 800b628:	2800      	cmp	r0, #0
 800b62a:	d004      	beq.n	800b636 <__swbuf_r+0x16>
 800b62c:	6a03      	ldr	r3, [r0, #32]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d101      	bne.n	800b636 <__swbuf_r+0x16>
 800b632:	f7ff fe93 	bl	800b35c <__sinit>
 800b636:	69a3      	ldr	r3, [r4, #24]
 800b638:	60a3      	str	r3, [r4, #8]
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	071b      	lsls	r3, r3, #28
 800b63e:	d502      	bpl.n	800b646 <__swbuf_r+0x26>
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d109      	bne.n	800b65a <__swbuf_r+0x3a>
 800b646:	0021      	movs	r1, r4
 800b648:	0030      	movs	r0, r6
 800b64a:	f000 f82b 	bl	800b6a4 <__swsetup_r>
 800b64e:	2800      	cmp	r0, #0
 800b650:	d003      	beq.n	800b65a <__swbuf_r+0x3a>
 800b652:	2501      	movs	r5, #1
 800b654:	426d      	negs	r5, r5
 800b656:	0028      	movs	r0, r5
 800b658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b65a:	6923      	ldr	r3, [r4, #16]
 800b65c:	6820      	ldr	r0, [r4, #0]
 800b65e:	b2ef      	uxtb	r7, r5
 800b660:	1ac0      	subs	r0, r0, r3
 800b662:	6963      	ldr	r3, [r4, #20]
 800b664:	b2ed      	uxtb	r5, r5
 800b666:	4283      	cmp	r3, r0
 800b668:	dc05      	bgt.n	800b676 <__swbuf_r+0x56>
 800b66a:	0021      	movs	r1, r4
 800b66c:	0030      	movs	r0, r6
 800b66e:	f002 ffcf 	bl	800e610 <_fflush_r>
 800b672:	2800      	cmp	r0, #0
 800b674:	d1ed      	bne.n	800b652 <__swbuf_r+0x32>
 800b676:	68a3      	ldr	r3, [r4, #8]
 800b678:	3001      	adds	r0, #1
 800b67a:	3b01      	subs	r3, #1
 800b67c:	60a3      	str	r3, [r4, #8]
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	1c5a      	adds	r2, r3, #1
 800b682:	6022      	str	r2, [r4, #0]
 800b684:	701f      	strb	r7, [r3, #0]
 800b686:	6963      	ldr	r3, [r4, #20]
 800b688:	4283      	cmp	r3, r0
 800b68a:	d004      	beq.n	800b696 <__swbuf_r+0x76>
 800b68c:	89a3      	ldrh	r3, [r4, #12]
 800b68e:	07db      	lsls	r3, r3, #31
 800b690:	d5e1      	bpl.n	800b656 <__swbuf_r+0x36>
 800b692:	2d0a      	cmp	r5, #10
 800b694:	d1df      	bne.n	800b656 <__swbuf_r+0x36>
 800b696:	0021      	movs	r1, r4
 800b698:	0030      	movs	r0, r6
 800b69a:	f002 ffb9 	bl	800e610 <_fflush_r>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d0d9      	beq.n	800b656 <__swbuf_r+0x36>
 800b6a2:	e7d6      	b.n	800b652 <__swbuf_r+0x32>

0800b6a4 <__swsetup_r>:
 800b6a4:	4b2d      	ldr	r3, [pc, #180]	@ (800b75c <__swsetup_r+0xb8>)
 800b6a6:	b570      	push	{r4, r5, r6, lr}
 800b6a8:	0005      	movs	r5, r0
 800b6aa:	6818      	ldr	r0, [r3, #0]
 800b6ac:	000c      	movs	r4, r1
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d004      	beq.n	800b6bc <__swsetup_r+0x18>
 800b6b2:	6a03      	ldr	r3, [r0, #32]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d101      	bne.n	800b6bc <__swsetup_r+0x18>
 800b6b8:	f7ff fe50 	bl	800b35c <__sinit>
 800b6bc:	230c      	movs	r3, #12
 800b6be:	5ee2      	ldrsh	r2, [r4, r3]
 800b6c0:	0713      	lsls	r3, r2, #28
 800b6c2:	d423      	bmi.n	800b70c <__swsetup_r+0x68>
 800b6c4:	06d3      	lsls	r3, r2, #27
 800b6c6:	d407      	bmi.n	800b6d8 <__swsetup_r+0x34>
 800b6c8:	2309      	movs	r3, #9
 800b6ca:	602b      	str	r3, [r5, #0]
 800b6cc:	2340      	movs	r3, #64	@ 0x40
 800b6ce:	2001      	movs	r0, #1
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	81a3      	strh	r3, [r4, #12]
 800b6d4:	4240      	negs	r0, r0
 800b6d6:	e03a      	b.n	800b74e <__swsetup_r+0xaa>
 800b6d8:	0752      	lsls	r2, r2, #29
 800b6da:	d513      	bpl.n	800b704 <__swsetup_r+0x60>
 800b6dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6de:	2900      	cmp	r1, #0
 800b6e0:	d008      	beq.n	800b6f4 <__swsetup_r+0x50>
 800b6e2:	0023      	movs	r3, r4
 800b6e4:	3344      	adds	r3, #68	@ 0x44
 800b6e6:	4299      	cmp	r1, r3
 800b6e8:	d002      	beq.n	800b6f0 <__swsetup_r+0x4c>
 800b6ea:	0028      	movs	r0, r5
 800b6ec:	f000 ff72 	bl	800c5d4 <_free_r>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6f4:	2224      	movs	r2, #36	@ 0x24
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	4393      	bics	r3, r2
 800b6fa:	81a3      	strh	r3, [r4, #12]
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	6063      	str	r3, [r4, #4]
 800b700:	6923      	ldr	r3, [r4, #16]
 800b702:	6023      	str	r3, [r4, #0]
 800b704:	2308      	movs	r3, #8
 800b706:	89a2      	ldrh	r2, [r4, #12]
 800b708:	4313      	orrs	r3, r2
 800b70a:	81a3      	strh	r3, [r4, #12]
 800b70c:	6923      	ldr	r3, [r4, #16]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d10b      	bne.n	800b72a <__swsetup_r+0x86>
 800b712:	21a0      	movs	r1, #160	@ 0xa0
 800b714:	2280      	movs	r2, #128	@ 0x80
 800b716:	89a3      	ldrh	r3, [r4, #12]
 800b718:	0089      	lsls	r1, r1, #2
 800b71a:	0092      	lsls	r2, r2, #2
 800b71c:	400b      	ands	r3, r1
 800b71e:	4293      	cmp	r3, r2
 800b720:	d003      	beq.n	800b72a <__swsetup_r+0x86>
 800b722:	0021      	movs	r1, r4
 800b724:	0028      	movs	r0, r5
 800b726:	f002 ffc9 	bl	800e6bc <__smakebuf_r>
 800b72a:	230c      	movs	r3, #12
 800b72c:	5ee2      	ldrsh	r2, [r4, r3]
 800b72e:	2101      	movs	r1, #1
 800b730:	0013      	movs	r3, r2
 800b732:	400b      	ands	r3, r1
 800b734:	420a      	tst	r2, r1
 800b736:	d00b      	beq.n	800b750 <__swsetup_r+0xac>
 800b738:	2300      	movs	r3, #0
 800b73a:	60a3      	str	r3, [r4, #8]
 800b73c:	6963      	ldr	r3, [r4, #20]
 800b73e:	425b      	negs	r3, r3
 800b740:	61a3      	str	r3, [r4, #24]
 800b742:	2000      	movs	r0, #0
 800b744:	6923      	ldr	r3, [r4, #16]
 800b746:	4283      	cmp	r3, r0
 800b748:	d101      	bne.n	800b74e <__swsetup_r+0xaa>
 800b74a:	0613      	lsls	r3, r2, #24
 800b74c:	d4be      	bmi.n	800b6cc <__swsetup_r+0x28>
 800b74e:	bd70      	pop	{r4, r5, r6, pc}
 800b750:	0791      	lsls	r1, r2, #30
 800b752:	d400      	bmi.n	800b756 <__swsetup_r+0xb2>
 800b754:	6963      	ldr	r3, [r4, #20]
 800b756:	60a3      	str	r3, [r4, #8]
 800b758:	e7f3      	b.n	800b742 <__swsetup_r+0x9e>
 800b75a:	46c0      	nop			@ (mov r8, r8)
 800b75c:	200001b4 	.word	0x200001b4

0800b760 <memset>:
 800b760:	0003      	movs	r3, r0
 800b762:	1882      	adds	r2, r0, r2
 800b764:	4293      	cmp	r3, r2
 800b766:	d100      	bne.n	800b76a <memset+0xa>
 800b768:	4770      	bx	lr
 800b76a:	7019      	strb	r1, [r3, #0]
 800b76c:	3301      	adds	r3, #1
 800b76e:	e7f9      	b.n	800b764 <memset+0x4>

0800b770 <strncmp>:
 800b770:	b530      	push	{r4, r5, lr}
 800b772:	0005      	movs	r5, r0
 800b774:	1e10      	subs	r0, r2, #0
 800b776:	d00b      	beq.n	800b790 <strncmp+0x20>
 800b778:	2400      	movs	r4, #0
 800b77a:	3a01      	subs	r2, #1
 800b77c:	5d2b      	ldrb	r3, [r5, r4]
 800b77e:	5d08      	ldrb	r0, [r1, r4]
 800b780:	4283      	cmp	r3, r0
 800b782:	d104      	bne.n	800b78e <strncmp+0x1e>
 800b784:	42a2      	cmp	r2, r4
 800b786:	d002      	beq.n	800b78e <strncmp+0x1e>
 800b788:	3401      	adds	r4, #1
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1f6      	bne.n	800b77c <strncmp+0xc>
 800b78e:	1a18      	subs	r0, r3, r0
 800b790:	bd30      	pop	{r4, r5, pc}
	...

0800b794 <_localeconv_r>:
 800b794:	4800      	ldr	r0, [pc, #0]	@ (800b798 <_localeconv_r+0x4>)
 800b796:	4770      	bx	lr
 800b798:	20000138 	.word	0x20000138

0800b79c <_close_r>:
 800b79c:	2300      	movs	r3, #0
 800b79e:	b570      	push	{r4, r5, r6, lr}
 800b7a0:	4d06      	ldr	r5, [pc, #24]	@ (800b7bc <_close_r+0x20>)
 800b7a2:	0004      	movs	r4, r0
 800b7a4:	0008      	movs	r0, r1
 800b7a6:	602b      	str	r3, [r5, #0]
 800b7a8:	f7f8 fc8c 	bl	80040c4 <_close>
 800b7ac:	1c43      	adds	r3, r0, #1
 800b7ae:	d103      	bne.n	800b7b8 <_close_r+0x1c>
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d000      	beq.n	800b7b8 <_close_r+0x1c>
 800b7b6:	6023      	str	r3, [r4, #0]
 800b7b8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ba:	46c0      	nop			@ (mov r8, r8)
 800b7bc:	200008dc 	.word	0x200008dc

0800b7c0 <_lseek_r>:
 800b7c0:	b570      	push	{r4, r5, r6, lr}
 800b7c2:	0004      	movs	r4, r0
 800b7c4:	0008      	movs	r0, r1
 800b7c6:	0011      	movs	r1, r2
 800b7c8:	001a      	movs	r2, r3
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	4d05      	ldr	r5, [pc, #20]	@ (800b7e4 <_lseek_r+0x24>)
 800b7ce:	602b      	str	r3, [r5, #0]
 800b7d0:	f7f8 fc99 	bl	8004106 <_lseek>
 800b7d4:	1c43      	adds	r3, r0, #1
 800b7d6:	d103      	bne.n	800b7e0 <_lseek_r+0x20>
 800b7d8:	682b      	ldr	r3, [r5, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d000      	beq.n	800b7e0 <_lseek_r+0x20>
 800b7de:	6023      	str	r3, [r4, #0]
 800b7e0:	bd70      	pop	{r4, r5, r6, pc}
 800b7e2:	46c0      	nop			@ (mov r8, r8)
 800b7e4:	200008dc 	.word	0x200008dc

0800b7e8 <_read_r>:
 800b7e8:	b570      	push	{r4, r5, r6, lr}
 800b7ea:	0004      	movs	r4, r0
 800b7ec:	0008      	movs	r0, r1
 800b7ee:	0011      	movs	r1, r2
 800b7f0:	001a      	movs	r2, r3
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	4d05      	ldr	r5, [pc, #20]	@ (800b80c <_read_r+0x24>)
 800b7f6:	602b      	str	r3, [r5, #0]
 800b7f8:	f7f8 fc2b 	bl	8004052 <_read>
 800b7fc:	1c43      	adds	r3, r0, #1
 800b7fe:	d103      	bne.n	800b808 <_read_r+0x20>
 800b800:	682b      	ldr	r3, [r5, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d000      	beq.n	800b808 <_read_r+0x20>
 800b806:	6023      	str	r3, [r4, #0]
 800b808:	bd70      	pop	{r4, r5, r6, pc}
 800b80a:	46c0      	nop			@ (mov r8, r8)
 800b80c:	200008dc 	.word	0x200008dc

0800b810 <_write_r>:
 800b810:	b570      	push	{r4, r5, r6, lr}
 800b812:	0004      	movs	r4, r0
 800b814:	0008      	movs	r0, r1
 800b816:	0011      	movs	r1, r2
 800b818:	001a      	movs	r2, r3
 800b81a:	2300      	movs	r3, #0
 800b81c:	4d05      	ldr	r5, [pc, #20]	@ (800b834 <_write_r+0x24>)
 800b81e:	602b      	str	r3, [r5, #0]
 800b820:	f7f8 fc34 	bl	800408c <_write>
 800b824:	1c43      	adds	r3, r0, #1
 800b826:	d103      	bne.n	800b830 <_write_r+0x20>
 800b828:	682b      	ldr	r3, [r5, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d000      	beq.n	800b830 <_write_r+0x20>
 800b82e:	6023      	str	r3, [r4, #0]
 800b830:	bd70      	pop	{r4, r5, r6, pc}
 800b832:	46c0      	nop			@ (mov r8, r8)
 800b834:	200008dc 	.word	0x200008dc

0800b838 <__errno>:
 800b838:	4b01      	ldr	r3, [pc, #4]	@ (800b840 <__errno+0x8>)
 800b83a:	6818      	ldr	r0, [r3, #0]
 800b83c:	4770      	bx	lr
 800b83e:	46c0      	nop			@ (mov r8, r8)
 800b840:	200001b4 	.word	0x200001b4

0800b844 <__libc_init_array>:
 800b844:	b570      	push	{r4, r5, r6, lr}
 800b846:	2600      	movs	r6, #0
 800b848:	4c0c      	ldr	r4, [pc, #48]	@ (800b87c <__libc_init_array+0x38>)
 800b84a:	4d0d      	ldr	r5, [pc, #52]	@ (800b880 <__libc_init_array+0x3c>)
 800b84c:	1b64      	subs	r4, r4, r5
 800b84e:	10a4      	asrs	r4, r4, #2
 800b850:	42a6      	cmp	r6, r4
 800b852:	d109      	bne.n	800b868 <__libc_init_array+0x24>
 800b854:	2600      	movs	r6, #0
 800b856:	f003 f99b 	bl	800eb90 <_init>
 800b85a:	4c0a      	ldr	r4, [pc, #40]	@ (800b884 <__libc_init_array+0x40>)
 800b85c:	4d0a      	ldr	r5, [pc, #40]	@ (800b888 <__libc_init_array+0x44>)
 800b85e:	1b64      	subs	r4, r4, r5
 800b860:	10a4      	asrs	r4, r4, #2
 800b862:	42a6      	cmp	r6, r4
 800b864:	d105      	bne.n	800b872 <__libc_init_array+0x2e>
 800b866:	bd70      	pop	{r4, r5, r6, pc}
 800b868:	00b3      	lsls	r3, r6, #2
 800b86a:	58eb      	ldr	r3, [r5, r3]
 800b86c:	4798      	blx	r3
 800b86e:	3601      	adds	r6, #1
 800b870:	e7ee      	b.n	800b850 <__libc_init_array+0xc>
 800b872:	00b3      	lsls	r3, r6, #2
 800b874:	58eb      	ldr	r3, [r5, r3]
 800b876:	4798      	blx	r3
 800b878:	3601      	adds	r6, #1
 800b87a:	e7f2      	b.n	800b862 <__libc_init_array+0x1e>
 800b87c:	0800f154 	.word	0x0800f154
 800b880:	0800f154 	.word	0x0800f154
 800b884:	0800f158 	.word	0x0800f158
 800b888:	0800f154 	.word	0x0800f154

0800b88c <__retarget_lock_init_recursive>:
 800b88c:	4770      	bx	lr

0800b88e <__retarget_lock_acquire_recursive>:
 800b88e:	4770      	bx	lr

0800b890 <__retarget_lock_release_recursive>:
 800b890:	4770      	bx	lr

0800b892 <memchr>:
 800b892:	b2c9      	uxtb	r1, r1
 800b894:	1882      	adds	r2, r0, r2
 800b896:	4290      	cmp	r0, r2
 800b898:	d101      	bne.n	800b89e <memchr+0xc>
 800b89a:	2000      	movs	r0, #0
 800b89c:	4770      	bx	lr
 800b89e:	7803      	ldrb	r3, [r0, #0]
 800b8a0:	428b      	cmp	r3, r1
 800b8a2:	d0fb      	beq.n	800b89c <memchr+0xa>
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	e7f6      	b.n	800b896 <memchr+0x4>

0800b8a8 <memcpy>:
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	b510      	push	{r4, lr}
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d100      	bne.n	800b8b2 <memcpy+0xa>
 800b8b0:	bd10      	pop	{r4, pc}
 800b8b2:	5ccc      	ldrb	r4, [r1, r3]
 800b8b4:	54c4      	strb	r4, [r0, r3]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	e7f8      	b.n	800b8ac <memcpy+0x4>
	...

0800b8bc <nan>:
 800b8bc:	2000      	movs	r0, #0
 800b8be:	4901      	ldr	r1, [pc, #4]	@ (800b8c4 <nan+0x8>)
 800b8c0:	4770      	bx	lr
 800b8c2:	46c0      	nop			@ (mov r8, r8)
 800b8c4:	7ff80000 	.word	0x7ff80000

0800b8c8 <nanf>:
 800b8c8:	4800      	ldr	r0, [pc, #0]	@ (800b8cc <nanf+0x4>)
 800b8ca:	4770      	bx	lr
 800b8cc:	7fc00000 	.word	0x7fc00000

0800b8d0 <quorem>:
 800b8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8d2:	6902      	ldr	r2, [r0, #16]
 800b8d4:	690f      	ldr	r7, [r1, #16]
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	0006      	movs	r6, r0
 800b8da:	000b      	movs	r3, r1
 800b8dc:	2000      	movs	r0, #0
 800b8de:	9102      	str	r1, [sp, #8]
 800b8e0:	42ba      	cmp	r2, r7
 800b8e2:	db6d      	blt.n	800b9c0 <quorem+0xf0>
 800b8e4:	3f01      	subs	r7, #1
 800b8e6:	00bc      	lsls	r4, r7, #2
 800b8e8:	3314      	adds	r3, #20
 800b8ea:	9305      	str	r3, [sp, #20]
 800b8ec:	191b      	adds	r3, r3, r4
 800b8ee:	9303      	str	r3, [sp, #12]
 800b8f0:	0033      	movs	r3, r6
 800b8f2:	3314      	adds	r3, #20
 800b8f4:	191c      	adds	r4, r3, r4
 800b8f6:	9301      	str	r3, [sp, #4]
 800b8f8:	6823      	ldr	r3, [r4, #0]
 800b8fa:	9304      	str	r3, [sp, #16]
 800b8fc:	9b03      	ldr	r3, [sp, #12]
 800b8fe:	9804      	ldr	r0, [sp, #16]
 800b900:	681d      	ldr	r5, [r3, #0]
 800b902:	3501      	adds	r5, #1
 800b904:	0029      	movs	r1, r5
 800b906:	f7f4 fc25 	bl	8000154 <__udivsi3>
 800b90a:	9b04      	ldr	r3, [sp, #16]
 800b90c:	9000      	str	r0, [sp, #0]
 800b90e:	42ab      	cmp	r3, r5
 800b910:	d32b      	bcc.n	800b96a <quorem+0x9a>
 800b912:	9b05      	ldr	r3, [sp, #20]
 800b914:	9d01      	ldr	r5, [sp, #4]
 800b916:	469c      	mov	ip, r3
 800b918:	2300      	movs	r3, #0
 800b91a:	9305      	str	r3, [sp, #20]
 800b91c:	9304      	str	r3, [sp, #16]
 800b91e:	4662      	mov	r2, ip
 800b920:	ca08      	ldmia	r2!, {r3}
 800b922:	6828      	ldr	r0, [r5, #0]
 800b924:	4694      	mov	ip, r2
 800b926:	9a00      	ldr	r2, [sp, #0]
 800b928:	b299      	uxth	r1, r3
 800b92a:	4351      	muls	r1, r2
 800b92c:	9a05      	ldr	r2, [sp, #20]
 800b92e:	0c1b      	lsrs	r3, r3, #16
 800b930:	1889      	adds	r1, r1, r2
 800b932:	9a00      	ldr	r2, [sp, #0]
 800b934:	4353      	muls	r3, r2
 800b936:	0c0a      	lsrs	r2, r1, #16
 800b938:	189b      	adds	r3, r3, r2
 800b93a:	0c1a      	lsrs	r2, r3, #16
 800b93c:	b289      	uxth	r1, r1
 800b93e:	9205      	str	r2, [sp, #20]
 800b940:	b282      	uxth	r2, r0
 800b942:	1a52      	subs	r2, r2, r1
 800b944:	9904      	ldr	r1, [sp, #16]
 800b946:	0c00      	lsrs	r0, r0, #16
 800b948:	1852      	adds	r2, r2, r1
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	1411      	asrs	r1, r2, #16
 800b94e:	1ac3      	subs	r3, r0, r3
 800b950:	185b      	adds	r3, r3, r1
 800b952:	1419      	asrs	r1, r3, #16
 800b954:	b292      	uxth	r2, r2
 800b956:	041b      	lsls	r3, r3, #16
 800b958:	431a      	orrs	r2, r3
 800b95a:	9b03      	ldr	r3, [sp, #12]
 800b95c:	9104      	str	r1, [sp, #16]
 800b95e:	c504      	stmia	r5!, {r2}
 800b960:	4563      	cmp	r3, ip
 800b962:	d2dc      	bcs.n	800b91e <quorem+0x4e>
 800b964:	6823      	ldr	r3, [r4, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d030      	beq.n	800b9cc <quorem+0xfc>
 800b96a:	0030      	movs	r0, r6
 800b96c:	9902      	ldr	r1, [sp, #8]
 800b96e:	f001 fd7d 	bl	800d46c <__mcmp>
 800b972:	2800      	cmp	r0, #0
 800b974:	db23      	blt.n	800b9be <quorem+0xee>
 800b976:	0034      	movs	r4, r6
 800b978:	2500      	movs	r5, #0
 800b97a:	9902      	ldr	r1, [sp, #8]
 800b97c:	3414      	adds	r4, #20
 800b97e:	3114      	adds	r1, #20
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	c901      	ldmia	r1!, {r0}
 800b984:	9302      	str	r3, [sp, #8]
 800b986:	466b      	mov	r3, sp
 800b988:	891b      	ldrh	r3, [r3, #8]
 800b98a:	b282      	uxth	r2, r0
 800b98c:	1a9a      	subs	r2, r3, r2
 800b98e:	9b02      	ldr	r3, [sp, #8]
 800b990:	1952      	adds	r2, r2, r5
 800b992:	0c00      	lsrs	r0, r0, #16
 800b994:	0c1b      	lsrs	r3, r3, #16
 800b996:	1a1b      	subs	r3, r3, r0
 800b998:	1410      	asrs	r0, r2, #16
 800b99a:	181b      	adds	r3, r3, r0
 800b99c:	141d      	asrs	r5, r3, #16
 800b99e:	b292      	uxth	r2, r2
 800b9a0:	041b      	lsls	r3, r3, #16
 800b9a2:	431a      	orrs	r2, r3
 800b9a4:	9b03      	ldr	r3, [sp, #12]
 800b9a6:	c404      	stmia	r4!, {r2}
 800b9a8:	428b      	cmp	r3, r1
 800b9aa:	d2e9      	bcs.n	800b980 <quorem+0xb0>
 800b9ac:	9a01      	ldr	r2, [sp, #4]
 800b9ae:	00bb      	lsls	r3, r7, #2
 800b9b0:	18d3      	adds	r3, r2, r3
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	2a00      	cmp	r2, #0
 800b9b6:	d013      	beq.n	800b9e0 <quorem+0x110>
 800b9b8:	9b00      	ldr	r3, [sp, #0]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	9800      	ldr	r0, [sp, #0]
 800b9c0:	b007      	add	sp, #28
 800b9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9c4:	6823      	ldr	r3, [r4, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d104      	bne.n	800b9d4 <quorem+0x104>
 800b9ca:	3f01      	subs	r7, #1
 800b9cc:	9b01      	ldr	r3, [sp, #4]
 800b9ce:	3c04      	subs	r4, #4
 800b9d0:	42a3      	cmp	r3, r4
 800b9d2:	d3f7      	bcc.n	800b9c4 <quorem+0xf4>
 800b9d4:	6137      	str	r7, [r6, #16]
 800b9d6:	e7c8      	b.n	800b96a <quorem+0x9a>
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	2a00      	cmp	r2, #0
 800b9dc:	d104      	bne.n	800b9e8 <quorem+0x118>
 800b9de:	3f01      	subs	r7, #1
 800b9e0:	9a01      	ldr	r2, [sp, #4]
 800b9e2:	3b04      	subs	r3, #4
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d3f7      	bcc.n	800b9d8 <quorem+0x108>
 800b9e8:	6137      	str	r7, [r6, #16]
 800b9ea:	e7e5      	b.n	800b9b8 <quorem+0xe8>

0800b9ec <_dtoa_r>:
 800b9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ee:	0014      	movs	r4, r2
 800b9f0:	001d      	movs	r5, r3
 800b9f2:	69c6      	ldr	r6, [r0, #28]
 800b9f4:	b09d      	sub	sp, #116	@ 0x74
 800b9f6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b9f8:	950b      	str	r5, [sp, #44]	@ 0x2c
 800b9fa:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800b9fc:	9003      	str	r0, [sp, #12]
 800b9fe:	2e00      	cmp	r6, #0
 800ba00:	d10f      	bne.n	800ba22 <_dtoa_r+0x36>
 800ba02:	2010      	movs	r0, #16
 800ba04:	f001 f98a 	bl	800cd1c <malloc>
 800ba08:	9b03      	ldr	r3, [sp, #12]
 800ba0a:	1e02      	subs	r2, r0, #0
 800ba0c:	61d8      	str	r0, [r3, #28]
 800ba0e:	d104      	bne.n	800ba1a <_dtoa_r+0x2e>
 800ba10:	21ef      	movs	r1, #239	@ 0xef
 800ba12:	4bc7      	ldr	r3, [pc, #796]	@ (800bd30 <_dtoa_r+0x344>)
 800ba14:	48c7      	ldr	r0, [pc, #796]	@ (800bd34 <_dtoa_r+0x348>)
 800ba16:	f002 ff53 	bl	800e8c0 <__assert_func>
 800ba1a:	6046      	str	r6, [r0, #4]
 800ba1c:	6086      	str	r6, [r0, #8]
 800ba1e:	6006      	str	r6, [r0, #0]
 800ba20:	60c6      	str	r6, [r0, #12]
 800ba22:	9b03      	ldr	r3, [sp, #12]
 800ba24:	69db      	ldr	r3, [r3, #28]
 800ba26:	6819      	ldr	r1, [r3, #0]
 800ba28:	2900      	cmp	r1, #0
 800ba2a:	d00b      	beq.n	800ba44 <_dtoa_r+0x58>
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	2301      	movs	r3, #1
 800ba30:	4093      	lsls	r3, r2
 800ba32:	604a      	str	r2, [r1, #4]
 800ba34:	608b      	str	r3, [r1, #8]
 800ba36:	9803      	ldr	r0, [sp, #12]
 800ba38:	f001 fa82 	bl	800cf40 <_Bfree>
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	9b03      	ldr	r3, [sp, #12]
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	2d00      	cmp	r5, #0
 800ba46:	da1e      	bge.n	800ba86 <_dtoa_r+0x9a>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	603b      	str	r3, [r7, #0]
 800ba4c:	006b      	lsls	r3, r5, #1
 800ba4e:	085b      	lsrs	r3, r3, #1
 800ba50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba52:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ba54:	4bb8      	ldr	r3, [pc, #736]	@ (800bd38 <_dtoa_r+0x34c>)
 800ba56:	4ab8      	ldr	r2, [pc, #736]	@ (800bd38 <_dtoa_r+0x34c>)
 800ba58:	403b      	ands	r3, r7
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d116      	bne.n	800ba8c <_dtoa_r+0xa0>
 800ba5e:	4bb7      	ldr	r3, [pc, #732]	@ (800bd3c <_dtoa_r+0x350>)
 800ba60:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ba62:	6013      	str	r3, [r2, #0]
 800ba64:	033b      	lsls	r3, r7, #12
 800ba66:	0b1b      	lsrs	r3, r3, #12
 800ba68:	4323      	orrs	r3, r4
 800ba6a:	d101      	bne.n	800ba70 <_dtoa_r+0x84>
 800ba6c:	f000 fd83 	bl	800c576 <_dtoa_r+0xb8a>
 800ba70:	4bb3      	ldr	r3, [pc, #716]	@ (800bd40 <_dtoa_r+0x354>)
 800ba72:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ba74:	9308      	str	r3, [sp, #32]
 800ba76:	2a00      	cmp	r2, #0
 800ba78:	d002      	beq.n	800ba80 <_dtoa_r+0x94>
 800ba7a:	4bb2      	ldr	r3, [pc, #712]	@ (800bd44 <_dtoa_r+0x358>)
 800ba7c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ba7e:	6013      	str	r3, [r2, #0]
 800ba80:	9808      	ldr	r0, [sp, #32]
 800ba82:	b01d      	add	sp, #116	@ 0x74
 800ba84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba86:	2300      	movs	r3, #0
 800ba88:	603b      	str	r3, [r7, #0]
 800ba8a:	e7e2      	b.n	800ba52 <_dtoa_r+0x66>
 800ba8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba90:	9212      	str	r2, [sp, #72]	@ 0x48
 800ba92:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba94:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ba96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ba98:	2200      	movs	r2, #0
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	f7f4 fce0 	bl	8000460 <__aeabi_dcmpeq>
 800baa0:	1e06      	subs	r6, r0, #0
 800baa2:	d00b      	beq.n	800babc <_dtoa_r+0xd0>
 800baa4:	2301      	movs	r3, #1
 800baa6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800baa8:	6013      	str	r3, [r2, #0]
 800baaa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800baac:	2b00      	cmp	r3, #0
 800baae:	d002      	beq.n	800bab6 <_dtoa_r+0xca>
 800bab0:	4ba5      	ldr	r3, [pc, #660]	@ (800bd48 <_dtoa_r+0x35c>)
 800bab2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800bab4:	6013      	str	r3, [r2, #0]
 800bab6:	4ba5      	ldr	r3, [pc, #660]	@ (800bd4c <_dtoa_r+0x360>)
 800bab8:	9308      	str	r3, [sp, #32]
 800baba:	e7e1      	b.n	800ba80 <_dtoa_r+0x94>
 800babc:	ab1a      	add	r3, sp, #104	@ 0x68
 800babe:	9301      	str	r3, [sp, #4]
 800bac0:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	9803      	ldr	r0, [sp, #12]
 800bac6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bac8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800baca:	f001 fdf1 	bl	800d6b0 <__d2b>
 800bace:	007a      	lsls	r2, r7, #1
 800bad0:	9005      	str	r0, [sp, #20]
 800bad2:	0d52      	lsrs	r2, r2, #21
 800bad4:	d100      	bne.n	800bad8 <_dtoa_r+0xec>
 800bad6:	e07b      	b.n	800bbd0 <_dtoa_r+0x1e4>
 800bad8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bada:	9618      	str	r6, [sp, #96]	@ 0x60
 800badc:	0319      	lsls	r1, r3, #12
 800bade:	4b9c      	ldr	r3, [pc, #624]	@ (800bd50 <_dtoa_r+0x364>)
 800bae0:	0b09      	lsrs	r1, r1, #12
 800bae2:	430b      	orrs	r3, r1
 800bae4:	499b      	ldr	r1, [pc, #620]	@ (800bd54 <_dtoa_r+0x368>)
 800bae6:	1857      	adds	r7, r2, r1
 800bae8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800baea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800baec:	0019      	movs	r1, r3
 800baee:	2200      	movs	r2, #0
 800baf0:	4b99      	ldr	r3, [pc, #612]	@ (800bd58 <_dtoa_r+0x36c>)
 800baf2:	f7f6 faf5 	bl	80020e0 <__aeabi_dsub>
 800baf6:	4a99      	ldr	r2, [pc, #612]	@ (800bd5c <_dtoa_r+0x370>)
 800baf8:	4b99      	ldr	r3, [pc, #612]	@ (800bd60 <_dtoa_r+0x374>)
 800bafa:	f7f6 f829 	bl	8001b50 <__aeabi_dmul>
 800bafe:	4a99      	ldr	r2, [pc, #612]	@ (800bd64 <_dtoa_r+0x378>)
 800bb00:	4b99      	ldr	r3, [pc, #612]	@ (800bd68 <_dtoa_r+0x37c>)
 800bb02:	f7f5 f87d 	bl	8000c00 <__aeabi_dadd>
 800bb06:	0004      	movs	r4, r0
 800bb08:	0038      	movs	r0, r7
 800bb0a:	000d      	movs	r5, r1
 800bb0c:	f7f6 fee2 	bl	80028d4 <__aeabi_i2d>
 800bb10:	4a96      	ldr	r2, [pc, #600]	@ (800bd6c <_dtoa_r+0x380>)
 800bb12:	4b97      	ldr	r3, [pc, #604]	@ (800bd70 <_dtoa_r+0x384>)
 800bb14:	f7f6 f81c 	bl	8001b50 <__aeabi_dmul>
 800bb18:	0002      	movs	r2, r0
 800bb1a:	000b      	movs	r3, r1
 800bb1c:	0020      	movs	r0, r4
 800bb1e:	0029      	movs	r1, r5
 800bb20:	f7f5 f86e 	bl	8000c00 <__aeabi_dadd>
 800bb24:	0004      	movs	r4, r0
 800bb26:	000d      	movs	r5, r1
 800bb28:	f7f6 fe98 	bl	800285c <__aeabi_d2iz>
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	9004      	str	r0, [sp, #16]
 800bb30:	2300      	movs	r3, #0
 800bb32:	0020      	movs	r0, r4
 800bb34:	0029      	movs	r1, r5
 800bb36:	f7f4 fc99 	bl	800046c <__aeabi_dcmplt>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d00b      	beq.n	800bb56 <_dtoa_r+0x16a>
 800bb3e:	9804      	ldr	r0, [sp, #16]
 800bb40:	f7f6 fec8 	bl	80028d4 <__aeabi_i2d>
 800bb44:	002b      	movs	r3, r5
 800bb46:	0022      	movs	r2, r4
 800bb48:	f7f4 fc8a 	bl	8000460 <__aeabi_dcmpeq>
 800bb4c:	4243      	negs	r3, r0
 800bb4e:	4158      	adcs	r0, r3
 800bb50:	9b04      	ldr	r3, [sp, #16]
 800bb52:	1a1b      	subs	r3, r3, r0
 800bb54:	9304      	str	r3, [sp, #16]
 800bb56:	2301      	movs	r3, #1
 800bb58:	9315      	str	r3, [sp, #84]	@ 0x54
 800bb5a:	9b04      	ldr	r3, [sp, #16]
 800bb5c:	2b16      	cmp	r3, #22
 800bb5e:	d810      	bhi.n	800bb82 <_dtoa_r+0x196>
 800bb60:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bb62:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bb64:	9a04      	ldr	r2, [sp, #16]
 800bb66:	4b83      	ldr	r3, [pc, #524]	@ (800bd74 <_dtoa_r+0x388>)
 800bb68:	00d2      	lsls	r2, r2, #3
 800bb6a:	189b      	adds	r3, r3, r2
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	f7f4 fc7c 	bl	800046c <__aeabi_dcmplt>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d047      	beq.n	800bc08 <_dtoa_r+0x21c>
 800bb78:	9b04      	ldr	r3, [sp, #16]
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	9304      	str	r3, [sp, #16]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	9315      	str	r3, [sp, #84]	@ 0x54
 800bb82:	2200      	movs	r2, #0
 800bb84:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800bb86:	9206      	str	r2, [sp, #24]
 800bb88:	1bdb      	subs	r3, r3, r7
 800bb8a:	1e5a      	subs	r2, r3, #1
 800bb8c:	d53e      	bpl.n	800bc0c <_dtoa_r+0x220>
 800bb8e:	2201      	movs	r2, #1
 800bb90:	1ad3      	subs	r3, r2, r3
 800bb92:	9306      	str	r3, [sp, #24]
 800bb94:	2300      	movs	r3, #0
 800bb96:	930d      	str	r3, [sp, #52]	@ 0x34
 800bb98:	9b04      	ldr	r3, [sp, #16]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	db38      	blt.n	800bc10 <_dtoa_r+0x224>
 800bb9e:	9a04      	ldr	r2, [sp, #16]
 800bba0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bba2:	4694      	mov	ip, r2
 800bba4:	4463      	add	r3, ip
 800bba6:	930d      	str	r3, [sp, #52]	@ 0x34
 800bba8:	2300      	movs	r3, #0
 800bbaa:	9214      	str	r2, [sp, #80]	@ 0x50
 800bbac:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bbb0:	2401      	movs	r4, #1
 800bbb2:	2b09      	cmp	r3, #9
 800bbb4:	d867      	bhi.n	800bc86 <_dtoa_r+0x29a>
 800bbb6:	2b05      	cmp	r3, #5
 800bbb8:	dd02      	ble.n	800bbc0 <_dtoa_r+0x1d4>
 800bbba:	2400      	movs	r4, #0
 800bbbc:	3b04      	subs	r3, #4
 800bbbe:	9322      	str	r3, [sp, #136]	@ 0x88
 800bbc0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bbc2:	1e98      	subs	r0, r3, #2
 800bbc4:	2803      	cmp	r0, #3
 800bbc6:	d867      	bhi.n	800bc98 <_dtoa_r+0x2ac>
 800bbc8:	f7f4 fab0 	bl	800012c <__gnu_thumb1_case_uqi>
 800bbcc:	5b383a2b 	.word	0x5b383a2b
 800bbd0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800bbd2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800bbd4:	18f6      	adds	r6, r6, r3
 800bbd6:	4b68      	ldr	r3, [pc, #416]	@ (800bd78 <_dtoa_r+0x38c>)
 800bbd8:	18f2      	adds	r2, r6, r3
 800bbda:	2a20      	cmp	r2, #32
 800bbdc:	dd0f      	ble.n	800bbfe <_dtoa_r+0x212>
 800bbde:	2340      	movs	r3, #64	@ 0x40
 800bbe0:	1a9b      	subs	r3, r3, r2
 800bbe2:	409f      	lsls	r7, r3
 800bbe4:	4b65      	ldr	r3, [pc, #404]	@ (800bd7c <_dtoa_r+0x390>)
 800bbe6:	0038      	movs	r0, r7
 800bbe8:	18f3      	adds	r3, r6, r3
 800bbea:	40dc      	lsrs	r4, r3
 800bbec:	4320      	orrs	r0, r4
 800bbee:	f7f6 fe9f 	bl	8002930 <__aeabi_ui2d>
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	4b62      	ldr	r3, [pc, #392]	@ (800bd80 <_dtoa_r+0x394>)
 800bbf6:	1e77      	subs	r7, r6, #1
 800bbf8:	18cb      	adds	r3, r1, r3
 800bbfa:	9218      	str	r2, [sp, #96]	@ 0x60
 800bbfc:	e776      	b.n	800baec <_dtoa_r+0x100>
 800bbfe:	2320      	movs	r3, #32
 800bc00:	0020      	movs	r0, r4
 800bc02:	1a9b      	subs	r3, r3, r2
 800bc04:	4098      	lsls	r0, r3
 800bc06:	e7f2      	b.n	800bbee <_dtoa_r+0x202>
 800bc08:	9015      	str	r0, [sp, #84]	@ 0x54
 800bc0a:	e7ba      	b.n	800bb82 <_dtoa_r+0x196>
 800bc0c:	920d      	str	r2, [sp, #52]	@ 0x34
 800bc0e:	e7c3      	b.n	800bb98 <_dtoa_r+0x1ac>
 800bc10:	9b06      	ldr	r3, [sp, #24]
 800bc12:	9a04      	ldr	r2, [sp, #16]
 800bc14:	1a9b      	subs	r3, r3, r2
 800bc16:	9306      	str	r3, [sp, #24]
 800bc18:	4253      	negs	r3, r2
 800bc1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	9314      	str	r3, [sp, #80]	@ 0x50
 800bc20:	e7c5      	b.n	800bbae <_dtoa_r+0x1c2>
 800bc22:	2300      	movs	r3, #0
 800bc24:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc28:	930e      	str	r3, [sp, #56]	@ 0x38
 800bc2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	dc13      	bgt.n	800bc58 <_dtoa_r+0x26c>
 800bc30:	2301      	movs	r3, #1
 800bc32:	001a      	movs	r2, r3
 800bc34:	930e      	str	r3, [sp, #56]	@ 0x38
 800bc36:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc38:	9223      	str	r2, [sp, #140]	@ 0x8c
 800bc3a:	e00d      	b.n	800bc58 <_dtoa_r+0x26c>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e7f1      	b.n	800bc24 <_dtoa_r+0x238>
 800bc40:	2300      	movs	r3, #0
 800bc42:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bc44:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc46:	4694      	mov	ip, r2
 800bc48:	9b04      	ldr	r3, [sp, #16]
 800bc4a:	4463      	add	r3, ip
 800bc4c:	930e      	str	r3, [sp, #56]	@ 0x38
 800bc4e:	3301      	adds	r3, #1
 800bc50:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	dc00      	bgt.n	800bc58 <_dtoa_r+0x26c>
 800bc56:	2301      	movs	r3, #1
 800bc58:	9a03      	ldr	r2, [sp, #12]
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	69d0      	ldr	r0, [r2, #28]
 800bc5e:	2204      	movs	r2, #4
 800bc60:	0015      	movs	r5, r2
 800bc62:	3514      	adds	r5, #20
 800bc64:	429d      	cmp	r5, r3
 800bc66:	d91b      	bls.n	800bca0 <_dtoa_r+0x2b4>
 800bc68:	6041      	str	r1, [r0, #4]
 800bc6a:	9803      	ldr	r0, [sp, #12]
 800bc6c:	f001 f924 	bl	800ceb8 <_Balloc>
 800bc70:	9008      	str	r0, [sp, #32]
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d117      	bne.n	800bca6 <_dtoa_r+0x2ba>
 800bc76:	21b0      	movs	r1, #176	@ 0xb0
 800bc78:	4b42      	ldr	r3, [pc, #264]	@ (800bd84 <_dtoa_r+0x398>)
 800bc7a:	482e      	ldr	r0, [pc, #184]	@ (800bd34 <_dtoa_r+0x348>)
 800bc7c:	9a08      	ldr	r2, [sp, #32]
 800bc7e:	31ff      	adds	r1, #255	@ 0xff
 800bc80:	e6c9      	b.n	800ba16 <_dtoa_r+0x2a>
 800bc82:	2301      	movs	r3, #1
 800bc84:	e7dd      	b.n	800bc42 <_dtoa_r+0x256>
 800bc86:	2300      	movs	r3, #0
 800bc88:	9410      	str	r4, [sp, #64]	@ 0x40
 800bc8a:	9322      	str	r3, [sp, #136]	@ 0x88
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	930e      	str	r3, [sp, #56]	@ 0x38
 800bc90:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc92:	2200      	movs	r2, #0
 800bc94:	3313      	adds	r3, #19
 800bc96:	e7cf      	b.n	800bc38 <_dtoa_r+0x24c>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc9c:	3b02      	subs	r3, #2
 800bc9e:	e7f6      	b.n	800bc8e <_dtoa_r+0x2a2>
 800bca0:	3101      	adds	r1, #1
 800bca2:	0052      	lsls	r2, r2, #1
 800bca4:	e7dc      	b.n	800bc60 <_dtoa_r+0x274>
 800bca6:	9b03      	ldr	r3, [sp, #12]
 800bca8:	9a08      	ldr	r2, [sp, #32]
 800bcaa:	69db      	ldr	r3, [r3, #28]
 800bcac:	601a      	str	r2, [r3, #0]
 800bcae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb0:	2b0e      	cmp	r3, #14
 800bcb2:	d900      	bls.n	800bcb6 <_dtoa_r+0x2ca>
 800bcb4:	e0d9      	b.n	800be6a <_dtoa_r+0x47e>
 800bcb6:	2c00      	cmp	r4, #0
 800bcb8:	d100      	bne.n	800bcbc <_dtoa_r+0x2d0>
 800bcba:	e0d6      	b.n	800be6a <_dtoa_r+0x47e>
 800bcbc:	9b04      	ldr	r3, [sp, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	dd64      	ble.n	800bd8c <_dtoa_r+0x3a0>
 800bcc2:	210f      	movs	r1, #15
 800bcc4:	9a04      	ldr	r2, [sp, #16]
 800bcc6:	4b2b      	ldr	r3, [pc, #172]	@ (800bd74 <_dtoa_r+0x388>)
 800bcc8:	400a      	ands	r2, r1
 800bcca:	00d2      	lsls	r2, r2, #3
 800bccc:	189b      	adds	r3, r3, r2
 800bcce:	681e      	ldr	r6, [r3, #0]
 800bcd0:	685f      	ldr	r7, [r3, #4]
 800bcd2:	9b04      	ldr	r3, [sp, #16]
 800bcd4:	2402      	movs	r4, #2
 800bcd6:	111d      	asrs	r5, r3, #4
 800bcd8:	05db      	lsls	r3, r3, #23
 800bcda:	d50a      	bpl.n	800bcf2 <_dtoa_r+0x306>
 800bcdc:	4b2a      	ldr	r3, [pc, #168]	@ (800bd88 <_dtoa_r+0x39c>)
 800bcde:	400d      	ands	r5, r1
 800bce0:	6a1a      	ldr	r2, [r3, #32]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bce6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bce8:	f7f5 faee 	bl	80012c8 <__aeabi_ddiv>
 800bcec:	900a      	str	r0, [sp, #40]	@ 0x28
 800bcee:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bcf0:	3401      	adds	r4, #1
 800bcf2:	4b25      	ldr	r3, [pc, #148]	@ (800bd88 <_dtoa_r+0x39c>)
 800bcf4:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcf6:	2d00      	cmp	r5, #0
 800bcf8:	d108      	bne.n	800bd0c <_dtoa_r+0x320>
 800bcfa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bcfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bcfe:	0032      	movs	r2, r6
 800bd00:	003b      	movs	r3, r7
 800bd02:	f7f5 fae1 	bl	80012c8 <__aeabi_ddiv>
 800bd06:	900a      	str	r0, [sp, #40]	@ 0x28
 800bd08:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bd0a:	e05a      	b.n	800bdc2 <_dtoa_r+0x3d6>
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	421d      	tst	r5, r3
 800bd10:	d009      	beq.n	800bd26 <_dtoa_r+0x33a>
 800bd12:	18e4      	adds	r4, r4, r3
 800bd14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd16:	0030      	movs	r0, r6
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	0039      	movs	r1, r7
 800bd1e:	f7f5 ff17 	bl	8001b50 <__aeabi_dmul>
 800bd22:	0006      	movs	r6, r0
 800bd24:	000f      	movs	r7, r1
 800bd26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd28:	106d      	asrs	r5, r5, #1
 800bd2a:	3308      	adds	r3, #8
 800bd2c:	e7e2      	b.n	800bcf4 <_dtoa_r+0x308>
 800bd2e:	46c0      	nop			@ (mov r8, r8)
 800bd30:	0800edac 	.word	0x0800edac
 800bd34:	0800edc3 	.word	0x0800edc3
 800bd38:	7ff00000 	.word	0x7ff00000
 800bd3c:	0000270f 	.word	0x0000270f
 800bd40:	0800eda8 	.word	0x0800eda8
 800bd44:	0800edab 	.word	0x0800edab
 800bd48:	0800f111 	.word	0x0800f111
 800bd4c:	0800f110 	.word	0x0800f110
 800bd50:	3ff00000 	.word	0x3ff00000
 800bd54:	fffffc01 	.word	0xfffffc01
 800bd58:	3ff80000 	.word	0x3ff80000
 800bd5c:	636f4361 	.word	0x636f4361
 800bd60:	3fd287a7 	.word	0x3fd287a7
 800bd64:	8b60c8b3 	.word	0x8b60c8b3
 800bd68:	3fc68a28 	.word	0x3fc68a28
 800bd6c:	509f79fb 	.word	0x509f79fb
 800bd70:	3fd34413 	.word	0x3fd34413
 800bd74:	0800ef20 	.word	0x0800ef20
 800bd78:	00000432 	.word	0x00000432
 800bd7c:	00000412 	.word	0x00000412
 800bd80:	fe100000 	.word	0xfe100000
 800bd84:	0800ee1b 	.word	0x0800ee1b
 800bd88:	0800eef8 	.word	0x0800eef8
 800bd8c:	9b04      	ldr	r3, [sp, #16]
 800bd8e:	2402      	movs	r4, #2
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d016      	beq.n	800bdc2 <_dtoa_r+0x3d6>
 800bd94:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bd96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bd98:	220f      	movs	r2, #15
 800bd9a:	425d      	negs	r5, r3
 800bd9c:	402a      	ands	r2, r5
 800bd9e:	4bd7      	ldr	r3, [pc, #860]	@ (800c0fc <_dtoa_r+0x710>)
 800bda0:	00d2      	lsls	r2, r2, #3
 800bda2:	189b      	adds	r3, r3, r2
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	f7f5 fed2 	bl	8001b50 <__aeabi_dmul>
 800bdac:	2701      	movs	r7, #1
 800bdae:	2300      	movs	r3, #0
 800bdb0:	900a      	str	r0, [sp, #40]	@ 0x28
 800bdb2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bdb4:	4ed2      	ldr	r6, [pc, #840]	@ (800c100 <_dtoa_r+0x714>)
 800bdb6:	112d      	asrs	r5, r5, #4
 800bdb8:	2d00      	cmp	r5, #0
 800bdba:	d000      	beq.n	800bdbe <_dtoa_r+0x3d2>
 800bdbc:	e0ba      	b.n	800bf34 <_dtoa_r+0x548>
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1a1      	bne.n	800bd06 <_dtoa_r+0x31a>
 800bdc2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bdc4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bdc6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d100      	bne.n	800bdce <_dtoa_r+0x3e2>
 800bdcc:	e0bd      	b.n	800bf4a <_dtoa_r+0x55e>
 800bdce:	2200      	movs	r2, #0
 800bdd0:	0030      	movs	r0, r6
 800bdd2:	0039      	movs	r1, r7
 800bdd4:	4bcb      	ldr	r3, [pc, #812]	@ (800c104 <_dtoa_r+0x718>)
 800bdd6:	f7f4 fb49 	bl	800046c <__aeabi_dcmplt>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d100      	bne.n	800bde0 <_dtoa_r+0x3f4>
 800bdde:	e0b4      	b.n	800bf4a <_dtoa_r+0x55e>
 800bde0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d100      	bne.n	800bde8 <_dtoa_r+0x3fc>
 800bde6:	e0b0      	b.n	800bf4a <_dtoa_r+0x55e>
 800bde8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	dd39      	ble.n	800be62 <_dtoa_r+0x476>
 800bdee:	9b04      	ldr	r3, [sp, #16]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	930c      	str	r3, [sp, #48]	@ 0x30
 800bdf6:	0030      	movs	r0, r6
 800bdf8:	4bc3      	ldr	r3, [pc, #780]	@ (800c108 <_dtoa_r+0x71c>)
 800bdfa:	0039      	movs	r1, r7
 800bdfc:	f7f5 fea8 	bl	8001b50 <__aeabi_dmul>
 800be00:	900a      	str	r0, [sp, #40]	@ 0x28
 800be02:	910b      	str	r1, [sp, #44]	@ 0x2c
 800be04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be06:	3401      	adds	r4, #1
 800be08:	0020      	movs	r0, r4
 800be0a:	9311      	str	r3, [sp, #68]	@ 0x44
 800be0c:	f7f6 fd62 	bl	80028d4 <__aeabi_i2d>
 800be10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be14:	f7f5 fe9c 	bl	8001b50 <__aeabi_dmul>
 800be18:	4bbc      	ldr	r3, [pc, #752]	@ (800c10c <_dtoa_r+0x720>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	f7f4 fef0 	bl	8000c00 <__aeabi_dadd>
 800be20:	4bbb      	ldr	r3, [pc, #748]	@ (800c110 <_dtoa_r+0x724>)
 800be22:	0006      	movs	r6, r0
 800be24:	18cf      	adds	r7, r1, r3
 800be26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d000      	beq.n	800be2e <_dtoa_r+0x442>
 800be2c:	e091      	b.n	800bf52 <_dtoa_r+0x566>
 800be2e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800be30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be32:	2200      	movs	r2, #0
 800be34:	4bb7      	ldr	r3, [pc, #732]	@ (800c114 <_dtoa_r+0x728>)
 800be36:	f7f6 f953 	bl	80020e0 <__aeabi_dsub>
 800be3a:	0032      	movs	r2, r6
 800be3c:	003b      	movs	r3, r7
 800be3e:	0004      	movs	r4, r0
 800be40:	000d      	movs	r5, r1
 800be42:	f7f4 fb27 	bl	8000494 <__aeabi_dcmpgt>
 800be46:	2800      	cmp	r0, #0
 800be48:	d000      	beq.n	800be4c <_dtoa_r+0x460>
 800be4a:	e29d      	b.n	800c388 <_dtoa_r+0x99c>
 800be4c:	2180      	movs	r1, #128	@ 0x80
 800be4e:	0609      	lsls	r1, r1, #24
 800be50:	187b      	adds	r3, r7, r1
 800be52:	0032      	movs	r2, r6
 800be54:	0020      	movs	r0, r4
 800be56:	0029      	movs	r1, r5
 800be58:	f7f4 fb08 	bl	800046c <__aeabi_dcmplt>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d000      	beq.n	800be62 <_dtoa_r+0x476>
 800be60:	e130      	b.n	800c0c4 <_dtoa_r+0x6d8>
 800be62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be64:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800be66:	930a      	str	r3, [sp, #40]	@ 0x28
 800be68:	940b      	str	r4, [sp, #44]	@ 0x2c
 800be6a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	da00      	bge.n	800be72 <_dtoa_r+0x486>
 800be70:	e177      	b.n	800c162 <_dtoa_r+0x776>
 800be72:	9a04      	ldr	r2, [sp, #16]
 800be74:	2a0e      	cmp	r2, #14
 800be76:	dd00      	ble.n	800be7a <_dtoa_r+0x48e>
 800be78:	e173      	b.n	800c162 <_dtoa_r+0x776>
 800be7a:	4ba0      	ldr	r3, [pc, #640]	@ (800c0fc <_dtoa_r+0x710>)
 800be7c:	00d2      	lsls	r2, r2, #3
 800be7e:	189b      	adds	r3, r3, r2
 800be80:	685c      	ldr	r4, [r3, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	9306      	str	r3, [sp, #24]
 800be86:	9407      	str	r4, [sp, #28]
 800be88:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	da03      	bge.n	800be96 <_dtoa_r+0x4aa>
 800be8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be90:	2b00      	cmp	r3, #0
 800be92:	dc00      	bgt.n	800be96 <_dtoa_r+0x4aa>
 800be94:	e106      	b.n	800c0a4 <_dtoa_r+0x6b8>
 800be96:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800be98:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800be9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be9c:	9d08      	ldr	r5, [sp, #32]
 800be9e:	3b01      	subs	r3, #1
 800bea0:	195b      	adds	r3, r3, r5
 800bea2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bea4:	9a06      	ldr	r2, [sp, #24]
 800bea6:	9b07      	ldr	r3, [sp, #28]
 800bea8:	0030      	movs	r0, r6
 800beaa:	0039      	movs	r1, r7
 800beac:	f7f5 fa0c 	bl	80012c8 <__aeabi_ddiv>
 800beb0:	f7f6 fcd4 	bl	800285c <__aeabi_d2iz>
 800beb4:	9009      	str	r0, [sp, #36]	@ 0x24
 800beb6:	f7f6 fd0d 	bl	80028d4 <__aeabi_i2d>
 800beba:	9a06      	ldr	r2, [sp, #24]
 800bebc:	9b07      	ldr	r3, [sp, #28]
 800bebe:	f7f5 fe47 	bl	8001b50 <__aeabi_dmul>
 800bec2:	0002      	movs	r2, r0
 800bec4:	000b      	movs	r3, r1
 800bec6:	0030      	movs	r0, r6
 800bec8:	0039      	movs	r1, r7
 800beca:	f7f6 f909 	bl	80020e0 <__aeabi_dsub>
 800bece:	002b      	movs	r3, r5
 800bed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bed2:	3501      	adds	r5, #1
 800bed4:	3230      	adds	r2, #48	@ 0x30
 800bed6:	701a      	strb	r2, [r3, #0]
 800bed8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800beda:	002c      	movs	r4, r5
 800bedc:	429a      	cmp	r2, r3
 800bede:	d000      	beq.n	800bee2 <_dtoa_r+0x4f6>
 800bee0:	e131      	b.n	800c146 <_dtoa_r+0x75a>
 800bee2:	0002      	movs	r2, r0
 800bee4:	000b      	movs	r3, r1
 800bee6:	f7f4 fe8b 	bl	8000c00 <__aeabi_dadd>
 800beea:	9a06      	ldr	r2, [sp, #24]
 800beec:	9b07      	ldr	r3, [sp, #28]
 800beee:	0006      	movs	r6, r0
 800bef0:	000f      	movs	r7, r1
 800bef2:	f7f4 facf 	bl	8000494 <__aeabi_dcmpgt>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d000      	beq.n	800befc <_dtoa_r+0x510>
 800befa:	e10f      	b.n	800c11c <_dtoa_r+0x730>
 800befc:	9a06      	ldr	r2, [sp, #24]
 800befe:	9b07      	ldr	r3, [sp, #28]
 800bf00:	0030      	movs	r0, r6
 800bf02:	0039      	movs	r1, r7
 800bf04:	f7f4 faac 	bl	8000460 <__aeabi_dcmpeq>
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d003      	beq.n	800bf14 <_dtoa_r+0x528>
 800bf0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf0e:	07dd      	lsls	r5, r3, #31
 800bf10:	d500      	bpl.n	800bf14 <_dtoa_r+0x528>
 800bf12:	e103      	b.n	800c11c <_dtoa_r+0x730>
 800bf14:	9905      	ldr	r1, [sp, #20]
 800bf16:	9803      	ldr	r0, [sp, #12]
 800bf18:	f001 f812 	bl	800cf40 <_Bfree>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	7023      	strb	r3, [r4, #0]
 800bf20:	9b04      	ldr	r3, [sp, #16]
 800bf22:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bf24:	3301      	adds	r3, #1
 800bf26:	6013      	str	r3, [r2, #0]
 800bf28:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d100      	bne.n	800bf30 <_dtoa_r+0x544>
 800bf2e:	e5a7      	b.n	800ba80 <_dtoa_r+0x94>
 800bf30:	601c      	str	r4, [r3, #0]
 800bf32:	e5a5      	b.n	800ba80 <_dtoa_r+0x94>
 800bf34:	423d      	tst	r5, r7
 800bf36:	d005      	beq.n	800bf44 <_dtoa_r+0x558>
 800bf38:	6832      	ldr	r2, [r6, #0]
 800bf3a:	6873      	ldr	r3, [r6, #4]
 800bf3c:	f7f5 fe08 	bl	8001b50 <__aeabi_dmul>
 800bf40:	003b      	movs	r3, r7
 800bf42:	3401      	adds	r4, #1
 800bf44:	106d      	asrs	r5, r5, #1
 800bf46:	3608      	adds	r6, #8
 800bf48:	e736      	b.n	800bdb8 <_dtoa_r+0x3cc>
 800bf4a:	9b04      	ldr	r3, [sp, #16]
 800bf4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf50:	e75a      	b.n	800be08 <_dtoa_r+0x41c>
 800bf52:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf54:	4b69      	ldr	r3, [pc, #420]	@ (800c0fc <_dtoa_r+0x710>)
 800bf56:	3a01      	subs	r2, #1
 800bf58:	00d2      	lsls	r2, r2, #3
 800bf5a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800bf5c:	189b      	adds	r3, r3, r2
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	2900      	cmp	r1, #0
 800bf64:	d04c      	beq.n	800c000 <_dtoa_r+0x614>
 800bf66:	2000      	movs	r0, #0
 800bf68:	496b      	ldr	r1, [pc, #428]	@ (800c118 <_dtoa_r+0x72c>)
 800bf6a:	f7f5 f9ad 	bl	80012c8 <__aeabi_ddiv>
 800bf6e:	0032      	movs	r2, r6
 800bf70:	003b      	movs	r3, r7
 800bf72:	f7f6 f8b5 	bl	80020e0 <__aeabi_dsub>
 800bf76:	9a08      	ldr	r2, [sp, #32]
 800bf78:	0006      	movs	r6, r0
 800bf7a:	4694      	mov	ip, r2
 800bf7c:	000f      	movs	r7, r1
 800bf7e:	9b08      	ldr	r3, [sp, #32]
 800bf80:	9316      	str	r3, [sp, #88]	@ 0x58
 800bf82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf84:	4463      	add	r3, ip
 800bf86:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bf8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf8c:	f7f6 fc66 	bl	800285c <__aeabi_d2iz>
 800bf90:	0005      	movs	r5, r0
 800bf92:	f7f6 fc9f 	bl	80028d4 <__aeabi_i2d>
 800bf96:	0002      	movs	r2, r0
 800bf98:	000b      	movs	r3, r1
 800bf9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bf9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf9e:	f7f6 f89f 	bl	80020e0 <__aeabi_dsub>
 800bfa2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bfa4:	3530      	adds	r5, #48	@ 0x30
 800bfa6:	1c5c      	adds	r4, r3, #1
 800bfa8:	701d      	strb	r5, [r3, #0]
 800bfaa:	0032      	movs	r2, r6
 800bfac:	003b      	movs	r3, r7
 800bfae:	900a      	str	r0, [sp, #40]	@ 0x28
 800bfb0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bfb2:	f7f4 fa5b 	bl	800046c <__aeabi_dcmplt>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d16a      	bne.n	800c090 <_dtoa_r+0x6a4>
 800bfba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bfbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	4950      	ldr	r1, [pc, #320]	@ (800c104 <_dtoa_r+0x718>)
 800bfc2:	f7f6 f88d 	bl	80020e0 <__aeabi_dsub>
 800bfc6:	0032      	movs	r2, r6
 800bfc8:	003b      	movs	r3, r7
 800bfca:	f7f4 fa4f 	bl	800046c <__aeabi_dcmplt>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d000      	beq.n	800bfd4 <_dtoa_r+0x5e8>
 800bfd2:	e0a5      	b.n	800c120 <_dtoa_r+0x734>
 800bfd4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bfd6:	42a3      	cmp	r3, r4
 800bfd8:	d100      	bne.n	800bfdc <_dtoa_r+0x5f0>
 800bfda:	e742      	b.n	800be62 <_dtoa_r+0x476>
 800bfdc:	2200      	movs	r2, #0
 800bfde:	0030      	movs	r0, r6
 800bfe0:	0039      	movs	r1, r7
 800bfe2:	4b49      	ldr	r3, [pc, #292]	@ (800c108 <_dtoa_r+0x71c>)
 800bfe4:	f7f5 fdb4 	bl	8001b50 <__aeabi_dmul>
 800bfe8:	2200      	movs	r2, #0
 800bfea:	0006      	movs	r6, r0
 800bfec:	000f      	movs	r7, r1
 800bfee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bff2:	4b45      	ldr	r3, [pc, #276]	@ (800c108 <_dtoa_r+0x71c>)
 800bff4:	f7f5 fdac 	bl	8001b50 <__aeabi_dmul>
 800bff8:	9416      	str	r4, [sp, #88]	@ 0x58
 800bffa:	900a      	str	r0, [sp, #40]	@ 0x28
 800bffc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bffe:	e7c3      	b.n	800bf88 <_dtoa_r+0x59c>
 800c000:	0030      	movs	r0, r6
 800c002:	0039      	movs	r1, r7
 800c004:	f7f5 fda4 	bl	8001b50 <__aeabi_dmul>
 800c008:	9d08      	ldr	r5, [sp, #32]
 800c00a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c00c:	002b      	movs	r3, r5
 800c00e:	4694      	mov	ip, r2
 800c010:	9016      	str	r0, [sp, #88]	@ 0x58
 800c012:	9117      	str	r1, [sp, #92]	@ 0x5c
 800c014:	4463      	add	r3, ip
 800c016:	9319      	str	r3, [sp, #100]	@ 0x64
 800c018:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c01a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c01c:	f7f6 fc1e 	bl	800285c <__aeabi_d2iz>
 800c020:	0004      	movs	r4, r0
 800c022:	f7f6 fc57 	bl	80028d4 <__aeabi_i2d>
 800c026:	000b      	movs	r3, r1
 800c028:	0002      	movs	r2, r0
 800c02a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c02c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c02e:	f7f6 f857 	bl	80020e0 <__aeabi_dsub>
 800c032:	3430      	adds	r4, #48	@ 0x30
 800c034:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c036:	702c      	strb	r4, [r5, #0]
 800c038:	3501      	adds	r5, #1
 800c03a:	0006      	movs	r6, r0
 800c03c:	000f      	movs	r7, r1
 800c03e:	42ab      	cmp	r3, r5
 800c040:	d129      	bne.n	800c096 <_dtoa_r+0x6aa>
 800c042:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800c044:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800c046:	9b08      	ldr	r3, [sp, #32]
 800c048:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800c04a:	469c      	mov	ip, r3
 800c04c:	2200      	movs	r2, #0
 800c04e:	4b32      	ldr	r3, [pc, #200]	@ (800c118 <_dtoa_r+0x72c>)
 800c050:	4464      	add	r4, ip
 800c052:	f7f4 fdd5 	bl	8000c00 <__aeabi_dadd>
 800c056:	0002      	movs	r2, r0
 800c058:	000b      	movs	r3, r1
 800c05a:	0030      	movs	r0, r6
 800c05c:	0039      	movs	r1, r7
 800c05e:	f7f4 fa19 	bl	8000494 <__aeabi_dcmpgt>
 800c062:	2800      	cmp	r0, #0
 800c064:	d15c      	bne.n	800c120 <_dtoa_r+0x734>
 800c066:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c068:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c06a:	2000      	movs	r0, #0
 800c06c:	492a      	ldr	r1, [pc, #168]	@ (800c118 <_dtoa_r+0x72c>)
 800c06e:	f7f6 f837 	bl	80020e0 <__aeabi_dsub>
 800c072:	0002      	movs	r2, r0
 800c074:	000b      	movs	r3, r1
 800c076:	0030      	movs	r0, r6
 800c078:	0039      	movs	r1, r7
 800c07a:	f7f4 f9f7 	bl	800046c <__aeabi_dcmplt>
 800c07e:	2800      	cmp	r0, #0
 800c080:	d100      	bne.n	800c084 <_dtoa_r+0x698>
 800c082:	e6ee      	b.n	800be62 <_dtoa_r+0x476>
 800c084:	0023      	movs	r3, r4
 800c086:	3c01      	subs	r4, #1
 800c088:	7822      	ldrb	r2, [r4, #0]
 800c08a:	2a30      	cmp	r2, #48	@ 0x30
 800c08c:	d0fa      	beq.n	800c084 <_dtoa_r+0x698>
 800c08e:	001c      	movs	r4, r3
 800c090:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c092:	9304      	str	r3, [sp, #16]
 800c094:	e73e      	b.n	800bf14 <_dtoa_r+0x528>
 800c096:	2200      	movs	r2, #0
 800c098:	4b1b      	ldr	r3, [pc, #108]	@ (800c108 <_dtoa_r+0x71c>)
 800c09a:	f7f5 fd59 	bl	8001b50 <__aeabi_dmul>
 800c09e:	900a      	str	r0, [sp, #40]	@ 0x28
 800c0a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c0a2:	e7b9      	b.n	800c018 <_dtoa_r+0x62c>
 800c0a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10c      	bne.n	800c0c4 <_dtoa_r+0x6d8>
 800c0aa:	9806      	ldr	r0, [sp, #24]
 800c0ac:	9907      	ldr	r1, [sp, #28]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	4b18      	ldr	r3, [pc, #96]	@ (800c114 <_dtoa_r+0x728>)
 800c0b2:	f7f5 fd4d 	bl	8001b50 <__aeabi_dmul>
 800c0b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0ba:	f7f4 f9f5 	bl	80004a8 <__aeabi_dcmpge>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d100      	bne.n	800c0c4 <_dtoa_r+0x6d8>
 800c0c2:	e164      	b.n	800c38e <_dtoa_r+0x9a2>
 800c0c4:	2600      	movs	r6, #0
 800c0c6:	0037      	movs	r7, r6
 800c0c8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0ca:	9c08      	ldr	r4, [sp, #32]
 800c0cc:	43db      	mvns	r3, r3
 800c0ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	9304      	str	r3, [sp, #16]
 800c0d4:	0031      	movs	r1, r6
 800c0d6:	9803      	ldr	r0, [sp, #12]
 800c0d8:	f000 ff32 	bl	800cf40 <_Bfree>
 800c0dc:	2f00      	cmp	r7, #0
 800c0de:	d0d7      	beq.n	800c090 <_dtoa_r+0x6a4>
 800c0e0:	9b04      	ldr	r3, [sp, #16]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d005      	beq.n	800c0f2 <_dtoa_r+0x706>
 800c0e6:	42bb      	cmp	r3, r7
 800c0e8:	d003      	beq.n	800c0f2 <_dtoa_r+0x706>
 800c0ea:	0019      	movs	r1, r3
 800c0ec:	9803      	ldr	r0, [sp, #12]
 800c0ee:	f000 ff27 	bl	800cf40 <_Bfree>
 800c0f2:	0039      	movs	r1, r7
 800c0f4:	9803      	ldr	r0, [sp, #12]
 800c0f6:	f000 ff23 	bl	800cf40 <_Bfree>
 800c0fa:	e7c9      	b.n	800c090 <_dtoa_r+0x6a4>
 800c0fc:	0800ef20 	.word	0x0800ef20
 800c100:	0800eef8 	.word	0x0800eef8
 800c104:	3ff00000 	.word	0x3ff00000
 800c108:	40240000 	.word	0x40240000
 800c10c:	401c0000 	.word	0x401c0000
 800c110:	fcc00000 	.word	0xfcc00000
 800c114:	40140000 	.word	0x40140000
 800c118:	3fe00000 	.word	0x3fe00000
 800c11c:	9b04      	ldr	r3, [sp, #16]
 800c11e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c120:	0023      	movs	r3, r4
 800c122:	001c      	movs	r4, r3
 800c124:	3b01      	subs	r3, #1
 800c126:	781a      	ldrb	r2, [r3, #0]
 800c128:	2a39      	cmp	r2, #57	@ 0x39
 800c12a:	d108      	bne.n	800c13e <_dtoa_r+0x752>
 800c12c:	9a08      	ldr	r2, [sp, #32]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d1f7      	bne.n	800c122 <_dtoa_r+0x736>
 800c132:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c134:	9908      	ldr	r1, [sp, #32]
 800c136:	3201      	adds	r2, #1
 800c138:	920c      	str	r2, [sp, #48]	@ 0x30
 800c13a:	2230      	movs	r2, #48	@ 0x30
 800c13c:	700a      	strb	r2, [r1, #0]
 800c13e:	781a      	ldrb	r2, [r3, #0]
 800c140:	3201      	adds	r2, #1
 800c142:	701a      	strb	r2, [r3, #0]
 800c144:	e7a4      	b.n	800c090 <_dtoa_r+0x6a4>
 800c146:	2200      	movs	r2, #0
 800c148:	4bc6      	ldr	r3, [pc, #792]	@ (800c464 <_dtoa_r+0xa78>)
 800c14a:	f7f5 fd01 	bl	8001b50 <__aeabi_dmul>
 800c14e:	2200      	movs	r2, #0
 800c150:	2300      	movs	r3, #0
 800c152:	0006      	movs	r6, r0
 800c154:	000f      	movs	r7, r1
 800c156:	f7f4 f983 	bl	8000460 <__aeabi_dcmpeq>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	d100      	bne.n	800c160 <_dtoa_r+0x774>
 800c15e:	e6a1      	b.n	800bea4 <_dtoa_r+0x4b8>
 800c160:	e6d8      	b.n	800bf14 <_dtoa_r+0x528>
 800c162:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800c164:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c166:	9c06      	ldr	r4, [sp, #24]
 800c168:	2f00      	cmp	r7, #0
 800c16a:	d014      	beq.n	800c196 <_dtoa_r+0x7aa>
 800c16c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c16e:	2a01      	cmp	r2, #1
 800c170:	dd00      	ble.n	800c174 <_dtoa_r+0x788>
 800c172:	e0c8      	b.n	800c306 <_dtoa_r+0x91a>
 800c174:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c176:	2a00      	cmp	r2, #0
 800c178:	d100      	bne.n	800c17c <_dtoa_r+0x790>
 800c17a:	e0be      	b.n	800c2fa <_dtoa_r+0x90e>
 800c17c:	4aba      	ldr	r2, [pc, #744]	@ (800c468 <_dtoa_r+0xa7c>)
 800c17e:	189b      	adds	r3, r3, r2
 800c180:	9a06      	ldr	r2, [sp, #24]
 800c182:	2101      	movs	r1, #1
 800c184:	18d2      	adds	r2, r2, r3
 800c186:	9206      	str	r2, [sp, #24]
 800c188:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c18a:	9803      	ldr	r0, [sp, #12]
 800c18c:	18d3      	adds	r3, r2, r3
 800c18e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c190:	f000 ffda 	bl	800d148 <__i2b>
 800c194:	0007      	movs	r7, r0
 800c196:	2c00      	cmp	r4, #0
 800c198:	d00e      	beq.n	800c1b8 <_dtoa_r+0x7cc>
 800c19a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	dd0b      	ble.n	800c1b8 <_dtoa_r+0x7cc>
 800c1a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c1a2:	0023      	movs	r3, r4
 800c1a4:	4294      	cmp	r4, r2
 800c1a6:	dd00      	ble.n	800c1aa <_dtoa_r+0x7be>
 800c1a8:	0013      	movs	r3, r2
 800c1aa:	9a06      	ldr	r2, [sp, #24]
 800c1ac:	1ae4      	subs	r4, r4, r3
 800c1ae:	1ad2      	subs	r2, r2, r3
 800c1b0:	9206      	str	r2, [sp, #24]
 800c1b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c1b4:	1ad3      	subs	r3, r2, r3
 800c1b6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c1b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d01f      	beq.n	800c1fe <_dtoa_r+0x812>
 800c1be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d100      	bne.n	800c1c6 <_dtoa_r+0x7da>
 800c1c4:	e0b5      	b.n	800c332 <_dtoa_r+0x946>
 800c1c6:	2d00      	cmp	r5, #0
 800c1c8:	d010      	beq.n	800c1ec <_dtoa_r+0x800>
 800c1ca:	0039      	movs	r1, r7
 800c1cc:	002a      	movs	r2, r5
 800c1ce:	9803      	ldr	r0, [sp, #12]
 800c1d0:	f001 f884 	bl	800d2dc <__pow5mult>
 800c1d4:	9a05      	ldr	r2, [sp, #20]
 800c1d6:	0001      	movs	r1, r0
 800c1d8:	0007      	movs	r7, r0
 800c1da:	9803      	ldr	r0, [sp, #12]
 800c1dc:	f000 ffcc 	bl	800d178 <__multiply>
 800c1e0:	0006      	movs	r6, r0
 800c1e2:	9905      	ldr	r1, [sp, #20]
 800c1e4:	9803      	ldr	r0, [sp, #12]
 800c1e6:	f000 feab 	bl	800cf40 <_Bfree>
 800c1ea:	9605      	str	r6, [sp, #20]
 800c1ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1ee:	1b5a      	subs	r2, r3, r5
 800c1f0:	42ab      	cmp	r3, r5
 800c1f2:	d004      	beq.n	800c1fe <_dtoa_r+0x812>
 800c1f4:	9905      	ldr	r1, [sp, #20]
 800c1f6:	9803      	ldr	r0, [sp, #12]
 800c1f8:	f001 f870 	bl	800d2dc <__pow5mult>
 800c1fc:	9005      	str	r0, [sp, #20]
 800c1fe:	2101      	movs	r1, #1
 800c200:	9803      	ldr	r0, [sp, #12]
 800c202:	f000 ffa1 	bl	800d148 <__i2b>
 800c206:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c208:	0006      	movs	r6, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d100      	bne.n	800c210 <_dtoa_r+0x824>
 800c20e:	e1bc      	b.n	800c58a <_dtoa_r+0xb9e>
 800c210:	001a      	movs	r2, r3
 800c212:	0001      	movs	r1, r0
 800c214:	9803      	ldr	r0, [sp, #12]
 800c216:	f001 f861 	bl	800d2dc <__pow5mult>
 800c21a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c21c:	0006      	movs	r6, r0
 800c21e:	2500      	movs	r5, #0
 800c220:	2b01      	cmp	r3, #1
 800c222:	dc16      	bgt.n	800c252 <_dtoa_r+0x866>
 800c224:	2500      	movs	r5, #0
 800c226:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c228:	42ab      	cmp	r3, r5
 800c22a:	d10e      	bne.n	800c24a <_dtoa_r+0x85e>
 800c22c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c22e:	031b      	lsls	r3, r3, #12
 800c230:	42ab      	cmp	r3, r5
 800c232:	d10a      	bne.n	800c24a <_dtoa_r+0x85e>
 800c234:	4b8d      	ldr	r3, [pc, #564]	@ (800c46c <_dtoa_r+0xa80>)
 800c236:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c238:	4213      	tst	r3, r2
 800c23a:	d006      	beq.n	800c24a <_dtoa_r+0x85e>
 800c23c:	9b06      	ldr	r3, [sp, #24]
 800c23e:	3501      	adds	r5, #1
 800c240:	3301      	adds	r3, #1
 800c242:	9306      	str	r3, [sp, #24]
 800c244:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c246:	3301      	adds	r3, #1
 800c248:	930d      	str	r3, [sp, #52]	@ 0x34
 800c24a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c24c:	2001      	movs	r0, #1
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d008      	beq.n	800c264 <_dtoa_r+0x878>
 800c252:	6933      	ldr	r3, [r6, #16]
 800c254:	3303      	adds	r3, #3
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	18f3      	adds	r3, r6, r3
 800c25a:	6858      	ldr	r0, [r3, #4]
 800c25c:	f000 ff24 	bl	800d0a8 <__hi0bits>
 800c260:	2320      	movs	r3, #32
 800c262:	1a18      	subs	r0, r3, r0
 800c264:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c266:	1818      	adds	r0, r3, r0
 800c268:	0002      	movs	r2, r0
 800c26a:	231f      	movs	r3, #31
 800c26c:	401a      	ands	r2, r3
 800c26e:	4218      	tst	r0, r3
 800c270:	d065      	beq.n	800c33e <_dtoa_r+0x952>
 800c272:	3301      	adds	r3, #1
 800c274:	1a9b      	subs	r3, r3, r2
 800c276:	2b04      	cmp	r3, #4
 800c278:	dd5d      	ble.n	800c336 <_dtoa_r+0x94a>
 800c27a:	231c      	movs	r3, #28
 800c27c:	1a9b      	subs	r3, r3, r2
 800c27e:	9a06      	ldr	r2, [sp, #24]
 800c280:	18e4      	adds	r4, r4, r3
 800c282:	18d2      	adds	r2, r2, r3
 800c284:	9206      	str	r2, [sp, #24]
 800c286:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c288:	18d3      	adds	r3, r2, r3
 800c28a:	930d      	str	r3, [sp, #52]	@ 0x34
 800c28c:	9b06      	ldr	r3, [sp, #24]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	dd05      	ble.n	800c29e <_dtoa_r+0x8b2>
 800c292:	001a      	movs	r2, r3
 800c294:	9905      	ldr	r1, [sp, #20]
 800c296:	9803      	ldr	r0, [sp, #12]
 800c298:	f001 f87c 	bl	800d394 <__lshift>
 800c29c:	9005      	str	r0, [sp, #20]
 800c29e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	dd05      	ble.n	800c2b0 <_dtoa_r+0x8c4>
 800c2a4:	0031      	movs	r1, r6
 800c2a6:	001a      	movs	r2, r3
 800c2a8:	9803      	ldr	r0, [sp, #12]
 800c2aa:	f001 f873 	bl	800d394 <__lshift>
 800c2ae:	0006      	movs	r6, r0
 800c2b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d045      	beq.n	800c342 <_dtoa_r+0x956>
 800c2b6:	0031      	movs	r1, r6
 800c2b8:	9805      	ldr	r0, [sp, #20]
 800c2ba:	f001 f8d7 	bl	800d46c <__mcmp>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	da3f      	bge.n	800c342 <_dtoa_r+0x956>
 800c2c2:	9b04      	ldr	r3, [sp, #16]
 800c2c4:	220a      	movs	r2, #10
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c2ca:	9905      	ldr	r1, [sp, #20]
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	9803      	ldr	r0, [sp, #12]
 800c2d0:	f000 fe5a 	bl	800cf88 <__multadd>
 800c2d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c2d6:	9005      	str	r0, [sp, #20]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d100      	bne.n	800c2de <_dtoa_r+0x8f2>
 800c2dc:	e15c      	b.n	800c598 <_dtoa_r+0xbac>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	0039      	movs	r1, r7
 800c2e2:	220a      	movs	r2, #10
 800c2e4:	9803      	ldr	r0, [sp, #12]
 800c2e6:	f000 fe4f 	bl	800cf88 <__multadd>
 800c2ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2ec:	0007      	movs	r7, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	dc55      	bgt.n	800c39e <_dtoa_r+0x9b2>
 800c2f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	dc2d      	bgt.n	800c354 <_dtoa_r+0x968>
 800c2f8:	e051      	b.n	800c39e <_dtoa_r+0x9b2>
 800c2fa:	2336      	movs	r3, #54	@ 0x36
 800c2fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c2fe:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c300:	9c06      	ldr	r4, [sp, #24]
 800c302:	1a9b      	subs	r3, r3, r2
 800c304:	e73c      	b.n	800c180 <_dtoa_r+0x794>
 800c306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c308:	1e5d      	subs	r5, r3, #1
 800c30a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c30c:	42ab      	cmp	r3, r5
 800c30e:	db08      	blt.n	800c322 <_dtoa_r+0x936>
 800c310:	1b5d      	subs	r5, r3, r5
 800c312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c314:	9c06      	ldr	r4, [sp, #24]
 800c316:	2b00      	cmp	r3, #0
 800c318:	db00      	blt.n	800c31c <_dtoa_r+0x930>
 800c31a:	e731      	b.n	800c180 <_dtoa_r+0x794>
 800c31c:	1ae4      	subs	r4, r4, r3
 800c31e:	2300      	movs	r3, #0
 800c320:	e72e      	b.n	800c180 <_dtoa_r+0x794>
 800c322:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c324:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c326:	1aeb      	subs	r3, r5, r3
 800c328:	18d3      	adds	r3, r2, r3
 800c32a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800c32c:	9314      	str	r3, [sp, #80]	@ 0x50
 800c32e:	2500      	movs	r5, #0
 800c330:	e7ef      	b.n	800c312 <_dtoa_r+0x926>
 800c332:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c334:	e75e      	b.n	800c1f4 <_dtoa_r+0x808>
 800c336:	2b04      	cmp	r3, #4
 800c338:	d0a8      	beq.n	800c28c <_dtoa_r+0x8a0>
 800c33a:	331c      	adds	r3, #28
 800c33c:	e79f      	b.n	800c27e <_dtoa_r+0x892>
 800c33e:	0013      	movs	r3, r2
 800c340:	e7fb      	b.n	800c33a <_dtoa_r+0x94e>
 800c342:	9b04      	ldr	r3, [sp, #16]
 800c344:	930c      	str	r3, [sp, #48]	@ 0x30
 800c346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c348:	930e      	str	r3, [sp, #56]	@ 0x38
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	dc23      	bgt.n	800c396 <_dtoa_r+0x9aa>
 800c34e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c350:	2b02      	cmp	r3, #2
 800c352:	dd20      	ble.n	800c396 <_dtoa_r+0x9aa>
 800c354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c356:	2b00      	cmp	r3, #0
 800c358:	d000      	beq.n	800c35c <_dtoa_r+0x970>
 800c35a:	e6b5      	b.n	800c0c8 <_dtoa_r+0x6dc>
 800c35c:	0031      	movs	r1, r6
 800c35e:	2205      	movs	r2, #5
 800c360:	9803      	ldr	r0, [sp, #12]
 800c362:	f000 fe11 	bl	800cf88 <__multadd>
 800c366:	0006      	movs	r6, r0
 800c368:	0001      	movs	r1, r0
 800c36a:	9805      	ldr	r0, [sp, #20]
 800c36c:	f001 f87e 	bl	800d46c <__mcmp>
 800c370:	2800      	cmp	r0, #0
 800c372:	dc00      	bgt.n	800c376 <_dtoa_r+0x98a>
 800c374:	e6a8      	b.n	800c0c8 <_dtoa_r+0x6dc>
 800c376:	9b08      	ldr	r3, [sp, #32]
 800c378:	9a08      	ldr	r2, [sp, #32]
 800c37a:	1c5c      	adds	r4, r3, #1
 800c37c:	2331      	movs	r3, #49	@ 0x31
 800c37e:	7013      	strb	r3, [r2, #0]
 800c380:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c382:	3301      	adds	r3, #1
 800c384:	930c      	str	r3, [sp, #48]	@ 0x30
 800c386:	e6a3      	b.n	800c0d0 <_dtoa_r+0x6e4>
 800c388:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800c38a:	0037      	movs	r7, r6
 800c38c:	e7f3      	b.n	800c376 <_dtoa_r+0x98a>
 800c38e:	9b04      	ldr	r3, [sp, #16]
 800c390:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800c392:	930c      	str	r3, [sp, #48]	@ 0x30
 800c394:	e7f9      	b.n	800c38a <_dtoa_r+0x99e>
 800c396:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d100      	bne.n	800c39e <_dtoa_r+0x9b2>
 800c39c:	e100      	b.n	800c5a0 <_dtoa_r+0xbb4>
 800c39e:	2c00      	cmp	r4, #0
 800c3a0:	dd05      	ble.n	800c3ae <_dtoa_r+0x9c2>
 800c3a2:	0039      	movs	r1, r7
 800c3a4:	0022      	movs	r2, r4
 800c3a6:	9803      	ldr	r0, [sp, #12]
 800c3a8:	f000 fff4 	bl	800d394 <__lshift>
 800c3ac:	0007      	movs	r7, r0
 800c3ae:	0038      	movs	r0, r7
 800c3b0:	2d00      	cmp	r5, #0
 800c3b2:	d018      	beq.n	800c3e6 <_dtoa_r+0x9fa>
 800c3b4:	6879      	ldr	r1, [r7, #4]
 800c3b6:	9803      	ldr	r0, [sp, #12]
 800c3b8:	f000 fd7e 	bl	800ceb8 <_Balloc>
 800c3bc:	1e04      	subs	r4, r0, #0
 800c3be:	d105      	bne.n	800c3cc <_dtoa_r+0x9e0>
 800c3c0:	0022      	movs	r2, r4
 800c3c2:	4b2b      	ldr	r3, [pc, #172]	@ (800c470 <_dtoa_r+0xa84>)
 800c3c4:	482b      	ldr	r0, [pc, #172]	@ (800c474 <_dtoa_r+0xa88>)
 800c3c6:	492c      	ldr	r1, [pc, #176]	@ (800c478 <_dtoa_r+0xa8c>)
 800c3c8:	f7ff fb25 	bl	800ba16 <_dtoa_r+0x2a>
 800c3cc:	0039      	movs	r1, r7
 800c3ce:	693a      	ldr	r2, [r7, #16]
 800c3d0:	310c      	adds	r1, #12
 800c3d2:	3202      	adds	r2, #2
 800c3d4:	0092      	lsls	r2, r2, #2
 800c3d6:	300c      	adds	r0, #12
 800c3d8:	f7ff fa66 	bl	800b8a8 <memcpy>
 800c3dc:	2201      	movs	r2, #1
 800c3de:	0021      	movs	r1, r4
 800c3e0:	9803      	ldr	r0, [sp, #12]
 800c3e2:	f000 ffd7 	bl	800d394 <__lshift>
 800c3e6:	9b08      	ldr	r3, [sp, #32]
 800c3e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3ea:	9306      	str	r3, [sp, #24]
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	189b      	adds	r3, r3, r2
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	9704      	str	r7, [sp, #16]
 800c3f4:	0007      	movs	r7, r0
 800c3f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c3f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3fa:	4013      	ands	r3, r2
 800c3fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800c3fe:	0031      	movs	r1, r6
 800c400:	9805      	ldr	r0, [sp, #20]
 800c402:	f7ff fa65 	bl	800b8d0 <quorem>
 800c406:	9904      	ldr	r1, [sp, #16]
 800c408:	0005      	movs	r5, r0
 800c40a:	900a      	str	r0, [sp, #40]	@ 0x28
 800c40c:	9805      	ldr	r0, [sp, #20]
 800c40e:	f001 f82d 	bl	800d46c <__mcmp>
 800c412:	003a      	movs	r2, r7
 800c414:	900d      	str	r0, [sp, #52]	@ 0x34
 800c416:	0031      	movs	r1, r6
 800c418:	9803      	ldr	r0, [sp, #12]
 800c41a:	f001 f843 	bl	800d4a4 <__mdiff>
 800c41e:	2201      	movs	r2, #1
 800c420:	68c3      	ldr	r3, [r0, #12]
 800c422:	0004      	movs	r4, r0
 800c424:	3530      	adds	r5, #48	@ 0x30
 800c426:	9209      	str	r2, [sp, #36]	@ 0x24
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d104      	bne.n	800c436 <_dtoa_r+0xa4a>
 800c42c:	0001      	movs	r1, r0
 800c42e:	9805      	ldr	r0, [sp, #20]
 800c430:	f001 f81c 	bl	800d46c <__mcmp>
 800c434:	9009      	str	r0, [sp, #36]	@ 0x24
 800c436:	0021      	movs	r1, r4
 800c438:	9803      	ldr	r0, [sp, #12]
 800c43a:	f000 fd81 	bl	800cf40 <_Bfree>
 800c43e:	9b06      	ldr	r3, [sp, #24]
 800c440:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c442:	1c5c      	adds	r4, r3, #1
 800c444:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c446:	4313      	orrs	r3, r2
 800c448:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c44a:	4313      	orrs	r3, r2
 800c44c:	d116      	bne.n	800c47c <_dtoa_r+0xa90>
 800c44e:	2d39      	cmp	r5, #57	@ 0x39
 800c450:	d02f      	beq.n	800c4b2 <_dtoa_r+0xac6>
 800c452:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c454:	2b00      	cmp	r3, #0
 800c456:	dd01      	ble.n	800c45c <_dtoa_r+0xa70>
 800c458:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c45a:	3531      	adds	r5, #49	@ 0x31
 800c45c:	9b06      	ldr	r3, [sp, #24]
 800c45e:	701d      	strb	r5, [r3, #0]
 800c460:	e638      	b.n	800c0d4 <_dtoa_r+0x6e8>
 800c462:	46c0      	nop			@ (mov r8, r8)
 800c464:	40240000 	.word	0x40240000
 800c468:	00000433 	.word	0x00000433
 800c46c:	7ff00000 	.word	0x7ff00000
 800c470:	0800ee1b 	.word	0x0800ee1b
 800c474:	0800edc3 	.word	0x0800edc3
 800c478:	000002ef 	.word	0x000002ef
 800c47c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c47e:	2b00      	cmp	r3, #0
 800c480:	db04      	blt.n	800c48c <_dtoa_r+0xaa0>
 800c482:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c484:	4313      	orrs	r3, r2
 800c486:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c488:	4313      	orrs	r3, r2
 800c48a:	d11e      	bne.n	800c4ca <_dtoa_r+0xade>
 800c48c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c48e:	2b00      	cmp	r3, #0
 800c490:	dde4      	ble.n	800c45c <_dtoa_r+0xa70>
 800c492:	9905      	ldr	r1, [sp, #20]
 800c494:	2201      	movs	r2, #1
 800c496:	9803      	ldr	r0, [sp, #12]
 800c498:	f000 ff7c 	bl	800d394 <__lshift>
 800c49c:	0031      	movs	r1, r6
 800c49e:	9005      	str	r0, [sp, #20]
 800c4a0:	f000 ffe4 	bl	800d46c <__mcmp>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	dc02      	bgt.n	800c4ae <_dtoa_r+0xac2>
 800c4a8:	d1d8      	bne.n	800c45c <_dtoa_r+0xa70>
 800c4aa:	07eb      	lsls	r3, r5, #31
 800c4ac:	d5d6      	bpl.n	800c45c <_dtoa_r+0xa70>
 800c4ae:	2d39      	cmp	r5, #57	@ 0x39
 800c4b0:	d1d2      	bne.n	800c458 <_dtoa_r+0xa6c>
 800c4b2:	2339      	movs	r3, #57	@ 0x39
 800c4b4:	9a06      	ldr	r2, [sp, #24]
 800c4b6:	7013      	strb	r3, [r2, #0]
 800c4b8:	0023      	movs	r3, r4
 800c4ba:	001c      	movs	r4, r3
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	781a      	ldrb	r2, [r3, #0]
 800c4c0:	2a39      	cmp	r2, #57	@ 0x39
 800c4c2:	d04f      	beq.n	800c564 <_dtoa_r+0xb78>
 800c4c4:	3201      	adds	r2, #1
 800c4c6:	701a      	strb	r2, [r3, #0]
 800c4c8:	e604      	b.n	800c0d4 <_dtoa_r+0x6e8>
 800c4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	dd03      	ble.n	800c4d8 <_dtoa_r+0xaec>
 800c4d0:	2d39      	cmp	r5, #57	@ 0x39
 800c4d2:	d0ee      	beq.n	800c4b2 <_dtoa_r+0xac6>
 800c4d4:	3501      	adds	r5, #1
 800c4d6:	e7c1      	b.n	800c45c <_dtoa_r+0xa70>
 800c4d8:	9b06      	ldr	r3, [sp, #24]
 800c4da:	9a06      	ldr	r2, [sp, #24]
 800c4dc:	701d      	strb	r5, [r3, #0]
 800c4de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d02a      	beq.n	800c53a <_dtoa_r+0xb4e>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	220a      	movs	r2, #10
 800c4e8:	9905      	ldr	r1, [sp, #20]
 800c4ea:	9803      	ldr	r0, [sp, #12]
 800c4ec:	f000 fd4c 	bl	800cf88 <__multadd>
 800c4f0:	9b04      	ldr	r3, [sp, #16]
 800c4f2:	9005      	str	r0, [sp, #20]
 800c4f4:	42bb      	cmp	r3, r7
 800c4f6:	d109      	bne.n	800c50c <_dtoa_r+0xb20>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	220a      	movs	r2, #10
 800c4fc:	9904      	ldr	r1, [sp, #16]
 800c4fe:	9803      	ldr	r0, [sp, #12]
 800c500:	f000 fd42 	bl	800cf88 <__multadd>
 800c504:	9004      	str	r0, [sp, #16]
 800c506:	0007      	movs	r7, r0
 800c508:	9406      	str	r4, [sp, #24]
 800c50a:	e778      	b.n	800c3fe <_dtoa_r+0xa12>
 800c50c:	9904      	ldr	r1, [sp, #16]
 800c50e:	2300      	movs	r3, #0
 800c510:	220a      	movs	r2, #10
 800c512:	9803      	ldr	r0, [sp, #12]
 800c514:	f000 fd38 	bl	800cf88 <__multadd>
 800c518:	2300      	movs	r3, #0
 800c51a:	9004      	str	r0, [sp, #16]
 800c51c:	220a      	movs	r2, #10
 800c51e:	0039      	movs	r1, r7
 800c520:	9803      	ldr	r0, [sp, #12]
 800c522:	f000 fd31 	bl	800cf88 <__multadd>
 800c526:	e7ee      	b.n	800c506 <_dtoa_r+0xb1a>
 800c528:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c52a:	2401      	movs	r4, #1
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	dd00      	ble.n	800c532 <_dtoa_r+0xb46>
 800c530:	001c      	movs	r4, r3
 800c532:	9b08      	ldr	r3, [sp, #32]
 800c534:	191c      	adds	r4, r3, r4
 800c536:	2300      	movs	r3, #0
 800c538:	9304      	str	r3, [sp, #16]
 800c53a:	9905      	ldr	r1, [sp, #20]
 800c53c:	2201      	movs	r2, #1
 800c53e:	9803      	ldr	r0, [sp, #12]
 800c540:	f000 ff28 	bl	800d394 <__lshift>
 800c544:	0031      	movs	r1, r6
 800c546:	9005      	str	r0, [sp, #20]
 800c548:	f000 ff90 	bl	800d46c <__mcmp>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	dcb3      	bgt.n	800c4b8 <_dtoa_r+0xacc>
 800c550:	d101      	bne.n	800c556 <_dtoa_r+0xb6a>
 800c552:	07ed      	lsls	r5, r5, #31
 800c554:	d4b0      	bmi.n	800c4b8 <_dtoa_r+0xacc>
 800c556:	0023      	movs	r3, r4
 800c558:	001c      	movs	r4, r3
 800c55a:	3b01      	subs	r3, #1
 800c55c:	781a      	ldrb	r2, [r3, #0]
 800c55e:	2a30      	cmp	r2, #48	@ 0x30
 800c560:	d0fa      	beq.n	800c558 <_dtoa_r+0xb6c>
 800c562:	e5b7      	b.n	800c0d4 <_dtoa_r+0x6e8>
 800c564:	9a08      	ldr	r2, [sp, #32]
 800c566:	429a      	cmp	r2, r3
 800c568:	d1a7      	bne.n	800c4ba <_dtoa_r+0xace>
 800c56a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c56c:	3301      	adds	r3, #1
 800c56e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c570:	2331      	movs	r3, #49	@ 0x31
 800c572:	7013      	strb	r3, [r2, #0]
 800c574:	e5ae      	b.n	800c0d4 <_dtoa_r+0x6e8>
 800c576:	4b15      	ldr	r3, [pc, #84]	@ (800c5cc <_dtoa_r+0xbe0>)
 800c578:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c57a:	9308      	str	r3, [sp, #32]
 800c57c:	4b14      	ldr	r3, [pc, #80]	@ (800c5d0 <_dtoa_r+0xbe4>)
 800c57e:	2a00      	cmp	r2, #0
 800c580:	d001      	beq.n	800c586 <_dtoa_r+0xb9a>
 800c582:	f7ff fa7b 	bl	800ba7c <_dtoa_r+0x90>
 800c586:	f7ff fa7b 	bl	800ba80 <_dtoa_r+0x94>
 800c58a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	dc00      	bgt.n	800c592 <_dtoa_r+0xba6>
 800c590:	e648      	b.n	800c224 <_dtoa_r+0x838>
 800c592:	2001      	movs	r0, #1
 800c594:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c596:	e665      	b.n	800c264 <_dtoa_r+0x878>
 800c598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	dc00      	bgt.n	800c5a0 <_dtoa_r+0xbb4>
 800c59e:	e6d6      	b.n	800c34e <_dtoa_r+0x962>
 800c5a0:	2400      	movs	r4, #0
 800c5a2:	0031      	movs	r1, r6
 800c5a4:	9805      	ldr	r0, [sp, #20]
 800c5a6:	f7ff f993 	bl	800b8d0 <quorem>
 800c5aa:	9b08      	ldr	r3, [sp, #32]
 800c5ac:	3030      	adds	r0, #48	@ 0x30
 800c5ae:	5518      	strb	r0, [r3, r4]
 800c5b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5b2:	3401      	adds	r4, #1
 800c5b4:	0005      	movs	r5, r0
 800c5b6:	429c      	cmp	r4, r3
 800c5b8:	dab6      	bge.n	800c528 <_dtoa_r+0xb3c>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	220a      	movs	r2, #10
 800c5be:	9905      	ldr	r1, [sp, #20]
 800c5c0:	9803      	ldr	r0, [sp, #12]
 800c5c2:	f000 fce1 	bl	800cf88 <__multadd>
 800c5c6:	9005      	str	r0, [sp, #20]
 800c5c8:	e7eb      	b.n	800c5a2 <_dtoa_r+0xbb6>
 800c5ca:	46c0      	nop			@ (mov r8, r8)
 800c5cc:	0800ed9f 	.word	0x0800ed9f
 800c5d0:	0800eda7 	.word	0x0800eda7

0800c5d4 <_free_r>:
 800c5d4:	b570      	push	{r4, r5, r6, lr}
 800c5d6:	0005      	movs	r5, r0
 800c5d8:	1e0c      	subs	r4, r1, #0
 800c5da:	d010      	beq.n	800c5fe <_free_r+0x2a>
 800c5dc:	3c04      	subs	r4, #4
 800c5de:	6823      	ldr	r3, [r4, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	da00      	bge.n	800c5e6 <_free_r+0x12>
 800c5e4:	18e4      	adds	r4, r4, r3
 800c5e6:	0028      	movs	r0, r5
 800c5e8:	f000 fc56 	bl	800ce98 <__malloc_lock>
 800c5ec:	4a1d      	ldr	r2, [pc, #116]	@ (800c664 <_free_r+0x90>)
 800c5ee:	6813      	ldr	r3, [r2, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d105      	bne.n	800c600 <_free_r+0x2c>
 800c5f4:	6063      	str	r3, [r4, #4]
 800c5f6:	6014      	str	r4, [r2, #0]
 800c5f8:	0028      	movs	r0, r5
 800c5fa:	f000 fc55 	bl	800cea8 <__malloc_unlock>
 800c5fe:	bd70      	pop	{r4, r5, r6, pc}
 800c600:	42a3      	cmp	r3, r4
 800c602:	d908      	bls.n	800c616 <_free_r+0x42>
 800c604:	6820      	ldr	r0, [r4, #0]
 800c606:	1821      	adds	r1, r4, r0
 800c608:	428b      	cmp	r3, r1
 800c60a:	d1f3      	bne.n	800c5f4 <_free_r+0x20>
 800c60c:	6819      	ldr	r1, [r3, #0]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	1809      	adds	r1, r1, r0
 800c612:	6021      	str	r1, [r4, #0]
 800c614:	e7ee      	b.n	800c5f4 <_free_r+0x20>
 800c616:	001a      	movs	r2, r3
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d001      	beq.n	800c622 <_free_r+0x4e>
 800c61e:	42a3      	cmp	r3, r4
 800c620:	d9f9      	bls.n	800c616 <_free_r+0x42>
 800c622:	6811      	ldr	r1, [r2, #0]
 800c624:	1850      	adds	r0, r2, r1
 800c626:	42a0      	cmp	r0, r4
 800c628:	d10b      	bne.n	800c642 <_free_r+0x6e>
 800c62a:	6820      	ldr	r0, [r4, #0]
 800c62c:	1809      	adds	r1, r1, r0
 800c62e:	1850      	adds	r0, r2, r1
 800c630:	6011      	str	r1, [r2, #0]
 800c632:	4283      	cmp	r3, r0
 800c634:	d1e0      	bne.n	800c5f8 <_free_r+0x24>
 800c636:	6818      	ldr	r0, [r3, #0]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	1841      	adds	r1, r0, r1
 800c63c:	6011      	str	r1, [r2, #0]
 800c63e:	6053      	str	r3, [r2, #4]
 800c640:	e7da      	b.n	800c5f8 <_free_r+0x24>
 800c642:	42a0      	cmp	r0, r4
 800c644:	d902      	bls.n	800c64c <_free_r+0x78>
 800c646:	230c      	movs	r3, #12
 800c648:	602b      	str	r3, [r5, #0]
 800c64a:	e7d5      	b.n	800c5f8 <_free_r+0x24>
 800c64c:	6820      	ldr	r0, [r4, #0]
 800c64e:	1821      	adds	r1, r4, r0
 800c650:	428b      	cmp	r3, r1
 800c652:	d103      	bne.n	800c65c <_free_r+0x88>
 800c654:	6819      	ldr	r1, [r3, #0]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	1809      	adds	r1, r1, r0
 800c65a:	6021      	str	r1, [r4, #0]
 800c65c:	6063      	str	r3, [r4, #4]
 800c65e:	6054      	str	r4, [r2, #4]
 800c660:	e7ca      	b.n	800c5f8 <_free_r+0x24>
 800c662:	46c0      	nop			@ (mov r8, r8)
 800c664:	200008e8 	.word	0x200008e8

0800c668 <rshift>:
 800c668:	0002      	movs	r2, r0
 800c66a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c66c:	6904      	ldr	r4, [r0, #16]
 800c66e:	b085      	sub	sp, #20
 800c670:	3214      	adds	r2, #20
 800c672:	114b      	asrs	r3, r1, #5
 800c674:	0016      	movs	r6, r2
 800c676:	9302      	str	r3, [sp, #8]
 800c678:	429c      	cmp	r4, r3
 800c67a:	dd31      	ble.n	800c6e0 <rshift+0x78>
 800c67c:	261f      	movs	r6, #31
 800c67e:	000f      	movs	r7, r1
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	00a5      	lsls	r5, r4, #2
 800c684:	18d3      	adds	r3, r2, r3
 800c686:	4037      	ands	r7, r6
 800c688:	1955      	adds	r5, r2, r5
 800c68a:	9300      	str	r3, [sp, #0]
 800c68c:	9701      	str	r7, [sp, #4]
 800c68e:	4231      	tst	r1, r6
 800c690:	d10d      	bne.n	800c6ae <rshift+0x46>
 800c692:	0016      	movs	r6, r2
 800c694:	0019      	movs	r1, r3
 800c696:	428d      	cmp	r5, r1
 800c698:	d836      	bhi.n	800c708 <rshift+0xa0>
 800c69a:	9b00      	ldr	r3, [sp, #0]
 800c69c:	2600      	movs	r6, #0
 800c69e:	3b03      	subs	r3, #3
 800c6a0:	429d      	cmp	r5, r3
 800c6a2:	d302      	bcc.n	800c6aa <rshift+0x42>
 800c6a4:	9b02      	ldr	r3, [sp, #8]
 800c6a6:	1ae4      	subs	r4, r4, r3
 800c6a8:	00a6      	lsls	r6, r4, #2
 800c6aa:	1996      	adds	r6, r2, r6
 800c6ac:	e018      	b.n	800c6e0 <rshift+0x78>
 800c6ae:	2120      	movs	r1, #32
 800c6b0:	9e01      	ldr	r6, [sp, #4]
 800c6b2:	9f01      	ldr	r7, [sp, #4]
 800c6b4:	1b89      	subs	r1, r1, r6
 800c6b6:	9e00      	ldr	r6, [sp, #0]
 800c6b8:	9103      	str	r1, [sp, #12]
 800c6ba:	ce02      	ldmia	r6!, {r1}
 800c6bc:	4694      	mov	ip, r2
 800c6be:	40f9      	lsrs	r1, r7
 800c6c0:	42b5      	cmp	r5, r6
 800c6c2:	d816      	bhi.n	800c6f2 <rshift+0x8a>
 800c6c4:	9b00      	ldr	r3, [sp, #0]
 800c6c6:	2600      	movs	r6, #0
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	429d      	cmp	r5, r3
 800c6cc:	d303      	bcc.n	800c6d6 <rshift+0x6e>
 800c6ce:	9b02      	ldr	r3, [sp, #8]
 800c6d0:	1ae4      	subs	r4, r4, r3
 800c6d2:	00a6      	lsls	r6, r4, #2
 800c6d4:	3e04      	subs	r6, #4
 800c6d6:	1996      	adds	r6, r2, r6
 800c6d8:	6031      	str	r1, [r6, #0]
 800c6da:	2900      	cmp	r1, #0
 800c6dc:	d000      	beq.n	800c6e0 <rshift+0x78>
 800c6de:	3604      	adds	r6, #4
 800c6e0:	1ab1      	subs	r1, r6, r2
 800c6e2:	1089      	asrs	r1, r1, #2
 800c6e4:	6101      	str	r1, [r0, #16]
 800c6e6:	4296      	cmp	r6, r2
 800c6e8:	d101      	bne.n	800c6ee <rshift+0x86>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	6143      	str	r3, [r0, #20]
 800c6ee:	b005      	add	sp, #20
 800c6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6f2:	6837      	ldr	r7, [r6, #0]
 800c6f4:	9b03      	ldr	r3, [sp, #12]
 800c6f6:	409f      	lsls	r7, r3
 800c6f8:	430f      	orrs	r7, r1
 800c6fa:	4661      	mov	r1, ip
 800c6fc:	c180      	stmia	r1!, {r7}
 800c6fe:	468c      	mov	ip, r1
 800c700:	9b01      	ldr	r3, [sp, #4]
 800c702:	ce02      	ldmia	r6!, {r1}
 800c704:	40d9      	lsrs	r1, r3
 800c706:	e7db      	b.n	800c6c0 <rshift+0x58>
 800c708:	c980      	ldmia	r1!, {r7}
 800c70a:	c680      	stmia	r6!, {r7}
 800c70c:	e7c3      	b.n	800c696 <rshift+0x2e>

0800c70e <__hexdig_fun>:
 800c70e:	0002      	movs	r2, r0
 800c710:	3a30      	subs	r2, #48	@ 0x30
 800c712:	0003      	movs	r3, r0
 800c714:	2a09      	cmp	r2, #9
 800c716:	d802      	bhi.n	800c71e <__hexdig_fun+0x10>
 800c718:	3b20      	subs	r3, #32
 800c71a:	b2d8      	uxtb	r0, r3
 800c71c:	4770      	bx	lr
 800c71e:	0002      	movs	r2, r0
 800c720:	3a61      	subs	r2, #97	@ 0x61
 800c722:	2a05      	cmp	r2, #5
 800c724:	d801      	bhi.n	800c72a <__hexdig_fun+0x1c>
 800c726:	3b47      	subs	r3, #71	@ 0x47
 800c728:	e7f7      	b.n	800c71a <__hexdig_fun+0xc>
 800c72a:	001a      	movs	r2, r3
 800c72c:	3a41      	subs	r2, #65	@ 0x41
 800c72e:	2000      	movs	r0, #0
 800c730:	2a05      	cmp	r2, #5
 800c732:	d8f3      	bhi.n	800c71c <__hexdig_fun+0xe>
 800c734:	3b27      	subs	r3, #39	@ 0x27
 800c736:	e7f0      	b.n	800c71a <__hexdig_fun+0xc>

0800c738 <__gethex>:
 800c738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c73a:	b089      	sub	sp, #36	@ 0x24
 800c73c:	9307      	str	r3, [sp, #28]
 800c73e:	680b      	ldr	r3, [r1, #0]
 800c740:	9201      	str	r2, [sp, #4]
 800c742:	9003      	str	r0, [sp, #12]
 800c744:	9106      	str	r1, [sp, #24]
 800c746:	1c9a      	adds	r2, r3, #2
 800c748:	0011      	movs	r1, r2
 800c74a:	3201      	adds	r2, #1
 800c74c:	1e50      	subs	r0, r2, #1
 800c74e:	7800      	ldrb	r0, [r0, #0]
 800c750:	2830      	cmp	r0, #48	@ 0x30
 800c752:	d0f9      	beq.n	800c748 <__gethex+0x10>
 800c754:	1acb      	subs	r3, r1, r3
 800c756:	3b02      	subs	r3, #2
 800c758:	9305      	str	r3, [sp, #20]
 800c75a:	9100      	str	r1, [sp, #0]
 800c75c:	f7ff ffd7 	bl	800c70e <__hexdig_fun>
 800c760:	2300      	movs	r3, #0
 800c762:	001d      	movs	r5, r3
 800c764:	9302      	str	r3, [sp, #8]
 800c766:	4298      	cmp	r0, r3
 800c768:	d11e      	bne.n	800c7a8 <__gethex+0x70>
 800c76a:	2201      	movs	r2, #1
 800c76c:	49a6      	ldr	r1, [pc, #664]	@ (800ca08 <__gethex+0x2d0>)
 800c76e:	9800      	ldr	r0, [sp, #0]
 800c770:	f7fe fffe 	bl	800b770 <strncmp>
 800c774:	0007      	movs	r7, r0
 800c776:	42a8      	cmp	r0, r5
 800c778:	d000      	beq.n	800c77c <__gethex+0x44>
 800c77a:	e06a      	b.n	800c852 <__gethex+0x11a>
 800c77c:	9b00      	ldr	r3, [sp, #0]
 800c77e:	7858      	ldrb	r0, [r3, #1]
 800c780:	1c5c      	adds	r4, r3, #1
 800c782:	f7ff ffc4 	bl	800c70e <__hexdig_fun>
 800c786:	2301      	movs	r3, #1
 800c788:	9302      	str	r3, [sp, #8]
 800c78a:	42a8      	cmp	r0, r5
 800c78c:	d02f      	beq.n	800c7ee <__gethex+0xb6>
 800c78e:	9400      	str	r4, [sp, #0]
 800c790:	9b00      	ldr	r3, [sp, #0]
 800c792:	7818      	ldrb	r0, [r3, #0]
 800c794:	2830      	cmp	r0, #48	@ 0x30
 800c796:	d009      	beq.n	800c7ac <__gethex+0x74>
 800c798:	f7ff ffb9 	bl	800c70e <__hexdig_fun>
 800c79c:	4242      	negs	r2, r0
 800c79e:	4142      	adcs	r2, r0
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	0025      	movs	r5, r4
 800c7a4:	9202      	str	r2, [sp, #8]
 800c7a6:	9305      	str	r3, [sp, #20]
 800c7a8:	9c00      	ldr	r4, [sp, #0]
 800c7aa:	e004      	b.n	800c7b6 <__gethex+0x7e>
 800c7ac:	9b00      	ldr	r3, [sp, #0]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	9300      	str	r3, [sp, #0]
 800c7b2:	e7ed      	b.n	800c790 <__gethex+0x58>
 800c7b4:	3401      	adds	r4, #1
 800c7b6:	7820      	ldrb	r0, [r4, #0]
 800c7b8:	f7ff ffa9 	bl	800c70e <__hexdig_fun>
 800c7bc:	1e07      	subs	r7, r0, #0
 800c7be:	d1f9      	bne.n	800c7b4 <__gethex+0x7c>
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	0020      	movs	r0, r4
 800c7c4:	4990      	ldr	r1, [pc, #576]	@ (800ca08 <__gethex+0x2d0>)
 800c7c6:	f7fe ffd3 	bl	800b770 <strncmp>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d10d      	bne.n	800c7ea <__gethex+0xb2>
 800c7ce:	2d00      	cmp	r5, #0
 800c7d0:	d106      	bne.n	800c7e0 <__gethex+0xa8>
 800c7d2:	3401      	adds	r4, #1
 800c7d4:	0025      	movs	r5, r4
 800c7d6:	7820      	ldrb	r0, [r4, #0]
 800c7d8:	f7ff ff99 	bl	800c70e <__hexdig_fun>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d102      	bne.n	800c7e6 <__gethex+0xae>
 800c7e0:	1b2d      	subs	r5, r5, r4
 800c7e2:	00af      	lsls	r7, r5, #2
 800c7e4:	e003      	b.n	800c7ee <__gethex+0xb6>
 800c7e6:	3401      	adds	r4, #1
 800c7e8:	e7f5      	b.n	800c7d6 <__gethex+0x9e>
 800c7ea:	2d00      	cmp	r5, #0
 800c7ec:	d1f8      	bne.n	800c7e0 <__gethex+0xa8>
 800c7ee:	2220      	movs	r2, #32
 800c7f0:	7823      	ldrb	r3, [r4, #0]
 800c7f2:	0026      	movs	r6, r4
 800c7f4:	4393      	bics	r3, r2
 800c7f6:	2b50      	cmp	r3, #80	@ 0x50
 800c7f8:	d11d      	bne.n	800c836 <__gethex+0xfe>
 800c7fa:	7863      	ldrb	r3, [r4, #1]
 800c7fc:	2b2b      	cmp	r3, #43	@ 0x2b
 800c7fe:	d02d      	beq.n	800c85c <__gethex+0x124>
 800c800:	2b2d      	cmp	r3, #45	@ 0x2d
 800c802:	d02f      	beq.n	800c864 <__gethex+0x12c>
 800c804:	2300      	movs	r3, #0
 800c806:	1c66      	adds	r6, r4, #1
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	7830      	ldrb	r0, [r6, #0]
 800c80c:	f7ff ff7f 	bl	800c70e <__hexdig_fun>
 800c810:	1e43      	subs	r3, r0, #1
 800c812:	b2db      	uxtb	r3, r3
 800c814:	0005      	movs	r5, r0
 800c816:	2b18      	cmp	r3, #24
 800c818:	d82a      	bhi.n	800c870 <__gethex+0x138>
 800c81a:	7870      	ldrb	r0, [r6, #1]
 800c81c:	f7ff ff77 	bl	800c70e <__hexdig_fun>
 800c820:	1e43      	subs	r3, r0, #1
 800c822:	b2db      	uxtb	r3, r3
 800c824:	3601      	adds	r6, #1
 800c826:	3d10      	subs	r5, #16
 800c828:	2b18      	cmp	r3, #24
 800c82a:	d91d      	bls.n	800c868 <__gethex+0x130>
 800c82c:	9b04      	ldr	r3, [sp, #16]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d000      	beq.n	800c834 <__gethex+0xfc>
 800c832:	426d      	negs	r5, r5
 800c834:	197f      	adds	r7, r7, r5
 800c836:	9b06      	ldr	r3, [sp, #24]
 800c838:	601e      	str	r6, [r3, #0]
 800c83a:	9b02      	ldr	r3, [sp, #8]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d019      	beq.n	800c874 <__gethex+0x13c>
 800c840:	9b05      	ldr	r3, [sp, #20]
 800c842:	2606      	movs	r6, #6
 800c844:	425a      	negs	r2, r3
 800c846:	4153      	adcs	r3, r2
 800c848:	425b      	negs	r3, r3
 800c84a:	401e      	ands	r6, r3
 800c84c:	0030      	movs	r0, r6
 800c84e:	b009      	add	sp, #36	@ 0x24
 800c850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c852:	2301      	movs	r3, #1
 800c854:	2700      	movs	r7, #0
 800c856:	9c00      	ldr	r4, [sp, #0]
 800c858:	9302      	str	r3, [sp, #8]
 800c85a:	e7c8      	b.n	800c7ee <__gethex+0xb6>
 800c85c:	2300      	movs	r3, #0
 800c85e:	9304      	str	r3, [sp, #16]
 800c860:	1ca6      	adds	r6, r4, #2
 800c862:	e7d2      	b.n	800c80a <__gethex+0xd2>
 800c864:	2301      	movs	r3, #1
 800c866:	e7fa      	b.n	800c85e <__gethex+0x126>
 800c868:	230a      	movs	r3, #10
 800c86a:	435d      	muls	r5, r3
 800c86c:	182d      	adds	r5, r5, r0
 800c86e:	e7d4      	b.n	800c81a <__gethex+0xe2>
 800c870:	0026      	movs	r6, r4
 800c872:	e7e0      	b.n	800c836 <__gethex+0xfe>
 800c874:	9b00      	ldr	r3, [sp, #0]
 800c876:	9902      	ldr	r1, [sp, #8]
 800c878:	1ae3      	subs	r3, r4, r3
 800c87a:	3b01      	subs	r3, #1
 800c87c:	2b07      	cmp	r3, #7
 800c87e:	dc0a      	bgt.n	800c896 <__gethex+0x15e>
 800c880:	9803      	ldr	r0, [sp, #12]
 800c882:	f000 fb19 	bl	800ceb8 <_Balloc>
 800c886:	1e05      	subs	r5, r0, #0
 800c888:	d108      	bne.n	800c89c <__gethex+0x164>
 800c88a:	002a      	movs	r2, r5
 800c88c:	21e4      	movs	r1, #228	@ 0xe4
 800c88e:	4b5f      	ldr	r3, [pc, #380]	@ (800ca0c <__gethex+0x2d4>)
 800c890:	485f      	ldr	r0, [pc, #380]	@ (800ca10 <__gethex+0x2d8>)
 800c892:	f002 f815 	bl	800e8c0 <__assert_func>
 800c896:	3101      	adds	r1, #1
 800c898:	105b      	asrs	r3, r3, #1
 800c89a:	e7ef      	b.n	800c87c <__gethex+0x144>
 800c89c:	0003      	movs	r3, r0
 800c89e:	3314      	adds	r3, #20
 800c8a0:	9302      	str	r3, [sp, #8]
 800c8a2:	9305      	str	r3, [sp, #20]
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	001e      	movs	r6, r3
 800c8a8:	9304      	str	r3, [sp, #16]
 800c8aa:	9b00      	ldr	r3, [sp, #0]
 800c8ac:	42a3      	cmp	r3, r4
 800c8ae:	d338      	bcc.n	800c922 <__gethex+0x1ea>
 800c8b0:	9c05      	ldr	r4, [sp, #20]
 800c8b2:	9b02      	ldr	r3, [sp, #8]
 800c8b4:	c440      	stmia	r4!, {r6}
 800c8b6:	1ae4      	subs	r4, r4, r3
 800c8b8:	10a4      	asrs	r4, r4, #2
 800c8ba:	0030      	movs	r0, r6
 800c8bc:	612c      	str	r4, [r5, #16]
 800c8be:	f000 fbf3 	bl	800d0a8 <__hi0bits>
 800c8c2:	9b01      	ldr	r3, [sp, #4]
 800c8c4:	0164      	lsls	r4, r4, #5
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	1a26      	subs	r6, r4, r0
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	429e      	cmp	r6, r3
 800c8ce:	dd52      	ble.n	800c976 <__gethex+0x23e>
 800c8d0:	1af6      	subs	r6, r6, r3
 800c8d2:	0031      	movs	r1, r6
 800c8d4:	0028      	movs	r0, r5
 800c8d6:	f000 ff96 	bl	800d806 <__any_on>
 800c8da:	1e04      	subs	r4, r0, #0
 800c8dc:	d00f      	beq.n	800c8fe <__gethex+0x1c6>
 800c8de:	2401      	movs	r4, #1
 800c8e0:	231f      	movs	r3, #31
 800c8e2:	0020      	movs	r0, r4
 800c8e4:	1e72      	subs	r2, r6, #1
 800c8e6:	4013      	ands	r3, r2
 800c8e8:	4098      	lsls	r0, r3
 800c8ea:	0003      	movs	r3, r0
 800c8ec:	1151      	asrs	r1, r2, #5
 800c8ee:	9802      	ldr	r0, [sp, #8]
 800c8f0:	0089      	lsls	r1, r1, #2
 800c8f2:	5809      	ldr	r1, [r1, r0]
 800c8f4:	4219      	tst	r1, r3
 800c8f6:	d002      	beq.n	800c8fe <__gethex+0x1c6>
 800c8f8:	42a2      	cmp	r2, r4
 800c8fa:	dc34      	bgt.n	800c966 <__gethex+0x22e>
 800c8fc:	2402      	movs	r4, #2
 800c8fe:	0031      	movs	r1, r6
 800c900:	0028      	movs	r0, r5
 800c902:	f7ff feb1 	bl	800c668 <rshift>
 800c906:	19bf      	adds	r7, r7, r6
 800c908:	9b01      	ldr	r3, [sp, #4]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	42bb      	cmp	r3, r7
 800c90e:	da42      	bge.n	800c996 <__gethex+0x25e>
 800c910:	0029      	movs	r1, r5
 800c912:	9803      	ldr	r0, [sp, #12]
 800c914:	f000 fb14 	bl	800cf40 <_Bfree>
 800c918:	2300      	movs	r3, #0
 800c91a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c91c:	26a3      	movs	r6, #163	@ 0xa3
 800c91e:	6013      	str	r3, [r2, #0]
 800c920:	e794      	b.n	800c84c <__gethex+0x114>
 800c922:	3c01      	subs	r4, #1
 800c924:	7823      	ldrb	r3, [r4, #0]
 800c926:	2b2e      	cmp	r3, #46	@ 0x2e
 800c928:	d012      	beq.n	800c950 <__gethex+0x218>
 800c92a:	9b04      	ldr	r3, [sp, #16]
 800c92c:	2b20      	cmp	r3, #32
 800c92e:	d104      	bne.n	800c93a <__gethex+0x202>
 800c930:	9b05      	ldr	r3, [sp, #20]
 800c932:	c340      	stmia	r3!, {r6}
 800c934:	2600      	movs	r6, #0
 800c936:	9305      	str	r3, [sp, #20]
 800c938:	9604      	str	r6, [sp, #16]
 800c93a:	7820      	ldrb	r0, [r4, #0]
 800c93c:	f7ff fee7 	bl	800c70e <__hexdig_fun>
 800c940:	230f      	movs	r3, #15
 800c942:	4018      	ands	r0, r3
 800c944:	9b04      	ldr	r3, [sp, #16]
 800c946:	4098      	lsls	r0, r3
 800c948:	3304      	adds	r3, #4
 800c94a:	4306      	orrs	r6, r0
 800c94c:	9304      	str	r3, [sp, #16]
 800c94e:	e7ac      	b.n	800c8aa <__gethex+0x172>
 800c950:	9b00      	ldr	r3, [sp, #0]
 800c952:	42a3      	cmp	r3, r4
 800c954:	d8e9      	bhi.n	800c92a <__gethex+0x1f2>
 800c956:	2201      	movs	r2, #1
 800c958:	0020      	movs	r0, r4
 800c95a:	492b      	ldr	r1, [pc, #172]	@ (800ca08 <__gethex+0x2d0>)
 800c95c:	f7fe ff08 	bl	800b770 <strncmp>
 800c960:	2800      	cmp	r0, #0
 800c962:	d1e2      	bne.n	800c92a <__gethex+0x1f2>
 800c964:	e7a1      	b.n	800c8aa <__gethex+0x172>
 800c966:	0028      	movs	r0, r5
 800c968:	1eb1      	subs	r1, r6, #2
 800c96a:	f000 ff4c 	bl	800d806 <__any_on>
 800c96e:	2800      	cmp	r0, #0
 800c970:	d0c4      	beq.n	800c8fc <__gethex+0x1c4>
 800c972:	2403      	movs	r4, #3
 800c974:	e7c3      	b.n	800c8fe <__gethex+0x1c6>
 800c976:	9b00      	ldr	r3, [sp, #0]
 800c978:	2400      	movs	r4, #0
 800c97a:	429e      	cmp	r6, r3
 800c97c:	dac4      	bge.n	800c908 <__gethex+0x1d0>
 800c97e:	1b9e      	subs	r6, r3, r6
 800c980:	0029      	movs	r1, r5
 800c982:	0032      	movs	r2, r6
 800c984:	9803      	ldr	r0, [sp, #12]
 800c986:	f000 fd05 	bl	800d394 <__lshift>
 800c98a:	0003      	movs	r3, r0
 800c98c:	3314      	adds	r3, #20
 800c98e:	0005      	movs	r5, r0
 800c990:	1bbf      	subs	r7, r7, r6
 800c992:	9302      	str	r3, [sp, #8]
 800c994:	e7b8      	b.n	800c908 <__gethex+0x1d0>
 800c996:	9b01      	ldr	r3, [sp, #4]
 800c998:	685e      	ldr	r6, [r3, #4]
 800c99a:	42be      	cmp	r6, r7
 800c99c:	dd6f      	ble.n	800ca7e <__gethex+0x346>
 800c99e:	9b00      	ldr	r3, [sp, #0]
 800c9a0:	1bf6      	subs	r6, r6, r7
 800c9a2:	42b3      	cmp	r3, r6
 800c9a4:	dc36      	bgt.n	800ca14 <__gethex+0x2dc>
 800c9a6:	9b01      	ldr	r3, [sp, #4]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	d024      	beq.n	800c9f8 <__gethex+0x2c0>
 800c9ae:	2b03      	cmp	r3, #3
 800c9b0:	d026      	beq.n	800ca00 <__gethex+0x2c8>
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d117      	bne.n	800c9e6 <__gethex+0x2ae>
 800c9b6:	9b00      	ldr	r3, [sp, #0]
 800c9b8:	42b3      	cmp	r3, r6
 800c9ba:	d114      	bne.n	800c9e6 <__gethex+0x2ae>
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d10b      	bne.n	800c9d8 <__gethex+0x2a0>
 800c9c0:	9b01      	ldr	r3, [sp, #4]
 800c9c2:	9a07      	ldr	r2, [sp, #28]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	2662      	movs	r6, #98	@ 0x62
 800c9c8:	6013      	str	r3, [r2, #0]
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	9a02      	ldr	r2, [sp, #8]
 800c9ce:	612b      	str	r3, [r5, #16]
 800c9d0:	6013      	str	r3, [r2, #0]
 800c9d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9d4:	601d      	str	r5, [r3, #0]
 800c9d6:	e739      	b.n	800c84c <__gethex+0x114>
 800c9d8:	9900      	ldr	r1, [sp, #0]
 800c9da:	0028      	movs	r0, r5
 800c9dc:	3901      	subs	r1, #1
 800c9de:	f000 ff12 	bl	800d806 <__any_on>
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d1ec      	bne.n	800c9c0 <__gethex+0x288>
 800c9e6:	0029      	movs	r1, r5
 800c9e8:	9803      	ldr	r0, [sp, #12]
 800c9ea:	f000 faa9 	bl	800cf40 <_Bfree>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9f2:	2650      	movs	r6, #80	@ 0x50
 800c9f4:	6013      	str	r3, [r2, #0]
 800c9f6:	e729      	b.n	800c84c <__gethex+0x114>
 800c9f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1f3      	bne.n	800c9e6 <__gethex+0x2ae>
 800c9fe:	e7df      	b.n	800c9c0 <__gethex+0x288>
 800ca00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1dc      	bne.n	800c9c0 <__gethex+0x288>
 800ca06:	e7ee      	b.n	800c9e6 <__gethex+0x2ae>
 800ca08:	0800ed08 	.word	0x0800ed08
 800ca0c:	0800ee1b 	.word	0x0800ee1b
 800ca10:	0800ee2c 	.word	0x0800ee2c
 800ca14:	1e77      	subs	r7, r6, #1
 800ca16:	2c00      	cmp	r4, #0
 800ca18:	d12f      	bne.n	800ca7a <__gethex+0x342>
 800ca1a:	2f00      	cmp	r7, #0
 800ca1c:	d004      	beq.n	800ca28 <__gethex+0x2f0>
 800ca1e:	0039      	movs	r1, r7
 800ca20:	0028      	movs	r0, r5
 800ca22:	f000 fef0 	bl	800d806 <__any_on>
 800ca26:	0004      	movs	r4, r0
 800ca28:	231f      	movs	r3, #31
 800ca2a:	117a      	asrs	r2, r7, #5
 800ca2c:	401f      	ands	r7, r3
 800ca2e:	3b1e      	subs	r3, #30
 800ca30:	40bb      	lsls	r3, r7
 800ca32:	9902      	ldr	r1, [sp, #8]
 800ca34:	0092      	lsls	r2, r2, #2
 800ca36:	5852      	ldr	r2, [r2, r1]
 800ca38:	421a      	tst	r2, r3
 800ca3a:	d001      	beq.n	800ca40 <__gethex+0x308>
 800ca3c:	2302      	movs	r3, #2
 800ca3e:	431c      	orrs	r4, r3
 800ca40:	9b00      	ldr	r3, [sp, #0]
 800ca42:	0031      	movs	r1, r6
 800ca44:	1b9b      	subs	r3, r3, r6
 800ca46:	2602      	movs	r6, #2
 800ca48:	0028      	movs	r0, r5
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	f7ff fe0c 	bl	800c668 <rshift>
 800ca50:	9b01      	ldr	r3, [sp, #4]
 800ca52:	685f      	ldr	r7, [r3, #4]
 800ca54:	2c00      	cmp	r4, #0
 800ca56:	d03f      	beq.n	800cad8 <__gethex+0x3a0>
 800ca58:	9b01      	ldr	r3, [sp, #4]
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	d010      	beq.n	800ca82 <__gethex+0x34a>
 800ca60:	2b03      	cmp	r3, #3
 800ca62:	d012      	beq.n	800ca8a <__gethex+0x352>
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d106      	bne.n	800ca76 <__gethex+0x33e>
 800ca68:	07a2      	lsls	r2, r4, #30
 800ca6a:	d504      	bpl.n	800ca76 <__gethex+0x33e>
 800ca6c:	9a02      	ldr	r2, [sp, #8]
 800ca6e:	6812      	ldr	r2, [r2, #0]
 800ca70:	4314      	orrs	r4, r2
 800ca72:	421c      	tst	r4, r3
 800ca74:	d10c      	bne.n	800ca90 <__gethex+0x358>
 800ca76:	2310      	movs	r3, #16
 800ca78:	e02d      	b.n	800cad6 <__gethex+0x39e>
 800ca7a:	2401      	movs	r4, #1
 800ca7c:	e7d4      	b.n	800ca28 <__gethex+0x2f0>
 800ca7e:	2601      	movs	r6, #1
 800ca80:	e7e8      	b.n	800ca54 <__gethex+0x31c>
 800ca82:	2301      	movs	r3, #1
 800ca84:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca86:	1a9b      	subs	r3, r3, r2
 800ca88:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d0f2      	beq.n	800ca76 <__gethex+0x33e>
 800ca90:	692b      	ldr	r3, [r5, #16]
 800ca92:	2000      	movs	r0, #0
 800ca94:	9302      	str	r3, [sp, #8]
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	9304      	str	r3, [sp, #16]
 800ca9a:	002b      	movs	r3, r5
 800ca9c:	9a04      	ldr	r2, [sp, #16]
 800ca9e:	3314      	adds	r3, #20
 800caa0:	1899      	adds	r1, r3, r2
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	1c54      	adds	r4, r2, #1
 800caa6:	d01c      	beq.n	800cae2 <__gethex+0x3aa>
 800caa8:	3201      	adds	r2, #1
 800caaa:	601a      	str	r2, [r3, #0]
 800caac:	002b      	movs	r3, r5
 800caae:	3314      	adds	r3, #20
 800cab0:	2e02      	cmp	r6, #2
 800cab2:	d13f      	bne.n	800cb34 <__gethex+0x3fc>
 800cab4:	9a01      	ldr	r2, [sp, #4]
 800cab6:	9900      	ldr	r1, [sp, #0]
 800cab8:	6812      	ldr	r2, [r2, #0]
 800caba:	3a01      	subs	r2, #1
 800cabc:	428a      	cmp	r2, r1
 800cabe:	d109      	bne.n	800cad4 <__gethex+0x39c>
 800cac0:	000a      	movs	r2, r1
 800cac2:	201f      	movs	r0, #31
 800cac4:	4010      	ands	r0, r2
 800cac6:	2201      	movs	r2, #1
 800cac8:	4082      	lsls	r2, r0
 800caca:	1149      	asrs	r1, r1, #5
 800cacc:	0089      	lsls	r1, r1, #2
 800cace:	58cb      	ldr	r3, [r1, r3]
 800cad0:	4213      	tst	r3, r2
 800cad2:	d13d      	bne.n	800cb50 <__gethex+0x418>
 800cad4:	2320      	movs	r3, #32
 800cad6:	431e      	orrs	r6, r3
 800cad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cada:	601d      	str	r5, [r3, #0]
 800cadc:	9b07      	ldr	r3, [sp, #28]
 800cade:	601f      	str	r7, [r3, #0]
 800cae0:	e6b4      	b.n	800c84c <__gethex+0x114>
 800cae2:	c301      	stmia	r3!, {r0}
 800cae4:	4299      	cmp	r1, r3
 800cae6:	d8dc      	bhi.n	800caa2 <__gethex+0x36a>
 800cae8:	68ab      	ldr	r3, [r5, #8]
 800caea:	9a02      	ldr	r2, [sp, #8]
 800caec:	429a      	cmp	r2, r3
 800caee:	db18      	blt.n	800cb22 <__gethex+0x3ea>
 800caf0:	6869      	ldr	r1, [r5, #4]
 800caf2:	9803      	ldr	r0, [sp, #12]
 800caf4:	3101      	adds	r1, #1
 800caf6:	f000 f9df 	bl	800ceb8 <_Balloc>
 800cafa:	1e04      	subs	r4, r0, #0
 800cafc:	d104      	bne.n	800cb08 <__gethex+0x3d0>
 800cafe:	0022      	movs	r2, r4
 800cb00:	2184      	movs	r1, #132	@ 0x84
 800cb02:	4b1d      	ldr	r3, [pc, #116]	@ (800cb78 <__gethex+0x440>)
 800cb04:	481d      	ldr	r0, [pc, #116]	@ (800cb7c <__gethex+0x444>)
 800cb06:	e6c4      	b.n	800c892 <__gethex+0x15a>
 800cb08:	0029      	movs	r1, r5
 800cb0a:	692a      	ldr	r2, [r5, #16]
 800cb0c:	310c      	adds	r1, #12
 800cb0e:	3202      	adds	r2, #2
 800cb10:	0092      	lsls	r2, r2, #2
 800cb12:	300c      	adds	r0, #12
 800cb14:	f7fe fec8 	bl	800b8a8 <memcpy>
 800cb18:	0029      	movs	r1, r5
 800cb1a:	9803      	ldr	r0, [sp, #12]
 800cb1c:	f000 fa10 	bl	800cf40 <_Bfree>
 800cb20:	0025      	movs	r5, r4
 800cb22:	692b      	ldr	r3, [r5, #16]
 800cb24:	1c5a      	adds	r2, r3, #1
 800cb26:	612a      	str	r2, [r5, #16]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	3304      	adds	r3, #4
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	18eb      	adds	r3, r5, r3
 800cb30:	605a      	str	r2, [r3, #4]
 800cb32:	e7bb      	b.n	800caac <__gethex+0x374>
 800cb34:	692a      	ldr	r2, [r5, #16]
 800cb36:	9902      	ldr	r1, [sp, #8]
 800cb38:	428a      	cmp	r2, r1
 800cb3a:	dd0b      	ble.n	800cb54 <__gethex+0x41c>
 800cb3c:	2101      	movs	r1, #1
 800cb3e:	0028      	movs	r0, r5
 800cb40:	f7ff fd92 	bl	800c668 <rshift>
 800cb44:	9b01      	ldr	r3, [sp, #4]
 800cb46:	3701      	adds	r7, #1
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	42bb      	cmp	r3, r7
 800cb4c:	da00      	bge.n	800cb50 <__gethex+0x418>
 800cb4e:	e6df      	b.n	800c910 <__gethex+0x1d8>
 800cb50:	2601      	movs	r6, #1
 800cb52:	e7bf      	b.n	800cad4 <__gethex+0x39c>
 800cb54:	221f      	movs	r2, #31
 800cb56:	9c00      	ldr	r4, [sp, #0]
 800cb58:	9900      	ldr	r1, [sp, #0]
 800cb5a:	4014      	ands	r4, r2
 800cb5c:	4211      	tst	r1, r2
 800cb5e:	d0f7      	beq.n	800cb50 <__gethex+0x418>
 800cb60:	9a04      	ldr	r2, [sp, #16]
 800cb62:	189b      	adds	r3, r3, r2
 800cb64:	3b04      	subs	r3, #4
 800cb66:	6818      	ldr	r0, [r3, #0]
 800cb68:	f000 fa9e 	bl	800d0a8 <__hi0bits>
 800cb6c:	2320      	movs	r3, #32
 800cb6e:	1b1b      	subs	r3, r3, r4
 800cb70:	4298      	cmp	r0, r3
 800cb72:	dbe3      	blt.n	800cb3c <__gethex+0x404>
 800cb74:	e7ec      	b.n	800cb50 <__gethex+0x418>
 800cb76:	46c0      	nop			@ (mov r8, r8)
 800cb78:	0800ee1b 	.word	0x0800ee1b
 800cb7c:	0800ee2c 	.word	0x0800ee2c

0800cb80 <L_shift>:
 800cb80:	2308      	movs	r3, #8
 800cb82:	b570      	push	{r4, r5, r6, lr}
 800cb84:	2520      	movs	r5, #32
 800cb86:	1a9a      	subs	r2, r3, r2
 800cb88:	0092      	lsls	r2, r2, #2
 800cb8a:	1aad      	subs	r5, r5, r2
 800cb8c:	6843      	ldr	r3, [r0, #4]
 800cb8e:	6804      	ldr	r4, [r0, #0]
 800cb90:	001e      	movs	r6, r3
 800cb92:	40ae      	lsls	r6, r5
 800cb94:	40d3      	lsrs	r3, r2
 800cb96:	4334      	orrs	r4, r6
 800cb98:	6004      	str	r4, [r0, #0]
 800cb9a:	6043      	str	r3, [r0, #4]
 800cb9c:	3004      	adds	r0, #4
 800cb9e:	4288      	cmp	r0, r1
 800cba0:	d3f4      	bcc.n	800cb8c <L_shift+0xc>
 800cba2:	bd70      	pop	{r4, r5, r6, pc}

0800cba4 <__match>:
 800cba4:	b530      	push	{r4, r5, lr}
 800cba6:	6803      	ldr	r3, [r0, #0]
 800cba8:	780c      	ldrb	r4, [r1, #0]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	2c00      	cmp	r4, #0
 800cbae:	d102      	bne.n	800cbb6 <__match+0x12>
 800cbb0:	6003      	str	r3, [r0, #0]
 800cbb2:	2001      	movs	r0, #1
 800cbb4:	bd30      	pop	{r4, r5, pc}
 800cbb6:	781a      	ldrb	r2, [r3, #0]
 800cbb8:	0015      	movs	r5, r2
 800cbba:	3d41      	subs	r5, #65	@ 0x41
 800cbbc:	2d19      	cmp	r5, #25
 800cbbe:	d800      	bhi.n	800cbc2 <__match+0x1e>
 800cbc0:	3220      	adds	r2, #32
 800cbc2:	3101      	adds	r1, #1
 800cbc4:	42a2      	cmp	r2, r4
 800cbc6:	d0ef      	beq.n	800cba8 <__match+0x4>
 800cbc8:	2000      	movs	r0, #0
 800cbca:	e7f3      	b.n	800cbb4 <__match+0x10>

0800cbcc <__hexnan>:
 800cbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbce:	680b      	ldr	r3, [r1, #0]
 800cbd0:	b08b      	sub	sp, #44	@ 0x2c
 800cbd2:	9201      	str	r2, [sp, #4]
 800cbd4:	9901      	ldr	r1, [sp, #4]
 800cbd6:	115a      	asrs	r2, r3, #5
 800cbd8:	0092      	lsls	r2, r2, #2
 800cbda:	188a      	adds	r2, r1, r2
 800cbdc:	9202      	str	r2, [sp, #8]
 800cbde:	0019      	movs	r1, r3
 800cbe0:	221f      	movs	r2, #31
 800cbe2:	4011      	ands	r1, r2
 800cbe4:	9008      	str	r0, [sp, #32]
 800cbe6:	9106      	str	r1, [sp, #24]
 800cbe8:	4213      	tst	r3, r2
 800cbea:	d002      	beq.n	800cbf2 <__hexnan+0x26>
 800cbec:	9b02      	ldr	r3, [sp, #8]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	9302      	str	r3, [sp, #8]
 800cbf2:	9b02      	ldr	r3, [sp, #8]
 800cbf4:	2500      	movs	r5, #0
 800cbf6:	1f1f      	subs	r7, r3, #4
 800cbf8:	003e      	movs	r6, r7
 800cbfa:	003c      	movs	r4, r7
 800cbfc:	9b08      	ldr	r3, [sp, #32]
 800cbfe:	603d      	str	r5, [r7, #0]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	9507      	str	r5, [sp, #28]
 800cc04:	9305      	str	r3, [sp, #20]
 800cc06:	9503      	str	r5, [sp, #12]
 800cc08:	9b05      	ldr	r3, [sp, #20]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc0e:	9b05      	ldr	r3, [sp, #20]
 800cc10:	785b      	ldrb	r3, [r3, #1]
 800cc12:	9304      	str	r3, [sp, #16]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d028      	beq.n	800cc6a <__hexnan+0x9e>
 800cc18:	9804      	ldr	r0, [sp, #16]
 800cc1a:	f7ff fd78 	bl	800c70e <__hexdig_fun>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d155      	bne.n	800ccce <__hexnan+0x102>
 800cc22:	9b04      	ldr	r3, [sp, #16]
 800cc24:	2b20      	cmp	r3, #32
 800cc26:	d819      	bhi.n	800cc5c <__hexnan+0x90>
 800cc28:	9b03      	ldr	r3, [sp, #12]
 800cc2a:	9a07      	ldr	r2, [sp, #28]
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	dd12      	ble.n	800cc56 <__hexnan+0x8a>
 800cc30:	42b4      	cmp	r4, r6
 800cc32:	d206      	bcs.n	800cc42 <__hexnan+0x76>
 800cc34:	2d07      	cmp	r5, #7
 800cc36:	dc04      	bgt.n	800cc42 <__hexnan+0x76>
 800cc38:	002a      	movs	r2, r5
 800cc3a:	0031      	movs	r1, r6
 800cc3c:	0020      	movs	r0, r4
 800cc3e:	f7ff ff9f 	bl	800cb80 <L_shift>
 800cc42:	9b01      	ldr	r3, [sp, #4]
 800cc44:	2508      	movs	r5, #8
 800cc46:	429c      	cmp	r4, r3
 800cc48:	d905      	bls.n	800cc56 <__hexnan+0x8a>
 800cc4a:	1f26      	subs	r6, r4, #4
 800cc4c:	2500      	movs	r5, #0
 800cc4e:	0034      	movs	r4, r6
 800cc50:	9b03      	ldr	r3, [sp, #12]
 800cc52:	6035      	str	r5, [r6, #0]
 800cc54:	9307      	str	r3, [sp, #28]
 800cc56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc58:	9305      	str	r3, [sp, #20]
 800cc5a:	e7d5      	b.n	800cc08 <__hexnan+0x3c>
 800cc5c:	9b04      	ldr	r3, [sp, #16]
 800cc5e:	2b29      	cmp	r3, #41	@ 0x29
 800cc60:	d15a      	bne.n	800cd18 <__hexnan+0x14c>
 800cc62:	9b05      	ldr	r3, [sp, #20]
 800cc64:	9a08      	ldr	r2, [sp, #32]
 800cc66:	3302      	adds	r3, #2
 800cc68:	6013      	str	r3, [r2, #0]
 800cc6a:	9b03      	ldr	r3, [sp, #12]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d053      	beq.n	800cd18 <__hexnan+0x14c>
 800cc70:	42b4      	cmp	r4, r6
 800cc72:	d206      	bcs.n	800cc82 <__hexnan+0xb6>
 800cc74:	2d07      	cmp	r5, #7
 800cc76:	dc04      	bgt.n	800cc82 <__hexnan+0xb6>
 800cc78:	002a      	movs	r2, r5
 800cc7a:	0031      	movs	r1, r6
 800cc7c:	0020      	movs	r0, r4
 800cc7e:	f7ff ff7f 	bl	800cb80 <L_shift>
 800cc82:	9b01      	ldr	r3, [sp, #4]
 800cc84:	429c      	cmp	r4, r3
 800cc86:	d936      	bls.n	800ccf6 <__hexnan+0x12a>
 800cc88:	001a      	movs	r2, r3
 800cc8a:	0023      	movs	r3, r4
 800cc8c:	cb02      	ldmia	r3!, {r1}
 800cc8e:	c202      	stmia	r2!, {r1}
 800cc90:	429f      	cmp	r7, r3
 800cc92:	d2fb      	bcs.n	800cc8c <__hexnan+0xc0>
 800cc94:	9b02      	ldr	r3, [sp, #8]
 800cc96:	1c61      	adds	r1, r4, #1
 800cc98:	1eda      	subs	r2, r3, #3
 800cc9a:	2304      	movs	r3, #4
 800cc9c:	4291      	cmp	r1, r2
 800cc9e:	d805      	bhi.n	800ccac <__hexnan+0xe0>
 800cca0:	9b02      	ldr	r3, [sp, #8]
 800cca2:	3b04      	subs	r3, #4
 800cca4:	1b1b      	subs	r3, r3, r4
 800cca6:	089b      	lsrs	r3, r3, #2
 800cca8:	3301      	adds	r3, #1
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	9a01      	ldr	r2, [sp, #4]
 800ccae:	18d3      	adds	r3, r2, r3
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	c304      	stmia	r3!, {r2}
 800ccb4:	429f      	cmp	r7, r3
 800ccb6:	d2fc      	bcs.n	800ccb2 <__hexnan+0xe6>
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d104      	bne.n	800ccc8 <__hexnan+0xfc>
 800ccbe:	9b01      	ldr	r3, [sp, #4]
 800ccc0:	429f      	cmp	r7, r3
 800ccc2:	d127      	bne.n	800cd14 <__hexnan+0x148>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	603b      	str	r3, [r7, #0]
 800ccc8:	2005      	movs	r0, #5
 800ccca:	b00b      	add	sp, #44	@ 0x2c
 800cccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccce:	9b03      	ldr	r3, [sp, #12]
 800ccd0:	3501      	adds	r5, #1
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	9303      	str	r3, [sp, #12]
 800ccd6:	2d08      	cmp	r5, #8
 800ccd8:	dd06      	ble.n	800cce8 <__hexnan+0x11c>
 800ccda:	9b01      	ldr	r3, [sp, #4]
 800ccdc:	429c      	cmp	r4, r3
 800ccde:	d9ba      	bls.n	800cc56 <__hexnan+0x8a>
 800cce0:	2300      	movs	r3, #0
 800cce2:	2501      	movs	r5, #1
 800cce4:	3c04      	subs	r4, #4
 800cce6:	6023      	str	r3, [r4, #0]
 800cce8:	220f      	movs	r2, #15
 800ccea:	6823      	ldr	r3, [r4, #0]
 800ccec:	4010      	ands	r0, r2
 800ccee:	011b      	lsls	r3, r3, #4
 800ccf0:	4303      	orrs	r3, r0
 800ccf2:	6023      	str	r3, [r4, #0]
 800ccf4:	e7af      	b.n	800cc56 <__hexnan+0x8a>
 800ccf6:	9b06      	ldr	r3, [sp, #24]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d0dd      	beq.n	800ccb8 <__hexnan+0xec>
 800ccfc:	2320      	movs	r3, #32
 800ccfe:	9a06      	ldr	r2, [sp, #24]
 800cd00:	9902      	ldr	r1, [sp, #8]
 800cd02:	1a9b      	subs	r3, r3, r2
 800cd04:	2201      	movs	r2, #1
 800cd06:	4252      	negs	r2, r2
 800cd08:	40da      	lsrs	r2, r3
 800cd0a:	3904      	subs	r1, #4
 800cd0c:	680b      	ldr	r3, [r1, #0]
 800cd0e:	4013      	ands	r3, r2
 800cd10:	600b      	str	r3, [r1, #0]
 800cd12:	e7d1      	b.n	800ccb8 <__hexnan+0xec>
 800cd14:	3f04      	subs	r7, #4
 800cd16:	e7cf      	b.n	800ccb8 <__hexnan+0xec>
 800cd18:	2004      	movs	r0, #4
 800cd1a:	e7d6      	b.n	800ccca <__hexnan+0xfe>

0800cd1c <malloc>:
 800cd1c:	b510      	push	{r4, lr}
 800cd1e:	4b03      	ldr	r3, [pc, #12]	@ (800cd2c <malloc+0x10>)
 800cd20:	0001      	movs	r1, r0
 800cd22:	6818      	ldr	r0, [r3, #0]
 800cd24:	f000 f826 	bl	800cd74 <_malloc_r>
 800cd28:	bd10      	pop	{r4, pc}
 800cd2a:	46c0      	nop			@ (mov r8, r8)
 800cd2c:	200001b4 	.word	0x200001b4

0800cd30 <sbrk_aligned>:
 800cd30:	b570      	push	{r4, r5, r6, lr}
 800cd32:	4e0f      	ldr	r6, [pc, #60]	@ (800cd70 <sbrk_aligned+0x40>)
 800cd34:	000d      	movs	r5, r1
 800cd36:	6831      	ldr	r1, [r6, #0]
 800cd38:	0004      	movs	r4, r0
 800cd3a:	2900      	cmp	r1, #0
 800cd3c:	d102      	bne.n	800cd44 <sbrk_aligned+0x14>
 800cd3e:	f001 fdad 	bl	800e89c <_sbrk_r>
 800cd42:	6030      	str	r0, [r6, #0]
 800cd44:	0029      	movs	r1, r5
 800cd46:	0020      	movs	r0, r4
 800cd48:	f001 fda8 	bl	800e89c <_sbrk_r>
 800cd4c:	1c43      	adds	r3, r0, #1
 800cd4e:	d103      	bne.n	800cd58 <sbrk_aligned+0x28>
 800cd50:	2501      	movs	r5, #1
 800cd52:	426d      	negs	r5, r5
 800cd54:	0028      	movs	r0, r5
 800cd56:	bd70      	pop	{r4, r5, r6, pc}
 800cd58:	2303      	movs	r3, #3
 800cd5a:	1cc5      	adds	r5, r0, #3
 800cd5c:	439d      	bics	r5, r3
 800cd5e:	42a8      	cmp	r0, r5
 800cd60:	d0f8      	beq.n	800cd54 <sbrk_aligned+0x24>
 800cd62:	1a29      	subs	r1, r5, r0
 800cd64:	0020      	movs	r0, r4
 800cd66:	f001 fd99 	bl	800e89c <_sbrk_r>
 800cd6a:	3001      	adds	r0, #1
 800cd6c:	d1f2      	bne.n	800cd54 <sbrk_aligned+0x24>
 800cd6e:	e7ef      	b.n	800cd50 <sbrk_aligned+0x20>
 800cd70:	200008e4 	.word	0x200008e4

0800cd74 <_malloc_r>:
 800cd74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd76:	2203      	movs	r2, #3
 800cd78:	1ccb      	adds	r3, r1, #3
 800cd7a:	4393      	bics	r3, r2
 800cd7c:	3308      	adds	r3, #8
 800cd7e:	0005      	movs	r5, r0
 800cd80:	001f      	movs	r7, r3
 800cd82:	2b0c      	cmp	r3, #12
 800cd84:	d234      	bcs.n	800cdf0 <_malloc_r+0x7c>
 800cd86:	270c      	movs	r7, #12
 800cd88:	42b9      	cmp	r1, r7
 800cd8a:	d833      	bhi.n	800cdf4 <_malloc_r+0x80>
 800cd8c:	0028      	movs	r0, r5
 800cd8e:	f000 f883 	bl	800ce98 <__malloc_lock>
 800cd92:	4e37      	ldr	r6, [pc, #220]	@ (800ce70 <_malloc_r+0xfc>)
 800cd94:	6833      	ldr	r3, [r6, #0]
 800cd96:	001c      	movs	r4, r3
 800cd98:	2c00      	cmp	r4, #0
 800cd9a:	d12f      	bne.n	800cdfc <_malloc_r+0x88>
 800cd9c:	0039      	movs	r1, r7
 800cd9e:	0028      	movs	r0, r5
 800cda0:	f7ff ffc6 	bl	800cd30 <sbrk_aligned>
 800cda4:	0004      	movs	r4, r0
 800cda6:	1c43      	adds	r3, r0, #1
 800cda8:	d15f      	bne.n	800ce6a <_malloc_r+0xf6>
 800cdaa:	6834      	ldr	r4, [r6, #0]
 800cdac:	9400      	str	r4, [sp, #0]
 800cdae:	9b00      	ldr	r3, [sp, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d14a      	bne.n	800ce4a <_malloc_r+0xd6>
 800cdb4:	2c00      	cmp	r4, #0
 800cdb6:	d052      	beq.n	800ce5e <_malloc_r+0xea>
 800cdb8:	6823      	ldr	r3, [r4, #0]
 800cdba:	0028      	movs	r0, r5
 800cdbc:	18e3      	adds	r3, r4, r3
 800cdbe:	9900      	ldr	r1, [sp, #0]
 800cdc0:	9301      	str	r3, [sp, #4]
 800cdc2:	f001 fd6b 	bl	800e89c <_sbrk_r>
 800cdc6:	9b01      	ldr	r3, [sp, #4]
 800cdc8:	4283      	cmp	r3, r0
 800cdca:	d148      	bne.n	800ce5e <_malloc_r+0xea>
 800cdcc:	6823      	ldr	r3, [r4, #0]
 800cdce:	0028      	movs	r0, r5
 800cdd0:	1aff      	subs	r7, r7, r3
 800cdd2:	0039      	movs	r1, r7
 800cdd4:	f7ff ffac 	bl	800cd30 <sbrk_aligned>
 800cdd8:	3001      	adds	r0, #1
 800cdda:	d040      	beq.n	800ce5e <_malloc_r+0xea>
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	19db      	adds	r3, r3, r7
 800cde0:	6023      	str	r3, [r4, #0]
 800cde2:	6833      	ldr	r3, [r6, #0]
 800cde4:	685a      	ldr	r2, [r3, #4]
 800cde6:	2a00      	cmp	r2, #0
 800cde8:	d133      	bne.n	800ce52 <_malloc_r+0xde>
 800cdea:	9b00      	ldr	r3, [sp, #0]
 800cdec:	6033      	str	r3, [r6, #0]
 800cdee:	e019      	b.n	800ce24 <_malloc_r+0xb0>
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	dac9      	bge.n	800cd88 <_malloc_r+0x14>
 800cdf4:	230c      	movs	r3, #12
 800cdf6:	602b      	str	r3, [r5, #0]
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cdfc:	6821      	ldr	r1, [r4, #0]
 800cdfe:	1bc9      	subs	r1, r1, r7
 800ce00:	d420      	bmi.n	800ce44 <_malloc_r+0xd0>
 800ce02:	290b      	cmp	r1, #11
 800ce04:	d90a      	bls.n	800ce1c <_malloc_r+0xa8>
 800ce06:	19e2      	adds	r2, r4, r7
 800ce08:	6027      	str	r7, [r4, #0]
 800ce0a:	42a3      	cmp	r3, r4
 800ce0c:	d104      	bne.n	800ce18 <_malloc_r+0xa4>
 800ce0e:	6032      	str	r2, [r6, #0]
 800ce10:	6863      	ldr	r3, [r4, #4]
 800ce12:	6011      	str	r1, [r2, #0]
 800ce14:	6053      	str	r3, [r2, #4]
 800ce16:	e005      	b.n	800ce24 <_malloc_r+0xb0>
 800ce18:	605a      	str	r2, [r3, #4]
 800ce1a:	e7f9      	b.n	800ce10 <_malloc_r+0x9c>
 800ce1c:	6862      	ldr	r2, [r4, #4]
 800ce1e:	42a3      	cmp	r3, r4
 800ce20:	d10e      	bne.n	800ce40 <_malloc_r+0xcc>
 800ce22:	6032      	str	r2, [r6, #0]
 800ce24:	0028      	movs	r0, r5
 800ce26:	f000 f83f 	bl	800cea8 <__malloc_unlock>
 800ce2a:	0020      	movs	r0, r4
 800ce2c:	2207      	movs	r2, #7
 800ce2e:	300b      	adds	r0, #11
 800ce30:	1d23      	adds	r3, r4, #4
 800ce32:	4390      	bics	r0, r2
 800ce34:	1ac2      	subs	r2, r0, r3
 800ce36:	4298      	cmp	r0, r3
 800ce38:	d0df      	beq.n	800cdfa <_malloc_r+0x86>
 800ce3a:	1a1b      	subs	r3, r3, r0
 800ce3c:	50a3      	str	r3, [r4, r2]
 800ce3e:	e7dc      	b.n	800cdfa <_malloc_r+0x86>
 800ce40:	605a      	str	r2, [r3, #4]
 800ce42:	e7ef      	b.n	800ce24 <_malloc_r+0xb0>
 800ce44:	0023      	movs	r3, r4
 800ce46:	6864      	ldr	r4, [r4, #4]
 800ce48:	e7a6      	b.n	800cd98 <_malloc_r+0x24>
 800ce4a:	9c00      	ldr	r4, [sp, #0]
 800ce4c:	6863      	ldr	r3, [r4, #4]
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	e7ad      	b.n	800cdae <_malloc_r+0x3a>
 800ce52:	001a      	movs	r2, r3
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	42a3      	cmp	r3, r4
 800ce58:	d1fb      	bne.n	800ce52 <_malloc_r+0xde>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	e7da      	b.n	800ce14 <_malloc_r+0xa0>
 800ce5e:	230c      	movs	r3, #12
 800ce60:	0028      	movs	r0, r5
 800ce62:	602b      	str	r3, [r5, #0]
 800ce64:	f000 f820 	bl	800cea8 <__malloc_unlock>
 800ce68:	e7c6      	b.n	800cdf8 <_malloc_r+0x84>
 800ce6a:	6007      	str	r7, [r0, #0]
 800ce6c:	e7da      	b.n	800ce24 <_malloc_r+0xb0>
 800ce6e:	46c0      	nop			@ (mov r8, r8)
 800ce70:	200008e8 	.word	0x200008e8

0800ce74 <__ascii_mbtowc>:
 800ce74:	b082      	sub	sp, #8
 800ce76:	2900      	cmp	r1, #0
 800ce78:	d100      	bne.n	800ce7c <__ascii_mbtowc+0x8>
 800ce7a:	a901      	add	r1, sp, #4
 800ce7c:	1e10      	subs	r0, r2, #0
 800ce7e:	d006      	beq.n	800ce8e <__ascii_mbtowc+0x1a>
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d006      	beq.n	800ce92 <__ascii_mbtowc+0x1e>
 800ce84:	7813      	ldrb	r3, [r2, #0]
 800ce86:	600b      	str	r3, [r1, #0]
 800ce88:	7810      	ldrb	r0, [r2, #0]
 800ce8a:	1e43      	subs	r3, r0, #1
 800ce8c:	4198      	sbcs	r0, r3
 800ce8e:	b002      	add	sp, #8
 800ce90:	4770      	bx	lr
 800ce92:	2002      	movs	r0, #2
 800ce94:	4240      	negs	r0, r0
 800ce96:	e7fa      	b.n	800ce8e <__ascii_mbtowc+0x1a>

0800ce98 <__malloc_lock>:
 800ce98:	b510      	push	{r4, lr}
 800ce9a:	4802      	ldr	r0, [pc, #8]	@ (800cea4 <__malloc_lock+0xc>)
 800ce9c:	f7fe fcf7 	bl	800b88e <__retarget_lock_acquire_recursive>
 800cea0:	bd10      	pop	{r4, pc}
 800cea2:	46c0      	nop			@ (mov r8, r8)
 800cea4:	200008e0 	.word	0x200008e0

0800cea8 <__malloc_unlock>:
 800cea8:	b510      	push	{r4, lr}
 800ceaa:	4802      	ldr	r0, [pc, #8]	@ (800ceb4 <__malloc_unlock+0xc>)
 800ceac:	f7fe fcf0 	bl	800b890 <__retarget_lock_release_recursive>
 800ceb0:	bd10      	pop	{r4, pc}
 800ceb2:	46c0      	nop			@ (mov r8, r8)
 800ceb4:	200008e0 	.word	0x200008e0

0800ceb8 <_Balloc>:
 800ceb8:	b570      	push	{r4, r5, r6, lr}
 800ceba:	69c5      	ldr	r5, [r0, #28]
 800cebc:	0006      	movs	r6, r0
 800cebe:	000c      	movs	r4, r1
 800cec0:	2d00      	cmp	r5, #0
 800cec2:	d10e      	bne.n	800cee2 <_Balloc+0x2a>
 800cec4:	2010      	movs	r0, #16
 800cec6:	f7ff ff29 	bl	800cd1c <malloc>
 800ceca:	1e02      	subs	r2, r0, #0
 800cecc:	61f0      	str	r0, [r6, #28]
 800cece:	d104      	bne.n	800ceda <_Balloc+0x22>
 800ced0:	216b      	movs	r1, #107	@ 0x6b
 800ced2:	4b19      	ldr	r3, [pc, #100]	@ (800cf38 <_Balloc+0x80>)
 800ced4:	4819      	ldr	r0, [pc, #100]	@ (800cf3c <_Balloc+0x84>)
 800ced6:	f001 fcf3 	bl	800e8c0 <__assert_func>
 800ceda:	6045      	str	r5, [r0, #4]
 800cedc:	6085      	str	r5, [r0, #8]
 800cede:	6005      	str	r5, [r0, #0]
 800cee0:	60c5      	str	r5, [r0, #12]
 800cee2:	69f5      	ldr	r5, [r6, #28]
 800cee4:	68eb      	ldr	r3, [r5, #12]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d013      	beq.n	800cf12 <_Balloc+0x5a>
 800ceea:	69f3      	ldr	r3, [r6, #28]
 800ceec:	00a2      	lsls	r2, r4, #2
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	189b      	adds	r3, r3, r2
 800cef2:	6818      	ldr	r0, [r3, #0]
 800cef4:	2800      	cmp	r0, #0
 800cef6:	d118      	bne.n	800cf2a <_Balloc+0x72>
 800cef8:	2101      	movs	r1, #1
 800cefa:	000d      	movs	r5, r1
 800cefc:	40a5      	lsls	r5, r4
 800cefe:	1d6a      	adds	r2, r5, #5
 800cf00:	0030      	movs	r0, r6
 800cf02:	0092      	lsls	r2, r2, #2
 800cf04:	f001 fcfa 	bl	800e8fc <_calloc_r>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d00c      	beq.n	800cf26 <_Balloc+0x6e>
 800cf0c:	6044      	str	r4, [r0, #4]
 800cf0e:	6085      	str	r5, [r0, #8]
 800cf10:	e00d      	b.n	800cf2e <_Balloc+0x76>
 800cf12:	2221      	movs	r2, #33	@ 0x21
 800cf14:	2104      	movs	r1, #4
 800cf16:	0030      	movs	r0, r6
 800cf18:	f001 fcf0 	bl	800e8fc <_calloc_r>
 800cf1c:	69f3      	ldr	r3, [r6, #28]
 800cf1e:	60e8      	str	r0, [r5, #12]
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1e1      	bne.n	800ceea <_Balloc+0x32>
 800cf26:	2000      	movs	r0, #0
 800cf28:	bd70      	pop	{r4, r5, r6, pc}
 800cf2a:	6802      	ldr	r2, [r0, #0]
 800cf2c:	601a      	str	r2, [r3, #0]
 800cf2e:	2300      	movs	r3, #0
 800cf30:	6103      	str	r3, [r0, #16]
 800cf32:	60c3      	str	r3, [r0, #12]
 800cf34:	e7f8      	b.n	800cf28 <_Balloc+0x70>
 800cf36:	46c0      	nop			@ (mov r8, r8)
 800cf38:	0800edac 	.word	0x0800edac
 800cf3c:	0800ee8c 	.word	0x0800ee8c

0800cf40 <_Bfree>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	69c6      	ldr	r6, [r0, #28]
 800cf44:	0005      	movs	r5, r0
 800cf46:	000c      	movs	r4, r1
 800cf48:	2e00      	cmp	r6, #0
 800cf4a:	d10e      	bne.n	800cf6a <_Bfree+0x2a>
 800cf4c:	2010      	movs	r0, #16
 800cf4e:	f7ff fee5 	bl	800cd1c <malloc>
 800cf52:	1e02      	subs	r2, r0, #0
 800cf54:	61e8      	str	r0, [r5, #28]
 800cf56:	d104      	bne.n	800cf62 <_Bfree+0x22>
 800cf58:	218f      	movs	r1, #143	@ 0x8f
 800cf5a:	4b09      	ldr	r3, [pc, #36]	@ (800cf80 <_Bfree+0x40>)
 800cf5c:	4809      	ldr	r0, [pc, #36]	@ (800cf84 <_Bfree+0x44>)
 800cf5e:	f001 fcaf 	bl	800e8c0 <__assert_func>
 800cf62:	6046      	str	r6, [r0, #4]
 800cf64:	6086      	str	r6, [r0, #8]
 800cf66:	6006      	str	r6, [r0, #0]
 800cf68:	60c6      	str	r6, [r0, #12]
 800cf6a:	2c00      	cmp	r4, #0
 800cf6c:	d007      	beq.n	800cf7e <_Bfree+0x3e>
 800cf6e:	69eb      	ldr	r3, [r5, #28]
 800cf70:	6862      	ldr	r2, [r4, #4]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	0092      	lsls	r2, r2, #2
 800cf76:	189b      	adds	r3, r3, r2
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	6022      	str	r2, [r4, #0]
 800cf7c:	601c      	str	r4, [r3, #0]
 800cf7e:	bd70      	pop	{r4, r5, r6, pc}
 800cf80:	0800edac 	.word	0x0800edac
 800cf84:	0800ee8c 	.word	0x0800ee8c

0800cf88 <__multadd>:
 800cf88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf8a:	000f      	movs	r7, r1
 800cf8c:	9001      	str	r0, [sp, #4]
 800cf8e:	000c      	movs	r4, r1
 800cf90:	001e      	movs	r6, r3
 800cf92:	2000      	movs	r0, #0
 800cf94:	690d      	ldr	r5, [r1, #16]
 800cf96:	3714      	adds	r7, #20
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	3001      	adds	r0, #1
 800cf9c:	b299      	uxth	r1, r3
 800cf9e:	4351      	muls	r1, r2
 800cfa0:	0c1b      	lsrs	r3, r3, #16
 800cfa2:	4353      	muls	r3, r2
 800cfa4:	1989      	adds	r1, r1, r6
 800cfa6:	0c0e      	lsrs	r6, r1, #16
 800cfa8:	199b      	adds	r3, r3, r6
 800cfaa:	0c1e      	lsrs	r6, r3, #16
 800cfac:	b289      	uxth	r1, r1
 800cfae:	041b      	lsls	r3, r3, #16
 800cfb0:	185b      	adds	r3, r3, r1
 800cfb2:	c708      	stmia	r7!, {r3}
 800cfb4:	4285      	cmp	r5, r0
 800cfb6:	dcef      	bgt.n	800cf98 <__multadd+0x10>
 800cfb8:	2e00      	cmp	r6, #0
 800cfba:	d022      	beq.n	800d002 <__multadd+0x7a>
 800cfbc:	68a3      	ldr	r3, [r4, #8]
 800cfbe:	42ab      	cmp	r3, r5
 800cfc0:	dc19      	bgt.n	800cff6 <__multadd+0x6e>
 800cfc2:	6861      	ldr	r1, [r4, #4]
 800cfc4:	9801      	ldr	r0, [sp, #4]
 800cfc6:	3101      	adds	r1, #1
 800cfc8:	f7ff ff76 	bl	800ceb8 <_Balloc>
 800cfcc:	1e07      	subs	r7, r0, #0
 800cfce:	d105      	bne.n	800cfdc <__multadd+0x54>
 800cfd0:	003a      	movs	r2, r7
 800cfd2:	21ba      	movs	r1, #186	@ 0xba
 800cfd4:	4b0c      	ldr	r3, [pc, #48]	@ (800d008 <__multadd+0x80>)
 800cfd6:	480d      	ldr	r0, [pc, #52]	@ (800d00c <__multadd+0x84>)
 800cfd8:	f001 fc72 	bl	800e8c0 <__assert_func>
 800cfdc:	0021      	movs	r1, r4
 800cfde:	6922      	ldr	r2, [r4, #16]
 800cfe0:	310c      	adds	r1, #12
 800cfe2:	3202      	adds	r2, #2
 800cfe4:	0092      	lsls	r2, r2, #2
 800cfe6:	300c      	adds	r0, #12
 800cfe8:	f7fe fc5e 	bl	800b8a8 <memcpy>
 800cfec:	0021      	movs	r1, r4
 800cfee:	9801      	ldr	r0, [sp, #4]
 800cff0:	f7ff ffa6 	bl	800cf40 <_Bfree>
 800cff4:	003c      	movs	r4, r7
 800cff6:	1d2b      	adds	r3, r5, #4
 800cff8:	009b      	lsls	r3, r3, #2
 800cffa:	18e3      	adds	r3, r4, r3
 800cffc:	3501      	adds	r5, #1
 800cffe:	605e      	str	r6, [r3, #4]
 800d000:	6125      	str	r5, [r4, #16]
 800d002:	0020      	movs	r0, r4
 800d004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d006:	46c0      	nop			@ (mov r8, r8)
 800d008:	0800ee1b 	.word	0x0800ee1b
 800d00c:	0800ee8c 	.word	0x0800ee8c

0800d010 <__s2b>:
 800d010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d012:	0007      	movs	r7, r0
 800d014:	0018      	movs	r0, r3
 800d016:	000c      	movs	r4, r1
 800d018:	3008      	adds	r0, #8
 800d01a:	2109      	movs	r1, #9
 800d01c:	9301      	str	r3, [sp, #4]
 800d01e:	0015      	movs	r5, r2
 800d020:	f7f3 f922 	bl	8000268 <__divsi3>
 800d024:	2301      	movs	r3, #1
 800d026:	2100      	movs	r1, #0
 800d028:	4283      	cmp	r3, r0
 800d02a:	db0a      	blt.n	800d042 <__s2b+0x32>
 800d02c:	0038      	movs	r0, r7
 800d02e:	f7ff ff43 	bl	800ceb8 <_Balloc>
 800d032:	1e01      	subs	r1, r0, #0
 800d034:	d108      	bne.n	800d048 <__s2b+0x38>
 800d036:	000a      	movs	r2, r1
 800d038:	4b19      	ldr	r3, [pc, #100]	@ (800d0a0 <__s2b+0x90>)
 800d03a:	481a      	ldr	r0, [pc, #104]	@ (800d0a4 <__s2b+0x94>)
 800d03c:	31d3      	adds	r1, #211	@ 0xd3
 800d03e:	f001 fc3f 	bl	800e8c0 <__assert_func>
 800d042:	005b      	lsls	r3, r3, #1
 800d044:	3101      	adds	r1, #1
 800d046:	e7ef      	b.n	800d028 <__s2b+0x18>
 800d048:	9b08      	ldr	r3, [sp, #32]
 800d04a:	6143      	str	r3, [r0, #20]
 800d04c:	2301      	movs	r3, #1
 800d04e:	6103      	str	r3, [r0, #16]
 800d050:	2d09      	cmp	r5, #9
 800d052:	dd18      	ble.n	800d086 <__s2b+0x76>
 800d054:	0023      	movs	r3, r4
 800d056:	3309      	adds	r3, #9
 800d058:	001e      	movs	r6, r3
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	1964      	adds	r4, r4, r5
 800d05e:	7833      	ldrb	r3, [r6, #0]
 800d060:	220a      	movs	r2, #10
 800d062:	0038      	movs	r0, r7
 800d064:	3b30      	subs	r3, #48	@ 0x30
 800d066:	f7ff ff8f 	bl	800cf88 <__multadd>
 800d06a:	3601      	adds	r6, #1
 800d06c:	0001      	movs	r1, r0
 800d06e:	42a6      	cmp	r6, r4
 800d070:	d1f5      	bne.n	800d05e <__s2b+0x4e>
 800d072:	002c      	movs	r4, r5
 800d074:	9b00      	ldr	r3, [sp, #0]
 800d076:	3c08      	subs	r4, #8
 800d078:	191c      	adds	r4, r3, r4
 800d07a:	002e      	movs	r6, r5
 800d07c:	9b01      	ldr	r3, [sp, #4]
 800d07e:	429e      	cmp	r6, r3
 800d080:	db04      	blt.n	800d08c <__s2b+0x7c>
 800d082:	0008      	movs	r0, r1
 800d084:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d086:	2509      	movs	r5, #9
 800d088:	340a      	adds	r4, #10
 800d08a:	e7f6      	b.n	800d07a <__s2b+0x6a>
 800d08c:	1b63      	subs	r3, r4, r5
 800d08e:	5d9b      	ldrb	r3, [r3, r6]
 800d090:	220a      	movs	r2, #10
 800d092:	0038      	movs	r0, r7
 800d094:	3b30      	subs	r3, #48	@ 0x30
 800d096:	f7ff ff77 	bl	800cf88 <__multadd>
 800d09a:	3601      	adds	r6, #1
 800d09c:	0001      	movs	r1, r0
 800d09e:	e7ed      	b.n	800d07c <__s2b+0x6c>
 800d0a0:	0800ee1b 	.word	0x0800ee1b
 800d0a4:	0800ee8c 	.word	0x0800ee8c

0800d0a8 <__hi0bits>:
 800d0a8:	2280      	movs	r2, #128	@ 0x80
 800d0aa:	0003      	movs	r3, r0
 800d0ac:	0252      	lsls	r2, r2, #9
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d201      	bcs.n	800d0b8 <__hi0bits+0x10>
 800d0b4:	041b      	lsls	r3, r3, #16
 800d0b6:	3010      	adds	r0, #16
 800d0b8:	2280      	movs	r2, #128	@ 0x80
 800d0ba:	0452      	lsls	r2, r2, #17
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d201      	bcs.n	800d0c4 <__hi0bits+0x1c>
 800d0c0:	3008      	adds	r0, #8
 800d0c2:	021b      	lsls	r3, r3, #8
 800d0c4:	2280      	movs	r2, #128	@ 0x80
 800d0c6:	0552      	lsls	r2, r2, #21
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d201      	bcs.n	800d0d0 <__hi0bits+0x28>
 800d0cc:	3004      	adds	r0, #4
 800d0ce:	011b      	lsls	r3, r3, #4
 800d0d0:	2280      	movs	r2, #128	@ 0x80
 800d0d2:	05d2      	lsls	r2, r2, #23
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d201      	bcs.n	800d0dc <__hi0bits+0x34>
 800d0d8:	3002      	adds	r0, #2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	db03      	blt.n	800d0e8 <__hi0bits+0x40>
 800d0e0:	3001      	adds	r0, #1
 800d0e2:	4213      	tst	r3, r2
 800d0e4:	d100      	bne.n	800d0e8 <__hi0bits+0x40>
 800d0e6:	2020      	movs	r0, #32
 800d0e8:	4770      	bx	lr

0800d0ea <__lo0bits>:
 800d0ea:	6803      	ldr	r3, [r0, #0]
 800d0ec:	0001      	movs	r1, r0
 800d0ee:	2207      	movs	r2, #7
 800d0f0:	0018      	movs	r0, r3
 800d0f2:	4010      	ands	r0, r2
 800d0f4:	4213      	tst	r3, r2
 800d0f6:	d00d      	beq.n	800d114 <__lo0bits+0x2a>
 800d0f8:	3a06      	subs	r2, #6
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	4213      	tst	r3, r2
 800d0fe:	d105      	bne.n	800d10c <__lo0bits+0x22>
 800d100:	3002      	adds	r0, #2
 800d102:	4203      	tst	r3, r0
 800d104:	d003      	beq.n	800d10e <__lo0bits+0x24>
 800d106:	40d3      	lsrs	r3, r2
 800d108:	0010      	movs	r0, r2
 800d10a:	600b      	str	r3, [r1, #0]
 800d10c:	4770      	bx	lr
 800d10e:	089b      	lsrs	r3, r3, #2
 800d110:	600b      	str	r3, [r1, #0]
 800d112:	e7fb      	b.n	800d10c <__lo0bits+0x22>
 800d114:	b29a      	uxth	r2, r3
 800d116:	2a00      	cmp	r2, #0
 800d118:	d101      	bne.n	800d11e <__lo0bits+0x34>
 800d11a:	2010      	movs	r0, #16
 800d11c:	0c1b      	lsrs	r3, r3, #16
 800d11e:	b2da      	uxtb	r2, r3
 800d120:	2a00      	cmp	r2, #0
 800d122:	d101      	bne.n	800d128 <__lo0bits+0x3e>
 800d124:	3008      	adds	r0, #8
 800d126:	0a1b      	lsrs	r3, r3, #8
 800d128:	071a      	lsls	r2, r3, #28
 800d12a:	d101      	bne.n	800d130 <__lo0bits+0x46>
 800d12c:	3004      	adds	r0, #4
 800d12e:	091b      	lsrs	r3, r3, #4
 800d130:	079a      	lsls	r2, r3, #30
 800d132:	d101      	bne.n	800d138 <__lo0bits+0x4e>
 800d134:	3002      	adds	r0, #2
 800d136:	089b      	lsrs	r3, r3, #2
 800d138:	07da      	lsls	r2, r3, #31
 800d13a:	d4e9      	bmi.n	800d110 <__lo0bits+0x26>
 800d13c:	3001      	adds	r0, #1
 800d13e:	085b      	lsrs	r3, r3, #1
 800d140:	d1e6      	bne.n	800d110 <__lo0bits+0x26>
 800d142:	2020      	movs	r0, #32
 800d144:	e7e2      	b.n	800d10c <__lo0bits+0x22>
	...

0800d148 <__i2b>:
 800d148:	b510      	push	{r4, lr}
 800d14a:	000c      	movs	r4, r1
 800d14c:	2101      	movs	r1, #1
 800d14e:	f7ff feb3 	bl	800ceb8 <_Balloc>
 800d152:	2800      	cmp	r0, #0
 800d154:	d107      	bne.n	800d166 <__i2b+0x1e>
 800d156:	2146      	movs	r1, #70	@ 0x46
 800d158:	4c05      	ldr	r4, [pc, #20]	@ (800d170 <__i2b+0x28>)
 800d15a:	0002      	movs	r2, r0
 800d15c:	4b05      	ldr	r3, [pc, #20]	@ (800d174 <__i2b+0x2c>)
 800d15e:	0020      	movs	r0, r4
 800d160:	31ff      	adds	r1, #255	@ 0xff
 800d162:	f001 fbad 	bl	800e8c0 <__assert_func>
 800d166:	2301      	movs	r3, #1
 800d168:	6144      	str	r4, [r0, #20]
 800d16a:	6103      	str	r3, [r0, #16]
 800d16c:	bd10      	pop	{r4, pc}
 800d16e:	46c0      	nop			@ (mov r8, r8)
 800d170:	0800ee8c 	.word	0x0800ee8c
 800d174:	0800ee1b 	.word	0x0800ee1b

0800d178 <__multiply>:
 800d178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d17a:	0014      	movs	r4, r2
 800d17c:	690a      	ldr	r2, [r1, #16]
 800d17e:	6923      	ldr	r3, [r4, #16]
 800d180:	000d      	movs	r5, r1
 800d182:	b08b      	sub	sp, #44	@ 0x2c
 800d184:	429a      	cmp	r2, r3
 800d186:	db02      	blt.n	800d18e <__multiply+0x16>
 800d188:	0023      	movs	r3, r4
 800d18a:	000c      	movs	r4, r1
 800d18c:	001d      	movs	r5, r3
 800d18e:	6927      	ldr	r7, [r4, #16]
 800d190:	692e      	ldr	r6, [r5, #16]
 800d192:	6861      	ldr	r1, [r4, #4]
 800d194:	19bb      	adds	r3, r7, r6
 800d196:	9303      	str	r3, [sp, #12]
 800d198:	68a3      	ldr	r3, [r4, #8]
 800d19a:	19ba      	adds	r2, r7, r6
 800d19c:	4293      	cmp	r3, r2
 800d19e:	da00      	bge.n	800d1a2 <__multiply+0x2a>
 800d1a0:	3101      	adds	r1, #1
 800d1a2:	f7ff fe89 	bl	800ceb8 <_Balloc>
 800d1a6:	9002      	str	r0, [sp, #8]
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d106      	bne.n	800d1ba <__multiply+0x42>
 800d1ac:	21b1      	movs	r1, #177	@ 0xb1
 800d1ae:	4b49      	ldr	r3, [pc, #292]	@ (800d2d4 <__multiply+0x15c>)
 800d1b0:	4849      	ldr	r0, [pc, #292]	@ (800d2d8 <__multiply+0x160>)
 800d1b2:	9a02      	ldr	r2, [sp, #8]
 800d1b4:	0049      	lsls	r1, r1, #1
 800d1b6:	f001 fb83 	bl	800e8c0 <__assert_func>
 800d1ba:	9b02      	ldr	r3, [sp, #8]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	3314      	adds	r3, #20
 800d1c0:	469c      	mov	ip, r3
 800d1c2:	19bb      	adds	r3, r7, r6
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	4463      	add	r3, ip
 800d1c8:	9304      	str	r3, [sp, #16]
 800d1ca:	4663      	mov	r3, ip
 800d1cc:	9904      	ldr	r1, [sp, #16]
 800d1ce:	428b      	cmp	r3, r1
 800d1d0:	d32a      	bcc.n	800d228 <__multiply+0xb0>
 800d1d2:	0023      	movs	r3, r4
 800d1d4:	00bf      	lsls	r7, r7, #2
 800d1d6:	3314      	adds	r3, #20
 800d1d8:	3514      	adds	r5, #20
 800d1da:	9308      	str	r3, [sp, #32]
 800d1dc:	00b6      	lsls	r6, r6, #2
 800d1de:	19db      	adds	r3, r3, r7
 800d1e0:	9305      	str	r3, [sp, #20]
 800d1e2:	19ab      	adds	r3, r5, r6
 800d1e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1e6:	2304      	movs	r3, #4
 800d1e8:	9306      	str	r3, [sp, #24]
 800d1ea:	0023      	movs	r3, r4
 800d1ec:	9a05      	ldr	r2, [sp, #20]
 800d1ee:	3315      	adds	r3, #21
 800d1f0:	9501      	str	r5, [sp, #4]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d305      	bcc.n	800d202 <__multiply+0x8a>
 800d1f6:	1b13      	subs	r3, r2, r4
 800d1f8:	3b15      	subs	r3, #21
 800d1fa:	089b      	lsrs	r3, r3, #2
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	9306      	str	r3, [sp, #24]
 800d202:	9b01      	ldr	r3, [sp, #4]
 800d204:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d206:	4293      	cmp	r3, r2
 800d208:	d310      	bcc.n	800d22c <__multiply+0xb4>
 800d20a:	9b03      	ldr	r3, [sp, #12]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	dd05      	ble.n	800d21c <__multiply+0xa4>
 800d210:	9b04      	ldr	r3, [sp, #16]
 800d212:	3b04      	subs	r3, #4
 800d214:	9304      	str	r3, [sp, #16]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d056      	beq.n	800d2ca <__multiply+0x152>
 800d21c:	9b02      	ldr	r3, [sp, #8]
 800d21e:	9a03      	ldr	r2, [sp, #12]
 800d220:	0018      	movs	r0, r3
 800d222:	611a      	str	r2, [r3, #16]
 800d224:	b00b      	add	sp, #44	@ 0x2c
 800d226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d228:	c304      	stmia	r3!, {r2}
 800d22a:	e7cf      	b.n	800d1cc <__multiply+0x54>
 800d22c:	9b01      	ldr	r3, [sp, #4]
 800d22e:	6818      	ldr	r0, [r3, #0]
 800d230:	b280      	uxth	r0, r0
 800d232:	2800      	cmp	r0, #0
 800d234:	d01e      	beq.n	800d274 <__multiply+0xfc>
 800d236:	4667      	mov	r7, ip
 800d238:	2500      	movs	r5, #0
 800d23a:	9e08      	ldr	r6, [sp, #32]
 800d23c:	ce02      	ldmia	r6!, {r1}
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	9307      	str	r3, [sp, #28]
 800d242:	b28b      	uxth	r3, r1
 800d244:	4343      	muls	r3, r0
 800d246:	001a      	movs	r2, r3
 800d248:	466b      	mov	r3, sp
 800d24a:	0c09      	lsrs	r1, r1, #16
 800d24c:	8b9b      	ldrh	r3, [r3, #28]
 800d24e:	4341      	muls	r1, r0
 800d250:	18d3      	adds	r3, r2, r3
 800d252:	9a07      	ldr	r2, [sp, #28]
 800d254:	195b      	adds	r3, r3, r5
 800d256:	0c12      	lsrs	r2, r2, #16
 800d258:	1889      	adds	r1, r1, r2
 800d25a:	0c1a      	lsrs	r2, r3, #16
 800d25c:	188a      	adds	r2, r1, r2
 800d25e:	b29b      	uxth	r3, r3
 800d260:	0c15      	lsrs	r5, r2, #16
 800d262:	0412      	lsls	r2, r2, #16
 800d264:	431a      	orrs	r2, r3
 800d266:	9b05      	ldr	r3, [sp, #20]
 800d268:	c704      	stmia	r7!, {r2}
 800d26a:	42b3      	cmp	r3, r6
 800d26c:	d8e6      	bhi.n	800d23c <__multiply+0xc4>
 800d26e:	4663      	mov	r3, ip
 800d270:	9a06      	ldr	r2, [sp, #24]
 800d272:	509d      	str	r5, [r3, r2]
 800d274:	9b01      	ldr	r3, [sp, #4]
 800d276:	6818      	ldr	r0, [r3, #0]
 800d278:	0c00      	lsrs	r0, r0, #16
 800d27a:	d020      	beq.n	800d2be <__multiply+0x146>
 800d27c:	4663      	mov	r3, ip
 800d27e:	0025      	movs	r5, r4
 800d280:	4661      	mov	r1, ip
 800d282:	2700      	movs	r7, #0
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	3514      	adds	r5, #20
 800d288:	682a      	ldr	r2, [r5, #0]
 800d28a:	680e      	ldr	r6, [r1, #0]
 800d28c:	b292      	uxth	r2, r2
 800d28e:	4342      	muls	r2, r0
 800d290:	0c36      	lsrs	r6, r6, #16
 800d292:	1992      	adds	r2, r2, r6
 800d294:	19d2      	adds	r2, r2, r7
 800d296:	0416      	lsls	r6, r2, #16
 800d298:	b29b      	uxth	r3, r3
 800d29a:	431e      	orrs	r6, r3
 800d29c:	600e      	str	r6, [r1, #0]
 800d29e:	cd40      	ldmia	r5!, {r6}
 800d2a0:	684b      	ldr	r3, [r1, #4]
 800d2a2:	0c36      	lsrs	r6, r6, #16
 800d2a4:	4346      	muls	r6, r0
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	0c12      	lsrs	r2, r2, #16
 800d2aa:	18f3      	adds	r3, r6, r3
 800d2ac:	189b      	adds	r3, r3, r2
 800d2ae:	9a05      	ldr	r2, [sp, #20]
 800d2b0:	0c1f      	lsrs	r7, r3, #16
 800d2b2:	3104      	adds	r1, #4
 800d2b4:	42aa      	cmp	r2, r5
 800d2b6:	d8e7      	bhi.n	800d288 <__multiply+0x110>
 800d2b8:	4662      	mov	r2, ip
 800d2ba:	9906      	ldr	r1, [sp, #24]
 800d2bc:	5053      	str	r3, [r2, r1]
 800d2be:	9b01      	ldr	r3, [sp, #4]
 800d2c0:	3304      	adds	r3, #4
 800d2c2:	9301      	str	r3, [sp, #4]
 800d2c4:	2304      	movs	r3, #4
 800d2c6:	449c      	add	ip, r3
 800d2c8:	e79b      	b.n	800d202 <__multiply+0x8a>
 800d2ca:	9b03      	ldr	r3, [sp, #12]
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	9303      	str	r3, [sp, #12]
 800d2d0:	e79b      	b.n	800d20a <__multiply+0x92>
 800d2d2:	46c0      	nop			@ (mov r8, r8)
 800d2d4:	0800ee1b 	.word	0x0800ee1b
 800d2d8:	0800ee8c 	.word	0x0800ee8c

0800d2dc <__pow5mult>:
 800d2dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2de:	2303      	movs	r3, #3
 800d2e0:	0015      	movs	r5, r2
 800d2e2:	0007      	movs	r7, r0
 800d2e4:	000e      	movs	r6, r1
 800d2e6:	401a      	ands	r2, r3
 800d2e8:	421d      	tst	r5, r3
 800d2ea:	d008      	beq.n	800d2fe <__pow5mult+0x22>
 800d2ec:	4925      	ldr	r1, [pc, #148]	@ (800d384 <__pow5mult+0xa8>)
 800d2ee:	3a01      	subs	r2, #1
 800d2f0:	0092      	lsls	r2, r2, #2
 800d2f2:	5852      	ldr	r2, [r2, r1]
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	0031      	movs	r1, r6
 800d2f8:	f7ff fe46 	bl	800cf88 <__multadd>
 800d2fc:	0006      	movs	r6, r0
 800d2fe:	10ad      	asrs	r5, r5, #2
 800d300:	d03d      	beq.n	800d37e <__pow5mult+0xa2>
 800d302:	69fc      	ldr	r4, [r7, #28]
 800d304:	2c00      	cmp	r4, #0
 800d306:	d10f      	bne.n	800d328 <__pow5mult+0x4c>
 800d308:	2010      	movs	r0, #16
 800d30a:	f7ff fd07 	bl	800cd1c <malloc>
 800d30e:	1e02      	subs	r2, r0, #0
 800d310:	61f8      	str	r0, [r7, #28]
 800d312:	d105      	bne.n	800d320 <__pow5mult+0x44>
 800d314:	21b4      	movs	r1, #180	@ 0xb4
 800d316:	4b1c      	ldr	r3, [pc, #112]	@ (800d388 <__pow5mult+0xac>)
 800d318:	481c      	ldr	r0, [pc, #112]	@ (800d38c <__pow5mult+0xb0>)
 800d31a:	31ff      	adds	r1, #255	@ 0xff
 800d31c:	f001 fad0 	bl	800e8c0 <__assert_func>
 800d320:	6044      	str	r4, [r0, #4]
 800d322:	6084      	str	r4, [r0, #8]
 800d324:	6004      	str	r4, [r0, #0]
 800d326:	60c4      	str	r4, [r0, #12]
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	689c      	ldr	r4, [r3, #8]
 800d32c:	9301      	str	r3, [sp, #4]
 800d32e:	2c00      	cmp	r4, #0
 800d330:	d108      	bne.n	800d344 <__pow5mult+0x68>
 800d332:	0038      	movs	r0, r7
 800d334:	4916      	ldr	r1, [pc, #88]	@ (800d390 <__pow5mult+0xb4>)
 800d336:	f7ff ff07 	bl	800d148 <__i2b>
 800d33a:	9b01      	ldr	r3, [sp, #4]
 800d33c:	0004      	movs	r4, r0
 800d33e:	6098      	str	r0, [r3, #8]
 800d340:	2300      	movs	r3, #0
 800d342:	6003      	str	r3, [r0, #0]
 800d344:	2301      	movs	r3, #1
 800d346:	421d      	tst	r5, r3
 800d348:	d00a      	beq.n	800d360 <__pow5mult+0x84>
 800d34a:	0031      	movs	r1, r6
 800d34c:	0022      	movs	r2, r4
 800d34e:	0038      	movs	r0, r7
 800d350:	f7ff ff12 	bl	800d178 <__multiply>
 800d354:	0031      	movs	r1, r6
 800d356:	9001      	str	r0, [sp, #4]
 800d358:	0038      	movs	r0, r7
 800d35a:	f7ff fdf1 	bl	800cf40 <_Bfree>
 800d35e:	9e01      	ldr	r6, [sp, #4]
 800d360:	106d      	asrs	r5, r5, #1
 800d362:	d00c      	beq.n	800d37e <__pow5mult+0xa2>
 800d364:	6820      	ldr	r0, [r4, #0]
 800d366:	2800      	cmp	r0, #0
 800d368:	d107      	bne.n	800d37a <__pow5mult+0x9e>
 800d36a:	0022      	movs	r2, r4
 800d36c:	0021      	movs	r1, r4
 800d36e:	0038      	movs	r0, r7
 800d370:	f7ff ff02 	bl	800d178 <__multiply>
 800d374:	2300      	movs	r3, #0
 800d376:	6020      	str	r0, [r4, #0]
 800d378:	6003      	str	r3, [r0, #0]
 800d37a:	0004      	movs	r4, r0
 800d37c:	e7e2      	b.n	800d344 <__pow5mult+0x68>
 800d37e:	0030      	movs	r0, r6
 800d380:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d382:	46c0      	nop			@ (mov r8, r8)
 800d384:	0800eee8 	.word	0x0800eee8
 800d388:	0800edac 	.word	0x0800edac
 800d38c:	0800ee8c 	.word	0x0800ee8c
 800d390:	00000271 	.word	0x00000271

0800d394 <__lshift>:
 800d394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d396:	000c      	movs	r4, r1
 800d398:	0016      	movs	r6, r2
 800d39a:	6923      	ldr	r3, [r4, #16]
 800d39c:	1157      	asrs	r7, r2, #5
 800d39e:	b085      	sub	sp, #20
 800d3a0:	18fb      	adds	r3, r7, r3
 800d3a2:	9301      	str	r3, [sp, #4]
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	9300      	str	r3, [sp, #0]
 800d3a8:	6849      	ldr	r1, [r1, #4]
 800d3aa:	68a3      	ldr	r3, [r4, #8]
 800d3ac:	9002      	str	r0, [sp, #8]
 800d3ae:	9a00      	ldr	r2, [sp, #0]
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	db10      	blt.n	800d3d6 <__lshift+0x42>
 800d3b4:	9802      	ldr	r0, [sp, #8]
 800d3b6:	f7ff fd7f 	bl	800ceb8 <_Balloc>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	0001      	movs	r1, r0
 800d3be:	0005      	movs	r5, r0
 800d3c0:	001a      	movs	r2, r3
 800d3c2:	3114      	adds	r1, #20
 800d3c4:	4298      	cmp	r0, r3
 800d3c6:	d10c      	bne.n	800d3e2 <__lshift+0x4e>
 800d3c8:	21ef      	movs	r1, #239	@ 0xef
 800d3ca:	002a      	movs	r2, r5
 800d3cc:	4b25      	ldr	r3, [pc, #148]	@ (800d464 <__lshift+0xd0>)
 800d3ce:	4826      	ldr	r0, [pc, #152]	@ (800d468 <__lshift+0xd4>)
 800d3d0:	0049      	lsls	r1, r1, #1
 800d3d2:	f001 fa75 	bl	800e8c0 <__assert_func>
 800d3d6:	3101      	adds	r1, #1
 800d3d8:	005b      	lsls	r3, r3, #1
 800d3da:	e7e8      	b.n	800d3ae <__lshift+0x1a>
 800d3dc:	0098      	lsls	r0, r3, #2
 800d3de:	500a      	str	r2, [r1, r0]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	42bb      	cmp	r3, r7
 800d3e4:	dbfa      	blt.n	800d3dc <__lshift+0x48>
 800d3e6:	43fb      	mvns	r3, r7
 800d3e8:	17db      	asrs	r3, r3, #31
 800d3ea:	401f      	ands	r7, r3
 800d3ec:	00bf      	lsls	r7, r7, #2
 800d3ee:	0023      	movs	r3, r4
 800d3f0:	201f      	movs	r0, #31
 800d3f2:	19c9      	adds	r1, r1, r7
 800d3f4:	0037      	movs	r7, r6
 800d3f6:	6922      	ldr	r2, [r4, #16]
 800d3f8:	3314      	adds	r3, #20
 800d3fa:	0092      	lsls	r2, r2, #2
 800d3fc:	189a      	adds	r2, r3, r2
 800d3fe:	4007      	ands	r7, r0
 800d400:	4206      	tst	r6, r0
 800d402:	d029      	beq.n	800d458 <__lshift+0xc4>
 800d404:	3001      	adds	r0, #1
 800d406:	1bc0      	subs	r0, r0, r7
 800d408:	9003      	str	r0, [sp, #12]
 800d40a:	468c      	mov	ip, r1
 800d40c:	2000      	movs	r0, #0
 800d40e:	681e      	ldr	r6, [r3, #0]
 800d410:	40be      	lsls	r6, r7
 800d412:	4306      	orrs	r6, r0
 800d414:	4660      	mov	r0, ip
 800d416:	c040      	stmia	r0!, {r6}
 800d418:	4684      	mov	ip, r0
 800d41a:	9e03      	ldr	r6, [sp, #12]
 800d41c:	cb01      	ldmia	r3!, {r0}
 800d41e:	40f0      	lsrs	r0, r6
 800d420:	429a      	cmp	r2, r3
 800d422:	d8f4      	bhi.n	800d40e <__lshift+0x7a>
 800d424:	0026      	movs	r6, r4
 800d426:	3615      	adds	r6, #21
 800d428:	2304      	movs	r3, #4
 800d42a:	42b2      	cmp	r2, r6
 800d42c:	d304      	bcc.n	800d438 <__lshift+0xa4>
 800d42e:	1b13      	subs	r3, r2, r4
 800d430:	3b15      	subs	r3, #21
 800d432:	089b      	lsrs	r3, r3, #2
 800d434:	3301      	adds	r3, #1
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	50c8      	str	r0, [r1, r3]
 800d43a:	2800      	cmp	r0, #0
 800d43c:	d002      	beq.n	800d444 <__lshift+0xb0>
 800d43e:	9b01      	ldr	r3, [sp, #4]
 800d440:	3302      	adds	r3, #2
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	9b00      	ldr	r3, [sp, #0]
 800d446:	9802      	ldr	r0, [sp, #8]
 800d448:	3b01      	subs	r3, #1
 800d44a:	0021      	movs	r1, r4
 800d44c:	612b      	str	r3, [r5, #16]
 800d44e:	f7ff fd77 	bl	800cf40 <_Bfree>
 800d452:	0028      	movs	r0, r5
 800d454:	b005      	add	sp, #20
 800d456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d458:	cb01      	ldmia	r3!, {r0}
 800d45a:	c101      	stmia	r1!, {r0}
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d8fb      	bhi.n	800d458 <__lshift+0xc4>
 800d460:	e7f0      	b.n	800d444 <__lshift+0xb0>
 800d462:	46c0      	nop			@ (mov r8, r8)
 800d464:	0800ee1b 	.word	0x0800ee1b
 800d468:	0800ee8c 	.word	0x0800ee8c

0800d46c <__mcmp>:
 800d46c:	b530      	push	{r4, r5, lr}
 800d46e:	690b      	ldr	r3, [r1, #16]
 800d470:	6904      	ldr	r4, [r0, #16]
 800d472:	0002      	movs	r2, r0
 800d474:	1ae0      	subs	r0, r4, r3
 800d476:	429c      	cmp	r4, r3
 800d478:	d10f      	bne.n	800d49a <__mcmp+0x2e>
 800d47a:	3214      	adds	r2, #20
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	3114      	adds	r1, #20
 800d480:	0014      	movs	r4, r2
 800d482:	18c9      	adds	r1, r1, r3
 800d484:	18d2      	adds	r2, r2, r3
 800d486:	3a04      	subs	r2, #4
 800d488:	3904      	subs	r1, #4
 800d48a:	6815      	ldr	r5, [r2, #0]
 800d48c:	680b      	ldr	r3, [r1, #0]
 800d48e:	429d      	cmp	r5, r3
 800d490:	d004      	beq.n	800d49c <__mcmp+0x30>
 800d492:	2001      	movs	r0, #1
 800d494:	429d      	cmp	r5, r3
 800d496:	d200      	bcs.n	800d49a <__mcmp+0x2e>
 800d498:	3802      	subs	r0, #2
 800d49a:	bd30      	pop	{r4, r5, pc}
 800d49c:	4294      	cmp	r4, r2
 800d49e:	d3f2      	bcc.n	800d486 <__mcmp+0x1a>
 800d4a0:	e7fb      	b.n	800d49a <__mcmp+0x2e>
	...

0800d4a4 <__mdiff>:
 800d4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4a6:	000c      	movs	r4, r1
 800d4a8:	b087      	sub	sp, #28
 800d4aa:	9000      	str	r0, [sp, #0]
 800d4ac:	0011      	movs	r1, r2
 800d4ae:	0020      	movs	r0, r4
 800d4b0:	0017      	movs	r7, r2
 800d4b2:	f7ff ffdb 	bl	800d46c <__mcmp>
 800d4b6:	1e05      	subs	r5, r0, #0
 800d4b8:	d110      	bne.n	800d4dc <__mdiff+0x38>
 800d4ba:	0001      	movs	r1, r0
 800d4bc:	9800      	ldr	r0, [sp, #0]
 800d4be:	f7ff fcfb 	bl	800ceb8 <_Balloc>
 800d4c2:	1e02      	subs	r2, r0, #0
 800d4c4:	d104      	bne.n	800d4d0 <__mdiff+0x2c>
 800d4c6:	4b40      	ldr	r3, [pc, #256]	@ (800d5c8 <__mdiff+0x124>)
 800d4c8:	4840      	ldr	r0, [pc, #256]	@ (800d5cc <__mdiff+0x128>)
 800d4ca:	4941      	ldr	r1, [pc, #260]	@ (800d5d0 <__mdiff+0x12c>)
 800d4cc:	f001 f9f8 	bl	800e8c0 <__assert_func>
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	6145      	str	r5, [r0, #20]
 800d4d4:	6103      	str	r3, [r0, #16]
 800d4d6:	0010      	movs	r0, r2
 800d4d8:	b007      	add	sp, #28
 800d4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4dc:	2600      	movs	r6, #0
 800d4de:	42b0      	cmp	r0, r6
 800d4e0:	da03      	bge.n	800d4ea <__mdiff+0x46>
 800d4e2:	0023      	movs	r3, r4
 800d4e4:	003c      	movs	r4, r7
 800d4e6:	001f      	movs	r7, r3
 800d4e8:	3601      	adds	r6, #1
 800d4ea:	6861      	ldr	r1, [r4, #4]
 800d4ec:	9800      	ldr	r0, [sp, #0]
 800d4ee:	f7ff fce3 	bl	800ceb8 <_Balloc>
 800d4f2:	1e02      	subs	r2, r0, #0
 800d4f4:	d103      	bne.n	800d4fe <__mdiff+0x5a>
 800d4f6:	4b34      	ldr	r3, [pc, #208]	@ (800d5c8 <__mdiff+0x124>)
 800d4f8:	4834      	ldr	r0, [pc, #208]	@ (800d5cc <__mdiff+0x128>)
 800d4fa:	4936      	ldr	r1, [pc, #216]	@ (800d5d4 <__mdiff+0x130>)
 800d4fc:	e7e6      	b.n	800d4cc <__mdiff+0x28>
 800d4fe:	6923      	ldr	r3, [r4, #16]
 800d500:	3414      	adds	r4, #20
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	18e3      	adds	r3, r4, r3
 800d508:	0021      	movs	r1, r4
 800d50a:	9401      	str	r4, [sp, #4]
 800d50c:	003c      	movs	r4, r7
 800d50e:	9302      	str	r3, [sp, #8]
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	3414      	adds	r4, #20
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	18e3      	adds	r3, r4, r3
 800d518:	9303      	str	r3, [sp, #12]
 800d51a:	0003      	movs	r3, r0
 800d51c:	60c6      	str	r6, [r0, #12]
 800d51e:	468c      	mov	ip, r1
 800d520:	2000      	movs	r0, #0
 800d522:	3314      	adds	r3, #20
 800d524:	9304      	str	r3, [sp, #16]
 800d526:	9305      	str	r3, [sp, #20]
 800d528:	4663      	mov	r3, ip
 800d52a:	cb20      	ldmia	r3!, {r5}
 800d52c:	b2a9      	uxth	r1, r5
 800d52e:	000e      	movs	r6, r1
 800d530:	469c      	mov	ip, r3
 800d532:	cc08      	ldmia	r4!, {r3}
 800d534:	0c2d      	lsrs	r5, r5, #16
 800d536:	b299      	uxth	r1, r3
 800d538:	1a71      	subs	r1, r6, r1
 800d53a:	1809      	adds	r1, r1, r0
 800d53c:	0c1b      	lsrs	r3, r3, #16
 800d53e:	1408      	asrs	r0, r1, #16
 800d540:	1aeb      	subs	r3, r5, r3
 800d542:	181b      	adds	r3, r3, r0
 800d544:	1418      	asrs	r0, r3, #16
 800d546:	b289      	uxth	r1, r1
 800d548:	041b      	lsls	r3, r3, #16
 800d54a:	4319      	orrs	r1, r3
 800d54c:	9b05      	ldr	r3, [sp, #20]
 800d54e:	c302      	stmia	r3!, {r1}
 800d550:	9305      	str	r3, [sp, #20]
 800d552:	9b03      	ldr	r3, [sp, #12]
 800d554:	42a3      	cmp	r3, r4
 800d556:	d8e7      	bhi.n	800d528 <__mdiff+0x84>
 800d558:	0039      	movs	r1, r7
 800d55a:	9c03      	ldr	r4, [sp, #12]
 800d55c:	3115      	adds	r1, #21
 800d55e:	2304      	movs	r3, #4
 800d560:	428c      	cmp	r4, r1
 800d562:	d304      	bcc.n	800d56e <__mdiff+0xca>
 800d564:	1be3      	subs	r3, r4, r7
 800d566:	3b15      	subs	r3, #21
 800d568:	089b      	lsrs	r3, r3, #2
 800d56a:	3301      	adds	r3, #1
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	9901      	ldr	r1, [sp, #4]
 800d570:	18cd      	adds	r5, r1, r3
 800d572:	9904      	ldr	r1, [sp, #16]
 800d574:	002e      	movs	r6, r5
 800d576:	18cb      	adds	r3, r1, r3
 800d578:	001f      	movs	r7, r3
 800d57a:	9902      	ldr	r1, [sp, #8]
 800d57c:	428e      	cmp	r6, r1
 800d57e:	d311      	bcc.n	800d5a4 <__mdiff+0x100>
 800d580:	9c02      	ldr	r4, [sp, #8]
 800d582:	1ee9      	subs	r1, r5, #3
 800d584:	2000      	movs	r0, #0
 800d586:	428c      	cmp	r4, r1
 800d588:	d304      	bcc.n	800d594 <__mdiff+0xf0>
 800d58a:	0021      	movs	r1, r4
 800d58c:	3103      	adds	r1, #3
 800d58e:	1b49      	subs	r1, r1, r5
 800d590:	0889      	lsrs	r1, r1, #2
 800d592:	0088      	lsls	r0, r1, #2
 800d594:	181b      	adds	r3, r3, r0
 800d596:	3b04      	subs	r3, #4
 800d598:	6819      	ldr	r1, [r3, #0]
 800d59a:	2900      	cmp	r1, #0
 800d59c:	d010      	beq.n	800d5c0 <__mdiff+0x11c>
 800d59e:	9b00      	ldr	r3, [sp, #0]
 800d5a0:	6113      	str	r3, [r2, #16]
 800d5a2:	e798      	b.n	800d4d6 <__mdiff+0x32>
 800d5a4:	4684      	mov	ip, r0
 800d5a6:	ce02      	ldmia	r6!, {r1}
 800d5a8:	b288      	uxth	r0, r1
 800d5aa:	4460      	add	r0, ip
 800d5ac:	1400      	asrs	r0, r0, #16
 800d5ae:	0c0c      	lsrs	r4, r1, #16
 800d5b0:	1904      	adds	r4, r0, r4
 800d5b2:	4461      	add	r1, ip
 800d5b4:	1420      	asrs	r0, r4, #16
 800d5b6:	b289      	uxth	r1, r1
 800d5b8:	0424      	lsls	r4, r4, #16
 800d5ba:	4321      	orrs	r1, r4
 800d5bc:	c702      	stmia	r7!, {r1}
 800d5be:	e7dc      	b.n	800d57a <__mdiff+0xd6>
 800d5c0:	9900      	ldr	r1, [sp, #0]
 800d5c2:	3901      	subs	r1, #1
 800d5c4:	9100      	str	r1, [sp, #0]
 800d5c6:	e7e6      	b.n	800d596 <__mdiff+0xf2>
 800d5c8:	0800ee1b 	.word	0x0800ee1b
 800d5cc:	0800ee8c 	.word	0x0800ee8c
 800d5d0:	00000237 	.word	0x00000237
 800d5d4:	00000245 	.word	0x00000245

0800d5d8 <__ulp>:
 800d5d8:	b510      	push	{r4, lr}
 800d5da:	2400      	movs	r4, #0
 800d5dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d610 <__ulp+0x38>)
 800d5de:	4a0d      	ldr	r2, [pc, #52]	@ (800d614 <__ulp+0x3c>)
 800d5e0:	400b      	ands	r3, r1
 800d5e2:	189b      	adds	r3, r3, r2
 800d5e4:	42a3      	cmp	r3, r4
 800d5e6:	dc06      	bgt.n	800d5f6 <__ulp+0x1e>
 800d5e8:	425b      	negs	r3, r3
 800d5ea:	151a      	asrs	r2, r3, #20
 800d5ec:	2a13      	cmp	r2, #19
 800d5ee:	dc05      	bgt.n	800d5fc <__ulp+0x24>
 800d5f0:	2380      	movs	r3, #128	@ 0x80
 800d5f2:	031b      	lsls	r3, r3, #12
 800d5f4:	4113      	asrs	r3, r2
 800d5f6:	0019      	movs	r1, r3
 800d5f8:	0020      	movs	r0, r4
 800d5fa:	bd10      	pop	{r4, pc}
 800d5fc:	3a14      	subs	r2, #20
 800d5fe:	2401      	movs	r4, #1
 800d600:	2a1e      	cmp	r2, #30
 800d602:	dc02      	bgt.n	800d60a <__ulp+0x32>
 800d604:	2480      	movs	r4, #128	@ 0x80
 800d606:	0624      	lsls	r4, r4, #24
 800d608:	40d4      	lsrs	r4, r2
 800d60a:	2300      	movs	r3, #0
 800d60c:	e7f3      	b.n	800d5f6 <__ulp+0x1e>
 800d60e:	46c0      	nop			@ (mov r8, r8)
 800d610:	7ff00000 	.word	0x7ff00000
 800d614:	fcc00000 	.word	0xfcc00000

0800d618 <__b2d>:
 800d618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d61a:	0006      	movs	r6, r0
 800d61c:	6903      	ldr	r3, [r0, #16]
 800d61e:	3614      	adds	r6, #20
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	18f3      	adds	r3, r6, r3
 800d624:	1f1d      	subs	r5, r3, #4
 800d626:	682c      	ldr	r4, [r5, #0]
 800d628:	000f      	movs	r7, r1
 800d62a:	0020      	movs	r0, r4
 800d62c:	9301      	str	r3, [sp, #4]
 800d62e:	f7ff fd3b 	bl	800d0a8 <__hi0bits>
 800d632:	2220      	movs	r2, #32
 800d634:	1a12      	subs	r2, r2, r0
 800d636:	603a      	str	r2, [r7, #0]
 800d638:	0003      	movs	r3, r0
 800d63a:	4a1c      	ldr	r2, [pc, #112]	@ (800d6ac <__b2d+0x94>)
 800d63c:	280a      	cmp	r0, #10
 800d63e:	dc15      	bgt.n	800d66c <__b2d+0x54>
 800d640:	210b      	movs	r1, #11
 800d642:	0027      	movs	r7, r4
 800d644:	1a09      	subs	r1, r1, r0
 800d646:	40cf      	lsrs	r7, r1
 800d648:	433a      	orrs	r2, r7
 800d64a:	468c      	mov	ip, r1
 800d64c:	0011      	movs	r1, r2
 800d64e:	2200      	movs	r2, #0
 800d650:	42ae      	cmp	r6, r5
 800d652:	d202      	bcs.n	800d65a <__b2d+0x42>
 800d654:	9a01      	ldr	r2, [sp, #4]
 800d656:	3a08      	subs	r2, #8
 800d658:	6812      	ldr	r2, [r2, #0]
 800d65a:	3315      	adds	r3, #21
 800d65c:	409c      	lsls	r4, r3
 800d65e:	4663      	mov	r3, ip
 800d660:	0027      	movs	r7, r4
 800d662:	40da      	lsrs	r2, r3
 800d664:	4317      	orrs	r7, r2
 800d666:	0038      	movs	r0, r7
 800d668:	b003      	add	sp, #12
 800d66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d66c:	2700      	movs	r7, #0
 800d66e:	42ae      	cmp	r6, r5
 800d670:	d202      	bcs.n	800d678 <__b2d+0x60>
 800d672:	9d01      	ldr	r5, [sp, #4]
 800d674:	3d08      	subs	r5, #8
 800d676:	682f      	ldr	r7, [r5, #0]
 800d678:	210b      	movs	r1, #11
 800d67a:	4249      	negs	r1, r1
 800d67c:	468c      	mov	ip, r1
 800d67e:	449c      	add	ip, r3
 800d680:	2b0b      	cmp	r3, #11
 800d682:	d010      	beq.n	800d6a6 <__b2d+0x8e>
 800d684:	4661      	mov	r1, ip
 800d686:	2320      	movs	r3, #32
 800d688:	408c      	lsls	r4, r1
 800d68a:	1a5b      	subs	r3, r3, r1
 800d68c:	0039      	movs	r1, r7
 800d68e:	40d9      	lsrs	r1, r3
 800d690:	430c      	orrs	r4, r1
 800d692:	4322      	orrs	r2, r4
 800d694:	0011      	movs	r1, r2
 800d696:	2200      	movs	r2, #0
 800d698:	42b5      	cmp	r5, r6
 800d69a:	d901      	bls.n	800d6a0 <__b2d+0x88>
 800d69c:	3d04      	subs	r5, #4
 800d69e:	682a      	ldr	r2, [r5, #0]
 800d6a0:	4664      	mov	r4, ip
 800d6a2:	40a7      	lsls	r7, r4
 800d6a4:	e7dd      	b.n	800d662 <__b2d+0x4a>
 800d6a6:	4322      	orrs	r2, r4
 800d6a8:	0011      	movs	r1, r2
 800d6aa:	e7dc      	b.n	800d666 <__b2d+0x4e>
 800d6ac:	3ff00000 	.word	0x3ff00000

0800d6b0 <__d2b>:
 800d6b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6b2:	2101      	movs	r1, #1
 800d6b4:	0016      	movs	r6, r2
 800d6b6:	001f      	movs	r7, r3
 800d6b8:	f7ff fbfe 	bl	800ceb8 <_Balloc>
 800d6bc:	1e04      	subs	r4, r0, #0
 800d6be:	d105      	bne.n	800d6cc <__d2b+0x1c>
 800d6c0:	0022      	movs	r2, r4
 800d6c2:	4b25      	ldr	r3, [pc, #148]	@ (800d758 <__d2b+0xa8>)
 800d6c4:	4825      	ldr	r0, [pc, #148]	@ (800d75c <__d2b+0xac>)
 800d6c6:	4926      	ldr	r1, [pc, #152]	@ (800d760 <__d2b+0xb0>)
 800d6c8:	f001 f8fa 	bl	800e8c0 <__assert_func>
 800d6cc:	033b      	lsls	r3, r7, #12
 800d6ce:	007d      	lsls	r5, r7, #1
 800d6d0:	0b1b      	lsrs	r3, r3, #12
 800d6d2:	0d6d      	lsrs	r5, r5, #21
 800d6d4:	d002      	beq.n	800d6dc <__d2b+0x2c>
 800d6d6:	2280      	movs	r2, #128	@ 0x80
 800d6d8:	0352      	lsls	r2, r2, #13
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	9301      	str	r3, [sp, #4]
 800d6de:	2e00      	cmp	r6, #0
 800d6e0:	d025      	beq.n	800d72e <__d2b+0x7e>
 800d6e2:	4668      	mov	r0, sp
 800d6e4:	9600      	str	r6, [sp, #0]
 800d6e6:	f7ff fd00 	bl	800d0ea <__lo0bits>
 800d6ea:	9b01      	ldr	r3, [sp, #4]
 800d6ec:	9900      	ldr	r1, [sp, #0]
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	d01b      	beq.n	800d72a <__d2b+0x7a>
 800d6f2:	2220      	movs	r2, #32
 800d6f4:	001e      	movs	r6, r3
 800d6f6:	1a12      	subs	r2, r2, r0
 800d6f8:	4096      	lsls	r6, r2
 800d6fa:	0032      	movs	r2, r6
 800d6fc:	40c3      	lsrs	r3, r0
 800d6fe:	430a      	orrs	r2, r1
 800d700:	6162      	str	r2, [r4, #20]
 800d702:	9301      	str	r3, [sp, #4]
 800d704:	9e01      	ldr	r6, [sp, #4]
 800d706:	61a6      	str	r6, [r4, #24]
 800d708:	1e73      	subs	r3, r6, #1
 800d70a:	419e      	sbcs	r6, r3
 800d70c:	3601      	adds	r6, #1
 800d70e:	6126      	str	r6, [r4, #16]
 800d710:	2d00      	cmp	r5, #0
 800d712:	d014      	beq.n	800d73e <__d2b+0x8e>
 800d714:	2635      	movs	r6, #53	@ 0x35
 800d716:	4b13      	ldr	r3, [pc, #76]	@ (800d764 <__d2b+0xb4>)
 800d718:	18ed      	adds	r5, r5, r3
 800d71a:	9b08      	ldr	r3, [sp, #32]
 800d71c:	182d      	adds	r5, r5, r0
 800d71e:	601d      	str	r5, [r3, #0]
 800d720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d722:	1a36      	subs	r6, r6, r0
 800d724:	601e      	str	r6, [r3, #0]
 800d726:	0020      	movs	r0, r4
 800d728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d72a:	6161      	str	r1, [r4, #20]
 800d72c:	e7ea      	b.n	800d704 <__d2b+0x54>
 800d72e:	a801      	add	r0, sp, #4
 800d730:	f7ff fcdb 	bl	800d0ea <__lo0bits>
 800d734:	9b01      	ldr	r3, [sp, #4]
 800d736:	2601      	movs	r6, #1
 800d738:	6163      	str	r3, [r4, #20]
 800d73a:	3020      	adds	r0, #32
 800d73c:	e7e7      	b.n	800d70e <__d2b+0x5e>
 800d73e:	4b0a      	ldr	r3, [pc, #40]	@ (800d768 <__d2b+0xb8>)
 800d740:	18c0      	adds	r0, r0, r3
 800d742:	9b08      	ldr	r3, [sp, #32]
 800d744:	6018      	str	r0, [r3, #0]
 800d746:	4b09      	ldr	r3, [pc, #36]	@ (800d76c <__d2b+0xbc>)
 800d748:	18f3      	adds	r3, r6, r3
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	18e3      	adds	r3, r4, r3
 800d74e:	6958      	ldr	r0, [r3, #20]
 800d750:	f7ff fcaa 	bl	800d0a8 <__hi0bits>
 800d754:	0176      	lsls	r6, r6, #5
 800d756:	e7e3      	b.n	800d720 <__d2b+0x70>
 800d758:	0800ee1b 	.word	0x0800ee1b
 800d75c:	0800ee8c 	.word	0x0800ee8c
 800d760:	0000030f 	.word	0x0000030f
 800d764:	fffffbcd 	.word	0xfffffbcd
 800d768:	fffffbce 	.word	0xfffffbce
 800d76c:	3fffffff 	.word	0x3fffffff

0800d770 <__ratio>:
 800d770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d772:	b087      	sub	sp, #28
 800d774:	000f      	movs	r7, r1
 800d776:	a904      	add	r1, sp, #16
 800d778:	0006      	movs	r6, r0
 800d77a:	f7ff ff4d 	bl	800d618 <__b2d>
 800d77e:	9000      	str	r0, [sp, #0]
 800d780:	9101      	str	r1, [sp, #4]
 800d782:	9b00      	ldr	r3, [sp, #0]
 800d784:	9c01      	ldr	r4, [sp, #4]
 800d786:	0038      	movs	r0, r7
 800d788:	a905      	add	r1, sp, #20
 800d78a:	9302      	str	r3, [sp, #8]
 800d78c:	9403      	str	r4, [sp, #12]
 800d78e:	f7ff ff43 	bl	800d618 <__b2d>
 800d792:	000d      	movs	r5, r1
 800d794:	0002      	movs	r2, r0
 800d796:	000b      	movs	r3, r1
 800d798:	6930      	ldr	r0, [r6, #16]
 800d79a:	6939      	ldr	r1, [r7, #16]
 800d79c:	9e04      	ldr	r6, [sp, #16]
 800d79e:	1a40      	subs	r0, r0, r1
 800d7a0:	9905      	ldr	r1, [sp, #20]
 800d7a2:	0140      	lsls	r0, r0, #5
 800d7a4:	1a71      	subs	r1, r6, r1
 800d7a6:	1841      	adds	r1, r0, r1
 800d7a8:	0508      	lsls	r0, r1, #20
 800d7aa:	2900      	cmp	r1, #0
 800d7ac:	dd08      	ble.n	800d7c0 <__ratio+0x50>
 800d7ae:	9901      	ldr	r1, [sp, #4]
 800d7b0:	1841      	adds	r1, r0, r1
 800d7b2:	9103      	str	r1, [sp, #12]
 800d7b4:	9802      	ldr	r0, [sp, #8]
 800d7b6:	9903      	ldr	r1, [sp, #12]
 800d7b8:	f7f3 fd86 	bl	80012c8 <__aeabi_ddiv>
 800d7bc:	b007      	add	sp, #28
 800d7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7c0:	1a2b      	subs	r3, r5, r0
 800d7c2:	e7f7      	b.n	800d7b4 <__ratio+0x44>

0800d7c4 <__copybits>:
 800d7c4:	b570      	push	{r4, r5, r6, lr}
 800d7c6:	0014      	movs	r4, r2
 800d7c8:	0005      	movs	r5, r0
 800d7ca:	3901      	subs	r1, #1
 800d7cc:	6913      	ldr	r3, [r2, #16]
 800d7ce:	1149      	asrs	r1, r1, #5
 800d7d0:	3101      	adds	r1, #1
 800d7d2:	0089      	lsls	r1, r1, #2
 800d7d4:	3414      	adds	r4, #20
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	1841      	adds	r1, r0, r1
 800d7da:	18e3      	adds	r3, r4, r3
 800d7dc:	42a3      	cmp	r3, r4
 800d7de:	d80d      	bhi.n	800d7fc <__copybits+0x38>
 800d7e0:	0014      	movs	r4, r2
 800d7e2:	3411      	adds	r4, #17
 800d7e4:	2500      	movs	r5, #0
 800d7e6:	429c      	cmp	r4, r3
 800d7e8:	d803      	bhi.n	800d7f2 <__copybits+0x2e>
 800d7ea:	1a9b      	subs	r3, r3, r2
 800d7ec:	3b11      	subs	r3, #17
 800d7ee:	089b      	lsrs	r3, r3, #2
 800d7f0:	009d      	lsls	r5, r3, #2
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	1940      	adds	r0, r0, r5
 800d7f6:	4281      	cmp	r1, r0
 800d7f8:	d803      	bhi.n	800d802 <__copybits+0x3e>
 800d7fa:	bd70      	pop	{r4, r5, r6, pc}
 800d7fc:	cc40      	ldmia	r4!, {r6}
 800d7fe:	c540      	stmia	r5!, {r6}
 800d800:	e7ec      	b.n	800d7dc <__copybits+0x18>
 800d802:	c008      	stmia	r0!, {r3}
 800d804:	e7f7      	b.n	800d7f6 <__copybits+0x32>

0800d806 <__any_on>:
 800d806:	0002      	movs	r2, r0
 800d808:	6900      	ldr	r0, [r0, #16]
 800d80a:	b510      	push	{r4, lr}
 800d80c:	3214      	adds	r2, #20
 800d80e:	114b      	asrs	r3, r1, #5
 800d810:	4298      	cmp	r0, r3
 800d812:	db13      	blt.n	800d83c <__any_on+0x36>
 800d814:	dd0c      	ble.n	800d830 <__any_on+0x2a>
 800d816:	241f      	movs	r4, #31
 800d818:	0008      	movs	r0, r1
 800d81a:	4020      	ands	r0, r4
 800d81c:	4221      	tst	r1, r4
 800d81e:	d007      	beq.n	800d830 <__any_on+0x2a>
 800d820:	0099      	lsls	r1, r3, #2
 800d822:	588c      	ldr	r4, [r1, r2]
 800d824:	0021      	movs	r1, r4
 800d826:	40c1      	lsrs	r1, r0
 800d828:	4081      	lsls	r1, r0
 800d82a:	2001      	movs	r0, #1
 800d82c:	428c      	cmp	r4, r1
 800d82e:	d104      	bne.n	800d83a <__any_on+0x34>
 800d830:	009b      	lsls	r3, r3, #2
 800d832:	18d3      	adds	r3, r2, r3
 800d834:	4293      	cmp	r3, r2
 800d836:	d803      	bhi.n	800d840 <__any_on+0x3a>
 800d838:	2000      	movs	r0, #0
 800d83a:	bd10      	pop	{r4, pc}
 800d83c:	0003      	movs	r3, r0
 800d83e:	e7f7      	b.n	800d830 <__any_on+0x2a>
 800d840:	3b04      	subs	r3, #4
 800d842:	6819      	ldr	r1, [r3, #0]
 800d844:	2900      	cmp	r1, #0
 800d846:	d0f5      	beq.n	800d834 <__any_on+0x2e>
 800d848:	2001      	movs	r0, #1
 800d84a:	e7f6      	b.n	800d83a <__any_on+0x34>

0800d84c <_strtol_l.constprop.0>:
 800d84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d84e:	b085      	sub	sp, #20
 800d850:	0017      	movs	r7, r2
 800d852:	001e      	movs	r6, r3
 800d854:	9003      	str	r0, [sp, #12]
 800d856:	9101      	str	r1, [sp, #4]
 800d858:	2b24      	cmp	r3, #36	@ 0x24
 800d85a:	d844      	bhi.n	800d8e6 <_strtol_l.constprop.0+0x9a>
 800d85c:	000c      	movs	r4, r1
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d041      	beq.n	800d8e6 <_strtol_l.constprop.0+0x9a>
 800d862:	4b3d      	ldr	r3, [pc, #244]	@ (800d958 <_strtol_l.constprop.0+0x10c>)
 800d864:	2208      	movs	r2, #8
 800d866:	469c      	mov	ip, r3
 800d868:	0023      	movs	r3, r4
 800d86a:	4661      	mov	r1, ip
 800d86c:	781d      	ldrb	r5, [r3, #0]
 800d86e:	3401      	adds	r4, #1
 800d870:	5d48      	ldrb	r0, [r1, r5]
 800d872:	0001      	movs	r1, r0
 800d874:	4011      	ands	r1, r2
 800d876:	4210      	tst	r0, r2
 800d878:	d1f6      	bne.n	800d868 <_strtol_l.constprop.0+0x1c>
 800d87a:	2d2d      	cmp	r5, #45	@ 0x2d
 800d87c:	d13a      	bne.n	800d8f4 <_strtol_l.constprop.0+0xa8>
 800d87e:	7825      	ldrb	r5, [r4, #0]
 800d880:	1c9c      	adds	r4, r3, #2
 800d882:	2301      	movs	r3, #1
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	2210      	movs	r2, #16
 800d888:	0033      	movs	r3, r6
 800d88a:	4393      	bics	r3, r2
 800d88c:	d109      	bne.n	800d8a2 <_strtol_l.constprop.0+0x56>
 800d88e:	2d30      	cmp	r5, #48	@ 0x30
 800d890:	d136      	bne.n	800d900 <_strtol_l.constprop.0+0xb4>
 800d892:	2120      	movs	r1, #32
 800d894:	7823      	ldrb	r3, [r4, #0]
 800d896:	438b      	bics	r3, r1
 800d898:	2b58      	cmp	r3, #88	@ 0x58
 800d89a:	d131      	bne.n	800d900 <_strtol_l.constprop.0+0xb4>
 800d89c:	0016      	movs	r6, r2
 800d89e:	7865      	ldrb	r5, [r4, #1]
 800d8a0:	3402      	adds	r4, #2
 800d8a2:	4a2e      	ldr	r2, [pc, #184]	@ (800d95c <_strtol_l.constprop.0+0x110>)
 800d8a4:	9b00      	ldr	r3, [sp, #0]
 800d8a6:	4694      	mov	ip, r2
 800d8a8:	4463      	add	r3, ip
 800d8aa:	0031      	movs	r1, r6
 800d8ac:	0018      	movs	r0, r3
 800d8ae:	9302      	str	r3, [sp, #8]
 800d8b0:	f7f2 fcd6 	bl	8000260 <__aeabi_uidivmod>
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	4684      	mov	ip, r0
 800d8b8:	0010      	movs	r0, r2
 800d8ba:	002b      	movs	r3, r5
 800d8bc:	3b30      	subs	r3, #48	@ 0x30
 800d8be:	2b09      	cmp	r3, #9
 800d8c0:	d825      	bhi.n	800d90e <_strtol_l.constprop.0+0xc2>
 800d8c2:	001d      	movs	r5, r3
 800d8c4:	42ae      	cmp	r6, r5
 800d8c6:	dd31      	ble.n	800d92c <_strtol_l.constprop.0+0xe0>
 800d8c8:	1c53      	adds	r3, r2, #1
 800d8ca:	d009      	beq.n	800d8e0 <_strtol_l.constprop.0+0x94>
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	4252      	negs	r2, r2
 800d8d0:	4584      	cmp	ip, r0
 800d8d2:	d305      	bcc.n	800d8e0 <_strtol_l.constprop.0+0x94>
 800d8d4:	d101      	bne.n	800d8da <_strtol_l.constprop.0+0x8e>
 800d8d6:	42a9      	cmp	r1, r5
 800d8d8:	db25      	blt.n	800d926 <_strtol_l.constprop.0+0xda>
 800d8da:	2201      	movs	r2, #1
 800d8dc:	4370      	muls	r0, r6
 800d8de:	1828      	adds	r0, r5, r0
 800d8e0:	7825      	ldrb	r5, [r4, #0]
 800d8e2:	3401      	adds	r4, #1
 800d8e4:	e7e9      	b.n	800d8ba <_strtol_l.constprop.0+0x6e>
 800d8e6:	f7fd ffa7 	bl	800b838 <__errno>
 800d8ea:	2316      	movs	r3, #22
 800d8ec:	6003      	str	r3, [r0, #0]
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	b005      	add	sp, #20
 800d8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8f4:	9100      	str	r1, [sp, #0]
 800d8f6:	2d2b      	cmp	r5, #43	@ 0x2b
 800d8f8:	d1c5      	bne.n	800d886 <_strtol_l.constprop.0+0x3a>
 800d8fa:	7825      	ldrb	r5, [r4, #0]
 800d8fc:	1c9c      	adds	r4, r3, #2
 800d8fe:	e7c2      	b.n	800d886 <_strtol_l.constprop.0+0x3a>
 800d900:	2e00      	cmp	r6, #0
 800d902:	d1ce      	bne.n	800d8a2 <_strtol_l.constprop.0+0x56>
 800d904:	3608      	adds	r6, #8
 800d906:	2d30      	cmp	r5, #48	@ 0x30
 800d908:	d0cb      	beq.n	800d8a2 <_strtol_l.constprop.0+0x56>
 800d90a:	3602      	adds	r6, #2
 800d90c:	e7c9      	b.n	800d8a2 <_strtol_l.constprop.0+0x56>
 800d90e:	002b      	movs	r3, r5
 800d910:	3b41      	subs	r3, #65	@ 0x41
 800d912:	2b19      	cmp	r3, #25
 800d914:	d801      	bhi.n	800d91a <_strtol_l.constprop.0+0xce>
 800d916:	3d37      	subs	r5, #55	@ 0x37
 800d918:	e7d4      	b.n	800d8c4 <_strtol_l.constprop.0+0x78>
 800d91a:	002b      	movs	r3, r5
 800d91c:	3b61      	subs	r3, #97	@ 0x61
 800d91e:	2b19      	cmp	r3, #25
 800d920:	d804      	bhi.n	800d92c <_strtol_l.constprop.0+0xe0>
 800d922:	3d57      	subs	r5, #87	@ 0x57
 800d924:	e7ce      	b.n	800d8c4 <_strtol_l.constprop.0+0x78>
 800d926:	2201      	movs	r2, #1
 800d928:	4252      	negs	r2, r2
 800d92a:	e7d9      	b.n	800d8e0 <_strtol_l.constprop.0+0x94>
 800d92c:	1c53      	adds	r3, r2, #1
 800d92e:	d108      	bne.n	800d942 <_strtol_l.constprop.0+0xf6>
 800d930:	2322      	movs	r3, #34	@ 0x22
 800d932:	9a03      	ldr	r2, [sp, #12]
 800d934:	9802      	ldr	r0, [sp, #8]
 800d936:	6013      	str	r3, [r2, #0]
 800d938:	2f00      	cmp	r7, #0
 800d93a:	d0d9      	beq.n	800d8f0 <_strtol_l.constprop.0+0xa4>
 800d93c:	1e63      	subs	r3, r4, #1
 800d93e:	9301      	str	r3, [sp, #4]
 800d940:	e007      	b.n	800d952 <_strtol_l.constprop.0+0x106>
 800d942:	9b00      	ldr	r3, [sp, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d000      	beq.n	800d94a <_strtol_l.constprop.0+0xfe>
 800d948:	4240      	negs	r0, r0
 800d94a:	2f00      	cmp	r7, #0
 800d94c:	d0d0      	beq.n	800d8f0 <_strtol_l.constprop.0+0xa4>
 800d94e:	2a00      	cmp	r2, #0
 800d950:	d1f4      	bne.n	800d93c <_strtol_l.constprop.0+0xf0>
 800d952:	9b01      	ldr	r3, [sp, #4]
 800d954:	603b      	str	r3, [r7, #0]
 800d956:	e7cb      	b.n	800d8f0 <_strtol_l.constprop.0+0xa4>
 800d958:	0800efe9 	.word	0x0800efe9
 800d95c:	7fffffff 	.word	0x7fffffff

0800d960 <_strtol_r>:
 800d960:	b510      	push	{r4, lr}
 800d962:	f7ff ff73 	bl	800d84c <_strtol_l.constprop.0>
 800d966:	bd10      	pop	{r4, pc}

0800d968 <__ascii_wctomb>:
 800d968:	0003      	movs	r3, r0
 800d96a:	1e08      	subs	r0, r1, #0
 800d96c:	d005      	beq.n	800d97a <__ascii_wctomb+0x12>
 800d96e:	2aff      	cmp	r2, #255	@ 0xff
 800d970:	d904      	bls.n	800d97c <__ascii_wctomb+0x14>
 800d972:	228a      	movs	r2, #138	@ 0x8a
 800d974:	2001      	movs	r0, #1
 800d976:	601a      	str	r2, [r3, #0]
 800d978:	4240      	negs	r0, r0
 800d97a:	4770      	bx	lr
 800d97c:	2001      	movs	r0, #1
 800d97e:	700a      	strb	r2, [r1, #0]
 800d980:	e7fb      	b.n	800d97a <__ascii_wctomb+0x12>
	...

0800d984 <__ssputs_r>:
 800d984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d986:	688e      	ldr	r6, [r1, #8]
 800d988:	b085      	sub	sp, #20
 800d98a:	001f      	movs	r7, r3
 800d98c:	000c      	movs	r4, r1
 800d98e:	680b      	ldr	r3, [r1, #0]
 800d990:	9002      	str	r0, [sp, #8]
 800d992:	9203      	str	r2, [sp, #12]
 800d994:	42be      	cmp	r6, r7
 800d996:	d830      	bhi.n	800d9fa <__ssputs_r+0x76>
 800d998:	210c      	movs	r1, #12
 800d99a:	5e62      	ldrsh	r2, [r4, r1]
 800d99c:	2190      	movs	r1, #144	@ 0x90
 800d99e:	00c9      	lsls	r1, r1, #3
 800d9a0:	420a      	tst	r2, r1
 800d9a2:	d028      	beq.n	800d9f6 <__ssputs_r+0x72>
 800d9a4:	2003      	movs	r0, #3
 800d9a6:	6921      	ldr	r1, [r4, #16]
 800d9a8:	1a5b      	subs	r3, r3, r1
 800d9aa:	9301      	str	r3, [sp, #4]
 800d9ac:	6963      	ldr	r3, [r4, #20]
 800d9ae:	4343      	muls	r3, r0
 800d9b0:	9801      	ldr	r0, [sp, #4]
 800d9b2:	0fdd      	lsrs	r5, r3, #31
 800d9b4:	18ed      	adds	r5, r5, r3
 800d9b6:	1c7b      	adds	r3, r7, #1
 800d9b8:	181b      	adds	r3, r3, r0
 800d9ba:	106d      	asrs	r5, r5, #1
 800d9bc:	42ab      	cmp	r3, r5
 800d9be:	d900      	bls.n	800d9c2 <__ssputs_r+0x3e>
 800d9c0:	001d      	movs	r5, r3
 800d9c2:	0552      	lsls	r2, r2, #21
 800d9c4:	d528      	bpl.n	800da18 <__ssputs_r+0x94>
 800d9c6:	0029      	movs	r1, r5
 800d9c8:	9802      	ldr	r0, [sp, #8]
 800d9ca:	f7ff f9d3 	bl	800cd74 <_malloc_r>
 800d9ce:	1e06      	subs	r6, r0, #0
 800d9d0:	d02c      	beq.n	800da2c <__ssputs_r+0xa8>
 800d9d2:	9a01      	ldr	r2, [sp, #4]
 800d9d4:	6921      	ldr	r1, [r4, #16]
 800d9d6:	f7fd ff67 	bl	800b8a8 <memcpy>
 800d9da:	89a2      	ldrh	r2, [r4, #12]
 800d9dc:	4b18      	ldr	r3, [pc, #96]	@ (800da40 <__ssputs_r+0xbc>)
 800d9de:	401a      	ands	r2, r3
 800d9e0:	2380      	movs	r3, #128	@ 0x80
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	81a3      	strh	r3, [r4, #12]
 800d9e6:	9b01      	ldr	r3, [sp, #4]
 800d9e8:	6126      	str	r6, [r4, #16]
 800d9ea:	18f6      	adds	r6, r6, r3
 800d9ec:	6026      	str	r6, [r4, #0]
 800d9ee:	003e      	movs	r6, r7
 800d9f0:	6165      	str	r5, [r4, #20]
 800d9f2:	1aed      	subs	r5, r5, r3
 800d9f4:	60a5      	str	r5, [r4, #8]
 800d9f6:	42be      	cmp	r6, r7
 800d9f8:	d900      	bls.n	800d9fc <__ssputs_r+0x78>
 800d9fa:	003e      	movs	r6, r7
 800d9fc:	0032      	movs	r2, r6
 800d9fe:	9903      	ldr	r1, [sp, #12]
 800da00:	6820      	ldr	r0, [r4, #0]
 800da02:	f000 ff13 	bl	800e82c <memmove>
 800da06:	2000      	movs	r0, #0
 800da08:	68a3      	ldr	r3, [r4, #8]
 800da0a:	1b9b      	subs	r3, r3, r6
 800da0c:	60a3      	str	r3, [r4, #8]
 800da0e:	6823      	ldr	r3, [r4, #0]
 800da10:	199b      	adds	r3, r3, r6
 800da12:	6023      	str	r3, [r4, #0]
 800da14:	b005      	add	sp, #20
 800da16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da18:	002a      	movs	r2, r5
 800da1a:	9802      	ldr	r0, [sp, #8]
 800da1c:	f000 ff9b 	bl	800e956 <_realloc_r>
 800da20:	1e06      	subs	r6, r0, #0
 800da22:	d1e0      	bne.n	800d9e6 <__ssputs_r+0x62>
 800da24:	6921      	ldr	r1, [r4, #16]
 800da26:	9802      	ldr	r0, [sp, #8]
 800da28:	f7fe fdd4 	bl	800c5d4 <_free_r>
 800da2c:	230c      	movs	r3, #12
 800da2e:	2001      	movs	r0, #1
 800da30:	9a02      	ldr	r2, [sp, #8]
 800da32:	4240      	negs	r0, r0
 800da34:	6013      	str	r3, [r2, #0]
 800da36:	89a2      	ldrh	r2, [r4, #12]
 800da38:	3334      	adds	r3, #52	@ 0x34
 800da3a:	4313      	orrs	r3, r2
 800da3c:	81a3      	strh	r3, [r4, #12]
 800da3e:	e7e9      	b.n	800da14 <__ssputs_r+0x90>
 800da40:	fffffb7f 	.word	0xfffffb7f

0800da44 <_svfiprintf_r>:
 800da44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da46:	b0a1      	sub	sp, #132	@ 0x84
 800da48:	9003      	str	r0, [sp, #12]
 800da4a:	001d      	movs	r5, r3
 800da4c:	898b      	ldrh	r3, [r1, #12]
 800da4e:	000f      	movs	r7, r1
 800da50:	0016      	movs	r6, r2
 800da52:	061b      	lsls	r3, r3, #24
 800da54:	d511      	bpl.n	800da7a <_svfiprintf_r+0x36>
 800da56:	690b      	ldr	r3, [r1, #16]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10e      	bne.n	800da7a <_svfiprintf_r+0x36>
 800da5c:	2140      	movs	r1, #64	@ 0x40
 800da5e:	f7ff f989 	bl	800cd74 <_malloc_r>
 800da62:	6038      	str	r0, [r7, #0]
 800da64:	6138      	str	r0, [r7, #16]
 800da66:	2800      	cmp	r0, #0
 800da68:	d105      	bne.n	800da76 <_svfiprintf_r+0x32>
 800da6a:	230c      	movs	r3, #12
 800da6c:	9a03      	ldr	r2, [sp, #12]
 800da6e:	6013      	str	r3, [r2, #0]
 800da70:	2001      	movs	r0, #1
 800da72:	4240      	negs	r0, r0
 800da74:	e0cf      	b.n	800dc16 <_svfiprintf_r+0x1d2>
 800da76:	2340      	movs	r3, #64	@ 0x40
 800da78:	617b      	str	r3, [r7, #20]
 800da7a:	2300      	movs	r3, #0
 800da7c:	ac08      	add	r4, sp, #32
 800da7e:	6163      	str	r3, [r4, #20]
 800da80:	3320      	adds	r3, #32
 800da82:	7663      	strb	r3, [r4, #25]
 800da84:	3310      	adds	r3, #16
 800da86:	76a3      	strb	r3, [r4, #26]
 800da88:	9507      	str	r5, [sp, #28]
 800da8a:	0035      	movs	r5, r6
 800da8c:	782b      	ldrb	r3, [r5, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <_svfiprintf_r+0x52>
 800da92:	2b25      	cmp	r3, #37	@ 0x25
 800da94:	d148      	bne.n	800db28 <_svfiprintf_r+0xe4>
 800da96:	1bab      	subs	r3, r5, r6
 800da98:	9305      	str	r3, [sp, #20]
 800da9a:	42b5      	cmp	r5, r6
 800da9c:	d00b      	beq.n	800dab6 <_svfiprintf_r+0x72>
 800da9e:	0032      	movs	r2, r6
 800daa0:	0039      	movs	r1, r7
 800daa2:	9803      	ldr	r0, [sp, #12]
 800daa4:	f7ff ff6e 	bl	800d984 <__ssputs_r>
 800daa8:	3001      	adds	r0, #1
 800daaa:	d100      	bne.n	800daae <_svfiprintf_r+0x6a>
 800daac:	e0ae      	b.n	800dc0c <_svfiprintf_r+0x1c8>
 800daae:	6963      	ldr	r3, [r4, #20]
 800dab0:	9a05      	ldr	r2, [sp, #20]
 800dab2:	189b      	adds	r3, r3, r2
 800dab4:	6163      	str	r3, [r4, #20]
 800dab6:	782b      	ldrb	r3, [r5, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d100      	bne.n	800dabe <_svfiprintf_r+0x7a>
 800dabc:	e0a6      	b.n	800dc0c <_svfiprintf_r+0x1c8>
 800dabe:	2201      	movs	r2, #1
 800dac0:	2300      	movs	r3, #0
 800dac2:	4252      	negs	r2, r2
 800dac4:	6062      	str	r2, [r4, #4]
 800dac6:	a904      	add	r1, sp, #16
 800dac8:	3254      	adds	r2, #84	@ 0x54
 800daca:	1852      	adds	r2, r2, r1
 800dacc:	1c6e      	adds	r6, r5, #1
 800dace:	6023      	str	r3, [r4, #0]
 800dad0:	60e3      	str	r3, [r4, #12]
 800dad2:	60a3      	str	r3, [r4, #8]
 800dad4:	7013      	strb	r3, [r2, #0]
 800dad6:	65a3      	str	r3, [r4, #88]	@ 0x58
 800dad8:	4b54      	ldr	r3, [pc, #336]	@ (800dc2c <_svfiprintf_r+0x1e8>)
 800dada:	2205      	movs	r2, #5
 800dadc:	0018      	movs	r0, r3
 800dade:	7831      	ldrb	r1, [r6, #0]
 800dae0:	9305      	str	r3, [sp, #20]
 800dae2:	f7fd fed6 	bl	800b892 <memchr>
 800dae6:	1c75      	adds	r5, r6, #1
 800dae8:	2800      	cmp	r0, #0
 800daea:	d11f      	bne.n	800db2c <_svfiprintf_r+0xe8>
 800daec:	6822      	ldr	r2, [r4, #0]
 800daee:	06d3      	lsls	r3, r2, #27
 800daf0:	d504      	bpl.n	800dafc <_svfiprintf_r+0xb8>
 800daf2:	2353      	movs	r3, #83	@ 0x53
 800daf4:	a904      	add	r1, sp, #16
 800daf6:	185b      	adds	r3, r3, r1
 800daf8:	2120      	movs	r1, #32
 800dafa:	7019      	strb	r1, [r3, #0]
 800dafc:	0713      	lsls	r3, r2, #28
 800dafe:	d504      	bpl.n	800db0a <_svfiprintf_r+0xc6>
 800db00:	2353      	movs	r3, #83	@ 0x53
 800db02:	a904      	add	r1, sp, #16
 800db04:	185b      	adds	r3, r3, r1
 800db06:	212b      	movs	r1, #43	@ 0x2b
 800db08:	7019      	strb	r1, [r3, #0]
 800db0a:	7833      	ldrb	r3, [r6, #0]
 800db0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800db0e:	d016      	beq.n	800db3e <_svfiprintf_r+0xfa>
 800db10:	0035      	movs	r5, r6
 800db12:	2100      	movs	r1, #0
 800db14:	200a      	movs	r0, #10
 800db16:	68e3      	ldr	r3, [r4, #12]
 800db18:	782a      	ldrb	r2, [r5, #0]
 800db1a:	1c6e      	adds	r6, r5, #1
 800db1c:	3a30      	subs	r2, #48	@ 0x30
 800db1e:	2a09      	cmp	r2, #9
 800db20:	d950      	bls.n	800dbc4 <_svfiprintf_r+0x180>
 800db22:	2900      	cmp	r1, #0
 800db24:	d111      	bne.n	800db4a <_svfiprintf_r+0x106>
 800db26:	e017      	b.n	800db58 <_svfiprintf_r+0x114>
 800db28:	3501      	adds	r5, #1
 800db2a:	e7af      	b.n	800da8c <_svfiprintf_r+0x48>
 800db2c:	9b05      	ldr	r3, [sp, #20]
 800db2e:	6822      	ldr	r2, [r4, #0]
 800db30:	1ac0      	subs	r0, r0, r3
 800db32:	2301      	movs	r3, #1
 800db34:	4083      	lsls	r3, r0
 800db36:	4313      	orrs	r3, r2
 800db38:	002e      	movs	r6, r5
 800db3a:	6023      	str	r3, [r4, #0]
 800db3c:	e7cc      	b.n	800dad8 <_svfiprintf_r+0x94>
 800db3e:	9b07      	ldr	r3, [sp, #28]
 800db40:	1d19      	adds	r1, r3, #4
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	9107      	str	r1, [sp, #28]
 800db46:	2b00      	cmp	r3, #0
 800db48:	db01      	blt.n	800db4e <_svfiprintf_r+0x10a>
 800db4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db4c:	e004      	b.n	800db58 <_svfiprintf_r+0x114>
 800db4e:	425b      	negs	r3, r3
 800db50:	60e3      	str	r3, [r4, #12]
 800db52:	2302      	movs	r3, #2
 800db54:	4313      	orrs	r3, r2
 800db56:	6023      	str	r3, [r4, #0]
 800db58:	782b      	ldrb	r3, [r5, #0]
 800db5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800db5c:	d10c      	bne.n	800db78 <_svfiprintf_r+0x134>
 800db5e:	786b      	ldrb	r3, [r5, #1]
 800db60:	2b2a      	cmp	r3, #42	@ 0x2a
 800db62:	d134      	bne.n	800dbce <_svfiprintf_r+0x18a>
 800db64:	9b07      	ldr	r3, [sp, #28]
 800db66:	3502      	adds	r5, #2
 800db68:	1d1a      	adds	r2, r3, #4
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	9207      	str	r2, [sp, #28]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	da01      	bge.n	800db76 <_svfiprintf_r+0x132>
 800db72:	2301      	movs	r3, #1
 800db74:	425b      	negs	r3, r3
 800db76:	9309      	str	r3, [sp, #36]	@ 0x24
 800db78:	4e2d      	ldr	r6, [pc, #180]	@ (800dc30 <_svfiprintf_r+0x1ec>)
 800db7a:	2203      	movs	r2, #3
 800db7c:	0030      	movs	r0, r6
 800db7e:	7829      	ldrb	r1, [r5, #0]
 800db80:	f7fd fe87 	bl	800b892 <memchr>
 800db84:	2800      	cmp	r0, #0
 800db86:	d006      	beq.n	800db96 <_svfiprintf_r+0x152>
 800db88:	2340      	movs	r3, #64	@ 0x40
 800db8a:	1b80      	subs	r0, r0, r6
 800db8c:	4083      	lsls	r3, r0
 800db8e:	6822      	ldr	r2, [r4, #0]
 800db90:	3501      	adds	r5, #1
 800db92:	4313      	orrs	r3, r2
 800db94:	6023      	str	r3, [r4, #0]
 800db96:	7829      	ldrb	r1, [r5, #0]
 800db98:	2206      	movs	r2, #6
 800db9a:	4826      	ldr	r0, [pc, #152]	@ (800dc34 <_svfiprintf_r+0x1f0>)
 800db9c:	1c6e      	adds	r6, r5, #1
 800db9e:	7621      	strb	r1, [r4, #24]
 800dba0:	f7fd fe77 	bl	800b892 <memchr>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d038      	beq.n	800dc1a <_svfiprintf_r+0x1d6>
 800dba8:	4b23      	ldr	r3, [pc, #140]	@ (800dc38 <_svfiprintf_r+0x1f4>)
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d122      	bne.n	800dbf4 <_svfiprintf_r+0x1b0>
 800dbae:	2207      	movs	r2, #7
 800dbb0:	9b07      	ldr	r3, [sp, #28]
 800dbb2:	3307      	adds	r3, #7
 800dbb4:	4393      	bics	r3, r2
 800dbb6:	3308      	adds	r3, #8
 800dbb8:	9307      	str	r3, [sp, #28]
 800dbba:	6963      	ldr	r3, [r4, #20]
 800dbbc:	9a04      	ldr	r2, [sp, #16]
 800dbbe:	189b      	adds	r3, r3, r2
 800dbc0:	6163      	str	r3, [r4, #20]
 800dbc2:	e762      	b.n	800da8a <_svfiprintf_r+0x46>
 800dbc4:	4343      	muls	r3, r0
 800dbc6:	0035      	movs	r5, r6
 800dbc8:	2101      	movs	r1, #1
 800dbca:	189b      	adds	r3, r3, r2
 800dbcc:	e7a4      	b.n	800db18 <_svfiprintf_r+0xd4>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	200a      	movs	r0, #10
 800dbd2:	0019      	movs	r1, r3
 800dbd4:	3501      	adds	r5, #1
 800dbd6:	6063      	str	r3, [r4, #4]
 800dbd8:	782a      	ldrb	r2, [r5, #0]
 800dbda:	1c6e      	adds	r6, r5, #1
 800dbdc:	3a30      	subs	r2, #48	@ 0x30
 800dbde:	2a09      	cmp	r2, #9
 800dbe0:	d903      	bls.n	800dbea <_svfiprintf_r+0x1a6>
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d0c8      	beq.n	800db78 <_svfiprintf_r+0x134>
 800dbe6:	9109      	str	r1, [sp, #36]	@ 0x24
 800dbe8:	e7c6      	b.n	800db78 <_svfiprintf_r+0x134>
 800dbea:	4341      	muls	r1, r0
 800dbec:	0035      	movs	r5, r6
 800dbee:	2301      	movs	r3, #1
 800dbf0:	1889      	adds	r1, r1, r2
 800dbf2:	e7f1      	b.n	800dbd8 <_svfiprintf_r+0x194>
 800dbf4:	aa07      	add	r2, sp, #28
 800dbf6:	9200      	str	r2, [sp, #0]
 800dbf8:	0021      	movs	r1, r4
 800dbfa:	003a      	movs	r2, r7
 800dbfc:	4b0f      	ldr	r3, [pc, #60]	@ (800dc3c <_svfiprintf_r+0x1f8>)
 800dbfe:	9803      	ldr	r0, [sp, #12]
 800dc00:	f7fc fd52 	bl	800a6a8 <_printf_float>
 800dc04:	9004      	str	r0, [sp, #16]
 800dc06:	9b04      	ldr	r3, [sp, #16]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	d1d6      	bne.n	800dbba <_svfiprintf_r+0x176>
 800dc0c:	89bb      	ldrh	r3, [r7, #12]
 800dc0e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800dc10:	065b      	lsls	r3, r3, #25
 800dc12:	d500      	bpl.n	800dc16 <_svfiprintf_r+0x1d2>
 800dc14:	e72c      	b.n	800da70 <_svfiprintf_r+0x2c>
 800dc16:	b021      	add	sp, #132	@ 0x84
 800dc18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc1a:	aa07      	add	r2, sp, #28
 800dc1c:	9200      	str	r2, [sp, #0]
 800dc1e:	0021      	movs	r1, r4
 800dc20:	003a      	movs	r2, r7
 800dc22:	4b06      	ldr	r3, [pc, #24]	@ (800dc3c <_svfiprintf_r+0x1f8>)
 800dc24:	9803      	ldr	r0, [sp, #12]
 800dc26:	f7fc ffed 	bl	800ac04 <_printf_i>
 800dc2a:	e7eb      	b.n	800dc04 <_svfiprintf_r+0x1c0>
 800dc2c:	0800f0e9 	.word	0x0800f0e9
 800dc30:	0800f0ef 	.word	0x0800f0ef
 800dc34:	0800f0f3 	.word	0x0800f0f3
 800dc38:	0800a6a9 	.word	0x0800a6a9
 800dc3c:	0800d985 	.word	0x0800d985

0800dc40 <_sungetc_r>:
 800dc40:	b570      	push	{r4, r5, r6, lr}
 800dc42:	0014      	movs	r4, r2
 800dc44:	1c4b      	adds	r3, r1, #1
 800dc46:	d103      	bne.n	800dc50 <_sungetc_r+0x10>
 800dc48:	2501      	movs	r5, #1
 800dc4a:	426d      	negs	r5, r5
 800dc4c:	0028      	movs	r0, r5
 800dc4e:	bd70      	pop	{r4, r5, r6, pc}
 800dc50:	8993      	ldrh	r3, [r2, #12]
 800dc52:	2220      	movs	r2, #32
 800dc54:	4393      	bics	r3, r2
 800dc56:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800dc58:	81a3      	strh	r3, [r4, #12]
 800dc5a:	b2ce      	uxtb	r6, r1
 800dc5c:	6863      	ldr	r3, [r4, #4]
 800dc5e:	b2cd      	uxtb	r5, r1
 800dc60:	2a00      	cmp	r2, #0
 800dc62:	d010      	beq.n	800dc86 <_sungetc_r+0x46>
 800dc64:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dc66:	429a      	cmp	r2, r3
 800dc68:	dd07      	ble.n	800dc7a <_sungetc_r+0x3a>
 800dc6a:	6823      	ldr	r3, [r4, #0]
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	6023      	str	r3, [r4, #0]
 800dc70:	701e      	strb	r6, [r3, #0]
 800dc72:	6863      	ldr	r3, [r4, #4]
 800dc74:	3301      	adds	r3, #1
 800dc76:	6063      	str	r3, [r4, #4]
 800dc78:	e7e8      	b.n	800dc4c <_sungetc_r+0xc>
 800dc7a:	0021      	movs	r1, r4
 800dc7c:	f000 fd98 	bl	800e7b0 <__submore>
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d0f2      	beq.n	800dc6a <_sungetc_r+0x2a>
 800dc84:	e7e0      	b.n	800dc48 <_sungetc_r+0x8>
 800dc86:	6921      	ldr	r1, [r4, #16]
 800dc88:	6822      	ldr	r2, [r4, #0]
 800dc8a:	2900      	cmp	r1, #0
 800dc8c:	d007      	beq.n	800dc9e <_sungetc_r+0x5e>
 800dc8e:	4291      	cmp	r1, r2
 800dc90:	d205      	bcs.n	800dc9e <_sungetc_r+0x5e>
 800dc92:	1e51      	subs	r1, r2, #1
 800dc94:	7808      	ldrb	r0, [r1, #0]
 800dc96:	42a8      	cmp	r0, r5
 800dc98:	d101      	bne.n	800dc9e <_sungetc_r+0x5e>
 800dc9a:	6021      	str	r1, [r4, #0]
 800dc9c:	e7ea      	b.n	800dc74 <_sungetc_r+0x34>
 800dc9e:	6423      	str	r3, [r4, #64]	@ 0x40
 800dca0:	0023      	movs	r3, r4
 800dca2:	3344      	adds	r3, #68	@ 0x44
 800dca4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dca6:	2303      	movs	r3, #3
 800dca8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800dcaa:	0023      	movs	r3, r4
 800dcac:	3346      	adds	r3, #70	@ 0x46
 800dcae:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800dcb0:	701e      	strb	r6, [r3, #0]
 800dcb2:	6023      	str	r3, [r4, #0]
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	e7de      	b.n	800dc76 <_sungetc_r+0x36>

0800dcb8 <__ssrefill_r>:
 800dcb8:	b510      	push	{r4, lr}
 800dcba:	000c      	movs	r4, r1
 800dcbc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800dcbe:	2900      	cmp	r1, #0
 800dcc0:	d00e      	beq.n	800dce0 <__ssrefill_r+0x28>
 800dcc2:	0023      	movs	r3, r4
 800dcc4:	3344      	adds	r3, #68	@ 0x44
 800dcc6:	4299      	cmp	r1, r3
 800dcc8:	d001      	beq.n	800dcce <__ssrefill_r+0x16>
 800dcca:	f7fe fc83 	bl	800c5d4 <_free_r>
 800dcce:	2000      	movs	r0, #0
 800dcd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dcd2:	6360      	str	r0, [r4, #52]	@ 0x34
 800dcd4:	6063      	str	r3, [r4, #4]
 800dcd6:	4283      	cmp	r3, r0
 800dcd8:	d002      	beq.n	800dce0 <__ssrefill_r+0x28>
 800dcda:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dcdc:	6023      	str	r3, [r4, #0]
 800dcde:	bd10      	pop	{r4, pc}
 800dce0:	6923      	ldr	r3, [r4, #16]
 800dce2:	2001      	movs	r0, #1
 800dce4:	6023      	str	r3, [r4, #0]
 800dce6:	2300      	movs	r3, #0
 800dce8:	89a2      	ldrh	r2, [r4, #12]
 800dcea:	6063      	str	r3, [r4, #4]
 800dcec:	3320      	adds	r3, #32
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	81a3      	strh	r3, [r4, #12]
 800dcf2:	4240      	negs	r0, r0
 800dcf4:	e7f3      	b.n	800dcde <__ssrefill_r+0x26>
	...

0800dcf8 <__ssvfiscanf_r>:
 800dcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcfa:	4caa      	ldr	r4, [pc, #680]	@ (800dfa4 <__ssvfiscanf_r+0x2ac>)
 800dcfc:	44a5      	add	sp, r4
 800dcfe:	000c      	movs	r4, r1
 800dd00:	2100      	movs	r1, #0
 800dd02:	9001      	str	r0, [sp, #4]
 800dd04:	20be      	movs	r0, #190	@ 0xbe
 800dd06:	9146      	str	r1, [sp, #280]	@ 0x118
 800dd08:	9147      	str	r1, [sp, #284]	@ 0x11c
 800dd0a:	a903      	add	r1, sp, #12
 800dd0c:	9148      	str	r1, [sp, #288]	@ 0x120
 800dd0e:	49a6      	ldr	r1, [pc, #664]	@ (800dfa8 <__ssvfiscanf_r+0x2b0>)
 800dd10:	0040      	lsls	r0, r0, #1
 800dd12:	ad43      	add	r5, sp, #268	@ 0x10c
 800dd14:	5029      	str	r1, [r5, r0]
 800dd16:	49a5      	ldr	r1, [pc, #660]	@ (800dfac <__ssvfiscanf_r+0x2b4>)
 800dd18:	3004      	adds	r0, #4
 800dd1a:	ad43      	add	r5, sp, #268	@ 0x10c
 800dd1c:	5029      	str	r1, [r5, r0]
 800dd1e:	9302      	str	r3, [sp, #8]
 800dd20:	7813      	ldrb	r3, [r2, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d100      	bne.n	800dd28 <__ssvfiscanf_r+0x30>
 800dd26:	e13a      	b.n	800df9e <__ssvfiscanf_r+0x2a6>
 800dd28:	2108      	movs	r1, #8
 800dd2a:	2708      	movs	r7, #8
 800dd2c:	4ea0      	ldr	r6, [pc, #640]	@ (800dfb0 <__ssvfiscanf_r+0x2b8>)
 800dd2e:	1c55      	adds	r5, r2, #1
 800dd30:	5cf0      	ldrb	r0, [r6, r3]
 800dd32:	4001      	ands	r1, r0
 800dd34:	4238      	tst	r0, r7
 800dd36:	d01c      	beq.n	800dd72 <__ssvfiscanf_r+0x7a>
 800dd38:	6863      	ldr	r3, [r4, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	dd0f      	ble.n	800dd5e <__ssvfiscanf_r+0x66>
 800dd3e:	6823      	ldr	r3, [r4, #0]
 800dd40:	781a      	ldrb	r2, [r3, #0]
 800dd42:	5cb2      	ldrb	r2, [r6, r2]
 800dd44:	423a      	tst	r2, r7
 800dd46:	d101      	bne.n	800dd4c <__ssvfiscanf_r+0x54>
 800dd48:	002a      	movs	r2, r5
 800dd4a:	e7e9      	b.n	800dd20 <__ssvfiscanf_r+0x28>
 800dd4c:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800dd4e:	3301      	adds	r3, #1
 800dd50:	3201      	adds	r2, #1
 800dd52:	9247      	str	r2, [sp, #284]	@ 0x11c
 800dd54:	6862      	ldr	r2, [r4, #4]
 800dd56:	6023      	str	r3, [r4, #0]
 800dd58:	3a01      	subs	r2, #1
 800dd5a:	6062      	str	r2, [r4, #4]
 800dd5c:	e7ec      	b.n	800dd38 <__ssvfiscanf_r+0x40>
 800dd5e:	22c0      	movs	r2, #192	@ 0xc0
 800dd60:	ab43      	add	r3, sp, #268	@ 0x10c
 800dd62:	0052      	lsls	r2, r2, #1
 800dd64:	0021      	movs	r1, r4
 800dd66:	589b      	ldr	r3, [r3, r2]
 800dd68:	9801      	ldr	r0, [sp, #4]
 800dd6a:	4798      	blx	r3
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	d0e6      	beq.n	800dd3e <__ssvfiscanf_r+0x46>
 800dd70:	e7ea      	b.n	800dd48 <__ssvfiscanf_r+0x50>
 800dd72:	001e      	movs	r6, r3
 800dd74:	2b25      	cmp	r3, #37	@ 0x25
 800dd76:	d160      	bne.n	800de3a <__ssvfiscanf_r+0x142>
 800dd78:	9145      	str	r1, [sp, #276]	@ 0x114
 800dd7a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800dd7c:	7853      	ldrb	r3, [r2, #1]
 800dd7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd80:	d102      	bne.n	800dd88 <__ssvfiscanf_r+0x90>
 800dd82:	3b1a      	subs	r3, #26
 800dd84:	9343      	str	r3, [sp, #268]	@ 0x10c
 800dd86:	1c95      	adds	r5, r2, #2
 800dd88:	002e      	movs	r6, r5
 800dd8a:	220a      	movs	r2, #10
 800dd8c:	7831      	ldrb	r1, [r6, #0]
 800dd8e:	1c75      	adds	r5, r6, #1
 800dd90:	000b      	movs	r3, r1
 800dd92:	3b30      	subs	r3, #48	@ 0x30
 800dd94:	2b09      	cmp	r3, #9
 800dd96:	d91d      	bls.n	800ddd4 <__ssvfiscanf_r+0xdc>
 800dd98:	4f86      	ldr	r7, [pc, #536]	@ (800dfb4 <__ssvfiscanf_r+0x2bc>)
 800dd9a:	2203      	movs	r2, #3
 800dd9c:	0038      	movs	r0, r7
 800dd9e:	f7fd fd78 	bl	800b892 <memchr>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d006      	beq.n	800ddb4 <__ssvfiscanf_r+0xbc>
 800dda6:	2301      	movs	r3, #1
 800dda8:	1bc0      	subs	r0, r0, r7
 800ddaa:	4083      	lsls	r3, r0
 800ddac:	002e      	movs	r6, r5
 800ddae:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	9343      	str	r3, [sp, #268]	@ 0x10c
 800ddb4:	1c75      	adds	r5, r6, #1
 800ddb6:	7836      	ldrb	r6, [r6, #0]
 800ddb8:	2e78      	cmp	r6, #120	@ 0x78
 800ddba:	d806      	bhi.n	800ddca <__ssvfiscanf_r+0xd2>
 800ddbc:	2e57      	cmp	r6, #87	@ 0x57
 800ddbe:	d810      	bhi.n	800dde2 <__ssvfiscanf_r+0xea>
 800ddc0:	2e25      	cmp	r6, #37	@ 0x25
 800ddc2:	d03a      	beq.n	800de3a <__ssvfiscanf_r+0x142>
 800ddc4:	d834      	bhi.n	800de30 <__ssvfiscanf_r+0x138>
 800ddc6:	2e00      	cmp	r6, #0
 800ddc8:	d055      	beq.n	800de76 <__ssvfiscanf_r+0x17e>
 800ddca:	2303      	movs	r3, #3
 800ddcc:	9349      	str	r3, [sp, #292]	@ 0x124
 800ddce:	3307      	adds	r3, #7
 800ddd0:	9344      	str	r3, [sp, #272]	@ 0x110
 800ddd2:	e069      	b.n	800dea8 <__ssvfiscanf_r+0x1b0>
 800ddd4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800ddd6:	002e      	movs	r6, r5
 800ddd8:	4353      	muls	r3, r2
 800ddda:	3b30      	subs	r3, #48	@ 0x30
 800dddc:	185b      	adds	r3, r3, r1
 800ddde:	9345      	str	r3, [sp, #276]	@ 0x114
 800dde0:	e7d4      	b.n	800dd8c <__ssvfiscanf_r+0x94>
 800dde2:	0030      	movs	r0, r6
 800dde4:	3858      	subs	r0, #88	@ 0x58
 800dde6:	2820      	cmp	r0, #32
 800dde8:	d8ef      	bhi.n	800ddca <__ssvfiscanf_r+0xd2>
 800ddea:	f7f2 f9a9 	bl	8000140 <__gnu_thumb1_case_shi>
 800ddee:	004b      	.short	0x004b
 800ddf0:	ffeeffee 	.word	0xffeeffee
 800ddf4:	ffee007d 	.word	0xffee007d
 800ddf8:	ffeeffee 	.word	0xffeeffee
 800ddfc:	ffeeffee 	.word	0xffeeffee
 800de00:	ffeeffee 	.word	0xffeeffee
 800de04:	007b0088 	.word	0x007b0088
 800de08:	00240024 	.word	0x00240024
 800de0c:	ffee0024 	.word	0xffee0024
 800de10:	ffee0055 	.word	0xffee0055
 800de14:	ffeeffee 	.word	0xffeeffee
 800de18:	0090ffee 	.word	0x0090ffee
 800de1c:	00470059 	.word	0x00470059
 800de20:	ffeeffee 	.word	0xffeeffee
 800de24:	ffee008e 	.word	0xffee008e
 800de28:	ffee007b 	.word	0xffee007b
 800de2c:	004bffee 	.word	0x004bffee
 800de30:	3e45      	subs	r6, #69	@ 0x45
 800de32:	2e02      	cmp	r6, #2
 800de34:	d8c9      	bhi.n	800ddca <__ssvfiscanf_r+0xd2>
 800de36:	2305      	movs	r3, #5
 800de38:	e035      	b.n	800dea6 <__ssvfiscanf_r+0x1ae>
 800de3a:	6863      	ldr	r3, [r4, #4]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	dd0d      	ble.n	800de5c <__ssvfiscanf_r+0x164>
 800de40:	6823      	ldr	r3, [r4, #0]
 800de42:	781a      	ldrb	r2, [r3, #0]
 800de44:	42b2      	cmp	r2, r6
 800de46:	d000      	beq.n	800de4a <__ssvfiscanf_r+0x152>
 800de48:	e0a9      	b.n	800df9e <__ssvfiscanf_r+0x2a6>
 800de4a:	3301      	adds	r3, #1
 800de4c:	6862      	ldr	r2, [r4, #4]
 800de4e:	6023      	str	r3, [r4, #0]
 800de50:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800de52:	3a01      	subs	r2, #1
 800de54:	3301      	adds	r3, #1
 800de56:	6062      	str	r2, [r4, #4]
 800de58:	9347      	str	r3, [sp, #284]	@ 0x11c
 800de5a:	e775      	b.n	800dd48 <__ssvfiscanf_r+0x50>
 800de5c:	23c0      	movs	r3, #192	@ 0xc0
 800de5e:	aa43      	add	r2, sp, #268	@ 0x10c
 800de60:	005b      	lsls	r3, r3, #1
 800de62:	0021      	movs	r1, r4
 800de64:	58d3      	ldr	r3, [r2, r3]
 800de66:	9801      	ldr	r0, [sp, #4]
 800de68:	4798      	blx	r3
 800de6a:	2800      	cmp	r0, #0
 800de6c:	d0e8      	beq.n	800de40 <__ssvfiscanf_r+0x148>
 800de6e:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800de70:	2800      	cmp	r0, #0
 800de72:	d000      	beq.n	800de76 <__ssvfiscanf_r+0x17e>
 800de74:	e08b      	b.n	800df8e <__ssvfiscanf_r+0x296>
 800de76:	2001      	movs	r0, #1
 800de78:	4240      	negs	r0, r0
 800de7a:	e08c      	b.n	800df96 <__ssvfiscanf_r+0x29e>
 800de7c:	2320      	movs	r3, #32
 800de7e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800de80:	4313      	orrs	r3, r2
 800de82:	9343      	str	r3, [sp, #268]	@ 0x10c
 800de84:	2380      	movs	r3, #128	@ 0x80
 800de86:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	4313      	orrs	r3, r2
 800de8c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800de8e:	2310      	movs	r3, #16
 800de90:	9344      	str	r3, [sp, #272]	@ 0x110
 800de92:	2e6e      	cmp	r6, #110	@ 0x6e
 800de94:	d902      	bls.n	800de9c <__ssvfiscanf_r+0x1a4>
 800de96:	e005      	b.n	800dea4 <__ssvfiscanf_r+0x1ac>
 800de98:	2300      	movs	r3, #0
 800de9a:	9344      	str	r3, [sp, #272]	@ 0x110
 800de9c:	2303      	movs	r3, #3
 800de9e:	e002      	b.n	800dea6 <__ssvfiscanf_r+0x1ae>
 800dea0:	2308      	movs	r3, #8
 800dea2:	9344      	str	r3, [sp, #272]	@ 0x110
 800dea4:	2304      	movs	r3, #4
 800dea6:	9349      	str	r3, [sp, #292]	@ 0x124
 800dea8:	6863      	ldr	r3, [r4, #4]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	dd3e      	ble.n	800df2c <__ssvfiscanf_r+0x234>
 800deae:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800deb0:	065b      	lsls	r3, r3, #25
 800deb2:	d408      	bmi.n	800dec6 <__ssvfiscanf_r+0x1ce>
 800deb4:	27c0      	movs	r7, #192	@ 0xc0
 800deb6:	2608      	movs	r6, #8
 800deb8:	007f      	lsls	r7, r7, #1
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	493c      	ldr	r1, [pc, #240]	@ (800dfb0 <__ssvfiscanf_r+0x2b8>)
 800debe:	781a      	ldrb	r2, [r3, #0]
 800dec0:	5c8a      	ldrb	r2, [r1, r2]
 800dec2:	4232      	tst	r2, r6
 800dec4:	d13c      	bne.n	800df40 <__ssvfiscanf_r+0x248>
 800dec6:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 800dec8:	2b02      	cmp	r3, #2
 800deca:	dc4c      	bgt.n	800df66 <__ssvfiscanf_r+0x26e>
 800decc:	0022      	movs	r2, r4
 800dece:	9801      	ldr	r0, [sp, #4]
 800ded0:	ab02      	add	r3, sp, #8
 800ded2:	a943      	add	r1, sp, #268	@ 0x10c
 800ded4:	f000 f9b6 	bl	800e244 <_scanf_chars>
 800ded8:	2801      	cmp	r0, #1
 800deda:	d060      	beq.n	800df9e <__ssvfiscanf_r+0x2a6>
 800dedc:	2802      	cmp	r0, #2
 800dede:	d000      	beq.n	800dee2 <__ssvfiscanf_r+0x1ea>
 800dee0:	e732      	b.n	800dd48 <__ssvfiscanf_r+0x50>
 800dee2:	e7c4      	b.n	800de6e <__ssvfiscanf_r+0x176>
 800dee4:	230a      	movs	r3, #10
 800dee6:	e7d3      	b.n	800de90 <__ssvfiscanf_r+0x198>
 800dee8:	0029      	movs	r1, r5
 800deea:	a803      	add	r0, sp, #12
 800deec:	f000 fc27 	bl	800e73e <__sccl>
 800def0:	2340      	movs	r3, #64	@ 0x40
 800def2:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800def4:	0005      	movs	r5, r0
 800def6:	4313      	orrs	r3, r2
 800def8:	9343      	str	r3, [sp, #268]	@ 0x10c
 800defa:	2301      	movs	r3, #1
 800defc:	e7d3      	b.n	800dea6 <__ssvfiscanf_r+0x1ae>
 800defe:	2340      	movs	r3, #64	@ 0x40
 800df00:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800df02:	4313      	orrs	r3, r2
 800df04:	9343      	str	r3, [sp, #268]	@ 0x10c
 800df06:	2300      	movs	r3, #0
 800df08:	e7cd      	b.n	800dea6 <__ssvfiscanf_r+0x1ae>
 800df0a:	2302      	movs	r3, #2
 800df0c:	e7cb      	b.n	800dea6 <__ssvfiscanf_r+0x1ae>
 800df0e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800df10:	06d3      	lsls	r3, r2, #27
 800df12:	d500      	bpl.n	800df16 <__ssvfiscanf_r+0x21e>
 800df14:	e718      	b.n	800dd48 <__ssvfiscanf_r+0x50>
 800df16:	9b02      	ldr	r3, [sp, #8]
 800df18:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 800df1a:	1d18      	adds	r0, r3, #4
 800df1c:	9002      	str	r0, [sp, #8]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	07d6      	lsls	r6, r2, #31
 800df22:	d501      	bpl.n	800df28 <__ssvfiscanf_r+0x230>
 800df24:	8019      	strh	r1, [r3, #0]
 800df26:	e70f      	b.n	800dd48 <__ssvfiscanf_r+0x50>
 800df28:	6019      	str	r1, [r3, #0]
 800df2a:	e70d      	b.n	800dd48 <__ssvfiscanf_r+0x50>
 800df2c:	23c0      	movs	r3, #192	@ 0xc0
 800df2e:	aa43      	add	r2, sp, #268	@ 0x10c
 800df30:	005b      	lsls	r3, r3, #1
 800df32:	0021      	movs	r1, r4
 800df34:	58d3      	ldr	r3, [r2, r3]
 800df36:	9801      	ldr	r0, [sp, #4]
 800df38:	4798      	blx	r3
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d0b7      	beq.n	800deae <__ssvfiscanf_r+0x1b6>
 800df3e:	e796      	b.n	800de6e <__ssvfiscanf_r+0x176>
 800df40:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800df42:	3201      	adds	r2, #1
 800df44:	9247      	str	r2, [sp, #284]	@ 0x11c
 800df46:	6862      	ldr	r2, [r4, #4]
 800df48:	3a01      	subs	r2, #1
 800df4a:	6062      	str	r2, [r4, #4]
 800df4c:	2a00      	cmp	r2, #0
 800df4e:	dd02      	ble.n	800df56 <__ssvfiscanf_r+0x25e>
 800df50:	3301      	adds	r3, #1
 800df52:	6023      	str	r3, [r4, #0]
 800df54:	e7b1      	b.n	800deba <__ssvfiscanf_r+0x1c2>
 800df56:	ab43      	add	r3, sp, #268	@ 0x10c
 800df58:	0021      	movs	r1, r4
 800df5a:	59db      	ldr	r3, [r3, r7]
 800df5c:	9801      	ldr	r0, [sp, #4]
 800df5e:	4798      	blx	r3
 800df60:	2800      	cmp	r0, #0
 800df62:	d0aa      	beq.n	800deba <__ssvfiscanf_r+0x1c2>
 800df64:	e783      	b.n	800de6e <__ssvfiscanf_r+0x176>
 800df66:	2b04      	cmp	r3, #4
 800df68:	dc06      	bgt.n	800df78 <__ssvfiscanf_r+0x280>
 800df6a:	0022      	movs	r2, r4
 800df6c:	9801      	ldr	r0, [sp, #4]
 800df6e:	ab02      	add	r3, sp, #8
 800df70:	a943      	add	r1, sp, #268	@ 0x10c
 800df72:	f000 f9c7 	bl	800e304 <_scanf_i>
 800df76:	e7af      	b.n	800ded8 <__ssvfiscanf_r+0x1e0>
 800df78:	4b0f      	ldr	r3, [pc, #60]	@ (800dfb8 <__ssvfiscanf_r+0x2c0>)
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d100      	bne.n	800df80 <__ssvfiscanf_r+0x288>
 800df7e:	e6e3      	b.n	800dd48 <__ssvfiscanf_r+0x50>
 800df80:	0022      	movs	r2, r4
 800df82:	9801      	ldr	r0, [sp, #4]
 800df84:	ab02      	add	r3, sp, #8
 800df86:	a943      	add	r1, sp, #268	@ 0x10c
 800df88:	f7fc ff4a 	bl	800ae20 <_scanf_float>
 800df8c:	e7a4      	b.n	800ded8 <__ssvfiscanf_r+0x1e0>
 800df8e:	89a3      	ldrh	r3, [r4, #12]
 800df90:	065b      	lsls	r3, r3, #25
 800df92:	d500      	bpl.n	800df96 <__ssvfiscanf_r+0x29e>
 800df94:	e76f      	b.n	800de76 <__ssvfiscanf_r+0x17e>
 800df96:	23a5      	movs	r3, #165	@ 0xa5
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	449d      	add	sp, r3
 800df9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df9e:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800dfa0:	e7f9      	b.n	800df96 <__ssvfiscanf_r+0x29e>
 800dfa2:	46c0      	nop			@ (mov r8, r8)
 800dfa4:	fffffd6c 	.word	0xfffffd6c
 800dfa8:	0800dc41 	.word	0x0800dc41
 800dfac:	0800dcb9 	.word	0x0800dcb9
 800dfb0:	0800efe9 	.word	0x0800efe9
 800dfb4:	0800f0ef 	.word	0x0800f0ef
 800dfb8:	0800ae21 	.word	0x0800ae21

0800dfbc <__sfputc_r>:
 800dfbc:	6893      	ldr	r3, [r2, #8]
 800dfbe:	b510      	push	{r4, lr}
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	6093      	str	r3, [r2, #8]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	da04      	bge.n	800dfd2 <__sfputc_r+0x16>
 800dfc8:	6994      	ldr	r4, [r2, #24]
 800dfca:	42a3      	cmp	r3, r4
 800dfcc:	db07      	blt.n	800dfde <__sfputc_r+0x22>
 800dfce:	290a      	cmp	r1, #10
 800dfd0:	d005      	beq.n	800dfde <__sfputc_r+0x22>
 800dfd2:	6813      	ldr	r3, [r2, #0]
 800dfd4:	1c58      	adds	r0, r3, #1
 800dfd6:	6010      	str	r0, [r2, #0]
 800dfd8:	7019      	strb	r1, [r3, #0]
 800dfda:	0008      	movs	r0, r1
 800dfdc:	bd10      	pop	{r4, pc}
 800dfde:	f7fd fb1f 	bl	800b620 <__swbuf_r>
 800dfe2:	0001      	movs	r1, r0
 800dfe4:	e7f9      	b.n	800dfda <__sfputc_r+0x1e>

0800dfe6 <__sfputs_r>:
 800dfe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe8:	0006      	movs	r6, r0
 800dfea:	000f      	movs	r7, r1
 800dfec:	0014      	movs	r4, r2
 800dfee:	18d5      	adds	r5, r2, r3
 800dff0:	42ac      	cmp	r4, r5
 800dff2:	d101      	bne.n	800dff8 <__sfputs_r+0x12>
 800dff4:	2000      	movs	r0, #0
 800dff6:	e007      	b.n	800e008 <__sfputs_r+0x22>
 800dff8:	7821      	ldrb	r1, [r4, #0]
 800dffa:	003a      	movs	r2, r7
 800dffc:	0030      	movs	r0, r6
 800dffe:	f7ff ffdd 	bl	800dfbc <__sfputc_r>
 800e002:	3401      	adds	r4, #1
 800e004:	1c43      	adds	r3, r0, #1
 800e006:	d1f3      	bne.n	800dff0 <__sfputs_r+0xa>
 800e008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e00c <_vfiprintf_r>:
 800e00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e00e:	b0a1      	sub	sp, #132	@ 0x84
 800e010:	000f      	movs	r7, r1
 800e012:	0015      	movs	r5, r2
 800e014:	001e      	movs	r6, r3
 800e016:	9003      	str	r0, [sp, #12]
 800e018:	2800      	cmp	r0, #0
 800e01a:	d004      	beq.n	800e026 <_vfiprintf_r+0x1a>
 800e01c:	6a03      	ldr	r3, [r0, #32]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d101      	bne.n	800e026 <_vfiprintf_r+0x1a>
 800e022:	f7fd f99b 	bl	800b35c <__sinit>
 800e026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e028:	07db      	lsls	r3, r3, #31
 800e02a:	d405      	bmi.n	800e038 <_vfiprintf_r+0x2c>
 800e02c:	89bb      	ldrh	r3, [r7, #12]
 800e02e:	059b      	lsls	r3, r3, #22
 800e030:	d402      	bmi.n	800e038 <_vfiprintf_r+0x2c>
 800e032:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e034:	f7fd fc2b 	bl	800b88e <__retarget_lock_acquire_recursive>
 800e038:	89bb      	ldrh	r3, [r7, #12]
 800e03a:	071b      	lsls	r3, r3, #28
 800e03c:	d502      	bpl.n	800e044 <_vfiprintf_r+0x38>
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d113      	bne.n	800e06c <_vfiprintf_r+0x60>
 800e044:	0039      	movs	r1, r7
 800e046:	9803      	ldr	r0, [sp, #12]
 800e048:	f7fd fb2c 	bl	800b6a4 <__swsetup_r>
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d00d      	beq.n	800e06c <_vfiprintf_r+0x60>
 800e050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e052:	07db      	lsls	r3, r3, #31
 800e054:	d503      	bpl.n	800e05e <_vfiprintf_r+0x52>
 800e056:	2001      	movs	r0, #1
 800e058:	4240      	negs	r0, r0
 800e05a:	b021      	add	sp, #132	@ 0x84
 800e05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e05e:	89bb      	ldrh	r3, [r7, #12]
 800e060:	059b      	lsls	r3, r3, #22
 800e062:	d4f8      	bmi.n	800e056 <_vfiprintf_r+0x4a>
 800e064:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e066:	f7fd fc13 	bl	800b890 <__retarget_lock_release_recursive>
 800e06a:	e7f4      	b.n	800e056 <_vfiprintf_r+0x4a>
 800e06c:	2300      	movs	r3, #0
 800e06e:	ac08      	add	r4, sp, #32
 800e070:	6163      	str	r3, [r4, #20]
 800e072:	3320      	adds	r3, #32
 800e074:	7663      	strb	r3, [r4, #25]
 800e076:	3310      	adds	r3, #16
 800e078:	76a3      	strb	r3, [r4, #26]
 800e07a:	9607      	str	r6, [sp, #28]
 800e07c:	002e      	movs	r6, r5
 800e07e:	7833      	ldrb	r3, [r6, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <_vfiprintf_r+0x7c>
 800e084:	2b25      	cmp	r3, #37	@ 0x25
 800e086:	d148      	bne.n	800e11a <_vfiprintf_r+0x10e>
 800e088:	1b73      	subs	r3, r6, r5
 800e08a:	9305      	str	r3, [sp, #20]
 800e08c:	42ae      	cmp	r6, r5
 800e08e:	d00b      	beq.n	800e0a8 <_vfiprintf_r+0x9c>
 800e090:	002a      	movs	r2, r5
 800e092:	0039      	movs	r1, r7
 800e094:	9803      	ldr	r0, [sp, #12]
 800e096:	f7ff ffa6 	bl	800dfe6 <__sfputs_r>
 800e09a:	3001      	adds	r0, #1
 800e09c:	d100      	bne.n	800e0a0 <_vfiprintf_r+0x94>
 800e09e:	e0ae      	b.n	800e1fe <_vfiprintf_r+0x1f2>
 800e0a0:	6963      	ldr	r3, [r4, #20]
 800e0a2:	9a05      	ldr	r2, [sp, #20]
 800e0a4:	189b      	adds	r3, r3, r2
 800e0a6:	6163      	str	r3, [r4, #20]
 800e0a8:	7833      	ldrb	r3, [r6, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d100      	bne.n	800e0b0 <_vfiprintf_r+0xa4>
 800e0ae:	e0a6      	b.n	800e1fe <_vfiprintf_r+0x1f2>
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	4252      	negs	r2, r2
 800e0b6:	6062      	str	r2, [r4, #4]
 800e0b8:	a904      	add	r1, sp, #16
 800e0ba:	3254      	adds	r2, #84	@ 0x54
 800e0bc:	1852      	adds	r2, r2, r1
 800e0be:	1c75      	adds	r5, r6, #1
 800e0c0:	6023      	str	r3, [r4, #0]
 800e0c2:	60e3      	str	r3, [r4, #12]
 800e0c4:	60a3      	str	r3, [r4, #8]
 800e0c6:	7013      	strb	r3, [r2, #0]
 800e0c8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e0ca:	4b59      	ldr	r3, [pc, #356]	@ (800e230 <_vfiprintf_r+0x224>)
 800e0cc:	2205      	movs	r2, #5
 800e0ce:	0018      	movs	r0, r3
 800e0d0:	7829      	ldrb	r1, [r5, #0]
 800e0d2:	9305      	str	r3, [sp, #20]
 800e0d4:	f7fd fbdd 	bl	800b892 <memchr>
 800e0d8:	1c6e      	adds	r6, r5, #1
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	d11f      	bne.n	800e11e <_vfiprintf_r+0x112>
 800e0de:	6822      	ldr	r2, [r4, #0]
 800e0e0:	06d3      	lsls	r3, r2, #27
 800e0e2:	d504      	bpl.n	800e0ee <_vfiprintf_r+0xe2>
 800e0e4:	2353      	movs	r3, #83	@ 0x53
 800e0e6:	a904      	add	r1, sp, #16
 800e0e8:	185b      	adds	r3, r3, r1
 800e0ea:	2120      	movs	r1, #32
 800e0ec:	7019      	strb	r1, [r3, #0]
 800e0ee:	0713      	lsls	r3, r2, #28
 800e0f0:	d504      	bpl.n	800e0fc <_vfiprintf_r+0xf0>
 800e0f2:	2353      	movs	r3, #83	@ 0x53
 800e0f4:	a904      	add	r1, sp, #16
 800e0f6:	185b      	adds	r3, r3, r1
 800e0f8:	212b      	movs	r1, #43	@ 0x2b
 800e0fa:	7019      	strb	r1, [r3, #0]
 800e0fc:	782b      	ldrb	r3, [r5, #0]
 800e0fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800e100:	d016      	beq.n	800e130 <_vfiprintf_r+0x124>
 800e102:	002e      	movs	r6, r5
 800e104:	2100      	movs	r1, #0
 800e106:	200a      	movs	r0, #10
 800e108:	68e3      	ldr	r3, [r4, #12]
 800e10a:	7832      	ldrb	r2, [r6, #0]
 800e10c:	1c75      	adds	r5, r6, #1
 800e10e:	3a30      	subs	r2, #48	@ 0x30
 800e110:	2a09      	cmp	r2, #9
 800e112:	d950      	bls.n	800e1b6 <_vfiprintf_r+0x1aa>
 800e114:	2900      	cmp	r1, #0
 800e116:	d111      	bne.n	800e13c <_vfiprintf_r+0x130>
 800e118:	e017      	b.n	800e14a <_vfiprintf_r+0x13e>
 800e11a:	3601      	adds	r6, #1
 800e11c:	e7af      	b.n	800e07e <_vfiprintf_r+0x72>
 800e11e:	9b05      	ldr	r3, [sp, #20]
 800e120:	6822      	ldr	r2, [r4, #0]
 800e122:	1ac0      	subs	r0, r0, r3
 800e124:	2301      	movs	r3, #1
 800e126:	4083      	lsls	r3, r0
 800e128:	4313      	orrs	r3, r2
 800e12a:	0035      	movs	r5, r6
 800e12c:	6023      	str	r3, [r4, #0]
 800e12e:	e7cc      	b.n	800e0ca <_vfiprintf_r+0xbe>
 800e130:	9b07      	ldr	r3, [sp, #28]
 800e132:	1d19      	adds	r1, r3, #4
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	9107      	str	r1, [sp, #28]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	db01      	blt.n	800e140 <_vfiprintf_r+0x134>
 800e13c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e13e:	e004      	b.n	800e14a <_vfiprintf_r+0x13e>
 800e140:	425b      	negs	r3, r3
 800e142:	60e3      	str	r3, [r4, #12]
 800e144:	2302      	movs	r3, #2
 800e146:	4313      	orrs	r3, r2
 800e148:	6023      	str	r3, [r4, #0]
 800e14a:	7833      	ldrb	r3, [r6, #0]
 800e14c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e14e:	d10c      	bne.n	800e16a <_vfiprintf_r+0x15e>
 800e150:	7873      	ldrb	r3, [r6, #1]
 800e152:	2b2a      	cmp	r3, #42	@ 0x2a
 800e154:	d134      	bne.n	800e1c0 <_vfiprintf_r+0x1b4>
 800e156:	9b07      	ldr	r3, [sp, #28]
 800e158:	3602      	adds	r6, #2
 800e15a:	1d1a      	adds	r2, r3, #4
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	9207      	str	r2, [sp, #28]
 800e160:	2b00      	cmp	r3, #0
 800e162:	da01      	bge.n	800e168 <_vfiprintf_r+0x15c>
 800e164:	2301      	movs	r3, #1
 800e166:	425b      	negs	r3, r3
 800e168:	9309      	str	r3, [sp, #36]	@ 0x24
 800e16a:	4d32      	ldr	r5, [pc, #200]	@ (800e234 <_vfiprintf_r+0x228>)
 800e16c:	2203      	movs	r2, #3
 800e16e:	0028      	movs	r0, r5
 800e170:	7831      	ldrb	r1, [r6, #0]
 800e172:	f7fd fb8e 	bl	800b892 <memchr>
 800e176:	2800      	cmp	r0, #0
 800e178:	d006      	beq.n	800e188 <_vfiprintf_r+0x17c>
 800e17a:	2340      	movs	r3, #64	@ 0x40
 800e17c:	1b40      	subs	r0, r0, r5
 800e17e:	4083      	lsls	r3, r0
 800e180:	6822      	ldr	r2, [r4, #0]
 800e182:	3601      	adds	r6, #1
 800e184:	4313      	orrs	r3, r2
 800e186:	6023      	str	r3, [r4, #0]
 800e188:	7831      	ldrb	r1, [r6, #0]
 800e18a:	2206      	movs	r2, #6
 800e18c:	482a      	ldr	r0, [pc, #168]	@ (800e238 <_vfiprintf_r+0x22c>)
 800e18e:	1c75      	adds	r5, r6, #1
 800e190:	7621      	strb	r1, [r4, #24]
 800e192:	f7fd fb7e 	bl	800b892 <memchr>
 800e196:	2800      	cmp	r0, #0
 800e198:	d040      	beq.n	800e21c <_vfiprintf_r+0x210>
 800e19a:	4b28      	ldr	r3, [pc, #160]	@ (800e23c <_vfiprintf_r+0x230>)
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d122      	bne.n	800e1e6 <_vfiprintf_r+0x1da>
 800e1a0:	2207      	movs	r2, #7
 800e1a2:	9b07      	ldr	r3, [sp, #28]
 800e1a4:	3307      	adds	r3, #7
 800e1a6:	4393      	bics	r3, r2
 800e1a8:	3308      	adds	r3, #8
 800e1aa:	9307      	str	r3, [sp, #28]
 800e1ac:	6963      	ldr	r3, [r4, #20]
 800e1ae:	9a04      	ldr	r2, [sp, #16]
 800e1b0:	189b      	adds	r3, r3, r2
 800e1b2:	6163      	str	r3, [r4, #20]
 800e1b4:	e762      	b.n	800e07c <_vfiprintf_r+0x70>
 800e1b6:	4343      	muls	r3, r0
 800e1b8:	002e      	movs	r6, r5
 800e1ba:	2101      	movs	r1, #1
 800e1bc:	189b      	adds	r3, r3, r2
 800e1be:	e7a4      	b.n	800e10a <_vfiprintf_r+0xfe>
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	200a      	movs	r0, #10
 800e1c4:	0019      	movs	r1, r3
 800e1c6:	3601      	adds	r6, #1
 800e1c8:	6063      	str	r3, [r4, #4]
 800e1ca:	7832      	ldrb	r2, [r6, #0]
 800e1cc:	1c75      	adds	r5, r6, #1
 800e1ce:	3a30      	subs	r2, #48	@ 0x30
 800e1d0:	2a09      	cmp	r2, #9
 800e1d2:	d903      	bls.n	800e1dc <_vfiprintf_r+0x1d0>
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d0c8      	beq.n	800e16a <_vfiprintf_r+0x15e>
 800e1d8:	9109      	str	r1, [sp, #36]	@ 0x24
 800e1da:	e7c6      	b.n	800e16a <_vfiprintf_r+0x15e>
 800e1dc:	4341      	muls	r1, r0
 800e1de:	002e      	movs	r6, r5
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	1889      	adds	r1, r1, r2
 800e1e4:	e7f1      	b.n	800e1ca <_vfiprintf_r+0x1be>
 800e1e6:	aa07      	add	r2, sp, #28
 800e1e8:	9200      	str	r2, [sp, #0]
 800e1ea:	0021      	movs	r1, r4
 800e1ec:	003a      	movs	r2, r7
 800e1ee:	4b14      	ldr	r3, [pc, #80]	@ (800e240 <_vfiprintf_r+0x234>)
 800e1f0:	9803      	ldr	r0, [sp, #12]
 800e1f2:	f7fc fa59 	bl	800a6a8 <_printf_float>
 800e1f6:	9004      	str	r0, [sp, #16]
 800e1f8:	9b04      	ldr	r3, [sp, #16]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	d1d6      	bne.n	800e1ac <_vfiprintf_r+0x1a0>
 800e1fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e200:	07db      	lsls	r3, r3, #31
 800e202:	d405      	bmi.n	800e210 <_vfiprintf_r+0x204>
 800e204:	89bb      	ldrh	r3, [r7, #12]
 800e206:	059b      	lsls	r3, r3, #22
 800e208:	d402      	bmi.n	800e210 <_vfiprintf_r+0x204>
 800e20a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e20c:	f7fd fb40 	bl	800b890 <__retarget_lock_release_recursive>
 800e210:	89bb      	ldrh	r3, [r7, #12]
 800e212:	065b      	lsls	r3, r3, #25
 800e214:	d500      	bpl.n	800e218 <_vfiprintf_r+0x20c>
 800e216:	e71e      	b.n	800e056 <_vfiprintf_r+0x4a>
 800e218:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e21a:	e71e      	b.n	800e05a <_vfiprintf_r+0x4e>
 800e21c:	aa07      	add	r2, sp, #28
 800e21e:	9200      	str	r2, [sp, #0]
 800e220:	0021      	movs	r1, r4
 800e222:	003a      	movs	r2, r7
 800e224:	4b06      	ldr	r3, [pc, #24]	@ (800e240 <_vfiprintf_r+0x234>)
 800e226:	9803      	ldr	r0, [sp, #12]
 800e228:	f7fc fcec 	bl	800ac04 <_printf_i>
 800e22c:	e7e3      	b.n	800e1f6 <_vfiprintf_r+0x1ea>
 800e22e:	46c0      	nop			@ (mov r8, r8)
 800e230:	0800f0e9 	.word	0x0800f0e9
 800e234:	0800f0ef 	.word	0x0800f0ef
 800e238:	0800f0f3 	.word	0x0800f0f3
 800e23c:	0800a6a9 	.word	0x0800a6a9
 800e240:	0800dfe7 	.word	0x0800dfe7

0800e244 <_scanf_chars>:
 800e244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e246:	0015      	movs	r5, r2
 800e248:	688a      	ldr	r2, [r1, #8]
 800e24a:	000c      	movs	r4, r1
 800e24c:	9001      	str	r0, [sp, #4]
 800e24e:	2a00      	cmp	r2, #0
 800e250:	d104      	bne.n	800e25c <_scanf_chars+0x18>
 800e252:	698a      	ldr	r2, [r1, #24]
 800e254:	2a00      	cmp	r2, #0
 800e256:	d117      	bne.n	800e288 <_scanf_chars+0x44>
 800e258:	3201      	adds	r2, #1
 800e25a:	60a2      	str	r2, [r4, #8]
 800e25c:	6822      	ldr	r2, [r4, #0]
 800e25e:	06d2      	lsls	r2, r2, #27
 800e260:	d403      	bmi.n	800e26a <_scanf_chars+0x26>
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	1d11      	adds	r1, r2, #4
 800e266:	6019      	str	r1, [r3, #0]
 800e268:	6817      	ldr	r7, [r2, #0]
 800e26a:	2600      	movs	r6, #0
 800e26c:	69a0      	ldr	r0, [r4, #24]
 800e26e:	2800      	cmp	r0, #0
 800e270:	d016      	beq.n	800e2a0 <_scanf_chars+0x5c>
 800e272:	2801      	cmp	r0, #1
 800e274:	d10b      	bne.n	800e28e <_scanf_chars+0x4a>
 800e276:	682b      	ldr	r3, [r5, #0]
 800e278:	6962      	ldr	r2, [r4, #20]
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	5cd3      	ldrb	r3, [r2, r3]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d10e      	bne.n	800e2a0 <_scanf_chars+0x5c>
 800e282:	2e00      	cmp	r6, #0
 800e284:	d03b      	beq.n	800e2fe <_scanf_chars+0xba>
 800e286:	e029      	b.n	800e2dc <_scanf_chars+0x98>
 800e288:	2201      	movs	r2, #1
 800e28a:	4252      	negs	r2, r2
 800e28c:	e7e5      	b.n	800e25a <_scanf_chars+0x16>
 800e28e:	2802      	cmp	r0, #2
 800e290:	d124      	bne.n	800e2dc <_scanf_chars+0x98>
 800e292:	682b      	ldr	r3, [r5, #0]
 800e294:	4a1a      	ldr	r2, [pc, #104]	@ (800e300 <_scanf_chars+0xbc>)
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	5cd3      	ldrb	r3, [r2, r3]
 800e29a:	2208      	movs	r2, #8
 800e29c:	4213      	tst	r3, r2
 800e29e:	d11d      	bne.n	800e2dc <_scanf_chars+0x98>
 800e2a0:	2210      	movs	r2, #16
 800e2a2:	6823      	ldr	r3, [r4, #0]
 800e2a4:	3601      	adds	r6, #1
 800e2a6:	4213      	tst	r3, r2
 800e2a8:	d103      	bne.n	800e2b2 <_scanf_chars+0x6e>
 800e2aa:	682b      	ldr	r3, [r5, #0]
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	703b      	strb	r3, [r7, #0]
 800e2b0:	3701      	adds	r7, #1
 800e2b2:	682a      	ldr	r2, [r5, #0]
 800e2b4:	686b      	ldr	r3, [r5, #4]
 800e2b6:	3201      	adds	r2, #1
 800e2b8:	602a      	str	r2, [r5, #0]
 800e2ba:	68a2      	ldr	r2, [r4, #8]
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	3a01      	subs	r2, #1
 800e2c0:	606b      	str	r3, [r5, #4]
 800e2c2:	60a2      	str	r2, [r4, #8]
 800e2c4:	2a00      	cmp	r2, #0
 800e2c6:	d009      	beq.n	800e2dc <_scanf_chars+0x98>
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	dccf      	bgt.n	800e26c <_scanf_chars+0x28>
 800e2cc:	23c0      	movs	r3, #192	@ 0xc0
 800e2ce:	005b      	lsls	r3, r3, #1
 800e2d0:	0029      	movs	r1, r5
 800e2d2:	58e3      	ldr	r3, [r4, r3]
 800e2d4:	9801      	ldr	r0, [sp, #4]
 800e2d6:	4798      	blx	r3
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d0c7      	beq.n	800e26c <_scanf_chars+0x28>
 800e2dc:	6822      	ldr	r2, [r4, #0]
 800e2de:	2310      	movs	r3, #16
 800e2e0:	0011      	movs	r1, r2
 800e2e2:	4019      	ands	r1, r3
 800e2e4:	421a      	tst	r2, r3
 800e2e6:	d106      	bne.n	800e2f6 <_scanf_chars+0xb2>
 800e2e8:	68e3      	ldr	r3, [r4, #12]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	60e3      	str	r3, [r4, #12]
 800e2ee:	69a3      	ldr	r3, [r4, #24]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d000      	beq.n	800e2f6 <_scanf_chars+0xb2>
 800e2f4:	7039      	strb	r1, [r7, #0]
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	6923      	ldr	r3, [r4, #16]
 800e2fa:	199b      	adds	r3, r3, r6
 800e2fc:	6123      	str	r3, [r4, #16]
 800e2fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e300:	0800efe9 	.word	0x0800efe9

0800e304 <_scanf_i>:
 800e304:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e306:	b08b      	sub	sp, #44	@ 0x2c
 800e308:	9301      	str	r3, [sp, #4]
 800e30a:	4b78      	ldr	r3, [pc, #480]	@ (800e4ec <_scanf_i+0x1e8>)
 800e30c:	0016      	movs	r6, r2
 800e30e:	9004      	str	r0, [sp, #16]
 800e310:	aa07      	add	r2, sp, #28
 800e312:	cba1      	ldmia	r3!, {r0, r5, r7}
 800e314:	c2a1      	stmia	r2!, {r0, r5, r7}
 800e316:	4a76      	ldr	r2, [pc, #472]	@ (800e4f0 <_scanf_i+0x1ec>)
 800e318:	698b      	ldr	r3, [r1, #24]
 800e31a:	000c      	movs	r4, r1
 800e31c:	9205      	str	r2, [sp, #20]
 800e31e:	2b03      	cmp	r3, #3
 800e320:	d101      	bne.n	800e326 <_scanf_i+0x22>
 800e322:	4b74      	ldr	r3, [pc, #464]	@ (800e4f4 <_scanf_i+0x1f0>)
 800e324:	9305      	str	r3, [sp, #20]
 800e326:	22ae      	movs	r2, #174	@ 0xae
 800e328:	2000      	movs	r0, #0
 800e32a:	68a3      	ldr	r3, [r4, #8]
 800e32c:	0052      	lsls	r2, r2, #1
 800e32e:	1e59      	subs	r1, r3, #1
 800e330:	9003      	str	r0, [sp, #12]
 800e332:	4291      	cmp	r1, r2
 800e334:	d905      	bls.n	800e342 <_scanf_i+0x3e>
 800e336:	3b5e      	subs	r3, #94	@ 0x5e
 800e338:	3bff      	subs	r3, #255	@ 0xff
 800e33a:	9303      	str	r3, [sp, #12]
 800e33c:	235e      	movs	r3, #94	@ 0x5e
 800e33e:	33ff      	adds	r3, #255	@ 0xff
 800e340:	60a3      	str	r3, [r4, #8]
 800e342:	0023      	movs	r3, r4
 800e344:	331c      	adds	r3, #28
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	23d0      	movs	r3, #208	@ 0xd0
 800e34a:	2700      	movs	r7, #0
 800e34c:	6822      	ldr	r2, [r4, #0]
 800e34e:	011b      	lsls	r3, r3, #4
 800e350:	4313      	orrs	r3, r2
 800e352:	6023      	str	r3, [r4, #0]
 800e354:	9b00      	ldr	r3, [sp, #0]
 800e356:	9302      	str	r3, [sp, #8]
 800e358:	6833      	ldr	r3, [r6, #0]
 800e35a:	a807      	add	r0, sp, #28
 800e35c:	7819      	ldrb	r1, [r3, #0]
 800e35e:	00bb      	lsls	r3, r7, #2
 800e360:	2202      	movs	r2, #2
 800e362:	5818      	ldr	r0, [r3, r0]
 800e364:	f7fd fa95 	bl	800b892 <memchr>
 800e368:	2800      	cmp	r0, #0
 800e36a:	d029      	beq.n	800e3c0 <_scanf_i+0xbc>
 800e36c:	2f01      	cmp	r7, #1
 800e36e:	d15e      	bne.n	800e42e <_scanf_i+0x12a>
 800e370:	6863      	ldr	r3, [r4, #4]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d106      	bne.n	800e384 <_scanf_i+0x80>
 800e376:	3308      	adds	r3, #8
 800e378:	6822      	ldr	r2, [r4, #0]
 800e37a:	6063      	str	r3, [r4, #4]
 800e37c:	33f9      	adds	r3, #249	@ 0xf9
 800e37e:	33ff      	adds	r3, #255	@ 0xff
 800e380:	4313      	orrs	r3, r2
 800e382:	6023      	str	r3, [r4, #0]
 800e384:	6823      	ldr	r3, [r4, #0]
 800e386:	4a5c      	ldr	r2, [pc, #368]	@ (800e4f8 <_scanf_i+0x1f4>)
 800e388:	4013      	ands	r3, r2
 800e38a:	6023      	str	r3, [r4, #0]
 800e38c:	68a3      	ldr	r3, [r4, #8]
 800e38e:	1e5a      	subs	r2, r3, #1
 800e390:	60a2      	str	r2, [r4, #8]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d014      	beq.n	800e3c0 <_scanf_i+0xbc>
 800e396:	6833      	ldr	r3, [r6, #0]
 800e398:	1c5a      	adds	r2, r3, #1
 800e39a:	6032      	str	r2, [r6, #0]
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	9a02      	ldr	r2, [sp, #8]
 800e3a0:	7013      	strb	r3, [r2, #0]
 800e3a2:	6873      	ldr	r3, [r6, #4]
 800e3a4:	1c55      	adds	r5, r2, #1
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	6073      	str	r3, [r6, #4]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	dc07      	bgt.n	800e3be <_scanf_i+0xba>
 800e3ae:	23c0      	movs	r3, #192	@ 0xc0
 800e3b0:	005b      	lsls	r3, r3, #1
 800e3b2:	0031      	movs	r1, r6
 800e3b4:	58e3      	ldr	r3, [r4, r3]
 800e3b6:	9804      	ldr	r0, [sp, #16]
 800e3b8:	4798      	blx	r3
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	d17e      	bne.n	800e4bc <_scanf_i+0x1b8>
 800e3be:	9502      	str	r5, [sp, #8]
 800e3c0:	3701      	adds	r7, #1
 800e3c2:	2f03      	cmp	r7, #3
 800e3c4:	d1c8      	bne.n	800e358 <_scanf_i+0x54>
 800e3c6:	6863      	ldr	r3, [r4, #4]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d101      	bne.n	800e3d0 <_scanf_i+0xcc>
 800e3cc:	330a      	adds	r3, #10
 800e3ce:	6063      	str	r3, [r4, #4]
 800e3d0:	2700      	movs	r7, #0
 800e3d2:	6863      	ldr	r3, [r4, #4]
 800e3d4:	4949      	ldr	r1, [pc, #292]	@ (800e4fc <_scanf_i+0x1f8>)
 800e3d6:	6960      	ldr	r0, [r4, #20]
 800e3d8:	1ac9      	subs	r1, r1, r3
 800e3da:	f000 f9b0 	bl	800e73e <__sccl>
 800e3de:	9d02      	ldr	r5, [sp, #8]
 800e3e0:	68a3      	ldr	r3, [r4, #8]
 800e3e2:	6820      	ldr	r0, [r4, #0]
 800e3e4:	9302      	str	r3, [sp, #8]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d03f      	beq.n	800e46a <_scanf_i+0x166>
 800e3ea:	6831      	ldr	r1, [r6, #0]
 800e3ec:	6963      	ldr	r3, [r4, #20]
 800e3ee:	780a      	ldrb	r2, [r1, #0]
 800e3f0:	5c9b      	ldrb	r3, [r3, r2]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d039      	beq.n	800e46a <_scanf_i+0x166>
 800e3f6:	2a30      	cmp	r2, #48	@ 0x30
 800e3f8:	d128      	bne.n	800e44c <_scanf_i+0x148>
 800e3fa:	2380      	movs	r3, #128	@ 0x80
 800e3fc:	011b      	lsls	r3, r3, #4
 800e3fe:	4218      	tst	r0, r3
 800e400:	d024      	beq.n	800e44c <_scanf_i+0x148>
 800e402:	9b03      	ldr	r3, [sp, #12]
 800e404:	3701      	adds	r7, #1
 800e406:	2b00      	cmp	r3, #0
 800e408:	d005      	beq.n	800e416 <_scanf_i+0x112>
 800e40a:	001a      	movs	r2, r3
 800e40c:	9b02      	ldr	r3, [sp, #8]
 800e40e:	3a01      	subs	r2, #1
 800e410:	3301      	adds	r3, #1
 800e412:	9203      	str	r2, [sp, #12]
 800e414:	60a3      	str	r3, [r4, #8]
 800e416:	6873      	ldr	r3, [r6, #4]
 800e418:	3b01      	subs	r3, #1
 800e41a:	6073      	str	r3, [r6, #4]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	dd1c      	ble.n	800e45a <_scanf_i+0x156>
 800e420:	6833      	ldr	r3, [r6, #0]
 800e422:	3301      	adds	r3, #1
 800e424:	6033      	str	r3, [r6, #0]
 800e426:	68a3      	ldr	r3, [r4, #8]
 800e428:	3b01      	subs	r3, #1
 800e42a:	60a3      	str	r3, [r4, #8]
 800e42c:	e7d8      	b.n	800e3e0 <_scanf_i+0xdc>
 800e42e:	2f02      	cmp	r7, #2
 800e430:	d1ac      	bne.n	800e38c <_scanf_i+0x88>
 800e432:	23c0      	movs	r3, #192	@ 0xc0
 800e434:	2180      	movs	r1, #128	@ 0x80
 800e436:	6822      	ldr	r2, [r4, #0]
 800e438:	00db      	lsls	r3, r3, #3
 800e43a:	4013      	ands	r3, r2
 800e43c:	0089      	lsls	r1, r1, #2
 800e43e:	428b      	cmp	r3, r1
 800e440:	d1c1      	bne.n	800e3c6 <_scanf_i+0xc2>
 800e442:	2310      	movs	r3, #16
 800e444:	6063      	str	r3, [r4, #4]
 800e446:	33f0      	adds	r3, #240	@ 0xf0
 800e448:	4313      	orrs	r3, r2
 800e44a:	e79e      	b.n	800e38a <_scanf_i+0x86>
 800e44c:	4b2c      	ldr	r3, [pc, #176]	@ (800e500 <_scanf_i+0x1fc>)
 800e44e:	4003      	ands	r3, r0
 800e450:	6023      	str	r3, [r4, #0]
 800e452:	780b      	ldrb	r3, [r1, #0]
 800e454:	702b      	strb	r3, [r5, #0]
 800e456:	3501      	adds	r5, #1
 800e458:	e7dd      	b.n	800e416 <_scanf_i+0x112>
 800e45a:	23c0      	movs	r3, #192	@ 0xc0
 800e45c:	005b      	lsls	r3, r3, #1
 800e45e:	0031      	movs	r1, r6
 800e460:	58e3      	ldr	r3, [r4, r3]
 800e462:	9804      	ldr	r0, [sp, #16]
 800e464:	4798      	blx	r3
 800e466:	2800      	cmp	r0, #0
 800e468:	d0dd      	beq.n	800e426 <_scanf_i+0x122>
 800e46a:	6823      	ldr	r3, [r4, #0]
 800e46c:	05db      	lsls	r3, r3, #23
 800e46e:	d50e      	bpl.n	800e48e <_scanf_i+0x18a>
 800e470:	9b00      	ldr	r3, [sp, #0]
 800e472:	429d      	cmp	r5, r3
 800e474:	d907      	bls.n	800e486 <_scanf_i+0x182>
 800e476:	23be      	movs	r3, #190	@ 0xbe
 800e478:	3d01      	subs	r5, #1
 800e47a:	005b      	lsls	r3, r3, #1
 800e47c:	0032      	movs	r2, r6
 800e47e:	7829      	ldrb	r1, [r5, #0]
 800e480:	58e3      	ldr	r3, [r4, r3]
 800e482:	9804      	ldr	r0, [sp, #16]
 800e484:	4798      	blx	r3
 800e486:	9b00      	ldr	r3, [sp, #0]
 800e488:	2001      	movs	r0, #1
 800e48a:	429d      	cmp	r5, r3
 800e48c:	d029      	beq.n	800e4e2 <_scanf_i+0x1de>
 800e48e:	6821      	ldr	r1, [r4, #0]
 800e490:	2310      	movs	r3, #16
 800e492:	000a      	movs	r2, r1
 800e494:	401a      	ands	r2, r3
 800e496:	4219      	tst	r1, r3
 800e498:	d11c      	bne.n	800e4d4 <_scanf_i+0x1d0>
 800e49a:	702a      	strb	r2, [r5, #0]
 800e49c:	6863      	ldr	r3, [r4, #4]
 800e49e:	9900      	ldr	r1, [sp, #0]
 800e4a0:	9804      	ldr	r0, [sp, #16]
 800e4a2:	9e05      	ldr	r6, [sp, #20]
 800e4a4:	47b0      	blx	r6
 800e4a6:	9b01      	ldr	r3, [sp, #4]
 800e4a8:	6822      	ldr	r2, [r4, #0]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	0691      	lsls	r1, r2, #26
 800e4ae:	d507      	bpl.n	800e4c0 <_scanf_i+0x1bc>
 800e4b0:	9901      	ldr	r1, [sp, #4]
 800e4b2:	1d1a      	adds	r2, r3, #4
 800e4b4:	600a      	str	r2, [r1, #0]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	6018      	str	r0, [r3, #0]
 800e4ba:	e008      	b.n	800e4ce <_scanf_i+0x1ca>
 800e4bc:	2700      	movs	r7, #0
 800e4be:	e7d4      	b.n	800e46a <_scanf_i+0x166>
 800e4c0:	1d19      	adds	r1, r3, #4
 800e4c2:	07d6      	lsls	r6, r2, #31
 800e4c4:	d50f      	bpl.n	800e4e6 <_scanf_i+0x1e2>
 800e4c6:	9a01      	ldr	r2, [sp, #4]
 800e4c8:	6011      	str	r1, [r2, #0]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	8018      	strh	r0, [r3, #0]
 800e4ce:	68e3      	ldr	r3, [r4, #12]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	60e3      	str	r3, [r4, #12]
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	9b00      	ldr	r3, [sp, #0]
 800e4d8:	1aed      	subs	r5, r5, r3
 800e4da:	6923      	ldr	r3, [r4, #16]
 800e4dc:	19ed      	adds	r5, r5, r7
 800e4de:	195b      	adds	r3, r3, r5
 800e4e0:	6123      	str	r3, [r4, #16]
 800e4e2:	b00b      	add	sp, #44	@ 0x2c
 800e4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4e6:	9a01      	ldr	r2, [sp, #4]
 800e4e8:	6011      	str	r1, [r2, #0]
 800e4ea:	e7e4      	b.n	800e4b6 <_scanf_i+0x1b2>
 800e4ec:	0800ec84 	.word	0x0800ec84
 800e4f0:	0800eab9 	.word	0x0800eab9
 800e4f4:	0800d961 	.word	0x0800d961
 800e4f8:	fffffaff 	.word	0xfffffaff
 800e4fc:	0800f10a 	.word	0x0800f10a
 800e500:	fffff6ff 	.word	0xfffff6ff

0800e504 <__sflush_r>:
 800e504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e506:	220c      	movs	r2, #12
 800e508:	5e8b      	ldrsh	r3, [r1, r2]
 800e50a:	0005      	movs	r5, r0
 800e50c:	000c      	movs	r4, r1
 800e50e:	071a      	lsls	r2, r3, #28
 800e510:	d456      	bmi.n	800e5c0 <__sflush_r+0xbc>
 800e512:	684a      	ldr	r2, [r1, #4]
 800e514:	2a00      	cmp	r2, #0
 800e516:	dc02      	bgt.n	800e51e <__sflush_r+0x1a>
 800e518:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800e51a:	2a00      	cmp	r2, #0
 800e51c:	dd4e      	ble.n	800e5bc <__sflush_r+0xb8>
 800e51e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800e520:	2f00      	cmp	r7, #0
 800e522:	d04b      	beq.n	800e5bc <__sflush_r+0xb8>
 800e524:	2200      	movs	r2, #0
 800e526:	2080      	movs	r0, #128	@ 0x80
 800e528:	682e      	ldr	r6, [r5, #0]
 800e52a:	602a      	str	r2, [r5, #0]
 800e52c:	001a      	movs	r2, r3
 800e52e:	0140      	lsls	r0, r0, #5
 800e530:	6a21      	ldr	r1, [r4, #32]
 800e532:	4002      	ands	r2, r0
 800e534:	4203      	tst	r3, r0
 800e536:	d033      	beq.n	800e5a0 <__sflush_r+0x9c>
 800e538:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e53a:	89a3      	ldrh	r3, [r4, #12]
 800e53c:	075b      	lsls	r3, r3, #29
 800e53e:	d506      	bpl.n	800e54e <__sflush_r+0x4a>
 800e540:	6863      	ldr	r3, [r4, #4]
 800e542:	1ad2      	subs	r2, r2, r3
 800e544:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e546:	2b00      	cmp	r3, #0
 800e548:	d001      	beq.n	800e54e <__sflush_r+0x4a>
 800e54a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e54c:	1ad2      	subs	r2, r2, r3
 800e54e:	2300      	movs	r3, #0
 800e550:	0028      	movs	r0, r5
 800e552:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800e554:	6a21      	ldr	r1, [r4, #32]
 800e556:	47b8      	blx	r7
 800e558:	89a2      	ldrh	r2, [r4, #12]
 800e55a:	1c43      	adds	r3, r0, #1
 800e55c:	d106      	bne.n	800e56c <__sflush_r+0x68>
 800e55e:	6829      	ldr	r1, [r5, #0]
 800e560:	291d      	cmp	r1, #29
 800e562:	d846      	bhi.n	800e5f2 <__sflush_r+0xee>
 800e564:	4b29      	ldr	r3, [pc, #164]	@ (800e60c <__sflush_r+0x108>)
 800e566:	410b      	asrs	r3, r1
 800e568:	07db      	lsls	r3, r3, #31
 800e56a:	d442      	bmi.n	800e5f2 <__sflush_r+0xee>
 800e56c:	2300      	movs	r3, #0
 800e56e:	6063      	str	r3, [r4, #4]
 800e570:	6923      	ldr	r3, [r4, #16]
 800e572:	6023      	str	r3, [r4, #0]
 800e574:	04d2      	lsls	r2, r2, #19
 800e576:	d505      	bpl.n	800e584 <__sflush_r+0x80>
 800e578:	1c43      	adds	r3, r0, #1
 800e57a:	d102      	bne.n	800e582 <__sflush_r+0x7e>
 800e57c:	682b      	ldr	r3, [r5, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d100      	bne.n	800e584 <__sflush_r+0x80>
 800e582:	6560      	str	r0, [r4, #84]	@ 0x54
 800e584:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e586:	602e      	str	r6, [r5, #0]
 800e588:	2900      	cmp	r1, #0
 800e58a:	d017      	beq.n	800e5bc <__sflush_r+0xb8>
 800e58c:	0023      	movs	r3, r4
 800e58e:	3344      	adds	r3, #68	@ 0x44
 800e590:	4299      	cmp	r1, r3
 800e592:	d002      	beq.n	800e59a <__sflush_r+0x96>
 800e594:	0028      	movs	r0, r5
 800e596:	f7fe f81d 	bl	800c5d4 <_free_r>
 800e59a:	2300      	movs	r3, #0
 800e59c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e59e:	e00d      	b.n	800e5bc <__sflush_r+0xb8>
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	0028      	movs	r0, r5
 800e5a4:	47b8      	blx	r7
 800e5a6:	0002      	movs	r2, r0
 800e5a8:	1c43      	adds	r3, r0, #1
 800e5aa:	d1c6      	bne.n	800e53a <__sflush_r+0x36>
 800e5ac:	682b      	ldr	r3, [r5, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d0c3      	beq.n	800e53a <__sflush_r+0x36>
 800e5b2:	2b1d      	cmp	r3, #29
 800e5b4:	d001      	beq.n	800e5ba <__sflush_r+0xb6>
 800e5b6:	2b16      	cmp	r3, #22
 800e5b8:	d11a      	bne.n	800e5f0 <__sflush_r+0xec>
 800e5ba:	602e      	str	r6, [r5, #0]
 800e5bc:	2000      	movs	r0, #0
 800e5be:	e01e      	b.n	800e5fe <__sflush_r+0xfa>
 800e5c0:	690e      	ldr	r6, [r1, #16]
 800e5c2:	2e00      	cmp	r6, #0
 800e5c4:	d0fa      	beq.n	800e5bc <__sflush_r+0xb8>
 800e5c6:	680f      	ldr	r7, [r1, #0]
 800e5c8:	600e      	str	r6, [r1, #0]
 800e5ca:	1bba      	subs	r2, r7, r6
 800e5cc:	9201      	str	r2, [sp, #4]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	079b      	lsls	r3, r3, #30
 800e5d2:	d100      	bne.n	800e5d6 <__sflush_r+0xd2>
 800e5d4:	694a      	ldr	r2, [r1, #20]
 800e5d6:	60a2      	str	r2, [r4, #8]
 800e5d8:	9b01      	ldr	r3, [sp, #4]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	ddee      	ble.n	800e5bc <__sflush_r+0xb8>
 800e5de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e5e0:	0032      	movs	r2, r6
 800e5e2:	001f      	movs	r7, r3
 800e5e4:	0028      	movs	r0, r5
 800e5e6:	9b01      	ldr	r3, [sp, #4]
 800e5e8:	6a21      	ldr	r1, [r4, #32]
 800e5ea:	47b8      	blx	r7
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	dc07      	bgt.n	800e600 <__sflush_r+0xfc>
 800e5f0:	89a2      	ldrh	r2, [r4, #12]
 800e5f2:	2340      	movs	r3, #64	@ 0x40
 800e5f4:	2001      	movs	r0, #1
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	b21b      	sxth	r3, r3
 800e5fa:	81a3      	strh	r3, [r4, #12]
 800e5fc:	4240      	negs	r0, r0
 800e5fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e600:	9b01      	ldr	r3, [sp, #4]
 800e602:	1836      	adds	r6, r6, r0
 800e604:	1a1b      	subs	r3, r3, r0
 800e606:	9301      	str	r3, [sp, #4]
 800e608:	e7e6      	b.n	800e5d8 <__sflush_r+0xd4>
 800e60a:	46c0      	nop			@ (mov r8, r8)
 800e60c:	dfbffffe 	.word	0xdfbffffe

0800e610 <_fflush_r>:
 800e610:	690b      	ldr	r3, [r1, #16]
 800e612:	b570      	push	{r4, r5, r6, lr}
 800e614:	0005      	movs	r5, r0
 800e616:	000c      	movs	r4, r1
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d102      	bne.n	800e622 <_fflush_r+0x12>
 800e61c:	2500      	movs	r5, #0
 800e61e:	0028      	movs	r0, r5
 800e620:	bd70      	pop	{r4, r5, r6, pc}
 800e622:	2800      	cmp	r0, #0
 800e624:	d004      	beq.n	800e630 <_fflush_r+0x20>
 800e626:	6a03      	ldr	r3, [r0, #32]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d101      	bne.n	800e630 <_fflush_r+0x20>
 800e62c:	f7fc fe96 	bl	800b35c <__sinit>
 800e630:	220c      	movs	r2, #12
 800e632:	5ea3      	ldrsh	r3, [r4, r2]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d0f1      	beq.n	800e61c <_fflush_r+0xc>
 800e638:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e63a:	07d2      	lsls	r2, r2, #31
 800e63c:	d404      	bmi.n	800e648 <_fflush_r+0x38>
 800e63e:	059b      	lsls	r3, r3, #22
 800e640:	d402      	bmi.n	800e648 <_fflush_r+0x38>
 800e642:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e644:	f7fd f923 	bl	800b88e <__retarget_lock_acquire_recursive>
 800e648:	0028      	movs	r0, r5
 800e64a:	0021      	movs	r1, r4
 800e64c:	f7ff ff5a 	bl	800e504 <__sflush_r>
 800e650:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e652:	0005      	movs	r5, r0
 800e654:	07db      	lsls	r3, r3, #31
 800e656:	d4e2      	bmi.n	800e61e <_fflush_r+0xe>
 800e658:	89a3      	ldrh	r3, [r4, #12]
 800e65a:	059b      	lsls	r3, r3, #22
 800e65c:	d4df      	bmi.n	800e61e <_fflush_r+0xe>
 800e65e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e660:	f7fd f916 	bl	800b890 <__retarget_lock_release_recursive>
 800e664:	e7db      	b.n	800e61e <_fflush_r+0xe>
	...

0800e668 <__swhatbuf_r>:
 800e668:	b570      	push	{r4, r5, r6, lr}
 800e66a:	000e      	movs	r6, r1
 800e66c:	001d      	movs	r5, r3
 800e66e:	230e      	movs	r3, #14
 800e670:	5ec9      	ldrsh	r1, [r1, r3]
 800e672:	0014      	movs	r4, r2
 800e674:	b096      	sub	sp, #88	@ 0x58
 800e676:	2900      	cmp	r1, #0
 800e678:	da0c      	bge.n	800e694 <__swhatbuf_r+0x2c>
 800e67a:	89b2      	ldrh	r2, [r6, #12]
 800e67c:	2380      	movs	r3, #128	@ 0x80
 800e67e:	0011      	movs	r1, r2
 800e680:	4019      	ands	r1, r3
 800e682:	421a      	tst	r2, r3
 800e684:	d114      	bne.n	800e6b0 <__swhatbuf_r+0x48>
 800e686:	2380      	movs	r3, #128	@ 0x80
 800e688:	00db      	lsls	r3, r3, #3
 800e68a:	2000      	movs	r0, #0
 800e68c:	6029      	str	r1, [r5, #0]
 800e68e:	6023      	str	r3, [r4, #0]
 800e690:	b016      	add	sp, #88	@ 0x58
 800e692:	bd70      	pop	{r4, r5, r6, pc}
 800e694:	466a      	mov	r2, sp
 800e696:	f000 f8dd 	bl	800e854 <_fstat_r>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	dbed      	blt.n	800e67a <__swhatbuf_r+0x12>
 800e69e:	23f0      	movs	r3, #240	@ 0xf0
 800e6a0:	9901      	ldr	r1, [sp, #4]
 800e6a2:	021b      	lsls	r3, r3, #8
 800e6a4:	4019      	ands	r1, r3
 800e6a6:	4b04      	ldr	r3, [pc, #16]	@ (800e6b8 <__swhatbuf_r+0x50>)
 800e6a8:	18c9      	adds	r1, r1, r3
 800e6aa:	424b      	negs	r3, r1
 800e6ac:	4159      	adcs	r1, r3
 800e6ae:	e7ea      	b.n	800e686 <__swhatbuf_r+0x1e>
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	2340      	movs	r3, #64	@ 0x40
 800e6b4:	e7e9      	b.n	800e68a <__swhatbuf_r+0x22>
 800e6b6:	46c0      	nop			@ (mov r8, r8)
 800e6b8:	ffffe000 	.word	0xffffe000

0800e6bc <__smakebuf_r>:
 800e6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6be:	2602      	movs	r6, #2
 800e6c0:	898b      	ldrh	r3, [r1, #12]
 800e6c2:	0005      	movs	r5, r0
 800e6c4:	000c      	movs	r4, r1
 800e6c6:	b085      	sub	sp, #20
 800e6c8:	4233      	tst	r3, r6
 800e6ca:	d007      	beq.n	800e6dc <__smakebuf_r+0x20>
 800e6cc:	0023      	movs	r3, r4
 800e6ce:	3347      	adds	r3, #71	@ 0x47
 800e6d0:	6023      	str	r3, [r4, #0]
 800e6d2:	6123      	str	r3, [r4, #16]
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	6163      	str	r3, [r4, #20]
 800e6d8:	b005      	add	sp, #20
 800e6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6dc:	ab03      	add	r3, sp, #12
 800e6de:	aa02      	add	r2, sp, #8
 800e6e0:	f7ff ffc2 	bl	800e668 <__swhatbuf_r>
 800e6e4:	9f02      	ldr	r7, [sp, #8]
 800e6e6:	9001      	str	r0, [sp, #4]
 800e6e8:	0039      	movs	r1, r7
 800e6ea:	0028      	movs	r0, r5
 800e6ec:	f7fe fb42 	bl	800cd74 <_malloc_r>
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d108      	bne.n	800e706 <__smakebuf_r+0x4a>
 800e6f4:	220c      	movs	r2, #12
 800e6f6:	5ea3      	ldrsh	r3, [r4, r2]
 800e6f8:	059a      	lsls	r2, r3, #22
 800e6fa:	d4ed      	bmi.n	800e6d8 <__smakebuf_r+0x1c>
 800e6fc:	2203      	movs	r2, #3
 800e6fe:	4393      	bics	r3, r2
 800e700:	431e      	orrs	r6, r3
 800e702:	81a6      	strh	r6, [r4, #12]
 800e704:	e7e2      	b.n	800e6cc <__smakebuf_r+0x10>
 800e706:	2380      	movs	r3, #128	@ 0x80
 800e708:	89a2      	ldrh	r2, [r4, #12]
 800e70a:	6020      	str	r0, [r4, #0]
 800e70c:	4313      	orrs	r3, r2
 800e70e:	81a3      	strh	r3, [r4, #12]
 800e710:	9b03      	ldr	r3, [sp, #12]
 800e712:	6120      	str	r0, [r4, #16]
 800e714:	6167      	str	r7, [r4, #20]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00c      	beq.n	800e734 <__smakebuf_r+0x78>
 800e71a:	0028      	movs	r0, r5
 800e71c:	230e      	movs	r3, #14
 800e71e:	5ee1      	ldrsh	r1, [r4, r3]
 800e720:	f000 f8aa 	bl	800e878 <_isatty_r>
 800e724:	2800      	cmp	r0, #0
 800e726:	d005      	beq.n	800e734 <__smakebuf_r+0x78>
 800e728:	2303      	movs	r3, #3
 800e72a:	89a2      	ldrh	r2, [r4, #12]
 800e72c:	439a      	bics	r2, r3
 800e72e:	3b02      	subs	r3, #2
 800e730:	4313      	orrs	r3, r2
 800e732:	81a3      	strh	r3, [r4, #12]
 800e734:	89a3      	ldrh	r3, [r4, #12]
 800e736:	9a01      	ldr	r2, [sp, #4]
 800e738:	4313      	orrs	r3, r2
 800e73a:	81a3      	strh	r3, [r4, #12]
 800e73c:	e7cc      	b.n	800e6d8 <__smakebuf_r+0x1c>

0800e73e <__sccl>:
 800e73e:	b570      	push	{r4, r5, r6, lr}
 800e740:	780b      	ldrb	r3, [r1, #0]
 800e742:	0004      	movs	r4, r0
 800e744:	2b5e      	cmp	r3, #94	@ 0x5e
 800e746:	d018      	beq.n	800e77a <__sccl+0x3c>
 800e748:	2200      	movs	r2, #0
 800e74a:	1c4d      	adds	r5, r1, #1
 800e74c:	0021      	movs	r1, r4
 800e74e:	1c60      	adds	r0, r4, #1
 800e750:	30ff      	adds	r0, #255	@ 0xff
 800e752:	700a      	strb	r2, [r1, #0]
 800e754:	3101      	adds	r1, #1
 800e756:	4281      	cmp	r1, r0
 800e758:	d1fb      	bne.n	800e752 <__sccl+0x14>
 800e75a:	1e68      	subs	r0, r5, #1
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d00b      	beq.n	800e778 <__sccl+0x3a>
 800e760:	2101      	movs	r1, #1
 800e762:	404a      	eors	r2, r1
 800e764:	0028      	movs	r0, r5
 800e766:	54e2      	strb	r2, [r4, r3]
 800e768:	7801      	ldrb	r1, [r0, #0]
 800e76a:	1c45      	adds	r5, r0, #1
 800e76c:	292d      	cmp	r1, #45	@ 0x2d
 800e76e:	d00a      	beq.n	800e786 <__sccl+0x48>
 800e770:	295d      	cmp	r1, #93	@ 0x5d
 800e772:	d01b      	beq.n	800e7ac <__sccl+0x6e>
 800e774:	2900      	cmp	r1, #0
 800e776:	d104      	bne.n	800e782 <__sccl+0x44>
 800e778:	bd70      	pop	{r4, r5, r6, pc}
 800e77a:	2201      	movs	r2, #1
 800e77c:	784b      	ldrb	r3, [r1, #1]
 800e77e:	1c8d      	adds	r5, r1, #2
 800e780:	e7e4      	b.n	800e74c <__sccl+0xe>
 800e782:	000b      	movs	r3, r1
 800e784:	e7ee      	b.n	800e764 <__sccl+0x26>
 800e786:	7846      	ldrb	r6, [r0, #1]
 800e788:	2e5d      	cmp	r6, #93	@ 0x5d
 800e78a:	d0fa      	beq.n	800e782 <__sccl+0x44>
 800e78c:	42b3      	cmp	r3, r6
 800e78e:	dcf8      	bgt.n	800e782 <__sccl+0x44>
 800e790:	0019      	movs	r1, r3
 800e792:	3002      	adds	r0, #2
 800e794:	3101      	adds	r1, #1
 800e796:	5462      	strb	r2, [r4, r1]
 800e798:	428e      	cmp	r6, r1
 800e79a:	dcfb      	bgt.n	800e794 <__sccl+0x56>
 800e79c:	2100      	movs	r1, #0
 800e79e:	1c5d      	adds	r5, r3, #1
 800e7a0:	42b3      	cmp	r3, r6
 800e7a2:	da01      	bge.n	800e7a8 <__sccl+0x6a>
 800e7a4:	1af1      	subs	r1, r6, r3
 800e7a6:	3901      	subs	r1, #1
 800e7a8:	186b      	adds	r3, r5, r1
 800e7aa:	e7dd      	b.n	800e768 <__sccl+0x2a>
 800e7ac:	0028      	movs	r0, r5
 800e7ae:	e7e3      	b.n	800e778 <__sccl+0x3a>

0800e7b0 <__submore>:
 800e7b0:	000b      	movs	r3, r1
 800e7b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7b4:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 800e7b6:	3344      	adds	r3, #68	@ 0x44
 800e7b8:	000c      	movs	r4, r1
 800e7ba:	429d      	cmp	r5, r3
 800e7bc:	d11c      	bne.n	800e7f8 <__submore+0x48>
 800e7be:	2680      	movs	r6, #128	@ 0x80
 800e7c0:	00f6      	lsls	r6, r6, #3
 800e7c2:	0031      	movs	r1, r6
 800e7c4:	f7fe fad6 	bl	800cd74 <_malloc_r>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d102      	bne.n	800e7d2 <__submore+0x22>
 800e7cc:	2001      	movs	r0, #1
 800e7ce:	4240      	negs	r0, r0
 800e7d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e7d2:	0023      	movs	r3, r4
 800e7d4:	6360      	str	r0, [r4, #52]	@ 0x34
 800e7d6:	63a6      	str	r6, [r4, #56]	@ 0x38
 800e7d8:	3346      	adds	r3, #70	@ 0x46
 800e7da:	781a      	ldrb	r2, [r3, #0]
 800e7dc:	4b10      	ldr	r3, [pc, #64]	@ (800e820 <__submore+0x70>)
 800e7de:	54c2      	strb	r2, [r0, r3]
 800e7e0:	0023      	movs	r3, r4
 800e7e2:	3345      	adds	r3, #69	@ 0x45
 800e7e4:	781a      	ldrb	r2, [r3, #0]
 800e7e6:	4b0f      	ldr	r3, [pc, #60]	@ (800e824 <__submore+0x74>)
 800e7e8:	54c2      	strb	r2, [r0, r3]
 800e7ea:	782a      	ldrb	r2, [r5, #0]
 800e7ec:	4b0e      	ldr	r3, [pc, #56]	@ (800e828 <__submore+0x78>)
 800e7ee:	54c2      	strb	r2, [r0, r3]
 800e7f0:	18c0      	adds	r0, r0, r3
 800e7f2:	6020      	str	r0, [r4, #0]
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	e7eb      	b.n	800e7d0 <__submore+0x20>
 800e7f8:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 800e7fa:	0029      	movs	r1, r5
 800e7fc:	0073      	lsls	r3, r6, #1
 800e7fe:	001a      	movs	r2, r3
 800e800:	9301      	str	r3, [sp, #4]
 800e802:	f000 f8a8 	bl	800e956 <_realloc_r>
 800e806:	1e05      	subs	r5, r0, #0
 800e808:	d0e0      	beq.n	800e7cc <__submore+0x1c>
 800e80a:	1987      	adds	r7, r0, r6
 800e80c:	0001      	movs	r1, r0
 800e80e:	0032      	movs	r2, r6
 800e810:	0038      	movs	r0, r7
 800e812:	f7fd f849 	bl	800b8a8 <memcpy>
 800e816:	9b01      	ldr	r3, [sp, #4]
 800e818:	6027      	str	r7, [r4, #0]
 800e81a:	6365      	str	r5, [r4, #52]	@ 0x34
 800e81c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e81e:	e7e9      	b.n	800e7f4 <__submore+0x44>
 800e820:	000003ff 	.word	0x000003ff
 800e824:	000003fe 	.word	0x000003fe
 800e828:	000003fd 	.word	0x000003fd

0800e82c <memmove>:
 800e82c:	b510      	push	{r4, lr}
 800e82e:	4288      	cmp	r0, r1
 800e830:	d806      	bhi.n	800e840 <memmove+0x14>
 800e832:	2300      	movs	r3, #0
 800e834:	429a      	cmp	r2, r3
 800e836:	d008      	beq.n	800e84a <memmove+0x1e>
 800e838:	5ccc      	ldrb	r4, [r1, r3]
 800e83a:	54c4      	strb	r4, [r0, r3]
 800e83c:	3301      	adds	r3, #1
 800e83e:	e7f9      	b.n	800e834 <memmove+0x8>
 800e840:	188b      	adds	r3, r1, r2
 800e842:	4298      	cmp	r0, r3
 800e844:	d2f5      	bcs.n	800e832 <memmove+0x6>
 800e846:	3a01      	subs	r2, #1
 800e848:	d200      	bcs.n	800e84c <memmove+0x20>
 800e84a:	bd10      	pop	{r4, pc}
 800e84c:	5c8b      	ldrb	r3, [r1, r2]
 800e84e:	5483      	strb	r3, [r0, r2]
 800e850:	e7f9      	b.n	800e846 <memmove+0x1a>
	...

0800e854 <_fstat_r>:
 800e854:	2300      	movs	r3, #0
 800e856:	b570      	push	{r4, r5, r6, lr}
 800e858:	4d06      	ldr	r5, [pc, #24]	@ (800e874 <_fstat_r+0x20>)
 800e85a:	0004      	movs	r4, r0
 800e85c:	0008      	movs	r0, r1
 800e85e:	0011      	movs	r1, r2
 800e860:	602b      	str	r3, [r5, #0]
 800e862:	f7f5 fc39 	bl	80040d8 <_fstat>
 800e866:	1c43      	adds	r3, r0, #1
 800e868:	d103      	bne.n	800e872 <_fstat_r+0x1e>
 800e86a:	682b      	ldr	r3, [r5, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d000      	beq.n	800e872 <_fstat_r+0x1e>
 800e870:	6023      	str	r3, [r4, #0]
 800e872:	bd70      	pop	{r4, r5, r6, pc}
 800e874:	200008dc 	.word	0x200008dc

0800e878 <_isatty_r>:
 800e878:	2300      	movs	r3, #0
 800e87a:	b570      	push	{r4, r5, r6, lr}
 800e87c:	4d06      	ldr	r5, [pc, #24]	@ (800e898 <_isatty_r+0x20>)
 800e87e:	0004      	movs	r4, r0
 800e880:	0008      	movs	r0, r1
 800e882:	602b      	str	r3, [r5, #0]
 800e884:	f7f5 fc36 	bl	80040f4 <_isatty>
 800e888:	1c43      	adds	r3, r0, #1
 800e88a:	d103      	bne.n	800e894 <_isatty_r+0x1c>
 800e88c:	682b      	ldr	r3, [r5, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d000      	beq.n	800e894 <_isatty_r+0x1c>
 800e892:	6023      	str	r3, [r4, #0]
 800e894:	bd70      	pop	{r4, r5, r6, pc}
 800e896:	46c0      	nop			@ (mov r8, r8)
 800e898:	200008dc 	.word	0x200008dc

0800e89c <_sbrk_r>:
 800e89c:	2300      	movs	r3, #0
 800e89e:	b570      	push	{r4, r5, r6, lr}
 800e8a0:	4d06      	ldr	r5, [pc, #24]	@ (800e8bc <_sbrk_r+0x20>)
 800e8a2:	0004      	movs	r4, r0
 800e8a4:	0008      	movs	r0, r1
 800e8a6:	602b      	str	r3, [r5, #0]
 800e8a8:	f7f5 fc38 	bl	800411c <_sbrk>
 800e8ac:	1c43      	adds	r3, r0, #1
 800e8ae:	d103      	bne.n	800e8b8 <_sbrk_r+0x1c>
 800e8b0:	682b      	ldr	r3, [r5, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d000      	beq.n	800e8b8 <_sbrk_r+0x1c>
 800e8b6:	6023      	str	r3, [r4, #0]
 800e8b8:	bd70      	pop	{r4, r5, r6, pc}
 800e8ba:	46c0      	nop			@ (mov r8, r8)
 800e8bc:	200008dc 	.word	0x200008dc

0800e8c0 <__assert_func>:
 800e8c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e8c2:	0014      	movs	r4, r2
 800e8c4:	001a      	movs	r2, r3
 800e8c6:	4b09      	ldr	r3, [pc, #36]	@ (800e8ec <__assert_func+0x2c>)
 800e8c8:	0005      	movs	r5, r0
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	000e      	movs	r6, r1
 800e8ce:	68d8      	ldr	r0, [r3, #12]
 800e8d0:	4b07      	ldr	r3, [pc, #28]	@ (800e8f0 <__assert_func+0x30>)
 800e8d2:	2c00      	cmp	r4, #0
 800e8d4:	d101      	bne.n	800e8da <__assert_func+0x1a>
 800e8d6:	4b07      	ldr	r3, [pc, #28]	@ (800e8f4 <__assert_func+0x34>)
 800e8d8:	001c      	movs	r4, r3
 800e8da:	4907      	ldr	r1, [pc, #28]	@ (800e8f8 <__assert_func+0x38>)
 800e8dc:	9301      	str	r3, [sp, #4]
 800e8de:	9402      	str	r4, [sp, #8]
 800e8e0:	002b      	movs	r3, r5
 800e8e2:	9600      	str	r6, [sp, #0]
 800e8e4:	f000 f8ec 	bl	800eac0 <fiprintf>
 800e8e8:	f000 f8fa 	bl	800eae0 <abort>
 800e8ec:	200001b4 	.word	0x200001b4
 800e8f0:	0800f115 	.word	0x0800f115
 800e8f4:	0800f150 	.word	0x0800f150
 800e8f8:	0800f122 	.word	0x0800f122

0800e8fc <_calloc_r>:
 800e8fc:	b570      	push	{r4, r5, r6, lr}
 800e8fe:	0c0b      	lsrs	r3, r1, #16
 800e900:	0c15      	lsrs	r5, r2, #16
 800e902:	2b00      	cmp	r3, #0
 800e904:	d11e      	bne.n	800e944 <_calloc_r+0x48>
 800e906:	2d00      	cmp	r5, #0
 800e908:	d10c      	bne.n	800e924 <_calloc_r+0x28>
 800e90a:	b289      	uxth	r1, r1
 800e90c:	b294      	uxth	r4, r2
 800e90e:	434c      	muls	r4, r1
 800e910:	0021      	movs	r1, r4
 800e912:	f7fe fa2f 	bl	800cd74 <_malloc_r>
 800e916:	1e05      	subs	r5, r0, #0
 800e918:	d01a      	beq.n	800e950 <_calloc_r+0x54>
 800e91a:	0022      	movs	r2, r4
 800e91c:	2100      	movs	r1, #0
 800e91e:	f7fc ff1f 	bl	800b760 <memset>
 800e922:	e016      	b.n	800e952 <_calloc_r+0x56>
 800e924:	1c2b      	adds	r3, r5, #0
 800e926:	1c0c      	adds	r4, r1, #0
 800e928:	b289      	uxth	r1, r1
 800e92a:	b292      	uxth	r2, r2
 800e92c:	434a      	muls	r2, r1
 800e92e:	b29b      	uxth	r3, r3
 800e930:	b2a1      	uxth	r1, r4
 800e932:	4359      	muls	r1, r3
 800e934:	0c14      	lsrs	r4, r2, #16
 800e936:	190c      	adds	r4, r1, r4
 800e938:	0c23      	lsrs	r3, r4, #16
 800e93a:	d107      	bne.n	800e94c <_calloc_r+0x50>
 800e93c:	0424      	lsls	r4, r4, #16
 800e93e:	b292      	uxth	r2, r2
 800e940:	4314      	orrs	r4, r2
 800e942:	e7e5      	b.n	800e910 <_calloc_r+0x14>
 800e944:	2d00      	cmp	r5, #0
 800e946:	d101      	bne.n	800e94c <_calloc_r+0x50>
 800e948:	1c14      	adds	r4, r2, #0
 800e94a:	e7ed      	b.n	800e928 <_calloc_r+0x2c>
 800e94c:	230c      	movs	r3, #12
 800e94e:	6003      	str	r3, [r0, #0]
 800e950:	2500      	movs	r5, #0
 800e952:	0028      	movs	r0, r5
 800e954:	bd70      	pop	{r4, r5, r6, pc}

0800e956 <_realloc_r>:
 800e956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e958:	0006      	movs	r6, r0
 800e95a:	000c      	movs	r4, r1
 800e95c:	0015      	movs	r5, r2
 800e95e:	2900      	cmp	r1, #0
 800e960:	d105      	bne.n	800e96e <_realloc_r+0x18>
 800e962:	0011      	movs	r1, r2
 800e964:	f7fe fa06 	bl	800cd74 <_malloc_r>
 800e968:	0004      	movs	r4, r0
 800e96a:	0020      	movs	r0, r4
 800e96c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e96e:	2a00      	cmp	r2, #0
 800e970:	d103      	bne.n	800e97a <_realloc_r+0x24>
 800e972:	f7fd fe2f 	bl	800c5d4 <_free_r>
 800e976:	2400      	movs	r4, #0
 800e978:	e7f7      	b.n	800e96a <_realloc_r+0x14>
 800e97a:	f000 f8b8 	bl	800eaee <_malloc_usable_size_r>
 800e97e:	0007      	movs	r7, r0
 800e980:	4285      	cmp	r5, r0
 800e982:	d802      	bhi.n	800e98a <_realloc_r+0x34>
 800e984:	0843      	lsrs	r3, r0, #1
 800e986:	42ab      	cmp	r3, r5
 800e988:	d3ef      	bcc.n	800e96a <_realloc_r+0x14>
 800e98a:	0029      	movs	r1, r5
 800e98c:	0030      	movs	r0, r6
 800e98e:	f7fe f9f1 	bl	800cd74 <_malloc_r>
 800e992:	9001      	str	r0, [sp, #4]
 800e994:	2800      	cmp	r0, #0
 800e996:	d0ee      	beq.n	800e976 <_realloc_r+0x20>
 800e998:	002a      	movs	r2, r5
 800e99a:	42bd      	cmp	r5, r7
 800e99c:	d900      	bls.n	800e9a0 <_realloc_r+0x4a>
 800e99e:	003a      	movs	r2, r7
 800e9a0:	0021      	movs	r1, r4
 800e9a2:	9801      	ldr	r0, [sp, #4]
 800e9a4:	f7fc ff80 	bl	800b8a8 <memcpy>
 800e9a8:	0021      	movs	r1, r4
 800e9aa:	0030      	movs	r0, r6
 800e9ac:	f7fd fe12 	bl	800c5d4 <_free_r>
 800e9b0:	9c01      	ldr	r4, [sp, #4]
 800e9b2:	e7da      	b.n	800e96a <_realloc_r+0x14>

0800e9b4 <_strtoul_l.constprop.0>:
 800e9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9b6:	001e      	movs	r6, r3
 800e9b8:	4b3e      	ldr	r3, [pc, #248]	@ (800eab4 <_strtoul_l.constprop.0+0x100>)
 800e9ba:	0017      	movs	r7, r2
 800e9bc:	000c      	movs	r4, r1
 800e9be:	469c      	mov	ip, r3
 800e9c0:	2208      	movs	r2, #8
 800e9c2:	b085      	sub	sp, #20
 800e9c4:	9003      	str	r0, [sp, #12]
 800e9c6:	9100      	str	r1, [sp, #0]
 800e9c8:	0023      	movs	r3, r4
 800e9ca:	4661      	mov	r1, ip
 800e9cc:	781d      	ldrb	r5, [r3, #0]
 800e9ce:	3401      	adds	r4, #1
 800e9d0:	5d48      	ldrb	r0, [r1, r5]
 800e9d2:	0001      	movs	r1, r0
 800e9d4:	4011      	ands	r1, r2
 800e9d6:	4210      	tst	r0, r2
 800e9d8:	d1f6      	bne.n	800e9c8 <_strtoul_l.constprop.0+0x14>
 800e9da:	2d2d      	cmp	r5, #45	@ 0x2d
 800e9dc:	d137      	bne.n	800ea4e <_strtoul_l.constprop.0+0x9a>
 800e9de:	7825      	ldrb	r5, [r4, #0]
 800e9e0:	1c9c      	adds	r4, r3, #2
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	9302      	str	r3, [sp, #8]
 800e9e6:	2210      	movs	r2, #16
 800e9e8:	0033      	movs	r3, r6
 800e9ea:	4393      	bics	r3, r2
 800e9ec:	d109      	bne.n	800ea02 <_strtoul_l.constprop.0+0x4e>
 800e9ee:	2d30      	cmp	r5, #48	@ 0x30
 800e9f0:	d133      	bne.n	800ea5a <_strtoul_l.constprop.0+0xa6>
 800e9f2:	2120      	movs	r1, #32
 800e9f4:	7823      	ldrb	r3, [r4, #0]
 800e9f6:	438b      	bics	r3, r1
 800e9f8:	2b58      	cmp	r3, #88	@ 0x58
 800e9fa:	d12e      	bne.n	800ea5a <_strtoul_l.constprop.0+0xa6>
 800e9fc:	0016      	movs	r6, r2
 800e9fe:	7865      	ldrb	r5, [r4, #1]
 800ea00:	3402      	adds	r4, #2
 800ea02:	2001      	movs	r0, #1
 800ea04:	0031      	movs	r1, r6
 800ea06:	4240      	negs	r0, r0
 800ea08:	f7f1 fba4 	bl	8000154 <__udivsi3>
 800ea0c:	9001      	str	r0, [sp, #4]
 800ea0e:	2001      	movs	r0, #1
 800ea10:	0031      	movs	r1, r6
 800ea12:	4240      	negs	r0, r0
 800ea14:	f7f1 fc24 	bl	8000260 <__aeabi_uidivmod>
 800ea18:	2300      	movs	r3, #0
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	0018      	movs	r0, r3
 800ea1e:	4694      	mov	ip, r2
 800ea20:	002a      	movs	r2, r5
 800ea22:	3a30      	subs	r2, #48	@ 0x30
 800ea24:	2a09      	cmp	r2, #9
 800ea26:	d81f      	bhi.n	800ea68 <_strtoul_l.constprop.0+0xb4>
 800ea28:	0015      	movs	r5, r2
 800ea2a:	42ae      	cmp	r6, r5
 800ea2c:	dd2b      	ble.n	800ea86 <_strtoul_l.constprop.0+0xd2>
 800ea2e:	1c5a      	adds	r2, r3, #1
 800ea30:	d00a      	beq.n	800ea48 <_strtoul_l.constprop.0+0x94>
 800ea32:	2301      	movs	r3, #1
 800ea34:	9a01      	ldr	r2, [sp, #4]
 800ea36:	425b      	negs	r3, r3
 800ea38:	4282      	cmp	r2, r0
 800ea3a:	d305      	bcc.n	800ea48 <_strtoul_l.constprop.0+0x94>
 800ea3c:	d101      	bne.n	800ea42 <_strtoul_l.constprop.0+0x8e>
 800ea3e:	42a9      	cmp	r1, r5
 800ea40:	db1e      	blt.n	800ea80 <_strtoul_l.constprop.0+0xcc>
 800ea42:	4663      	mov	r3, ip
 800ea44:	4370      	muls	r0, r6
 800ea46:	1828      	adds	r0, r5, r0
 800ea48:	7825      	ldrb	r5, [r4, #0]
 800ea4a:	3401      	adds	r4, #1
 800ea4c:	e7e8      	b.n	800ea20 <_strtoul_l.constprop.0+0x6c>
 800ea4e:	9102      	str	r1, [sp, #8]
 800ea50:	2d2b      	cmp	r5, #43	@ 0x2b
 800ea52:	d1c8      	bne.n	800e9e6 <_strtoul_l.constprop.0+0x32>
 800ea54:	7825      	ldrb	r5, [r4, #0]
 800ea56:	1c9c      	adds	r4, r3, #2
 800ea58:	e7c5      	b.n	800e9e6 <_strtoul_l.constprop.0+0x32>
 800ea5a:	2e00      	cmp	r6, #0
 800ea5c:	d1d1      	bne.n	800ea02 <_strtoul_l.constprop.0+0x4e>
 800ea5e:	3608      	adds	r6, #8
 800ea60:	2d30      	cmp	r5, #48	@ 0x30
 800ea62:	d0ce      	beq.n	800ea02 <_strtoul_l.constprop.0+0x4e>
 800ea64:	3602      	adds	r6, #2
 800ea66:	e7cc      	b.n	800ea02 <_strtoul_l.constprop.0+0x4e>
 800ea68:	002a      	movs	r2, r5
 800ea6a:	3a41      	subs	r2, #65	@ 0x41
 800ea6c:	2a19      	cmp	r2, #25
 800ea6e:	d801      	bhi.n	800ea74 <_strtoul_l.constprop.0+0xc0>
 800ea70:	3d37      	subs	r5, #55	@ 0x37
 800ea72:	e7da      	b.n	800ea2a <_strtoul_l.constprop.0+0x76>
 800ea74:	002a      	movs	r2, r5
 800ea76:	3a61      	subs	r2, #97	@ 0x61
 800ea78:	2a19      	cmp	r2, #25
 800ea7a:	d804      	bhi.n	800ea86 <_strtoul_l.constprop.0+0xd2>
 800ea7c:	3d57      	subs	r5, #87	@ 0x57
 800ea7e:	e7d4      	b.n	800ea2a <_strtoul_l.constprop.0+0x76>
 800ea80:	2301      	movs	r3, #1
 800ea82:	425b      	negs	r3, r3
 800ea84:	e7e0      	b.n	800ea48 <_strtoul_l.constprop.0+0x94>
 800ea86:	1c5a      	adds	r2, r3, #1
 800ea88:	d107      	bne.n	800ea9a <_strtoul_l.constprop.0+0xe6>
 800ea8a:	2222      	movs	r2, #34	@ 0x22
 800ea8c:	9903      	ldr	r1, [sp, #12]
 800ea8e:	0018      	movs	r0, r3
 800ea90:	600a      	str	r2, [r1, #0]
 800ea92:	2f00      	cmp	r7, #0
 800ea94:	d109      	bne.n	800eaaa <_strtoul_l.constprop.0+0xf6>
 800ea96:	b005      	add	sp, #20
 800ea98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea9a:	9a02      	ldr	r2, [sp, #8]
 800ea9c:	2a00      	cmp	r2, #0
 800ea9e:	d000      	beq.n	800eaa2 <_strtoul_l.constprop.0+0xee>
 800eaa0:	4240      	negs	r0, r0
 800eaa2:	2f00      	cmp	r7, #0
 800eaa4:	d0f7      	beq.n	800ea96 <_strtoul_l.constprop.0+0xe2>
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d001      	beq.n	800eaae <_strtoul_l.constprop.0+0xfa>
 800eaaa:	1e63      	subs	r3, r4, #1
 800eaac:	9300      	str	r3, [sp, #0]
 800eaae:	9b00      	ldr	r3, [sp, #0]
 800eab0:	603b      	str	r3, [r7, #0]
 800eab2:	e7f0      	b.n	800ea96 <_strtoul_l.constprop.0+0xe2>
 800eab4:	0800efe9 	.word	0x0800efe9

0800eab8 <_strtoul_r>:
 800eab8:	b510      	push	{r4, lr}
 800eaba:	f7ff ff7b 	bl	800e9b4 <_strtoul_l.constprop.0>
 800eabe:	bd10      	pop	{r4, pc}

0800eac0 <fiprintf>:
 800eac0:	b40e      	push	{r1, r2, r3}
 800eac2:	b517      	push	{r0, r1, r2, r4, lr}
 800eac4:	4c05      	ldr	r4, [pc, #20]	@ (800eadc <fiprintf+0x1c>)
 800eac6:	ab05      	add	r3, sp, #20
 800eac8:	cb04      	ldmia	r3!, {r2}
 800eaca:	0001      	movs	r1, r0
 800eacc:	6820      	ldr	r0, [r4, #0]
 800eace:	9301      	str	r3, [sp, #4]
 800ead0:	f7ff fa9c 	bl	800e00c <_vfiprintf_r>
 800ead4:	bc1e      	pop	{r1, r2, r3, r4}
 800ead6:	bc08      	pop	{r3}
 800ead8:	b003      	add	sp, #12
 800eada:	4718      	bx	r3
 800eadc:	200001b4 	.word	0x200001b4

0800eae0 <abort>:
 800eae0:	2006      	movs	r0, #6
 800eae2:	b510      	push	{r4, lr}
 800eae4:	f000 f834 	bl	800eb50 <raise>
 800eae8:	2001      	movs	r0, #1
 800eaea:	f7f5 faa5 	bl	8004038 <_exit>

0800eaee <_malloc_usable_size_r>:
 800eaee:	1f0b      	subs	r3, r1, #4
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	1f18      	subs	r0, r3, #4
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	da01      	bge.n	800eafc <_malloc_usable_size_r+0xe>
 800eaf8:	580b      	ldr	r3, [r1, r0]
 800eafa:	18c0      	adds	r0, r0, r3
 800eafc:	4770      	bx	lr

0800eafe <_raise_r>:
 800eafe:	b570      	push	{r4, r5, r6, lr}
 800eb00:	0004      	movs	r4, r0
 800eb02:	000d      	movs	r5, r1
 800eb04:	291f      	cmp	r1, #31
 800eb06:	d904      	bls.n	800eb12 <_raise_r+0x14>
 800eb08:	2316      	movs	r3, #22
 800eb0a:	6003      	str	r3, [r0, #0]
 800eb0c:	2001      	movs	r0, #1
 800eb0e:	4240      	negs	r0, r0
 800eb10:	bd70      	pop	{r4, r5, r6, pc}
 800eb12:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d004      	beq.n	800eb22 <_raise_r+0x24>
 800eb18:	008a      	lsls	r2, r1, #2
 800eb1a:	189b      	adds	r3, r3, r2
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	2a00      	cmp	r2, #0
 800eb20:	d108      	bne.n	800eb34 <_raise_r+0x36>
 800eb22:	0020      	movs	r0, r4
 800eb24:	f000 f830 	bl	800eb88 <_getpid_r>
 800eb28:	002a      	movs	r2, r5
 800eb2a:	0001      	movs	r1, r0
 800eb2c:	0020      	movs	r0, r4
 800eb2e:	f000 f819 	bl	800eb64 <_kill_r>
 800eb32:	e7ed      	b.n	800eb10 <_raise_r+0x12>
 800eb34:	2a01      	cmp	r2, #1
 800eb36:	d009      	beq.n	800eb4c <_raise_r+0x4e>
 800eb38:	1c51      	adds	r1, r2, #1
 800eb3a:	d103      	bne.n	800eb44 <_raise_r+0x46>
 800eb3c:	2316      	movs	r3, #22
 800eb3e:	6003      	str	r3, [r0, #0]
 800eb40:	2001      	movs	r0, #1
 800eb42:	e7e5      	b.n	800eb10 <_raise_r+0x12>
 800eb44:	2100      	movs	r1, #0
 800eb46:	0028      	movs	r0, r5
 800eb48:	6019      	str	r1, [r3, #0]
 800eb4a:	4790      	blx	r2
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	e7df      	b.n	800eb10 <_raise_r+0x12>

0800eb50 <raise>:
 800eb50:	b510      	push	{r4, lr}
 800eb52:	4b03      	ldr	r3, [pc, #12]	@ (800eb60 <raise+0x10>)
 800eb54:	0001      	movs	r1, r0
 800eb56:	6818      	ldr	r0, [r3, #0]
 800eb58:	f7ff ffd1 	bl	800eafe <_raise_r>
 800eb5c:	bd10      	pop	{r4, pc}
 800eb5e:	46c0      	nop			@ (mov r8, r8)
 800eb60:	200001b4 	.word	0x200001b4

0800eb64 <_kill_r>:
 800eb64:	2300      	movs	r3, #0
 800eb66:	b570      	push	{r4, r5, r6, lr}
 800eb68:	4d06      	ldr	r5, [pc, #24]	@ (800eb84 <_kill_r+0x20>)
 800eb6a:	0004      	movs	r4, r0
 800eb6c:	0008      	movs	r0, r1
 800eb6e:	0011      	movs	r1, r2
 800eb70:	602b      	str	r3, [r5, #0]
 800eb72:	f7f5 fa51 	bl	8004018 <_kill>
 800eb76:	1c43      	adds	r3, r0, #1
 800eb78:	d103      	bne.n	800eb82 <_kill_r+0x1e>
 800eb7a:	682b      	ldr	r3, [r5, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d000      	beq.n	800eb82 <_kill_r+0x1e>
 800eb80:	6023      	str	r3, [r4, #0]
 800eb82:	bd70      	pop	{r4, r5, r6, pc}
 800eb84:	200008dc 	.word	0x200008dc

0800eb88 <_getpid_r>:
 800eb88:	b510      	push	{r4, lr}
 800eb8a:	f7f5 fa3f 	bl	800400c <_getpid>
 800eb8e:	bd10      	pop	{r4, pc}

0800eb90 <_init>:
 800eb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb92:	46c0      	nop			@ (mov r8, r8)
 800eb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb96:	bc08      	pop	{r3}
 800eb98:	469e      	mov	lr, r3
 800eb9a:	4770      	bx	lr

0800eb9c <_fini>:
 800eb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9e:	46c0      	nop			@ (mov r8, r8)
 800eba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eba2:	bc08      	pop	{r3}
 800eba4:	469e      	mov	lr, r3
 800eba6:	4770      	bx	lr
