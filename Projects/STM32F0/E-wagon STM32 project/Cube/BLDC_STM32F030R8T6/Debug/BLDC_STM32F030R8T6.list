
BLDC_STM32F030R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e558  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800e618  0800e618  0000f618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebb4  0800ebb4  00010200  2**0
                  CONTENTS
  4 .ARM          00000000  0800ebb4  0800ebb4  00010200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ebb4  0800ebb4  00010200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebb4  0800ebb4  0000fbb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebb8  0800ebb8  0000fbb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800ebbc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  20000200  0800edbc  00010200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  0800edbc  000108d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001119a  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c61  00000000  00000000  000213c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00024028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9e  00000000  00000000  00024f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004644  00000000  00000000  00025ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153da  00000000  00000000  0002a0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c766  00000000  00000000  0003f4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000abc3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d00  00000000  00000000  000abc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a9  00000000  00000000  000b0980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000200 	.word	0x20000200
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e600 	.word	0x0800e600

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000204 	.word	0x20000204
 8000104:	0800e600 	.word	0x0800e600

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fb0b 	bl	8001a6c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fa4b 	bl	80018fc <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fafd 	bl	8001a6c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 faf3 	bl	8001a6c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa75 	bl	8001984 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fa6b 	bl	8001984 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_d2uiz>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2200      	movs	r2, #0
 80004c0:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <__aeabi_d2uiz+0x38>)
 80004c2:	0004      	movs	r4, r0
 80004c4:	000d      	movs	r5, r1
 80004c6:	f7ff ffef 	bl	80004a8 <__aeabi_dcmpge>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d104      	bne.n	80004d8 <__aeabi_d2uiz+0x1c>
 80004ce:	0020      	movs	r0, r4
 80004d0:	0029      	movs	r1, r5
 80004d2:	f002 f9c3 	bl	800285c <__aeabi_d2iz>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <__aeabi_d2uiz+0x38>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0020      	movs	r0, r4
 80004de:	0029      	movs	r1, r5
 80004e0:	f001 fdfe 	bl	80020e0 <__aeabi_dsub>
 80004e4:	f002 f9ba 	bl	800285c <__aeabi_d2iz>
 80004e8:	2380      	movs	r3, #128	@ 0x80
 80004ea:	061b      	lsls	r3, r3, #24
 80004ec:	469c      	mov	ip, r3
 80004ee:	4460      	add	r0, ip
 80004f0:	e7f1      	b.n	80004d6 <__aeabi_d2uiz+0x1a>
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	41e00000 	.word	0x41e00000

080004f8 <__aeabi_d2lz>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	2200      	movs	r2, #0
 80004fc:	2300      	movs	r3, #0
 80004fe:	0004      	movs	r4, r0
 8000500:	000d      	movs	r5, r1
 8000502:	f7ff ffb3 	bl	800046c <__aeabi_dcmplt>
 8000506:	2800      	cmp	r0, #0
 8000508:	d108      	bne.n	800051c <__aeabi_d2lz+0x24>
 800050a:	0020      	movs	r0, r4
 800050c:	0029      	movs	r1, r5
 800050e:	f000 f80f 	bl	8000530 <__aeabi_d2ulz>
 8000512:	0002      	movs	r2, r0
 8000514:	000b      	movs	r3, r1
 8000516:	0010      	movs	r0, r2
 8000518:	0019      	movs	r1, r3
 800051a:	bd70      	pop	{r4, r5, r6, pc}
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	061b      	lsls	r3, r3, #24
 8000520:	18e9      	adds	r1, r5, r3
 8000522:	0020      	movs	r0, r4
 8000524:	f000 f804 	bl	8000530 <__aeabi_d2ulz>
 8000528:	2300      	movs	r3, #0
 800052a:	4242      	negs	r2, r0
 800052c:	418b      	sbcs	r3, r1
 800052e:	e7f2      	b.n	8000516 <__aeabi_d2lz+0x1e>

08000530 <__aeabi_d2ulz>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	2200      	movs	r2, #0
 8000534:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <__aeabi_d2ulz+0x34>)
 8000536:	000d      	movs	r5, r1
 8000538:	0004      	movs	r4, r0
 800053a:	f001 fb09 	bl	8001b50 <__aeabi_dmul>
 800053e:	f7ff ffbd 	bl	80004bc <__aeabi_d2uiz>
 8000542:	0006      	movs	r6, r0
 8000544:	f002 f9f4 	bl	8002930 <__aeabi_ui2d>
 8000548:	2200      	movs	r2, #0
 800054a:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <__aeabi_d2ulz+0x38>)
 800054c:	f001 fb00 	bl	8001b50 <__aeabi_dmul>
 8000550:	0002      	movs	r2, r0
 8000552:	000b      	movs	r3, r1
 8000554:	0020      	movs	r0, r4
 8000556:	0029      	movs	r1, r5
 8000558:	f001 fdc2 	bl	80020e0 <__aeabi_dsub>
 800055c:	f7ff ffae 	bl	80004bc <__aeabi_d2uiz>
 8000560:	0031      	movs	r1, r6
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	3df00000 	.word	0x3df00000
 8000568:	41f00000 	.word	0x41f00000

0800056c <__aeabi_l2d>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	0006      	movs	r6, r0
 8000570:	0008      	movs	r0, r1
 8000572:	f002 f9af 	bl	80028d4 <__aeabi_i2d>
 8000576:	2200      	movs	r2, #0
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <__aeabi_l2d+0x28>)
 800057a:	f001 fae9 	bl	8001b50 <__aeabi_dmul>
 800057e:	000d      	movs	r5, r1
 8000580:	0004      	movs	r4, r0
 8000582:	0030      	movs	r0, r6
 8000584:	f002 f9d4 	bl	8002930 <__aeabi_ui2d>
 8000588:	002b      	movs	r3, r5
 800058a:	0022      	movs	r2, r4
 800058c:	f000 fb38 	bl	8000c00 <__aeabi_dadd>
 8000590:	bd70      	pop	{r4, r5, r6, pc}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_fadd>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	46ce      	mov	lr, r9
 800059c:	4647      	mov	r7, r8
 800059e:	0243      	lsls	r3, r0, #9
 80005a0:	0a5a      	lsrs	r2, r3, #9
 80005a2:	024e      	lsls	r6, r1, #9
 80005a4:	0045      	lsls	r5, r0, #1
 80005a6:	0fc4      	lsrs	r4, r0, #31
 80005a8:	0048      	lsls	r0, r1, #1
 80005aa:	4691      	mov	r9, r2
 80005ac:	0e2d      	lsrs	r5, r5, #24
 80005ae:	0a72      	lsrs	r2, r6, #9
 80005b0:	0e00      	lsrs	r0, r0, #24
 80005b2:	4694      	mov	ip, r2
 80005b4:	b580      	push	{r7, lr}
 80005b6:	099b      	lsrs	r3, r3, #6
 80005b8:	0fc9      	lsrs	r1, r1, #31
 80005ba:	09b6      	lsrs	r6, r6, #6
 80005bc:	1a2a      	subs	r2, r5, r0
 80005be:	428c      	cmp	r4, r1
 80005c0:	d021      	beq.n	8000606 <__aeabi_fadd+0x6e>
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	dd0d      	ble.n	80005e2 <__aeabi_fadd+0x4a>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d12d      	bne.n	8000626 <__aeabi_fadd+0x8e>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_fadd+0x38>
 80005ce:	e08d      	b.n	80006ec <__aeabi_fadd+0x154>
 80005d0:	1e51      	subs	r1, r2, #1
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x40>
 80005d6:	e11d      	b.n	8000814 <__aeabi_fadd+0x27c>
 80005d8:	2aff      	cmp	r2, #255	@ 0xff
 80005da:	d100      	bne.n	80005de <__aeabi_fadd+0x46>
 80005dc:	e0ab      	b.n	8000736 <__aeabi_fadd+0x19e>
 80005de:	000a      	movs	r2, r1
 80005e0:	e027      	b.n	8000632 <__aeabi_fadd+0x9a>
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	d04d      	beq.n	8000682 <__aeabi_fadd+0xea>
 80005e6:	1b42      	subs	r2, r0, r5
 80005e8:	2d00      	cmp	r5, #0
 80005ea:	d000      	beq.n	80005ee <__aeabi_fadd+0x56>
 80005ec:	e0cc      	b.n	8000788 <__aeabi_fadd+0x1f0>
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d100      	bne.n	80005f4 <__aeabi_fadd+0x5c>
 80005f2:	e079      	b.n	80006e8 <__aeabi_fadd+0x150>
 80005f4:	1e54      	subs	r4, r2, #1
 80005f6:	2a01      	cmp	r2, #1
 80005f8:	d100      	bne.n	80005fc <__aeabi_fadd+0x64>
 80005fa:	e128      	b.n	800084e <__aeabi_fadd+0x2b6>
 80005fc:	2aff      	cmp	r2, #255	@ 0xff
 80005fe:	d100      	bne.n	8000602 <__aeabi_fadd+0x6a>
 8000600:	e097      	b.n	8000732 <__aeabi_fadd+0x19a>
 8000602:	0022      	movs	r2, r4
 8000604:	e0c5      	b.n	8000792 <__aeabi_fadd+0x1fa>
 8000606:	2a00      	cmp	r2, #0
 8000608:	dc00      	bgt.n	800060c <__aeabi_fadd+0x74>
 800060a:	e096      	b.n	800073a <__aeabi_fadd+0x1a2>
 800060c:	2800      	cmp	r0, #0
 800060e:	d04f      	beq.n	80006b0 <__aeabi_fadd+0x118>
 8000610:	2dff      	cmp	r5, #255	@ 0xff
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x7e>
 8000614:	e08f      	b.n	8000736 <__aeabi_fadd+0x19e>
 8000616:	2180      	movs	r1, #128	@ 0x80
 8000618:	04c9      	lsls	r1, r1, #19
 800061a:	430e      	orrs	r6, r1
 800061c:	2a1b      	cmp	r2, #27
 800061e:	dd51      	ble.n	80006c4 <__aeabi_fadd+0x12c>
 8000620:	002a      	movs	r2, r5
 8000622:	3301      	adds	r3, #1
 8000624:	e018      	b.n	8000658 <__aeabi_fadd+0xc0>
 8000626:	2dff      	cmp	r5, #255	@ 0xff
 8000628:	d100      	bne.n	800062c <__aeabi_fadd+0x94>
 800062a:	e084      	b.n	8000736 <__aeabi_fadd+0x19e>
 800062c:	2180      	movs	r1, #128	@ 0x80
 800062e:	04c9      	lsls	r1, r1, #19
 8000630:	430e      	orrs	r6, r1
 8000632:	2101      	movs	r1, #1
 8000634:	2a1b      	cmp	r2, #27
 8000636:	dc08      	bgt.n	800064a <__aeabi_fadd+0xb2>
 8000638:	0031      	movs	r1, r6
 800063a:	2020      	movs	r0, #32
 800063c:	40d1      	lsrs	r1, r2
 800063e:	1a82      	subs	r2, r0, r2
 8000640:	4096      	lsls	r6, r2
 8000642:	0032      	movs	r2, r6
 8000644:	1e50      	subs	r0, r2, #1
 8000646:	4182      	sbcs	r2, r0
 8000648:	4311      	orrs	r1, r2
 800064a:	1a5b      	subs	r3, r3, r1
 800064c:	015a      	lsls	r2, r3, #5
 800064e:	d459      	bmi.n	8000704 <__aeabi_fadd+0x16c>
 8000650:	2107      	movs	r1, #7
 8000652:	002a      	movs	r2, r5
 8000654:	4019      	ands	r1, r3
 8000656:	d049      	beq.n	80006ec <__aeabi_fadd+0x154>
 8000658:	210f      	movs	r1, #15
 800065a:	4019      	ands	r1, r3
 800065c:	2904      	cmp	r1, #4
 800065e:	d000      	beq.n	8000662 <__aeabi_fadd+0xca>
 8000660:	3304      	adds	r3, #4
 8000662:	0159      	lsls	r1, r3, #5
 8000664:	d542      	bpl.n	80006ec <__aeabi_fadd+0x154>
 8000666:	1c50      	adds	r0, r2, #1
 8000668:	2afe      	cmp	r2, #254	@ 0xfe
 800066a:	d03a      	beq.n	80006e2 <__aeabi_fadd+0x14a>
 800066c:	019b      	lsls	r3, r3, #6
 800066e:	b2c0      	uxtb	r0, r0
 8000670:	0a5b      	lsrs	r3, r3, #9
 8000672:	05c0      	lsls	r0, r0, #23
 8000674:	4318      	orrs	r0, r3
 8000676:	07e4      	lsls	r4, r4, #31
 8000678:	4320      	orrs	r0, r4
 800067a:	bcc0      	pop	{r6, r7}
 800067c:	46b9      	mov	r9, r7
 800067e:	46b0      	mov	r8, r6
 8000680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000682:	20fe      	movs	r0, #254	@ 0xfe
 8000684:	4680      	mov	r8, r0
 8000686:	1c6f      	adds	r7, r5, #1
 8000688:	0038      	movs	r0, r7
 800068a:	4647      	mov	r7, r8
 800068c:	4207      	tst	r7, r0
 800068e:	d000      	beq.n	8000692 <__aeabi_fadd+0xfa>
 8000690:	e08e      	b.n	80007b0 <__aeabi_fadd+0x218>
 8000692:	2d00      	cmp	r5, #0
 8000694:	d000      	beq.n	8000698 <__aeabi_fadd+0x100>
 8000696:	e0b4      	b.n	8000802 <__aeabi_fadd+0x26a>
 8000698:	2b00      	cmp	r3, #0
 800069a:	d100      	bne.n	800069e <__aeabi_fadd+0x106>
 800069c:	e0db      	b.n	8000856 <__aeabi_fadd+0x2be>
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d06c      	beq.n	800077c <__aeabi_fadd+0x1e4>
 80006a2:	1b98      	subs	r0, r3, r6
 80006a4:	0145      	lsls	r5, r0, #5
 80006a6:	d400      	bmi.n	80006aa <__aeabi_fadd+0x112>
 80006a8:	e0f7      	b.n	800089a <__aeabi_fadd+0x302>
 80006aa:	000c      	movs	r4, r1
 80006ac:	1af3      	subs	r3, r6, r3
 80006ae:	e03d      	b.n	800072c <__aeabi_fadd+0x194>
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d01b      	beq.n	80006ec <__aeabi_fadd+0x154>
 80006b4:	1e51      	subs	r1, r2, #1
 80006b6:	2a01      	cmp	r2, #1
 80006b8:	d100      	bne.n	80006bc <__aeabi_fadd+0x124>
 80006ba:	e082      	b.n	80007c2 <__aeabi_fadd+0x22a>
 80006bc:	2aff      	cmp	r2, #255	@ 0xff
 80006be:	d03a      	beq.n	8000736 <__aeabi_fadd+0x19e>
 80006c0:	000a      	movs	r2, r1
 80006c2:	e7ab      	b.n	800061c <__aeabi_fadd+0x84>
 80006c4:	0031      	movs	r1, r6
 80006c6:	2020      	movs	r0, #32
 80006c8:	40d1      	lsrs	r1, r2
 80006ca:	1a82      	subs	r2, r0, r2
 80006cc:	4096      	lsls	r6, r2
 80006ce:	0032      	movs	r2, r6
 80006d0:	1e50      	subs	r0, r2, #1
 80006d2:	4182      	sbcs	r2, r0
 80006d4:	430a      	orrs	r2, r1
 80006d6:	189b      	adds	r3, r3, r2
 80006d8:	015a      	lsls	r2, r3, #5
 80006da:	d5b9      	bpl.n	8000650 <__aeabi_fadd+0xb8>
 80006dc:	1c6a      	adds	r2, r5, #1
 80006de:	2dfe      	cmp	r5, #254	@ 0xfe
 80006e0:	d175      	bne.n	80007ce <__aeabi_fadd+0x236>
 80006e2:	20ff      	movs	r0, #255	@ 0xff
 80006e4:	2300      	movs	r3, #0
 80006e6:	e7c4      	b.n	8000672 <__aeabi_fadd+0xda>
 80006e8:	000c      	movs	r4, r1
 80006ea:	0033      	movs	r3, r6
 80006ec:	08db      	lsrs	r3, r3, #3
 80006ee:	2aff      	cmp	r2, #255	@ 0xff
 80006f0:	d146      	bne.n	8000780 <__aeabi_fadd+0x1e8>
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f5      	beq.n	80006e2 <__aeabi_fadd+0x14a>
 80006f6:	2280      	movs	r2, #128	@ 0x80
 80006f8:	03d2      	lsls	r2, r2, #15
 80006fa:	4313      	orrs	r3, r2
 80006fc:	025b      	lsls	r3, r3, #9
 80006fe:	20ff      	movs	r0, #255	@ 0xff
 8000700:	0a5b      	lsrs	r3, r3, #9
 8000702:	e7b6      	b.n	8000672 <__aeabi_fadd+0xda>
 8000704:	019f      	lsls	r7, r3, #6
 8000706:	09bf      	lsrs	r7, r7, #6
 8000708:	0038      	movs	r0, r7
 800070a:	f002 f9b9 	bl	8002a80 <__clzsi2>
 800070e:	3805      	subs	r0, #5
 8000710:	4087      	lsls	r7, r0
 8000712:	4285      	cmp	r5, r0
 8000714:	dc24      	bgt.n	8000760 <__aeabi_fadd+0x1c8>
 8000716:	003b      	movs	r3, r7
 8000718:	2120      	movs	r1, #32
 800071a:	1b42      	subs	r2, r0, r5
 800071c:	3201      	adds	r2, #1
 800071e:	40d3      	lsrs	r3, r2
 8000720:	1a8a      	subs	r2, r1, r2
 8000722:	4097      	lsls	r7, r2
 8000724:	1e7a      	subs	r2, r7, #1
 8000726:	4197      	sbcs	r7, r2
 8000728:	2200      	movs	r2, #0
 800072a:	433b      	orrs	r3, r7
 800072c:	0759      	lsls	r1, r3, #29
 800072e:	d193      	bne.n	8000658 <__aeabi_fadd+0xc0>
 8000730:	e797      	b.n	8000662 <__aeabi_fadd+0xca>
 8000732:	000c      	movs	r4, r1
 8000734:	0033      	movs	r3, r6
 8000736:	08db      	lsrs	r3, r3, #3
 8000738:	e7db      	b.n	80006f2 <__aeabi_fadd+0x15a>
 800073a:	2a00      	cmp	r2, #0
 800073c:	d014      	beq.n	8000768 <__aeabi_fadd+0x1d0>
 800073e:	1b42      	subs	r2, r0, r5
 8000740:	2d00      	cmp	r5, #0
 8000742:	d14b      	bne.n	80007dc <__aeabi_fadd+0x244>
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0d0      	beq.n	80006ea <__aeabi_fadd+0x152>
 8000748:	1e51      	subs	r1, r2, #1
 800074a:	2a01      	cmp	r2, #1
 800074c:	d100      	bne.n	8000750 <__aeabi_fadd+0x1b8>
 800074e:	e09e      	b.n	800088e <__aeabi_fadd+0x2f6>
 8000750:	2aff      	cmp	r2, #255	@ 0xff
 8000752:	d0ef      	beq.n	8000734 <__aeabi_fadd+0x19c>
 8000754:	000a      	movs	r2, r1
 8000756:	2a1b      	cmp	r2, #27
 8000758:	dd5f      	ble.n	800081a <__aeabi_fadd+0x282>
 800075a:	0002      	movs	r2, r0
 800075c:	1c73      	adds	r3, r6, #1
 800075e:	e77b      	b.n	8000658 <__aeabi_fadd+0xc0>
 8000760:	4b50      	ldr	r3, [pc, #320]	@ (80008a4 <__aeabi_fadd+0x30c>)
 8000762:	1a2a      	subs	r2, r5, r0
 8000764:	403b      	ands	r3, r7
 8000766:	e7e1      	b.n	800072c <__aeabi_fadd+0x194>
 8000768:	21fe      	movs	r1, #254	@ 0xfe
 800076a:	1c6a      	adds	r2, r5, #1
 800076c:	4211      	tst	r1, r2
 800076e:	d13b      	bne.n	80007e8 <__aeabi_fadd+0x250>
 8000770:	2d00      	cmp	r5, #0
 8000772:	d15d      	bne.n	8000830 <__aeabi_fadd+0x298>
 8000774:	2b00      	cmp	r3, #0
 8000776:	d07f      	beq.n	8000878 <__aeabi_fadd+0x2e0>
 8000778:	2e00      	cmp	r6, #0
 800077a:	d17f      	bne.n	800087c <__aeabi_fadd+0x2e4>
 800077c:	2200      	movs	r2, #0
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	025b      	lsls	r3, r3, #9
 8000782:	0a5b      	lsrs	r3, r3, #9
 8000784:	b2d0      	uxtb	r0, r2
 8000786:	e774      	b.n	8000672 <__aeabi_fadd+0xda>
 8000788:	28ff      	cmp	r0, #255	@ 0xff
 800078a:	d0d2      	beq.n	8000732 <__aeabi_fadd+0x19a>
 800078c:	2480      	movs	r4, #128	@ 0x80
 800078e:	04e4      	lsls	r4, r4, #19
 8000790:	4323      	orrs	r3, r4
 8000792:	2401      	movs	r4, #1
 8000794:	2a1b      	cmp	r2, #27
 8000796:	dc07      	bgt.n	80007a8 <__aeabi_fadd+0x210>
 8000798:	001c      	movs	r4, r3
 800079a:	2520      	movs	r5, #32
 800079c:	40d4      	lsrs	r4, r2
 800079e:	1aaa      	subs	r2, r5, r2
 80007a0:	4093      	lsls	r3, r2
 80007a2:	1e5a      	subs	r2, r3, #1
 80007a4:	4193      	sbcs	r3, r2
 80007a6:	431c      	orrs	r4, r3
 80007a8:	1b33      	subs	r3, r6, r4
 80007aa:	0005      	movs	r5, r0
 80007ac:	000c      	movs	r4, r1
 80007ae:	e74d      	b.n	800064c <__aeabi_fadd+0xb4>
 80007b0:	1b9f      	subs	r7, r3, r6
 80007b2:	017a      	lsls	r2, r7, #5
 80007b4:	d422      	bmi.n	80007fc <__aeabi_fadd+0x264>
 80007b6:	2f00      	cmp	r7, #0
 80007b8:	d1a6      	bne.n	8000708 <__aeabi_fadd+0x170>
 80007ba:	2400      	movs	r4, #0
 80007bc:	2000      	movs	r0, #0
 80007be:	2300      	movs	r3, #0
 80007c0:	e757      	b.n	8000672 <__aeabi_fadd+0xda>
 80007c2:	199b      	adds	r3, r3, r6
 80007c4:	2501      	movs	r5, #1
 80007c6:	3201      	adds	r2, #1
 80007c8:	0159      	lsls	r1, r3, #5
 80007ca:	d400      	bmi.n	80007ce <__aeabi_fadd+0x236>
 80007cc:	e740      	b.n	8000650 <__aeabi_fadd+0xb8>
 80007ce:	2101      	movs	r1, #1
 80007d0:	4835      	ldr	r0, [pc, #212]	@ (80008a8 <__aeabi_fadd+0x310>)
 80007d2:	4019      	ands	r1, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	4003      	ands	r3, r0
 80007d8:	430b      	orrs	r3, r1
 80007da:	e7a7      	b.n	800072c <__aeabi_fadd+0x194>
 80007dc:	28ff      	cmp	r0, #255	@ 0xff
 80007de:	d0a9      	beq.n	8000734 <__aeabi_fadd+0x19c>
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	04c9      	lsls	r1, r1, #19
 80007e4:	430b      	orrs	r3, r1
 80007e6:	e7b6      	b.n	8000756 <__aeabi_fadd+0x1be>
 80007e8:	2aff      	cmp	r2, #255	@ 0xff
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x256>
 80007ec:	e779      	b.n	80006e2 <__aeabi_fadd+0x14a>
 80007ee:	199b      	adds	r3, r3, r6
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	0759      	lsls	r1, r3, #29
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fadd+0x260>
 80007f6:	e72f      	b.n	8000658 <__aeabi_fadd+0xc0>
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	e7c1      	b.n	8000780 <__aeabi_fadd+0x1e8>
 80007fc:	000c      	movs	r4, r1
 80007fe:	1af7      	subs	r7, r6, r3
 8000800:	e782      	b.n	8000708 <__aeabi_fadd+0x170>
 8000802:	2b00      	cmp	r3, #0
 8000804:	d12c      	bne.n	8000860 <__aeabi_fadd+0x2c8>
 8000806:	2e00      	cmp	r6, #0
 8000808:	d193      	bne.n	8000732 <__aeabi_fadd+0x19a>
 800080a:	2380      	movs	r3, #128	@ 0x80
 800080c:	2400      	movs	r4, #0
 800080e:	20ff      	movs	r0, #255	@ 0xff
 8000810:	03db      	lsls	r3, r3, #15
 8000812:	e72e      	b.n	8000672 <__aeabi_fadd+0xda>
 8000814:	2501      	movs	r5, #1
 8000816:	1b9b      	subs	r3, r3, r6
 8000818:	e718      	b.n	800064c <__aeabi_fadd+0xb4>
 800081a:	0019      	movs	r1, r3
 800081c:	2520      	movs	r5, #32
 800081e:	40d1      	lsrs	r1, r2
 8000820:	1aaa      	subs	r2, r5, r2
 8000822:	4093      	lsls	r3, r2
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	4193      	sbcs	r3, r2
 8000828:	430b      	orrs	r3, r1
 800082a:	0005      	movs	r5, r0
 800082c:	199b      	adds	r3, r3, r6
 800082e:	e753      	b.n	80006d8 <__aeabi_fadd+0x140>
 8000830:	2b00      	cmp	r3, #0
 8000832:	d100      	bne.n	8000836 <__aeabi_fadd+0x29e>
 8000834:	e77e      	b.n	8000734 <__aeabi_fadd+0x19c>
 8000836:	2e00      	cmp	r6, #0
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x2a4>
 800083a:	e77c      	b.n	8000736 <__aeabi_fadd+0x19e>
 800083c:	2280      	movs	r2, #128	@ 0x80
 800083e:	03d2      	lsls	r2, r2, #15
 8000840:	4591      	cmp	r9, r2
 8000842:	d302      	bcc.n	800084a <__aeabi_fadd+0x2b2>
 8000844:	4594      	cmp	ip, r2
 8000846:	d200      	bcs.n	800084a <__aeabi_fadd+0x2b2>
 8000848:	0033      	movs	r3, r6
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	e753      	b.n	80006f6 <__aeabi_fadd+0x15e>
 800084e:	000c      	movs	r4, r1
 8000850:	1af3      	subs	r3, r6, r3
 8000852:	3501      	adds	r5, #1
 8000854:	e6fa      	b.n	800064c <__aeabi_fadd+0xb4>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d0af      	beq.n	80007ba <__aeabi_fadd+0x222>
 800085a:	000c      	movs	r4, r1
 800085c:	0033      	movs	r3, r6
 800085e:	e78d      	b.n	800077c <__aeabi_fadd+0x1e4>
 8000860:	2e00      	cmp	r6, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_fadd+0x2ce>
 8000864:	e767      	b.n	8000736 <__aeabi_fadd+0x19e>
 8000866:	2280      	movs	r2, #128	@ 0x80
 8000868:	03d2      	lsls	r2, r2, #15
 800086a:	4591      	cmp	r9, r2
 800086c:	d3ed      	bcc.n	800084a <__aeabi_fadd+0x2b2>
 800086e:	4594      	cmp	ip, r2
 8000870:	d2eb      	bcs.n	800084a <__aeabi_fadd+0x2b2>
 8000872:	000c      	movs	r4, r1
 8000874:	0033      	movs	r3, r6
 8000876:	e7e8      	b.n	800084a <__aeabi_fadd+0x2b2>
 8000878:	0033      	movs	r3, r6
 800087a:	e77f      	b.n	800077c <__aeabi_fadd+0x1e4>
 800087c:	199b      	adds	r3, r3, r6
 800087e:	2200      	movs	r2, #0
 8000880:	0159      	lsls	r1, r3, #5
 8000882:	d5b9      	bpl.n	80007f8 <__aeabi_fadd+0x260>
 8000884:	4a07      	ldr	r2, [pc, #28]	@ (80008a4 <__aeabi_fadd+0x30c>)
 8000886:	4013      	ands	r3, r2
 8000888:	08db      	lsrs	r3, r3, #3
 800088a:	2201      	movs	r2, #1
 800088c:	e778      	b.n	8000780 <__aeabi_fadd+0x1e8>
 800088e:	199b      	adds	r3, r3, r6
 8000890:	3201      	adds	r2, #1
 8000892:	3501      	adds	r5, #1
 8000894:	0159      	lsls	r1, r3, #5
 8000896:	d49a      	bmi.n	80007ce <__aeabi_fadd+0x236>
 8000898:	e6da      	b.n	8000650 <__aeabi_fadd+0xb8>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d08d      	beq.n	80007ba <__aeabi_fadd+0x222>
 800089e:	08db      	lsrs	r3, r3, #3
 80008a0:	e76e      	b.n	8000780 <__aeabi_fadd+0x1e8>
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	fbffffff 	.word	0xfbffffff
 80008a8:	7dffffff 	.word	0x7dffffff

080008ac <__aeabi_fmul>:
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ae:	464f      	mov	r7, r9
 80008b0:	4646      	mov	r6, r8
 80008b2:	46d6      	mov	lr, sl
 80008b4:	0243      	lsls	r3, r0, #9
 80008b6:	0a5b      	lsrs	r3, r3, #9
 80008b8:	0045      	lsls	r5, r0, #1
 80008ba:	b5c0      	push	{r6, r7, lr}
 80008bc:	4699      	mov	r9, r3
 80008be:	1c0f      	adds	r7, r1, #0
 80008c0:	0e2d      	lsrs	r5, r5, #24
 80008c2:	0fc6      	lsrs	r6, r0, #31
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d100      	bne.n	80008ca <__aeabi_fmul+0x1e>
 80008c8:	e088      	b.n	80009dc <__aeabi_fmul+0x130>
 80008ca:	2dff      	cmp	r5, #255	@ 0xff
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fmul+0x24>
 80008ce:	e08d      	b.n	80009ec <__aeabi_fmul+0x140>
 80008d0:	2280      	movs	r2, #128	@ 0x80
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	04d2      	lsls	r2, r2, #19
 80008d6:	431a      	orrs	r2, r3
 80008d8:	2300      	movs	r3, #0
 80008da:	4691      	mov	r9, r2
 80008dc:	4698      	mov	r8, r3
 80008de:	469a      	mov	sl, r3
 80008e0:	3d7f      	subs	r5, #127	@ 0x7f
 80008e2:	027c      	lsls	r4, r7, #9
 80008e4:	007b      	lsls	r3, r7, #1
 80008e6:	0a64      	lsrs	r4, r4, #9
 80008e8:	0e1b      	lsrs	r3, r3, #24
 80008ea:	0fff      	lsrs	r7, r7, #31
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d068      	beq.n	80009c2 <__aeabi_fmul+0x116>
 80008f0:	2bff      	cmp	r3, #255	@ 0xff
 80008f2:	d021      	beq.n	8000938 <__aeabi_fmul+0x8c>
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	00e4      	lsls	r4, r4, #3
 80008f8:	04d2      	lsls	r2, r2, #19
 80008fa:	4314      	orrs	r4, r2
 80008fc:	4642      	mov	r2, r8
 80008fe:	3b7f      	subs	r3, #127	@ 0x7f
 8000900:	195b      	adds	r3, r3, r5
 8000902:	2100      	movs	r1, #0
 8000904:	1c5d      	adds	r5, r3, #1
 8000906:	2a0a      	cmp	r2, #10
 8000908:	dc2e      	bgt.n	8000968 <__aeabi_fmul+0xbc>
 800090a:	407e      	eors	r6, r7
 800090c:	4642      	mov	r2, r8
 800090e:	2a02      	cmp	r2, #2
 8000910:	dc23      	bgt.n	800095a <__aeabi_fmul+0xae>
 8000912:	3a01      	subs	r2, #1
 8000914:	2a01      	cmp	r2, #1
 8000916:	d900      	bls.n	800091a <__aeabi_fmul+0x6e>
 8000918:	e0bd      	b.n	8000a96 <__aeabi_fmul+0x1ea>
 800091a:	2902      	cmp	r1, #2
 800091c:	d06e      	beq.n	80009fc <__aeabi_fmul+0x150>
 800091e:	2901      	cmp	r1, #1
 8000920:	d12c      	bne.n	800097c <__aeabi_fmul+0xd0>
 8000922:	2000      	movs	r0, #0
 8000924:	2200      	movs	r2, #0
 8000926:	05c0      	lsls	r0, r0, #23
 8000928:	07f6      	lsls	r6, r6, #31
 800092a:	4310      	orrs	r0, r2
 800092c:	4330      	orrs	r0, r6
 800092e:	bce0      	pop	{r5, r6, r7}
 8000930:	46ba      	mov	sl, r7
 8000932:	46b1      	mov	r9, r6
 8000934:	46a8      	mov	r8, r5
 8000936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000938:	002b      	movs	r3, r5
 800093a:	33ff      	adds	r3, #255	@ 0xff
 800093c:	2c00      	cmp	r4, #0
 800093e:	d065      	beq.n	8000a0c <__aeabi_fmul+0x160>
 8000940:	2203      	movs	r2, #3
 8000942:	4641      	mov	r1, r8
 8000944:	4311      	orrs	r1, r2
 8000946:	0032      	movs	r2, r6
 8000948:	3501      	adds	r5, #1
 800094a:	4688      	mov	r8, r1
 800094c:	407a      	eors	r2, r7
 800094e:	35ff      	adds	r5, #255	@ 0xff
 8000950:	290a      	cmp	r1, #10
 8000952:	dd00      	ble.n	8000956 <__aeabi_fmul+0xaa>
 8000954:	e0d8      	b.n	8000b08 <__aeabi_fmul+0x25c>
 8000956:	0016      	movs	r6, r2
 8000958:	2103      	movs	r1, #3
 800095a:	4640      	mov	r0, r8
 800095c:	2201      	movs	r2, #1
 800095e:	4082      	lsls	r2, r0
 8000960:	20a6      	movs	r0, #166	@ 0xa6
 8000962:	00c0      	lsls	r0, r0, #3
 8000964:	4202      	tst	r2, r0
 8000966:	d020      	beq.n	80009aa <__aeabi_fmul+0xfe>
 8000968:	4653      	mov	r3, sl
 800096a:	2b02      	cmp	r3, #2
 800096c:	d046      	beq.n	80009fc <__aeabi_fmul+0x150>
 800096e:	2b03      	cmp	r3, #3
 8000970:	d100      	bne.n	8000974 <__aeabi_fmul+0xc8>
 8000972:	e0bb      	b.n	8000aec <__aeabi_fmul+0x240>
 8000974:	4651      	mov	r1, sl
 8000976:	464c      	mov	r4, r9
 8000978:	2901      	cmp	r1, #1
 800097a:	d0d2      	beq.n	8000922 <__aeabi_fmul+0x76>
 800097c:	002b      	movs	r3, r5
 800097e:	337f      	adds	r3, #127	@ 0x7f
 8000980:	2b00      	cmp	r3, #0
 8000982:	dd70      	ble.n	8000a66 <__aeabi_fmul+0x1ba>
 8000984:	0762      	lsls	r2, r4, #29
 8000986:	d004      	beq.n	8000992 <__aeabi_fmul+0xe6>
 8000988:	220f      	movs	r2, #15
 800098a:	4022      	ands	r2, r4
 800098c:	2a04      	cmp	r2, #4
 800098e:	d000      	beq.n	8000992 <__aeabi_fmul+0xe6>
 8000990:	3404      	adds	r4, #4
 8000992:	0122      	lsls	r2, r4, #4
 8000994:	d503      	bpl.n	800099e <__aeabi_fmul+0xf2>
 8000996:	4b63      	ldr	r3, [pc, #396]	@ (8000b24 <__aeabi_fmul+0x278>)
 8000998:	401c      	ands	r4, r3
 800099a:	002b      	movs	r3, r5
 800099c:	3380      	adds	r3, #128	@ 0x80
 800099e:	2bfe      	cmp	r3, #254	@ 0xfe
 80009a0:	dc2c      	bgt.n	80009fc <__aeabi_fmul+0x150>
 80009a2:	01a2      	lsls	r2, r4, #6
 80009a4:	0a52      	lsrs	r2, r2, #9
 80009a6:	b2d8      	uxtb	r0, r3
 80009a8:	e7bd      	b.n	8000926 <__aeabi_fmul+0x7a>
 80009aa:	2090      	movs	r0, #144	@ 0x90
 80009ac:	0080      	lsls	r0, r0, #2
 80009ae:	4202      	tst	r2, r0
 80009b0:	d127      	bne.n	8000a02 <__aeabi_fmul+0x156>
 80009b2:	38b9      	subs	r0, #185	@ 0xb9
 80009b4:	38ff      	subs	r0, #255	@ 0xff
 80009b6:	4210      	tst	r0, r2
 80009b8:	d06d      	beq.n	8000a96 <__aeabi_fmul+0x1ea>
 80009ba:	003e      	movs	r6, r7
 80009bc:	46a1      	mov	r9, r4
 80009be:	468a      	mov	sl, r1
 80009c0:	e7d2      	b.n	8000968 <__aeabi_fmul+0xbc>
 80009c2:	2c00      	cmp	r4, #0
 80009c4:	d141      	bne.n	8000a4a <__aeabi_fmul+0x19e>
 80009c6:	2301      	movs	r3, #1
 80009c8:	4642      	mov	r2, r8
 80009ca:	431a      	orrs	r2, r3
 80009cc:	4690      	mov	r8, r2
 80009ce:	002b      	movs	r3, r5
 80009d0:	4642      	mov	r2, r8
 80009d2:	2101      	movs	r1, #1
 80009d4:	1c5d      	adds	r5, r3, #1
 80009d6:	2a0a      	cmp	r2, #10
 80009d8:	dd97      	ble.n	800090a <__aeabi_fmul+0x5e>
 80009da:	e7c5      	b.n	8000968 <__aeabi_fmul+0xbc>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d126      	bne.n	8000a2e <__aeabi_fmul+0x182>
 80009e0:	2304      	movs	r3, #4
 80009e2:	4698      	mov	r8, r3
 80009e4:	3b03      	subs	r3, #3
 80009e6:	2500      	movs	r5, #0
 80009e8:	469a      	mov	sl, r3
 80009ea:	e77a      	b.n	80008e2 <__aeabi_fmul+0x36>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d118      	bne.n	8000a22 <__aeabi_fmul+0x176>
 80009f0:	2308      	movs	r3, #8
 80009f2:	4698      	mov	r8, r3
 80009f4:	3b06      	subs	r3, #6
 80009f6:	25ff      	movs	r5, #255	@ 0xff
 80009f8:	469a      	mov	sl, r3
 80009fa:	e772      	b.n	80008e2 <__aeabi_fmul+0x36>
 80009fc:	20ff      	movs	r0, #255	@ 0xff
 80009fe:	2200      	movs	r2, #0
 8000a00:	e791      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	2600      	movs	r6, #0
 8000a06:	20ff      	movs	r0, #255	@ 0xff
 8000a08:	03d2      	lsls	r2, r2, #15
 8000a0a:	e78c      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000a0c:	4641      	mov	r1, r8
 8000a0e:	2202      	movs	r2, #2
 8000a10:	3501      	adds	r5, #1
 8000a12:	4311      	orrs	r1, r2
 8000a14:	4688      	mov	r8, r1
 8000a16:	35ff      	adds	r5, #255	@ 0xff
 8000a18:	290a      	cmp	r1, #10
 8000a1a:	dca5      	bgt.n	8000968 <__aeabi_fmul+0xbc>
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	407e      	eors	r6, r7
 8000a20:	e774      	b.n	800090c <__aeabi_fmul+0x60>
 8000a22:	230c      	movs	r3, #12
 8000a24:	4698      	mov	r8, r3
 8000a26:	3b09      	subs	r3, #9
 8000a28:	25ff      	movs	r5, #255	@ 0xff
 8000a2a:	469a      	mov	sl, r3
 8000a2c:	e759      	b.n	80008e2 <__aeabi_fmul+0x36>
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f002 f826 	bl	8002a80 <__clzsi2>
 8000a34:	464a      	mov	r2, r9
 8000a36:	1f43      	subs	r3, r0, #5
 8000a38:	2576      	movs	r5, #118	@ 0x76
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	426d      	negs	r5, r5
 8000a40:	4691      	mov	r9, r2
 8000a42:	4698      	mov	r8, r3
 8000a44:	469a      	mov	sl, r3
 8000a46:	1a2d      	subs	r5, r5, r0
 8000a48:	e74b      	b.n	80008e2 <__aeabi_fmul+0x36>
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	f002 f818 	bl	8002a80 <__clzsi2>
 8000a50:	4642      	mov	r2, r8
 8000a52:	1f43      	subs	r3, r0, #5
 8000a54:	409c      	lsls	r4, r3
 8000a56:	1a2b      	subs	r3, r5, r0
 8000a58:	3b76      	subs	r3, #118	@ 0x76
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	1c5d      	adds	r5, r3, #1
 8000a5e:	2a0a      	cmp	r2, #10
 8000a60:	dc00      	bgt.n	8000a64 <__aeabi_fmul+0x1b8>
 8000a62:	e752      	b.n	800090a <__aeabi_fmul+0x5e>
 8000a64:	e780      	b.n	8000968 <__aeabi_fmul+0xbc>
 8000a66:	2201      	movs	r2, #1
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	2b1b      	cmp	r3, #27
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_fmul+0x1c4>
 8000a6e:	e758      	b.n	8000922 <__aeabi_fmul+0x76>
 8000a70:	359e      	adds	r5, #158	@ 0x9e
 8000a72:	0022      	movs	r2, r4
 8000a74:	40ac      	lsls	r4, r5
 8000a76:	40da      	lsrs	r2, r3
 8000a78:	1e63      	subs	r3, r4, #1
 8000a7a:	419c      	sbcs	r4, r3
 8000a7c:	4322      	orrs	r2, r4
 8000a7e:	0753      	lsls	r3, r2, #29
 8000a80:	d004      	beq.n	8000a8c <__aeabi_fmul+0x1e0>
 8000a82:	230f      	movs	r3, #15
 8000a84:	4013      	ands	r3, r2
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d000      	beq.n	8000a8c <__aeabi_fmul+0x1e0>
 8000a8a:	3204      	adds	r2, #4
 8000a8c:	0153      	lsls	r3, r2, #5
 8000a8e:	d537      	bpl.n	8000b00 <__aeabi_fmul+0x254>
 8000a90:	2001      	movs	r0, #1
 8000a92:	2200      	movs	r2, #0
 8000a94:	e747      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	464a      	mov	r2, r9
 8000a9a:	0424      	lsls	r4, r4, #16
 8000a9c:	0c24      	lsrs	r4, r4, #16
 8000a9e:	0027      	movs	r7, r4
 8000aa0:	0c10      	lsrs	r0, r2, #16
 8000aa2:	0412      	lsls	r2, r2, #16
 8000aa4:	0c12      	lsrs	r2, r2, #16
 8000aa6:	4344      	muls	r4, r0
 8000aa8:	4357      	muls	r7, r2
 8000aaa:	4348      	muls	r0, r1
 8000aac:	4351      	muls	r1, r2
 8000aae:	0c3a      	lsrs	r2, r7, #16
 8000ab0:	1909      	adds	r1, r1, r4
 8000ab2:	1852      	adds	r2, r2, r1
 8000ab4:	4294      	cmp	r4, r2
 8000ab6:	d903      	bls.n	8000ac0 <__aeabi_fmul+0x214>
 8000ab8:	2180      	movs	r1, #128	@ 0x80
 8000aba:	0249      	lsls	r1, r1, #9
 8000abc:	468c      	mov	ip, r1
 8000abe:	4460      	add	r0, ip
 8000ac0:	043f      	lsls	r7, r7, #16
 8000ac2:	0411      	lsls	r1, r2, #16
 8000ac4:	0c3f      	lsrs	r7, r7, #16
 8000ac6:	19c9      	adds	r1, r1, r7
 8000ac8:	018c      	lsls	r4, r1, #6
 8000aca:	1e67      	subs	r7, r4, #1
 8000acc:	41bc      	sbcs	r4, r7
 8000ace:	0c12      	lsrs	r2, r2, #16
 8000ad0:	0e89      	lsrs	r1, r1, #26
 8000ad2:	1812      	adds	r2, r2, r0
 8000ad4:	430c      	orrs	r4, r1
 8000ad6:	0192      	lsls	r2, r2, #6
 8000ad8:	4314      	orrs	r4, r2
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	d50e      	bpl.n	8000afc <__aeabi_fmul+0x250>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	0862      	lsrs	r2, r4, #1
 8000ae2:	401c      	ands	r4, r3
 8000ae4:	4314      	orrs	r4, r2
 8000ae6:	e749      	b.n	800097c <__aeabi_fmul+0xd0>
 8000ae8:	003e      	movs	r6, r7
 8000aea:	46a1      	mov	r9, r4
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	464b      	mov	r3, r9
 8000af0:	03d2      	lsls	r2, r2, #15
 8000af2:	431a      	orrs	r2, r3
 8000af4:	0252      	lsls	r2, r2, #9
 8000af6:	20ff      	movs	r0, #255	@ 0xff
 8000af8:	0a52      	lsrs	r2, r2, #9
 8000afa:	e714      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000afc:	001d      	movs	r5, r3
 8000afe:	e73d      	b.n	800097c <__aeabi_fmul+0xd0>
 8000b00:	0192      	lsls	r2, r2, #6
 8000b02:	2000      	movs	r0, #0
 8000b04:	0a52      	lsrs	r2, r2, #9
 8000b06:	e70e      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000b08:	290f      	cmp	r1, #15
 8000b0a:	d1ed      	bne.n	8000ae8 <__aeabi_fmul+0x23c>
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	464b      	mov	r3, r9
 8000b10:	03d2      	lsls	r2, r2, #15
 8000b12:	4213      	tst	r3, r2
 8000b14:	d0ea      	beq.n	8000aec <__aeabi_fmul+0x240>
 8000b16:	4214      	tst	r4, r2
 8000b18:	d1e8      	bne.n	8000aec <__aeabi_fmul+0x240>
 8000b1a:	003e      	movs	r6, r7
 8000b1c:	20ff      	movs	r0, #255	@ 0xff
 8000b1e:	4322      	orrs	r2, r4
 8000b20:	e701      	b.n	8000926 <__aeabi_fmul+0x7a>
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	f7ffffff 	.word	0xf7ffffff

08000b28 <__aeabi_f2iz>:
 8000b28:	0241      	lsls	r1, r0, #9
 8000b2a:	0042      	lsls	r2, r0, #1
 8000b2c:	0fc3      	lsrs	r3, r0, #31
 8000b2e:	0a49      	lsrs	r1, r1, #9
 8000b30:	2000      	movs	r0, #0
 8000b32:	0e12      	lsrs	r2, r2, #24
 8000b34:	2a7e      	cmp	r2, #126	@ 0x7e
 8000b36:	dd03      	ble.n	8000b40 <__aeabi_f2iz+0x18>
 8000b38:	2a9d      	cmp	r2, #157	@ 0x9d
 8000b3a:	dd02      	ble.n	8000b42 <__aeabi_f2iz+0x1a>
 8000b3c:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <__aeabi_f2iz+0x3c>)
 8000b3e:	1898      	adds	r0, r3, r2
 8000b40:	4770      	bx	lr
 8000b42:	2080      	movs	r0, #128	@ 0x80
 8000b44:	0400      	lsls	r0, r0, #16
 8000b46:	4301      	orrs	r1, r0
 8000b48:	2a95      	cmp	r2, #149	@ 0x95
 8000b4a:	dc07      	bgt.n	8000b5c <__aeabi_f2iz+0x34>
 8000b4c:	2096      	movs	r0, #150	@ 0x96
 8000b4e:	1a82      	subs	r2, r0, r2
 8000b50:	40d1      	lsrs	r1, r2
 8000b52:	4248      	negs	r0, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f3      	bne.n	8000b40 <__aeabi_f2iz+0x18>
 8000b58:	0008      	movs	r0, r1
 8000b5a:	e7f1      	b.n	8000b40 <__aeabi_f2iz+0x18>
 8000b5c:	3a96      	subs	r2, #150	@ 0x96
 8000b5e:	4091      	lsls	r1, r2
 8000b60:	e7f7      	b.n	8000b52 <__aeabi_f2iz+0x2a>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	7fffffff 	.word	0x7fffffff

08000b68 <__aeabi_i2f>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d013      	beq.n	8000b96 <__aeabi_i2f+0x2e>
 8000b6e:	17c3      	asrs	r3, r0, #31
 8000b70:	18c5      	adds	r5, r0, r3
 8000b72:	405d      	eors	r5, r3
 8000b74:	0fc4      	lsrs	r4, r0, #31
 8000b76:	0028      	movs	r0, r5
 8000b78:	f001 ff82 	bl	8002a80 <__clzsi2>
 8000b7c:	239e      	movs	r3, #158	@ 0x9e
 8000b7e:	0001      	movs	r1, r0
 8000b80:	1a1b      	subs	r3, r3, r0
 8000b82:	2b96      	cmp	r3, #150	@ 0x96
 8000b84:	dc0f      	bgt.n	8000ba6 <__aeabi_i2f+0x3e>
 8000b86:	2808      	cmp	r0, #8
 8000b88:	d034      	beq.n	8000bf4 <__aeabi_i2f+0x8c>
 8000b8a:	3908      	subs	r1, #8
 8000b8c:	408d      	lsls	r5, r1
 8000b8e:	026d      	lsls	r5, r5, #9
 8000b90:	0a6d      	lsrs	r5, r5, #9
 8000b92:	b2d8      	uxtb	r0, r3
 8000b94:	e002      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000b96:	2400      	movs	r4, #0
 8000b98:	2000      	movs	r0, #0
 8000b9a:	2500      	movs	r5, #0
 8000b9c:	05c0      	lsls	r0, r0, #23
 8000b9e:	4328      	orrs	r0, r5
 8000ba0:	07e4      	lsls	r4, r4, #31
 8000ba2:	4320      	orrs	r0, r4
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	2b99      	cmp	r3, #153	@ 0x99
 8000ba8:	dc16      	bgt.n	8000bd8 <__aeabi_i2f+0x70>
 8000baa:	1f42      	subs	r2, r0, #5
 8000bac:	2805      	cmp	r0, #5
 8000bae:	d000      	beq.n	8000bb2 <__aeabi_i2f+0x4a>
 8000bb0:	4095      	lsls	r5, r2
 8000bb2:	002a      	movs	r2, r5
 8000bb4:	4811      	ldr	r0, [pc, #68]	@ (8000bfc <__aeabi_i2f+0x94>)
 8000bb6:	4002      	ands	r2, r0
 8000bb8:	076e      	lsls	r6, r5, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_i2f+0x68>
 8000bbc:	260f      	movs	r6, #15
 8000bbe:	4035      	ands	r5, r6
 8000bc0:	2d04      	cmp	r5, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_i2f+0x68>
 8000bc4:	3204      	adds	r2, #4
 8000bc6:	0155      	lsls	r5, r2, #5
 8000bc8:	d502      	bpl.n	8000bd0 <__aeabi_i2f+0x68>
 8000bca:	239f      	movs	r3, #159	@ 0x9f
 8000bcc:	4002      	ands	r2, r0
 8000bce:	1a5b      	subs	r3, r3, r1
 8000bd0:	0192      	lsls	r2, r2, #6
 8000bd2:	0a55      	lsrs	r5, r2, #9
 8000bd4:	b2d8      	uxtb	r0, r3
 8000bd6:	e7e1      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000bd8:	2205      	movs	r2, #5
 8000bda:	1a12      	subs	r2, r2, r0
 8000bdc:	0028      	movs	r0, r5
 8000bde:	40d0      	lsrs	r0, r2
 8000be0:	0002      	movs	r2, r0
 8000be2:	0008      	movs	r0, r1
 8000be4:	301b      	adds	r0, #27
 8000be6:	4085      	lsls	r5, r0
 8000be8:	0028      	movs	r0, r5
 8000bea:	1e45      	subs	r5, r0, #1
 8000bec:	41a8      	sbcs	r0, r5
 8000bee:	4302      	orrs	r2, r0
 8000bf0:	0015      	movs	r5, r2
 8000bf2:	e7de      	b.n	8000bb2 <__aeabi_i2f+0x4a>
 8000bf4:	026d      	lsls	r5, r5, #9
 8000bf6:	2096      	movs	r0, #150	@ 0x96
 8000bf8:	0a6d      	lsrs	r5, r5, #9
 8000bfa:	e7cf      	b.n	8000b9c <__aeabi_i2f+0x34>
 8000bfc:	fbffffff 	.word	0xfbffffff

08000c00 <__aeabi_dadd>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	464e      	mov	r6, r9
 8000c06:	4645      	mov	r5, r8
 8000c08:	46de      	mov	lr, fp
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	9000      	str	r0, [sp, #0]
 8000c10:	9101      	str	r1, [sp, #4]
 8000c12:	030c      	lsls	r4, r1, #12
 8000c14:	004f      	lsls	r7, r1, #1
 8000c16:	0fce      	lsrs	r6, r1, #31
 8000c18:	0a61      	lsrs	r1, r4, #9
 8000c1a:	9c00      	ldr	r4, [sp, #0]
 8000c1c:	031d      	lsls	r5, r3, #12
 8000c1e:	0f64      	lsrs	r4, r4, #29
 8000c20:	430c      	orrs	r4, r1
 8000c22:	9900      	ldr	r1, [sp, #0]
 8000c24:	9200      	str	r2, [sp, #0]
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	00c8      	lsls	r0, r1, #3
 8000c2a:	0059      	lsls	r1, r3, #1
 8000c2c:	0d4b      	lsrs	r3, r1, #21
 8000c2e:	4699      	mov	r9, r3
 8000c30:	9a00      	ldr	r2, [sp, #0]
 8000c32:	9b01      	ldr	r3, [sp, #4]
 8000c34:	0a6d      	lsrs	r5, r5, #9
 8000c36:	0fd9      	lsrs	r1, r3, #31
 8000c38:	0f53      	lsrs	r3, r2, #29
 8000c3a:	432b      	orrs	r3, r5
 8000c3c:	469a      	mov	sl, r3
 8000c3e:	9b00      	ldr	r3, [sp, #0]
 8000c40:	0d7f      	lsrs	r7, r7, #21
 8000c42:	00da      	lsls	r2, r3, #3
 8000c44:	4694      	mov	ip, r2
 8000c46:	464a      	mov	r2, r9
 8000c48:	46b0      	mov	r8, r6
 8000c4a:	1aba      	subs	r2, r7, r2
 8000c4c:	428e      	cmp	r6, r1
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x52>
 8000c50:	e0b0      	b.n	8000db4 <__aeabi_dadd+0x1b4>
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	dc00      	bgt.n	8000c58 <__aeabi_dadd+0x58>
 8000c56:	e078      	b.n	8000d4a <__aeabi_dadd+0x14a>
 8000c58:	4649      	mov	r1, r9
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_dadd+0x60>
 8000c5e:	e0e9      	b.n	8000e34 <__aeabi_dadd+0x234>
 8000c60:	49c9      	ldr	r1, [pc, #804]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000c62:	428f      	cmp	r7, r1
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dadd+0x68>
 8000c66:	e195      	b.n	8000f94 <__aeabi_dadd+0x394>
 8000c68:	2501      	movs	r5, #1
 8000c6a:	2a38      	cmp	r2, #56	@ 0x38
 8000c6c:	dc16      	bgt.n	8000c9c <__aeabi_dadd+0x9c>
 8000c6e:	2180      	movs	r1, #128	@ 0x80
 8000c70:	4653      	mov	r3, sl
 8000c72:	0409      	lsls	r1, r1, #16
 8000c74:	430b      	orrs	r3, r1
 8000c76:	469a      	mov	sl, r3
 8000c78:	2a1f      	cmp	r2, #31
 8000c7a:	dd00      	ble.n	8000c7e <__aeabi_dadd+0x7e>
 8000c7c:	e1e7      	b.n	800104e <__aeabi_dadd+0x44e>
 8000c7e:	2120      	movs	r1, #32
 8000c80:	4655      	mov	r5, sl
 8000c82:	1a8b      	subs	r3, r1, r2
 8000c84:	4661      	mov	r1, ip
 8000c86:	409d      	lsls	r5, r3
 8000c88:	40d1      	lsrs	r1, r2
 8000c8a:	430d      	orrs	r5, r1
 8000c8c:	4661      	mov	r1, ip
 8000c8e:	4099      	lsls	r1, r3
 8000c90:	1e4b      	subs	r3, r1, #1
 8000c92:	4199      	sbcs	r1, r3
 8000c94:	4653      	mov	r3, sl
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	430d      	orrs	r5, r1
 8000c9a:	1ae4      	subs	r4, r4, r3
 8000c9c:	1b45      	subs	r5, r0, r5
 8000c9e:	42a8      	cmp	r0, r5
 8000ca0:	4180      	sbcs	r0, r0
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	1a24      	subs	r4, r4, r0
 8000ca6:	0223      	lsls	r3, r4, #8
 8000ca8:	d400      	bmi.n	8000cac <__aeabi_dadd+0xac>
 8000caa:	e10f      	b.n	8000ecc <__aeabi_dadd+0x2cc>
 8000cac:	0264      	lsls	r4, r4, #9
 8000cae:	0a64      	lsrs	r4, r4, #9
 8000cb0:	2c00      	cmp	r4, #0
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0xb6>
 8000cb4:	e139      	b.n	8000f2a <__aeabi_dadd+0x32a>
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	f001 fee2 	bl	8002a80 <__clzsi2>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	3b08      	subs	r3, #8
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	0028      	movs	r0, r5
 8000cc4:	1aca      	subs	r2, r1, r3
 8000cc6:	40d0      	lsrs	r0, r2
 8000cc8:	409c      	lsls	r4, r3
 8000cca:	0002      	movs	r2, r0
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	4322      	orrs	r2, r4
 8000cd0:	429f      	cmp	r7, r3
 8000cd2:	dd00      	ble.n	8000cd6 <__aeabi_dadd+0xd6>
 8000cd4:	e173      	b.n	8000fbe <__aeabi_dadd+0x3be>
 8000cd6:	1bd8      	subs	r0, r3, r7
 8000cd8:	3001      	adds	r0, #1
 8000cda:	1a09      	subs	r1, r1, r0
 8000cdc:	002c      	movs	r4, r5
 8000cde:	408d      	lsls	r5, r1
 8000ce0:	40c4      	lsrs	r4, r0
 8000ce2:	1e6b      	subs	r3, r5, #1
 8000ce4:	419d      	sbcs	r5, r3
 8000ce6:	0013      	movs	r3, r2
 8000ce8:	40c2      	lsrs	r2, r0
 8000cea:	408b      	lsls	r3, r1
 8000cec:	4325      	orrs	r5, r4
 8000cee:	2700      	movs	r7, #0
 8000cf0:	0014      	movs	r4, r2
 8000cf2:	431d      	orrs	r5, r3
 8000cf4:	076b      	lsls	r3, r5, #29
 8000cf6:	d009      	beq.n	8000d0c <__aeabi_dadd+0x10c>
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	402b      	ands	r3, r5
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d005      	beq.n	8000d0c <__aeabi_dadd+0x10c>
 8000d00:	1d2b      	adds	r3, r5, #4
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	41ad      	sbcs	r5, r5
 8000d06:	426d      	negs	r5, r5
 8000d08:	1964      	adds	r4, r4, r5
 8000d0a:	001d      	movs	r5, r3
 8000d0c:	0223      	lsls	r3, r4, #8
 8000d0e:	d400      	bmi.n	8000d12 <__aeabi_dadd+0x112>
 8000d10:	e12d      	b.n	8000f6e <__aeabi_dadd+0x36e>
 8000d12:	4a9d      	ldr	r2, [pc, #628]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000d14:	3701      	adds	r7, #1
 8000d16:	4297      	cmp	r7, r2
 8000d18:	d100      	bne.n	8000d1c <__aeabi_dadd+0x11c>
 8000d1a:	e0d3      	b.n	8000ec4 <__aeabi_dadd+0x2c4>
 8000d1c:	4646      	mov	r6, r8
 8000d1e:	499b      	ldr	r1, [pc, #620]	@ (8000f8c <__aeabi_dadd+0x38c>)
 8000d20:	08ed      	lsrs	r5, r5, #3
 8000d22:	4021      	ands	r1, r4
 8000d24:	074a      	lsls	r2, r1, #29
 8000d26:	432a      	orrs	r2, r5
 8000d28:	057c      	lsls	r4, r7, #21
 8000d2a:	024d      	lsls	r5, r1, #9
 8000d2c:	0b2d      	lsrs	r5, r5, #12
 8000d2e:	0d64      	lsrs	r4, r4, #21
 8000d30:	0524      	lsls	r4, r4, #20
 8000d32:	432c      	orrs	r4, r5
 8000d34:	07f6      	lsls	r6, r6, #31
 8000d36:	4334      	orrs	r4, r6
 8000d38:	0010      	movs	r0, r2
 8000d3a:	0021      	movs	r1, r4
 8000d3c:	b003      	add	sp, #12
 8000d3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000d40:	46bb      	mov	fp, r7
 8000d42:	46b2      	mov	sl, r6
 8000d44:	46a9      	mov	r9, r5
 8000d46:	46a0      	mov	r8, r4
 8000d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_dadd+0x150>
 8000d4e:	e084      	b.n	8000e5a <__aeabi_dadd+0x25a>
 8000d50:	464a      	mov	r2, r9
 8000d52:	1bd2      	subs	r2, r2, r7
 8000d54:	2f00      	cmp	r7, #0
 8000d56:	d000      	beq.n	8000d5a <__aeabi_dadd+0x15a>
 8000d58:	e16d      	b.n	8001036 <__aeabi_dadd+0x436>
 8000d5a:	0025      	movs	r5, r4
 8000d5c:	4305      	orrs	r5, r0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_dadd+0x162>
 8000d60:	e127      	b.n	8000fb2 <__aeabi_dadd+0x3b2>
 8000d62:	1e56      	subs	r6, r2, #1
 8000d64:	2a01      	cmp	r2, #1
 8000d66:	d100      	bne.n	8000d6a <__aeabi_dadd+0x16a>
 8000d68:	e23b      	b.n	80011e2 <__aeabi_dadd+0x5e2>
 8000d6a:	4d87      	ldr	r5, [pc, #540]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000d6c:	42aa      	cmp	r2, r5
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dadd+0x172>
 8000d70:	e26a      	b.n	8001248 <__aeabi_dadd+0x648>
 8000d72:	2501      	movs	r5, #1
 8000d74:	2e38      	cmp	r6, #56	@ 0x38
 8000d76:	dc12      	bgt.n	8000d9e <__aeabi_dadd+0x19e>
 8000d78:	0032      	movs	r2, r6
 8000d7a:	2a1f      	cmp	r2, #31
 8000d7c:	dd00      	ble.n	8000d80 <__aeabi_dadd+0x180>
 8000d7e:	e1f8      	b.n	8001172 <__aeabi_dadd+0x572>
 8000d80:	2620      	movs	r6, #32
 8000d82:	0025      	movs	r5, r4
 8000d84:	1ab6      	subs	r6, r6, r2
 8000d86:	0007      	movs	r7, r0
 8000d88:	4653      	mov	r3, sl
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	40d4      	lsrs	r4, r2
 8000d8e:	40b5      	lsls	r5, r6
 8000d90:	40d7      	lsrs	r7, r2
 8000d92:	1e46      	subs	r6, r0, #1
 8000d94:	41b0      	sbcs	r0, r6
 8000d96:	1b1b      	subs	r3, r3, r4
 8000d98:	469a      	mov	sl, r3
 8000d9a:	433d      	orrs	r5, r7
 8000d9c:	4305      	orrs	r5, r0
 8000d9e:	4662      	mov	r2, ip
 8000da0:	1b55      	subs	r5, r2, r5
 8000da2:	45ac      	cmp	ip, r5
 8000da4:	4192      	sbcs	r2, r2
 8000da6:	4653      	mov	r3, sl
 8000da8:	4252      	negs	r2, r2
 8000daa:	000e      	movs	r6, r1
 8000dac:	464f      	mov	r7, r9
 8000dae:	4688      	mov	r8, r1
 8000db0:	1a9c      	subs	r4, r3, r2
 8000db2:	e778      	b.n	8000ca6 <__aeabi_dadd+0xa6>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	dc00      	bgt.n	8000dba <__aeabi_dadd+0x1ba>
 8000db8:	e08e      	b.n	8000ed8 <__aeabi_dadd+0x2d8>
 8000dba:	4649      	mov	r1, r9
 8000dbc:	2900      	cmp	r1, #0
 8000dbe:	d175      	bne.n	8000eac <__aeabi_dadd+0x2ac>
 8000dc0:	4661      	mov	r1, ip
 8000dc2:	4653      	mov	r3, sl
 8000dc4:	4319      	orrs	r1, r3
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dadd+0x1ca>
 8000dc8:	e0f6      	b.n	8000fb8 <__aeabi_dadd+0x3b8>
 8000dca:	1e51      	subs	r1, r2, #1
 8000dcc:	2a01      	cmp	r2, #1
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_dadd+0x1d2>
 8000dd0:	e191      	b.n	80010f6 <__aeabi_dadd+0x4f6>
 8000dd2:	4d6d      	ldr	r5, [pc, #436]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000dd4:	42aa      	cmp	r2, r5
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dadd+0x1da>
 8000dd8:	e0dc      	b.n	8000f94 <__aeabi_dadd+0x394>
 8000dda:	2501      	movs	r5, #1
 8000ddc:	2938      	cmp	r1, #56	@ 0x38
 8000dde:	dc14      	bgt.n	8000e0a <__aeabi_dadd+0x20a>
 8000de0:	000a      	movs	r2, r1
 8000de2:	2a1f      	cmp	r2, #31
 8000de4:	dd00      	ble.n	8000de8 <__aeabi_dadd+0x1e8>
 8000de6:	e1a2      	b.n	800112e <__aeabi_dadd+0x52e>
 8000de8:	2120      	movs	r1, #32
 8000dea:	4653      	mov	r3, sl
 8000dec:	1a89      	subs	r1, r1, r2
 8000dee:	408b      	lsls	r3, r1
 8000df0:	001d      	movs	r5, r3
 8000df2:	4663      	mov	r3, ip
 8000df4:	40d3      	lsrs	r3, r2
 8000df6:	431d      	orrs	r5, r3
 8000df8:	4663      	mov	r3, ip
 8000dfa:	408b      	lsls	r3, r1
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	1e4b      	subs	r3, r1, #1
 8000e00:	4199      	sbcs	r1, r3
 8000e02:	4653      	mov	r3, sl
 8000e04:	40d3      	lsrs	r3, r2
 8000e06:	430d      	orrs	r5, r1
 8000e08:	18e4      	adds	r4, r4, r3
 8000e0a:	182d      	adds	r5, r5, r0
 8000e0c:	4285      	cmp	r5, r0
 8000e0e:	4180      	sbcs	r0, r0
 8000e10:	4240      	negs	r0, r0
 8000e12:	1824      	adds	r4, r4, r0
 8000e14:	0223      	lsls	r3, r4, #8
 8000e16:	d559      	bpl.n	8000ecc <__aeabi_dadd+0x2cc>
 8000e18:	4b5b      	ldr	r3, [pc, #364]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000e1a:	3701      	adds	r7, #1
 8000e1c:	429f      	cmp	r7, r3
 8000e1e:	d051      	beq.n	8000ec4 <__aeabi_dadd+0x2c4>
 8000e20:	2101      	movs	r1, #1
 8000e22:	4b5a      	ldr	r3, [pc, #360]	@ (8000f8c <__aeabi_dadd+0x38c>)
 8000e24:	086a      	lsrs	r2, r5, #1
 8000e26:	401c      	ands	r4, r3
 8000e28:	4029      	ands	r1, r5
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	07e5      	lsls	r5, r4, #31
 8000e2e:	4315      	orrs	r5, r2
 8000e30:	0864      	lsrs	r4, r4, #1
 8000e32:	e75f      	b.n	8000cf4 <__aeabi_dadd+0xf4>
 8000e34:	4661      	mov	r1, ip
 8000e36:	4653      	mov	r3, sl
 8000e38:	4319      	orrs	r1, r3
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_dadd+0x23e>
 8000e3c:	e0bc      	b.n	8000fb8 <__aeabi_dadd+0x3b8>
 8000e3e:	1e51      	subs	r1, r2, #1
 8000e40:	2a01      	cmp	r2, #1
 8000e42:	d100      	bne.n	8000e46 <__aeabi_dadd+0x246>
 8000e44:	e164      	b.n	8001110 <__aeabi_dadd+0x510>
 8000e46:	4d50      	ldr	r5, [pc, #320]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000e48:	42aa      	cmp	r2, r5
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_dadd+0x24e>
 8000e4c:	e16a      	b.n	8001124 <__aeabi_dadd+0x524>
 8000e4e:	2501      	movs	r5, #1
 8000e50:	2938      	cmp	r1, #56	@ 0x38
 8000e52:	dd00      	ble.n	8000e56 <__aeabi_dadd+0x256>
 8000e54:	e722      	b.n	8000c9c <__aeabi_dadd+0x9c>
 8000e56:	000a      	movs	r2, r1
 8000e58:	e70e      	b.n	8000c78 <__aeabi_dadd+0x78>
 8000e5a:	4a4d      	ldr	r2, [pc, #308]	@ (8000f90 <__aeabi_dadd+0x390>)
 8000e5c:	1c7d      	adds	r5, r7, #1
 8000e5e:	4215      	tst	r5, r2
 8000e60:	d000      	beq.n	8000e64 <__aeabi_dadd+0x264>
 8000e62:	e0d0      	b.n	8001006 <__aeabi_dadd+0x406>
 8000e64:	0025      	movs	r5, r4
 8000e66:	4662      	mov	r2, ip
 8000e68:	4653      	mov	r3, sl
 8000e6a:	4305      	orrs	r5, r0
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	2f00      	cmp	r7, #0
 8000e70:	d000      	beq.n	8000e74 <__aeabi_dadd+0x274>
 8000e72:	e137      	b.n	80010e4 <__aeabi_dadd+0x4e4>
 8000e74:	2d00      	cmp	r5, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dadd+0x27a>
 8000e78:	e1a8      	b.n	80011cc <__aeabi_dadd+0x5cc>
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_dadd+0x280>
 8000e7e:	e16a      	b.n	8001156 <__aeabi_dadd+0x556>
 8000e80:	4663      	mov	r3, ip
 8000e82:	1ac5      	subs	r5, r0, r3
 8000e84:	4653      	mov	r3, sl
 8000e86:	1ae2      	subs	r2, r4, r3
 8000e88:	42a8      	cmp	r0, r5
 8000e8a:	419b      	sbcs	r3, r3
 8000e8c:	425b      	negs	r3, r3
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	021a      	lsls	r2, r3, #8
 8000e92:	d400      	bmi.n	8000e96 <__aeabi_dadd+0x296>
 8000e94:	e203      	b.n	800129e <__aeabi_dadd+0x69e>
 8000e96:	4663      	mov	r3, ip
 8000e98:	1a1d      	subs	r5, r3, r0
 8000e9a:	45ac      	cmp	ip, r5
 8000e9c:	4192      	sbcs	r2, r2
 8000e9e:	4653      	mov	r3, sl
 8000ea0:	4252      	negs	r2, r2
 8000ea2:	1b1c      	subs	r4, r3, r4
 8000ea4:	000e      	movs	r6, r1
 8000ea6:	4688      	mov	r8, r1
 8000ea8:	1aa4      	subs	r4, r4, r2
 8000eaa:	e723      	b.n	8000cf4 <__aeabi_dadd+0xf4>
 8000eac:	4936      	ldr	r1, [pc, #216]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000eae:	428f      	cmp	r7, r1
 8000eb0:	d070      	beq.n	8000f94 <__aeabi_dadd+0x394>
 8000eb2:	2501      	movs	r5, #1
 8000eb4:	2a38      	cmp	r2, #56	@ 0x38
 8000eb6:	dca8      	bgt.n	8000e0a <__aeabi_dadd+0x20a>
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	4653      	mov	r3, sl
 8000ebc:	0409      	lsls	r1, r1, #16
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	469a      	mov	sl, r3
 8000ec2:	e78e      	b.n	8000de2 <__aeabi_dadd+0x1e2>
 8000ec4:	003c      	movs	r4, r7
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	2200      	movs	r2, #0
 8000eca:	e731      	b.n	8000d30 <__aeabi_dadd+0x130>
 8000ecc:	2307      	movs	r3, #7
 8000ece:	402b      	ands	r3, r5
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_dadd+0x2d6>
 8000ed4:	e710      	b.n	8000cf8 <__aeabi_dadd+0xf8>
 8000ed6:	e093      	b.n	8001000 <__aeabi_dadd+0x400>
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d074      	beq.n	8000fc6 <__aeabi_dadd+0x3c6>
 8000edc:	464a      	mov	r2, r9
 8000ede:	1bd2      	subs	r2, r2, r7
 8000ee0:	2f00      	cmp	r7, #0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_dadd+0x2e6>
 8000ee4:	e0c7      	b.n	8001076 <__aeabi_dadd+0x476>
 8000ee6:	4928      	ldr	r1, [pc, #160]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	d100      	bne.n	8000eee <__aeabi_dadd+0x2ee>
 8000eec:	e185      	b.n	80011fa <__aeabi_dadd+0x5fa>
 8000eee:	2501      	movs	r5, #1
 8000ef0:	2a38      	cmp	r2, #56	@ 0x38
 8000ef2:	dc12      	bgt.n	8000f1a <__aeabi_dadd+0x31a>
 8000ef4:	2180      	movs	r1, #128	@ 0x80
 8000ef6:	0409      	lsls	r1, r1, #16
 8000ef8:	430c      	orrs	r4, r1
 8000efa:	2a1f      	cmp	r2, #31
 8000efc:	dd00      	ble.n	8000f00 <__aeabi_dadd+0x300>
 8000efe:	e1ab      	b.n	8001258 <__aeabi_dadd+0x658>
 8000f00:	2120      	movs	r1, #32
 8000f02:	0025      	movs	r5, r4
 8000f04:	1a89      	subs	r1, r1, r2
 8000f06:	0007      	movs	r7, r0
 8000f08:	4088      	lsls	r0, r1
 8000f0a:	408d      	lsls	r5, r1
 8000f0c:	40d7      	lsrs	r7, r2
 8000f0e:	1e41      	subs	r1, r0, #1
 8000f10:	4188      	sbcs	r0, r1
 8000f12:	40d4      	lsrs	r4, r2
 8000f14:	433d      	orrs	r5, r7
 8000f16:	4305      	orrs	r5, r0
 8000f18:	44a2      	add	sl, r4
 8000f1a:	4465      	add	r5, ip
 8000f1c:	4565      	cmp	r5, ip
 8000f1e:	4192      	sbcs	r2, r2
 8000f20:	4252      	negs	r2, r2
 8000f22:	4452      	add	r2, sl
 8000f24:	0014      	movs	r4, r2
 8000f26:	464f      	mov	r7, r9
 8000f28:	e774      	b.n	8000e14 <__aeabi_dadd+0x214>
 8000f2a:	0028      	movs	r0, r5
 8000f2c:	f001 fda8 	bl	8002a80 <__clzsi2>
 8000f30:	0003      	movs	r3, r0
 8000f32:	3318      	adds	r3, #24
 8000f34:	2b1f      	cmp	r3, #31
 8000f36:	dc00      	bgt.n	8000f3a <__aeabi_dadd+0x33a>
 8000f38:	e6c2      	b.n	8000cc0 <__aeabi_dadd+0xc0>
 8000f3a:	002a      	movs	r2, r5
 8000f3c:	3808      	subs	r0, #8
 8000f3e:	4082      	lsls	r2, r0
 8000f40:	429f      	cmp	r7, r3
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_dadd+0x346>
 8000f44:	e0a9      	b.n	800109a <__aeabi_dadd+0x49a>
 8000f46:	1bdb      	subs	r3, r3, r7
 8000f48:	1c58      	adds	r0, r3, #1
 8000f4a:	281f      	cmp	r0, #31
 8000f4c:	dc00      	bgt.n	8000f50 <__aeabi_dadd+0x350>
 8000f4e:	e1ac      	b.n	80012aa <__aeabi_dadd+0x6aa>
 8000f50:	0015      	movs	r5, r2
 8000f52:	3b1f      	subs	r3, #31
 8000f54:	40dd      	lsrs	r5, r3
 8000f56:	2820      	cmp	r0, #32
 8000f58:	d005      	beq.n	8000f66 <__aeabi_dadd+0x366>
 8000f5a:	2340      	movs	r3, #64	@ 0x40
 8000f5c:	1a1b      	subs	r3, r3, r0
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	1e53      	subs	r3, r2, #1
 8000f62:	419a      	sbcs	r2, r3
 8000f64:	4315      	orrs	r5, r2
 8000f66:	2307      	movs	r3, #7
 8000f68:	2700      	movs	r7, #0
 8000f6a:	402b      	ands	r3, r5
 8000f6c:	e7b0      	b.n	8000ed0 <__aeabi_dadd+0x2d0>
 8000f6e:	08ed      	lsrs	r5, r5, #3
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <__aeabi_dadd+0x388>)
 8000f72:	0762      	lsls	r2, r4, #29
 8000f74:	432a      	orrs	r2, r5
 8000f76:	08e4      	lsrs	r4, r4, #3
 8000f78:	429f      	cmp	r7, r3
 8000f7a:	d00f      	beq.n	8000f9c <__aeabi_dadd+0x39c>
 8000f7c:	0324      	lsls	r4, r4, #12
 8000f7e:	0b25      	lsrs	r5, r4, #12
 8000f80:	057c      	lsls	r4, r7, #21
 8000f82:	0d64      	lsrs	r4, r4, #21
 8000f84:	e6d4      	b.n	8000d30 <__aeabi_dadd+0x130>
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	000007ff 	.word	0x000007ff
 8000f8c:	ff7fffff 	.word	0xff7fffff
 8000f90:	000007fe 	.word	0x000007fe
 8000f94:	08c0      	lsrs	r0, r0, #3
 8000f96:	0762      	lsls	r2, r4, #29
 8000f98:	4302      	orrs	r2, r0
 8000f9a:	08e4      	lsrs	r4, r4, #3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	4323      	orrs	r3, r4
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dadd+0x3a4>
 8000fa2:	e186      	b.n	80012b2 <__aeabi_dadd+0x6b2>
 8000fa4:	2580      	movs	r5, #128	@ 0x80
 8000fa6:	032d      	lsls	r5, r5, #12
 8000fa8:	4325      	orrs	r5, r4
 8000faa:	032d      	lsls	r5, r5, #12
 8000fac:	4cc3      	ldr	r4, [pc, #780]	@ (80012bc <__aeabi_dadd+0x6bc>)
 8000fae:	0b2d      	lsrs	r5, r5, #12
 8000fb0:	e6be      	b.n	8000d30 <__aeabi_dadd+0x130>
 8000fb2:	4660      	mov	r0, ip
 8000fb4:	4654      	mov	r4, sl
 8000fb6:	000e      	movs	r6, r1
 8000fb8:	0017      	movs	r7, r2
 8000fba:	08c5      	lsrs	r5, r0, #3
 8000fbc:	e7d8      	b.n	8000f70 <__aeabi_dadd+0x370>
 8000fbe:	4cc0      	ldr	r4, [pc, #768]	@ (80012c0 <__aeabi_dadd+0x6c0>)
 8000fc0:	1aff      	subs	r7, r7, r3
 8000fc2:	4014      	ands	r4, r2
 8000fc4:	e696      	b.n	8000cf4 <__aeabi_dadd+0xf4>
 8000fc6:	4abf      	ldr	r2, [pc, #764]	@ (80012c4 <__aeabi_dadd+0x6c4>)
 8000fc8:	1c79      	adds	r1, r7, #1
 8000fca:	4211      	tst	r1, r2
 8000fcc:	d16b      	bne.n	80010a6 <__aeabi_dadd+0x4a6>
 8000fce:	0022      	movs	r2, r4
 8000fd0:	4302      	orrs	r2, r0
 8000fd2:	2f00      	cmp	r7, #0
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_dadd+0x3d8>
 8000fd6:	e0db      	b.n	8001190 <__aeabi_dadd+0x590>
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	d100      	bne.n	8000fde <__aeabi_dadd+0x3de>
 8000fdc:	e12d      	b.n	800123a <__aeabi_dadd+0x63a>
 8000fde:	4662      	mov	r2, ip
 8000fe0:	4653      	mov	r3, sl
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0x3e8>
 8000fe6:	e0b6      	b.n	8001156 <__aeabi_dadd+0x556>
 8000fe8:	4663      	mov	r3, ip
 8000fea:	18c5      	adds	r5, r0, r3
 8000fec:	4285      	cmp	r5, r0
 8000fee:	4180      	sbcs	r0, r0
 8000ff0:	4454      	add	r4, sl
 8000ff2:	4240      	negs	r0, r0
 8000ff4:	1824      	adds	r4, r4, r0
 8000ff6:	0223      	lsls	r3, r4, #8
 8000ff8:	d502      	bpl.n	8001000 <__aeabi_dadd+0x400>
 8000ffa:	000f      	movs	r7, r1
 8000ffc:	4bb0      	ldr	r3, [pc, #704]	@ (80012c0 <__aeabi_dadd+0x6c0>)
 8000ffe:	401c      	ands	r4, r3
 8001000:	003a      	movs	r2, r7
 8001002:	0028      	movs	r0, r5
 8001004:	e7d8      	b.n	8000fb8 <__aeabi_dadd+0x3b8>
 8001006:	4662      	mov	r2, ip
 8001008:	1a85      	subs	r5, r0, r2
 800100a:	42a8      	cmp	r0, r5
 800100c:	4192      	sbcs	r2, r2
 800100e:	4653      	mov	r3, sl
 8001010:	4252      	negs	r2, r2
 8001012:	4691      	mov	r9, r2
 8001014:	1ae3      	subs	r3, r4, r3
 8001016:	001a      	movs	r2, r3
 8001018:	464b      	mov	r3, r9
 800101a:	1ad2      	subs	r2, r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	4691      	mov	r9, r2
 8001020:	021a      	lsls	r2, r3, #8
 8001022:	d454      	bmi.n	80010ce <__aeabi_dadd+0x4ce>
 8001024:	464a      	mov	r2, r9
 8001026:	464c      	mov	r4, r9
 8001028:	432a      	orrs	r2, r5
 800102a:	d000      	beq.n	800102e <__aeabi_dadd+0x42e>
 800102c:	e640      	b.n	8000cb0 <__aeabi_dadd+0xb0>
 800102e:	2600      	movs	r6, #0
 8001030:	2400      	movs	r4, #0
 8001032:	2500      	movs	r5, #0
 8001034:	e67c      	b.n	8000d30 <__aeabi_dadd+0x130>
 8001036:	4da1      	ldr	r5, [pc, #644]	@ (80012bc <__aeabi_dadd+0x6bc>)
 8001038:	45a9      	cmp	r9, r5
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x43e>
 800103c:	e090      	b.n	8001160 <__aeabi_dadd+0x560>
 800103e:	2501      	movs	r5, #1
 8001040:	2a38      	cmp	r2, #56	@ 0x38
 8001042:	dd00      	ble.n	8001046 <__aeabi_dadd+0x446>
 8001044:	e6ab      	b.n	8000d9e <__aeabi_dadd+0x19e>
 8001046:	2580      	movs	r5, #128	@ 0x80
 8001048:	042d      	lsls	r5, r5, #16
 800104a:	432c      	orrs	r4, r5
 800104c:	e695      	b.n	8000d7a <__aeabi_dadd+0x17a>
 800104e:	0011      	movs	r1, r2
 8001050:	4655      	mov	r5, sl
 8001052:	3920      	subs	r1, #32
 8001054:	40cd      	lsrs	r5, r1
 8001056:	46a9      	mov	r9, r5
 8001058:	2a20      	cmp	r2, #32
 800105a:	d006      	beq.n	800106a <__aeabi_dadd+0x46a>
 800105c:	2140      	movs	r1, #64	@ 0x40
 800105e:	4653      	mov	r3, sl
 8001060:	1a8a      	subs	r2, r1, r2
 8001062:	4093      	lsls	r3, r2
 8001064:	4662      	mov	r2, ip
 8001066:	431a      	orrs	r2, r3
 8001068:	4694      	mov	ip, r2
 800106a:	4665      	mov	r5, ip
 800106c:	1e6b      	subs	r3, r5, #1
 800106e:	419d      	sbcs	r5, r3
 8001070:	464b      	mov	r3, r9
 8001072:	431d      	orrs	r5, r3
 8001074:	e612      	b.n	8000c9c <__aeabi_dadd+0x9c>
 8001076:	0021      	movs	r1, r4
 8001078:	4301      	orrs	r1, r0
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x47e>
 800107c:	e0c4      	b.n	8001208 <__aeabi_dadd+0x608>
 800107e:	1e51      	subs	r1, r2, #1
 8001080:	2a01      	cmp	r2, #1
 8001082:	d100      	bne.n	8001086 <__aeabi_dadd+0x486>
 8001084:	e0fb      	b.n	800127e <__aeabi_dadd+0x67e>
 8001086:	4d8d      	ldr	r5, [pc, #564]	@ (80012bc <__aeabi_dadd+0x6bc>)
 8001088:	42aa      	cmp	r2, r5
 800108a:	d100      	bne.n	800108e <__aeabi_dadd+0x48e>
 800108c:	e0b5      	b.n	80011fa <__aeabi_dadd+0x5fa>
 800108e:	2501      	movs	r5, #1
 8001090:	2938      	cmp	r1, #56	@ 0x38
 8001092:	dd00      	ble.n	8001096 <__aeabi_dadd+0x496>
 8001094:	e741      	b.n	8000f1a <__aeabi_dadd+0x31a>
 8001096:	000a      	movs	r2, r1
 8001098:	e72f      	b.n	8000efa <__aeabi_dadd+0x2fa>
 800109a:	4c89      	ldr	r4, [pc, #548]	@ (80012c0 <__aeabi_dadd+0x6c0>)
 800109c:	1aff      	subs	r7, r7, r3
 800109e:	4014      	ands	r4, r2
 80010a0:	0762      	lsls	r2, r4, #29
 80010a2:	08e4      	lsrs	r4, r4, #3
 80010a4:	e76a      	b.n	8000f7c <__aeabi_dadd+0x37c>
 80010a6:	4a85      	ldr	r2, [pc, #532]	@ (80012bc <__aeabi_dadd+0x6bc>)
 80010a8:	4291      	cmp	r1, r2
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x4ae>
 80010ac:	e0e3      	b.n	8001276 <__aeabi_dadd+0x676>
 80010ae:	4663      	mov	r3, ip
 80010b0:	18c2      	adds	r2, r0, r3
 80010b2:	4282      	cmp	r2, r0
 80010b4:	4180      	sbcs	r0, r0
 80010b6:	0023      	movs	r3, r4
 80010b8:	4240      	negs	r0, r0
 80010ba:	4453      	add	r3, sl
 80010bc:	181b      	adds	r3, r3, r0
 80010be:	07dd      	lsls	r5, r3, #31
 80010c0:	085c      	lsrs	r4, r3, #1
 80010c2:	2307      	movs	r3, #7
 80010c4:	0852      	lsrs	r2, r2, #1
 80010c6:	4315      	orrs	r5, r2
 80010c8:	000f      	movs	r7, r1
 80010ca:	402b      	ands	r3, r5
 80010cc:	e700      	b.n	8000ed0 <__aeabi_dadd+0x2d0>
 80010ce:	4663      	mov	r3, ip
 80010d0:	1a1d      	subs	r5, r3, r0
 80010d2:	45ac      	cmp	ip, r5
 80010d4:	4192      	sbcs	r2, r2
 80010d6:	4653      	mov	r3, sl
 80010d8:	4252      	negs	r2, r2
 80010da:	1b1c      	subs	r4, r3, r4
 80010dc:	000e      	movs	r6, r1
 80010de:	4688      	mov	r8, r1
 80010e0:	1aa4      	subs	r4, r4, r2
 80010e2:	e5e5      	b.n	8000cb0 <__aeabi_dadd+0xb0>
 80010e4:	2d00      	cmp	r5, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x4ea>
 80010e8:	e091      	b.n	800120e <__aeabi_dadd+0x60e>
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d138      	bne.n	8001160 <__aeabi_dadd+0x560>
 80010ee:	2480      	movs	r4, #128	@ 0x80
 80010f0:	2600      	movs	r6, #0
 80010f2:	0324      	lsls	r4, r4, #12
 80010f4:	e756      	b.n	8000fa4 <__aeabi_dadd+0x3a4>
 80010f6:	4663      	mov	r3, ip
 80010f8:	18c5      	adds	r5, r0, r3
 80010fa:	4285      	cmp	r5, r0
 80010fc:	4180      	sbcs	r0, r0
 80010fe:	4454      	add	r4, sl
 8001100:	4240      	negs	r0, r0
 8001102:	1824      	adds	r4, r4, r0
 8001104:	2701      	movs	r7, #1
 8001106:	0223      	lsls	r3, r4, #8
 8001108:	d400      	bmi.n	800110c <__aeabi_dadd+0x50c>
 800110a:	e6df      	b.n	8000ecc <__aeabi_dadd+0x2cc>
 800110c:	2702      	movs	r7, #2
 800110e:	e687      	b.n	8000e20 <__aeabi_dadd+0x220>
 8001110:	4663      	mov	r3, ip
 8001112:	1ac5      	subs	r5, r0, r3
 8001114:	42a8      	cmp	r0, r5
 8001116:	4180      	sbcs	r0, r0
 8001118:	4653      	mov	r3, sl
 800111a:	4240      	negs	r0, r0
 800111c:	1ae4      	subs	r4, r4, r3
 800111e:	2701      	movs	r7, #1
 8001120:	1a24      	subs	r4, r4, r0
 8001122:	e5c0      	b.n	8000ca6 <__aeabi_dadd+0xa6>
 8001124:	0762      	lsls	r2, r4, #29
 8001126:	08c0      	lsrs	r0, r0, #3
 8001128:	4302      	orrs	r2, r0
 800112a:	08e4      	lsrs	r4, r4, #3
 800112c:	e736      	b.n	8000f9c <__aeabi_dadd+0x39c>
 800112e:	0011      	movs	r1, r2
 8001130:	4653      	mov	r3, sl
 8001132:	3920      	subs	r1, #32
 8001134:	40cb      	lsrs	r3, r1
 8001136:	4699      	mov	r9, r3
 8001138:	2a20      	cmp	r2, #32
 800113a:	d006      	beq.n	800114a <__aeabi_dadd+0x54a>
 800113c:	2140      	movs	r1, #64	@ 0x40
 800113e:	4653      	mov	r3, sl
 8001140:	1a8a      	subs	r2, r1, r2
 8001142:	4093      	lsls	r3, r2
 8001144:	4662      	mov	r2, ip
 8001146:	431a      	orrs	r2, r3
 8001148:	4694      	mov	ip, r2
 800114a:	4665      	mov	r5, ip
 800114c:	1e6b      	subs	r3, r5, #1
 800114e:	419d      	sbcs	r5, r3
 8001150:	464b      	mov	r3, r9
 8001152:	431d      	orrs	r5, r3
 8001154:	e659      	b.n	8000e0a <__aeabi_dadd+0x20a>
 8001156:	0762      	lsls	r2, r4, #29
 8001158:	08c0      	lsrs	r0, r0, #3
 800115a:	4302      	orrs	r2, r0
 800115c:	08e4      	lsrs	r4, r4, #3
 800115e:	e70d      	b.n	8000f7c <__aeabi_dadd+0x37c>
 8001160:	4653      	mov	r3, sl
 8001162:	075a      	lsls	r2, r3, #29
 8001164:	4663      	mov	r3, ip
 8001166:	08d8      	lsrs	r0, r3, #3
 8001168:	4653      	mov	r3, sl
 800116a:	000e      	movs	r6, r1
 800116c:	4302      	orrs	r2, r0
 800116e:	08dc      	lsrs	r4, r3, #3
 8001170:	e714      	b.n	8000f9c <__aeabi_dadd+0x39c>
 8001172:	0015      	movs	r5, r2
 8001174:	0026      	movs	r6, r4
 8001176:	3d20      	subs	r5, #32
 8001178:	40ee      	lsrs	r6, r5
 800117a:	2a20      	cmp	r2, #32
 800117c:	d003      	beq.n	8001186 <__aeabi_dadd+0x586>
 800117e:	2540      	movs	r5, #64	@ 0x40
 8001180:	1aaa      	subs	r2, r5, r2
 8001182:	4094      	lsls	r4, r2
 8001184:	4320      	orrs	r0, r4
 8001186:	1e42      	subs	r2, r0, #1
 8001188:	4190      	sbcs	r0, r2
 800118a:	0005      	movs	r5, r0
 800118c:	4335      	orrs	r5, r6
 800118e:	e606      	b.n	8000d9e <__aeabi_dadd+0x19e>
 8001190:	2a00      	cmp	r2, #0
 8001192:	d07c      	beq.n	800128e <__aeabi_dadd+0x68e>
 8001194:	4662      	mov	r2, ip
 8001196:	4653      	mov	r3, sl
 8001198:	08c0      	lsrs	r0, r0, #3
 800119a:	431a      	orrs	r2, r3
 800119c:	d100      	bne.n	80011a0 <__aeabi_dadd+0x5a0>
 800119e:	e6fa      	b.n	8000f96 <__aeabi_dadd+0x396>
 80011a0:	0762      	lsls	r2, r4, #29
 80011a2:	4310      	orrs	r0, r2
 80011a4:	2280      	movs	r2, #128	@ 0x80
 80011a6:	08e4      	lsrs	r4, r4, #3
 80011a8:	0312      	lsls	r2, r2, #12
 80011aa:	4214      	tst	r4, r2
 80011ac:	d008      	beq.n	80011c0 <__aeabi_dadd+0x5c0>
 80011ae:	08d9      	lsrs	r1, r3, #3
 80011b0:	4211      	tst	r1, r2
 80011b2:	d105      	bne.n	80011c0 <__aeabi_dadd+0x5c0>
 80011b4:	4663      	mov	r3, ip
 80011b6:	08d8      	lsrs	r0, r3, #3
 80011b8:	4653      	mov	r3, sl
 80011ba:	000c      	movs	r4, r1
 80011bc:	075b      	lsls	r3, r3, #29
 80011be:	4318      	orrs	r0, r3
 80011c0:	0f42      	lsrs	r2, r0, #29
 80011c2:	00c0      	lsls	r0, r0, #3
 80011c4:	08c0      	lsrs	r0, r0, #3
 80011c6:	0752      	lsls	r2, r2, #29
 80011c8:	4302      	orrs	r2, r0
 80011ca:	e6e7      	b.n	8000f9c <__aeabi_dadd+0x39c>
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dadd+0x5d2>
 80011d0:	e72d      	b.n	800102e <__aeabi_dadd+0x42e>
 80011d2:	4663      	mov	r3, ip
 80011d4:	08d8      	lsrs	r0, r3, #3
 80011d6:	4653      	mov	r3, sl
 80011d8:	075a      	lsls	r2, r3, #29
 80011da:	000e      	movs	r6, r1
 80011dc:	4302      	orrs	r2, r0
 80011de:	08dc      	lsrs	r4, r3, #3
 80011e0:	e6cc      	b.n	8000f7c <__aeabi_dadd+0x37c>
 80011e2:	4663      	mov	r3, ip
 80011e4:	1a1d      	subs	r5, r3, r0
 80011e6:	45ac      	cmp	ip, r5
 80011e8:	4192      	sbcs	r2, r2
 80011ea:	4653      	mov	r3, sl
 80011ec:	4252      	negs	r2, r2
 80011ee:	1b1c      	subs	r4, r3, r4
 80011f0:	000e      	movs	r6, r1
 80011f2:	4688      	mov	r8, r1
 80011f4:	1aa4      	subs	r4, r4, r2
 80011f6:	3701      	adds	r7, #1
 80011f8:	e555      	b.n	8000ca6 <__aeabi_dadd+0xa6>
 80011fa:	4663      	mov	r3, ip
 80011fc:	08d9      	lsrs	r1, r3, #3
 80011fe:	4653      	mov	r3, sl
 8001200:	075a      	lsls	r2, r3, #29
 8001202:	430a      	orrs	r2, r1
 8001204:	08dc      	lsrs	r4, r3, #3
 8001206:	e6c9      	b.n	8000f9c <__aeabi_dadd+0x39c>
 8001208:	4660      	mov	r0, ip
 800120a:	4654      	mov	r4, sl
 800120c:	e6d4      	b.n	8000fb8 <__aeabi_dadd+0x3b8>
 800120e:	08c0      	lsrs	r0, r0, #3
 8001210:	2a00      	cmp	r2, #0
 8001212:	d100      	bne.n	8001216 <__aeabi_dadd+0x616>
 8001214:	e6bf      	b.n	8000f96 <__aeabi_dadd+0x396>
 8001216:	0762      	lsls	r2, r4, #29
 8001218:	4310      	orrs	r0, r2
 800121a:	2280      	movs	r2, #128	@ 0x80
 800121c:	08e4      	lsrs	r4, r4, #3
 800121e:	0312      	lsls	r2, r2, #12
 8001220:	4214      	tst	r4, r2
 8001222:	d0cd      	beq.n	80011c0 <__aeabi_dadd+0x5c0>
 8001224:	08dd      	lsrs	r5, r3, #3
 8001226:	4215      	tst	r5, r2
 8001228:	d1ca      	bne.n	80011c0 <__aeabi_dadd+0x5c0>
 800122a:	4663      	mov	r3, ip
 800122c:	08d8      	lsrs	r0, r3, #3
 800122e:	4653      	mov	r3, sl
 8001230:	075b      	lsls	r3, r3, #29
 8001232:	000e      	movs	r6, r1
 8001234:	002c      	movs	r4, r5
 8001236:	4318      	orrs	r0, r3
 8001238:	e7c2      	b.n	80011c0 <__aeabi_dadd+0x5c0>
 800123a:	4663      	mov	r3, ip
 800123c:	08d9      	lsrs	r1, r3, #3
 800123e:	4653      	mov	r3, sl
 8001240:	075a      	lsls	r2, r3, #29
 8001242:	430a      	orrs	r2, r1
 8001244:	08dc      	lsrs	r4, r3, #3
 8001246:	e699      	b.n	8000f7c <__aeabi_dadd+0x37c>
 8001248:	4663      	mov	r3, ip
 800124a:	08d8      	lsrs	r0, r3, #3
 800124c:	4653      	mov	r3, sl
 800124e:	075a      	lsls	r2, r3, #29
 8001250:	000e      	movs	r6, r1
 8001252:	4302      	orrs	r2, r0
 8001254:	08dc      	lsrs	r4, r3, #3
 8001256:	e6a1      	b.n	8000f9c <__aeabi_dadd+0x39c>
 8001258:	0011      	movs	r1, r2
 800125a:	0027      	movs	r7, r4
 800125c:	3920      	subs	r1, #32
 800125e:	40cf      	lsrs	r7, r1
 8001260:	2a20      	cmp	r2, #32
 8001262:	d003      	beq.n	800126c <__aeabi_dadd+0x66c>
 8001264:	2140      	movs	r1, #64	@ 0x40
 8001266:	1a8a      	subs	r2, r1, r2
 8001268:	4094      	lsls	r4, r2
 800126a:	4320      	orrs	r0, r4
 800126c:	1e42      	subs	r2, r0, #1
 800126e:	4190      	sbcs	r0, r2
 8001270:	0005      	movs	r5, r0
 8001272:	433d      	orrs	r5, r7
 8001274:	e651      	b.n	8000f1a <__aeabi_dadd+0x31a>
 8001276:	000c      	movs	r4, r1
 8001278:	2500      	movs	r5, #0
 800127a:	2200      	movs	r2, #0
 800127c:	e558      	b.n	8000d30 <__aeabi_dadd+0x130>
 800127e:	4460      	add	r0, ip
 8001280:	4560      	cmp	r0, ip
 8001282:	4192      	sbcs	r2, r2
 8001284:	4454      	add	r4, sl
 8001286:	4252      	negs	r2, r2
 8001288:	0005      	movs	r5, r0
 800128a:	18a4      	adds	r4, r4, r2
 800128c:	e73a      	b.n	8001104 <__aeabi_dadd+0x504>
 800128e:	4653      	mov	r3, sl
 8001290:	075a      	lsls	r2, r3, #29
 8001292:	4663      	mov	r3, ip
 8001294:	08d9      	lsrs	r1, r3, #3
 8001296:	4653      	mov	r3, sl
 8001298:	430a      	orrs	r2, r1
 800129a:	08dc      	lsrs	r4, r3, #3
 800129c:	e67e      	b.n	8000f9c <__aeabi_dadd+0x39c>
 800129e:	001a      	movs	r2, r3
 80012a0:	001c      	movs	r4, r3
 80012a2:	432a      	orrs	r2, r5
 80012a4:	d000      	beq.n	80012a8 <__aeabi_dadd+0x6a8>
 80012a6:	e6ab      	b.n	8001000 <__aeabi_dadd+0x400>
 80012a8:	e6c1      	b.n	800102e <__aeabi_dadd+0x42e>
 80012aa:	2120      	movs	r1, #32
 80012ac:	2500      	movs	r5, #0
 80012ae:	1a09      	subs	r1, r1, r0
 80012b0:	e519      	b.n	8000ce6 <__aeabi_dadd+0xe6>
 80012b2:	2200      	movs	r2, #0
 80012b4:	2500      	movs	r5, #0
 80012b6:	4c01      	ldr	r4, [pc, #4]	@ (80012bc <__aeabi_dadd+0x6bc>)
 80012b8:	e53a      	b.n	8000d30 <__aeabi_dadd+0x130>
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	000007ff 	.word	0x000007ff
 80012c0:	ff7fffff 	.word	0xff7fffff
 80012c4:	000007fe 	.word	0x000007fe

080012c8 <__aeabi_ddiv>:
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	46de      	mov	lr, fp
 80012cc:	4645      	mov	r5, r8
 80012ce:	4657      	mov	r7, sl
 80012d0:	464e      	mov	r6, r9
 80012d2:	b5e0      	push	{r5, r6, r7, lr}
 80012d4:	b087      	sub	sp, #28
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	030b      	lsls	r3, r1, #12
 80012dc:	0b1b      	lsrs	r3, r3, #12
 80012de:	469b      	mov	fp, r3
 80012e0:	0fca      	lsrs	r2, r1, #31
 80012e2:	004b      	lsls	r3, r1, #1
 80012e4:	0004      	movs	r4, r0
 80012e6:	4680      	mov	r8, r0
 80012e8:	0d5b      	lsrs	r3, r3, #21
 80012ea:	9202      	str	r2, [sp, #8]
 80012ec:	d100      	bne.n	80012f0 <__aeabi_ddiv+0x28>
 80012ee:	e16a      	b.n	80015c6 <__aeabi_ddiv+0x2fe>
 80012f0:	4ad4      	ldr	r2, [pc, #848]	@ (8001644 <__aeabi_ddiv+0x37c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d100      	bne.n	80012f8 <__aeabi_ddiv+0x30>
 80012f6:	e18c      	b.n	8001612 <__aeabi_ddiv+0x34a>
 80012f8:	4659      	mov	r1, fp
 80012fa:	0f42      	lsrs	r2, r0, #29
 80012fc:	00c9      	lsls	r1, r1, #3
 80012fe:	430a      	orrs	r2, r1
 8001300:	2180      	movs	r1, #128	@ 0x80
 8001302:	0409      	lsls	r1, r1, #16
 8001304:	4311      	orrs	r1, r2
 8001306:	00c2      	lsls	r2, r0, #3
 8001308:	4690      	mov	r8, r2
 800130a:	4acf      	ldr	r2, [pc, #828]	@ (8001648 <__aeabi_ddiv+0x380>)
 800130c:	4689      	mov	r9, r1
 800130e:	4692      	mov	sl, r2
 8001310:	449a      	add	sl, r3
 8001312:	2300      	movs	r3, #0
 8001314:	2400      	movs	r4, #0
 8001316:	9303      	str	r3, [sp, #12]
 8001318:	9e00      	ldr	r6, [sp, #0]
 800131a:	9f01      	ldr	r7, [sp, #4]
 800131c:	033b      	lsls	r3, r7, #12
 800131e:	0b1b      	lsrs	r3, r3, #12
 8001320:	469b      	mov	fp, r3
 8001322:	007b      	lsls	r3, r7, #1
 8001324:	0030      	movs	r0, r6
 8001326:	0d5b      	lsrs	r3, r3, #21
 8001328:	0ffd      	lsrs	r5, r7, #31
 800132a:	2b00      	cmp	r3, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_ddiv+0x68>
 800132e:	e128      	b.n	8001582 <__aeabi_ddiv+0x2ba>
 8001330:	4ac4      	ldr	r2, [pc, #784]	@ (8001644 <__aeabi_ddiv+0x37c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d100      	bne.n	8001338 <__aeabi_ddiv+0x70>
 8001336:	e177      	b.n	8001628 <__aeabi_ddiv+0x360>
 8001338:	4659      	mov	r1, fp
 800133a:	0f72      	lsrs	r2, r6, #29
 800133c:	00c9      	lsls	r1, r1, #3
 800133e:	430a      	orrs	r2, r1
 8001340:	2180      	movs	r1, #128	@ 0x80
 8001342:	0409      	lsls	r1, r1, #16
 8001344:	4311      	orrs	r1, r2
 8001346:	468b      	mov	fp, r1
 8001348:	49bf      	ldr	r1, [pc, #764]	@ (8001648 <__aeabi_ddiv+0x380>)
 800134a:	00f2      	lsls	r2, r6, #3
 800134c:	468c      	mov	ip, r1
 800134e:	4651      	mov	r1, sl
 8001350:	4463      	add	r3, ip
 8001352:	1acb      	subs	r3, r1, r3
 8001354:	469a      	mov	sl, r3
 8001356:	2300      	movs	r3, #0
 8001358:	9e02      	ldr	r6, [sp, #8]
 800135a:	406e      	eors	r6, r5
 800135c:	2c0f      	cmp	r4, #15
 800135e:	d827      	bhi.n	80013b0 <__aeabi_ddiv+0xe8>
 8001360:	49ba      	ldr	r1, [pc, #744]	@ (800164c <__aeabi_ddiv+0x384>)
 8001362:	00a4      	lsls	r4, r4, #2
 8001364:	5909      	ldr	r1, [r1, r4]
 8001366:	468f      	mov	pc, r1
 8001368:	46cb      	mov	fp, r9
 800136a:	4642      	mov	r2, r8
 800136c:	9e02      	ldr	r6, [sp, #8]
 800136e:	9b03      	ldr	r3, [sp, #12]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d016      	beq.n	80013a2 <__aeabi_ddiv+0xda>
 8001374:	2b03      	cmp	r3, #3
 8001376:	d100      	bne.n	800137a <__aeabi_ddiv+0xb2>
 8001378:	e2a6      	b.n	80018c8 <__aeabi_ddiv+0x600>
 800137a:	2b01      	cmp	r3, #1
 800137c:	d000      	beq.n	8001380 <__aeabi_ddiv+0xb8>
 800137e:	e0df      	b.n	8001540 <__aeabi_ddiv+0x278>
 8001380:	2200      	movs	r2, #0
 8001382:	2300      	movs	r3, #0
 8001384:	2400      	movs	r4, #0
 8001386:	4690      	mov	r8, r2
 8001388:	051b      	lsls	r3, r3, #20
 800138a:	4323      	orrs	r3, r4
 800138c:	07f6      	lsls	r6, r6, #31
 800138e:	4333      	orrs	r3, r6
 8001390:	4640      	mov	r0, r8
 8001392:	0019      	movs	r1, r3
 8001394:	b007      	add	sp, #28
 8001396:	bcf0      	pop	{r4, r5, r6, r7}
 8001398:	46bb      	mov	fp, r7
 800139a:	46b2      	mov	sl, r6
 800139c:	46a9      	mov	r9, r5
 800139e:	46a0      	mov	r8, r4
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a2:	2200      	movs	r2, #0
 80013a4:	2400      	movs	r4, #0
 80013a6:	4690      	mov	r8, r2
 80013a8:	4ba6      	ldr	r3, [pc, #664]	@ (8001644 <__aeabi_ddiv+0x37c>)
 80013aa:	e7ed      	b.n	8001388 <__aeabi_ddiv+0xc0>
 80013ac:	002e      	movs	r6, r5
 80013ae:	e7df      	b.n	8001370 <__aeabi_ddiv+0xa8>
 80013b0:	45cb      	cmp	fp, r9
 80013b2:	d200      	bcs.n	80013b6 <__aeabi_ddiv+0xee>
 80013b4:	e1d4      	b.n	8001760 <__aeabi_ddiv+0x498>
 80013b6:	d100      	bne.n	80013ba <__aeabi_ddiv+0xf2>
 80013b8:	e1cf      	b.n	800175a <__aeabi_ddiv+0x492>
 80013ba:	2301      	movs	r3, #1
 80013bc:	425b      	negs	r3, r3
 80013be:	469c      	mov	ip, r3
 80013c0:	4644      	mov	r4, r8
 80013c2:	4648      	mov	r0, r9
 80013c4:	2700      	movs	r7, #0
 80013c6:	44e2      	add	sl, ip
 80013c8:	465b      	mov	r3, fp
 80013ca:	0e15      	lsrs	r5, r2, #24
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	431d      	orrs	r5, r3
 80013d0:	0c19      	lsrs	r1, r3, #16
 80013d2:	042b      	lsls	r3, r5, #16
 80013d4:	0212      	lsls	r2, r2, #8
 80013d6:	9500      	str	r5, [sp, #0]
 80013d8:	0c1d      	lsrs	r5, r3, #16
 80013da:	4691      	mov	r9, r2
 80013dc:	9102      	str	r1, [sp, #8]
 80013de:	9503      	str	r5, [sp, #12]
 80013e0:	f7fe ff3e 	bl	8000260 <__aeabi_uidivmod>
 80013e4:	0002      	movs	r2, r0
 80013e6:	436a      	muls	r2, r5
 80013e8:	040b      	lsls	r3, r1, #16
 80013ea:	0c21      	lsrs	r1, r4, #16
 80013ec:	4680      	mov	r8, r0
 80013ee:	4319      	orrs	r1, r3
 80013f0:	428a      	cmp	r2, r1
 80013f2:	d909      	bls.n	8001408 <__aeabi_ddiv+0x140>
 80013f4:	9d00      	ldr	r5, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	46ac      	mov	ip, r5
 80013fa:	425b      	negs	r3, r3
 80013fc:	4461      	add	r1, ip
 80013fe:	469c      	mov	ip, r3
 8001400:	44e0      	add	r8, ip
 8001402:	428d      	cmp	r5, r1
 8001404:	d800      	bhi.n	8001408 <__aeabi_ddiv+0x140>
 8001406:	e1fb      	b.n	8001800 <__aeabi_ddiv+0x538>
 8001408:	1a88      	subs	r0, r1, r2
 800140a:	9902      	ldr	r1, [sp, #8]
 800140c:	f7fe ff28 	bl	8000260 <__aeabi_uidivmod>
 8001410:	9a03      	ldr	r2, [sp, #12]
 8001412:	0424      	lsls	r4, r4, #16
 8001414:	4342      	muls	r2, r0
 8001416:	0409      	lsls	r1, r1, #16
 8001418:	0c24      	lsrs	r4, r4, #16
 800141a:	0003      	movs	r3, r0
 800141c:	430c      	orrs	r4, r1
 800141e:	42a2      	cmp	r2, r4
 8001420:	d906      	bls.n	8001430 <__aeabi_ddiv+0x168>
 8001422:	9900      	ldr	r1, [sp, #0]
 8001424:	3b01      	subs	r3, #1
 8001426:	468c      	mov	ip, r1
 8001428:	4464      	add	r4, ip
 800142a:	42a1      	cmp	r1, r4
 800142c:	d800      	bhi.n	8001430 <__aeabi_ddiv+0x168>
 800142e:	e1e1      	b.n	80017f4 <__aeabi_ddiv+0x52c>
 8001430:	1aa0      	subs	r0, r4, r2
 8001432:	4642      	mov	r2, r8
 8001434:	0412      	lsls	r2, r2, #16
 8001436:	431a      	orrs	r2, r3
 8001438:	4693      	mov	fp, r2
 800143a:	464b      	mov	r3, r9
 800143c:	4659      	mov	r1, fp
 800143e:	0c1b      	lsrs	r3, r3, #16
 8001440:	001d      	movs	r5, r3
 8001442:	9304      	str	r3, [sp, #16]
 8001444:	040b      	lsls	r3, r1, #16
 8001446:	4649      	mov	r1, r9
 8001448:	0409      	lsls	r1, r1, #16
 800144a:	0c09      	lsrs	r1, r1, #16
 800144c:	000c      	movs	r4, r1
 800144e:	0c1b      	lsrs	r3, r3, #16
 8001450:	435c      	muls	r4, r3
 8001452:	0c12      	lsrs	r2, r2, #16
 8001454:	436b      	muls	r3, r5
 8001456:	4688      	mov	r8, r1
 8001458:	4351      	muls	r1, r2
 800145a:	436a      	muls	r2, r5
 800145c:	0c25      	lsrs	r5, r4, #16
 800145e:	46ac      	mov	ip, r5
 8001460:	185b      	adds	r3, r3, r1
 8001462:	4463      	add	r3, ip
 8001464:	4299      	cmp	r1, r3
 8001466:	d903      	bls.n	8001470 <__aeabi_ddiv+0x1a8>
 8001468:	2180      	movs	r1, #128	@ 0x80
 800146a:	0249      	lsls	r1, r1, #9
 800146c:	468c      	mov	ip, r1
 800146e:	4462      	add	r2, ip
 8001470:	0c19      	lsrs	r1, r3, #16
 8001472:	0424      	lsls	r4, r4, #16
 8001474:	041b      	lsls	r3, r3, #16
 8001476:	0c24      	lsrs	r4, r4, #16
 8001478:	188a      	adds	r2, r1, r2
 800147a:	191c      	adds	r4, r3, r4
 800147c:	4290      	cmp	r0, r2
 800147e:	d302      	bcc.n	8001486 <__aeabi_ddiv+0x1be>
 8001480:	d116      	bne.n	80014b0 <__aeabi_ddiv+0x1e8>
 8001482:	42a7      	cmp	r7, r4
 8001484:	d214      	bcs.n	80014b0 <__aeabi_ddiv+0x1e8>
 8001486:	465b      	mov	r3, fp
 8001488:	9d00      	ldr	r5, [sp, #0]
 800148a:	3b01      	subs	r3, #1
 800148c:	444f      	add	r7, r9
 800148e:	9305      	str	r3, [sp, #20]
 8001490:	454f      	cmp	r7, r9
 8001492:	419b      	sbcs	r3, r3
 8001494:	46ac      	mov	ip, r5
 8001496:	425b      	negs	r3, r3
 8001498:	4463      	add	r3, ip
 800149a:	18c0      	adds	r0, r0, r3
 800149c:	4285      	cmp	r5, r0
 800149e:	d300      	bcc.n	80014a2 <__aeabi_ddiv+0x1da>
 80014a0:	e1a1      	b.n	80017e6 <__aeabi_ddiv+0x51e>
 80014a2:	4282      	cmp	r2, r0
 80014a4:	d900      	bls.n	80014a8 <__aeabi_ddiv+0x1e0>
 80014a6:	e1f6      	b.n	8001896 <__aeabi_ddiv+0x5ce>
 80014a8:	d100      	bne.n	80014ac <__aeabi_ddiv+0x1e4>
 80014aa:	e1f1      	b.n	8001890 <__aeabi_ddiv+0x5c8>
 80014ac:	9b05      	ldr	r3, [sp, #20]
 80014ae:	469b      	mov	fp, r3
 80014b0:	1b3c      	subs	r4, r7, r4
 80014b2:	42a7      	cmp	r7, r4
 80014b4:	41bf      	sbcs	r7, r7
 80014b6:	9d00      	ldr	r5, [sp, #0]
 80014b8:	1a80      	subs	r0, r0, r2
 80014ba:	427f      	negs	r7, r7
 80014bc:	1bc0      	subs	r0, r0, r7
 80014be:	4285      	cmp	r5, r0
 80014c0:	d100      	bne.n	80014c4 <__aeabi_ddiv+0x1fc>
 80014c2:	e1d0      	b.n	8001866 <__aeabi_ddiv+0x59e>
 80014c4:	9902      	ldr	r1, [sp, #8]
 80014c6:	f7fe fecb 	bl	8000260 <__aeabi_uidivmod>
 80014ca:	9a03      	ldr	r2, [sp, #12]
 80014cc:	040b      	lsls	r3, r1, #16
 80014ce:	4342      	muls	r2, r0
 80014d0:	0c21      	lsrs	r1, r4, #16
 80014d2:	0007      	movs	r7, r0
 80014d4:	4319      	orrs	r1, r3
 80014d6:	428a      	cmp	r2, r1
 80014d8:	d900      	bls.n	80014dc <__aeabi_ddiv+0x214>
 80014da:	e178      	b.n	80017ce <__aeabi_ddiv+0x506>
 80014dc:	1a88      	subs	r0, r1, r2
 80014de:	9902      	ldr	r1, [sp, #8]
 80014e0:	f7fe febe 	bl	8000260 <__aeabi_uidivmod>
 80014e4:	9a03      	ldr	r2, [sp, #12]
 80014e6:	0424      	lsls	r4, r4, #16
 80014e8:	4342      	muls	r2, r0
 80014ea:	0409      	lsls	r1, r1, #16
 80014ec:	0c24      	lsrs	r4, r4, #16
 80014ee:	0003      	movs	r3, r0
 80014f0:	430c      	orrs	r4, r1
 80014f2:	42a2      	cmp	r2, r4
 80014f4:	d900      	bls.n	80014f8 <__aeabi_ddiv+0x230>
 80014f6:	e15d      	b.n	80017b4 <__aeabi_ddiv+0x4ec>
 80014f8:	4641      	mov	r1, r8
 80014fa:	1aa4      	subs	r4, r4, r2
 80014fc:	043a      	lsls	r2, r7, #16
 80014fe:	431a      	orrs	r2, r3
 8001500:	9d04      	ldr	r5, [sp, #16]
 8001502:	0413      	lsls	r3, r2, #16
 8001504:	0c1b      	lsrs	r3, r3, #16
 8001506:	4359      	muls	r1, r3
 8001508:	4647      	mov	r7, r8
 800150a:	436b      	muls	r3, r5
 800150c:	469c      	mov	ip, r3
 800150e:	0c10      	lsrs	r0, r2, #16
 8001510:	4347      	muls	r7, r0
 8001512:	0c0b      	lsrs	r3, r1, #16
 8001514:	44bc      	add	ip, r7
 8001516:	4463      	add	r3, ip
 8001518:	4368      	muls	r0, r5
 800151a:	429f      	cmp	r7, r3
 800151c:	d903      	bls.n	8001526 <__aeabi_ddiv+0x25e>
 800151e:	2580      	movs	r5, #128	@ 0x80
 8001520:	026d      	lsls	r5, r5, #9
 8001522:	46ac      	mov	ip, r5
 8001524:	4460      	add	r0, ip
 8001526:	0c1f      	lsrs	r7, r3, #16
 8001528:	0409      	lsls	r1, r1, #16
 800152a:	041b      	lsls	r3, r3, #16
 800152c:	0c09      	lsrs	r1, r1, #16
 800152e:	183f      	adds	r7, r7, r0
 8001530:	185b      	adds	r3, r3, r1
 8001532:	42bc      	cmp	r4, r7
 8001534:	d200      	bcs.n	8001538 <__aeabi_ddiv+0x270>
 8001536:	e102      	b.n	800173e <__aeabi_ddiv+0x476>
 8001538:	d100      	bne.n	800153c <__aeabi_ddiv+0x274>
 800153a:	e0fd      	b.n	8001738 <__aeabi_ddiv+0x470>
 800153c:	2301      	movs	r3, #1
 800153e:	431a      	orrs	r2, r3
 8001540:	4b43      	ldr	r3, [pc, #268]	@ (8001650 <__aeabi_ddiv+0x388>)
 8001542:	4453      	add	r3, sl
 8001544:	2b00      	cmp	r3, #0
 8001546:	dc00      	bgt.n	800154a <__aeabi_ddiv+0x282>
 8001548:	e0ae      	b.n	80016a8 <__aeabi_ddiv+0x3e0>
 800154a:	0751      	lsls	r1, r2, #29
 800154c:	d000      	beq.n	8001550 <__aeabi_ddiv+0x288>
 800154e:	e198      	b.n	8001882 <__aeabi_ddiv+0x5ba>
 8001550:	4659      	mov	r1, fp
 8001552:	01c9      	lsls	r1, r1, #7
 8001554:	d506      	bpl.n	8001564 <__aeabi_ddiv+0x29c>
 8001556:	4659      	mov	r1, fp
 8001558:	4b3e      	ldr	r3, [pc, #248]	@ (8001654 <__aeabi_ddiv+0x38c>)
 800155a:	4019      	ands	r1, r3
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	468b      	mov	fp, r1
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4453      	add	r3, sl
 8001564:	493c      	ldr	r1, [pc, #240]	@ (8001658 <__aeabi_ddiv+0x390>)
 8001566:	428b      	cmp	r3, r1
 8001568:	dd00      	ble.n	800156c <__aeabi_ddiv+0x2a4>
 800156a:	e71a      	b.n	80013a2 <__aeabi_ddiv+0xda>
 800156c:	4659      	mov	r1, fp
 800156e:	08d2      	lsrs	r2, r2, #3
 8001570:	0749      	lsls	r1, r1, #29
 8001572:	4311      	orrs	r1, r2
 8001574:	465a      	mov	r2, fp
 8001576:	055b      	lsls	r3, r3, #21
 8001578:	0254      	lsls	r4, r2, #9
 800157a:	4688      	mov	r8, r1
 800157c:	0b24      	lsrs	r4, r4, #12
 800157e:	0d5b      	lsrs	r3, r3, #21
 8001580:	e702      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001582:	465a      	mov	r2, fp
 8001584:	9b00      	ldr	r3, [sp, #0]
 8001586:	431a      	orrs	r2, r3
 8001588:	d100      	bne.n	800158c <__aeabi_ddiv+0x2c4>
 800158a:	e07e      	b.n	800168a <__aeabi_ddiv+0x3c2>
 800158c:	465b      	mov	r3, fp
 800158e:	2b00      	cmp	r3, #0
 8001590:	d100      	bne.n	8001594 <__aeabi_ddiv+0x2cc>
 8001592:	e100      	b.n	8001796 <__aeabi_ddiv+0x4ce>
 8001594:	4658      	mov	r0, fp
 8001596:	f001 fa73 	bl	8002a80 <__clzsi2>
 800159a:	0002      	movs	r2, r0
 800159c:	0003      	movs	r3, r0
 800159e:	3a0b      	subs	r2, #11
 80015a0:	271d      	movs	r7, #29
 80015a2:	9e00      	ldr	r6, [sp, #0]
 80015a4:	1aba      	subs	r2, r7, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	4658      	mov	r0, fp
 80015aa:	40d6      	lsrs	r6, r2
 80015ac:	3908      	subs	r1, #8
 80015ae:	4088      	lsls	r0, r1
 80015b0:	0032      	movs	r2, r6
 80015b2:	4302      	orrs	r2, r0
 80015b4:	4693      	mov	fp, r2
 80015b6:	9a00      	ldr	r2, [sp, #0]
 80015b8:	408a      	lsls	r2, r1
 80015ba:	4928      	ldr	r1, [pc, #160]	@ (800165c <__aeabi_ddiv+0x394>)
 80015bc:	4453      	add	r3, sl
 80015be:	468a      	mov	sl, r1
 80015c0:	449a      	add	sl, r3
 80015c2:	2300      	movs	r3, #0
 80015c4:	e6c8      	b.n	8001358 <__aeabi_ddiv+0x90>
 80015c6:	465b      	mov	r3, fp
 80015c8:	4303      	orrs	r3, r0
 80015ca:	4699      	mov	r9, r3
 80015cc:	d056      	beq.n	800167c <__aeabi_ddiv+0x3b4>
 80015ce:	465b      	mov	r3, fp
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_ddiv+0x30e>
 80015d4:	e0cd      	b.n	8001772 <__aeabi_ddiv+0x4aa>
 80015d6:	4658      	mov	r0, fp
 80015d8:	f001 fa52 	bl	8002a80 <__clzsi2>
 80015dc:	230b      	movs	r3, #11
 80015de:	425b      	negs	r3, r3
 80015e0:	469c      	mov	ip, r3
 80015e2:	0002      	movs	r2, r0
 80015e4:	4484      	add	ip, r0
 80015e6:	4666      	mov	r6, ip
 80015e8:	231d      	movs	r3, #29
 80015ea:	1b9b      	subs	r3, r3, r6
 80015ec:	0026      	movs	r6, r4
 80015ee:	0011      	movs	r1, r2
 80015f0:	4658      	mov	r0, fp
 80015f2:	40de      	lsrs	r6, r3
 80015f4:	3908      	subs	r1, #8
 80015f6:	4088      	lsls	r0, r1
 80015f8:	0033      	movs	r3, r6
 80015fa:	4303      	orrs	r3, r0
 80015fc:	4699      	mov	r9, r3
 80015fe:	0023      	movs	r3, r4
 8001600:	408b      	lsls	r3, r1
 8001602:	4698      	mov	r8, r3
 8001604:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <__aeabi_ddiv+0x398>)
 8001606:	2400      	movs	r4, #0
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	469a      	mov	sl, r3
 800160c:	2300      	movs	r3, #0
 800160e:	9303      	str	r3, [sp, #12]
 8001610:	e682      	b.n	8001318 <__aeabi_ddiv+0x50>
 8001612:	465a      	mov	r2, fp
 8001614:	4302      	orrs	r2, r0
 8001616:	4691      	mov	r9, r2
 8001618:	d12a      	bne.n	8001670 <__aeabi_ddiv+0x3a8>
 800161a:	2200      	movs	r2, #0
 800161c:	469a      	mov	sl, r3
 800161e:	2302      	movs	r3, #2
 8001620:	4690      	mov	r8, r2
 8001622:	2408      	movs	r4, #8
 8001624:	9303      	str	r3, [sp, #12]
 8001626:	e677      	b.n	8001318 <__aeabi_ddiv+0x50>
 8001628:	465a      	mov	r2, fp
 800162a:	9b00      	ldr	r3, [sp, #0]
 800162c:	431a      	orrs	r2, r3
 800162e:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <__aeabi_ddiv+0x39c>)
 8001630:	469c      	mov	ip, r3
 8001632:	44e2      	add	sl, ip
 8001634:	2a00      	cmp	r2, #0
 8001636:	d117      	bne.n	8001668 <__aeabi_ddiv+0x3a0>
 8001638:	2302      	movs	r3, #2
 800163a:	431c      	orrs	r4, r3
 800163c:	2300      	movs	r3, #0
 800163e:	469b      	mov	fp, r3
 8001640:	3302      	adds	r3, #2
 8001642:	e689      	b.n	8001358 <__aeabi_ddiv+0x90>
 8001644:	000007ff 	.word	0x000007ff
 8001648:	fffffc01 	.word	0xfffffc01
 800164c:	0800e6f4 	.word	0x0800e6f4
 8001650:	000003ff 	.word	0x000003ff
 8001654:	feffffff 	.word	0xfeffffff
 8001658:	000007fe 	.word	0x000007fe
 800165c:	000003f3 	.word	0x000003f3
 8001660:	fffffc0d 	.word	0xfffffc0d
 8001664:	fffff801 	.word	0xfffff801
 8001668:	2303      	movs	r3, #3
 800166a:	0032      	movs	r2, r6
 800166c:	431c      	orrs	r4, r3
 800166e:	e673      	b.n	8001358 <__aeabi_ddiv+0x90>
 8001670:	469a      	mov	sl, r3
 8001672:	2303      	movs	r3, #3
 8001674:	46d9      	mov	r9, fp
 8001676:	240c      	movs	r4, #12
 8001678:	9303      	str	r3, [sp, #12]
 800167a:	e64d      	b.n	8001318 <__aeabi_ddiv+0x50>
 800167c:	2300      	movs	r3, #0
 800167e:	4698      	mov	r8, r3
 8001680:	469a      	mov	sl, r3
 8001682:	3301      	adds	r3, #1
 8001684:	2404      	movs	r4, #4
 8001686:	9303      	str	r3, [sp, #12]
 8001688:	e646      	b.n	8001318 <__aeabi_ddiv+0x50>
 800168a:	2301      	movs	r3, #1
 800168c:	431c      	orrs	r4, r3
 800168e:	2300      	movs	r3, #0
 8001690:	469b      	mov	fp, r3
 8001692:	3301      	adds	r3, #1
 8001694:	e660      	b.n	8001358 <__aeabi_ddiv+0x90>
 8001696:	2300      	movs	r3, #0
 8001698:	2480      	movs	r4, #128	@ 0x80
 800169a:	4698      	mov	r8, r3
 800169c:	2600      	movs	r6, #0
 800169e:	4b92      	ldr	r3, [pc, #584]	@ (80018e8 <__aeabi_ddiv+0x620>)
 80016a0:	0324      	lsls	r4, r4, #12
 80016a2:	e671      	b.n	8001388 <__aeabi_ddiv+0xc0>
 80016a4:	2201      	movs	r2, #1
 80016a6:	4252      	negs	r2, r2
 80016a8:	2101      	movs	r1, #1
 80016aa:	1ac9      	subs	r1, r1, r3
 80016ac:	2938      	cmp	r1, #56	@ 0x38
 80016ae:	dd00      	ble.n	80016b2 <__aeabi_ddiv+0x3ea>
 80016b0:	e666      	b.n	8001380 <__aeabi_ddiv+0xb8>
 80016b2:	291f      	cmp	r1, #31
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_ddiv+0x3f0>
 80016b6:	e0ab      	b.n	8001810 <__aeabi_ddiv+0x548>
 80016b8:	201f      	movs	r0, #31
 80016ba:	4240      	negs	r0, r0
 80016bc:	1ac3      	subs	r3, r0, r3
 80016be:	4658      	mov	r0, fp
 80016c0:	40d8      	lsrs	r0, r3
 80016c2:	0003      	movs	r3, r0
 80016c4:	2920      	cmp	r1, #32
 80016c6:	d004      	beq.n	80016d2 <__aeabi_ddiv+0x40a>
 80016c8:	4658      	mov	r0, fp
 80016ca:	4988      	ldr	r1, [pc, #544]	@ (80018ec <__aeabi_ddiv+0x624>)
 80016cc:	4451      	add	r1, sl
 80016ce:	4088      	lsls	r0, r1
 80016d0:	4302      	orrs	r2, r0
 80016d2:	1e51      	subs	r1, r2, #1
 80016d4:	418a      	sbcs	r2, r1
 80016d6:	431a      	orrs	r2, r3
 80016d8:	2307      	movs	r3, #7
 80016da:	0019      	movs	r1, r3
 80016dc:	2400      	movs	r4, #0
 80016de:	4011      	ands	r1, r2
 80016e0:	4213      	tst	r3, r2
 80016e2:	d00c      	beq.n	80016fe <__aeabi_ddiv+0x436>
 80016e4:	230f      	movs	r3, #15
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d100      	bne.n	80016ee <__aeabi_ddiv+0x426>
 80016ec:	e0f9      	b.n	80018e2 <__aeabi_ddiv+0x61a>
 80016ee:	1d11      	adds	r1, r2, #4
 80016f0:	4291      	cmp	r1, r2
 80016f2:	419b      	sbcs	r3, r3
 80016f4:	000a      	movs	r2, r1
 80016f6:	425b      	negs	r3, r3
 80016f8:	0759      	lsls	r1, r3, #29
 80016fa:	025b      	lsls	r3, r3, #9
 80016fc:	0b1c      	lsrs	r4, r3, #12
 80016fe:	08d2      	lsrs	r2, r2, #3
 8001700:	430a      	orrs	r2, r1
 8001702:	4690      	mov	r8, r2
 8001704:	2300      	movs	r3, #0
 8001706:	e63f      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001708:	2480      	movs	r4, #128	@ 0x80
 800170a:	464b      	mov	r3, r9
 800170c:	0324      	lsls	r4, r4, #12
 800170e:	4223      	tst	r3, r4
 8001710:	d009      	beq.n	8001726 <__aeabi_ddiv+0x45e>
 8001712:	465b      	mov	r3, fp
 8001714:	4223      	tst	r3, r4
 8001716:	d106      	bne.n	8001726 <__aeabi_ddiv+0x45e>
 8001718:	431c      	orrs	r4, r3
 800171a:	0324      	lsls	r4, r4, #12
 800171c:	002e      	movs	r6, r5
 800171e:	4690      	mov	r8, r2
 8001720:	4b71      	ldr	r3, [pc, #452]	@ (80018e8 <__aeabi_ddiv+0x620>)
 8001722:	0b24      	lsrs	r4, r4, #12
 8001724:	e630      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001726:	2480      	movs	r4, #128	@ 0x80
 8001728:	464b      	mov	r3, r9
 800172a:	0324      	lsls	r4, r4, #12
 800172c:	431c      	orrs	r4, r3
 800172e:	0324      	lsls	r4, r4, #12
 8001730:	9e02      	ldr	r6, [sp, #8]
 8001732:	4b6d      	ldr	r3, [pc, #436]	@ (80018e8 <__aeabi_ddiv+0x620>)
 8001734:	0b24      	lsrs	r4, r4, #12
 8001736:	e627      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001738:	2b00      	cmp	r3, #0
 800173a:	d100      	bne.n	800173e <__aeabi_ddiv+0x476>
 800173c:	e700      	b.n	8001540 <__aeabi_ddiv+0x278>
 800173e:	9800      	ldr	r0, [sp, #0]
 8001740:	1e51      	subs	r1, r2, #1
 8001742:	4684      	mov	ip, r0
 8001744:	4464      	add	r4, ip
 8001746:	4284      	cmp	r4, r0
 8001748:	d200      	bcs.n	800174c <__aeabi_ddiv+0x484>
 800174a:	e084      	b.n	8001856 <__aeabi_ddiv+0x58e>
 800174c:	42bc      	cmp	r4, r7
 800174e:	d200      	bcs.n	8001752 <__aeabi_ddiv+0x48a>
 8001750:	e0ae      	b.n	80018b0 <__aeabi_ddiv+0x5e8>
 8001752:	d100      	bne.n	8001756 <__aeabi_ddiv+0x48e>
 8001754:	e0c1      	b.n	80018da <__aeabi_ddiv+0x612>
 8001756:	000a      	movs	r2, r1
 8001758:	e6f0      	b.n	800153c <__aeabi_ddiv+0x274>
 800175a:	4542      	cmp	r2, r8
 800175c:	d900      	bls.n	8001760 <__aeabi_ddiv+0x498>
 800175e:	e62c      	b.n	80013ba <__aeabi_ddiv+0xf2>
 8001760:	464b      	mov	r3, r9
 8001762:	07dc      	lsls	r4, r3, #31
 8001764:	0858      	lsrs	r0, r3, #1
 8001766:	4643      	mov	r3, r8
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	431c      	orrs	r4, r3
 800176c:	4643      	mov	r3, r8
 800176e:	07df      	lsls	r7, r3, #31
 8001770:	e62a      	b.n	80013c8 <__aeabi_ddiv+0x100>
 8001772:	f001 f985 	bl	8002a80 <__clzsi2>
 8001776:	2315      	movs	r3, #21
 8001778:	469c      	mov	ip, r3
 800177a:	4484      	add	ip, r0
 800177c:	0002      	movs	r2, r0
 800177e:	4663      	mov	r3, ip
 8001780:	3220      	adds	r2, #32
 8001782:	2b1c      	cmp	r3, #28
 8001784:	dc00      	bgt.n	8001788 <__aeabi_ddiv+0x4c0>
 8001786:	e72e      	b.n	80015e6 <__aeabi_ddiv+0x31e>
 8001788:	0023      	movs	r3, r4
 800178a:	3808      	subs	r0, #8
 800178c:	4083      	lsls	r3, r0
 800178e:	4699      	mov	r9, r3
 8001790:	2300      	movs	r3, #0
 8001792:	4698      	mov	r8, r3
 8001794:	e736      	b.n	8001604 <__aeabi_ddiv+0x33c>
 8001796:	f001 f973 	bl	8002a80 <__clzsi2>
 800179a:	0002      	movs	r2, r0
 800179c:	0003      	movs	r3, r0
 800179e:	3215      	adds	r2, #21
 80017a0:	3320      	adds	r3, #32
 80017a2:	2a1c      	cmp	r2, #28
 80017a4:	dc00      	bgt.n	80017a8 <__aeabi_ddiv+0x4e0>
 80017a6:	e6fb      	b.n	80015a0 <__aeabi_ddiv+0x2d8>
 80017a8:	9900      	ldr	r1, [sp, #0]
 80017aa:	3808      	subs	r0, #8
 80017ac:	4081      	lsls	r1, r0
 80017ae:	2200      	movs	r2, #0
 80017b0:	468b      	mov	fp, r1
 80017b2:	e702      	b.n	80015ba <__aeabi_ddiv+0x2f2>
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	468c      	mov	ip, r1
 80017ba:	4464      	add	r4, ip
 80017bc:	42a1      	cmp	r1, r4
 80017be:	d900      	bls.n	80017c2 <__aeabi_ddiv+0x4fa>
 80017c0:	e69a      	b.n	80014f8 <__aeabi_ddiv+0x230>
 80017c2:	42a2      	cmp	r2, r4
 80017c4:	d800      	bhi.n	80017c8 <__aeabi_ddiv+0x500>
 80017c6:	e697      	b.n	80014f8 <__aeabi_ddiv+0x230>
 80017c8:	1e83      	subs	r3, r0, #2
 80017ca:	4464      	add	r4, ip
 80017cc:	e694      	b.n	80014f8 <__aeabi_ddiv+0x230>
 80017ce:	46ac      	mov	ip, r5
 80017d0:	4461      	add	r1, ip
 80017d2:	3f01      	subs	r7, #1
 80017d4:	428d      	cmp	r5, r1
 80017d6:	d900      	bls.n	80017da <__aeabi_ddiv+0x512>
 80017d8:	e680      	b.n	80014dc <__aeabi_ddiv+0x214>
 80017da:	428a      	cmp	r2, r1
 80017dc:	d800      	bhi.n	80017e0 <__aeabi_ddiv+0x518>
 80017de:	e67d      	b.n	80014dc <__aeabi_ddiv+0x214>
 80017e0:	1e87      	subs	r7, r0, #2
 80017e2:	4461      	add	r1, ip
 80017e4:	e67a      	b.n	80014dc <__aeabi_ddiv+0x214>
 80017e6:	4285      	cmp	r5, r0
 80017e8:	d000      	beq.n	80017ec <__aeabi_ddiv+0x524>
 80017ea:	e65f      	b.n	80014ac <__aeabi_ddiv+0x1e4>
 80017ec:	45b9      	cmp	r9, r7
 80017ee:	d900      	bls.n	80017f2 <__aeabi_ddiv+0x52a>
 80017f0:	e65c      	b.n	80014ac <__aeabi_ddiv+0x1e4>
 80017f2:	e656      	b.n	80014a2 <__aeabi_ddiv+0x1da>
 80017f4:	42a2      	cmp	r2, r4
 80017f6:	d800      	bhi.n	80017fa <__aeabi_ddiv+0x532>
 80017f8:	e61a      	b.n	8001430 <__aeabi_ddiv+0x168>
 80017fa:	1e83      	subs	r3, r0, #2
 80017fc:	4464      	add	r4, ip
 80017fe:	e617      	b.n	8001430 <__aeabi_ddiv+0x168>
 8001800:	428a      	cmp	r2, r1
 8001802:	d800      	bhi.n	8001806 <__aeabi_ddiv+0x53e>
 8001804:	e600      	b.n	8001408 <__aeabi_ddiv+0x140>
 8001806:	46ac      	mov	ip, r5
 8001808:	1e83      	subs	r3, r0, #2
 800180a:	4698      	mov	r8, r3
 800180c:	4461      	add	r1, ip
 800180e:	e5fb      	b.n	8001408 <__aeabi_ddiv+0x140>
 8001810:	4837      	ldr	r0, [pc, #220]	@ (80018f0 <__aeabi_ddiv+0x628>)
 8001812:	0014      	movs	r4, r2
 8001814:	4450      	add	r0, sl
 8001816:	4082      	lsls	r2, r0
 8001818:	465b      	mov	r3, fp
 800181a:	0017      	movs	r7, r2
 800181c:	4083      	lsls	r3, r0
 800181e:	40cc      	lsrs	r4, r1
 8001820:	1e7a      	subs	r2, r7, #1
 8001822:	4197      	sbcs	r7, r2
 8001824:	4323      	orrs	r3, r4
 8001826:	433b      	orrs	r3, r7
 8001828:	001a      	movs	r2, r3
 800182a:	465b      	mov	r3, fp
 800182c:	40cb      	lsrs	r3, r1
 800182e:	0751      	lsls	r1, r2, #29
 8001830:	d009      	beq.n	8001846 <__aeabi_ddiv+0x57e>
 8001832:	210f      	movs	r1, #15
 8001834:	4011      	ands	r1, r2
 8001836:	2904      	cmp	r1, #4
 8001838:	d005      	beq.n	8001846 <__aeabi_ddiv+0x57e>
 800183a:	1d11      	adds	r1, r2, #4
 800183c:	4291      	cmp	r1, r2
 800183e:	4192      	sbcs	r2, r2
 8001840:	4252      	negs	r2, r2
 8001842:	189b      	adds	r3, r3, r2
 8001844:	000a      	movs	r2, r1
 8001846:	0219      	lsls	r1, r3, #8
 8001848:	d400      	bmi.n	800184c <__aeabi_ddiv+0x584>
 800184a:	e755      	b.n	80016f8 <__aeabi_ddiv+0x430>
 800184c:	2200      	movs	r2, #0
 800184e:	2301      	movs	r3, #1
 8001850:	2400      	movs	r4, #0
 8001852:	4690      	mov	r8, r2
 8001854:	e598      	b.n	8001388 <__aeabi_ddiv+0xc0>
 8001856:	000a      	movs	r2, r1
 8001858:	42bc      	cmp	r4, r7
 800185a:	d000      	beq.n	800185e <__aeabi_ddiv+0x596>
 800185c:	e66e      	b.n	800153c <__aeabi_ddiv+0x274>
 800185e:	454b      	cmp	r3, r9
 8001860:	d000      	beq.n	8001864 <__aeabi_ddiv+0x59c>
 8001862:	e66b      	b.n	800153c <__aeabi_ddiv+0x274>
 8001864:	e66c      	b.n	8001540 <__aeabi_ddiv+0x278>
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <__aeabi_ddiv+0x62c>)
 8001868:	4a23      	ldr	r2, [pc, #140]	@ (80018f8 <__aeabi_ddiv+0x630>)
 800186a:	4453      	add	r3, sl
 800186c:	4592      	cmp	sl, r2
 800186e:	da00      	bge.n	8001872 <__aeabi_ddiv+0x5aa>
 8001870:	e718      	b.n	80016a4 <__aeabi_ddiv+0x3dc>
 8001872:	2101      	movs	r1, #1
 8001874:	4249      	negs	r1, r1
 8001876:	1d0a      	adds	r2, r1, #4
 8001878:	428a      	cmp	r2, r1
 800187a:	4189      	sbcs	r1, r1
 800187c:	4249      	negs	r1, r1
 800187e:	448b      	add	fp, r1
 8001880:	e666      	b.n	8001550 <__aeabi_ddiv+0x288>
 8001882:	210f      	movs	r1, #15
 8001884:	4011      	ands	r1, r2
 8001886:	2904      	cmp	r1, #4
 8001888:	d100      	bne.n	800188c <__aeabi_ddiv+0x5c4>
 800188a:	e661      	b.n	8001550 <__aeabi_ddiv+0x288>
 800188c:	0011      	movs	r1, r2
 800188e:	e7f2      	b.n	8001876 <__aeabi_ddiv+0x5ae>
 8001890:	42bc      	cmp	r4, r7
 8001892:	d800      	bhi.n	8001896 <__aeabi_ddiv+0x5ce>
 8001894:	e60a      	b.n	80014ac <__aeabi_ddiv+0x1e4>
 8001896:	2302      	movs	r3, #2
 8001898:	425b      	negs	r3, r3
 800189a:	469c      	mov	ip, r3
 800189c:	9900      	ldr	r1, [sp, #0]
 800189e:	444f      	add	r7, r9
 80018a0:	454f      	cmp	r7, r9
 80018a2:	419b      	sbcs	r3, r3
 80018a4:	44e3      	add	fp, ip
 80018a6:	468c      	mov	ip, r1
 80018a8:	425b      	negs	r3, r3
 80018aa:	4463      	add	r3, ip
 80018ac:	18c0      	adds	r0, r0, r3
 80018ae:	e5ff      	b.n	80014b0 <__aeabi_ddiv+0x1e8>
 80018b0:	4649      	mov	r1, r9
 80018b2:	9d00      	ldr	r5, [sp, #0]
 80018b4:	0048      	lsls	r0, r1, #1
 80018b6:	4548      	cmp	r0, r9
 80018b8:	4189      	sbcs	r1, r1
 80018ba:	46ac      	mov	ip, r5
 80018bc:	4249      	negs	r1, r1
 80018be:	4461      	add	r1, ip
 80018c0:	4681      	mov	r9, r0
 80018c2:	3a02      	subs	r2, #2
 80018c4:	1864      	adds	r4, r4, r1
 80018c6:	e7c7      	b.n	8001858 <__aeabi_ddiv+0x590>
 80018c8:	2480      	movs	r4, #128	@ 0x80
 80018ca:	465b      	mov	r3, fp
 80018cc:	0324      	lsls	r4, r4, #12
 80018ce:	431c      	orrs	r4, r3
 80018d0:	0324      	lsls	r4, r4, #12
 80018d2:	4690      	mov	r8, r2
 80018d4:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <__aeabi_ddiv+0x620>)
 80018d6:	0b24      	lsrs	r4, r4, #12
 80018d8:	e556      	b.n	8001388 <__aeabi_ddiv+0xc0>
 80018da:	4599      	cmp	r9, r3
 80018dc:	d3e8      	bcc.n	80018b0 <__aeabi_ddiv+0x5e8>
 80018de:	000a      	movs	r2, r1
 80018e0:	e7bd      	b.n	800185e <__aeabi_ddiv+0x596>
 80018e2:	2300      	movs	r3, #0
 80018e4:	e708      	b.n	80016f8 <__aeabi_ddiv+0x430>
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	000007ff 	.word	0x000007ff
 80018ec:	0000043e 	.word	0x0000043e
 80018f0:	0000041e 	.word	0x0000041e
 80018f4:	000003ff 	.word	0x000003ff
 80018f8:	fffffc02 	.word	0xfffffc02

080018fc <__eqdf2>:
 80018fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fe:	4657      	mov	r7, sl
 8001900:	46de      	mov	lr, fp
 8001902:	464e      	mov	r6, r9
 8001904:	4645      	mov	r5, r8
 8001906:	b5e0      	push	{r5, r6, r7, lr}
 8001908:	000d      	movs	r5, r1
 800190a:	0004      	movs	r4, r0
 800190c:	0fe8      	lsrs	r0, r5, #31
 800190e:	4683      	mov	fp, r0
 8001910:	0309      	lsls	r1, r1, #12
 8001912:	0fd8      	lsrs	r0, r3, #31
 8001914:	0b09      	lsrs	r1, r1, #12
 8001916:	4682      	mov	sl, r0
 8001918:	4819      	ldr	r0, [pc, #100]	@ (8001980 <__eqdf2+0x84>)
 800191a:	468c      	mov	ip, r1
 800191c:	031f      	lsls	r7, r3, #12
 800191e:	0069      	lsls	r1, r5, #1
 8001920:	005e      	lsls	r6, r3, #1
 8001922:	0d49      	lsrs	r1, r1, #21
 8001924:	0b3f      	lsrs	r7, r7, #12
 8001926:	0d76      	lsrs	r6, r6, #21
 8001928:	4281      	cmp	r1, r0
 800192a:	d018      	beq.n	800195e <__eqdf2+0x62>
 800192c:	4286      	cmp	r6, r0
 800192e:	d00f      	beq.n	8001950 <__eqdf2+0x54>
 8001930:	2001      	movs	r0, #1
 8001932:	42b1      	cmp	r1, r6
 8001934:	d10d      	bne.n	8001952 <__eqdf2+0x56>
 8001936:	45bc      	cmp	ip, r7
 8001938:	d10b      	bne.n	8001952 <__eqdf2+0x56>
 800193a:	4294      	cmp	r4, r2
 800193c:	d109      	bne.n	8001952 <__eqdf2+0x56>
 800193e:	45d3      	cmp	fp, sl
 8001940:	d01c      	beq.n	800197c <__eqdf2+0x80>
 8001942:	2900      	cmp	r1, #0
 8001944:	d105      	bne.n	8001952 <__eqdf2+0x56>
 8001946:	4660      	mov	r0, ip
 8001948:	4320      	orrs	r0, r4
 800194a:	1e43      	subs	r3, r0, #1
 800194c:	4198      	sbcs	r0, r3
 800194e:	e000      	b.n	8001952 <__eqdf2+0x56>
 8001950:	2001      	movs	r0, #1
 8001952:	bcf0      	pop	{r4, r5, r6, r7}
 8001954:	46bb      	mov	fp, r7
 8001956:	46b2      	mov	sl, r6
 8001958:	46a9      	mov	r9, r5
 800195a:	46a0      	mov	r8, r4
 800195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195e:	2001      	movs	r0, #1
 8001960:	428e      	cmp	r6, r1
 8001962:	d1f6      	bne.n	8001952 <__eqdf2+0x56>
 8001964:	4661      	mov	r1, ip
 8001966:	4339      	orrs	r1, r7
 8001968:	000f      	movs	r7, r1
 800196a:	4317      	orrs	r7, r2
 800196c:	4327      	orrs	r7, r4
 800196e:	d1f0      	bne.n	8001952 <__eqdf2+0x56>
 8001970:	465b      	mov	r3, fp
 8001972:	4652      	mov	r2, sl
 8001974:	1a98      	subs	r0, r3, r2
 8001976:	1e43      	subs	r3, r0, #1
 8001978:	4198      	sbcs	r0, r3
 800197a:	e7ea      	b.n	8001952 <__eqdf2+0x56>
 800197c:	2000      	movs	r0, #0
 800197e:	e7e8      	b.n	8001952 <__eqdf2+0x56>
 8001980:	000007ff 	.word	0x000007ff

08001984 <__gedf2>:
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	4657      	mov	r7, sl
 8001988:	464e      	mov	r6, r9
 800198a:	4645      	mov	r5, r8
 800198c:	46de      	mov	lr, fp
 800198e:	b5e0      	push	{r5, r6, r7, lr}
 8001990:	000d      	movs	r5, r1
 8001992:	030f      	lsls	r7, r1, #12
 8001994:	0b39      	lsrs	r1, r7, #12
 8001996:	b083      	sub	sp, #12
 8001998:	0004      	movs	r4, r0
 800199a:	4680      	mov	r8, r0
 800199c:	9101      	str	r1, [sp, #4]
 800199e:	0058      	lsls	r0, r3, #1
 80019a0:	0fe9      	lsrs	r1, r5, #31
 80019a2:	4f31      	ldr	r7, [pc, #196]	@ (8001a68 <__gedf2+0xe4>)
 80019a4:	0d40      	lsrs	r0, r0, #21
 80019a6:	468c      	mov	ip, r1
 80019a8:	006e      	lsls	r6, r5, #1
 80019aa:	0319      	lsls	r1, r3, #12
 80019ac:	4682      	mov	sl, r0
 80019ae:	4691      	mov	r9, r2
 80019b0:	0d76      	lsrs	r6, r6, #21
 80019b2:	0b09      	lsrs	r1, r1, #12
 80019b4:	0fd8      	lsrs	r0, r3, #31
 80019b6:	42be      	cmp	r6, r7
 80019b8:	d01f      	beq.n	80019fa <__gedf2+0x76>
 80019ba:	45ba      	cmp	sl, r7
 80019bc:	d00f      	beq.n	80019de <__gedf2+0x5a>
 80019be:	2e00      	cmp	r6, #0
 80019c0:	d12f      	bne.n	8001a22 <__gedf2+0x9e>
 80019c2:	4655      	mov	r5, sl
 80019c4:	9e01      	ldr	r6, [sp, #4]
 80019c6:	4334      	orrs	r4, r6
 80019c8:	2d00      	cmp	r5, #0
 80019ca:	d127      	bne.n	8001a1c <__gedf2+0x98>
 80019cc:	430a      	orrs	r2, r1
 80019ce:	d03a      	beq.n	8001a46 <__gedf2+0xc2>
 80019d0:	2c00      	cmp	r4, #0
 80019d2:	d145      	bne.n	8001a60 <__gedf2+0xdc>
 80019d4:	2800      	cmp	r0, #0
 80019d6:	d11a      	bne.n	8001a0e <__gedf2+0x8a>
 80019d8:	2001      	movs	r0, #1
 80019da:	4240      	negs	r0, r0
 80019dc:	e017      	b.n	8001a0e <__gedf2+0x8a>
 80019de:	4311      	orrs	r1, r2
 80019e0:	d13b      	bne.n	8001a5a <__gedf2+0xd6>
 80019e2:	2e00      	cmp	r6, #0
 80019e4:	d102      	bne.n	80019ec <__gedf2+0x68>
 80019e6:	9f01      	ldr	r7, [sp, #4]
 80019e8:	4327      	orrs	r7, r4
 80019ea:	d0f3      	beq.n	80019d4 <__gedf2+0x50>
 80019ec:	4584      	cmp	ip, r0
 80019ee:	d109      	bne.n	8001a04 <__gedf2+0x80>
 80019f0:	4663      	mov	r3, ip
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <__gedf2+0x54>
 80019f6:	4660      	mov	r0, ip
 80019f8:	e009      	b.n	8001a0e <__gedf2+0x8a>
 80019fa:	9f01      	ldr	r7, [sp, #4]
 80019fc:	4327      	orrs	r7, r4
 80019fe:	d12c      	bne.n	8001a5a <__gedf2+0xd6>
 8001a00:	45b2      	cmp	sl, r6
 8001a02:	d024      	beq.n	8001a4e <__gedf2+0xca>
 8001a04:	4663      	mov	r3, ip
 8001a06:	2002      	movs	r0, #2
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	4018      	ands	r0, r3
 8001a0c:	3801      	subs	r0, #1
 8001a0e:	b003      	add	sp, #12
 8001a10:	bcf0      	pop	{r4, r5, r6, r7}
 8001a12:	46bb      	mov	fp, r7
 8001a14:	46b2      	mov	sl, r6
 8001a16:	46a9      	mov	r9, r5
 8001a18:	46a0      	mov	r8, r4
 8001a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a1c:	2c00      	cmp	r4, #0
 8001a1e:	d0d9      	beq.n	80019d4 <__gedf2+0x50>
 8001a20:	e7e4      	b.n	80019ec <__gedf2+0x68>
 8001a22:	4654      	mov	r4, sl
 8001a24:	2c00      	cmp	r4, #0
 8001a26:	d0ed      	beq.n	8001a04 <__gedf2+0x80>
 8001a28:	4584      	cmp	ip, r0
 8001a2a:	d1eb      	bne.n	8001a04 <__gedf2+0x80>
 8001a2c:	4556      	cmp	r6, sl
 8001a2e:	dce9      	bgt.n	8001a04 <__gedf2+0x80>
 8001a30:	dbde      	blt.n	80019f0 <__gedf2+0x6c>
 8001a32:	9b01      	ldr	r3, [sp, #4]
 8001a34:	428b      	cmp	r3, r1
 8001a36:	d8e5      	bhi.n	8001a04 <__gedf2+0x80>
 8001a38:	d1da      	bne.n	80019f0 <__gedf2+0x6c>
 8001a3a:	45c8      	cmp	r8, r9
 8001a3c:	d8e2      	bhi.n	8001a04 <__gedf2+0x80>
 8001a3e:	2000      	movs	r0, #0
 8001a40:	45c8      	cmp	r8, r9
 8001a42:	d2e4      	bcs.n	8001a0e <__gedf2+0x8a>
 8001a44:	e7d4      	b.n	80019f0 <__gedf2+0x6c>
 8001a46:	2000      	movs	r0, #0
 8001a48:	2c00      	cmp	r4, #0
 8001a4a:	d0e0      	beq.n	8001a0e <__gedf2+0x8a>
 8001a4c:	e7da      	b.n	8001a04 <__gedf2+0x80>
 8001a4e:	4311      	orrs	r1, r2
 8001a50:	d103      	bne.n	8001a5a <__gedf2+0xd6>
 8001a52:	4584      	cmp	ip, r0
 8001a54:	d1d6      	bne.n	8001a04 <__gedf2+0x80>
 8001a56:	2000      	movs	r0, #0
 8001a58:	e7d9      	b.n	8001a0e <__gedf2+0x8a>
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	4240      	negs	r0, r0
 8001a5e:	e7d6      	b.n	8001a0e <__gedf2+0x8a>
 8001a60:	4584      	cmp	ip, r0
 8001a62:	d0e6      	beq.n	8001a32 <__gedf2+0xae>
 8001a64:	e7ce      	b.n	8001a04 <__gedf2+0x80>
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	000007ff 	.word	0x000007ff

08001a6c <__ledf2>:
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	4657      	mov	r7, sl
 8001a70:	464e      	mov	r6, r9
 8001a72:	4645      	mov	r5, r8
 8001a74:	46de      	mov	lr, fp
 8001a76:	b5e0      	push	{r5, r6, r7, lr}
 8001a78:	000d      	movs	r5, r1
 8001a7a:	030f      	lsls	r7, r1, #12
 8001a7c:	0004      	movs	r4, r0
 8001a7e:	4680      	mov	r8, r0
 8001a80:	0fe8      	lsrs	r0, r5, #31
 8001a82:	0b39      	lsrs	r1, r7, #12
 8001a84:	4684      	mov	ip, r0
 8001a86:	b083      	sub	sp, #12
 8001a88:	0058      	lsls	r0, r3, #1
 8001a8a:	4f30      	ldr	r7, [pc, #192]	@ (8001b4c <__ledf2+0xe0>)
 8001a8c:	0d40      	lsrs	r0, r0, #21
 8001a8e:	9101      	str	r1, [sp, #4]
 8001a90:	031e      	lsls	r6, r3, #12
 8001a92:	0069      	lsls	r1, r5, #1
 8001a94:	4682      	mov	sl, r0
 8001a96:	4691      	mov	r9, r2
 8001a98:	0d49      	lsrs	r1, r1, #21
 8001a9a:	0b36      	lsrs	r6, r6, #12
 8001a9c:	0fd8      	lsrs	r0, r3, #31
 8001a9e:	42b9      	cmp	r1, r7
 8001aa0:	d020      	beq.n	8001ae4 <__ledf2+0x78>
 8001aa2:	45ba      	cmp	sl, r7
 8001aa4:	d00f      	beq.n	8001ac6 <__ledf2+0x5a>
 8001aa6:	2900      	cmp	r1, #0
 8001aa8:	d12b      	bne.n	8001b02 <__ledf2+0x96>
 8001aaa:	9901      	ldr	r1, [sp, #4]
 8001aac:	430c      	orrs	r4, r1
 8001aae:	4651      	mov	r1, sl
 8001ab0:	2900      	cmp	r1, #0
 8001ab2:	d137      	bne.n	8001b24 <__ledf2+0xb8>
 8001ab4:	4332      	orrs	r2, r6
 8001ab6:	d038      	beq.n	8001b2a <__ledf2+0xbe>
 8001ab8:	2c00      	cmp	r4, #0
 8001aba:	d144      	bne.n	8001b46 <__ledf2+0xda>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d119      	bne.n	8001af4 <__ledf2+0x88>
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	4240      	negs	r0, r0
 8001ac4:	e016      	b.n	8001af4 <__ledf2+0x88>
 8001ac6:	4316      	orrs	r6, r2
 8001ac8:	d113      	bne.n	8001af2 <__ledf2+0x86>
 8001aca:	2900      	cmp	r1, #0
 8001acc:	d102      	bne.n	8001ad4 <__ledf2+0x68>
 8001ace:	9f01      	ldr	r7, [sp, #4]
 8001ad0:	4327      	orrs	r7, r4
 8001ad2:	d0f3      	beq.n	8001abc <__ledf2+0x50>
 8001ad4:	4584      	cmp	ip, r0
 8001ad6:	d020      	beq.n	8001b1a <__ledf2+0xae>
 8001ad8:	4663      	mov	r3, ip
 8001ada:	2002      	movs	r0, #2
 8001adc:	3b01      	subs	r3, #1
 8001ade:	4018      	ands	r0, r3
 8001ae0:	3801      	subs	r0, #1
 8001ae2:	e007      	b.n	8001af4 <__ledf2+0x88>
 8001ae4:	9f01      	ldr	r7, [sp, #4]
 8001ae6:	4327      	orrs	r7, r4
 8001ae8:	d103      	bne.n	8001af2 <__ledf2+0x86>
 8001aea:	458a      	cmp	sl, r1
 8001aec:	d1f4      	bne.n	8001ad8 <__ledf2+0x6c>
 8001aee:	4316      	orrs	r6, r2
 8001af0:	d01f      	beq.n	8001b32 <__ledf2+0xc6>
 8001af2:	2002      	movs	r0, #2
 8001af4:	b003      	add	sp, #12
 8001af6:	bcf0      	pop	{r4, r5, r6, r7}
 8001af8:	46bb      	mov	fp, r7
 8001afa:	46b2      	mov	sl, r6
 8001afc:	46a9      	mov	r9, r5
 8001afe:	46a0      	mov	r8, r4
 8001b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b02:	4654      	mov	r4, sl
 8001b04:	2c00      	cmp	r4, #0
 8001b06:	d0e7      	beq.n	8001ad8 <__ledf2+0x6c>
 8001b08:	4584      	cmp	ip, r0
 8001b0a:	d1e5      	bne.n	8001ad8 <__ledf2+0x6c>
 8001b0c:	4551      	cmp	r1, sl
 8001b0e:	dce3      	bgt.n	8001ad8 <__ledf2+0x6c>
 8001b10:	db03      	blt.n	8001b1a <__ledf2+0xae>
 8001b12:	9b01      	ldr	r3, [sp, #4]
 8001b14:	42b3      	cmp	r3, r6
 8001b16:	d8df      	bhi.n	8001ad8 <__ledf2+0x6c>
 8001b18:	d00f      	beq.n	8001b3a <__ledf2+0xce>
 8001b1a:	4663      	mov	r3, ip
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0cf      	beq.n	8001ac0 <__ledf2+0x54>
 8001b20:	4660      	mov	r0, ip
 8001b22:	e7e7      	b.n	8001af4 <__ledf2+0x88>
 8001b24:	2c00      	cmp	r4, #0
 8001b26:	d0c9      	beq.n	8001abc <__ledf2+0x50>
 8001b28:	e7d4      	b.n	8001ad4 <__ledf2+0x68>
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	2c00      	cmp	r4, #0
 8001b2e:	d0e1      	beq.n	8001af4 <__ledf2+0x88>
 8001b30:	e7d2      	b.n	8001ad8 <__ledf2+0x6c>
 8001b32:	4584      	cmp	ip, r0
 8001b34:	d1d0      	bne.n	8001ad8 <__ledf2+0x6c>
 8001b36:	2000      	movs	r0, #0
 8001b38:	e7dc      	b.n	8001af4 <__ledf2+0x88>
 8001b3a:	45c8      	cmp	r8, r9
 8001b3c:	d8cc      	bhi.n	8001ad8 <__ledf2+0x6c>
 8001b3e:	2000      	movs	r0, #0
 8001b40:	45c8      	cmp	r8, r9
 8001b42:	d2d7      	bcs.n	8001af4 <__ledf2+0x88>
 8001b44:	e7e9      	b.n	8001b1a <__ledf2+0xae>
 8001b46:	4584      	cmp	ip, r0
 8001b48:	d0e3      	beq.n	8001b12 <__ledf2+0xa6>
 8001b4a:	e7c5      	b.n	8001ad8 <__ledf2+0x6c>
 8001b4c:	000007ff 	.word	0x000007ff

08001b50 <__aeabi_dmul>:
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	4657      	mov	r7, sl
 8001b54:	46de      	mov	lr, fp
 8001b56:	464e      	mov	r6, r9
 8001b58:	4645      	mov	r5, r8
 8001b5a:	b5e0      	push	{r5, r6, r7, lr}
 8001b5c:	001f      	movs	r7, r3
 8001b5e:	030b      	lsls	r3, r1, #12
 8001b60:	0b1b      	lsrs	r3, r3, #12
 8001b62:	0016      	movs	r6, r2
 8001b64:	469a      	mov	sl, r3
 8001b66:	0fca      	lsrs	r2, r1, #31
 8001b68:	004b      	lsls	r3, r1, #1
 8001b6a:	0004      	movs	r4, r0
 8001b6c:	4693      	mov	fp, r2
 8001b6e:	b087      	sub	sp, #28
 8001b70:	0d5b      	lsrs	r3, r3, #21
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dmul+0x26>
 8001b74:	e0d5      	b.n	8001d22 <__aeabi_dmul+0x1d2>
 8001b76:	4abb      	ldr	r2, [pc, #748]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dmul+0x2e>
 8001b7c:	e0f8      	b.n	8001d70 <__aeabi_dmul+0x220>
 8001b7e:	4651      	mov	r1, sl
 8001b80:	0f42      	lsrs	r2, r0, #29
 8001b82:	00c9      	lsls	r1, r1, #3
 8001b84:	430a      	orrs	r2, r1
 8001b86:	2180      	movs	r1, #128	@ 0x80
 8001b88:	0409      	lsls	r1, r1, #16
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	00c2      	lsls	r2, r0, #3
 8001b8e:	4691      	mov	r9, r2
 8001b90:	4ab5      	ldr	r2, [pc, #724]	@ (8001e68 <__aeabi_dmul+0x318>)
 8001b92:	468a      	mov	sl, r1
 8001b94:	189d      	adds	r5, r3, r2
 8001b96:	2300      	movs	r3, #0
 8001b98:	4698      	mov	r8, r3
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	033c      	lsls	r4, r7, #12
 8001b9e:	007b      	lsls	r3, r7, #1
 8001ba0:	0ffa      	lsrs	r2, r7, #31
 8001ba2:	0030      	movs	r0, r6
 8001ba4:	0b24      	lsrs	r4, r4, #12
 8001ba6:	0d5b      	lsrs	r3, r3, #21
 8001ba8:	9200      	str	r2, [sp, #0]
 8001baa:	d100      	bne.n	8001bae <__aeabi_dmul+0x5e>
 8001bac:	e096      	b.n	8001cdc <__aeabi_dmul+0x18c>
 8001bae:	4aad      	ldr	r2, [pc, #692]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <__aeabi_dmul+0xc8>
 8001bb4:	0f72      	lsrs	r2, r6, #29
 8001bb6:	00e4      	lsls	r4, r4, #3
 8001bb8:	4322      	orrs	r2, r4
 8001bba:	2480      	movs	r4, #128	@ 0x80
 8001bbc:	0424      	lsls	r4, r4, #16
 8001bbe:	4314      	orrs	r4, r2
 8001bc0:	4aa9      	ldr	r2, [pc, #676]	@ (8001e68 <__aeabi_dmul+0x318>)
 8001bc2:	00f0      	lsls	r0, r6, #3
 8001bc4:	4694      	mov	ip, r2
 8001bc6:	4463      	add	r3, ip
 8001bc8:	195b      	adds	r3, r3, r5
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	9201      	str	r2, [sp, #4]
 8001bce:	4642      	mov	r2, r8
 8001bd0:	2600      	movs	r6, #0
 8001bd2:	2a0a      	cmp	r2, #10
 8001bd4:	dc42      	bgt.n	8001c5c <__aeabi_dmul+0x10c>
 8001bd6:	465a      	mov	r2, fp
 8001bd8:	9900      	ldr	r1, [sp, #0]
 8001bda:	404a      	eors	r2, r1
 8001bdc:	4693      	mov	fp, r2
 8001bde:	4642      	mov	r2, r8
 8001be0:	2a02      	cmp	r2, #2
 8001be2:	dc32      	bgt.n	8001c4a <__aeabi_dmul+0xfa>
 8001be4:	3a01      	subs	r2, #1
 8001be6:	2a01      	cmp	r2, #1
 8001be8:	d900      	bls.n	8001bec <__aeabi_dmul+0x9c>
 8001bea:	e149      	b.n	8001e80 <__aeabi_dmul+0x330>
 8001bec:	2e02      	cmp	r6, #2
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dmul+0xa2>
 8001bf0:	e0ca      	b.n	8001d88 <__aeabi_dmul+0x238>
 8001bf2:	2e01      	cmp	r6, #1
 8001bf4:	d13d      	bne.n	8001c72 <__aeabi_dmul+0x122>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2400      	movs	r4, #0
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	465a      	mov	r2, fp
 8001c00:	051b      	lsls	r3, r3, #20
 8001c02:	4323      	orrs	r3, r4
 8001c04:	07d2      	lsls	r2, r2, #31
 8001c06:	4313      	orrs	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	b007      	add	sp, #28
 8001c0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c0e:	46bb      	mov	fp, r7
 8001c10:	46b2      	mov	sl, r6
 8001c12:	46a9      	mov	r9, r5
 8001c14:	46a0      	mov	r8, r4
 8001c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c18:	4b92      	ldr	r3, [pc, #584]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001c1a:	4326      	orrs	r6, r4
 8001c1c:	18eb      	adds	r3, r5, r3
 8001c1e:	2e00      	cmp	r6, #0
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dmul+0xd4>
 8001c22:	e0bb      	b.n	8001d9c <__aeabi_dmul+0x24c>
 8001c24:	2203      	movs	r2, #3
 8001c26:	4641      	mov	r1, r8
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	465a      	mov	r2, fp
 8001c2c:	4688      	mov	r8, r1
 8001c2e:	9900      	ldr	r1, [sp, #0]
 8001c30:	404a      	eors	r2, r1
 8001c32:	2180      	movs	r1, #128	@ 0x80
 8001c34:	0109      	lsls	r1, r1, #4
 8001c36:	468c      	mov	ip, r1
 8001c38:	0029      	movs	r1, r5
 8001c3a:	4461      	add	r1, ip
 8001c3c:	9101      	str	r1, [sp, #4]
 8001c3e:	4641      	mov	r1, r8
 8001c40:	290a      	cmp	r1, #10
 8001c42:	dd00      	ble.n	8001c46 <__aeabi_dmul+0xf6>
 8001c44:	e233      	b.n	80020ae <__aeabi_dmul+0x55e>
 8001c46:	4693      	mov	fp, r2
 8001c48:	2603      	movs	r6, #3
 8001c4a:	4642      	mov	r2, r8
 8001c4c:	2701      	movs	r7, #1
 8001c4e:	4097      	lsls	r7, r2
 8001c50:	21a6      	movs	r1, #166	@ 0xa6
 8001c52:	003a      	movs	r2, r7
 8001c54:	00c9      	lsls	r1, r1, #3
 8001c56:	400a      	ands	r2, r1
 8001c58:	420f      	tst	r7, r1
 8001c5a:	d031      	beq.n	8001cc0 <__aeabi_dmul+0x170>
 8001c5c:	9e02      	ldr	r6, [sp, #8]
 8001c5e:	2e02      	cmp	r6, #2
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dmul+0x114>
 8001c62:	e235      	b.n	80020d0 <__aeabi_dmul+0x580>
 8001c64:	2e03      	cmp	r6, #3
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dmul+0x11a>
 8001c68:	e1d2      	b.n	8002010 <__aeabi_dmul+0x4c0>
 8001c6a:	4654      	mov	r4, sl
 8001c6c:	4648      	mov	r0, r9
 8001c6e:	2e01      	cmp	r6, #1
 8001c70:	d0c1      	beq.n	8001bf6 <__aeabi_dmul+0xa6>
 8001c72:	9a01      	ldr	r2, [sp, #4]
 8001c74:	4b7d      	ldr	r3, [pc, #500]	@ (8001e6c <__aeabi_dmul+0x31c>)
 8001c76:	4694      	mov	ip, r2
 8001c78:	4463      	add	r3, ip
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	dc00      	bgt.n	8001c80 <__aeabi_dmul+0x130>
 8001c7e:	e0c0      	b.n	8001e02 <__aeabi_dmul+0x2b2>
 8001c80:	0742      	lsls	r2, r0, #29
 8001c82:	d009      	beq.n	8001c98 <__aeabi_dmul+0x148>
 8001c84:	220f      	movs	r2, #15
 8001c86:	4002      	ands	r2, r0
 8001c88:	2a04      	cmp	r2, #4
 8001c8a:	d005      	beq.n	8001c98 <__aeabi_dmul+0x148>
 8001c8c:	1d02      	adds	r2, r0, #4
 8001c8e:	4282      	cmp	r2, r0
 8001c90:	4180      	sbcs	r0, r0
 8001c92:	4240      	negs	r0, r0
 8001c94:	1824      	adds	r4, r4, r0
 8001c96:	0010      	movs	r0, r2
 8001c98:	01e2      	lsls	r2, r4, #7
 8001c9a:	d506      	bpl.n	8001caa <__aeabi_dmul+0x15a>
 8001c9c:	4b74      	ldr	r3, [pc, #464]	@ (8001e70 <__aeabi_dmul+0x320>)
 8001c9e:	9a01      	ldr	r2, [sp, #4]
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	4694      	mov	ip, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4463      	add	r3, ip
 8001caa:	4a72      	ldr	r2, [pc, #456]	@ (8001e74 <__aeabi_dmul+0x324>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	dc6b      	bgt.n	8001d88 <__aeabi_dmul+0x238>
 8001cb0:	0762      	lsls	r2, r4, #29
 8001cb2:	08c0      	lsrs	r0, r0, #3
 8001cb4:	0264      	lsls	r4, r4, #9
 8001cb6:	055b      	lsls	r3, r3, #21
 8001cb8:	4302      	orrs	r2, r0
 8001cba:	0b24      	lsrs	r4, r4, #12
 8001cbc:	0d5b      	lsrs	r3, r3, #21
 8001cbe:	e79d      	b.n	8001bfc <__aeabi_dmul+0xac>
 8001cc0:	2190      	movs	r1, #144	@ 0x90
 8001cc2:	0089      	lsls	r1, r1, #2
 8001cc4:	420f      	tst	r7, r1
 8001cc6:	d163      	bne.n	8001d90 <__aeabi_dmul+0x240>
 8001cc8:	2288      	movs	r2, #136	@ 0x88
 8001cca:	423a      	tst	r2, r7
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dmul+0x180>
 8001cce:	e0d7      	b.n	8001e80 <__aeabi_dmul+0x330>
 8001cd0:	9b00      	ldr	r3, [sp, #0]
 8001cd2:	46a2      	mov	sl, r4
 8001cd4:	469b      	mov	fp, r3
 8001cd6:	4681      	mov	r9, r0
 8001cd8:	9602      	str	r6, [sp, #8]
 8001cda:	e7bf      	b.n	8001c5c <__aeabi_dmul+0x10c>
 8001cdc:	0023      	movs	r3, r4
 8001cde:	4333      	orrs	r3, r6
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dmul+0x194>
 8001ce2:	e07f      	b.n	8001de4 <__aeabi_dmul+0x294>
 8001ce4:	2c00      	cmp	r4, #0
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dmul+0x19a>
 8001ce8:	e1ad      	b.n	8002046 <__aeabi_dmul+0x4f6>
 8001cea:	0020      	movs	r0, r4
 8001cec:	f000 fec8 	bl	8002a80 <__clzsi2>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	3a0b      	subs	r2, #11
 8001cf6:	201d      	movs	r0, #29
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	1a82      	subs	r2, r0, r2
 8001cfc:	0030      	movs	r0, r6
 8001cfe:	3908      	subs	r1, #8
 8001d00:	40d0      	lsrs	r0, r2
 8001d02:	408c      	lsls	r4, r1
 8001d04:	4304      	orrs	r4, r0
 8001d06:	0030      	movs	r0, r6
 8001d08:	4088      	lsls	r0, r1
 8001d0a:	4a5b      	ldr	r2, [pc, #364]	@ (8001e78 <__aeabi_dmul+0x328>)
 8001d0c:	1aeb      	subs	r3, r5, r3
 8001d0e:	4694      	mov	ip, r2
 8001d10:	4463      	add	r3, ip
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	9201      	str	r2, [sp, #4]
 8001d16:	4642      	mov	r2, r8
 8001d18:	2600      	movs	r6, #0
 8001d1a:	2a0a      	cmp	r2, #10
 8001d1c:	dc00      	bgt.n	8001d20 <__aeabi_dmul+0x1d0>
 8001d1e:	e75a      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001d20:	e79c      	b.n	8001c5c <__aeabi_dmul+0x10c>
 8001d22:	4653      	mov	r3, sl
 8001d24:	4303      	orrs	r3, r0
 8001d26:	4699      	mov	r9, r3
 8001d28:	d054      	beq.n	8001dd4 <__aeabi_dmul+0x284>
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dmul+0x1e2>
 8001d30:	e177      	b.n	8002022 <__aeabi_dmul+0x4d2>
 8001d32:	4650      	mov	r0, sl
 8001d34:	f000 fea4 	bl	8002a80 <__clzsi2>
 8001d38:	230b      	movs	r3, #11
 8001d3a:	425b      	negs	r3, r3
 8001d3c:	469c      	mov	ip, r3
 8001d3e:	0002      	movs	r2, r0
 8001d40:	4484      	add	ip, r0
 8001d42:	0011      	movs	r1, r2
 8001d44:	4650      	mov	r0, sl
 8001d46:	3908      	subs	r1, #8
 8001d48:	4088      	lsls	r0, r1
 8001d4a:	231d      	movs	r3, #29
 8001d4c:	4680      	mov	r8, r0
 8001d4e:	4660      	mov	r0, ip
 8001d50:	1a1b      	subs	r3, r3, r0
 8001d52:	0020      	movs	r0, r4
 8001d54:	40d8      	lsrs	r0, r3
 8001d56:	0003      	movs	r3, r0
 8001d58:	4640      	mov	r0, r8
 8001d5a:	4303      	orrs	r3, r0
 8001d5c:	469a      	mov	sl, r3
 8001d5e:	0023      	movs	r3, r4
 8001d60:	408b      	lsls	r3, r1
 8001d62:	4699      	mov	r9, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	4d44      	ldr	r5, [pc, #272]	@ (8001e78 <__aeabi_dmul+0x328>)
 8001d68:	4698      	mov	r8, r3
 8001d6a:	1aad      	subs	r5, r5, r2
 8001d6c:	9302      	str	r3, [sp, #8]
 8001d6e:	e715      	b.n	8001b9c <__aeabi_dmul+0x4c>
 8001d70:	4652      	mov	r2, sl
 8001d72:	4302      	orrs	r2, r0
 8001d74:	4691      	mov	r9, r2
 8001d76:	d126      	bne.n	8001dc6 <__aeabi_dmul+0x276>
 8001d78:	2200      	movs	r2, #0
 8001d7a:	001d      	movs	r5, r3
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	4692      	mov	sl, r2
 8001d80:	3208      	adds	r2, #8
 8001d82:	4690      	mov	r8, r2
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	e709      	b.n	8001b9c <__aeabi_dmul+0x4c>
 8001d88:	2400      	movs	r4, #0
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4b35      	ldr	r3, [pc, #212]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001d8e:	e735      	b.n	8001bfc <__aeabi_dmul+0xac>
 8001d90:	2300      	movs	r3, #0
 8001d92:	2480      	movs	r4, #128	@ 0x80
 8001d94:	469b      	mov	fp, r3
 8001d96:	0324      	lsls	r4, r4, #12
 8001d98:	4b32      	ldr	r3, [pc, #200]	@ (8001e64 <__aeabi_dmul+0x314>)
 8001d9a:	e72f      	b.n	8001bfc <__aeabi_dmul+0xac>
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	4641      	mov	r1, r8
 8001da0:	4311      	orrs	r1, r2
 8001da2:	2280      	movs	r2, #128	@ 0x80
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	4694      	mov	ip, r2
 8001da8:	002a      	movs	r2, r5
 8001daa:	4462      	add	r2, ip
 8001dac:	4688      	mov	r8, r1
 8001dae:	9201      	str	r2, [sp, #4]
 8001db0:	290a      	cmp	r1, #10
 8001db2:	dd00      	ble.n	8001db6 <__aeabi_dmul+0x266>
 8001db4:	e752      	b.n	8001c5c <__aeabi_dmul+0x10c>
 8001db6:	465a      	mov	r2, fp
 8001db8:	2000      	movs	r0, #0
 8001dba:	9900      	ldr	r1, [sp, #0]
 8001dbc:	0004      	movs	r4, r0
 8001dbe:	404a      	eors	r2, r1
 8001dc0:	4693      	mov	fp, r2
 8001dc2:	2602      	movs	r6, #2
 8001dc4:	e70b      	b.n	8001bde <__aeabi_dmul+0x8e>
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	001d      	movs	r5, r3
 8001dca:	2303      	movs	r3, #3
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4690      	mov	r8, r2
 8001dd0:	9302      	str	r3, [sp, #8]
 8001dd2:	e6e3      	b.n	8001b9c <__aeabi_dmul+0x4c>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	469a      	mov	sl, r3
 8001dd8:	3304      	adds	r3, #4
 8001dda:	4698      	mov	r8, r3
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	2500      	movs	r5, #0
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	e6db      	b.n	8001b9c <__aeabi_dmul+0x4c>
 8001de4:	4642      	mov	r2, r8
 8001de6:	3301      	adds	r3, #1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	002b      	movs	r3, r5
 8001dec:	4690      	mov	r8, r2
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	9201      	str	r2, [sp, #4]
 8001df2:	4642      	mov	r2, r8
 8001df4:	2400      	movs	r4, #0
 8001df6:	2000      	movs	r0, #0
 8001df8:	2601      	movs	r6, #1
 8001dfa:	2a0a      	cmp	r2, #10
 8001dfc:	dc00      	bgt.n	8001e00 <__aeabi_dmul+0x2b0>
 8001dfe:	e6ea      	b.n	8001bd6 <__aeabi_dmul+0x86>
 8001e00:	e72c      	b.n	8001c5c <__aeabi_dmul+0x10c>
 8001e02:	2201      	movs	r2, #1
 8001e04:	1ad2      	subs	r2, r2, r3
 8001e06:	2a38      	cmp	r2, #56	@ 0x38
 8001e08:	dd00      	ble.n	8001e0c <__aeabi_dmul+0x2bc>
 8001e0a:	e6f4      	b.n	8001bf6 <__aeabi_dmul+0xa6>
 8001e0c:	2a1f      	cmp	r2, #31
 8001e0e:	dc00      	bgt.n	8001e12 <__aeabi_dmul+0x2c2>
 8001e10:	e12a      	b.n	8002068 <__aeabi_dmul+0x518>
 8001e12:	211f      	movs	r1, #31
 8001e14:	4249      	negs	r1, r1
 8001e16:	1acb      	subs	r3, r1, r3
 8001e18:	0021      	movs	r1, r4
 8001e1a:	40d9      	lsrs	r1, r3
 8001e1c:	000b      	movs	r3, r1
 8001e1e:	2a20      	cmp	r2, #32
 8001e20:	d005      	beq.n	8001e2e <__aeabi_dmul+0x2de>
 8001e22:	4a16      	ldr	r2, [pc, #88]	@ (8001e7c <__aeabi_dmul+0x32c>)
 8001e24:	9d01      	ldr	r5, [sp, #4]
 8001e26:	4694      	mov	ip, r2
 8001e28:	4465      	add	r5, ip
 8001e2a:	40ac      	lsls	r4, r5
 8001e2c:	4320      	orrs	r0, r4
 8001e2e:	1e42      	subs	r2, r0, #1
 8001e30:	4190      	sbcs	r0, r2
 8001e32:	4318      	orrs	r0, r3
 8001e34:	2307      	movs	r3, #7
 8001e36:	0019      	movs	r1, r3
 8001e38:	2400      	movs	r4, #0
 8001e3a:	4001      	ands	r1, r0
 8001e3c:	4203      	tst	r3, r0
 8001e3e:	d00c      	beq.n	8001e5a <__aeabi_dmul+0x30a>
 8001e40:	230f      	movs	r3, #15
 8001e42:	4003      	ands	r3, r0
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dmul+0x2fa>
 8001e48:	e140      	b.n	80020cc <__aeabi_dmul+0x57c>
 8001e4a:	1d03      	adds	r3, r0, #4
 8001e4c:	4283      	cmp	r3, r0
 8001e4e:	41a4      	sbcs	r4, r4
 8001e50:	0018      	movs	r0, r3
 8001e52:	4264      	negs	r4, r4
 8001e54:	0761      	lsls	r1, r4, #29
 8001e56:	0264      	lsls	r4, r4, #9
 8001e58:	0b24      	lsrs	r4, r4, #12
 8001e5a:	08c2      	lsrs	r2, r0, #3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	e6cc      	b.n	8001bfc <__aeabi_dmul+0xac>
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	000007ff 	.word	0x000007ff
 8001e68:	fffffc01 	.word	0xfffffc01
 8001e6c:	000003ff 	.word	0x000003ff
 8001e70:	feffffff 	.word	0xfeffffff
 8001e74:	000007fe 	.word	0x000007fe
 8001e78:	fffffc0d 	.word	0xfffffc0d
 8001e7c:	0000043e 	.word	0x0000043e
 8001e80:	4649      	mov	r1, r9
 8001e82:	464a      	mov	r2, r9
 8001e84:	0409      	lsls	r1, r1, #16
 8001e86:	0c09      	lsrs	r1, r1, #16
 8001e88:	000d      	movs	r5, r1
 8001e8a:	0c16      	lsrs	r6, r2, #16
 8001e8c:	0c02      	lsrs	r2, r0, #16
 8001e8e:	0400      	lsls	r0, r0, #16
 8001e90:	0c00      	lsrs	r0, r0, #16
 8001e92:	4345      	muls	r5, r0
 8001e94:	46ac      	mov	ip, r5
 8001e96:	0005      	movs	r5, r0
 8001e98:	4375      	muls	r5, r6
 8001e9a:	46a8      	mov	r8, r5
 8001e9c:	0015      	movs	r5, r2
 8001e9e:	000f      	movs	r7, r1
 8001ea0:	4375      	muls	r5, r6
 8001ea2:	9200      	str	r2, [sp, #0]
 8001ea4:	9502      	str	r5, [sp, #8]
 8001ea6:	002a      	movs	r2, r5
 8001ea8:	9d00      	ldr	r5, [sp, #0]
 8001eaa:	436f      	muls	r7, r5
 8001eac:	4665      	mov	r5, ip
 8001eae:	0c2d      	lsrs	r5, r5, #16
 8001eb0:	46a9      	mov	r9, r5
 8001eb2:	4447      	add	r7, r8
 8001eb4:	444f      	add	r7, r9
 8001eb6:	45b8      	cmp	r8, r7
 8001eb8:	d905      	bls.n	8001ec6 <__aeabi_dmul+0x376>
 8001eba:	0015      	movs	r5, r2
 8001ebc:	2280      	movs	r2, #128	@ 0x80
 8001ebe:	0252      	lsls	r2, r2, #9
 8001ec0:	4690      	mov	r8, r2
 8001ec2:	4445      	add	r5, r8
 8001ec4:	9502      	str	r5, [sp, #8]
 8001ec6:	0c3d      	lsrs	r5, r7, #16
 8001ec8:	9503      	str	r5, [sp, #12]
 8001eca:	4665      	mov	r5, ip
 8001ecc:	042d      	lsls	r5, r5, #16
 8001ece:	043f      	lsls	r7, r7, #16
 8001ed0:	0c2d      	lsrs	r5, r5, #16
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	003d      	movs	r5, r7
 8001ed6:	4465      	add	r5, ip
 8001ed8:	9504      	str	r5, [sp, #16]
 8001eda:	0c25      	lsrs	r5, r4, #16
 8001edc:	0424      	lsls	r4, r4, #16
 8001ede:	0c24      	lsrs	r4, r4, #16
 8001ee0:	46ac      	mov	ip, r5
 8001ee2:	0025      	movs	r5, r4
 8001ee4:	4375      	muls	r5, r6
 8001ee6:	46a8      	mov	r8, r5
 8001ee8:	4665      	mov	r5, ip
 8001eea:	000f      	movs	r7, r1
 8001eec:	4369      	muls	r1, r5
 8001eee:	4441      	add	r1, r8
 8001ef0:	4689      	mov	r9, r1
 8001ef2:	4367      	muls	r7, r4
 8001ef4:	0c39      	lsrs	r1, r7, #16
 8001ef6:	4449      	add	r1, r9
 8001ef8:	436e      	muls	r6, r5
 8001efa:	4588      	cmp	r8, r1
 8001efc:	d903      	bls.n	8001f06 <__aeabi_dmul+0x3b6>
 8001efe:	2280      	movs	r2, #128	@ 0x80
 8001f00:	0252      	lsls	r2, r2, #9
 8001f02:	4690      	mov	r8, r2
 8001f04:	4446      	add	r6, r8
 8001f06:	0c0d      	lsrs	r5, r1, #16
 8001f08:	46a8      	mov	r8, r5
 8001f0a:	0035      	movs	r5, r6
 8001f0c:	4445      	add	r5, r8
 8001f0e:	9505      	str	r5, [sp, #20]
 8001f10:	9d03      	ldr	r5, [sp, #12]
 8001f12:	043f      	lsls	r7, r7, #16
 8001f14:	46a8      	mov	r8, r5
 8001f16:	0c3f      	lsrs	r7, r7, #16
 8001f18:	0409      	lsls	r1, r1, #16
 8001f1a:	19c9      	adds	r1, r1, r7
 8001f1c:	4488      	add	r8, r1
 8001f1e:	4645      	mov	r5, r8
 8001f20:	9503      	str	r5, [sp, #12]
 8001f22:	4655      	mov	r5, sl
 8001f24:	042e      	lsls	r6, r5, #16
 8001f26:	0c36      	lsrs	r6, r6, #16
 8001f28:	0c2f      	lsrs	r7, r5, #16
 8001f2a:	0035      	movs	r5, r6
 8001f2c:	4345      	muls	r5, r0
 8001f2e:	4378      	muls	r0, r7
 8001f30:	4681      	mov	r9, r0
 8001f32:	0038      	movs	r0, r7
 8001f34:	46a8      	mov	r8, r5
 8001f36:	0c2d      	lsrs	r5, r5, #16
 8001f38:	46aa      	mov	sl, r5
 8001f3a:	9a00      	ldr	r2, [sp, #0]
 8001f3c:	4350      	muls	r0, r2
 8001f3e:	4372      	muls	r2, r6
 8001f40:	444a      	add	r2, r9
 8001f42:	4452      	add	r2, sl
 8001f44:	4591      	cmp	r9, r2
 8001f46:	d903      	bls.n	8001f50 <__aeabi_dmul+0x400>
 8001f48:	2580      	movs	r5, #128	@ 0x80
 8001f4a:	026d      	lsls	r5, r5, #9
 8001f4c:	46a9      	mov	r9, r5
 8001f4e:	4448      	add	r0, r9
 8001f50:	0c15      	lsrs	r5, r2, #16
 8001f52:	46a9      	mov	r9, r5
 8001f54:	4645      	mov	r5, r8
 8001f56:	042d      	lsls	r5, r5, #16
 8001f58:	0c2d      	lsrs	r5, r5, #16
 8001f5a:	46a8      	mov	r8, r5
 8001f5c:	4665      	mov	r5, ip
 8001f5e:	437d      	muls	r5, r7
 8001f60:	0412      	lsls	r2, r2, #16
 8001f62:	4448      	add	r0, r9
 8001f64:	4490      	add	r8, r2
 8001f66:	46a9      	mov	r9, r5
 8001f68:	0032      	movs	r2, r6
 8001f6a:	4665      	mov	r5, ip
 8001f6c:	4362      	muls	r2, r4
 8001f6e:	436e      	muls	r6, r5
 8001f70:	437c      	muls	r4, r7
 8001f72:	0c17      	lsrs	r7, r2, #16
 8001f74:	1936      	adds	r6, r6, r4
 8001f76:	19bf      	adds	r7, r7, r6
 8001f78:	42bc      	cmp	r4, r7
 8001f7a:	d903      	bls.n	8001f84 <__aeabi_dmul+0x434>
 8001f7c:	2480      	movs	r4, #128	@ 0x80
 8001f7e:	0264      	lsls	r4, r4, #9
 8001f80:	46a4      	mov	ip, r4
 8001f82:	44e1      	add	r9, ip
 8001f84:	9c02      	ldr	r4, [sp, #8]
 8001f86:	9e03      	ldr	r6, [sp, #12]
 8001f88:	46a4      	mov	ip, r4
 8001f8a:	9d05      	ldr	r5, [sp, #20]
 8001f8c:	4466      	add	r6, ip
 8001f8e:	428e      	cmp	r6, r1
 8001f90:	4189      	sbcs	r1, r1
 8001f92:	46ac      	mov	ip, r5
 8001f94:	0412      	lsls	r2, r2, #16
 8001f96:	043c      	lsls	r4, r7, #16
 8001f98:	0c12      	lsrs	r2, r2, #16
 8001f9a:	18a2      	adds	r2, r4, r2
 8001f9c:	4462      	add	r2, ip
 8001f9e:	4249      	negs	r1, r1
 8001fa0:	1854      	adds	r4, r2, r1
 8001fa2:	4446      	add	r6, r8
 8001fa4:	46a4      	mov	ip, r4
 8001fa6:	4546      	cmp	r6, r8
 8001fa8:	41a4      	sbcs	r4, r4
 8001faa:	4682      	mov	sl, r0
 8001fac:	4264      	negs	r4, r4
 8001fae:	46a0      	mov	r8, r4
 8001fb0:	42aa      	cmp	r2, r5
 8001fb2:	4192      	sbcs	r2, r2
 8001fb4:	458c      	cmp	ip, r1
 8001fb6:	4189      	sbcs	r1, r1
 8001fb8:	44e2      	add	sl, ip
 8001fba:	44d0      	add	r8, sl
 8001fbc:	4249      	negs	r1, r1
 8001fbe:	4252      	negs	r2, r2
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	45a0      	cmp	r8, r4
 8001fc4:	41a4      	sbcs	r4, r4
 8001fc6:	4582      	cmp	sl, r0
 8001fc8:	4189      	sbcs	r1, r1
 8001fca:	4264      	negs	r4, r4
 8001fcc:	4249      	negs	r1, r1
 8001fce:	430c      	orrs	r4, r1
 8001fd0:	4641      	mov	r1, r8
 8001fd2:	0c3f      	lsrs	r7, r7, #16
 8001fd4:	19d2      	adds	r2, r2, r7
 8001fd6:	1912      	adds	r2, r2, r4
 8001fd8:	0dcc      	lsrs	r4, r1, #23
 8001fda:	9904      	ldr	r1, [sp, #16]
 8001fdc:	0270      	lsls	r0, r6, #9
 8001fde:	4308      	orrs	r0, r1
 8001fe0:	1e41      	subs	r1, r0, #1
 8001fe2:	4188      	sbcs	r0, r1
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	444a      	add	r2, r9
 8001fe8:	0df6      	lsrs	r6, r6, #23
 8001fea:	0252      	lsls	r2, r2, #9
 8001fec:	4330      	orrs	r0, r6
 8001fee:	0249      	lsls	r1, r1, #9
 8001ff0:	4314      	orrs	r4, r2
 8001ff2:	4308      	orrs	r0, r1
 8001ff4:	01d2      	lsls	r2, r2, #7
 8001ff6:	d535      	bpl.n	8002064 <__aeabi_dmul+0x514>
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	0843      	lsrs	r3, r0, #1
 8001ffc:	4002      	ands	r2, r0
 8001ffe:	4313      	orrs	r3, r2
 8002000:	07e0      	lsls	r0, r4, #31
 8002002:	4318      	orrs	r0, r3
 8002004:	0864      	lsrs	r4, r4, #1
 8002006:	e634      	b.n	8001c72 <__aeabi_dmul+0x122>
 8002008:	9b00      	ldr	r3, [sp, #0]
 800200a:	46a2      	mov	sl, r4
 800200c:	469b      	mov	fp, r3
 800200e:	4681      	mov	r9, r0
 8002010:	2480      	movs	r4, #128	@ 0x80
 8002012:	4653      	mov	r3, sl
 8002014:	0324      	lsls	r4, r4, #12
 8002016:	431c      	orrs	r4, r3
 8002018:	0324      	lsls	r4, r4, #12
 800201a:	464a      	mov	r2, r9
 800201c:	4b2e      	ldr	r3, [pc, #184]	@ (80020d8 <__aeabi_dmul+0x588>)
 800201e:	0b24      	lsrs	r4, r4, #12
 8002020:	e5ec      	b.n	8001bfc <__aeabi_dmul+0xac>
 8002022:	f000 fd2d 	bl	8002a80 <__clzsi2>
 8002026:	2315      	movs	r3, #21
 8002028:	469c      	mov	ip, r3
 800202a:	4484      	add	ip, r0
 800202c:	0002      	movs	r2, r0
 800202e:	4663      	mov	r3, ip
 8002030:	3220      	adds	r2, #32
 8002032:	2b1c      	cmp	r3, #28
 8002034:	dc00      	bgt.n	8002038 <__aeabi_dmul+0x4e8>
 8002036:	e684      	b.n	8001d42 <__aeabi_dmul+0x1f2>
 8002038:	2300      	movs	r3, #0
 800203a:	4699      	mov	r9, r3
 800203c:	0023      	movs	r3, r4
 800203e:	3808      	subs	r0, #8
 8002040:	4083      	lsls	r3, r0
 8002042:	469a      	mov	sl, r3
 8002044:	e68e      	b.n	8001d64 <__aeabi_dmul+0x214>
 8002046:	f000 fd1b 	bl	8002a80 <__clzsi2>
 800204a:	0002      	movs	r2, r0
 800204c:	0003      	movs	r3, r0
 800204e:	3215      	adds	r2, #21
 8002050:	3320      	adds	r3, #32
 8002052:	2a1c      	cmp	r2, #28
 8002054:	dc00      	bgt.n	8002058 <__aeabi_dmul+0x508>
 8002056:	e64e      	b.n	8001cf6 <__aeabi_dmul+0x1a6>
 8002058:	0002      	movs	r2, r0
 800205a:	0034      	movs	r4, r6
 800205c:	3a08      	subs	r2, #8
 800205e:	2000      	movs	r0, #0
 8002060:	4094      	lsls	r4, r2
 8002062:	e652      	b.n	8001d0a <__aeabi_dmul+0x1ba>
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	e604      	b.n	8001c72 <__aeabi_dmul+0x122>
 8002068:	4b1c      	ldr	r3, [pc, #112]	@ (80020dc <__aeabi_dmul+0x58c>)
 800206a:	0021      	movs	r1, r4
 800206c:	469c      	mov	ip, r3
 800206e:	0003      	movs	r3, r0
 8002070:	9d01      	ldr	r5, [sp, #4]
 8002072:	40d3      	lsrs	r3, r2
 8002074:	4465      	add	r5, ip
 8002076:	40a9      	lsls	r1, r5
 8002078:	4319      	orrs	r1, r3
 800207a:	0003      	movs	r3, r0
 800207c:	40ab      	lsls	r3, r5
 800207e:	1e58      	subs	r0, r3, #1
 8002080:	4183      	sbcs	r3, r0
 8002082:	4319      	orrs	r1, r3
 8002084:	0008      	movs	r0, r1
 8002086:	40d4      	lsrs	r4, r2
 8002088:	074b      	lsls	r3, r1, #29
 800208a:	d009      	beq.n	80020a0 <__aeabi_dmul+0x550>
 800208c:	230f      	movs	r3, #15
 800208e:	400b      	ands	r3, r1
 8002090:	2b04      	cmp	r3, #4
 8002092:	d005      	beq.n	80020a0 <__aeabi_dmul+0x550>
 8002094:	1d0b      	adds	r3, r1, #4
 8002096:	428b      	cmp	r3, r1
 8002098:	4180      	sbcs	r0, r0
 800209a:	4240      	negs	r0, r0
 800209c:	1824      	adds	r4, r4, r0
 800209e:	0018      	movs	r0, r3
 80020a0:	0223      	lsls	r3, r4, #8
 80020a2:	d400      	bmi.n	80020a6 <__aeabi_dmul+0x556>
 80020a4:	e6d6      	b.n	8001e54 <__aeabi_dmul+0x304>
 80020a6:	2301      	movs	r3, #1
 80020a8:	2400      	movs	r4, #0
 80020aa:	2200      	movs	r2, #0
 80020ac:	e5a6      	b.n	8001bfc <__aeabi_dmul+0xac>
 80020ae:	290f      	cmp	r1, #15
 80020b0:	d1aa      	bne.n	8002008 <__aeabi_dmul+0x4b8>
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	4652      	mov	r2, sl
 80020b6:	031b      	lsls	r3, r3, #12
 80020b8:	421a      	tst	r2, r3
 80020ba:	d0a9      	beq.n	8002010 <__aeabi_dmul+0x4c0>
 80020bc:	421c      	tst	r4, r3
 80020be:	d1a7      	bne.n	8002010 <__aeabi_dmul+0x4c0>
 80020c0:	431c      	orrs	r4, r3
 80020c2:	9b00      	ldr	r3, [sp, #0]
 80020c4:	0002      	movs	r2, r0
 80020c6:	469b      	mov	fp, r3
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <__aeabi_dmul+0x588>)
 80020ca:	e597      	b.n	8001bfc <__aeabi_dmul+0xac>
 80020cc:	2400      	movs	r4, #0
 80020ce:	e6c1      	b.n	8001e54 <__aeabi_dmul+0x304>
 80020d0:	2400      	movs	r4, #0
 80020d2:	4b01      	ldr	r3, [pc, #4]	@ (80020d8 <__aeabi_dmul+0x588>)
 80020d4:	0022      	movs	r2, r4
 80020d6:	e591      	b.n	8001bfc <__aeabi_dmul+0xac>
 80020d8:	000007ff 	.word	0x000007ff
 80020dc:	0000041e 	.word	0x0000041e

080020e0 <__aeabi_dsub>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	464e      	mov	r6, r9
 80020e4:	4645      	mov	r5, r8
 80020e6:	46de      	mov	lr, fp
 80020e8:	4657      	mov	r7, sl
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b085      	sub	sp, #20
 80020ee:	9000      	str	r0, [sp, #0]
 80020f0:	9101      	str	r1, [sp, #4]
 80020f2:	030c      	lsls	r4, r1, #12
 80020f4:	004f      	lsls	r7, r1, #1
 80020f6:	0fce      	lsrs	r6, r1, #31
 80020f8:	0a61      	lsrs	r1, r4, #9
 80020fa:	9c00      	ldr	r4, [sp, #0]
 80020fc:	46b0      	mov	r8, r6
 80020fe:	0f64      	lsrs	r4, r4, #29
 8002100:	430c      	orrs	r4, r1
 8002102:	9900      	ldr	r1, [sp, #0]
 8002104:	0d7f      	lsrs	r7, r7, #21
 8002106:	00c8      	lsls	r0, r1, #3
 8002108:	0011      	movs	r1, r2
 800210a:	001a      	movs	r2, r3
 800210c:	031b      	lsls	r3, r3, #12
 800210e:	469c      	mov	ip, r3
 8002110:	9100      	str	r1, [sp, #0]
 8002112:	9201      	str	r2, [sp, #4]
 8002114:	0051      	lsls	r1, r2, #1
 8002116:	0d4b      	lsrs	r3, r1, #21
 8002118:	4699      	mov	r9, r3
 800211a:	9b01      	ldr	r3, [sp, #4]
 800211c:	9d00      	ldr	r5, [sp, #0]
 800211e:	0fd9      	lsrs	r1, r3, #31
 8002120:	4663      	mov	r3, ip
 8002122:	0f6a      	lsrs	r2, r5, #29
 8002124:	0a5b      	lsrs	r3, r3, #9
 8002126:	4313      	orrs	r3, r2
 8002128:	00ea      	lsls	r2, r5, #3
 800212a:	4694      	mov	ip, r2
 800212c:	4693      	mov	fp, r2
 800212e:	4ac1      	ldr	r2, [pc, #772]	@ (8002434 <__aeabi_dsub+0x354>)
 8002130:	9003      	str	r0, [sp, #12]
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	4591      	cmp	r9, r2
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x5a>
 8002138:	e0cd      	b.n	80022d6 <__aeabi_dsub+0x1f6>
 800213a:	2501      	movs	r5, #1
 800213c:	4069      	eors	r1, r5
 800213e:	464d      	mov	r5, r9
 8002140:	1b7d      	subs	r5, r7, r5
 8002142:	46aa      	mov	sl, r5
 8002144:	428e      	cmp	r6, r1
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0x6a>
 8002148:	e080      	b.n	800224c <__aeabi_dsub+0x16c>
 800214a:	2d00      	cmp	r5, #0
 800214c:	dc00      	bgt.n	8002150 <__aeabi_dsub+0x70>
 800214e:	e335      	b.n	80027bc <__aeabi_dsub+0x6dc>
 8002150:	4649      	mov	r1, r9
 8002152:	2900      	cmp	r1, #0
 8002154:	d100      	bne.n	8002158 <__aeabi_dsub+0x78>
 8002156:	e0df      	b.n	8002318 <__aeabi_dsub+0x238>
 8002158:	4297      	cmp	r7, r2
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x7e>
 800215c:	e194      	b.n	8002488 <__aeabi_dsub+0x3a8>
 800215e:	4652      	mov	r2, sl
 8002160:	2501      	movs	r5, #1
 8002162:	2a38      	cmp	r2, #56	@ 0x38
 8002164:	dc19      	bgt.n	800219a <__aeabi_dsub+0xba>
 8002166:	2280      	movs	r2, #128	@ 0x80
 8002168:	9b02      	ldr	r3, [sp, #8]
 800216a:	0412      	lsls	r2, r2, #16
 800216c:	4313      	orrs	r3, r2
 800216e:	9302      	str	r3, [sp, #8]
 8002170:	4652      	mov	r2, sl
 8002172:	2a1f      	cmp	r2, #31
 8002174:	dd00      	ble.n	8002178 <__aeabi_dsub+0x98>
 8002176:	e1e3      	b.n	8002540 <__aeabi_dsub+0x460>
 8002178:	4653      	mov	r3, sl
 800217a:	2220      	movs	r2, #32
 800217c:	4661      	mov	r1, ip
 800217e:	9d02      	ldr	r5, [sp, #8]
 8002180:	1ad2      	subs	r2, r2, r3
 8002182:	4095      	lsls	r5, r2
 8002184:	40d9      	lsrs	r1, r3
 8002186:	430d      	orrs	r5, r1
 8002188:	4661      	mov	r1, ip
 800218a:	4091      	lsls	r1, r2
 800218c:	000a      	movs	r2, r1
 800218e:	1e51      	subs	r1, r2, #1
 8002190:	418a      	sbcs	r2, r1
 8002192:	4315      	orrs	r5, r2
 8002194:	9a02      	ldr	r2, [sp, #8]
 8002196:	40da      	lsrs	r2, r3
 8002198:	1aa4      	subs	r4, r4, r2
 800219a:	1b45      	subs	r5, r0, r5
 800219c:	42a8      	cmp	r0, r5
 800219e:	4180      	sbcs	r0, r0
 80021a0:	4240      	negs	r0, r0
 80021a2:	1a24      	subs	r4, r4, r0
 80021a4:	0223      	lsls	r3, r4, #8
 80021a6:	d400      	bmi.n	80021aa <__aeabi_dsub+0xca>
 80021a8:	e13d      	b.n	8002426 <__aeabi_dsub+0x346>
 80021aa:	0264      	lsls	r4, r4, #9
 80021ac:	0a64      	lsrs	r4, r4, #9
 80021ae:	2c00      	cmp	r4, #0
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0xd4>
 80021b2:	e147      	b.n	8002444 <__aeabi_dsub+0x364>
 80021b4:	0020      	movs	r0, r4
 80021b6:	f000 fc63 	bl	8002a80 <__clzsi2>
 80021ba:	0003      	movs	r3, r0
 80021bc:	3b08      	subs	r3, #8
 80021be:	2120      	movs	r1, #32
 80021c0:	0028      	movs	r0, r5
 80021c2:	1aca      	subs	r2, r1, r3
 80021c4:	40d0      	lsrs	r0, r2
 80021c6:	409c      	lsls	r4, r3
 80021c8:	0002      	movs	r2, r0
 80021ca:	409d      	lsls	r5, r3
 80021cc:	4322      	orrs	r2, r4
 80021ce:	429f      	cmp	r7, r3
 80021d0:	dd00      	ble.n	80021d4 <__aeabi_dsub+0xf4>
 80021d2:	e177      	b.n	80024c4 <__aeabi_dsub+0x3e4>
 80021d4:	1bd8      	subs	r0, r3, r7
 80021d6:	3001      	adds	r0, #1
 80021d8:	1a09      	subs	r1, r1, r0
 80021da:	002c      	movs	r4, r5
 80021dc:	408d      	lsls	r5, r1
 80021de:	40c4      	lsrs	r4, r0
 80021e0:	1e6b      	subs	r3, r5, #1
 80021e2:	419d      	sbcs	r5, r3
 80021e4:	0013      	movs	r3, r2
 80021e6:	40c2      	lsrs	r2, r0
 80021e8:	408b      	lsls	r3, r1
 80021ea:	4325      	orrs	r5, r4
 80021ec:	2700      	movs	r7, #0
 80021ee:	0014      	movs	r4, r2
 80021f0:	431d      	orrs	r5, r3
 80021f2:	076b      	lsls	r3, r5, #29
 80021f4:	d009      	beq.n	800220a <__aeabi_dsub+0x12a>
 80021f6:	230f      	movs	r3, #15
 80021f8:	402b      	ands	r3, r5
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d005      	beq.n	800220a <__aeabi_dsub+0x12a>
 80021fe:	1d2b      	adds	r3, r5, #4
 8002200:	42ab      	cmp	r3, r5
 8002202:	41ad      	sbcs	r5, r5
 8002204:	426d      	negs	r5, r5
 8002206:	1964      	adds	r4, r4, r5
 8002208:	001d      	movs	r5, r3
 800220a:	0223      	lsls	r3, r4, #8
 800220c:	d400      	bmi.n	8002210 <__aeabi_dsub+0x130>
 800220e:	e140      	b.n	8002492 <__aeabi_dsub+0x3b2>
 8002210:	4a88      	ldr	r2, [pc, #544]	@ (8002434 <__aeabi_dsub+0x354>)
 8002212:	3701      	adds	r7, #1
 8002214:	4297      	cmp	r7, r2
 8002216:	d100      	bne.n	800221a <__aeabi_dsub+0x13a>
 8002218:	e101      	b.n	800241e <__aeabi_dsub+0x33e>
 800221a:	2601      	movs	r6, #1
 800221c:	4643      	mov	r3, r8
 800221e:	4986      	ldr	r1, [pc, #536]	@ (8002438 <__aeabi_dsub+0x358>)
 8002220:	08ed      	lsrs	r5, r5, #3
 8002222:	4021      	ands	r1, r4
 8002224:	074a      	lsls	r2, r1, #29
 8002226:	432a      	orrs	r2, r5
 8002228:	057c      	lsls	r4, r7, #21
 800222a:	024d      	lsls	r5, r1, #9
 800222c:	0b2d      	lsrs	r5, r5, #12
 800222e:	0d64      	lsrs	r4, r4, #21
 8002230:	401e      	ands	r6, r3
 8002232:	0524      	lsls	r4, r4, #20
 8002234:	432c      	orrs	r4, r5
 8002236:	07f6      	lsls	r6, r6, #31
 8002238:	4334      	orrs	r4, r6
 800223a:	0010      	movs	r0, r2
 800223c:	0021      	movs	r1, r4
 800223e:	b005      	add	sp, #20
 8002240:	bcf0      	pop	{r4, r5, r6, r7}
 8002242:	46bb      	mov	fp, r7
 8002244:	46b2      	mov	sl, r6
 8002246:	46a9      	mov	r9, r5
 8002248:	46a0      	mov	r8, r4
 800224a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224c:	2d00      	cmp	r5, #0
 800224e:	dc00      	bgt.n	8002252 <__aeabi_dsub+0x172>
 8002250:	e2d0      	b.n	80027f4 <__aeabi_dsub+0x714>
 8002252:	4649      	mov	r1, r9
 8002254:	2900      	cmp	r1, #0
 8002256:	d000      	beq.n	800225a <__aeabi_dsub+0x17a>
 8002258:	e0d4      	b.n	8002404 <__aeabi_dsub+0x324>
 800225a:	4661      	mov	r1, ip
 800225c:	9b02      	ldr	r3, [sp, #8]
 800225e:	4319      	orrs	r1, r3
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x184>
 8002262:	e12b      	b.n	80024bc <__aeabi_dsub+0x3dc>
 8002264:	1e69      	subs	r1, r5, #1
 8002266:	2d01      	cmp	r5, #1
 8002268:	d100      	bne.n	800226c <__aeabi_dsub+0x18c>
 800226a:	e1d9      	b.n	8002620 <__aeabi_dsub+0x540>
 800226c:	4295      	cmp	r5, r2
 800226e:	d100      	bne.n	8002272 <__aeabi_dsub+0x192>
 8002270:	e10a      	b.n	8002488 <__aeabi_dsub+0x3a8>
 8002272:	2501      	movs	r5, #1
 8002274:	2938      	cmp	r1, #56	@ 0x38
 8002276:	dc17      	bgt.n	80022a8 <__aeabi_dsub+0x1c8>
 8002278:	468a      	mov	sl, r1
 800227a:	4653      	mov	r3, sl
 800227c:	2b1f      	cmp	r3, #31
 800227e:	dd00      	ble.n	8002282 <__aeabi_dsub+0x1a2>
 8002280:	e1e7      	b.n	8002652 <__aeabi_dsub+0x572>
 8002282:	2220      	movs	r2, #32
 8002284:	1ad2      	subs	r2, r2, r3
 8002286:	9b02      	ldr	r3, [sp, #8]
 8002288:	4661      	mov	r1, ip
 800228a:	4093      	lsls	r3, r2
 800228c:	001d      	movs	r5, r3
 800228e:	4653      	mov	r3, sl
 8002290:	40d9      	lsrs	r1, r3
 8002292:	4663      	mov	r3, ip
 8002294:	4093      	lsls	r3, r2
 8002296:	001a      	movs	r2, r3
 8002298:	430d      	orrs	r5, r1
 800229a:	1e51      	subs	r1, r2, #1
 800229c:	418a      	sbcs	r2, r1
 800229e:	4653      	mov	r3, sl
 80022a0:	4315      	orrs	r5, r2
 80022a2:	9a02      	ldr	r2, [sp, #8]
 80022a4:	40da      	lsrs	r2, r3
 80022a6:	18a4      	adds	r4, r4, r2
 80022a8:	182d      	adds	r5, r5, r0
 80022aa:	4285      	cmp	r5, r0
 80022ac:	4180      	sbcs	r0, r0
 80022ae:	4240      	negs	r0, r0
 80022b0:	1824      	adds	r4, r4, r0
 80022b2:	0223      	lsls	r3, r4, #8
 80022b4:	d400      	bmi.n	80022b8 <__aeabi_dsub+0x1d8>
 80022b6:	e0b6      	b.n	8002426 <__aeabi_dsub+0x346>
 80022b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002434 <__aeabi_dsub+0x354>)
 80022ba:	3701      	adds	r7, #1
 80022bc:	429f      	cmp	r7, r3
 80022be:	d100      	bne.n	80022c2 <__aeabi_dsub+0x1e2>
 80022c0:	e0ad      	b.n	800241e <__aeabi_dsub+0x33e>
 80022c2:	2101      	movs	r1, #1
 80022c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002438 <__aeabi_dsub+0x358>)
 80022c6:	086a      	lsrs	r2, r5, #1
 80022c8:	401c      	ands	r4, r3
 80022ca:	4029      	ands	r1, r5
 80022cc:	430a      	orrs	r2, r1
 80022ce:	07e5      	lsls	r5, r4, #31
 80022d0:	4315      	orrs	r5, r2
 80022d2:	0864      	lsrs	r4, r4, #1
 80022d4:	e78d      	b.n	80021f2 <__aeabi_dsub+0x112>
 80022d6:	4a59      	ldr	r2, [pc, #356]	@ (800243c <__aeabi_dsub+0x35c>)
 80022d8:	9b02      	ldr	r3, [sp, #8]
 80022da:	4692      	mov	sl, r2
 80022dc:	4662      	mov	r2, ip
 80022de:	44ba      	add	sl, r7
 80022e0:	431a      	orrs	r2, r3
 80022e2:	d02c      	beq.n	800233e <__aeabi_dsub+0x25e>
 80022e4:	428e      	cmp	r6, r1
 80022e6:	d02e      	beq.n	8002346 <__aeabi_dsub+0x266>
 80022e8:	4652      	mov	r2, sl
 80022ea:	2a00      	cmp	r2, #0
 80022ec:	d060      	beq.n	80023b0 <__aeabi_dsub+0x2d0>
 80022ee:	2f00      	cmp	r7, #0
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x214>
 80022f2:	e0db      	b.n	80024ac <__aeabi_dsub+0x3cc>
 80022f4:	4663      	mov	r3, ip
 80022f6:	000e      	movs	r6, r1
 80022f8:	9c02      	ldr	r4, [sp, #8]
 80022fa:	08d8      	lsrs	r0, r3, #3
 80022fc:	0762      	lsls	r2, r4, #29
 80022fe:	4302      	orrs	r2, r0
 8002300:	08e4      	lsrs	r4, r4, #3
 8002302:	0013      	movs	r3, r2
 8002304:	4323      	orrs	r3, r4
 8002306:	d100      	bne.n	800230a <__aeabi_dsub+0x22a>
 8002308:	e254      	b.n	80027b4 <__aeabi_dsub+0x6d4>
 800230a:	2580      	movs	r5, #128	@ 0x80
 800230c:	032d      	lsls	r5, r5, #12
 800230e:	4325      	orrs	r5, r4
 8002310:	032d      	lsls	r5, r5, #12
 8002312:	4c48      	ldr	r4, [pc, #288]	@ (8002434 <__aeabi_dsub+0x354>)
 8002314:	0b2d      	lsrs	r5, r5, #12
 8002316:	e78c      	b.n	8002232 <__aeabi_dsub+0x152>
 8002318:	4661      	mov	r1, ip
 800231a:	9b02      	ldr	r3, [sp, #8]
 800231c:	4319      	orrs	r1, r3
 800231e:	d100      	bne.n	8002322 <__aeabi_dsub+0x242>
 8002320:	e0cc      	b.n	80024bc <__aeabi_dsub+0x3dc>
 8002322:	0029      	movs	r1, r5
 8002324:	3901      	subs	r1, #1
 8002326:	2d01      	cmp	r5, #1
 8002328:	d100      	bne.n	800232c <__aeabi_dsub+0x24c>
 800232a:	e188      	b.n	800263e <__aeabi_dsub+0x55e>
 800232c:	4295      	cmp	r5, r2
 800232e:	d100      	bne.n	8002332 <__aeabi_dsub+0x252>
 8002330:	e0aa      	b.n	8002488 <__aeabi_dsub+0x3a8>
 8002332:	2501      	movs	r5, #1
 8002334:	2938      	cmp	r1, #56	@ 0x38
 8002336:	dd00      	ble.n	800233a <__aeabi_dsub+0x25a>
 8002338:	e72f      	b.n	800219a <__aeabi_dsub+0xba>
 800233a:	468a      	mov	sl, r1
 800233c:	e718      	b.n	8002170 <__aeabi_dsub+0x90>
 800233e:	2201      	movs	r2, #1
 8002340:	4051      	eors	r1, r2
 8002342:	428e      	cmp	r6, r1
 8002344:	d1d0      	bne.n	80022e8 <__aeabi_dsub+0x208>
 8002346:	4653      	mov	r3, sl
 8002348:	2b00      	cmp	r3, #0
 800234a:	d100      	bne.n	800234e <__aeabi_dsub+0x26e>
 800234c:	e0be      	b.n	80024cc <__aeabi_dsub+0x3ec>
 800234e:	2f00      	cmp	r7, #0
 8002350:	d000      	beq.n	8002354 <__aeabi_dsub+0x274>
 8002352:	e138      	b.n	80025c6 <__aeabi_dsub+0x4e6>
 8002354:	46ca      	mov	sl, r9
 8002356:	0022      	movs	r2, r4
 8002358:	4302      	orrs	r2, r0
 800235a:	d100      	bne.n	800235e <__aeabi_dsub+0x27e>
 800235c:	e1e2      	b.n	8002724 <__aeabi_dsub+0x644>
 800235e:	4653      	mov	r3, sl
 8002360:	1e59      	subs	r1, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x288>
 8002366:	e20d      	b.n	8002784 <__aeabi_dsub+0x6a4>
 8002368:	4a32      	ldr	r2, [pc, #200]	@ (8002434 <__aeabi_dsub+0x354>)
 800236a:	4592      	cmp	sl, r2
 800236c:	d100      	bne.n	8002370 <__aeabi_dsub+0x290>
 800236e:	e1d2      	b.n	8002716 <__aeabi_dsub+0x636>
 8002370:	2701      	movs	r7, #1
 8002372:	2938      	cmp	r1, #56	@ 0x38
 8002374:	dc13      	bgt.n	800239e <__aeabi_dsub+0x2be>
 8002376:	291f      	cmp	r1, #31
 8002378:	dd00      	ble.n	800237c <__aeabi_dsub+0x29c>
 800237a:	e1ee      	b.n	800275a <__aeabi_dsub+0x67a>
 800237c:	2220      	movs	r2, #32
 800237e:	9b02      	ldr	r3, [sp, #8]
 8002380:	1a52      	subs	r2, r2, r1
 8002382:	0025      	movs	r5, r4
 8002384:	0007      	movs	r7, r0
 8002386:	469a      	mov	sl, r3
 8002388:	40cc      	lsrs	r4, r1
 800238a:	4090      	lsls	r0, r2
 800238c:	4095      	lsls	r5, r2
 800238e:	40cf      	lsrs	r7, r1
 8002390:	44a2      	add	sl, r4
 8002392:	1e42      	subs	r2, r0, #1
 8002394:	4190      	sbcs	r0, r2
 8002396:	4653      	mov	r3, sl
 8002398:	432f      	orrs	r7, r5
 800239a:	4307      	orrs	r7, r0
 800239c:	9302      	str	r3, [sp, #8]
 800239e:	003d      	movs	r5, r7
 80023a0:	4465      	add	r5, ip
 80023a2:	4565      	cmp	r5, ip
 80023a4:	4192      	sbcs	r2, r2
 80023a6:	9b02      	ldr	r3, [sp, #8]
 80023a8:	4252      	negs	r2, r2
 80023aa:	464f      	mov	r7, r9
 80023ac:	18d4      	adds	r4, r2, r3
 80023ae:	e780      	b.n	80022b2 <__aeabi_dsub+0x1d2>
 80023b0:	4a23      	ldr	r2, [pc, #140]	@ (8002440 <__aeabi_dsub+0x360>)
 80023b2:	1c7d      	adds	r5, r7, #1
 80023b4:	4215      	tst	r5, r2
 80023b6:	d000      	beq.n	80023ba <__aeabi_dsub+0x2da>
 80023b8:	e0aa      	b.n	8002510 <__aeabi_dsub+0x430>
 80023ba:	4662      	mov	r2, ip
 80023bc:	0025      	movs	r5, r4
 80023be:	9b02      	ldr	r3, [sp, #8]
 80023c0:	4305      	orrs	r5, r0
 80023c2:	431a      	orrs	r2, r3
 80023c4:	2f00      	cmp	r7, #0
 80023c6:	d000      	beq.n	80023ca <__aeabi_dsub+0x2ea>
 80023c8:	e0f5      	b.n	80025b6 <__aeabi_dsub+0x4d6>
 80023ca:	2d00      	cmp	r5, #0
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dsub+0x2f0>
 80023ce:	e16b      	b.n	80026a8 <__aeabi_dsub+0x5c8>
 80023d0:	2a00      	cmp	r2, #0
 80023d2:	d100      	bne.n	80023d6 <__aeabi_dsub+0x2f6>
 80023d4:	e152      	b.n	800267c <__aeabi_dsub+0x59c>
 80023d6:	4663      	mov	r3, ip
 80023d8:	1ac5      	subs	r5, r0, r3
 80023da:	9b02      	ldr	r3, [sp, #8]
 80023dc:	1ae2      	subs	r2, r4, r3
 80023de:	42a8      	cmp	r0, r5
 80023e0:	419b      	sbcs	r3, r3
 80023e2:	425b      	negs	r3, r3
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	021a      	lsls	r2, r3, #8
 80023e8:	d400      	bmi.n	80023ec <__aeabi_dsub+0x30c>
 80023ea:	e1d5      	b.n	8002798 <__aeabi_dsub+0x6b8>
 80023ec:	4663      	mov	r3, ip
 80023ee:	1a1d      	subs	r5, r3, r0
 80023f0:	45ac      	cmp	ip, r5
 80023f2:	4192      	sbcs	r2, r2
 80023f4:	2601      	movs	r6, #1
 80023f6:	9b02      	ldr	r3, [sp, #8]
 80023f8:	4252      	negs	r2, r2
 80023fa:	1b1c      	subs	r4, r3, r4
 80023fc:	4688      	mov	r8, r1
 80023fe:	1aa4      	subs	r4, r4, r2
 8002400:	400e      	ands	r6, r1
 8002402:	e6f6      	b.n	80021f2 <__aeabi_dsub+0x112>
 8002404:	4297      	cmp	r7, r2
 8002406:	d03f      	beq.n	8002488 <__aeabi_dsub+0x3a8>
 8002408:	4652      	mov	r2, sl
 800240a:	2501      	movs	r5, #1
 800240c:	2a38      	cmp	r2, #56	@ 0x38
 800240e:	dd00      	ble.n	8002412 <__aeabi_dsub+0x332>
 8002410:	e74a      	b.n	80022a8 <__aeabi_dsub+0x1c8>
 8002412:	2280      	movs	r2, #128	@ 0x80
 8002414:	9b02      	ldr	r3, [sp, #8]
 8002416:	0412      	lsls	r2, r2, #16
 8002418:	4313      	orrs	r3, r2
 800241a:	9302      	str	r3, [sp, #8]
 800241c:	e72d      	b.n	800227a <__aeabi_dsub+0x19a>
 800241e:	003c      	movs	r4, r7
 8002420:	2500      	movs	r5, #0
 8002422:	2200      	movs	r2, #0
 8002424:	e705      	b.n	8002232 <__aeabi_dsub+0x152>
 8002426:	2307      	movs	r3, #7
 8002428:	402b      	ands	r3, r5
 800242a:	2b00      	cmp	r3, #0
 800242c:	d000      	beq.n	8002430 <__aeabi_dsub+0x350>
 800242e:	e6e2      	b.n	80021f6 <__aeabi_dsub+0x116>
 8002430:	e06b      	b.n	800250a <__aeabi_dsub+0x42a>
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	000007ff 	.word	0x000007ff
 8002438:	ff7fffff 	.word	0xff7fffff
 800243c:	fffff801 	.word	0xfffff801
 8002440:	000007fe 	.word	0x000007fe
 8002444:	0028      	movs	r0, r5
 8002446:	f000 fb1b 	bl	8002a80 <__clzsi2>
 800244a:	0003      	movs	r3, r0
 800244c:	3318      	adds	r3, #24
 800244e:	2b1f      	cmp	r3, #31
 8002450:	dc00      	bgt.n	8002454 <__aeabi_dsub+0x374>
 8002452:	e6b4      	b.n	80021be <__aeabi_dsub+0xde>
 8002454:	002a      	movs	r2, r5
 8002456:	3808      	subs	r0, #8
 8002458:	4082      	lsls	r2, r0
 800245a:	429f      	cmp	r7, r3
 800245c:	dd00      	ble.n	8002460 <__aeabi_dsub+0x380>
 800245e:	e0b9      	b.n	80025d4 <__aeabi_dsub+0x4f4>
 8002460:	1bdb      	subs	r3, r3, r7
 8002462:	1c58      	adds	r0, r3, #1
 8002464:	281f      	cmp	r0, #31
 8002466:	dc00      	bgt.n	800246a <__aeabi_dsub+0x38a>
 8002468:	e1a0      	b.n	80027ac <__aeabi_dsub+0x6cc>
 800246a:	0015      	movs	r5, r2
 800246c:	3b1f      	subs	r3, #31
 800246e:	40dd      	lsrs	r5, r3
 8002470:	2820      	cmp	r0, #32
 8002472:	d005      	beq.n	8002480 <__aeabi_dsub+0x3a0>
 8002474:	2340      	movs	r3, #64	@ 0x40
 8002476:	1a1b      	subs	r3, r3, r0
 8002478:	409a      	lsls	r2, r3
 800247a:	1e53      	subs	r3, r2, #1
 800247c:	419a      	sbcs	r2, r3
 800247e:	4315      	orrs	r5, r2
 8002480:	2307      	movs	r3, #7
 8002482:	2700      	movs	r7, #0
 8002484:	402b      	ands	r3, r5
 8002486:	e7d0      	b.n	800242a <__aeabi_dsub+0x34a>
 8002488:	08c0      	lsrs	r0, r0, #3
 800248a:	0762      	lsls	r2, r4, #29
 800248c:	4302      	orrs	r2, r0
 800248e:	08e4      	lsrs	r4, r4, #3
 8002490:	e737      	b.n	8002302 <__aeabi_dsub+0x222>
 8002492:	08ea      	lsrs	r2, r5, #3
 8002494:	0763      	lsls	r3, r4, #29
 8002496:	431a      	orrs	r2, r3
 8002498:	4bd3      	ldr	r3, [pc, #844]	@ (80027e8 <__aeabi_dsub+0x708>)
 800249a:	08e4      	lsrs	r4, r4, #3
 800249c:	429f      	cmp	r7, r3
 800249e:	d100      	bne.n	80024a2 <__aeabi_dsub+0x3c2>
 80024a0:	e72f      	b.n	8002302 <__aeabi_dsub+0x222>
 80024a2:	0324      	lsls	r4, r4, #12
 80024a4:	0b25      	lsrs	r5, r4, #12
 80024a6:	057c      	lsls	r4, r7, #21
 80024a8:	0d64      	lsrs	r4, r4, #21
 80024aa:	e6c2      	b.n	8002232 <__aeabi_dsub+0x152>
 80024ac:	46ca      	mov	sl, r9
 80024ae:	0022      	movs	r2, r4
 80024b0:	4302      	orrs	r2, r0
 80024b2:	d158      	bne.n	8002566 <__aeabi_dsub+0x486>
 80024b4:	4663      	mov	r3, ip
 80024b6:	000e      	movs	r6, r1
 80024b8:	9c02      	ldr	r4, [sp, #8]
 80024ba:	9303      	str	r3, [sp, #12]
 80024bc:	9b03      	ldr	r3, [sp, #12]
 80024be:	4657      	mov	r7, sl
 80024c0:	08da      	lsrs	r2, r3, #3
 80024c2:	e7e7      	b.n	8002494 <__aeabi_dsub+0x3b4>
 80024c4:	4cc9      	ldr	r4, [pc, #804]	@ (80027ec <__aeabi_dsub+0x70c>)
 80024c6:	1aff      	subs	r7, r7, r3
 80024c8:	4014      	ands	r4, r2
 80024ca:	e692      	b.n	80021f2 <__aeabi_dsub+0x112>
 80024cc:	4dc8      	ldr	r5, [pc, #800]	@ (80027f0 <__aeabi_dsub+0x710>)
 80024ce:	1c7a      	adds	r2, r7, #1
 80024d0:	422a      	tst	r2, r5
 80024d2:	d000      	beq.n	80024d6 <__aeabi_dsub+0x3f6>
 80024d4:	e084      	b.n	80025e0 <__aeabi_dsub+0x500>
 80024d6:	0022      	movs	r2, r4
 80024d8:	4302      	orrs	r2, r0
 80024da:	2f00      	cmp	r7, #0
 80024dc:	d000      	beq.n	80024e0 <__aeabi_dsub+0x400>
 80024de:	e0ef      	b.n	80026c0 <__aeabi_dsub+0x5e0>
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x406>
 80024e4:	e0e5      	b.n	80026b2 <__aeabi_dsub+0x5d2>
 80024e6:	4662      	mov	r2, ip
 80024e8:	9902      	ldr	r1, [sp, #8]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	d100      	bne.n	80024f0 <__aeabi_dsub+0x410>
 80024ee:	e0c5      	b.n	800267c <__aeabi_dsub+0x59c>
 80024f0:	4663      	mov	r3, ip
 80024f2:	18c5      	adds	r5, r0, r3
 80024f4:	468c      	mov	ip, r1
 80024f6:	4285      	cmp	r5, r0
 80024f8:	4180      	sbcs	r0, r0
 80024fa:	4464      	add	r4, ip
 80024fc:	4240      	negs	r0, r0
 80024fe:	1824      	adds	r4, r4, r0
 8002500:	0223      	lsls	r3, r4, #8
 8002502:	d502      	bpl.n	800250a <__aeabi_dsub+0x42a>
 8002504:	4bb9      	ldr	r3, [pc, #740]	@ (80027ec <__aeabi_dsub+0x70c>)
 8002506:	3701      	adds	r7, #1
 8002508:	401c      	ands	r4, r3
 800250a:	46ba      	mov	sl, r7
 800250c:	9503      	str	r5, [sp, #12]
 800250e:	e7d5      	b.n	80024bc <__aeabi_dsub+0x3dc>
 8002510:	4662      	mov	r2, ip
 8002512:	1a85      	subs	r5, r0, r2
 8002514:	42a8      	cmp	r0, r5
 8002516:	4192      	sbcs	r2, r2
 8002518:	4252      	negs	r2, r2
 800251a:	4691      	mov	r9, r2
 800251c:	9b02      	ldr	r3, [sp, #8]
 800251e:	1ae3      	subs	r3, r4, r3
 8002520:	001a      	movs	r2, r3
 8002522:	464b      	mov	r3, r9
 8002524:	1ad2      	subs	r2, r2, r3
 8002526:	0013      	movs	r3, r2
 8002528:	4691      	mov	r9, r2
 800252a:	021a      	lsls	r2, r3, #8
 800252c:	d46c      	bmi.n	8002608 <__aeabi_dsub+0x528>
 800252e:	464a      	mov	r2, r9
 8002530:	464c      	mov	r4, r9
 8002532:	432a      	orrs	r2, r5
 8002534:	d000      	beq.n	8002538 <__aeabi_dsub+0x458>
 8002536:	e63a      	b.n	80021ae <__aeabi_dsub+0xce>
 8002538:	2600      	movs	r6, #0
 800253a:	2400      	movs	r4, #0
 800253c:	2500      	movs	r5, #0
 800253e:	e678      	b.n	8002232 <__aeabi_dsub+0x152>
 8002540:	9902      	ldr	r1, [sp, #8]
 8002542:	4653      	mov	r3, sl
 8002544:	000d      	movs	r5, r1
 8002546:	3a20      	subs	r2, #32
 8002548:	40d5      	lsrs	r5, r2
 800254a:	2b20      	cmp	r3, #32
 800254c:	d006      	beq.n	800255c <__aeabi_dsub+0x47c>
 800254e:	2240      	movs	r2, #64	@ 0x40
 8002550:	1ad2      	subs	r2, r2, r3
 8002552:	000b      	movs	r3, r1
 8002554:	4093      	lsls	r3, r2
 8002556:	4662      	mov	r2, ip
 8002558:	431a      	orrs	r2, r3
 800255a:	4693      	mov	fp, r2
 800255c:	465b      	mov	r3, fp
 800255e:	1e5a      	subs	r2, r3, #1
 8002560:	4193      	sbcs	r3, r2
 8002562:	431d      	orrs	r5, r3
 8002564:	e619      	b.n	800219a <__aeabi_dsub+0xba>
 8002566:	4653      	mov	r3, sl
 8002568:	1e5a      	subs	r2, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d100      	bne.n	8002570 <__aeabi_dsub+0x490>
 800256e:	e0c6      	b.n	80026fe <__aeabi_dsub+0x61e>
 8002570:	4e9d      	ldr	r6, [pc, #628]	@ (80027e8 <__aeabi_dsub+0x708>)
 8002572:	45b2      	cmp	sl, r6
 8002574:	d100      	bne.n	8002578 <__aeabi_dsub+0x498>
 8002576:	e6bd      	b.n	80022f4 <__aeabi_dsub+0x214>
 8002578:	4688      	mov	r8, r1
 800257a:	000e      	movs	r6, r1
 800257c:	2501      	movs	r5, #1
 800257e:	2a38      	cmp	r2, #56	@ 0x38
 8002580:	dc10      	bgt.n	80025a4 <__aeabi_dsub+0x4c4>
 8002582:	2a1f      	cmp	r2, #31
 8002584:	dc7f      	bgt.n	8002686 <__aeabi_dsub+0x5a6>
 8002586:	2120      	movs	r1, #32
 8002588:	0025      	movs	r5, r4
 800258a:	1a89      	subs	r1, r1, r2
 800258c:	0007      	movs	r7, r0
 800258e:	4088      	lsls	r0, r1
 8002590:	408d      	lsls	r5, r1
 8002592:	40d7      	lsrs	r7, r2
 8002594:	40d4      	lsrs	r4, r2
 8002596:	1e41      	subs	r1, r0, #1
 8002598:	4188      	sbcs	r0, r1
 800259a:	9b02      	ldr	r3, [sp, #8]
 800259c:	433d      	orrs	r5, r7
 800259e:	1b1b      	subs	r3, r3, r4
 80025a0:	4305      	orrs	r5, r0
 80025a2:	9302      	str	r3, [sp, #8]
 80025a4:	4662      	mov	r2, ip
 80025a6:	1b55      	subs	r5, r2, r5
 80025a8:	45ac      	cmp	ip, r5
 80025aa:	4192      	sbcs	r2, r2
 80025ac:	9b02      	ldr	r3, [sp, #8]
 80025ae:	4252      	negs	r2, r2
 80025b0:	464f      	mov	r7, r9
 80025b2:	1a9c      	subs	r4, r3, r2
 80025b4:	e5f6      	b.n	80021a4 <__aeabi_dsub+0xc4>
 80025b6:	2d00      	cmp	r5, #0
 80025b8:	d000      	beq.n	80025bc <__aeabi_dsub+0x4dc>
 80025ba:	e0b7      	b.n	800272c <__aeabi_dsub+0x64c>
 80025bc:	2a00      	cmp	r2, #0
 80025be:	d100      	bne.n	80025c2 <__aeabi_dsub+0x4e2>
 80025c0:	e0f0      	b.n	80027a4 <__aeabi_dsub+0x6c4>
 80025c2:	2601      	movs	r6, #1
 80025c4:	400e      	ands	r6, r1
 80025c6:	4663      	mov	r3, ip
 80025c8:	9802      	ldr	r0, [sp, #8]
 80025ca:	08d9      	lsrs	r1, r3, #3
 80025cc:	0742      	lsls	r2, r0, #29
 80025ce:	430a      	orrs	r2, r1
 80025d0:	08c4      	lsrs	r4, r0, #3
 80025d2:	e696      	b.n	8002302 <__aeabi_dsub+0x222>
 80025d4:	4c85      	ldr	r4, [pc, #532]	@ (80027ec <__aeabi_dsub+0x70c>)
 80025d6:	1aff      	subs	r7, r7, r3
 80025d8:	4014      	ands	r4, r2
 80025da:	0762      	lsls	r2, r4, #29
 80025dc:	08e4      	lsrs	r4, r4, #3
 80025de:	e760      	b.n	80024a2 <__aeabi_dsub+0x3c2>
 80025e0:	4981      	ldr	r1, [pc, #516]	@ (80027e8 <__aeabi_dsub+0x708>)
 80025e2:	428a      	cmp	r2, r1
 80025e4:	d100      	bne.n	80025e8 <__aeabi_dsub+0x508>
 80025e6:	e0c9      	b.n	800277c <__aeabi_dsub+0x69c>
 80025e8:	4663      	mov	r3, ip
 80025ea:	18c1      	adds	r1, r0, r3
 80025ec:	4281      	cmp	r1, r0
 80025ee:	4180      	sbcs	r0, r0
 80025f0:	9b02      	ldr	r3, [sp, #8]
 80025f2:	4240      	negs	r0, r0
 80025f4:	18e3      	adds	r3, r4, r3
 80025f6:	181b      	adds	r3, r3, r0
 80025f8:	07dd      	lsls	r5, r3, #31
 80025fa:	085c      	lsrs	r4, r3, #1
 80025fc:	2307      	movs	r3, #7
 80025fe:	0849      	lsrs	r1, r1, #1
 8002600:	430d      	orrs	r5, r1
 8002602:	0017      	movs	r7, r2
 8002604:	402b      	ands	r3, r5
 8002606:	e710      	b.n	800242a <__aeabi_dsub+0x34a>
 8002608:	4663      	mov	r3, ip
 800260a:	1a1d      	subs	r5, r3, r0
 800260c:	45ac      	cmp	ip, r5
 800260e:	4192      	sbcs	r2, r2
 8002610:	2601      	movs	r6, #1
 8002612:	9b02      	ldr	r3, [sp, #8]
 8002614:	4252      	negs	r2, r2
 8002616:	1b1c      	subs	r4, r3, r4
 8002618:	4688      	mov	r8, r1
 800261a:	1aa4      	subs	r4, r4, r2
 800261c:	400e      	ands	r6, r1
 800261e:	e5c6      	b.n	80021ae <__aeabi_dsub+0xce>
 8002620:	4663      	mov	r3, ip
 8002622:	18c5      	adds	r5, r0, r3
 8002624:	9b02      	ldr	r3, [sp, #8]
 8002626:	4285      	cmp	r5, r0
 8002628:	4180      	sbcs	r0, r0
 800262a:	469c      	mov	ip, r3
 800262c:	4240      	negs	r0, r0
 800262e:	4464      	add	r4, ip
 8002630:	1824      	adds	r4, r4, r0
 8002632:	2701      	movs	r7, #1
 8002634:	0223      	lsls	r3, r4, #8
 8002636:	d400      	bmi.n	800263a <__aeabi_dsub+0x55a>
 8002638:	e6f5      	b.n	8002426 <__aeabi_dsub+0x346>
 800263a:	2702      	movs	r7, #2
 800263c:	e641      	b.n	80022c2 <__aeabi_dsub+0x1e2>
 800263e:	4663      	mov	r3, ip
 8002640:	1ac5      	subs	r5, r0, r3
 8002642:	42a8      	cmp	r0, r5
 8002644:	4180      	sbcs	r0, r0
 8002646:	9b02      	ldr	r3, [sp, #8]
 8002648:	4240      	negs	r0, r0
 800264a:	1ae4      	subs	r4, r4, r3
 800264c:	2701      	movs	r7, #1
 800264e:	1a24      	subs	r4, r4, r0
 8002650:	e5a8      	b.n	80021a4 <__aeabi_dsub+0xc4>
 8002652:	9d02      	ldr	r5, [sp, #8]
 8002654:	4652      	mov	r2, sl
 8002656:	002b      	movs	r3, r5
 8002658:	3a20      	subs	r2, #32
 800265a:	40d3      	lsrs	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	4653      	mov	r3, sl
 8002660:	2b20      	cmp	r3, #32
 8002662:	d006      	beq.n	8002672 <__aeabi_dsub+0x592>
 8002664:	2240      	movs	r2, #64	@ 0x40
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	002b      	movs	r3, r5
 800266a:	4093      	lsls	r3, r2
 800266c:	4662      	mov	r2, ip
 800266e:	431a      	orrs	r2, r3
 8002670:	4693      	mov	fp, r2
 8002672:	465d      	mov	r5, fp
 8002674:	1e6b      	subs	r3, r5, #1
 8002676:	419d      	sbcs	r5, r3
 8002678:	430d      	orrs	r5, r1
 800267a:	e615      	b.n	80022a8 <__aeabi_dsub+0x1c8>
 800267c:	0762      	lsls	r2, r4, #29
 800267e:	08c0      	lsrs	r0, r0, #3
 8002680:	4302      	orrs	r2, r0
 8002682:	08e4      	lsrs	r4, r4, #3
 8002684:	e70d      	b.n	80024a2 <__aeabi_dsub+0x3c2>
 8002686:	0011      	movs	r1, r2
 8002688:	0027      	movs	r7, r4
 800268a:	3920      	subs	r1, #32
 800268c:	40cf      	lsrs	r7, r1
 800268e:	2a20      	cmp	r2, #32
 8002690:	d005      	beq.n	800269e <__aeabi_dsub+0x5be>
 8002692:	2140      	movs	r1, #64	@ 0x40
 8002694:	1a8a      	subs	r2, r1, r2
 8002696:	4094      	lsls	r4, r2
 8002698:	0025      	movs	r5, r4
 800269a:	4305      	orrs	r5, r0
 800269c:	9503      	str	r5, [sp, #12]
 800269e:	9d03      	ldr	r5, [sp, #12]
 80026a0:	1e6a      	subs	r2, r5, #1
 80026a2:	4195      	sbcs	r5, r2
 80026a4:	433d      	orrs	r5, r7
 80026a6:	e77d      	b.n	80025a4 <__aeabi_dsub+0x4c4>
 80026a8:	2a00      	cmp	r2, #0
 80026aa:	d100      	bne.n	80026ae <__aeabi_dsub+0x5ce>
 80026ac:	e744      	b.n	8002538 <__aeabi_dsub+0x458>
 80026ae:	2601      	movs	r6, #1
 80026b0:	400e      	ands	r6, r1
 80026b2:	4663      	mov	r3, ip
 80026b4:	08d9      	lsrs	r1, r3, #3
 80026b6:	9b02      	ldr	r3, [sp, #8]
 80026b8:	075a      	lsls	r2, r3, #29
 80026ba:	430a      	orrs	r2, r1
 80026bc:	08dc      	lsrs	r4, r3, #3
 80026be:	e6f0      	b.n	80024a2 <__aeabi_dsub+0x3c2>
 80026c0:	2a00      	cmp	r2, #0
 80026c2:	d028      	beq.n	8002716 <__aeabi_dsub+0x636>
 80026c4:	4662      	mov	r2, ip
 80026c6:	9f02      	ldr	r7, [sp, #8]
 80026c8:	08c0      	lsrs	r0, r0, #3
 80026ca:	433a      	orrs	r2, r7
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x5f0>
 80026ce:	e6dc      	b.n	800248a <__aeabi_dsub+0x3aa>
 80026d0:	0762      	lsls	r2, r4, #29
 80026d2:	4310      	orrs	r0, r2
 80026d4:	2280      	movs	r2, #128	@ 0x80
 80026d6:	08e4      	lsrs	r4, r4, #3
 80026d8:	0312      	lsls	r2, r2, #12
 80026da:	4214      	tst	r4, r2
 80026dc:	d009      	beq.n	80026f2 <__aeabi_dsub+0x612>
 80026de:	08fd      	lsrs	r5, r7, #3
 80026e0:	4215      	tst	r5, r2
 80026e2:	d106      	bne.n	80026f2 <__aeabi_dsub+0x612>
 80026e4:	4663      	mov	r3, ip
 80026e6:	2601      	movs	r6, #1
 80026e8:	002c      	movs	r4, r5
 80026ea:	08d8      	lsrs	r0, r3, #3
 80026ec:	077b      	lsls	r3, r7, #29
 80026ee:	4318      	orrs	r0, r3
 80026f0:	400e      	ands	r6, r1
 80026f2:	0f42      	lsrs	r2, r0, #29
 80026f4:	00c0      	lsls	r0, r0, #3
 80026f6:	08c0      	lsrs	r0, r0, #3
 80026f8:	0752      	lsls	r2, r2, #29
 80026fa:	4302      	orrs	r2, r0
 80026fc:	e601      	b.n	8002302 <__aeabi_dsub+0x222>
 80026fe:	4663      	mov	r3, ip
 8002700:	1a1d      	subs	r5, r3, r0
 8002702:	45ac      	cmp	ip, r5
 8002704:	4192      	sbcs	r2, r2
 8002706:	9b02      	ldr	r3, [sp, #8]
 8002708:	4252      	negs	r2, r2
 800270a:	1b1c      	subs	r4, r3, r4
 800270c:	000e      	movs	r6, r1
 800270e:	4688      	mov	r8, r1
 8002710:	2701      	movs	r7, #1
 8002712:	1aa4      	subs	r4, r4, r2
 8002714:	e546      	b.n	80021a4 <__aeabi_dsub+0xc4>
 8002716:	4663      	mov	r3, ip
 8002718:	08d9      	lsrs	r1, r3, #3
 800271a:	9b02      	ldr	r3, [sp, #8]
 800271c:	075a      	lsls	r2, r3, #29
 800271e:	430a      	orrs	r2, r1
 8002720:	08dc      	lsrs	r4, r3, #3
 8002722:	e5ee      	b.n	8002302 <__aeabi_dsub+0x222>
 8002724:	4663      	mov	r3, ip
 8002726:	9c02      	ldr	r4, [sp, #8]
 8002728:	9303      	str	r3, [sp, #12]
 800272a:	e6c7      	b.n	80024bc <__aeabi_dsub+0x3dc>
 800272c:	08c0      	lsrs	r0, r0, #3
 800272e:	2a00      	cmp	r2, #0
 8002730:	d100      	bne.n	8002734 <__aeabi_dsub+0x654>
 8002732:	e6aa      	b.n	800248a <__aeabi_dsub+0x3aa>
 8002734:	0762      	lsls	r2, r4, #29
 8002736:	4310      	orrs	r0, r2
 8002738:	2280      	movs	r2, #128	@ 0x80
 800273a:	08e4      	lsrs	r4, r4, #3
 800273c:	0312      	lsls	r2, r2, #12
 800273e:	4214      	tst	r4, r2
 8002740:	d0d7      	beq.n	80026f2 <__aeabi_dsub+0x612>
 8002742:	9f02      	ldr	r7, [sp, #8]
 8002744:	08fd      	lsrs	r5, r7, #3
 8002746:	4215      	tst	r5, r2
 8002748:	d1d3      	bne.n	80026f2 <__aeabi_dsub+0x612>
 800274a:	4663      	mov	r3, ip
 800274c:	2601      	movs	r6, #1
 800274e:	08d8      	lsrs	r0, r3, #3
 8002750:	077b      	lsls	r3, r7, #29
 8002752:	002c      	movs	r4, r5
 8002754:	4318      	orrs	r0, r3
 8002756:	400e      	ands	r6, r1
 8002758:	e7cb      	b.n	80026f2 <__aeabi_dsub+0x612>
 800275a:	000a      	movs	r2, r1
 800275c:	0027      	movs	r7, r4
 800275e:	3a20      	subs	r2, #32
 8002760:	40d7      	lsrs	r7, r2
 8002762:	2920      	cmp	r1, #32
 8002764:	d005      	beq.n	8002772 <__aeabi_dsub+0x692>
 8002766:	2240      	movs	r2, #64	@ 0x40
 8002768:	1a52      	subs	r2, r2, r1
 800276a:	4094      	lsls	r4, r2
 800276c:	0025      	movs	r5, r4
 800276e:	4305      	orrs	r5, r0
 8002770:	9503      	str	r5, [sp, #12]
 8002772:	9d03      	ldr	r5, [sp, #12]
 8002774:	1e6a      	subs	r2, r5, #1
 8002776:	4195      	sbcs	r5, r2
 8002778:	432f      	orrs	r7, r5
 800277a:	e610      	b.n	800239e <__aeabi_dsub+0x2be>
 800277c:	0014      	movs	r4, r2
 800277e:	2500      	movs	r5, #0
 8002780:	2200      	movs	r2, #0
 8002782:	e556      	b.n	8002232 <__aeabi_dsub+0x152>
 8002784:	9b02      	ldr	r3, [sp, #8]
 8002786:	4460      	add	r0, ip
 8002788:	4699      	mov	r9, r3
 800278a:	4560      	cmp	r0, ip
 800278c:	4192      	sbcs	r2, r2
 800278e:	444c      	add	r4, r9
 8002790:	4252      	negs	r2, r2
 8002792:	0005      	movs	r5, r0
 8002794:	18a4      	adds	r4, r4, r2
 8002796:	e74c      	b.n	8002632 <__aeabi_dsub+0x552>
 8002798:	001a      	movs	r2, r3
 800279a:	001c      	movs	r4, r3
 800279c:	432a      	orrs	r2, r5
 800279e:	d000      	beq.n	80027a2 <__aeabi_dsub+0x6c2>
 80027a0:	e6b3      	b.n	800250a <__aeabi_dsub+0x42a>
 80027a2:	e6c9      	b.n	8002538 <__aeabi_dsub+0x458>
 80027a4:	2480      	movs	r4, #128	@ 0x80
 80027a6:	2600      	movs	r6, #0
 80027a8:	0324      	lsls	r4, r4, #12
 80027aa:	e5ae      	b.n	800230a <__aeabi_dsub+0x22a>
 80027ac:	2120      	movs	r1, #32
 80027ae:	2500      	movs	r5, #0
 80027b0:	1a09      	subs	r1, r1, r0
 80027b2:	e517      	b.n	80021e4 <__aeabi_dsub+0x104>
 80027b4:	2200      	movs	r2, #0
 80027b6:	2500      	movs	r5, #0
 80027b8:	4c0b      	ldr	r4, [pc, #44]	@ (80027e8 <__aeabi_dsub+0x708>)
 80027ba:	e53a      	b.n	8002232 <__aeabi_dsub+0x152>
 80027bc:	2d00      	cmp	r5, #0
 80027be:	d100      	bne.n	80027c2 <__aeabi_dsub+0x6e2>
 80027c0:	e5f6      	b.n	80023b0 <__aeabi_dsub+0x2d0>
 80027c2:	464b      	mov	r3, r9
 80027c4:	1bda      	subs	r2, r3, r7
 80027c6:	4692      	mov	sl, r2
 80027c8:	2f00      	cmp	r7, #0
 80027ca:	d100      	bne.n	80027ce <__aeabi_dsub+0x6ee>
 80027cc:	e66f      	b.n	80024ae <__aeabi_dsub+0x3ce>
 80027ce:	2a38      	cmp	r2, #56	@ 0x38
 80027d0:	dc05      	bgt.n	80027de <__aeabi_dsub+0x6fe>
 80027d2:	2680      	movs	r6, #128	@ 0x80
 80027d4:	0436      	lsls	r6, r6, #16
 80027d6:	4334      	orrs	r4, r6
 80027d8:	4688      	mov	r8, r1
 80027da:	000e      	movs	r6, r1
 80027dc:	e6d1      	b.n	8002582 <__aeabi_dsub+0x4a2>
 80027de:	4688      	mov	r8, r1
 80027e0:	000e      	movs	r6, r1
 80027e2:	2501      	movs	r5, #1
 80027e4:	e6de      	b.n	80025a4 <__aeabi_dsub+0x4c4>
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	000007ff 	.word	0x000007ff
 80027ec:	ff7fffff 	.word	0xff7fffff
 80027f0:	000007fe 	.word	0x000007fe
 80027f4:	2d00      	cmp	r5, #0
 80027f6:	d100      	bne.n	80027fa <__aeabi_dsub+0x71a>
 80027f8:	e668      	b.n	80024cc <__aeabi_dsub+0x3ec>
 80027fa:	464b      	mov	r3, r9
 80027fc:	1bd9      	subs	r1, r3, r7
 80027fe:	2f00      	cmp	r7, #0
 8002800:	d101      	bne.n	8002806 <__aeabi_dsub+0x726>
 8002802:	468a      	mov	sl, r1
 8002804:	e5a7      	b.n	8002356 <__aeabi_dsub+0x276>
 8002806:	2701      	movs	r7, #1
 8002808:	2938      	cmp	r1, #56	@ 0x38
 800280a:	dd00      	ble.n	800280e <__aeabi_dsub+0x72e>
 800280c:	e5c7      	b.n	800239e <__aeabi_dsub+0x2be>
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	0412      	lsls	r2, r2, #16
 8002812:	4314      	orrs	r4, r2
 8002814:	e5af      	b.n	8002376 <__aeabi_dsub+0x296>
 8002816:	46c0      	nop			@ (mov r8, r8)

08002818 <__aeabi_dcmpun>:
 8002818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281a:	46c6      	mov	lr, r8
 800281c:	031e      	lsls	r6, r3, #12
 800281e:	0b36      	lsrs	r6, r6, #12
 8002820:	46b0      	mov	r8, r6
 8002822:	4e0d      	ldr	r6, [pc, #52]	@ (8002858 <__aeabi_dcmpun+0x40>)
 8002824:	030c      	lsls	r4, r1, #12
 8002826:	004d      	lsls	r5, r1, #1
 8002828:	005f      	lsls	r7, r3, #1
 800282a:	b500      	push	{lr}
 800282c:	0b24      	lsrs	r4, r4, #12
 800282e:	0d6d      	lsrs	r5, r5, #21
 8002830:	0d7f      	lsrs	r7, r7, #21
 8002832:	42b5      	cmp	r5, r6
 8002834:	d00b      	beq.n	800284e <__aeabi_dcmpun+0x36>
 8002836:	4908      	ldr	r1, [pc, #32]	@ (8002858 <__aeabi_dcmpun+0x40>)
 8002838:	2000      	movs	r0, #0
 800283a:	428f      	cmp	r7, r1
 800283c:	d104      	bne.n	8002848 <__aeabi_dcmpun+0x30>
 800283e:	4646      	mov	r6, r8
 8002840:	4316      	orrs	r6, r2
 8002842:	0030      	movs	r0, r6
 8002844:	1e43      	subs	r3, r0, #1
 8002846:	4198      	sbcs	r0, r3
 8002848:	bc80      	pop	{r7}
 800284a:	46b8      	mov	r8, r7
 800284c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800284e:	4304      	orrs	r4, r0
 8002850:	2001      	movs	r0, #1
 8002852:	2c00      	cmp	r4, #0
 8002854:	d1f8      	bne.n	8002848 <__aeabi_dcmpun+0x30>
 8002856:	e7ee      	b.n	8002836 <__aeabi_dcmpun+0x1e>
 8002858:	000007ff 	.word	0x000007ff

0800285c <__aeabi_d2iz>:
 800285c:	000b      	movs	r3, r1
 800285e:	0002      	movs	r2, r0
 8002860:	b570      	push	{r4, r5, r6, lr}
 8002862:	4d16      	ldr	r5, [pc, #88]	@ (80028bc <__aeabi_d2iz+0x60>)
 8002864:	030c      	lsls	r4, r1, #12
 8002866:	b082      	sub	sp, #8
 8002868:	0049      	lsls	r1, r1, #1
 800286a:	2000      	movs	r0, #0
 800286c:	9200      	str	r2, [sp, #0]
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	0b24      	lsrs	r4, r4, #12
 8002872:	0d49      	lsrs	r1, r1, #21
 8002874:	0fde      	lsrs	r6, r3, #31
 8002876:	42a9      	cmp	r1, r5
 8002878:	dd04      	ble.n	8002884 <__aeabi_d2iz+0x28>
 800287a:	4811      	ldr	r0, [pc, #68]	@ (80028c0 <__aeabi_d2iz+0x64>)
 800287c:	4281      	cmp	r1, r0
 800287e:	dd03      	ble.n	8002888 <__aeabi_d2iz+0x2c>
 8002880:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <__aeabi_d2iz+0x68>)
 8002882:	18f0      	adds	r0, r6, r3
 8002884:	b002      	add	sp, #8
 8002886:	bd70      	pop	{r4, r5, r6, pc}
 8002888:	2080      	movs	r0, #128	@ 0x80
 800288a:	0340      	lsls	r0, r0, #13
 800288c:	4320      	orrs	r0, r4
 800288e:	4c0e      	ldr	r4, [pc, #56]	@ (80028c8 <__aeabi_d2iz+0x6c>)
 8002890:	1a64      	subs	r4, r4, r1
 8002892:	2c1f      	cmp	r4, #31
 8002894:	dd08      	ble.n	80028a8 <__aeabi_d2iz+0x4c>
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <__aeabi_d2iz+0x70>)
 8002898:	1a5b      	subs	r3, r3, r1
 800289a:	40d8      	lsrs	r0, r3
 800289c:	0003      	movs	r3, r0
 800289e:	4258      	negs	r0, r3
 80028a0:	2e00      	cmp	r6, #0
 80028a2:	d1ef      	bne.n	8002884 <__aeabi_d2iz+0x28>
 80028a4:	0018      	movs	r0, r3
 80028a6:	e7ed      	b.n	8002884 <__aeabi_d2iz+0x28>
 80028a8:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <__aeabi_d2iz+0x74>)
 80028aa:	9a00      	ldr	r2, [sp, #0]
 80028ac:	469c      	mov	ip, r3
 80028ae:	0003      	movs	r3, r0
 80028b0:	4461      	add	r1, ip
 80028b2:	408b      	lsls	r3, r1
 80028b4:	40e2      	lsrs	r2, r4
 80028b6:	4313      	orrs	r3, r2
 80028b8:	e7f1      	b.n	800289e <__aeabi_d2iz+0x42>
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	000003fe 	.word	0x000003fe
 80028c0:	0000041d 	.word	0x0000041d
 80028c4:	7fffffff 	.word	0x7fffffff
 80028c8:	00000433 	.word	0x00000433
 80028cc:	00000413 	.word	0x00000413
 80028d0:	fffffbed 	.word	0xfffffbed

080028d4 <__aeabi_i2d>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	2800      	cmp	r0, #0
 80028d8:	d016      	beq.n	8002908 <__aeabi_i2d+0x34>
 80028da:	17c3      	asrs	r3, r0, #31
 80028dc:	18c5      	adds	r5, r0, r3
 80028de:	405d      	eors	r5, r3
 80028e0:	0fc4      	lsrs	r4, r0, #31
 80028e2:	0028      	movs	r0, r5
 80028e4:	f000 f8cc 	bl	8002a80 <__clzsi2>
 80028e8:	4b10      	ldr	r3, [pc, #64]	@ (800292c <__aeabi_i2d+0x58>)
 80028ea:	1a1b      	subs	r3, r3, r0
 80028ec:	055b      	lsls	r3, r3, #21
 80028ee:	0d5b      	lsrs	r3, r3, #21
 80028f0:	280a      	cmp	r0, #10
 80028f2:	dc14      	bgt.n	800291e <__aeabi_i2d+0x4a>
 80028f4:	0002      	movs	r2, r0
 80028f6:	002e      	movs	r6, r5
 80028f8:	3215      	adds	r2, #21
 80028fa:	4096      	lsls	r6, r2
 80028fc:	220b      	movs	r2, #11
 80028fe:	1a12      	subs	r2, r2, r0
 8002900:	40d5      	lsrs	r5, r2
 8002902:	032d      	lsls	r5, r5, #12
 8002904:	0b2d      	lsrs	r5, r5, #12
 8002906:	e003      	b.n	8002910 <__aeabi_i2d+0x3c>
 8002908:	2400      	movs	r4, #0
 800290a:	2300      	movs	r3, #0
 800290c:	2500      	movs	r5, #0
 800290e:	2600      	movs	r6, #0
 8002910:	051b      	lsls	r3, r3, #20
 8002912:	432b      	orrs	r3, r5
 8002914:	07e4      	lsls	r4, r4, #31
 8002916:	4323      	orrs	r3, r4
 8002918:	0030      	movs	r0, r6
 800291a:	0019      	movs	r1, r3
 800291c:	bd70      	pop	{r4, r5, r6, pc}
 800291e:	380b      	subs	r0, #11
 8002920:	4085      	lsls	r5, r0
 8002922:	032d      	lsls	r5, r5, #12
 8002924:	2600      	movs	r6, #0
 8002926:	0b2d      	lsrs	r5, r5, #12
 8002928:	e7f2      	b.n	8002910 <__aeabi_i2d+0x3c>
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	0000041e 	.word	0x0000041e

08002930 <__aeabi_ui2d>:
 8002930:	b510      	push	{r4, lr}
 8002932:	1e04      	subs	r4, r0, #0
 8002934:	d010      	beq.n	8002958 <__aeabi_ui2d+0x28>
 8002936:	f000 f8a3 	bl	8002a80 <__clzsi2>
 800293a:	4b0e      	ldr	r3, [pc, #56]	@ (8002974 <__aeabi_ui2d+0x44>)
 800293c:	1a1b      	subs	r3, r3, r0
 800293e:	055b      	lsls	r3, r3, #21
 8002940:	0d5b      	lsrs	r3, r3, #21
 8002942:	280a      	cmp	r0, #10
 8002944:	dc0f      	bgt.n	8002966 <__aeabi_ui2d+0x36>
 8002946:	220b      	movs	r2, #11
 8002948:	0021      	movs	r1, r4
 800294a:	1a12      	subs	r2, r2, r0
 800294c:	40d1      	lsrs	r1, r2
 800294e:	3015      	adds	r0, #21
 8002950:	030a      	lsls	r2, r1, #12
 8002952:	4084      	lsls	r4, r0
 8002954:	0b12      	lsrs	r2, r2, #12
 8002956:	e001      	b.n	800295c <__aeabi_ui2d+0x2c>
 8002958:	2300      	movs	r3, #0
 800295a:	2200      	movs	r2, #0
 800295c:	051b      	lsls	r3, r3, #20
 800295e:	4313      	orrs	r3, r2
 8002960:	0020      	movs	r0, r4
 8002962:	0019      	movs	r1, r3
 8002964:	bd10      	pop	{r4, pc}
 8002966:	0022      	movs	r2, r4
 8002968:	380b      	subs	r0, #11
 800296a:	4082      	lsls	r2, r0
 800296c:	0312      	lsls	r2, r2, #12
 800296e:	2400      	movs	r4, #0
 8002970:	0b12      	lsrs	r2, r2, #12
 8002972:	e7f3      	b.n	800295c <__aeabi_ui2d+0x2c>
 8002974:	0000041e 	.word	0x0000041e

08002978 <__aeabi_d2f>:
 8002978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297a:	004b      	lsls	r3, r1, #1
 800297c:	030f      	lsls	r7, r1, #12
 800297e:	0d5b      	lsrs	r3, r3, #21
 8002980:	4c3b      	ldr	r4, [pc, #236]	@ (8002a70 <__aeabi_d2f+0xf8>)
 8002982:	0f45      	lsrs	r5, r0, #29
 8002984:	b083      	sub	sp, #12
 8002986:	0a7f      	lsrs	r7, r7, #9
 8002988:	1c5e      	adds	r6, r3, #1
 800298a:	432f      	orrs	r7, r5
 800298c:	9000      	str	r0, [sp, #0]
 800298e:	9101      	str	r1, [sp, #4]
 8002990:	0fca      	lsrs	r2, r1, #31
 8002992:	00c5      	lsls	r5, r0, #3
 8002994:	4226      	tst	r6, r4
 8002996:	d00b      	beq.n	80029b0 <__aeabi_d2f+0x38>
 8002998:	4936      	ldr	r1, [pc, #216]	@ (8002a74 <__aeabi_d2f+0xfc>)
 800299a:	185c      	adds	r4, r3, r1
 800299c:	2cfe      	cmp	r4, #254	@ 0xfe
 800299e:	dd13      	ble.n	80029c8 <__aeabi_d2f+0x50>
 80029a0:	20ff      	movs	r0, #255	@ 0xff
 80029a2:	2300      	movs	r3, #0
 80029a4:	05c0      	lsls	r0, r0, #23
 80029a6:	4318      	orrs	r0, r3
 80029a8:	07d2      	lsls	r2, r2, #31
 80029aa:	4310      	orrs	r0, r2
 80029ac:	b003      	add	sp, #12
 80029ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <__aeabi_d2f+0x42>
 80029b4:	2000      	movs	r0, #0
 80029b6:	2300      	movs	r3, #0
 80029b8:	e7f4      	b.n	80029a4 <__aeabi_d2f+0x2c>
 80029ba:	433d      	orrs	r5, r7
 80029bc:	d0f0      	beq.n	80029a0 <__aeabi_d2f+0x28>
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	03db      	lsls	r3, r3, #15
 80029c2:	20ff      	movs	r0, #255	@ 0xff
 80029c4:	433b      	orrs	r3, r7
 80029c6:	e7ed      	b.n	80029a4 <__aeabi_d2f+0x2c>
 80029c8:	2c00      	cmp	r4, #0
 80029ca:	dd14      	ble.n	80029f6 <__aeabi_d2f+0x7e>
 80029cc:	9b00      	ldr	r3, [sp, #0]
 80029ce:	00ff      	lsls	r7, r7, #3
 80029d0:	019b      	lsls	r3, r3, #6
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	4183      	sbcs	r3, r0
 80029d6:	0f69      	lsrs	r1, r5, #29
 80029d8:	433b      	orrs	r3, r7
 80029da:	430b      	orrs	r3, r1
 80029dc:	0759      	lsls	r1, r3, #29
 80029de:	d041      	beq.n	8002a64 <__aeabi_d2f+0xec>
 80029e0:	210f      	movs	r1, #15
 80029e2:	4019      	ands	r1, r3
 80029e4:	2904      	cmp	r1, #4
 80029e6:	d028      	beq.n	8002a3a <__aeabi_d2f+0xc2>
 80029e8:	3304      	adds	r3, #4
 80029ea:	0159      	lsls	r1, r3, #5
 80029ec:	d525      	bpl.n	8002a3a <__aeabi_d2f+0xc2>
 80029ee:	3401      	adds	r4, #1
 80029f0:	2300      	movs	r3, #0
 80029f2:	b2e0      	uxtb	r0, r4
 80029f4:	e7d6      	b.n	80029a4 <__aeabi_d2f+0x2c>
 80029f6:	0021      	movs	r1, r4
 80029f8:	3117      	adds	r1, #23
 80029fa:	dbdb      	blt.n	80029b4 <__aeabi_d2f+0x3c>
 80029fc:	2180      	movs	r1, #128	@ 0x80
 80029fe:	201e      	movs	r0, #30
 8002a00:	0409      	lsls	r1, r1, #16
 8002a02:	4339      	orrs	r1, r7
 8002a04:	1b00      	subs	r0, r0, r4
 8002a06:	281f      	cmp	r0, #31
 8002a08:	dd1b      	ble.n	8002a42 <__aeabi_d2f+0xca>
 8002a0a:	2602      	movs	r6, #2
 8002a0c:	4276      	negs	r6, r6
 8002a0e:	1b34      	subs	r4, r6, r4
 8002a10:	000e      	movs	r6, r1
 8002a12:	40e6      	lsrs	r6, r4
 8002a14:	0034      	movs	r4, r6
 8002a16:	2820      	cmp	r0, #32
 8002a18:	d004      	beq.n	8002a24 <__aeabi_d2f+0xac>
 8002a1a:	4817      	ldr	r0, [pc, #92]	@ (8002a78 <__aeabi_d2f+0x100>)
 8002a1c:	4684      	mov	ip, r0
 8002a1e:	4463      	add	r3, ip
 8002a20:	4099      	lsls	r1, r3
 8002a22:	430d      	orrs	r5, r1
 8002a24:	002b      	movs	r3, r5
 8002a26:	1e59      	subs	r1, r3, #1
 8002a28:	418b      	sbcs	r3, r1
 8002a2a:	4323      	orrs	r3, r4
 8002a2c:	0759      	lsls	r1, r3, #29
 8002a2e:	d015      	beq.n	8002a5c <__aeabi_d2f+0xe4>
 8002a30:	210f      	movs	r1, #15
 8002a32:	2400      	movs	r4, #0
 8002a34:	4019      	ands	r1, r3
 8002a36:	2904      	cmp	r1, #4
 8002a38:	d117      	bne.n	8002a6a <__aeabi_d2f+0xf2>
 8002a3a:	019b      	lsls	r3, r3, #6
 8002a3c:	0a5b      	lsrs	r3, r3, #9
 8002a3e:	b2e0      	uxtb	r0, r4
 8002a40:	e7b0      	b.n	80029a4 <__aeabi_d2f+0x2c>
 8002a42:	4c0e      	ldr	r4, [pc, #56]	@ (8002a7c <__aeabi_d2f+0x104>)
 8002a44:	191c      	adds	r4, r3, r4
 8002a46:	002b      	movs	r3, r5
 8002a48:	40a5      	lsls	r5, r4
 8002a4a:	40c3      	lsrs	r3, r0
 8002a4c:	40a1      	lsls	r1, r4
 8002a4e:	1e68      	subs	r0, r5, #1
 8002a50:	4185      	sbcs	r5, r0
 8002a52:	4329      	orrs	r1, r5
 8002a54:	430b      	orrs	r3, r1
 8002a56:	2400      	movs	r4, #0
 8002a58:	0759      	lsls	r1, r3, #29
 8002a5a:	d1c1      	bne.n	80029e0 <__aeabi_d2f+0x68>
 8002a5c:	019b      	lsls	r3, r3, #6
 8002a5e:	2000      	movs	r0, #0
 8002a60:	0a5b      	lsrs	r3, r3, #9
 8002a62:	e79f      	b.n	80029a4 <__aeabi_d2f+0x2c>
 8002a64:	08db      	lsrs	r3, r3, #3
 8002a66:	b2e0      	uxtb	r0, r4
 8002a68:	e79c      	b.n	80029a4 <__aeabi_d2f+0x2c>
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	e7e5      	b.n	8002a3a <__aeabi_d2f+0xc2>
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	000007fe 	.word	0x000007fe
 8002a74:	fffffc80 	.word	0xfffffc80
 8002a78:	fffffca2 	.word	0xfffffca2
 8002a7c:	fffffc82 	.word	0xfffffc82

08002a80 <__clzsi2>:
 8002a80:	211c      	movs	r1, #28
 8002a82:	2301      	movs	r3, #1
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	4298      	cmp	r0, r3
 8002a88:	d301      	bcc.n	8002a8e <__clzsi2+0xe>
 8002a8a:	0c00      	lsrs	r0, r0, #16
 8002a8c:	3910      	subs	r1, #16
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	4298      	cmp	r0, r3
 8002a92:	d301      	bcc.n	8002a98 <__clzsi2+0x18>
 8002a94:	0a00      	lsrs	r0, r0, #8
 8002a96:	3908      	subs	r1, #8
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	4298      	cmp	r0, r3
 8002a9c:	d301      	bcc.n	8002aa2 <__clzsi2+0x22>
 8002a9e:	0900      	lsrs	r0, r0, #4
 8002aa0:	3904      	subs	r1, #4
 8002aa2:	a202      	add	r2, pc, #8	@ (adr r2, 8002aac <__clzsi2+0x2c>)
 8002aa4:	5c10      	ldrb	r0, [r2, r0]
 8002aa6:	1840      	adds	r0, r0, r1
 8002aa8:	4770      	bx	lr
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	02020304 	.word	0x02020304
 8002ab0:	01010101 	.word	0x01010101
	...

08002abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8002ac0:	f001 feec 	bl	800489c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ac4:	f000 f884 	bl	8002bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ac8:	f000 fd98 	bl	80035fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002acc:	f000 fd70 	bl	80035b0 <MX_DMA_Init>
  MX_ADC_Init();
 8002ad0:	f000 fba8 	bl	8003224 <MX_ADC_Init>
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
 8002ad4:	f001 fdb8 	bl	8004648 <MX_USART1_UART_Init>
  HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 8002ad8:	4930      	ldr	r1, [pc, #192]	@ (8002b9c <main+0xe0>)
 8002ada:	4b31      	ldr	r3, [pc, #196]	@ (8002ba0 <main+0xe4>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f005 f993 	bl	8007e0a <HAL_UART_Receive_IT>

  MX_TIM1_Init();
 8002ae4:	f001 f9fc 	bl	8003ee0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002ae8:	f001 fb04 	bl	80040f4 <MX_TIM3_Init>
  MX_TIM6_Init();
 8002aec:	f001 fb58 	bl	80041a0 <MX_TIM6_Init>
  MX_TIM14_Init();
 8002af0:	f001 fb78 	bl	80041e4 <MX_TIM14_Init>
  MX_TIM15_Init();
 8002af4:	f001 fbc2 	bl	800427c <MX_TIM15_Init>
  MX_TIM16_Init();
 8002af8:	f001 fc18 	bl	800432c <MX_TIM16_Init>

  HAL_TIM_Base_Start_IT(&htim3);
 8002afc:	4b29      	ldr	r3, [pc, #164]	@ (8002ba4 <main+0xe8>)
 8002afe:	0018      	movs	r0, r3
 8002b00:	f003 fdaa 	bl	8006658 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8002b04:	4b28      	ldr	r3, [pc, #160]	@ (8002ba8 <main+0xec>)
 8002b06:	0018      	movs	r0, r3
 8002b08:	f003 fda6 	bl	8006658 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8002b0c:	4b27      	ldr	r3, [pc, #156]	@ (8002bac <main+0xf0>)
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f003 fda2 	bl	8006658 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 8002b14:	4b26      	ldr	r3, [pc, #152]	@ (8002bb0 <main+0xf4>)
 8002b16:	0018      	movs	r0, r3
 8002b18:	f003 fd9e 	bl	8006658 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8002b1c:	4b25      	ldr	r3, [pc, #148]	@ (8002bb4 <main+0xf8>)
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f003 fd9a 	bl	8006658 <HAL_TIM_Base_Start_IT>

	if(HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buf, sizeof(adc_buf)/2)!=HAL_OK)//Remember that the length of DMA is half world and size of return bytes:that is double of the data transmited so the array overfllow!
 8002b24:	4924      	ldr	r1, [pc, #144]	@ (8002bb8 <main+0xfc>)
 8002b26:	4b25      	ldr	r3, [pc, #148]	@ (8002bbc <main+0x100>)
 8002b28:	220a      	movs	r2, #10
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f002 f85a 	bl	8004be4 <HAL_ADC_Start_DMA>
 8002b30:	1e03      	subs	r3, r0, #0
 8002b32:	d001      	beq.n	8002b38 <main+0x7c>
	{
		Error_Handler(); //This function also enable the interruption
 8002b34:	f000 f8ee 	bl	8002d14 <Error_Handler>
	}

  /* USER CODE BEGIN 2 */
	HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_4);
 8002b38:	4b21      	ldr	r3, [pc, #132]	@ (8002bc0 <main+0x104>)
 8002b3a:	210c      	movs	r1, #12
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f003 fe5d 	bl	80067fc <HAL_TIM_OC_Start>
	HX711_Calibration(&weight_par);
 8002b42:	4b20      	ldr	r3, [pc, #128]	@ (8002bc4 <main+0x108>)
 8002b44:	0018      	movs	r0, r3
 8002b46:	f001 f811 	bl	8003b6c <HX711_Calibration>
	printflag.PID_Set = FALSE;
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc8 <main+0x10c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	715a      	strb	r2, [r3, #5]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Kalman  filter
	weight_par.gramAvgval = (weight_par.gramAvg[0] + weight_par.gramAvg[1] + weight_par.gramAvg[2] + weight_par.gramAvg[3] + weight_par.gramAvg[4])/5;
 8002b50:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc4 <main+0x108>)
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc4 <main+0x108>)
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	18d2      	adds	r2, r2, r3
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <main+0x108>)
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	18d2      	adds	r2, r2, r3
 8002b60:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <main+0x108>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	18d2      	adds	r2, r2, r3
 8002b66:	4b17      	ldr	r3, [pc, #92]	@ (8002bc4 <main+0x108>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	18d3      	adds	r3, r2, r3
 8002b6c:	2105      	movs	r1, #5
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f7fd fb7a 	bl	8000268 <__divsi3>
 8002b74:	0003      	movs	r3, r0
 8002b76:	001a      	movs	r2, r3
 8002b78:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <main+0x108>)
 8002b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if(weight_par.calibration_flag)
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <main+0x108>)
 8002b7e:	7b1b      	ldrb	r3, [r3, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0e5      	beq.n	8002b50 <main+0x94>
	{
//		printf("%d, %d \n", weight_par.gramAvgval,(int)htim1.Instance->CCR1 );//VOFA curve

		printf_DMA("%d, %d\r\n",weight_par.gramAvgval, (int)htim1.Instance->CCR1);
 8002b84:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc4 <main+0x108>)
 8002b86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b88:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc0 <main+0x104>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8e:	001a      	movs	r2, r3
 8002b90:	4b0e      	ldr	r3, [pc, #56]	@ (8002bcc <main+0x110>)
 8002b92:	0018      	movs	r0, r3
 8002b94:	f000 f892 	bl	8002cbc <printf_DMA>
	weight_par.gramAvgval = (weight_par.gramAvg[0] + weight_par.gramAvg[1] + weight_par.gramAvg[2] + weight_par.gramAvg[3] + weight_par.gramAvg[4])/5;
 8002b98:	e7da      	b.n	8002b50 <main+0x94>
 8002b9a:	46c0      	nop			@ (mov r8, r8)
 8002b9c:	200006b3 	.word	0x200006b3
 8002ba0:	200006b8 	.word	0x200006b8
 8002ba4:	2000034c 	.word	0x2000034c
 8002ba8:	20000394 	.word	0x20000394
 8002bac:	200003dc 	.word	0x200003dc
 8002bb0:	20000424 	.word	0x20000424
 8002bb4:	2000046c 	.word	0x2000046c
 8002bb8:	2000021c 	.word	0x2000021c
 8002bbc:	2000026c 	.word	0x2000026c
 8002bc0:	20000304 	.word	0x20000304
 8002bc4:	20000230 	.word	0x20000230
 8002bc8:	20000260 	.word	0x20000260
 8002bcc:	0800e618 	.word	0x0800e618

08002bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b095      	sub	sp, #84	@ 0x54
 8002bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bd6:	2420      	movs	r4, #32
 8002bd8:	193b      	adds	r3, r7, r4
 8002bda:	0018      	movs	r0, r3
 8002bdc:	2330      	movs	r3, #48	@ 0x30
 8002bde:	001a      	movs	r2, r3
 8002be0:	2100      	movs	r1, #0
 8002be2:	f008 faf5 	bl	800b1d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002be6:	2310      	movs	r3, #16
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	0018      	movs	r0, r3
 8002bec:	2310      	movs	r3, #16
 8002bee:	001a      	movs	r2, r3
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	f008 faed 	bl	800b1d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bf6:	003b      	movs	r3, r7
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	2310      	movs	r3, #16
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	2100      	movs	r1, #0
 8002c00:	f008 fae6 	bl	800b1d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c04:	0021      	movs	r1, r4
 8002c06:	187b      	adds	r3, r7, r1
 8002c08:	2202      	movs	r2, #2
 8002c0a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	2201      	movs	r2, #1
 8002c10:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	2210      	movs	r2, #16
 8002c16:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c1e:	187b      	adds	r3, r7, r1
 8002c20:	2200      	movs	r2, #0
 8002c22:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002c24:	187b      	adds	r3, r7, r1
 8002c26:	22a0      	movs	r2, #160	@ 0xa0
 8002c28:	0392      	lsls	r2, r2, #14
 8002c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	2200      	movs	r2, #0
 8002c30:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c32:	187b      	adds	r3, r7, r1
 8002c34:	0018      	movs	r0, r3
 8002c36:	f002 ff29 	bl	8005a8c <HAL_RCC_OscConfig>
 8002c3a:	1e03      	subs	r3, r0, #0
 8002c3c:	d001      	beq.n	8002c42 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002c3e:	f000 f869 	bl	8002d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c42:	2110      	movs	r1, #16
 8002c44:	187b      	adds	r3, r7, r1
 8002c46:	2207      	movs	r2, #7
 8002c48:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c4a:	187b      	adds	r3, r7, r1
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	2200      	movs	r2, #0
 8002c5a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2101      	movs	r1, #1
 8002c60:	0018      	movs	r0, r3
 8002c62:	f003 fa2d 	bl	80060c0 <HAL_RCC_ClockConfig>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d001      	beq.n	8002c6e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002c6a:	f000 f853 	bl	8002d14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c6e:	003b      	movs	r3, r7
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002c74:	003b      	movs	r3, r7
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c7a:	003b      	movs	r3, r7
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f003 fb63 	bl	8006348 <HAL_RCCEx_PeriphCLKConfig>
 8002c82:	1e03      	subs	r3, r0, #0
 8002c84:	d001      	beq.n	8002c8a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002c86:	f000 f845 	bl	8002d14 <Error_Handler>
  }
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b015      	add	sp, #84	@ 0x54
 8002c90:	bd90      	pop	{r4, r7, pc}
	...

08002c94 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&ch, sizeof(ch));

    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8002c9c:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <__io_putchar+0x20>)
 8002c9e:	1d39      	adds	r1, r7, #4
 8002ca0:	4805      	ldr	r0, [pc, #20]	@ (8002cb8 <__io_putchar+0x24>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f005 f812 	bl	8007ccc <HAL_UART_Transmit>
    return ch;
 8002ca8:	687b      	ldr	r3, [r7, #4]
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b002      	add	sp, #8
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	0000ffff 	.word	0x0000ffff
 8002cb8:	200006b8 	.word	0x200006b8

08002cbc <printf_DMA>:

void printf_DMA(const char *format, ...)
{
 8002cbc:	b40f      	push	{r0, r1, r2, r3}
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
	uint32_t length;
	va_list args;
//	uint8_t temp = 0;

	va_start(args, format);
 8002cc4:	2314      	movs	r3, #20
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	603b      	str	r3, [r7, #0]
	length = vsnprintf((char*)txbuf, sizeof(txbuf)+1, (char*)format, args);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	2180      	movs	r1, #128	@ 0x80
 8002cd0:	0049      	lsls	r1, r1, #1
 8002cd2:	480e      	ldr	r0, [pc, #56]	@ (8002d0c <printf_DMA+0x50>)
 8002cd4:	f008 f9d0 	bl	800b078 <vsniprintf>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	607b      	str	r3, [r7, #4]
	va_end(args);

	HAL_UART_Transmit_DMA(&huart1, txbuf, length);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	490a      	ldr	r1, [pc, #40]	@ (8002d0c <printf_DMA+0x50>)
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <printf_DMA+0x54>)
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f005 f8e7 	bl	8007eb8 <HAL_UART_Transmit_DMA>
	while(!__HAL_UART_GET_FLAG(&huart1,UART_FLAG_TC));
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <printf_DMA+0x54>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	2240      	movs	r2, #64	@ 0x40
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b40      	cmp	r3, #64	@ 0x40
 8002cf8:	d1f8      	bne.n	8002cec <printf_DMA+0x30>


}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	46c0      	nop			@ (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b002      	add	sp, #8
 8002d02:	bc80      	pop	{r7}
 8002d04:	bc08      	pop	{r3}
 8002d06:	b004      	add	sp, #16
 8002d08:	4718      	bx	r3
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	200005b4 	.word	0x200005b4
 8002d10:	200006b8 	.word	0x200006b8

08002d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d18:	b672      	cpsid	i
}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d1c:	46c0      	nop			@ (mov r8, r8)
 8002d1e:	e7fd      	b.n	8002d1c <Error_Handler+0x8>

08002d20 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4b84      	ldr	r3, [pc, #528]	@ (8002f3c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d11c      	bne.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		if(1 == weight_par.calibration_flag)
 8002d30:	4b83      	ldr	r3, [pc, #524]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002d32:	7b1b      	ldrb	r3, [r3, #12]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d000      	beq.n	8002d3a <HAL_TIM_PeriodElapsedCallback+0x1a>
 8002d38:	e0fb      	b.n	8002f32 <HAL_TIM_PeriodElapsedCallback+0x212>
		{
			Get_weight(&weight_par);
 8002d3a:	4b81      	ldr	r3, [pc, #516]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 feef 	bl	8003b20 <Get_weight>
			weight_par.cnt= weight_par.cnt >= 5? 0:weight_par.cnt+1;
 8002d42:	4b7f      	ldr	r3, [pc, #508]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	dc03      	bgt.n	8002d52 <HAL_TIM_PeriodElapsedCallback+0x32>
 8002d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_TIM_PeriodElapsedCallback+0x34>
 8002d52:	2200      	movs	r2, #0
 8002d54:	4b7a      	ldr	r3, [pc, #488]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002d56:	629a      	str	r2, [r3, #40]	@ 0x28
			weight_par.gramAvg[weight_par.cnt] = weight_par.gram;
 8002d58:	4b79      	ldr	r3, [pc, #484]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002d5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d5c:	4b78      	ldr	r3, [pc, #480]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002d5e:	6819      	ldr	r1, [r3, #0]
 8002d60:	4b77      	ldr	r3, [pc, #476]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002d62:	3204      	adds	r2, #4
 8002d64:	0092      	lsls	r2, r2, #2
 8002d66:	50d1      	str	r1, [r2, r3]
	}
	else if(htim == &htim16)//1us interval for time counting
	{

	}
}
 8002d68:	e0e3      	b.n	8002f32 <HAL_TIM_PeriodElapsedCallback+0x212>
	else if(htim == &htim6)// PWM step 1 for accurate acceleration, change the timer to modify the ramp time
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4b75      	ldr	r3, [pc, #468]	@ (8002f44 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d000      	beq.n	8002d74 <HAL_TIM_PeriodElapsedCallback+0x54>
 8002d72:	e0c2      	b.n	8002efa <HAL_TIM_PeriodElapsedCallback+0x1da>
		if(1 == weight_par.calibration_flag)
 8002d74:	4b72      	ldr	r3, [pc, #456]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002d76:	7b1b      	ldrb	r3, [r3, #12]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d000      	beq.n	8002d7e <HAL_TIM_PeriodElapsedCallback+0x5e>
 8002d7c:	e0d9      	b.n	8002f32 <HAL_TIM_PeriodElapsedCallback+0x212>
			temp = Incremental_PID(&weight_par, PULL_FORCE_THR, &PID_Parameters);
 8002d7e:	4a72      	ldr	r2, [pc, #456]	@ (8002f48 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002d80:	23fa      	movs	r3, #250	@ 0xfa
 8002d82:	0099      	lsls	r1, r3, #2
 8002d84:	4b6e      	ldr	r3, [pc, #440]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 ff72 	bl	8003c70 <Incremental_PID>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	001a      	movs	r2, r3
 8002d90:	210f      	movs	r1, #15
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	701a      	strb	r2, [r3, #0]
			pid_pwm = (signed char)(temp + pid_pwm)>=100? 100	: 	temp + pid_pwm;
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	4b6c      	ldr	r3, [pc, #432]	@ (8002f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	b25b      	sxtb	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	18d3      	adds	r3, r2, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	b25b      	sxtb	r3, r3
 8002da8:	1c1a      	adds	r2, r3, #0
 8002daa:	b253      	sxtb	r3, r2
 8002dac:	2b64      	cmp	r3, #100	@ 0x64
 8002dae:	dd01      	ble.n	8002db4 <HAL_TIM_PeriodElapsedCallback+0x94>
 8002db0:	2364      	movs	r3, #100	@ 0x64
 8002db2:	1c1a      	adds	r2, r3, #0
 8002db4:	b252      	sxtb	r2, r2
 8002db6:	4b65      	ldr	r3, [pc, #404]	@ (8002f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002db8:	701a      	strb	r2, [r3, #0]
			pid_pwm = (signed char)(temp + pid_pwm)<=0	? 0		: 	temp + pid_pwm;
 8002dba:	230f      	movs	r3, #15
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	4b62      	ldr	r3, [pc, #392]	@ (8002f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	18d3      	adds	r3, r2, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	b25b      	sxtb	r3, r3
 8002dce:	1c1a      	adds	r2, r3, #0
 8002dd0:	b253      	sxtb	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da01      	bge.n	8002dda <HAL_TIM_PeriodElapsedCallback+0xba>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	1c1a      	adds	r2, r3, #0
 8002dda:	b252      	sxtb	r2, r2
 8002ddc:	4b5b      	ldr	r3, [pc, #364]	@ (8002f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002dde:	701a      	strb	r2, [r3, #0]
			if(0<(pid_pwm-dc_pwm))
 8002de0:	4b5a      	ldr	r3, [pc, #360]	@ (8002f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	b25b      	sxtb	r3, r3
 8002de6:	001a      	movs	r2, r3
 8002de8:	4b59      	ldr	r3, [pc, #356]	@ (8002f50 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b25b      	sxtb	r3, r3
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	dd34      	ble.n	8002e5e <HAL_TIM_PeriodElapsedCallback+0x13e>
				if(0 == weight_par.eps_flag)
 8002df4:	4b52      	ldr	r3, [pc, #328]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002df6:	7b5b      	ldrb	r3, [r3, #13]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d127      	bne.n	8002e4c <HAL_TIM_PeriodElapsedCallback+0x12c>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);// LED indicator
 8002dfc:	4b55      	ldr	r3, [pc, #340]	@ (8002f54 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2101      	movs	r1, #1
 8002e02:	0018      	movs	r0, r3
 8002e04:	f002 fdff 	bl	8005a06 <HAL_GPIO_WritePin>
					AHBL_ON;
 8002e08:	4b53      	ldr	r3, [pc, #332]	@ (8002f58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f003 feb1 	bl	8006b74 <HAL_TIM_PWM_Stop>
 8002e12:	4b51      	ldr	r3, [pc, #324]	@ (8002f58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002e14:	2104      	movs	r1, #4
 8002e16:	0018      	movs	r0, r3
 8002e18:	f003 feac 	bl	8006b74 <HAL_TIM_PWM_Stop>
 8002e1c:	4b4e      	ldr	r3, [pc, #312]	@ (8002f58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002e1e:	2108      	movs	r1, #8
 8002e20:	0018      	movs	r0, r3
 8002e22:	f003 fea7 	bl	8006b74 <HAL_TIM_PWM_Stop>
 8002e26:	23e0      	movs	r3, #224	@ 0xe0
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	484c      	ldr	r0, [pc, #304]	@ (8002f5c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	0019      	movs	r1, r3
 8002e30:	f002 fde9 	bl	8005a06 <HAL_GPIO_WritePin>
 8002e34:	4b48      	ldr	r3, [pc, #288]	@ (8002f58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002e36:	2100      	movs	r1, #0
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f003 fde9 	bl	8006a10 <HAL_TIM_PWM_Start>
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	01db      	lsls	r3, r3, #7
 8002e42:	4846      	ldr	r0, [pc, #280]	@ (8002f5c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	0019      	movs	r1, r3
 8002e48:	f002 fddd 	bl	8005a06 <HAL_GPIO_WritePin>
				weight_par.eps_flag = 1;
 8002e4c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	735a      	strb	r2, [r3, #13]
				dc_pwm = pid_pwm;
 8002e52:	4b3e      	ldr	r3, [pc, #248]	@ (8002f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	569a      	ldrsb	r2, [r3, r2]
 8002e58:	4b3d      	ldr	r3, [pc, #244]	@ (8002f50 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	e00d      	b.n	8002e7a <HAL_TIM_PeriodElapsedCallback+0x15a>
			else if(0>(pid_pwm-dc_pwm))//dc_pwm > pid_pwm,
 8002e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b25b      	sxtb	r3, r3
 8002e64:	001a      	movs	r2, r3
 8002e66:	4b3a      	ldr	r3, [pc, #232]	@ (8002f50 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b25b      	sxtb	r3, r3
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	d504      	bpl.n	8002e7a <HAL_TIM_PeriodElapsedCallback+0x15a>
				dc_pwm = pid_pwm;
 8002e70:	4b36      	ldr	r3, [pc, #216]	@ (8002f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	569a      	ldrsb	r2, [r3, r2]
 8002e76:	4b36      	ldr	r3, [pc, #216]	@ (8002f50 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002e78:	701a      	strb	r2, [r3, #0]
			if(dc_pwm>10) //When PWM>10%, start to drive
 8002e7a:	4b35      	ldr	r3, [pc, #212]	@ (8002f50 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	2b0a      	cmp	r3, #10
 8002e82:	dd05      	ble.n	8002e90 <HAL_TIM_PeriodElapsedCallback+0x170>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
 8002e84:	4b32      	ldr	r3, [pc, #200]	@ (8002f50 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	569a      	ldrsb	r2, [r3, r2]
 8002e8a:	4b33      	ldr	r3, [pc, #204]	@ (8002f58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	635a      	str	r2, [r3, #52]	@ 0x34
			if(weight_par.gramAvgval<PULL_FORCE_THR)//LOWER_LIMMIT)// when release the handle, turn off all
 8002e90:	4b2b      	ldr	r3, [pc, #172]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e94:	23fa      	movs	r3, #250	@ 0xfa
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	da4a      	bge.n	8002f32 <HAL_TIM_PeriodElapsedCallback+0x212>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8002e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f54 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f002 fdaf 	bl	8005a06 <HAL_GPIO_WritePin>
				CLOSE_PWM;
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002eaa:	2100      	movs	r1, #0
 8002eac:	0018      	movs	r0, r3
 8002eae:	f003 fe61 	bl	8006b74 <HAL_TIM_PWM_Stop>
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	01db      	lsls	r3, r3, #7
 8002eb6:	4829      	ldr	r0, [pc, #164]	@ (8002f5c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	0019      	movs	r1, r3
 8002ebc:	f002 fda3 	bl	8005a06 <HAL_GPIO_WritePin>
				weight_par.eps_flag = 0;
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	735a      	strb	r2, [r3, #13]
				pid_pwm = 0;//if not, the PID_PWM will always be the same value and dc_pwm never be 0
 8002ec6:	4b21      	ldr	r3, [pc, #132]	@ (8002f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
				dc_pwm = dc_pwm<=10? 0:dc_pwm-PWM_STEP;
 8002ecc:	4b20      	ldr	r3, [pc, #128]	@ (8002f50 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	2b0a      	cmp	r3, #10
 8002ed4:	dd07      	ble.n	8002ee6 <HAL_TIM_PeriodElapsedCallback+0x1c6>
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f50 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b25b      	sxtb	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	b25a      	sxtb	r2, r3
 8002ee4:	e000      	b.n	8002ee8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4b19      	ldr	r3, [pc, #100]	@ (8002f50 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002eea:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc_pwm);
 8002eec:	4b18      	ldr	r3, [pc, #96]	@ (8002f50 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	569a      	ldrsb	r2, [r3, r2]
 8002ef2:	4b19      	ldr	r3, [pc, #100]	@ (8002f58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002ef8:	e01b      	b.n	8002f32 <HAL_TIM_PeriodElapsedCallback+0x212>
	else if(htim == &htim14)//10ms enter for E-wagon protection counting
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4b18      	ldr	r3, [pc, #96]	@ (8002f60 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d117      	bne.n	8002f32 <HAL_TIM_PeriodElapsedCallback+0x212>
		printflag.TimeCNT = printflag.TimeCNT>1100? 0:printflag.TimeCNT+1;
 8002f02:	4b18      	ldr	r3, [pc, #96]	@ (8002f64 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a18      	ldr	r2, [pc, #96]	@ (8002f68 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d803      	bhi.n	8002f14 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 8002f0c:	4b15      	ldr	r3, [pc, #84]	@ (8002f64 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_TIM_PeriodElapsedCallback+0x1f6>
 8002f14:	2200      	movs	r2, #0
 8002f16:	4b13      	ldr	r3, [pc, #76]	@ (8002f64 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002f18:	601a      	str	r2, [r3, #0]
		if(adc_val.commutation_timeout >1000)//if 100ms no phase switching, 100us++
 8002f1a:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002f1c:	8b5a      	ldrh	r2, [r3, #26]
 8002f1e:	23fa      	movs	r3, #250	@ 0xfa
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d905      	bls.n	8002f32 <HAL_TIM_PeriodElapsedCallback+0x212>
			adc_val.commutation_timeout = 0;
 8002f26:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	835a      	strh	r2, [r3, #26]
			adc_val.commutation_delay 	= 0;
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	831a      	strh	r2, [r3, #24]
}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b004      	add	sp, #16
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			@ (mov r8, r8)
 8002f3c:	2000034c 	.word	0x2000034c
 8002f40:	20000230 	.word	0x20000230
 8002f44:	20000394 	.word	0x20000394
 8002f48:	20000020 	.word	0x20000020
 8002f4c:	20000268 	.word	0x20000268
 8002f50:	20000269 	.word	0x20000269
 8002f54:	48000800 	.word	0x48000800
 8002f58:	20000304 	.word	0x20000304
 8002f5c:	48000400 	.word	0x48000400
 8002f60:	200003dc 	.word	0x200003dc
 8002f64:	20000260 	.word	0x20000260
 8002f68:	0000044c 	.word	0x0000044c
 8002f6c:	20000000 	.word	0x20000000

08002f70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//every byte transmit complete, enter this function
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b08d      	sub	sp, #52	@ 0x34
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4b8b      	ldr	r3, [pc, #556]	@ (80031a8 <HAL_UART_RxCpltCallback+0x238>)
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d000      	beq.n	8002f82 <HAL_UART_RxCpltCallback+0x12>
 8002f80:	e10e      	b.n	80031a0 <HAL_UART_RxCpltCallback+0x230>
	{
		extern uint8_t cnt;
		rxbuf[cnt] = rxdata;
 8002f82:	4b8a      	ldr	r3, [pc, #552]	@ (80031ac <HAL_UART_RxCpltCallback+0x23c>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	001a      	movs	r2, r3
 8002f88:	4b89      	ldr	r3, [pc, #548]	@ (80031b0 <HAL_UART_RxCpltCallback+0x240>)
 8002f8a:	7819      	ldrb	r1, [r3, #0]
 8002f8c:	4b89      	ldr	r3, [pc, #548]	@ (80031b4 <HAL_UART_RxCpltCallback+0x244>)
 8002f8e:	5499      	strb	r1, [r3, r2]
		const char cat[] = "0X13\r\n"; //APP(A:1) to Controller(C:3)
 8002f90:	2314      	movs	r3, #20
 8002f92:	18fb      	adds	r3, r7, r3
 8002f94:	4a88      	ldr	r2, [pc, #544]	@ (80031b8 <HAL_UART_RxCpltCallback+0x248>)
 8002f96:	6811      	ldr	r1, [r2, #0]
 8002f98:	6019      	str	r1, [r3, #0]
 8002f9a:	8891      	ldrh	r1, [r2, #4]
 8002f9c:	8099      	strh	r1, [r3, #4]
 8002f9e:	7992      	ldrb	r2, [r2, #6]
 8002fa0:	719a      	strb	r2, [r3, #6]
		cnt=cnt==RX_BUF_NUM?1:cnt+1;
 8002fa2:	4b82      	ldr	r3, [pc, #520]	@ (80031ac <HAL_UART_RxCpltCallback+0x23c>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2bff      	cmp	r3, #255	@ 0xff
 8002fa8:	d004      	beq.n	8002fb4 <HAL_UART_RxCpltCallback+0x44>
 8002faa:	4b80      	ldr	r3, [pc, #512]	@ (80031ac <HAL_UART_RxCpltCallback+0x23c>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	e000      	b.n	8002fb6 <HAL_UART_RxCpltCallback+0x46>
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4b7d      	ldr	r3, [pc, #500]	@ (80031ac <HAL_UART_RxCpltCallback+0x23c>)
 8002fb8:	701a      	strb	r2, [r3, #0]
		float PIDV;

		char a[6];

		if(rxdata == 'e')//'\n')
 8002fba:	4b7d      	ldr	r3, [pc, #500]	@ (80031b0 <HAL_UART_RxCpltCallback+0x240>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b65      	cmp	r3, #101	@ 0x65
 8002fc0:	d14e      	bne.n	8003060 <HAL_UART_RxCpltCallback+0xf0>
		{
//			printf("sting:%s\r\n", rxbuf);

			for(int t=cnt; t<RX_BUF_NUM; t++)
 8002fc2:	4b7a      	ldr	r3, [pc, #488]	@ (80031ac <HAL_UART_RxCpltCallback+0x23c>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fc8:	e007      	b.n	8002fda <HAL_UART_RxCpltCallback+0x6a>
				rxbuf[t]=0;
 8002fca:	4a7a      	ldr	r2, [pc, #488]	@ (80031b4 <HAL_UART_RxCpltCallback+0x244>)
 8002fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fce:	18d3      	adds	r3, r2, r3
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8002fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fdc:	2bfe      	cmp	r3, #254	@ 0xfe
 8002fde:	ddf4      	ble.n	8002fca <HAL_UART_RxCpltCallback+0x5a>
			cnt = 0;
 8002fe0:	4b72      	ldr	r3, [pc, #456]	@ (80031ac <HAL_UART_RxCpltCallback+0x23c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]

			if(0 == strcmp((char*) rxbuf,"0x00"))
 8002fe6:	4a75      	ldr	r2, [pc, #468]	@ (80031bc <HAL_UART_RxCpltCallback+0x24c>)
 8002fe8:	4b72      	ldr	r3, [pc, #456]	@ (80031b4 <HAL_UART_RxCpltCallback+0x244>)
 8002fea:	0011      	movs	r1, r2
 8002fec:	0018      	movs	r0, r3
 8002fee:	f7fd f88b 	bl	8000108 <strcmp>
 8002ff2:	1e03      	subs	r3, r0, #0
 8002ff4:	d104      	bne.n	8003000 <HAL_UART_RxCpltCallback+0x90>
			{
				HAL_TIM_Base_Stop_IT(&htim6);
 8002ff6:	4b72      	ldr	r3, [pc, #456]	@ (80031c0 <HAL_UART_RxCpltCallback+0x250>)
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f003 fb79 	bl	80066f0 <HAL_TIM_Base_Stop_IT>
 8002ffe:	e02f      	b.n	8003060 <HAL_UART_RxCpltCallback+0xf0>
			}

			else if(0 == strcmp((char*) rxbuf, "0x01"))
 8003000:	4a70      	ldr	r2, [pc, #448]	@ (80031c4 <HAL_UART_RxCpltCallback+0x254>)
 8003002:	4b6c      	ldr	r3, [pc, #432]	@ (80031b4 <HAL_UART_RxCpltCallback+0x244>)
 8003004:	0011      	movs	r1, r2
 8003006:	0018      	movs	r0, r3
 8003008:	f7fd f87e 	bl	8000108 <strcmp>
 800300c:	1e03      	subs	r3, r0, #0
 800300e:	d104      	bne.n	800301a <HAL_UART_RxCpltCallback+0xaa>
			{
				HAL_TIM_Base_Start_IT(&htim6);
 8003010:	4b6b      	ldr	r3, [pc, #428]	@ (80031c0 <HAL_UART_RxCpltCallback+0x250>)
 8003012:	0018      	movs	r0, r3
 8003014:	f003 fb20 	bl	8006658 <HAL_TIM_Base_Start_IT>
 8003018:	e022      	b.n	8003060 <HAL_UART_RxCpltCallback+0xf0>
			}
			else if(0 == strcmp((char*)rxbuf, "0x02"))
 800301a:	4a6b      	ldr	r2, [pc, #428]	@ (80031c8 <HAL_UART_RxCpltCallback+0x258>)
 800301c:	4b65      	ldr	r3, [pc, #404]	@ (80031b4 <HAL_UART_RxCpltCallback+0x244>)
 800301e:	0011      	movs	r1, r2
 8003020:	0018      	movs	r0, r3
 8003022:	f7fd f871 	bl	8000108 <strcmp>
 8003026:	1e03      	subs	r3, r0, #0
 8003028:	d103      	bne.n	8003032 <HAL_UART_RxCpltCallback+0xc2>
			{
				BT_PWM_handle(TURE);
 800302a:	2001      	movs	r0, #1
 800302c:	f001 fbc0 	bl	80047b0 <BT_PWM_handle>
 8003030:	e016      	b.n	8003060 <HAL_UART_RxCpltCallback+0xf0>
			}
			else if(0 == strcmp(cat, "0x06"))
			{

			}
			else if(0 == strcmp((char*) rxbuf, MotorOn))
 8003032:	4a66      	ldr	r2, [pc, #408]	@ (80031cc <HAL_UART_RxCpltCallback+0x25c>)
 8003034:	4b5f      	ldr	r3, [pc, #380]	@ (80031b4 <HAL_UART_RxCpltCallback+0x244>)
 8003036:	0011      	movs	r1, r2
 8003038:	0018      	movs	r0, r3
 800303a:	f7fd f865 	bl	8000108 <strcmp>
 800303e:	1e03      	subs	r3, r0, #0
 8003040:	d103      	bne.n	800304a <HAL_UART_RxCpltCallback+0xda>
			{
				printflag.Motor_On = TRUE;
 8003042:	4b63      	ldr	r3, [pc, #396]	@ (80031d0 <HAL_UART_RxCpltCallback+0x260>)
 8003044:	2201      	movs	r2, #1
 8003046:	719a      	strb	r2, [r3, #6]
 8003048:	e00a      	b.n	8003060 <HAL_UART_RxCpltCallback+0xf0>
			}
			else if(0 == strcmp((char*) rxbuf, MotorOff)) // 0X13MOff
 800304a:	4a62      	ldr	r2, [pc, #392]	@ (80031d4 <HAL_UART_RxCpltCallback+0x264>)
 800304c:	4b59      	ldr	r3, [pc, #356]	@ (80031b4 <HAL_UART_RxCpltCallback+0x244>)
 800304e:	0011      	movs	r1, r2
 8003050:	0018      	movs	r0, r3
 8003052:	f7fd f859 	bl	8000108 <strcmp>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d102      	bne.n	8003060 <HAL_UART_RxCpltCallback+0xf0>
			{
				printflag.Motor_Off = TRUE;
 800305a:	4b5d      	ldr	r3, [pc, #372]	@ (80031d0 <HAL_UART_RxCpltCallback+0x260>)
 800305c:	2201      	movs	r2, #1
 800305e:	71da      	strb	r2, [r3, #7]

			}
		}
		if(rxdata == 'P') // This code comsumes 3KB?
 8003060:	4b53      	ldr	r3, [pc, #332]	@ (80031b0 <HAL_UART_RxCpltCallback+0x240>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b50      	cmp	r3, #80	@ 0x50
 8003066:	d128      	bne.n	80030ba <HAL_UART_RxCpltCallback+0x14a>
		{
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8003068:	4b50      	ldr	r3, [pc, #320]	@ (80031ac <HAL_UART_RxCpltCallback+0x23c>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24
 800306e:	e007      	b.n	8003080 <HAL_UART_RxCpltCallback+0x110>
				rxbuf[t]=0;
 8003070:	4a50      	ldr	r2, [pc, #320]	@ (80031b4 <HAL_UART_RxCpltCallback+0x244>)
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	18d3      	adds	r3, r2, r3
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	3301      	adds	r3, #1
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	2bfe      	cmp	r3, #254	@ 0xfe
 8003084:	ddf4      	ble.n	8003070 <HAL_UART_RxCpltCallback+0x100>
			cnt = 0;
 8003086:	4b49      	ldr	r3, [pc, #292]	@ (80031ac <HAL_UART_RxCpltCallback+0x23c>)
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
			sscanf(rxbuf, "%[^P]", a);
 800308c:	240c      	movs	r4, #12
 800308e:	193a      	adds	r2, r7, r4
 8003090:	4951      	ldr	r1, [pc, #324]	@ (80031d8 <HAL_UART_RxCpltCallback+0x268>)
 8003092:	4b48      	ldr	r3, [pc, #288]	@ (80031b4 <HAL_UART_RxCpltCallback+0x244>)
 8003094:	0018      	movs	r0, r3
 8003096:	f007 ff4d 	bl	800af34 <siscanf>
			PIDV = atof(a);
 800309a:	193b      	adds	r3, r7, r4
 800309c:	0018      	movs	r0, r3
 800309e:	f006 f95f 	bl	8009360 <atof>
 80030a2:	0002      	movs	r2, r0
 80030a4:	000b      	movs	r3, r1
 80030a6:	0010      	movs	r0, r2
 80030a8:	0019      	movs	r1, r3
 80030aa:	f7ff fc65 	bl	8002978 <__aeabi_d2f>
 80030ae:	1c03      	adds	r3, r0, #0
 80030b0:	61fb      	str	r3, [r7, #28]
			PID_Parameters.Kp = PIDV;
 80030b2:	4b4a      	ldr	r3, [pc, #296]	@ (80031dc <HAL_UART_RxCpltCallback+0x26c>)
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e06c      	b.n	8003194 <HAL_UART_RxCpltCallback+0x224>
//			printflag.PID_Set = TRUE;
		}
		else if(rxdata == 'I')
 80030ba:	4b3d      	ldr	r3, [pc, #244]	@ (80031b0 <HAL_UART_RxCpltCallback+0x240>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b49      	cmp	r3, #73	@ 0x49
 80030c0:	d128      	bne.n	8003114 <HAL_UART_RxCpltCallback+0x1a4>
		{
			for(int t=cnt; t<RX_BUF_NUM; t++)
 80030c2:	4b3a      	ldr	r3, [pc, #232]	@ (80031ac <HAL_UART_RxCpltCallback+0x23c>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	623b      	str	r3, [r7, #32]
 80030c8:	e007      	b.n	80030da <HAL_UART_RxCpltCallback+0x16a>
				rxbuf[t]=0;
 80030ca:	4a3a      	ldr	r2, [pc, #232]	@ (80031b4 <HAL_UART_RxCpltCallback+0x244>)
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	18d3      	adds	r3, r2, r3
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	3301      	adds	r3, #1
 80030d8:	623b      	str	r3, [r7, #32]
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	2bfe      	cmp	r3, #254	@ 0xfe
 80030de:	ddf4      	ble.n	80030ca <HAL_UART_RxCpltCallback+0x15a>
			cnt = 0;
 80030e0:	4b32      	ldr	r3, [pc, #200]	@ (80031ac <HAL_UART_RxCpltCallback+0x23c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
			sscanf(rxbuf, "%[^I]", a);
 80030e6:	240c      	movs	r4, #12
 80030e8:	193a      	adds	r2, r7, r4
 80030ea:	493d      	ldr	r1, [pc, #244]	@ (80031e0 <HAL_UART_RxCpltCallback+0x270>)
 80030ec:	4b31      	ldr	r3, [pc, #196]	@ (80031b4 <HAL_UART_RxCpltCallback+0x244>)
 80030ee:	0018      	movs	r0, r3
 80030f0:	f007 ff20 	bl	800af34 <siscanf>
			PIDV = atof(a);
 80030f4:	193b      	adds	r3, r7, r4
 80030f6:	0018      	movs	r0, r3
 80030f8:	f006 f932 	bl	8009360 <atof>
 80030fc:	0002      	movs	r2, r0
 80030fe:	000b      	movs	r3, r1
 8003100:	0010      	movs	r0, r2
 8003102:	0019      	movs	r1, r3
 8003104:	f7ff fc38 	bl	8002978 <__aeabi_d2f>
 8003108:	1c03      	adds	r3, r0, #0
 800310a:	61fb      	str	r3, [r7, #28]
			PID_Parameters.Ki = PIDV;
 800310c:	4b33      	ldr	r3, [pc, #204]	@ (80031dc <HAL_UART_RxCpltCallback+0x26c>)
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	e03f      	b.n	8003194 <HAL_UART_RxCpltCallback+0x224>
//			printflag.PID_Set = TRUE;
		}
		else if(rxdata == 'D'|| rxdata == 'E')
 8003114:	4b26      	ldr	r3, [pc, #152]	@ (80031b0 <HAL_UART_RxCpltCallback+0x240>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b44      	cmp	r3, #68	@ 0x44
 800311a:	d003      	beq.n	8003124 <HAL_UART_RxCpltCallback+0x1b4>
 800311c:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <HAL_UART_RxCpltCallback+0x240>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b45      	cmp	r3, #69	@ 0x45
 8003122:	d137      	bne.n	8003194 <HAL_UART_RxCpltCallback+0x224>
		{
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8003124:	4b21      	ldr	r3, [pc, #132]	@ (80031ac <HAL_UART_RxCpltCallback+0x23c>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800312a:	e007      	b.n	800313c <HAL_UART_RxCpltCallback+0x1cc>
				rxbuf[t]=0;
 800312c:	4a21      	ldr	r2, [pc, #132]	@ (80031b4 <HAL_UART_RxCpltCallback+0x244>)
 800312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003130:	18d3      	adds	r3, r2, r3
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
			for(int t=cnt; t<RX_BUF_NUM; t++)
 8003136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003138:	3301      	adds	r3, #1
 800313a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800313c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003140:	ddf4      	ble.n	800312c <HAL_UART_RxCpltCallback+0x1bc>
			cnt = 0;
 8003142:	4b1a      	ldr	r3, [pc, #104]	@ (80031ac <HAL_UART_RxCpltCallback+0x23c>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
			if(rxdata == 'D')
 8003148:	4b19      	ldr	r3, [pc, #100]	@ (80031b0 <HAL_UART_RxCpltCallback+0x240>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b44      	cmp	r3, #68	@ 0x44
 800314e:	d11a      	bne.n	8003186 <HAL_UART_RxCpltCallback+0x216>
			{
				sscanf(rxbuf, "%[^D]", a);
 8003150:	240c      	movs	r4, #12
 8003152:	193a      	adds	r2, r7, r4
 8003154:	4923      	ldr	r1, [pc, #140]	@ (80031e4 <HAL_UART_RxCpltCallback+0x274>)
 8003156:	4b17      	ldr	r3, [pc, #92]	@ (80031b4 <HAL_UART_RxCpltCallback+0x244>)
 8003158:	0018      	movs	r0, r3
 800315a:	f007 feeb 	bl	800af34 <siscanf>
				PIDV = atof(a);
 800315e:	193b      	adds	r3, r7, r4
 8003160:	0018      	movs	r0, r3
 8003162:	f006 f8fd 	bl	8009360 <atof>
 8003166:	0002      	movs	r2, r0
 8003168:	000b      	movs	r3, r1
 800316a:	0010      	movs	r0, r2
 800316c:	0019      	movs	r1, r3
 800316e:	f7ff fc03 	bl	8002978 <__aeabi_d2f>
 8003172:	1c03      	adds	r3, r0, #0
 8003174:	61fb      	str	r3, [r7, #28]
				PID_Parameters.Kd = PIDV;
 8003176:	4b19      	ldr	r3, [pc, #100]	@ (80031dc <HAL_UART_RxCpltCallback+0x26c>)
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	609a      	str	r2, [r3, #8]
				printf("0X31 Set ok\n");
 800317c:	4b1a      	ldr	r3, [pc, #104]	@ (80031e8 <HAL_UART_RxCpltCallback+0x278>)
 800317e:	0018      	movs	r0, r3
 8003180:	f007 feae 	bl	800aee0 <puts>
 8003184:	e006      	b.n	8003194 <HAL_UART_RxCpltCallback+0x224>
			}
			else
			{
				printflag.PID_Set = TRUE;
 8003186:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <HAL_UART_RxCpltCallback+0x260>)
 8003188:	2201      	movs	r2, #1
 800318a:	715a      	strb	r2, [r3, #5]
				printf("0X31 PID align ok\n");
 800318c:	4b17      	ldr	r3, [pc, #92]	@ (80031ec <HAL_UART_RxCpltCallback+0x27c>)
 800318e:	0018      	movs	r0, r3
 8003190:	f007 fea6 	bl	800aee0 <puts>

			}
		}
		HAL_UART_Receive_IT(&huart1, &rxdata, sizeof(rxdata));
 8003194:	4906      	ldr	r1, [pc, #24]	@ (80031b0 <HAL_UART_RxCpltCallback+0x240>)
 8003196:	4b04      	ldr	r3, [pc, #16]	@ (80031a8 <HAL_UART_RxCpltCallback+0x238>)
 8003198:	2201      	movs	r2, #1
 800319a:	0018      	movs	r0, r3
 800319c:	f004 fe35 	bl	8007e0a <HAL_UART_Receive_IT>
	}
}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b00d      	add	sp, #52	@ 0x34
 80031a6:	bd90      	pop	{r4, r7, pc}
 80031a8:	200006b8 	.word	0x200006b8
 80031ac:	200006b4 	.word	0x200006b4
 80031b0:	200006b3 	.word	0x200006b3
 80031b4:	200004b4 	.word	0x200004b4
 80031b8:	0800e68c 	.word	0x0800e68c
 80031bc:	0800e624 	.word	0x0800e624
 80031c0:	20000394 	.word	0x20000394
 80031c4:	0800e62c 	.word	0x0800e62c
 80031c8:	0800e634 	.word	0x0800e634
 80031cc:	0800e63c 	.word	0x0800e63c
 80031d0:	20000260 	.word	0x20000260
 80031d4:	0800e648 	.word	0x0800e648
 80031d8:	0800e654 	.word	0x0800e654
 80031dc:	20000020 	.word	0x20000020
 80031e0:	0800e65c 	.word	0x0800e65c
 80031e4:	0800e664 	.word	0x0800e664
 80031e8:	0800e66c 	.word	0x0800e66c
 80031ec:	0800e678 	.word	0x0800e678

080031f0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

}
 80031f8:	46c0      	nop			@ (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)// Using tim15 to get a 88us between each trigger 50us as TIM1 cycle, 14MHz ADC(12.5+55.5 cycles) consume 4.37ms to complete conversion
{									  // The ADC sample time is for all channel, the DMA
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	@ 0x28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6278      	str	r0, [r7, #36]	@ 0x24
	My_ADC_getvalue(adc_buf, &adc_val);
 8003208:	003b      	movs	r3, r7
 800320a:	4a04      	ldr	r2, [pc, #16]	@ (800321c <HAL_ADC_ConvCpltCallback+0x1c>)
 800320c:	4904      	ldr	r1, [pc, #16]	@ (8003220 <HAL_ADC_ConvCpltCallback+0x20>)
 800320e:	0018      	movs	r0, r3
 8003210:	f000 f968 	bl	80034e4 <My_ADC_getvalue>
//	BLDC_Phase_switching(&adc_val);
}
 8003214:	46c0      	nop			@ (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b00a      	add	sp, #40	@ 0x28
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000000 	.word	0x20000000
 8003220:	2000021c 	.word	0x2000021c

08003224 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	0018      	movs	r0, r3
 800322e:	230c      	movs	r3, #12
 8003230:	001a      	movs	r2, r3
 8003232:	2100      	movs	r1, #0
 8003234:	f007 ffcc 	bl	800b1d0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003238:	4b60      	ldr	r3, [pc, #384]	@ (80033bc <MX_ADC_Init+0x198>)
 800323a:	4a61      	ldr	r2, [pc, #388]	@ (80033c0 <MX_ADC_Init+0x19c>)
 800323c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800323e:	4b5f      	ldr	r3, [pc, #380]	@ (80033bc <MX_ADC_Init+0x198>)
 8003240:	2200      	movs	r2, #0
 8003242:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003244:	4b5d      	ldr	r3, [pc, #372]	@ (80033bc <MX_ADC_Init+0x198>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800324a:	4b5c      	ldr	r3, [pc, #368]	@ (80033bc <MX_ADC_Init+0x198>)
 800324c:	2200      	movs	r2, #0
 800324e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003250:	4b5a      	ldr	r3, [pc, #360]	@ (80033bc <MX_ADC_Init+0x198>)
 8003252:	2201      	movs	r2, #1
 8003254:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003256:	4b59      	ldr	r3, [pc, #356]	@ (80033bc <MX_ADC_Init+0x198>)
 8003258:	2208      	movs	r2, #8
 800325a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800325c:	4b57      	ldr	r3, [pc, #348]	@ (80033bc <MX_ADC_Init+0x198>)
 800325e:	2200      	movs	r2, #0
 8003260:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003262:	4b56      	ldr	r3, [pc, #344]	@ (80033bc <MX_ADC_Init+0x198>)
 8003264:	2200      	movs	r2, #0
 8003266:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003268:	4b54      	ldr	r3, [pc, #336]	@ (80033bc <MX_ADC_Init+0x198>)
 800326a:	2200      	movs	r2, #0
 800326c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800326e:	4b53      	ldr	r3, [pc, #332]	@ (80033bc <MX_ADC_Init+0x198>)
 8003270:	2200      	movs	r2, #0
 8003272:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 8003274:	4b51      	ldr	r3, [pc, #324]	@ (80033bc <MX_ADC_Init+0x198>)
 8003276:	2240      	movs	r2, #64	@ 0x40
 8003278:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800327a:	4b50      	ldr	r3, [pc, #320]	@ (80033bc <MX_ADC_Init+0x198>)
 800327c:	2280      	movs	r2, #128	@ 0x80
 800327e:	00d2      	lsls	r2, r2, #3
 8003280:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003282:	4b4e      	ldr	r3, [pc, #312]	@ (80033bc <MX_ADC_Init+0x198>)
 8003284:	2224      	movs	r2, #36	@ 0x24
 8003286:	2101      	movs	r1, #1
 8003288:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800328a:	4b4c      	ldr	r3, [pc, #304]	@ (80033bc <MX_ADC_Init+0x198>)
 800328c:	2201      	movs	r2, #1
 800328e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003290:	4b4a      	ldr	r3, [pc, #296]	@ (80033bc <MX_ADC_Init+0x198>)
 8003292:	0018      	movs	r0, r3
 8003294:	f001 fb66 	bl	8004964 <HAL_ADC_Init>
 8003298:	1e03      	subs	r3, r0, #0
 800329a:	d001      	beq.n	80032a0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800329c:	f7ff fd3a 	bl	8002d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80032a0:	1d3b      	adds	r3, r7, #4
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	2280      	movs	r2, #128	@ 0x80
 80032aa:	0152      	lsls	r2, r2, #5
 80032ac:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80032ae:	1d3b      	adds	r3, r7, #4
 80032b0:	2206      	movs	r2, #6
 80032b2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80032b4:	1d3a      	adds	r2, r7, #4
 80032b6:	4b41      	ldr	r3, [pc, #260]	@ (80033bc <MX_ADC_Init+0x198>)
 80032b8:	0011      	movs	r1, r2
 80032ba:	0018      	movs	r0, r3
 80032bc:	f001 fd24 	bl	8004d08 <HAL_ADC_ConfigChannel>
 80032c0:	1e03      	subs	r3, r0, #0
 80032c2:	d001      	beq.n	80032c8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80032c4:	f7ff fd26 	bl	8002d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80032c8:	1d3b      	adds	r3, r7, #4
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80032ce:	1d3a      	adds	r2, r7, #4
 80032d0:	4b3a      	ldr	r3, [pc, #232]	@ (80033bc <MX_ADC_Init+0x198>)
 80032d2:	0011      	movs	r1, r2
 80032d4:	0018      	movs	r0, r3
 80032d6:	f001 fd17 	bl	8004d08 <HAL_ADC_ConfigChannel>
 80032da:	1e03      	subs	r3, r0, #0
 80032dc:	d001      	beq.n	80032e2 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80032de:	f7ff fd19 	bl	8002d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	2202      	movs	r2, #2
 80032e6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80032e8:	1d3a      	adds	r2, r7, #4
 80032ea:	4b34      	ldr	r3, [pc, #208]	@ (80033bc <MX_ADC_Init+0x198>)
 80032ec:	0011      	movs	r1, r2
 80032ee:	0018      	movs	r0, r3
 80032f0:	f001 fd0a 	bl	8004d08 <HAL_ADC_ConfigChannel>
 80032f4:	1e03      	subs	r3, r0, #0
 80032f6:	d001      	beq.n	80032fc <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80032f8:	f7ff fd0c 	bl	8002d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	2203      	movs	r2, #3
 8003300:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003302:	1d3a      	adds	r2, r7, #4
 8003304:	4b2d      	ldr	r3, [pc, #180]	@ (80033bc <MX_ADC_Init+0x198>)
 8003306:	0011      	movs	r1, r2
 8003308:	0018      	movs	r0, r3
 800330a:	f001 fcfd 	bl	8004d08 <HAL_ADC_ConfigChannel>
 800330e:	1e03      	subs	r3, r0, #0
 8003310:	d001      	beq.n	8003316 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8003312:	f7ff fcff 	bl	8002d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	2204      	movs	r2, #4
 800331a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800331c:	1d3a      	adds	r2, r7, #4
 800331e:	4b27      	ldr	r3, [pc, #156]	@ (80033bc <MX_ADC_Init+0x198>)
 8003320:	0011      	movs	r1, r2
 8003322:	0018      	movs	r0, r3
 8003324:	f001 fcf0 	bl	8004d08 <HAL_ADC_ConfigChannel>
 8003328:	1e03      	subs	r3, r0, #0
 800332a:	d001      	beq.n	8003330 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 800332c:	f7ff fcf2 	bl	8002d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	2205      	movs	r2, #5
 8003334:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003336:	1d3a      	adds	r2, r7, #4
 8003338:	4b20      	ldr	r3, [pc, #128]	@ (80033bc <MX_ADC_Init+0x198>)
 800333a:	0011      	movs	r1, r2
 800333c:	0018      	movs	r0, r3
 800333e:	f001 fce3 	bl	8004d08 <HAL_ADC_ConfigChannel>
 8003342:	1e03      	subs	r3, r0, #0
 8003344:	d001      	beq.n	800334a <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8003346:	f7ff fce5 	bl	8002d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800334a:	1d3b      	adds	r3, r7, #4
 800334c:	2206      	movs	r2, #6
 800334e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003350:	1d3a      	adds	r2, r7, #4
 8003352:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <MX_ADC_Init+0x198>)
 8003354:	0011      	movs	r1, r2
 8003356:	0018      	movs	r0, r3
 8003358:	f001 fcd6 	bl	8004d08 <HAL_ADC_ConfigChannel>
 800335c:	1e03      	subs	r3, r0, #0
 800335e:	d001      	beq.n	8003364 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8003360:	f7ff fcd8 	bl	8002d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003364:	1d3b      	adds	r3, r7, #4
 8003366:	2207      	movs	r2, #7
 8003368:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800336a:	1d3a      	adds	r2, r7, #4
 800336c:	4b13      	ldr	r3, [pc, #76]	@ (80033bc <MX_ADC_Init+0x198>)
 800336e:	0011      	movs	r1, r2
 8003370:	0018      	movs	r0, r3
 8003372:	f001 fcc9 	bl	8004d08 <HAL_ADC_ConfigChannel>
 8003376:	1e03      	subs	r3, r0, #0
 8003378:	d001      	beq.n	800337e <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 800337a:	f7ff fccb 	bl	8002d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800337e:	1d3b      	adds	r3, r7, #4
 8003380:	2208      	movs	r2, #8
 8003382:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003384:	1d3a      	adds	r2, r7, #4
 8003386:	4b0d      	ldr	r3, [pc, #52]	@ (80033bc <MX_ADC_Init+0x198>)
 8003388:	0011      	movs	r1, r2
 800338a:	0018      	movs	r0, r3
 800338c:	f001 fcbc 	bl	8004d08 <HAL_ADC_ConfigChannel>
 8003390:	1e03      	subs	r3, r0, #0
 8003392:	d001      	beq.n	8003398 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8003394:	f7ff fcbe 	bl	8002d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	2211      	movs	r2, #17
 800339c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800339e:	1d3a      	adds	r2, r7, #4
 80033a0:	4b06      	ldr	r3, [pc, #24]	@ (80033bc <MX_ADC_Init+0x198>)
 80033a2:	0011      	movs	r1, r2
 80033a4:	0018      	movs	r0, r3
 80033a6:	f001 fcaf 	bl	8004d08 <HAL_ADC_ConfigChannel>
 80033aa:	1e03      	subs	r3, r0, #0
 80033ac:	d001      	beq.n	80033b2 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 80033ae:	f7ff fcb1 	bl	8002d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80033b2:	46c0      	nop			@ (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b004      	add	sp, #16
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	46c0      	nop			@ (mov r8, r8)
 80033bc:	2000026c 	.word	0x2000026c
 80033c0:	40012400 	.word	0x40012400

080033c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b08b      	sub	sp, #44	@ 0x2c
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	2414      	movs	r4, #20
 80033ce:	193b      	adds	r3, r7, r4
 80033d0:	0018      	movs	r0, r3
 80033d2:	2314      	movs	r3, #20
 80033d4:	001a      	movs	r2, r3
 80033d6:	2100      	movs	r1, #0
 80033d8:	f007 fefa 	bl	800b1d0 <memset>
  if(adcHandle->Instance==ADC1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a3b      	ldr	r2, [pc, #236]	@ (80034d0 <HAL_ADC_MspInit+0x10c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d170      	bne.n	80034c8 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033e6:	4b3b      	ldr	r3, [pc, #236]	@ (80034d4 <HAL_ADC_MspInit+0x110>)
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	4b3a      	ldr	r3, [pc, #232]	@ (80034d4 <HAL_ADC_MspInit+0x110>)
 80033ec:	2180      	movs	r1, #128	@ 0x80
 80033ee:	0089      	lsls	r1, r1, #2
 80033f0:	430a      	orrs	r2, r1
 80033f2:	619a      	str	r2, [r3, #24]
 80033f4:	4b37      	ldr	r3, [pc, #220]	@ (80034d4 <HAL_ADC_MspInit+0x110>)
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	2380      	movs	r3, #128	@ 0x80
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003402:	4b34      	ldr	r3, [pc, #208]	@ (80034d4 <HAL_ADC_MspInit+0x110>)
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	4b33      	ldr	r3, [pc, #204]	@ (80034d4 <HAL_ADC_MspInit+0x110>)
 8003408:	2180      	movs	r1, #128	@ 0x80
 800340a:	0289      	lsls	r1, r1, #10
 800340c:	430a      	orrs	r2, r1
 800340e:	615a      	str	r2, [r3, #20]
 8003410:	4b30      	ldr	r3, [pc, #192]	@ (80034d4 <HAL_ADC_MspInit+0x110>)
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	2380      	movs	r3, #128	@ 0x80
 8003416:	029b      	lsls	r3, r3, #10
 8003418:	4013      	ands	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341e:	4b2d      	ldr	r3, [pc, #180]	@ (80034d4 <HAL_ADC_MspInit+0x110>)
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	4b2c      	ldr	r3, [pc, #176]	@ (80034d4 <HAL_ADC_MspInit+0x110>)
 8003424:	2180      	movs	r1, #128	@ 0x80
 8003426:	02c9      	lsls	r1, r1, #11
 8003428:	430a      	orrs	r2, r1
 800342a:	615a      	str	r2, [r3, #20]
 800342c:	4b29      	ldr	r3, [pc, #164]	@ (80034d4 <HAL_ADC_MspInit+0x110>)
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	2380      	movs	r3, #128	@ 0x80
 8003432:	02db      	lsls	r3, r3, #11
 8003434:	4013      	ands	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800343a:	193b      	adds	r3, r7, r4
 800343c:	22ff      	movs	r2, #255	@ 0xff
 800343e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003440:	193b      	adds	r3, r7, r4
 8003442:	2203      	movs	r2, #3
 8003444:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	193b      	adds	r3, r7, r4
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344c:	193a      	adds	r2, r7, r4
 800344e:	2390      	movs	r3, #144	@ 0x90
 8003450:	05db      	lsls	r3, r3, #23
 8003452:	0011      	movs	r1, r2
 8003454:	0018      	movs	r0, r3
 8003456:	f002 f949 	bl	80056ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800345a:	193b      	adds	r3, r7, r4
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003460:	193b      	adds	r3, r7, r4
 8003462:	2203      	movs	r2, #3
 8003464:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	193b      	adds	r3, r7, r4
 8003468:	2200      	movs	r2, #0
 800346a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800346c:	193b      	adds	r3, r7, r4
 800346e:	4a1a      	ldr	r2, [pc, #104]	@ (80034d8 <HAL_ADC_MspInit+0x114>)
 8003470:	0019      	movs	r1, r3
 8003472:	0010      	movs	r0, r2
 8003474:	f002 f93a 	bl	80056ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003478:	4b18      	ldr	r3, [pc, #96]	@ (80034dc <HAL_ADC_MspInit+0x118>)
 800347a:	4a19      	ldr	r2, [pc, #100]	@ (80034e0 <HAL_ADC_MspInit+0x11c>)
 800347c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800347e:	4b17      	ldr	r3, [pc, #92]	@ (80034dc <HAL_ADC_MspInit+0x118>)
 8003480:	2200      	movs	r2, #0
 8003482:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003484:	4b15      	ldr	r3, [pc, #84]	@ (80034dc <HAL_ADC_MspInit+0x118>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800348a:	4b14      	ldr	r3, [pc, #80]	@ (80034dc <HAL_ADC_MspInit+0x118>)
 800348c:	2280      	movs	r2, #128	@ 0x80
 800348e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003490:	4b12      	ldr	r3, [pc, #72]	@ (80034dc <HAL_ADC_MspInit+0x118>)
 8003492:	2280      	movs	r2, #128	@ 0x80
 8003494:	0092      	lsls	r2, r2, #2
 8003496:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003498:	4b10      	ldr	r3, [pc, #64]	@ (80034dc <HAL_ADC_MspInit+0x118>)
 800349a:	2280      	movs	r2, #128	@ 0x80
 800349c:	00d2      	lsls	r2, r2, #3
 800349e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80034a0:	4b0e      	ldr	r3, [pc, #56]	@ (80034dc <HAL_ADC_MspInit+0x118>)
 80034a2:	2220      	movs	r2, #32
 80034a4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <HAL_ADC_MspInit+0x118>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80034ac:	4b0b      	ldr	r3, [pc, #44]	@ (80034dc <HAL_ADC_MspInit+0x118>)
 80034ae:	0018      	movs	r0, r3
 80034b0:	f001 ff06 	bl	80052c0 <HAL_DMA_Init>
 80034b4:	1e03      	subs	r3, r0, #0
 80034b6:	d001      	beq.n	80034bc <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80034b8:	f7ff fc2c 	bl	8002d14 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a07      	ldr	r2, [pc, #28]	@ (80034dc <HAL_ADC_MspInit+0x118>)
 80034c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80034c2:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <HAL_ADC_MspInit+0x118>)
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80034c8:	46c0      	nop			@ (mov r8, r8)
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b00b      	add	sp, #44	@ 0x2c
 80034ce:	bd90      	pop	{r4, r7, pc}
 80034d0:	40012400 	.word	0x40012400
 80034d4:	40021000 	.word	0x40021000
 80034d8:	48000400 	.word	0x48000400
 80034dc:	200002ac 	.word	0x200002ac
 80034e0:	40020008 	.word	0x40020008

080034e4 <My_ADC_getvalue>:
//How to get the actual Vdda
//Vrefint_cal is based on 3.3V VDDA, while Vrefint_data is based on actual VDDA
//Vref_int/Vref_cal == 3.3/4095	   Vref_int/Vrefint_data == VDDA/4095 ==> VDDA = 3.3V*Vreint_cal/Vrefint_data
//Then using the actual Vdda to get the actual Vrevint and Voltage of other channels
MADC_Structure My_ADC_getvalue(uint16_t* adc_buf, MADC_Structure * adc_val)// the local array addr is not valid after function done
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]

	adc_val->bemf_pa 		= adc_buf[0] / 300>1?1:0; //620 == 0.5V
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	8819      	ldrh	r1, [r3, #0]
 80034f4:	2396      	movs	r3, #150	@ 0x96
 80034f6:	009a      	lsls	r2, r3, #2
 80034f8:	2300      	movs	r3, #0
 80034fa:	4291      	cmp	r1, r2
 80034fc:	415b      	adcs	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	001a      	movs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	801a      	strh	r2, [r3, #0]
	adc_val->bemf_pb 		= adc_buf[1] / 300>1?1:0;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3302      	adds	r3, #2
 800350a:	8819      	ldrh	r1, [r3, #0]
 800350c:	2396      	movs	r3, #150	@ 0x96
 800350e:	009a      	lsls	r2, r3, #2
 8003510:	2300      	movs	r3, #0
 8003512:	4291      	cmp	r1, r2
 8003514:	415b      	adcs	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	001a      	movs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	805a      	strh	r2, [r3, #2]
	adc_val->bemf_pc 		= adc_buf[2] / 300>1?1:0;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3304      	adds	r3, #4
 8003522:	8819      	ldrh	r1, [r3, #0]
 8003524:	2396      	movs	r3, #150	@ 0x96
 8003526:	009a      	lsls	r2, r3, #2
 8003528:	2300      	movs	r3, #0
 800352a:	4291      	cmp	r1, r2
 800352c:	415b      	adcs	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	001a      	movs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	809a      	strh	r2, [r3, #4]
	adc_val->vbat 			= adc_buf[3];
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	88da      	ldrh	r2, [r3, #6]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	821a      	strh	r2, [r3, #16]
	adc_val->ia				= adc_buf[4];
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	891a      	ldrh	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	811a      	strh	r2, [r3, #8]
	adc_val->ib				= adc_buf[5];
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	895a      	ldrh	r2, [r3, #10]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	815a      	strh	r2, [r3, #10]
	adc_val->isum			= adc_buf[6];
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	899a      	ldrh	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	819a      	strh	r2, [r3, #12]
	adc_val->isum_filtered 	= adc_buf[7];
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	89da      	ldrh	r2, [r3, #14]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	81da      	strh	r2, [r3, #14]
	adc_val->bemf_mid		= adc_buf[8];
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	8a1a      	ldrh	r2, [r3, #16]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	80da      	strh	r2, [r3, #6]
	adc_val->vref_data 		= adc_buf[9];
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	8a5a      	ldrh	r2, [r3, #18]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	825a      	strh	r2, [r3, #18]

	// zero_acrross_flag <<= adc_val_bemf_pa if(zero_acrross_flag==0xff) ,

	adc_val->bemf_last = adc_val->bemf_now;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	7d1a      	ldrb	r2, [r3, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	755a      	strb	r2, [r3, #21]
	adc_val->bemf_now  = adc_val->bemf_pa * 4 + adc_val->bemf_pb * 2 + adc_val->bemf_pc * 1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	8852      	ldrh	r2, [r2, #2]
 8003580:	189b      	adds	r3, r3, r2
 8003582:	b2db      	uxtb	r3, r3
 8003584:	18db      	adds	r3, r3, r3
 8003586:	b2da      	uxtb	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	889b      	ldrh	r3, [r3, #4]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	18d3      	adds	r3, r2, r3
 8003590:	b2da      	uxtb	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	751a      	strb	r2, [r3, #20]

	return *adc_val;
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	0010      	movs	r0, r2
 800359c:	0019      	movs	r1, r3
 800359e:	231e      	movs	r3, #30
 80035a0:	001a      	movs	r2, r3
 80035a2:	f007 feb9 	bl	800b318 <memcpy>
}
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b004      	add	sp, #16
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035b6:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <MX_DMA_Init+0x48>)
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	4b0f      	ldr	r3, [pc, #60]	@ (80035f8 <MX_DMA_Init+0x48>)
 80035bc:	2101      	movs	r1, #1
 80035be:	430a      	orrs	r2, r1
 80035c0:	615a      	str	r2, [r3, #20]
 80035c2:	4b0d      	ldr	r3, [pc, #52]	@ (80035f8 <MX_DMA_Init+0x48>)
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	2201      	movs	r2, #1
 80035c8:	4013      	ands	r3, r2
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2100      	movs	r1, #0
 80035d2:	2009      	movs	r0, #9
 80035d4:	f001 fe42 	bl	800525c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80035d8:	2009      	movs	r0, #9
 80035da:	f001 fe54 	bl	8005286 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	200a      	movs	r0, #10
 80035e4:	f001 fe3a 	bl	800525c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80035e8:	200a      	movs	r0, #10
 80035ea:	f001 fe4c 	bl	8005286 <HAL_NVIC_EnableIRQ>

}
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b002      	add	sp, #8
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	40021000 	.word	0x40021000

080035fc <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b08b      	sub	sp, #44	@ 0x2c
 8003600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003602:	2414      	movs	r4, #20
 8003604:	193b      	adds	r3, r7, r4
 8003606:	0018      	movs	r0, r3
 8003608:	2314      	movs	r3, #20
 800360a:	001a      	movs	r2, r3
 800360c:	2100      	movs	r1, #0
 800360e:	f007 fddf 	bl	800b1d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003612:	4bb9      	ldr	r3, [pc, #740]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	4bb8      	ldr	r3, [pc, #736]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 8003618:	2180      	movs	r1, #128	@ 0x80
 800361a:	0309      	lsls	r1, r1, #12
 800361c:	430a      	orrs	r2, r1
 800361e:	615a      	str	r2, [r3, #20]
 8003620:	4bb5      	ldr	r3, [pc, #724]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	2380      	movs	r3, #128	@ 0x80
 8003626:	031b      	lsls	r3, r3, #12
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800362e:	4bb2      	ldr	r3, [pc, #712]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	4bb1      	ldr	r3, [pc, #708]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 8003634:	2180      	movs	r1, #128	@ 0x80
 8003636:	03c9      	lsls	r1, r1, #15
 8003638:	430a      	orrs	r2, r1
 800363a:	615a      	str	r2, [r3, #20]
 800363c:	4bae      	ldr	r3, [pc, #696]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	2380      	movs	r3, #128	@ 0x80
 8003642:	03db      	lsls	r3, r3, #15
 8003644:	4013      	ands	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800364a:	4bab      	ldr	r3, [pc, #684]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	4baa      	ldr	r3, [pc, #680]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 8003650:	2180      	movs	r1, #128	@ 0x80
 8003652:	0289      	lsls	r1, r1, #10
 8003654:	430a      	orrs	r2, r1
 8003656:	615a      	str	r2, [r3, #20]
 8003658:	4ba7      	ldr	r3, [pc, #668]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	2380      	movs	r3, #128	@ 0x80
 800365e:	029b      	lsls	r3, r3, #10
 8003660:	4013      	ands	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003666:	4ba4      	ldr	r3, [pc, #656]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	4ba3      	ldr	r3, [pc, #652]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 800366c:	2180      	movs	r1, #128	@ 0x80
 800366e:	02c9      	lsls	r1, r1, #11
 8003670:	430a      	orrs	r2, r1
 8003672:	615a      	str	r2, [r3, #20]
 8003674:	4ba0      	ldr	r3, [pc, #640]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	2380      	movs	r3, #128	@ 0x80
 800367a:	02db      	lsls	r3, r3, #11
 800367c:	4013      	ands	r3, r2
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003682:	4b9d      	ldr	r3, [pc, #628]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	4b9c      	ldr	r3, [pc, #624]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 8003688:	2180      	movs	r1, #128	@ 0x80
 800368a:	0349      	lsls	r1, r1, #13
 800368c:	430a      	orrs	r2, r1
 800368e:	615a      	str	r2, [r3, #20]
 8003690:	4b99      	ldr	r3, [pc, #612]	@ (80038f8 <MX_GPIO_Init+0x2fc>)
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	2380      	movs	r3, #128	@ 0x80
 8003696:	035b      	lsls	r3, r3, #13
 8003698:	4013      	ands	r3, r2
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTWakeUp_GPIO_Port, BTWakeUp_Pin, GPIO_PIN_SET);
 800369e:	2380      	movs	r3, #128	@ 0x80
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	4896      	ldr	r0, [pc, #600]	@ (80038fc <MX_GPIO_Init+0x300>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	0019      	movs	r1, r3
 80036a8:	f002 f9ad 	bl	8005a06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11
 80036ac:	4994      	ldr	r1, [pc, #592]	@ (8003900 <MX_GPIO_Init+0x304>)
 80036ae:	4b93      	ldr	r3, [pc, #588]	@ (80038fc <MX_GPIO_Init+0x300>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	0018      	movs	r0, r3
 80036b4:	f002 f9a7 	bl	8005a06 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80036b8:	4b92      	ldr	r3, [pc, #584]	@ (8003904 <MX_GPIO_Init+0x308>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	2110      	movs	r1, #16
 80036be:	0018      	movs	r0, r3
 80036c0:	f002 f9a1 	bl	8005a06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80036c4:	4990      	ldr	r1, [pc, #576]	@ (8003908 <MX_GPIO_Init+0x30c>)
 80036c6:	4b91      	ldr	r3, [pc, #580]	@ (800390c <MX_GPIO_Init+0x310>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	0018      	movs	r0, r3
 80036cc:	f002 f99b 	bl	8005a06 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80036d0:	2380      	movs	r3, #128	@ 0x80
 80036d2:	0219      	lsls	r1, r3, #8
 80036d4:	2390      	movs	r3, #144	@ 0x90
 80036d6:	05db      	lsls	r3, r3, #23
 80036d8:	2200      	movs	r2, #0
 80036da:	0018      	movs	r0, r3
 80036dc:	f002 f993 	bl	8005a06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036e0:	193b      	adds	r3, r7, r4
 80036e2:	2280      	movs	r2, #128	@ 0x80
 80036e4:	01d2      	lsls	r2, r2, #7
 80036e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036e8:	193b      	adds	r3, r7, r4
 80036ea:	2200      	movs	r2, #0
 80036ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	193b      	adds	r3, r7, r4
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f4:	193b      	adds	r3, r7, r4
 80036f6:	4a81      	ldr	r2, [pc, #516]	@ (80038fc <MX_GPIO_Init+0x300>)
 80036f8:	0019      	movs	r1, r3
 80036fa:	0010      	movs	r0, r2
 80036fc:	f001 fff6 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTWakeUp_Pin;
 8003700:	0021      	movs	r1, r4
 8003702:	187b      	adds	r3, r7, r1
 8003704:	2280      	movs	r2, #128	@ 0x80
 8003706:	0212      	lsls	r2, r2, #8
 8003708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800370a:	000c      	movs	r4, r1
 800370c:	193b      	adds	r3, r7, r4
 800370e:	2201      	movs	r2, #1
 8003710:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003712:	193b      	adds	r3, r7, r4
 8003714:	2201      	movs	r2, #1
 8003716:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003718:	193b      	adds	r3, r7, r4
 800371a:	2200      	movs	r2, #0
 800371c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BTWakeUp_GPIO_Port, &GPIO_InitStruct);
 800371e:	193b      	adds	r3, r7, r4
 8003720:	4a76      	ldr	r2, [pc, #472]	@ (80038fc <MX_GPIO_Init+0x300>)
 8003722:	0019      	movs	r1, r3
 8003724:	0010      	movs	r0, r2
 8003726:	f001 ffe1 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 800372a:	193b      	adds	r3, r7, r4
 800372c:	2243      	movs	r2, #67	@ 0x43
 800372e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003730:	193b      	adds	r3, r7, r4
 8003732:	2203      	movs	r2, #3
 8003734:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	193b      	adds	r3, r7, r4
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800373c:	193b      	adds	r3, r7, r4
 800373e:	4a71      	ldr	r2, [pc, #452]	@ (8003904 <MX_GPIO_Init+0x308>)
 8003740:	0019      	movs	r1, r3
 8003742:	0010      	movs	r0, r2
 8003744:	f001 ffd2 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003748:	193b      	adds	r3, r7, r4
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800374e:	193b      	adds	r3, r7, r4
 8003750:	2201      	movs	r2, #1
 8003752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003754:	193b      	adds	r3, r7, r4
 8003756:	2202      	movs	r2, #2
 8003758:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375a:	193b      	adds	r3, r7, r4
 800375c:	2200      	movs	r2, #0
 800375e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003760:	193b      	adds	r3, r7, r4
 8003762:	4a66      	ldr	r2, [pc, #408]	@ (80038fc <MX_GPIO_Init+0x300>)
 8003764:	0019      	movs	r1, r3
 8003766:	0010      	movs	r0, r2
 8003768:	f001 ffc0 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800376c:	193b      	adds	r3, r7, r4
 800376e:	220e      	movs	r2, #14
 8003770:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003772:	193b      	adds	r3, r7, r4
 8003774:	2203      	movs	r2, #3
 8003776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	193b      	adds	r3, r7, r4
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377e:	193b      	adds	r3, r7, r4
 8003780:	4a5e      	ldr	r2, [pc, #376]	@ (80038fc <MX_GPIO_Init+0x300>)
 8003782:	0019      	movs	r1, r3
 8003784:	0010      	movs	r0, r2
 8003786:	f001 ffb1 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800378a:	193b      	adds	r3, r7, r4
 800378c:	2210      	movs	r2, #16
 800378e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003790:	193b      	adds	r3, r7, r4
 8003792:	2201      	movs	r2, #1
 8003794:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	193b      	adds	r3, r7, r4
 8003798:	2200      	movs	r2, #0
 800379a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379c:	193b      	adds	r3, r7, r4
 800379e:	2200      	movs	r2, #0
 80037a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037a2:	193b      	adds	r3, r7, r4
 80037a4:	4a57      	ldr	r2, [pc, #348]	@ (8003904 <MX_GPIO_Init+0x308>)
 80037a6:	0019      	movs	r1, r3
 80037a8:	0010      	movs	r0, r2
 80037aa:	f001 ff9f 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80037ae:	193b      	adds	r3, r7, r4
 80037b0:	2220      	movs	r2, #32
 80037b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037b4:	193b      	adds	r3, r7, r4
 80037b6:	2200      	movs	r2, #0
 80037b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	193b      	adds	r3, r7, r4
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037c0:	193b      	adds	r3, r7, r4
 80037c2:	4a50      	ldr	r2, [pc, #320]	@ (8003904 <MX_GPIO_Init+0x308>)
 80037c4:	0019      	movs	r1, r3
 80037c6:	0010      	movs	r0, r2
 80037c8:	f001 ff90 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80037cc:	0021      	movs	r1, r4
 80037ce:	187b      	adds	r3, r7, r1
 80037d0:	22e1      	movs	r2, #225	@ 0xe1
 80037d2:	0152      	lsls	r2, r2, #5
 80037d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d6:	000c      	movs	r4, r1
 80037d8:	193b      	adds	r3, r7, r4
 80037da:	2201      	movs	r2, #1
 80037dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e4:	193b      	adds	r3, r7, r4
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ea:	193b      	adds	r3, r7, r4
 80037ec:	4a43      	ldr	r2, [pc, #268]	@ (80038fc <MX_GPIO_Init+0x300>)
 80037ee:	0019      	movs	r1, r3
 80037f0:	0010      	movs	r0, r2
 80037f2:	f001 ff7b 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80037f6:	193b      	adds	r3, r7, r4
 80037f8:	4a43      	ldr	r2, [pc, #268]	@ (8003908 <MX_GPIO_Init+0x30c>)
 80037fa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037fc:	193b      	adds	r3, r7, r4
 80037fe:	2201      	movs	r2, #1
 8003800:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003802:	193b      	adds	r3, r7, r4
 8003804:	2200      	movs	r2, #0
 8003806:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003808:	193b      	adds	r3, r7, r4
 800380a:	2200      	movs	r2, #0
 800380c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380e:	193b      	adds	r3, r7, r4
 8003810:	4a3e      	ldr	r2, [pc, #248]	@ (800390c <MX_GPIO_Init+0x310>)
 8003812:	0019      	movs	r1, r3
 8003814:	0010      	movs	r0, r2
 8003816:	f001 ff69 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800381a:	193b      	adds	r3, r7, r4
 800381c:	22c0      	movs	r2, #192	@ 0xc0
 800381e:	0152      	lsls	r2, r2, #5
 8003820:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003822:	193b      	adds	r3, r7, r4
 8003824:	2203      	movs	r2, #3
 8003826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	193b      	adds	r3, r7, r4
 800382a:	2200      	movs	r2, #0
 800382c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382e:	193a      	adds	r2, r7, r4
 8003830:	2390      	movs	r3, #144	@ 0x90
 8003832:	05db      	lsls	r3, r3, #23
 8003834:	0011      	movs	r1, r2
 8003836:	0018      	movs	r0, r3
 8003838:	f001 ff58 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800383c:	0021      	movs	r1, r4
 800383e:	187b      	adds	r3, r7, r1
 8003840:	2280      	movs	r2, #128	@ 0x80
 8003842:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003844:	187b      	adds	r3, r7, r1
 8003846:	2288      	movs	r2, #136	@ 0x88
 8003848:	0352      	lsls	r2, r2, #13
 800384a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	187b      	adds	r3, r7, r1
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003852:	000c      	movs	r4, r1
 8003854:	187b      	adds	r3, r7, r1
 8003856:	4a2b      	ldr	r2, [pc, #172]	@ (8003904 <MX_GPIO_Init+0x308>)
 8003858:	0019      	movs	r1, r3
 800385a:	0010      	movs	r0, r2
 800385c:	f001 ff46 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003860:	0021      	movs	r1, r4
 8003862:	187b      	adds	r3, r7, r1
 8003864:	2280      	movs	r2, #128	@ 0x80
 8003866:	0212      	lsls	r2, r2, #8
 8003868:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800386a:	000c      	movs	r4, r1
 800386c:	193b      	adds	r3, r7, r4
 800386e:	2201      	movs	r2, #1
 8003870:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	193b      	adds	r3, r7, r4
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003878:	193b      	adds	r3, r7, r4
 800387a:	2200      	movs	r2, #0
 800387c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387e:	193a      	adds	r2, r7, r4
 8003880:	2390      	movs	r3, #144	@ 0x90
 8003882:	05db      	lsls	r3, r3, #23
 8003884:	0011      	movs	r1, r2
 8003886:	0018      	movs	r0, r3
 8003888:	f001 ff30 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800388c:	0021      	movs	r1, r4
 800388e:	187b      	adds	r3, r7, r1
 8003890:	2204      	movs	r2, #4
 8003892:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003894:	187b      	adds	r3, r7, r1
 8003896:	2288      	movs	r2, #136	@ 0x88
 8003898:	0352      	lsls	r2, r2, #13
 800389a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	187b      	adds	r3, r7, r1
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038a2:	000c      	movs	r4, r1
 80038a4:	187b      	adds	r3, r7, r1
 80038a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003910 <MX_GPIO_Init+0x314>)
 80038a8:	0019      	movs	r1, r3
 80038aa:	0010      	movs	r0, r2
 80038ac:	f001 ff1e 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038b0:	0021      	movs	r1, r4
 80038b2:	187b      	adds	r3, r7, r1
 80038b4:	22c0      	movs	r2, #192	@ 0xc0
 80038b6:	0092      	lsls	r2, r2, #2
 80038b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ba:	187b      	adds	r3, r7, r1
 80038bc:	2212      	movs	r2, #18
 80038be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	2200      	movs	r2, #0
 80038c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	2203      	movs	r2, #3
 80038ca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	2201      	movs	r2, #1
 80038d0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d2:	187b      	adds	r3, r7, r1
 80038d4:	4a0d      	ldr	r2, [pc, #52]	@ (800390c <MX_GPIO_Init+0x310>)
 80038d6:	0019      	movs	r1, r3
 80038d8:	0010      	movs	r0, r2
 80038da:	f001 ff07 	bl	80056ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80038de:	2200      	movs	r2, #0
 80038e0:	2100      	movs	r1, #0
 80038e2:	2007      	movs	r0, #7
 80038e4:	f001 fcba 	bl	800525c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80038e8:	2007      	movs	r0, #7
 80038ea:	f001 fccc 	bl	8005286 <HAL_NVIC_EnableIRQ>

}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b00b      	add	sp, #44	@ 0x2c
 80038f4:	bd90      	pop	{r4, r7, pc}
 80038f6:	46c0      	nop			@ (mov r8, r8)
 80038f8:	40021000 	.word	0x40021000
 80038fc:	48000800 	.word	0x48000800
 8003900:	00001c21 	.word	0x00001c21
 8003904:	48001400 	.word	0x48001400
 8003908:	0000fc04 	.word	0x0000fc04
 800390c:	48000400 	.word	0x48000400
 8003910:	48000c00 	.word	0x48000c00

08003914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391a:	4b0f      	ldr	r3, [pc, #60]	@ (8003958 <HAL_MspInit+0x44>)
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	4b0e      	ldr	r3, [pc, #56]	@ (8003958 <HAL_MspInit+0x44>)
 8003920:	2101      	movs	r1, #1
 8003922:	430a      	orrs	r2, r1
 8003924:	619a      	str	r2, [r3, #24]
 8003926:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <HAL_MspInit+0x44>)
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2201      	movs	r2, #1
 800392c:	4013      	ands	r3, r2
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	4b09      	ldr	r3, [pc, #36]	@ (8003958 <HAL_MspInit+0x44>)
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	4b08      	ldr	r3, [pc, #32]	@ (8003958 <HAL_MspInit+0x44>)
 8003938:	2180      	movs	r1, #128	@ 0x80
 800393a:	0549      	lsls	r1, r1, #21
 800393c:	430a      	orrs	r2, r1
 800393e:	61da      	str	r2, [r3, #28]
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <HAL_MspInit+0x44>)
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	2380      	movs	r3, #128	@ 0x80
 8003946:	055b      	lsls	r3, r3, #21
 8003948:	4013      	ands	r3, r2
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	b002      	add	sp, #8
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	40021000 	.word	0x40021000

0800395c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003960:	46c0      	nop			@ (mov r8, r8)
 8003962:	e7fd      	b.n	8003960 <NMI_Handler+0x4>

08003964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	e7fd      	b.n	8003968 <HardFault_Handler+0x4>

0800396c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003970:	46c0      	nop			@ (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003984:	f000 ffd2 	bl	800492c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003988:	46c0      	nop			@ (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003992:	2080      	movs	r0, #128	@ 0x80
 8003994:	f002 f854 	bl	8005a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003998:	46c0      	nop			@ (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

//	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_buf,sizeof(adc_buf));
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80039a4:	4b03      	ldr	r3, [pc, #12]	@ (80039b4 <DMA1_Channel1_IRQHandler+0x14>)
 80039a6:	0018      	movs	r0, r3
 80039a8:	f001 fdb5 	bl	8005516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80039ac:	46c0      	nop			@ (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	200002ac 	.word	0x200002ac

080039b8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80039bc:	4b03      	ldr	r3, [pc, #12]	@ (80039cc <DMA1_Channel2_3_IRQHandler+0x14>)
 80039be:	0018      	movs	r0, r3
 80039c0:	f001 fda9 	bl	8005516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80039c4:	46c0      	nop			@ (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	20000740 	.word	0x20000740

080039d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039d4:	4b03      	ldr	r3, [pc, #12]	@ (80039e4 <TIM3_IRQHandler+0x14>)
 80039d6:	0018      	movs	r0, r3
 80039d8:	f003 f948 	bl	8006c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039dc:	46c0      	nop			@ (mov r8, r8)
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	2000034c 	.word	0x2000034c

080039e8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039ec:	4b03      	ldr	r3, [pc, #12]	@ (80039fc <TIM6_IRQHandler+0x14>)
 80039ee:	0018      	movs	r0, r3
 80039f0:	f003 f93c 	bl	8006c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80039f4:	46c0      	nop			@ (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	46c0      	nop			@ (mov r8, r8)
 80039fc:	20000394 	.word	0x20000394

08003a00 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003a04:	4b03      	ldr	r3, [pc, #12]	@ (8003a14 <TIM14_IRQHandler+0x14>)
 8003a06:	0018      	movs	r0, r3
 8003a08:	f003 f930 	bl	8006c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003a0c:	46c0      	nop			@ (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	200003dc 	.word	0x200003dc

08003a18 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003a1c:	4b03      	ldr	r3, [pc, #12]	@ (8003a2c <TIM15_IRQHandler+0x14>)
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f003 f924 	bl	8006c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003a24:	46c0      	nop			@ (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	20000424 	.word	0x20000424

08003a30 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003a34:	4b03      	ldr	r3, [pc, #12]	@ (8003a44 <TIM16_IRQHandler+0x14>)
 8003a36:	0018      	movs	r0, r3
 8003a38:	f003 f918 	bl	8006c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003a3c:	46c0      	nop			@ (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	2000046c 	.word	0x2000046c

08003a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a4c:	4b03      	ldr	r3, [pc, #12]	@ (8003a5c <USART1_IRQHandler+0x14>)
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f004 fac2 	bl	8007fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a54:	46c0      	nop			@ (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			@ (mov r8, r8)
 8003a5c:	200006b8 	.word	0x200006b8

08003a60 <Get_24bit_Weight>:
 */
#include "sw_spi.h"
#include "main.h"

unsigned int Get_24bit_Weight(char channel_gain)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	0002      	movs	r2, r0
 8003a68:	1dfb      	adds	r3, r7, #7
 8003a6a:	701a      	strb	r2, [r3, #0]
	unsigned int weight=0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
	SW_SPI_PWR_ON; //Pull down clk
 8003a70:	4b29      	ldr	r3, [pc, #164]	@ (8003b18 <Get_24bit_Weight+0xb8>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	2110      	movs	r1, #16
 8003a76:	0018      	movs	r0, r3
 8003a78:	f001 ffc5 	bl	8005a06 <HAL_GPIO_WritePin>

	while(SW_SPI_DAT_RDY)
 8003a7c:	e003      	b.n	8003a86 <Get_24bit_Weight+0x26>
	{
//		SW_SPI_CLK_H;
//		SW_SPI_CLK_L;
		printf_DMA("Data unready\n");
 8003a7e:	4b27      	ldr	r3, [pc, #156]	@ (8003b1c <Get_24bit_Weight+0xbc>)
 8003a80:	0018      	movs	r0, r3
 8003a82:	f7ff f91b 	bl	8002cbc <printf_DMA>
	while(SW_SPI_DAT_RDY)
 8003a86:	4b24      	ldr	r3, [pc, #144]	@ (8003b18 <Get_24bit_Weight+0xb8>)
 8003a88:	2120      	movs	r1, #32
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f001 ff9e 	bl	80059cc <HAL_GPIO_ReadPin>
 8003a90:	1e03      	subs	r3, r0, #0
 8003a92:	d1f4      	bne.n	8003a7e <Get_24bit_Weight+0x1e>

	}

	for(char i = 24; i!=0; i--)
 8003a94:	230b      	movs	r3, #11
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	2218      	movs	r2, #24
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e021      	b.n	8003ae2 <Get_24bit_Weight+0x82>
	{
		SW_SPI_CLK_H;
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b18 <Get_24bit_Weight+0xb8>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	2110      	movs	r1, #16
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f001 ffae 	bl	8005a06 <HAL_GPIO_WritePin>
		weight = weight<<1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	60fb      	str	r3, [r7, #12]
		SW_SPI_CLK_L;
 8003ab0:	4b19      	ldr	r3, [pc, #100]	@ (8003b18 <Get_24bit_Weight+0xb8>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2110      	movs	r1, #16
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f001 ffa5 	bl	8005a06 <HAL_GPIO_WritePin>
		if(SW_SPI_DAT_RDY)
 8003abc:	4b16      	ldr	r3, [pc, #88]	@ (8003b18 <Get_24bit_Weight+0xb8>)
 8003abe:	2120      	movs	r1, #32
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f001 ff83 	bl	80059cc <HAL_GPIO_ReadPin>
 8003ac6:	1e03      	subs	r3, r0, #0
 8003ac8:	d002      	beq.n	8003ad0 <Get_24bit_Weight+0x70>
		{
		 weight+=1;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3301      	adds	r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]
		}
		delay_us(1);
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f000 fd8b 	bl	80045ec <delay_us>
	for(char i = 24; i!=0; i--)
 8003ad6:	210b      	movs	r1, #11
 8003ad8:	187b      	adds	r3, r7, r1
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	3a01      	subs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
 8003ae2:	230b      	movs	r3, #11
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1d8      	bne.n	8003a9e <Get_24bit_Weight+0x3e>
	}
	SW_SPI_CLK_H;
 8003aec:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <Get_24bit_Weight+0xb8>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	2110      	movs	r1, #16
 8003af2:	0018      	movs	r0, r3
 8003af4:	f001 ff87 	bl	8005a06 <HAL_GPIO_WritePin>
	weight = weight^0x800000;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2280      	movs	r2, #128	@ 0x80
 8003afc:	0412      	lsls	r2, r2, #16
 8003afe:	4053      	eors	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
	SW_SPI_CLK_L;
 8003b02:	4b05      	ldr	r3, [pc, #20]	@ (8003b18 <Get_24bit_Weight+0xb8>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	2110      	movs	r1, #16
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f001 ff7c 	bl	8005a06 <HAL_GPIO_WritePin>

	//Preserved for channel selection

	return weight;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
}
 8003b10:	0018      	movs	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b004      	add	sp, #16
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	48001400 	.word	0x48001400
 8003b1c:	0800e694 	.word	0x0800e694

08003b20 <Get_weight>:

void Get_weight(HX711_Structure* weight_par)		// AKg * AVDDmV/X Kg = Y   A:weight AVDD:sensor power X:max weight of load cell Y:AD reading from module
{													// Example: A Kg * 3.24mV/10Kg => A*128 = 0.324*128AmV = 41.472AmV  => 41.472AmV/AD = 3.24V/0xffffff => AD = 214748.352A(Kg)  A(g) = AD/214.748
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	if(weight_par->calibration_flag)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	7b1b      	ldrb	r3, [r3, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d019      	beq.n	8003b64 <Get_weight+0x44>
	{
		weight_par->gross_weight = Get_24bit_Weight(CHA_128);
 8003b30:	2019      	movs	r0, #25
 8003b32:	f7ff ff95 	bl	8003a60 <Get_24bit_Weight>
 8003b36:	0003      	movs	r3, r0
 8003b38:	001a      	movs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	605a      	str	r2, [r3, #4]
		if(weight_par->gross_weight >= weight_par->calibrated_value)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	db0c      	blt.n	8003b64 <Get_weight+0x44>
			weight_par->gram = ((weight_par->gross_weight - weight_par->calibrated_value)/LOAD_CELL_FACTOR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2137      	movs	r1, #55	@ 0x37
 8003b56:	0018      	movs	r0, r3
 8003b58:	f7fc fb86 	bl	8000268 <__divsi3>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	001a      	movs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	601a      	str	r2, [r3, #0]
	}
}
 8003b64:	46c0      	nop			@ (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HX711_Calibration>:

void HX711_Calibration(HX711_Structure* weight_par)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	  /*******Get gross weight**************/
	for(char i=0;i<5;i++)
 8003b74:	230f      	movs	r3, #15
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
 8003b7c:	e020      	b.n	8003bc0 <HX711_Calibration+0x54>
	{
		SW_SPI_PWR_OFF;
 8003b7e:	4b37      	ldr	r3, [pc, #220]	@ (8003c5c <HX711_Calibration+0xf0>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	2110      	movs	r1, #16
 8003b84:	0018      	movs	r0, r3
 8003b86:	f001 ff3e 	bl	8005a06 <HAL_GPIO_WritePin>
		delay_us(2000);
 8003b8a:	23fa      	movs	r3, #250	@ 0xfa
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 fd2c 	bl	80045ec <delay_us>
		SW_SPI_PWR_ON;
 8003b94:	4b31      	ldr	r3, [pc, #196]	@ (8003c5c <HX711_Calibration+0xf0>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	2110      	movs	r1, #16
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f001 ff33 	bl	8005a06 <HAL_GPIO_WritePin>
		weight_par->calibrated_value+= Get_24bit_Weight(CHA_128);
 8003ba0:	2019      	movs	r0, #25
 8003ba2:	f7ff ff5d 	bl	8003a60 <Get_24bit_Weight>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	18d3      	adds	r3, r2, r3
 8003bae:	001a      	movs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
	for(char i=0;i<5;i++)
 8003bb4:	210f      	movs	r1, #15
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	781a      	ldrb	r2, [r3, #0]
 8003bba:	187b      	adds	r3, r7, r1
 8003bbc:	3201      	adds	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	230f      	movs	r3, #15
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d9d9      	bls.n	8003b7e <HX711_Calibration+0x12>
	}
	weight_par->calibrated_value /=5;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2105      	movs	r1, #5
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7fc fb49 	bl	8000268 <__divsi3>
 8003bd6:	0003      	movs	r3, r0
 8003bd8:	001a      	movs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	609a      	str	r2, [r3, #8]



	  while(!(weight_par->calibrated_value>= CALIBRATION_RANGE_L && weight_par->calibrated_value<=CALIBRATION_RANGE_H))
 8003bde:	e025      	b.n	8003c2c <HX711_Calibration+0xc0>
	  {
		  printf("Sensor initial error, re-calibrating\r\n");
 8003be0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c60 <HX711_Calibration+0xf4>)
 8003be2:	0018      	movs	r0, r3
 8003be4:	f007 f97c 	bl	800aee0 <puts>
		  SW_SPI_PWR_OFF;
 8003be8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c5c <HX711_Calibration+0xf0>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	2110      	movs	r1, #16
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f001 ff09 	bl	8005a06 <HAL_GPIO_WritePin>
		  delay_us(200);
 8003bf4:	20c8      	movs	r0, #200	@ 0xc8
 8003bf6:	f000 fcf9 	bl	80045ec <delay_us>
		  SW_SPI_PWR_ON;
 8003bfa:	4b18      	ldr	r3, [pc, #96]	@ (8003c5c <HX711_Calibration+0xf0>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2110      	movs	r1, #16
 8003c00:	0018      	movs	r0, r3
 8003c02:	f001 ff00 	bl	8005a06 <HAL_GPIO_WritePin>
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 8003c06:	2019      	movs	r0, #25
 8003c08:	f7ff ff2a 	bl	8003a60 <Get_24bit_Weight>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	001a      	movs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	609a      	str	r2, [r3, #8]
		  delay_us(2000);
 8003c14:	23fa      	movs	r3, #250	@ 0xfa
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 fce7 	bl	80045ec <delay_us>
		  weight_par->calibrated_value = Get_24bit_Weight(CHA_128);
 8003c1e:	2019      	movs	r0, #25
 8003c20:	f7ff ff1e 	bl	8003a60 <Get_24bit_Weight>
 8003c24:	0003      	movs	r3, r0
 8003c26:	001a      	movs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
	  while(!(weight_par->calibrated_value>= CALIBRATION_RANGE_L && weight_par->calibrated_value<=CALIBRATION_RANGE_H))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4a0c      	ldr	r2, [pc, #48]	@ (8003c64 <HX711_Calibration+0xf8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	ddd4      	ble.n	8003be0 <HX711_Calibration+0x74>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c68 <HX711_Calibration+0xfc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	dccf      	bgt.n	8003be0 <HX711_Calibration+0x74>
	  }
	  printf("calibration ok weight:%d\r\n", weight_par->calibrated_value);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <HX711_Calibration+0x100>)
 8003c46:	0011      	movs	r1, r2
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f007 f8e3 	bl	800ae14 <iprintf>
	  weight_par->calibration_flag = 1; //Calibration done
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	731a      	strb	r2, [r3, #12]

}
 8003c54:	46c0      	nop			@ (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b004      	add	sp, #16
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	48001400 	.word	0x48001400
 8003c60:	0800e6a4 	.word	0x0800e6a4
 8003c64:	007a11ff 	.word	0x007a11ff
 8003c68:	0084c060 	.word	0x0084c060
 8003c6c:	0800e6cc 	.word	0x0800e6cc

08003c70 <Incremental_PID>:
// e(k) the value difference of actual and setting e(k-1) the last time difference
// In this motor control we use P
// PWM = Kp[e(k) - e(k-1)]

char Incremental_PID(HX711_Structure* weight_par, uint16_t pull_force_thr, PID_ParameterStruct* PID_Parameters)
{
 8003c70:	b5b0      	push	{r4, r5, r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	230a      	movs	r3, #10
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	1c0a      	adds	r2, r1, #0
 8003c80:	801a      	strh	r2, [r3, #0]
	static signed int   Bias=0, Last_bias=0, Last1_bias = 0;
	static int PWM = 0;
	Bias = weight_par->gramAvgval> PULL_FORCE_THR? weight_par->gramAvgval - PULL_FORCE_THR : 0;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	22fa      	movs	r2, #250	@ 0xfa
 8003c88:	0092      	lsls	r2, r2, #2
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	da01      	bge.n	8003c92 <Incremental_PID+0x22>
 8003c8e:	23fa      	movs	r3, #250	@ 0xfa
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4a2c      	ldr	r2, [pc, #176]	@ (8003d44 <Incremental_PID+0xd4>)
 8003c94:	189a      	adds	r2, r3, r2
 8003c96:	4b2c      	ldr	r3, [pc, #176]	@ (8003d48 <Incremental_PID+0xd8>)
 8003c98:	601a      	str	r2, [r3, #0]
	//sum_integral +=Bias*Ki;
	PWM = PID_Parameters->Kp*(Bias-Last_bias)+PID_Parameters->Ki*Bias + PID_Parameters->Kd*(Bias - Last_bias);//(Bias-2*Last_bias+Last1_bias);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681c      	ldr	r4, [r3, #0]
 8003c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d48 <Incremental_PID+0xd8>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d4c <Incremental_PID+0xdc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7fc ff5d 	bl	8000b68 <__aeabi_i2f>
 8003cae:	1c03      	adds	r3, r0, #0
 8003cb0:	1c19      	adds	r1, r3, #0
 8003cb2:	1c20      	adds	r0, r4, #0
 8003cb4:	f7fc fdfa 	bl	80008ac <__aeabi_fmul>
 8003cb8:	1c03      	adds	r3, r0, #0
 8003cba:	1c1d      	adds	r5, r3, #0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685c      	ldr	r4, [r3, #4]
 8003cc0:	4b21      	ldr	r3, [pc, #132]	@ (8003d48 <Incremental_PID+0xd8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7fc ff4f 	bl	8000b68 <__aeabi_i2f>
 8003cca:	1c03      	adds	r3, r0, #0
 8003ccc:	1c19      	adds	r1, r3, #0
 8003cce:	1c20      	adds	r0, r4, #0
 8003cd0:	f7fc fdec 	bl	80008ac <__aeabi_fmul>
 8003cd4:	1c03      	adds	r3, r0, #0
 8003cd6:	1c19      	adds	r1, r3, #0
 8003cd8:	1c28      	adds	r0, r5, #0
 8003cda:	f7fc fc5d 	bl	8000598 <__aeabi_fadd>
 8003cde:	1c03      	adds	r3, r0, #0
 8003ce0:	1c1d      	adds	r5, r3, #0
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689c      	ldr	r4, [r3, #8]
 8003ce6:	4b18      	ldr	r3, [pc, #96]	@ (8003d48 <Incremental_PID+0xd8>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b18      	ldr	r3, [pc, #96]	@ (8003d4c <Incremental_PID+0xdc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7fc ff39 	bl	8000b68 <__aeabi_i2f>
 8003cf6:	1c03      	adds	r3, r0, #0
 8003cf8:	1c19      	adds	r1, r3, #0
 8003cfa:	1c20      	adds	r0, r4, #0
 8003cfc:	f7fc fdd6 	bl	80008ac <__aeabi_fmul>
 8003d00:	1c03      	adds	r3, r0, #0
 8003d02:	1c19      	adds	r1, r3, #0
 8003d04:	1c28      	adds	r0, r5, #0
 8003d06:	f7fc fc47 	bl	8000598 <__aeabi_fadd>
 8003d0a:	1c03      	adds	r3, r0, #0
 8003d0c:	1c18      	adds	r0, r3, #0
 8003d0e:	f7fc ff0b 	bl	8000b28 <__aeabi_f2iz>
 8003d12:	0002      	movs	r2, r0
 8003d14:	4b0e      	ldr	r3, [pc, #56]	@ (8003d50 <Incremental_PID+0xe0>)
 8003d16:	601a      	str	r2, [r3, #0]

	Last1_bias = Last_bias;
 8003d18:	4b0c      	ldr	r3, [pc, #48]	@ (8003d4c <Incremental_PID+0xdc>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d54 <Incremental_PID+0xe4>)
 8003d1e:	601a      	str	r2, [r3, #0]
	Last_bias = Bias;
 8003d20:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <Incremental_PID+0xd8>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b09      	ldr	r3, [pc, #36]	@ (8003d4c <Incremental_PID+0xdc>)
 8003d26:	601a      	str	r2, [r3, #0]


	PWM = PWM>10 ? 10:PWM;
 8003d28:	4b09      	ldr	r3, [pc, #36]	@ (8003d50 <Incremental_PID+0xe0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b0a      	cmp	r3, #10
 8003d2e:	dd00      	ble.n	8003d32 <Incremental_PID+0xc2>
 8003d30:	230a      	movs	r3, #10
 8003d32:	4a07      	ldr	r2, [pc, #28]	@ (8003d50 <Incremental_PID+0xe0>)
 8003d34:	6013      	str	r3, [r2, #0]

	return PWM;//Bit operation can lead to negtive value
 8003d36:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <Incremental_PID+0xe0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	b2db      	uxtb	r3, r3
}
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b004      	add	sp, #16
 8003d42:	bdb0      	pop	{r4, r5, r7, pc}
 8003d44:	fffffc18 	.word	0xfffffc18
 8003d48:	200002f0 	.word	0x200002f0
 8003d4c:	200002f4 	.word	0x200002f4
 8003d50:	200002f8 	.word	0x200002f8
 8003d54:	200002fc 	.word	0x200002fc

08003d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  return 1;
 8003d5c:	2301      	movs	r3, #1
}
 8003d5e:	0018      	movs	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_kill>:

int _kill(int pid, int sig)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d6e:	f007 fa9b 	bl	800b2a8 <__errno>
 8003d72:	0003      	movs	r3, r0
 8003d74:	2216      	movs	r2, #22
 8003d76:	601a      	str	r2, [r3, #0]
  return -1;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	425b      	negs	r3, r3
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b002      	add	sp, #8
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <_exit>:

void _exit (int status)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	425a      	negs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	0011      	movs	r1, r2
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7ff ffe5 	bl	8003d64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d9a:	46c0      	nop			@ (mov r8, r8)
 8003d9c:	e7fd      	b.n	8003d9a <_exit+0x16>

08003d9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e00a      	b.n	8003dc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003db0:	e000      	b.n	8003db4 <_read+0x16>
 8003db2:	bf00      	nop
 8003db4:	0001      	movs	r1, r0
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	60ba      	str	r2, [r7, #8]
 8003dbc:	b2ca      	uxtb	r2, r1
 8003dbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	dbf0      	blt.n	8003db0 <_read+0x12>
  }

  return len;
 8003dce:	687b      	ldr	r3, [r7, #4]
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b006      	add	sp, #24
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e009      	b.n	8003dfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	60ba      	str	r2, [r7, #8]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	0018      	movs	r0, r3
 8003df4:	f7fe ff4e 	bl	8002c94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	dbf1      	blt.n	8003dea <_write+0x12>
  }
  return len;
 8003e06:	687b      	ldr	r3, [r7, #4]
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b006      	add	sp, #24
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <_close>:
		}
		return len;
}*/

int _close(int file)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	425b      	negs	r3, r3
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b002      	add	sp, #8
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2280      	movs	r2, #128	@ 0x80
 8003e32:	0192      	lsls	r2, r2, #6
 8003e34:	605a      	str	r2, [r3, #4]
  return 0;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	0018      	movs	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b002      	add	sp, #8
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <_isatty>:

int _isatty(int file)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e48:	2301      	movs	r3, #1
}
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b002      	add	sp, #8
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b004      	add	sp, #16
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e70:	4a14      	ldr	r2, [pc, #80]	@ (8003ec4 <_sbrk+0x5c>)
 8003e72:	4b15      	ldr	r3, [pc, #84]	@ (8003ec8 <_sbrk+0x60>)
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e7c:	4b13      	ldr	r3, [pc, #76]	@ (8003ecc <_sbrk+0x64>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d102      	bne.n	8003e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e84:	4b11      	ldr	r3, [pc, #68]	@ (8003ecc <_sbrk+0x64>)
 8003e86:	4a12      	ldr	r2, [pc, #72]	@ (8003ed0 <_sbrk+0x68>)
 8003e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e8a:	4b10      	ldr	r3, [pc, #64]	@ (8003ecc <_sbrk+0x64>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	18d3      	adds	r3, r2, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d207      	bcs.n	8003ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e98:	f007 fa06 	bl	800b2a8 <__errno>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	220c      	movs	r2, #12
 8003ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	425b      	negs	r3, r3
 8003ea6:	e009      	b.n	8003ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ea8:	4b08      	ldr	r3, [pc, #32]	@ (8003ecc <_sbrk+0x64>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eae:	4b07      	ldr	r3, [pc, #28]	@ (8003ecc <_sbrk+0x64>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	18d2      	adds	r2, r2, r3
 8003eb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <_sbrk+0x64>)
 8003eb8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003eba:	68fb      	ldr	r3, [r7, #12]
}
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b006      	add	sp, #24
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20002000 	.word	0x20002000
 8003ec8:	00000400 	.word	0x00000400
 8003ecc:	20000300 	.word	0x20000300
 8003ed0:	200008d8 	.word	0x200008d8

08003ed4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003ed8:	46c0      	nop			@ (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b09a      	sub	sp, #104	@ 0x68
 8003ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ee6:	2358      	movs	r3, #88	@ 0x58
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	0018      	movs	r0, r3
 8003eec:	2310      	movs	r3, #16
 8003eee:	001a      	movs	r2, r3
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	f007 f96d 	bl	800b1d0 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003ef6:	2344      	movs	r3, #68	@ 0x44
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	0018      	movs	r0, r3
 8003efc:	2314      	movs	r3, #20
 8003efe:	001a      	movs	r2, r3
 8003f00:	2100      	movs	r1, #0
 8003f02:	f007 f965 	bl	800b1d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f06:	233c      	movs	r3, #60	@ 0x3c
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	2308      	movs	r3, #8
 8003f0e:	001a      	movs	r2, r3
 8003f10:	2100      	movs	r1, #0
 8003f12:	f007 f95d 	bl	800b1d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f16:	2320      	movs	r3, #32
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	231c      	movs	r3, #28
 8003f1e:	001a      	movs	r2, r3
 8003f20:	2100      	movs	r1, #0
 8003f22:	f007 f955 	bl	800b1d0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f26:	003b      	movs	r3, r7
 8003f28:	0018      	movs	r0, r3
 8003f2a:	2320      	movs	r3, #32
 8003f2c:	001a      	movs	r2, r3
 8003f2e:	2100      	movs	r1, #0
 8003f30:	f007 f94e 	bl	800b1d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f34:	4b6d      	ldr	r3, [pc, #436]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8003f36:	4a6e      	ldr	r2, [pc, #440]	@ (80040f0 <MX_TIM1_Init+0x210>)
 8003f38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480-1;
 8003f3a:	4b6c      	ldr	r3, [pc, #432]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8003f3c:	22e0      	movs	r2, #224	@ 0xe0
 8003f3e:	32ff      	adds	r2, #255	@ 0xff
 8003f40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f42:	4b6a      	ldr	r3, [pc, #424]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003f48:	4b68      	ldr	r3, [pc, #416]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8003f4a:	2263      	movs	r2, #99	@ 0x63
 8003f4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f4e:	4b67      	ldr	r3, [pc, #412]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f54:	4b65      	ldr	r3, [pc, #404]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5a:	4b64      	ldr	r3, [pc, #400]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f60:	4b62      	ldr	r3, [pc, #392]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8003f62:	0018      	movs	r0, r3
 8003f64:	f002 fabe 	bl	80064e4 <HAL_TIM_Base_Init>
 8003f68:	1e03      	subs	r3, r0, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003f6c:	f7fe fed2 	bl	8002d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f70:	2158      	movs	r1, #88	@ 0x58
 8003f72:	187b      	adds	r3, r7, r1
 8003f74:	2280      	movs	r2, #128	@ 0x80
 8003f76:	0152      	lsls	r2, r2, #5
 8003f78:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f7a:	187a      	adds	r2, r7, r1
 8003f7c:	4b5b      	ldr	r3, [pc, #364]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8003f7e:	0011      	movs	r1, r2
 8003f80:	0018      	movs	r0, r3
 8003f82:	f003 f87f 	bl	8007084 <HAL_TIM_ConfigClockSource>
 8003f86:	1e03      	subs	r3, r0, #0
 8003f88:	d001      	beq.n	8003f8e <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8003f8a:	f7fe fec3 	bl	8002d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003f8e:	4b57      	ldr	r3, [pc, #348]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8003f90:	0018      	movs	r0, r3
 8003f92:	f002 fce5 	bl	8006960 <HAL_TIM_PWM_Init>
 8003f96:	1e03      	subs	r3, r0, #0
 8003f98:	d001      	beq.n	8003f9e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003f9a:	f7fe febb 	bl	8002d14 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003f9e:	4b53      	ldr	r3, [pc, #332]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f002 fbd3 	bl	800674c <HAL_TIM_OC_Init>
 8003fa6:	1e03      	subs	r3, r0, #0
 8003fa8:	d001      	beq.n	8003fae <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8003faa:	f7fe feb3 	bl	8002d14 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003fae:	2144      	movs	r1, #68	@ 0x44
 8003fb0:	187b      	adds	r3, r7, r1
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003fb6:	187b      	adds	r3, r7, r1
 8003fb8:	2200      	movs	r2, #0
 8003fba:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003fbc:	187a      	adds	r2, r7, r1
 8003fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8003fc0:	0011      	movs	r1, r2
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f003 f932 	bl	800722c <HAL_TIM_SlaveConfigSynchro>
 8003fc8:	1e03      	subs	r3, r0, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8003fcc:	f7fe fea2 	bl	8002d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8003fd0:	213c      	movs	r1, #60	@ 0x3c
 8003fd2:	187b      	adds	r3, r7, r1
 8003fd4:	2270      	movs	r2, #112	@ 0x70
 8003fd6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fd8:	187b      	adds	r3, r7, r1
 8003fda:	2200      	movs	r2, #0
 8003fdc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fde:	187a      	adds	r2, r7, r1
 8003fe0:	4b42      	ldr	r3, [pc, #264]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8003fe2:	0011      	movs	r1, r2
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f003 fd57 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
 8003fea:	1e03      	subs	r3, r0, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8003fee:	f7fe fe91 	bl	8002d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ff2:	2120      	movs	r1, #32
 8003ff4:	187b      	adds	r3, r7, r1
 8003ff6:	2260      	movs	r2, #96	@ 0x60
 8003ff8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003ffa:	187b      	adds	r3, r7, r1
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004000:	187b      	adds	r3, r7, r1
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004006:	187b      	adds	r3, r7, r1
 8004008:	2200      	movs	r2, #0
 800400a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800400c:	187b      	adds	r3, r7, r1
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004012:	187b      	adds	r3, r7, r1
 8004014:	2200      	movs	r2, #0
 8004016:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004018:	187b      	adds	r3, r7, r1
 800401a:	2200      	movs	r2, #0
 800401c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800401e:	1879      	adds	r1, r7, r1
 8004020:	4b32      	ldr	r3, [pc, #200]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8004022:	2200      	movs	r2, #0
 8004024:	0018      	movs	r0, r3
 8004026:	f002 ff67 	bl	8006ef8 <HAL_TIM_PWM_ConfigChannel>
 800402a:	1e03      	subs	r3, r0, #0
 800402c:	d001      	beq.n	8004032 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 800402e:	f7fe fe71 	bl	8002d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004032:	2320      	movs	r3, #32
 8004034:	18f9      	adds	r1, r7, r3
 8004036:	4b2d      	ldr	r3, [pc, #180]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8004038:	2204      	movs	r2, #4
 800403a:	0018      	movs	r0, r3
 800403c:	f002 ff5c 	bl	8006ef8 <HAL_TIM_PWM_ConfigChannel>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d001      	beq.n	8004048 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8004044:	f7fe fe66 	bl	8002d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004048:	2320      	movs	r3, #32
 800404a:	18f9      	adds	r1, r7, r3
 800404c:	4b27      	ldr	r3, [pc, #156]	@ (80040ec <MX_TIM1_Init+0x20c>)
 800404e:	2208      	movs	r2, #8
 8004050:	0018      	movs	r0, r3
 8004052:	f002 ff51 	bl	8006ef8 <HAL_TIM_PWM_ConfigChannel>
 8004056:	1e03      	subs	r3, r0, #0
 8004058:	d001      	beq.n	800405e <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 800405a:	f7fe fe5b 	bl	8002d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800405e:	2120      	movs	r1, #32
 8004060:	187b      	adds	r3, r7, r1
 8004062:	2230      	movs	r2, #48	@ 0x30
 8004064:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8004066:	187b      	adds	r3, r7, r1
 8004068:	2232      	movs	r2, #50	@ 0x32
 800406a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800406c:	1879      	adds	r1, r7, r1
 800406e:	4b1f      	ldr	r3, [pc, #124]	@ (80040ec <MX_TIM1_Init+0x20c>)
 8004070:	220c      	movs	r2, #12
 8004072:	0018      	movs	r0, r3
 8004074:	f002 fee8 	bl	8006e48 <HAL_TIM_OC_ConfigChannel>
 8004078:	1e03      	subs	r3, r0, #0
 800407a:	d001      	beq.n	8004080 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 800407c:	f7fe fe4a 	bl	8002d14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004080:	003b      	movs	r3, r7
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004086:	003b      	movs	r3, r7
 8004088:	2200      	movs	r2, #0
 800408a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800408c:	003b      	movs	r3, r7
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004092:	003b      	movs	r3, r7
 8004094:	2200      	movs	r2, #0
 8004096:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004098:	003b      	movs	r3, r7
 800409a:	2200      	movs	r2, #0
 800409c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800409e:	003b      	movs	r3, r7
 80040a0:	2280      	movs	r2, #128	@ 0x80
 80040a2:	0192      	lsls	r2, r2, #6
 80040a4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040a6:	003b      	movs	r3, r7
 80040a8:	2200      	movs	r2, #0
 80040aa:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040ac:	003a      	movs	r2, r7
 80040ae:	4b0f      	ldr	r3, [pc, #60]	@ (80040ec <MX_TIM1_Init+0x20c>)
 80040b0:	0011      	movs	r1, r2
 80040b2:	0018      	movs	r0, r3
 80040b4:	f003 fd48 	bl	8007b48 <HAL_TIMEx_ConfigBreakDeadTime>
 80040b8:	1e03      	subs	r3, r0, #0
 80040ba:	d001      	beq.n	80040c0 <MX_TIM1_Init+0x1e0>
  {
    Error_Handler();
 80040bc:	f7fe fe2a 	bl	8002d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  sBreakDeadTimeConfig.DeadTime = 499;//50 = 1us
 80040c0:	003b      	movs	r3, r7
 80040c2:	22f4      	movs	r2, #244	@ 0xf4
 80040c4:	32ff      	adds	r2, #255	@ 0xff
 80040c6:	60da      	str	r2, [r3, #12]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040c8:	003a      	movs	r2, r7
 80040ca:	4b08      	ldr	r3, [pc, #32]	@ (80040ec <MX_TIM1_Init+0x20c>)
 80040cc:	0011      	movs	r1, r2
 80040ce:	0018      	movs	r0, r3
 80040d0:	f003 fd3a 	bl	8007b48 <HAL_TIMEx_ConfigBreakDeadTime>
 80040d4:	1e03      	subs	r3, r0, #0
 80040d6:	d001      	beq.n	80040dc <MX_TIM1_Init+0x1fc>
  {
    Error_Handler();
 80040d8:	f7fe fe1c 	bl	8002d14 <Error_Handler>
  }
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80040dc:	4b03      	ldr	r3, [pc, #12]	@ (80040ec <MX_TIM1_Init+0x20c>)
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 fa44 	bl	800456c <HAL_TIM_MspPostInit>

}
 80040e4:	46c0      	nop			@ (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b01a      	add	sp, #104	@ 0x68
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000304 	.word	0x20000304
 80040f0:	40012c00 	.word	0x40012c00

080040f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040fa:	2308      	movs	r3, #8
 80040fc:	18fb      	adds	r3, r7, r3
 80040fe:	0018      	movs	r0, r3
 8004100:	2310      	movs	r3, #16
 8004102:	001a      	movs	r2, r3
 8004104:	2100      	movs	r1, #0
 8004106:	f007 f863 	bl	800b1d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800410a:	003b      	movs	r3, r7
 800410c:	0018      	movs	r0, r3
 800410e:	2308      	movs	r3, #8
 8004110:	001a      	movs	r2, r3
 8004112:	2100      	movs	r1, #0
 8004114:	f007 f85c 	bl	800b1d0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004118:	4b1e      	ldr	r3, [pc, #120]	@ (8004194 <MX_TIM3_Init+0xa0>)
 800411a:	4a1f      	ldr	r2, [pc, #124]	@ (8004198 <MX_TIM3_Init+0xa4>)
 800411c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 800411e:	4b1d      	ldr	r3, [pc, #116]	@ (8004194 <MX_TIM3_Init+0xa0>)
 8004120:	4a1e      	ldr	r2, [pc, #120]	@ (800419c <MX_TIM3_Init+0xa8>)
 8004122:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004124:	4b1b      	ldr	r3, [pc, #108]	@ (8004194 <MX_TIM3_Init+0xa0>)
 8004126:	2200      	movs	r2, #0
 8004128:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20-1;
 800412a:	4b1a      	ldr	r3, [pc, #104]	@ (8004194 <MX_TIM3_Init+0xa0>)
 800412c:	2213      	movs	r2, #19
 800412e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004130:	4b18      	ldr	r3, [pc, #96]	@ (8004194 <MX_TIM3_Init+0xa0>)
 8004132:	2200      	movs	r2, #0
 8004134:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004136:	4b17      	ldr	r3, [pc, #92]	@ (8004194 <MX_TIM3_Init+0xa0>)
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800413c:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <MX_TIM3_Init+0xa0>)
 800413e:	0018      	movs	r0, r3
 8004140:	f002 f9d0 	bl	80064e4 <HAL_TIM_Base_Init>
 8004144:	1e03      	subs	r3, r0, #0
 8004146:	d001      	beq.n	800414c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004148:	f7fe fde4 	bl	8002d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800414c:	2108      	movs	r1, #8
 800414e:	187b      	adds	r3, r7, r1
 8004150:	2280      	movs	r2, #128	@ 0x80
 8004152:	0152      	lsls	r2, r2, #5
 8004154:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004156:	187a      	adds	r2, r7, r1
 8004158:	4b0e      	ldr	r3, [pc, #56]	@ (8004194 <MX_TIM3_Init+0xa0>)
 800415a:	0011      	movs	r1, r2
 800415c:	0018      	movs	r0, r3
 800415e:	f002 ff91 	bl	8007084 <HAL_TIM_ConfigClockSource>
 8004162:	1e03      	subs	r3, r0, #0
 8004164:	d001      	beq.n	800416a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004166:	f7fe fdd5 	bl	8002d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800416a:	003b      	movs	r3, r7
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004170:	003b      	movs	r3, r7
 8004172:	2200      	movs	r2, #0
 8004174:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004176:	003a      	movs	r2, r7
 8004178:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <MX_TIM3_Init+0xa0>)
 800417a:	0011      	movs	r1, r2
 800417c:	0018      	movs	r0, r3
 800417e:	f003 fc8b 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
 8004182:	1e03      	subs	r3, r0, #0
 8004184:	d001      	beq.n	800418a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004186:	f7fe fdc5 	bl	8002d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b006      	add	sp, #24
 8004190:	bd80      	pop	{r7, pc}
 8004192:	46c0      	nop			@ (mov r8, r8)
 8004194:	2000034c 	.word	0x2000034c
 8004198:	40000400 	.word	0x40000400
 800419c:	0000bb7f 	.word	0x0000bb7f

080041a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80041a4:	4b0c      	ldr	r3, [pc, #48]	@ (80041d8 <MX_TIM6_Init+0x38>)
 80041a6:	4a0d      	ldr	r2, [pc, #52]	@ (80041dc <MX_TIM6_Init+0x3c>)
 80041a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000-1;
 80041aa:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <MX_TIM6_Init+0x38>)
 80041ac:	4a0c      	ldr	r2, [pc, #48]	@ (80041e0 <MX_TIM6_Init+0x40>)
 80041ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b0:	4b09      	ldr	r3, [pc, #36]	@ (80041d8 <MX_TIM6_Init+0x38>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50;
 80041b6:	4b08      	ldr	r3, [pc, #32]	@ (80041d8 <MX_TIM6_Init+0x38>)
 80041b8:	2232      	movs	r2, #50	@ 0x32
 80041ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041bc:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <MX_TIM6_Init+0x38>)
 80041be:	2280      	movs	r2, #128	@ 0x80
 80041c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80041c2:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <MX_TIM6_Init+0x38>)
 80041c4:	0018      	movs	r0, r3
 80041c6:	f002 f98d 	bl	80064e4 <HAL_TIM_Base_Init>
 80041ca:	1e03      	subs	r3, r0, #0
 80041cc:	d001      	beq.n	80041d2 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 80041ce:	f7fe fda1 	bl	8002d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000394 	.word	0x20000394
 80041dc:	40001000 	.word	0x40001000
 80041e0:	0000bb7f 	.word	0x0000bb7f

080041e4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	0018      	movs	r0, r3
 80041ee:	231c      	movs	r3, #28
 80041f0:	001a      	movs	r2, r3
 80041f2:	2100      	movs	r1, #0
 80041f4:	f006 ffec 	bl	800b1d0 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80041f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004270 <MX_TIM14_Init+0x8c>)
 80041fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004274 <MX_TIM14_Init+0x90>)
 80041fc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4800-1;
 80041fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004270 <MX_TIM14_Init+0x8c>)
 8004200:	4a1d      	ldr	r2, [pc, #116]	@ (8004278 <MX_TIM14_Init+0x94>)
 8004202:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004204:	4b1a      	ldr	r3, [pc, #104]	@ (8004270 <MX_TIM14_Init+0x8c>)
 8004206:	2200      	movs	r2, #0
 8004208:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 800420a:	4b19      	ldr	r3, [pc, #100]	@ (8004270 <MX_TIM14_Init+0x8c>)
 800420c:	2263      	movs	r2, #99	@ 0x63
 800420e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004210:	4b17      	ldr	r3, [pc, #92]	@ (8004270 <MX_TIM14_Init+0x8c>)
 8004212:	2200      	movs	r2, #0
 8004214:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004216:	4b16      	ldr	r3, [pc, #88]	@ (8004270 <MX_TIM14_Init+0x8c>)
 8004218:	2280      	movs	r2, #128	@ 0x80
 800421a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800421c:	4b14      	ldr	r3, [pc, #80]	@ (8004270 <MX_TIM14_Init+0x8c>)
 800421e:	0018      	movs	r0, r3
 8004220:	f002 f960 	bl	80064e4 <HAL_TIM_Base_Init>
 8004224:	1e03      	subs	r3, r0, #0
 8004226:	d001      	beq.n	800422c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8004228:	f7fe fd74 	bl	8002d14 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800422c:	4b10      	ldr	r3, [pc, #64]	@ (8004270 <MX_TIM14_Init+0x8c>)
 800422e:	0018      	movs	r0, r3
 8004230:	f002 fa8c 	bl	800674c <HAL_TIM_OC_Init>
 8004234:	1e03      	subs	r3, r0, #0
 8004236:	d001      	beq.n	800423c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8004238:	f7fe fd6c 	bl	8002d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800423c:	1d3b      	adds	r3, r7, #4
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004242:	1d3b      	adds	r3, r7, #4
 8004244:	2200      	movs	r2, #0
 8004246:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004248:	1d3b      	adds	r3, r7, #4
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800424e:	1d3b      	adds	r3, r7, #4
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004254:	1d39      	adds	r1, r7, #4
 8004256:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <MX_TIM14_Init+0x8c>)
 8004258:	2200      	movs	r2, #0
 800425a:	0018      	movs	r0, r3
 800425c:	f002 fdf4 	bl	8006e48 <HAL_TIM_OC_ConfigChannel>
 8004260:	1e03      	subs	r3, r0, #0
 8004262:	d001      	beq.n	8004268 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8004264:	f7fe fd56 	bl	8002d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004268:	46c0      	nop			@ (mov r8, r8)
 800426a:	46bd      	mov	sp, r7
 800426c:	b008      	add	sp, #32
 800426e:	bd80      	pop	{r7, pc}
 8004270:	200003dc 	.word	0x200003dc
 8004274:	40002000 	.word	0x40002000
 8004278:	000012bf 	.word	0x000012bf

0800427c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004282:	2308      	movs	r3, #8
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	0018      	movs	r0, r3
 8004288:	2310      	movs	r3, #16
 800428a:	001a      	movs	r2, r3
 800428c:	2100      	movs	r1, #0
 800428e:	f006 ff9f 	bl	800b1d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004292:	003b      	movs	r3, r7
 8004294:	0018      	movs	r0, r3
 8004296:	2308      	movs	r3, #8
 8004298:	001a      	movs	r2, r3
 800429a:	2100      	movs	r1, #0
 800429c:	f006 ff98 	bl	800b1d0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80042a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004320 <MX_TIM15_Init+0xa4>)
 80042a2:	4a20      	ldr	r2, [pc, #128]	@ (8004324 <MX_TIM15_Init+0xa8>)
 80042a4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48-1;
 80042a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004320 <MX_TIM15_Init+0xa4>)
 80042a8:	222f      	movs	r2, #47	@ 0x2f
 80042aa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004320 <MX_TIM15_Init+0xa4>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535-1;
 80042b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004320 <MX_TIM15_Init+0xa4>)
 80042b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004328 <MX_TIM15_Init+0xac>)
 80042b6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042b8:	4b19      	ldr	r3, [pc, #100]	@ (8004320 <MX_TIM15_Init+0xa4>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80042be:	4b18      	ldr	r3, [pc, #96]	@ (8004320 <MX_TIM15_Init+0xa4>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042c4:	4b16      	ldr	r3, [pc, #88]	@ (8004320 <MX_TIM15_Init+0xa4>)
 80042c6:	2280      	movs	r2, #128	@ 0x80
 80042c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80042ca:	4b15      	ldr	r3, [pc, #84]	@ (8004320 <MX_TIM15_Init+0xa4>)
 80042cc:	0018      	movs	r0, r3
 80042ce:	f002 f909 	bl	80064e4 <HAL_TIM_Base_Init>
 80042d2:	1e03      	subs	r3, r0, #0
 80042d4:	d001      	beq.n	80042da <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 80042d6:	f7fe fd1d 	bl	8002d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042da:	2108      	movs	r1, #8
 80042dc:	187b      	adds	r3, r7, r1
 80042de:	2280      	movs	r2, #128	@ 0x80
 80042e0:	0152      	lsls	r2, r2, #5
 80042e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80042e4:	187a      	adds	r2, r7, r1
 80042e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004320 <MX_TIM15_Init+0xa4>)
 80042e8:	0011      	movs	r1, r2
 80042ea:	0018      	movs	r0, r3
 80042ec:	f002 feca 	bl	8007084 <HAL_TIM_ConfigClockSource>
 80042f0:	1e03      	subs	r3, r0, #0
 80042f2:	d001      	beq.n	80042f8 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80042f4:	f7fe fd0e 	bl	8002d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042f8:	003b      	movs	r3, r7
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042fe:	003b      	movs	r3, r7
 8004300:	2200      	movs	r2, #0
 8004302:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004304:	003a      	movs	r2, r7
 8004306:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <MX_TIM15_Init+0xa4>)
 8004308:	0011      	movs	r1, r2
 800430a:	0018      	movs	r0, r3
 800430c:	f003 fbc4 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
 8004310:	1e03      	subs	r3, r0, #0
 8004312:	d001      	beq.n	8004318 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8004314:	f7fe fcfe 	bl	8002d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004318:	46c0      	nop			@ (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b006      	add	sp, #24
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20000424 	.word	0x20000424
 8004324:	40014000 	.word	0x40014000
 8004328:	0000fffe 	.word	0x0000fffe

0800432c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004330:	4b0f      	ldr	r3, [pc, #60]	@ (8004370 <MX_TIM16_Init+0x44>)
 8004332:	4a10      	ldr	r2, [pc, #64]	@ (8004374 <MX_TIM16_Init+0x48>)
 8004334:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48-1;
 8004336:	4b0e      	ldr	r3, [pc, #56]	@ (8004370 <MX_TIM16_Init+0x44>)
 8004338:	222f      	movs	r2, #47	@ 0x2f
 800433a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800433c:	4b0c      	ldr	r3, [pc, #48]	@ (8004370 <MX_TIM16_Init+0x44>)
 800433e:	2200      	movs	r2, #0
 8004340:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535-1;
 8004342:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <MX_TIM16_Init+0x44>)
 8004344:	4a0c      	ldr	r2, [pc, #48]	@ (8004378 <MX_TIM16_Init+0x4c>)
 8004346:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004348:	4b09      	ldr	r3, [pc, #36]	@ (8004370 <MX_TIM16_Init+0x44>)
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800434e:	4b08      	ldr	r3, [pc, #32]	@ (8004370 <MX_TIM16_Init+0x44>)
 8004350:	2200      	movs	r2, #0
 8004352:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004354:	4b06      	ldr	r3, [pc, #24]	@ (8004370 <MX_TIM16_Init+0x44>)
 8004356:	2200      	movs	r2, #0
 8004358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800435a:	4b05      	ldr	r3, [pc, #20]	@ (8004370 <MX_TIM16_Init+0x44>)
 800435c:	0018      	movs	r0, r3
 800435e:	f002 f8c1 	bl	80064e4 <HAL_TIM_Base_Init>
 8004362:	1e03      	subs	r3, r0, #0
 8004364:	d001      	beq.n	800436a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8004366:	f7fe fcd5 	bl	8002d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	2000046c 	.word	0x2000046c
 8004374:	40014400 	.word	0x40014400
 8004378:	0000fffe 	.word	0x0000fffe

0800437c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b08f      	sub	sp, #60	@ 0x3c
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004384:	2324      	movs	r3, #36	@ 0x24
 8004386:	18fb      	adds	r3, r7, r3
 8004388:	0018      	movs	r0, r3
 800438a:	2314      	movs	r3, #20
 800438c:	001a      	movs	r2, r3
 800438e:	2100      	movs	r1, #0
 8004390:	f006 ff1e 	bl	800b1d0 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a6c      	ldr	r2, [pc, #432]	@ (800454c <HAL_TIM_Base_MspInit+0x1d0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d10e      	bne.n	80043bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800439e:	4b6c      	ldr	r3, [pc, #432]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	4b6b      	ldr	r3, [pc, #428]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80043a4:	2180      	movs	r1, #128	@ 0x80
 80043a6:	0109      	lsls	r1, r1, #4
 80043a8:	430a      	orrs	r2, r1
 80043aa:	619a      	str	r2, [r3, #24]
 80043ac:	4b68      	ldr	r3, [pc, #416]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	2380      	movs	r3, #128	@ 0x80
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	4013      	ands	r3, r2
 80043b6:	623b      	str	r3, [r7, #32]
 80043b8:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80043ba:	e0c3      	b.n	8004544 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM3)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a64      	ldr	r2, [pc, #400]	@ (8004554 <HAL_TIM_Base_MspInit+0x1d8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d151      	bne.n	800446a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043c6:	4b62      	ldr	r3, [pc, #392]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80043c8:	69da      	ldr	r2, [r3, #28]
 80043ca:	4b61      	ldr	r3, [pc, #388]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80043cc:	2102      	movs	r1, #2
 80043ce:	430a      	orrs	r2, r1
 80043d0:	61da      	str	r2, [r3, #28]
 80043d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	2202      	movs	r2, #2
 80043d8:	4013      	ands	r3, r2
 80043da:	61fb      	str	r3, [r7, #28]
 80043dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043de:	4b5c      	ldr	r3, [pc, #368]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80043e4:	2180      	movs	r1, #128	@ 0x80
 80043e6:	0309      	lsls	r1, r1, #12
 80043e8:	430a      	orrs	r2, r1
 80043ea:	615a      	str	r2, [r3, #20]
 80043ec:	4b58      	ldr	r3, [pc, #352]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80043ee:	695a      	ldr	r2, [r3, #20]
 80043f0:	2380      	movs	r3, #128	@ 0x80
 80043f2:	031b      	lsls	r3, r3, #12
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80043fa:	2124      	movs	r1, #36	@ 0x24
 80043fc:	187b      	adds	r3, r7, r1
 80043fe:	22b0      	movs	r2, #176	@ 0xb0
 8004400:	0092      	lsls	r2, r2, #2
 8004402:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004404:	000c      	movs	r4, r1
 8004406:	193b      	adds	r3, r7, r4
 8004408:	2202      	movs	r2, #2
 800440a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440c:	193b      	adds	r3, r7, r4
 800440e:	2200      	movs	r2, #0
 8004410:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004412:	193b      	adds	r3, r7, r4
 8004414:	2200      	movs	r2, #0
 8004416:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004418:	193b      	adds	r3, r7, r4
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800441e:	193b      	adds	r3, r7, r4
 8004420:	4a4d      	ldr	r2, [pc, #308]	@ (8004558 <HAL_TIM_Base_MspInit+0x1dc>)
 8004422:	0019      	movs	r1, r3
 8004424:	0010      	movs	r0, r2
 8004426:	f001 f961 	bl	80056ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800442a:	0021      	movs	r1, r4
 800442c:	187b      	adds	r3, r7, r1
 800442e:	2280      	movs	r2, #128	@ 0x80
 8004430:	0052      	lsls	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004434:	187b      	adds	r3, r7, r1
 8004436:	2202      	movs	r2, #2
 8004438:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443a:	187b      	adds	r3, r7, r1
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004440:	187b      	adds	r3, r7, r1
 8004442:	2200      	movs	r2, #0
 8004444:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8004446:	187b      	adds	r3, r7, r1
 8004448:	2200      	movs	r2, #0
 800444a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800444c:	187b      	adds	r3, r7, r1
 800444e:	4a42      	ldr	r2, [pc, #264]	@ (8004558 <HAL_TIM_Base_MspInit+0x1dc>)
 8004450:	0019      	movs	r1, r3
 8004452:	0010      	movs	r0, r2
 8004454:	f001 f94a 	bl	80056ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8004458:	2200      	movs	r2, #0
 800445a:	2102      	movs	r1, #2
 800445c:	2010      	movs	r0, #16
 800445e:	f000 fefd 	bl	800525c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004462:	2010      	movs	r0, #16
 8004464:	f000 ff0f 	bl	8005286 <HAL_NVIC_EnableIRQ>
}
 8004468:	e06c      	b.n	8004544 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM6)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a3b      	ldr	r2, [pc, #236]	@ (800455c <HAL_TIM_Base_MspInit+0x1e0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d114      	bne.n	800449e <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004474:	4b36      	ldr	r3, [pc, #216]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	4b35      	ldr	r3, [pc, #212]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 800447a:	2110      	movs	r1, #16
 800447c:	430a      	orrs	r2, r1
 800447e:	61da      	str	r2, [r3, #28]
 8004480:	4b33      	ldr	r3, [pc, #204]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	2210      	movs	r2, #16
 8004486:	4013      	ands	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 800448c:	2200      	movs	r2, #0
 800448e:	2101      	movs	r1, #1
 8004490:	2011      	movs	r0, #17
 8004492:	f000 fee3 	bl	800525c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004496:	2011      	movs	r0, #17
 8004498:	f000 fef5 	bl	8005286 <HAL_NVIC_EnableIRQ>
}
 800449c:	e052      	b.n	8004544 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM14)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004560 <HAL_TIM_Base_MspInit+0x1e4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d116      	bne.n	80044d6 <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80044a8:	4b29      	ldr	r3, [pc, #164]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	4b28      	ldr	r3, [pc, #160]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80044ae:	2180      	movs	r1, #128	@ 0x80
 80044b0:	0049      	lsls	r1, r1, #1
 80044b2:	430a      	orrs	r2, r1
 80044b4:	61da      	str	r2, [r3, #28]
 80044b6:	4b26      	ldr	r3, [pc, #152]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	2380      	movs	r3, #128	@ 0x80
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4013      	ands	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 80044c4:	2200      	movs	r2, #0
 80044c6:	2101      	movs	r1, #1
 80044c8:	2013      	movs	r0, #19
 80044ca:	f000 fec7 	bl	800525c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80044ce:	2013      	movs	r0, #19
 80044d0:	f000 fed9 	bl	8005286 <HAL_NVIC_EnableIRQ>
}
 80044d4:	e036      	b.n	8004544 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM15)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a22      	ldr	r2, [pc, #136]	@ (8004564 <HAL_TIM_Base_MspInit+0x1e8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d116      	bne.n	800450e <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80044e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80044e6:	2180      	movs	r1, #128	@ 0x80
 80044e8:	0249      	lsls	r1, r1, #9
 80044ea:	430a      	orrs	r2, r1
 80044ec:	619a      	str	r2, [r3, #24]
 80044ee:	4b18      	ldr	r3, [pc, #96]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	2380      	movs	r3, #128	@ 0x80
 80044f4:	025b      	lsls	r3, r3, #9
 80044f6:	4013      	ands	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80044fc:	2200      	movs	r2, #0
 80044fe:	2100      	movs	r1, #0
 8004500:	2014      	movs	r0, #20
 8004502:	f000 feab 	bl	800525c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004506:	2014      	movs	r0, #20
 8004508:	f000 febd 	bl	8005286 <HAL_NVIC_EnableIRQ>
}
 800450c:	e01a      	b.n	8004544 <HAL_TIM_Base_MspInit+0x1c8>
  else if(tim_baseHandle->Instance==TIM16)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a15      	ldr	r2, [pc, #84]	@ (8004568 <HAL_TIM_Base_MspInit+0x1ec>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d115      	bne.n	8004544 <HAL_TIM_Base_MspInit+0x1c8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004518:	4b0d      	ldr	r3, [pc, #52]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	4b0c      	ldr	r3, [pc, #48]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 800451e:	2180      	movs	r1, #128	@ 0x80
 8004520:	0289      	lsls	r1, r1, #10
 8004522:	430a      	orrs	r2, r1
 8004524:	619a      	str	r2, [r3, #24]
 8004526:	4b0a      	ldr	r3, [pc, #40]	@ (8004550 <HAL_TIM_Base_MspInit+0x1d4>)
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	2380      	movs	r3, #128	@ 0x80
 800452c:	029b      	lsls	r3, r3, #10
 800452e:	4013      	ands	r3, r2
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004534:	2200      	movs	r2, #0
 8004536:	2100      	movs	r1, #0
 8004538:	2015      	movs	r0, #21
 800453a:	f000 fe8f 	bl	800525c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800453e:	2015      	movs	r0, #21
 8004540:	f000 fea1 	bl	8005286 <HAL_NVIC_EnableIRQ>
}
 8004544:	46c0      	nop			@ (mov r8, r8)
 8004546:	46bd      	mov	sp, r7
 8004548:	b00f      	add	sp, #60	@ 0x3c
 800454a:	bd90      	pop	{r4, r7, pc}
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40021000 	.word	0x40021000
 8004554:	40000400 	.word	0x40000400
 8004558:	48000800 	.word	0x48000800
 800455c:	40001000 	.word	0x40001000
 8004560:	40002000 	.word	0x40002000
 8004564:	40014000 	.word	0x40014000
 8004568:	40014400 	.word	0x40014400

0800456c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800456c:	b590      	push	{r4, r7, lr}
 800456e:	b089      	sub	sp, #36	@ 0x24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004574:	240c      	movs	r4, #12
 8004576:	193b      	adds	r3, r7, r4
 8004578:	0018      	movs	r0, r3
 800457a:	2314      	movs	r3, #20
 800457c:	001a      	movs	r2, r3
 800457e:	2100      	movs	r1, #0
 8004580:	f006 fe26 	bl	800b1d0 <memset>
  if(timHandle->Instance==TIM1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a16      	ldr	r2, [pc, #88]	@ (80045e4 <HAL_TIM_MspPostInit+0x78>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d125      	bne.n	80045da <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800458e:	4b16      	ldr	r3, [pc, #88]	@ (80045e8 <HAL_TIM_MspPostInit+0x7c>)
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	4b15      	ldr	r3, [pc, #84]	@ (80045e8 <HAL_TIM_MspPostInit+0x7c>)
 8004594:	2180      	movs	r1, #128	@ 0x80
 8004596:	0289      	lsls	r1, r1, #10
 8004598:	430a      	orrs	r2, r1
 800459a:	615a      	str	r2, [r3, #20]
 800459c:	4b12      	ldr	r3, [pc, #72]	@ (80045e8 <HAL_TIM_MspPostInit+0x7c>)
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	029b      	lsls	r3, r3, #10
 80045a4:	4013      	ands	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80045aa:	193b      	adds	r3, r7, r4
 80045ac:	22e0      	movs	r2, #224	@ 0xe0
 80045ae:	00d2      	lsls	r2, r2, #3
 80045b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b2:	0021      	movs	r1, r4
 80045b4:	187b      	adds	r3, r7, r1
 80045b6:	2202      	movs	r2, #2
 80045b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ba:	187b      	adds	r3, r7, r1
 80045bc:	2200      	movs	r2, #0
 80045be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c0:	187b      	adds	r3, r7, r1
 80045c2:	2200      	movs	r2, #0
 80045c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80045c6:	187b      	adds	r3, r7, r1
 80045c8:	2202      	movs	r2, #2
 80045ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045cc:	187a      	adds	r2, r7, r1
 80045ce:	2390      	movs	r3, #144	@ 0x90
 80045d0:	05db      	lsls	r3, r3, #23
 80045d2:	0011      	movs	r1, r2
 80045d4:	0018      	movs	r0, r3
 80045d6:	f001 f889 	bl	80056ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80045da:	46c0      	nop			@ (mov r8, r8)
 80045dc:	46bd      	mov	sp, r7
 80045de:	b009      	add	sp, #36	@ 0x24
 80045e0:	bd90      	pop	{r4, r7, pc}
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	40012c00 	.word	0x40012c00
 80045e8:	40021000 	.word	0x40021000

080045ec <delay_us>:

/* USER CODE BEGIN 1 */


void delay_us(uint16_t us)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	0002      	movs	r2, r0
 80045f4:	1dbb      	adds	r3, r7, #6
 80045f6:	801a      	strh	r2, [r3, #0]
	us = 0xffff - us-10;
 80045f8:	1dbb      	adds	r3, r7, #6
 80045fa:	1dba      	adds	r2, r7, #6
 80045fc:	8812      	ldrh	r2, [r2, #0]
 80045fe:	210b      	movs	r1, #11
 8004600:	4249      	negs	r1, r1
 8004602:	1a8a      	subs	r2, r1, r2
 8004604:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim15, us);//the auto reload is set to 65535
 8004606:	4b0e      	ldr	r3, [pc, #56]	@ (8004640 <delay_us+0x54>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	1dba      	adds	r2, r7, #6
 800460c:	8812      	ldrh	r2, [r2, #0]
 800460e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim15);
 8004610:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <delay_us+0x54>)
 8004612:	0018      	movs	r0, r3
 8004614:	f001 ffb6 	bl	8006584 <HAL_TIM_Base_Start>
	while(us<0xffff-10)
 8004618:	e004      	b.n	8004624 <delay_us+0x38>
	{
		us = __HAL_TIM_GET_COUNTER(&htim15);
 800461a:	4b09      	ldr	r3, [pc, #36]	@ (8004640 <delay_us+0x54>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004620:	1dbb      	adds	r3, r7, #6
 8004622:	801a      	strh	r2, [r3, #0]
	while(us<0xffff-10)
 8004624:	1dbb      	adds	r3, r7, #6
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	4a06      	ldr	r2, [pc, #24]	@ (8004644 <delay_us+0x58>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d9f5      	bls.n	800461a <delay_us+0x2e>
	}
	HAL_TIM_Base_Stop(&htim15);
 800462e:	4b04      	ldr	r3, [pc, #16]	@ (8004640 <delay_us+0x54>)
 8004630:	0018      	movs	r0, r3
 8004632:	f001 ffeb 	bl	800660c <HAL_TIM_Base_Stop>
}
 8004636:	46c0      	nop			@ (mov r8, r8)
 8004638:	46bd      	mov	sp, r7
 800463a:	b002      	add	sp, #8
 800463c:	bd80      	pop	{r7, pc}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	20000424 	.word	0x20000424
 8004644:	0000fff4 	.word	0x0000fff4

08004648 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800464c:	4b16      	ldr	r3, [pc, #88]	@ (80046a8 <MX_USART1_UART_Init+0x60>)
 800464e:	4a17      	ldr	r2, [pc, #92]	@ (80046ac <MX_USART1_UART_Init+0x64>)
 8004650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004652:	4b15      	ldr	r3, [pc, #84]	@ (80046a8 <MX_USART1_UART_Init+0x60>)
 8004654:	22e1      	movs	r2, #225	@ 0xe1
 8004656:	0252      	lsls	r2, r2, #9
 8004658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800465a:	4b13      	ldr	r3, [pc, #76]	@ (80046a8 <MX_USART1_UART_Init+0x60>)
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004660:	4b11      	ldr	r3, [pc, #68]	@ (80046a8 <MX_USART1_UART_Init+0x60>)
 8004662:	2200      	movs	r2, #0
 8004664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004666:	4b10      	ldr	r3, [pc, #64]	@ (80046a8 <MX_USART1_UART_Init+0x60>)
 8004668:	2200      	movs	r2, #0
 800466a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800466c:	4b0e      	ldr	r3, [pc, #56]	@ (80046a8 <MX_USART1_UART_Init+0x60>)
 800466e:	220c      	movs	r2, #12
 8004670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004672:	4b0d      	ldr	r3, [pc, #52]	@ (80046a8 <MX_USART1_UART_Init+0x60>)
 8004674:	2200      	movs	r2, #0
 8004676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004678:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <MX_USART1_UART_Init+0x60>)
 800467a:	2200      	movs	r2, #0
 800467c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800467e:	4b0a      	ldr	r3, [pc, #40]	@ (80046a8 <MX_USART1_UART_Init+0x60>)
 8004680:	2200      	movs	r2, #0
 8004682:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004684:	4b08      	ldr	r3, [pc, #32]	@ (80046a8 <MX_USART1_UART_Init+0x60>)
 8004686:	2208      	movs	r2, #8
 8004688:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800468a:	4b07      	ldr	r3, [pc, #28]	@ (80046a8 <MX_USART1_UART_Init+0x60>)
 800468c:	2280      	movs	r2, #128	@ 0x80
 800468e:	0212      	lsls	r2, r2, #8
 8004690:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004692:	4b05      	ldr	r3, [pc, #20]	@ (80046a8 <MX_USART1_UART_Init+0x60>)
 8004694:	0018      	movs	r0, r3
 8004696:	f003 fac5 	bl	8007c24 <HAL_UART_Init>
 800469a:	1e03      	subs	r3, r0, #0
 800469c:	d001      	beq.n	80046a2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800469e:	f7fe fb39 	bl	8002d14 <Error_Handler>
  {
    Error_Handler();
  }*/
  /* USER CODE END USART1_Init 2 */

}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	200006b8 	.word	0x200006b8
 80046ac:	40013800 	.word	0x40013800

080046b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b08b      	sub	sp, #44	@ 0x2c
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b8:	2414      	movs	r4, #20
 80046ba:	193b      	adds	r3, r7, r4
 80046bc:	0018      	movs	r0, r3
 80046be:	2314      	movs	r3, #20
 80046c0:	001a      	movs	r2, r3
 80046c2:	2100      	movs	r1, #0
 80046c4:	f006 fd84 	bl	800b1d0 <memset>
  if(uartHandle->Instance==USART1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a33      	ldr	r2, [pc, #204]	@ (800479c <HAL_UART_MspInit+0xec>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d15f      	bne.n	8004792 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046d2:	4b33      	ldr	r3, [pc, #204]	@ (80047a0 <HAL_UART_MspInit+0xf0>)
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	4b32      	ldr	r3, [pc, #200]	@ (80047a0 <HAL_UART_MspInit+0xf0>)
 80046d8:	2180      	movs	r1, #128	@ 0x80
 80046da:	01c9      	lsls	r1, r1, #7
 80046dc:	430a      	orrs	r2, r1
 80046de:	619a      	str	r2, [r3, #24]
 80046e0:	4b2f      	ldr	r3, [pc, #188]	@ (80047a0 <HAL_UART_MspInit+0xf0>)
 80046e2:	699a      	ldr	r2, [r3, #24]
 80046e4:	2380      	movs	r3, #128	@ 0x80
 80046e6:	01db      	lsls	r3, r3, #7
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ee:	4b2c      	ldr	r3, [pc, #176]	@ (80047a0 <HAL_UART_MspInit+0xf0>)
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	4b2b      	ldr	r3, [pc, #172]	@ (80047a0 <HAL_UART_MspInit+0xf0>)
 80046f4:	2180      	movs	r1, #128	@ 0x80
 80046f6:	02c9      	lsls	r1, r1, #11
 80046f8:	430a      	orrs	r2, r1
 80046fa:	615a      	str	r2, [r3, #20]
 80046fc:	4b28      	ldr	r3, [pc, #160]	@ (80047a0 <HAL_UART_MspInit+0xf0>)
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	2380      	movs	r3, #128	@ 0x80
 8004702:	02db      	lsls	r3, r3, #11
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800470a:	0021      	movs	r1, r4
 800470c:	187b      	adds	r3, r7, r1
 800470e:	22c0      	movs	r2, #192	@ 0xc0
 8004710:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004712:	187b      	adds	r3, r7, r1
 8004714:	2202      	movs	r2, #2
 8004716:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004718:	187b      	adds	r3, r7, r1
 800471a:	2200      	movs	r2, #0
 800471c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800471e:	187b      	adds	r3, r7, r1
 8004720:	2203      	movs	r2, #3
 8004722:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004724:	187b      	adds	r3, r7, r1
 8004726:	2200      	movs	r2, #0
 8004728:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800472a:	187b      	adds	r3, r7, r1
 800472c:	4a1d      	ldr	r2, [pc, #116]	@ (80047a4 <HAL_UART_MspInit+0xf4>)
 800472e:	0019      	movs	r1, r3
 8004730:	0010      	movs	r0, r2
 8004732:	f000 ffdb 	bl	80056ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8004736:	4b1c      	ldr	r3, [pc, #112]	@ (80047a8 <HAL_UART_MspInit+0xf8>)
 8004738:	4a1c      	ldr	r2, [pc, #112]	@ (80047ac <HAL_UART_MspInit+0xfc>)
 800473a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800473c:	4b1a      	ldr	r3, [pc, #104]	@ (80047a8 <HAL_UART_MspInit+0xf8>)
 800473e:	2210      	movs	r2, #16
 8004740:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004742:	4b19      	ldr	r3, [pc, #100]	@ (80047a8 <HAL_UART_MspInit+0xf8>)
 8004744:	2200      	movs	r2, #0
 8004746:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004748:	4b17      	ldr	r3, [pc, #92]	@ (80047a8 <HAL_UART_MspInit+0xf8>)
 800474a:	2280      	movs	r2, #128	@ 0x80
 800474c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800474e:	4b16      	ldr	r3, [pc, #88]	@ (80047a8 <HAL_UART_MspInit+0xf8>)
 8004750:	2200      	movs	r2, #0
 8004752:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004754:	4b14      	ldr	r3, [pc, #80]	@ (80047a8 <HAL_UART_MspInit+0xf8>)
 8004756:	2200      	movs	r2, #0
 8004758:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800475a:	4b13      	ldr	r3, [pc, #76]	@ (80047a8 <HAL_UART_MspInit+0xf8>)
 800475c:	2200      	movs	r2, #0
 800475e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004760:	4b11      	ldr	r3, [pc, #68]	@ (80047a8 <HAL_UART_MspInit+0xf8>)
 8004762:	2200      	movs	r2, #0
 8004764:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004766:	4b10      	ldr	r3, [pc, #64]	@ (80047a8 <HAL_UART_MspInit+0xf8>)
 8004768:	0018      	movs	r0, r3
 800476a:	f000 fda9 	bl	80052c0 <HAL_DMA_Init>
 800476e:	1e03      	subs	r3, r0, #0
 8004770:	d001      	beq.n	8004776 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004772:	f7fe facf 	bl	8002d14 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a0b      	ldr	r2, [pc, #44]	@ (80047a8 <HAL_UART_MspInit+0xf8>)
 800477a:	671a      	str	r2, [r3, #112]	@ 0x70
 800477c:	4b0a      	ldr	r3, [pc, #40]	@ (80047a8 <HAL_UART_MspInit+0xf8>)
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004782:	2200      	movs	r2, #0
 8004784:	2100      	movs	r1, #0
 8004786:	201b      	movs	r0, #27
 8004788:	f000 fd68 	bl	800525c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800478c:	201b      	movs	r0, #27
 800478e:	f000 fd7a 	bl	8005286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004792:	46c0      	nop			@ (mov r8, r8)
 8004794:	46bd      	mov	sp, r7
 8004796:	b00b      	add	sp, #44	@ 0x2c
 8004798:	bd90      	pop	{r4, r7, pc}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	40013800 	.word	0x40013800
 80047a0:	40021000 	.word	0x40021000
 80047a4:	48000400 	.word	0x48000400
 80047a8:	20000740 	.word	0x20000740
 80047ac:	4002001c 	.word	0x4002001c

080047b0 <BT_PWM_handle>:
  }
}

/* USER CODE BEGIN 1 */
void BT_PWM_handle(char flag)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	0002      	movs	r2, r0
 80047b8:	1dfb      	adds	r3, r7, #7
 80047ba:	701a      	strb	r2, [r3, #0]
	static signed char ch1=0;
	if(flag == TURE)
 80047bc:	1dfb      	adds	r3, r7, #7
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d110      	bne.n	80047e6 <BT_PWM_handle+0x36>
	{
		ch1 = ch1+1>=10? 10:ch1+1;
 80047c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004840 <BT_PWM_handle+0x90>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	b25b      	sxtb	r3, r3
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	dc07      	bgt.n	80047de <BT_PWM_handle+0x2e>
 80047ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004840 <BT_PWM_handle+0x90>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b25b      	sxtb	r3, r3
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	3301      	adds	r3, #1
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	b25a      	sxtb	r2, r3
 80047dc:	e000      	b.n	80047e0 <BT_PWM_handle+0x30>
 80047de:	220a      	movs	r2, #10
 80047e0:	4b17      	ldr	r3, [pc, #92]	@ (8004840 <BT_PWM_handle+0x90>)
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	e00f      	b.n	8004806 <BT_PWM_handle+0x56>
	}
	else
	{
		ch1 = ch1-1<=0?0:ch1-1;
 80047e6:	4b16      	ldr	r3, [pc, #88]	@ (8004840 <BT_PWM_handle+0x90>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	b25b      	sxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	dd07      	ble.n	8004800 <BT_PWM_handle+0x50>
 80047f0:	4b13      	ldr	r3, [pc, #76]	@ (8004840 <BT_PWM_handle+0x90>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	b25b      	sxtb	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	b25a      	sxtb	r2, r3
 80047fe:	e000      	b.n	8004802 <BT_PWM_handle+0x52>
 8004800:	2200      	movs	r2, #0
 8004802:	4b0f      	ldr	r3, [pc, #60]	@ (8004840 <BT_PWM_handle+0x90>)
 8004804:	701a      	strb	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ch1);
 8004806:	4b0e      	ldr	r3, [pc, #56]	@ (8004840 <BT_PWM_handle+0x90>)
 8004808:	2200      	movs	r2, #0
 800480a:	569a      	ldrsb	r2, [r3, r2]
 800480c:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <BT_PWM_handle+0x94>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ch1);
 8004812:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <BT_PWM_handle+0x90>)
 8004814:	2200      	movs	r2, #0
 8004816:	569a      	ldrsb	r2, [r3, r2]
 8004818:	4b0a      	ldr	r3, [pc, #40]	@ (8004844 <BT_PWM_handle+0x94>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ch1);
 800481e:	4b08      	ldr	r3, [pc, #32]	@ (8004840 <BT_PWM_handle+0x90>)
 8004820:	2200      	movs	r2, #0
 8004822:	569a      	ldrsb	r2, [r3, r2]
 8004824:	4b07      	ldr	r3, [pc, #28]	@ (8004844 <BT_PWM_handle+0x94>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ch1);
 800482a:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <BT_PWM_handle+0x90>)
 800482c:	2200      	movs	r2, #0
 800482e:	569a      	ldrsb	r2, [r3, r2]
 8004830:	4b04      	ldr	r3, [pc, #16]	@ (8004844 <BT_PWM_handle+0x94>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004836:	46c0      	nop			@ (mov r8, r8)
 8004838:	46bd      	mov	sp, r7
 800483a:	b002      	add	sp, #8
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			@ (mov r8, r8)
 8004840:	20000784 	.word	0x20000784
 8004844:	2000034c 	.word	0x2000034c

08004848 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004848:	480d      	ldr	r0, [pc, #52]	@ (8004880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800484a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800484c:	f7ff fb42 	bl	8003ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004850:	480c      	ldr	r0, [pc, #48]	@ (8004884 <LoopForever+0x6>)
  ldr r1, =_edata
 8004852:	490d      	ldr	r1, [pc, #52]	@ (8004888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004854:	4a0d      	ldr	r2, [pc, #52]	@ (800488c <LoopForever+0xe>)
  movs r3, #0
 8004856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004858:	e002      	b.n	8004860 <LoopCopyDataInit>

0800485a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800485a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800485c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800485e:	3304      	adds	r3, #4

08004860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004864:	d3f9      	bcc.n	800485a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004866:	4a0a      	ldr	r2, [pc, #40]	@ (8004890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004868:	4c0a      	ldr	r4, [pc, #40]	@ (8004894 <LoopForever+0x16>)
  movs r3, #0
 800486a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800486c:	e001      	b.n	8004872 <LoopFillZerobss>

0800486e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800486e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004870:	3204      	adds	r2, #4

08004872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004874:	d3fb      	bcc.n	800486e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004876:	f006 fd1d 	bl	800b2b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800487a:	f7fe f91f 	bl	8002abc <main>

0800487e <LoopForever>:

LoopForever:
    b LoopForever
 800487e:	e7fe      	b.n	800487e <LoopForever>
  ldr   r0, =_estack
 8004880:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004888:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800488c:	0800ebbc 	.word	0x0800ebbc
  ldr r2, =_sbss
 8004890:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004894:	200008d8 	.word	0x200008d8

08004898 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004898:	e7fe      	b.n	8004898 <ADC1_IRQHandler>
	...

0800489c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048a0:	4b07      	ldr	r3, [pc, #28]	@ (80048c0 <HAL_Init+0x24>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b06      	ldr	r3, [pc, #24]	@ (80048c0 <HAL_Init+0x24>)
 80048a6:	2110      	movs	r1, #16
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80048ac:	2003      	movs	r0, #3
 80048ae:	f000 f809 	bl	80048c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048b2:	f7ff f82f 	bl	8003914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	0018      	movs	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	40022000 	.word	0x40022000

080048c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048cc:	4b14      	ldr	r3, [pc, #80]	@ (8004920 <HAL_InitTick+0x5c>)
 80048ce:	681c      	ldr	r4, [r3, #0]
 80048d0:	4b14      	ldr	r3, [pc, #80]	@ (8004924 <HAL_InitTick+0x60>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	0019      	movs	r1, r3
 80048d6:	23fa      	movs	r3, #250	@ 0xfa
 80048d8:	0098      	lsls	r0, r3, #2
 80048da:	f7fb fc3b 	bl	8000154 <__udivsi3>
 80048de:	0003      	movs	r3, r0
 80048e0:	0019      	movs	r1, r3
 80048e2:	0020      	movs	r0, r4
 80048e4:	f7fb fc36 	bl	8000154 <__udivsi3>
 80048e8:	0003      	movs	r3, r0
 80048ea:	0018      	movs	r0, r3
 80048ec:	f000 fcdb 	bl	80052a6 <HAL_SYSTICK_Config>
 80048f0:	1e03      	subs	r3, r0, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e00f      	b.n	8004918 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d80b      	bhi.n	8004916 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	2301      	movs	r3, #1
 8004902:	425b      	negs	r3, r3
 8004904:	2200      	movs	r2, #0
 8004906:	0018      	movs	r0, r3
 8004908:	f000 fca8 	bl	800525c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800490c:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <HAL_InitTick+0x64>)
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b003      	add	sp, #12
 800491e:	bd90      	pop	{r4, r7, pc}
 8004920:	2000002c 	.word	0x2000002c
 8004924:	20000034 	.word	0x20000034
 8004928:	20000030 	.word	0x20000030

0800492c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004930:	4b05      	ldr	r3, [pc, #20]	@ (8004948 <HAL_IncTick+0x1c>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	001a      	movs	r2, r3
 8004936:	4b05      	ldr	r3, [pc, #20]	@ (800494c <HAL_IncTick+0x20>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	18d2      	adds	r2, r2, r3
 800493c:	4b03      	ldr	r3, [pc, #12]	@ (800494c <HAL_IncTick+0x20>)
 800493e:	601a      	str	r2, [r3, #0]
}
 8004940:	46c0      	nop			@ (mov r8, r8)
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			@ (mov r8, r8)
 8004948:	20000034 	.word	0x20000034
 800494c:	20000788 	.word	0x20000788

08004950 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  return uwTick;
 8004954:	4b02      	ldr	r3, [pc, #8]	@ (8004960 <HAL_GetTick+0x10>)
 8004956:	681b      	ldr	r3, [r3, #0]
}
 8004958:	0018      	movs	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			@ (mov r8, r8)
 8004960:	20000788 	.word	0x20000788

08004964 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800496c:	230f      	movs	r3, #15
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	2200      	movs	r2, #0
 8004972:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e125      	b.n	8004bce <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2234      	movs	r2, #52	@ 0x34
 8004994:	2100      	movs	r1, #0
 8004996:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	0018      	movs	r0, r3
 800499c:	f7fe fd12 	bl	80033c4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a4:	2210      	movs	r2, #16
 80049a6:	4013      	ands	r3, r2
 80049a8:	d000      	beq.n	80049ac <HAL_ADC_Init+0x48>
 80049aa:	e103      	b.n	8004bb4 <HAL_ADC_Init+0x250>
 80049ac:	230f      	movs	r3, #15
 80049ae:	18fb      	adds	r3, r7, r3
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d000      	beq.n	80049b8 <HAL_ADC_Init+0x54>
 80049b6:	e0fd      	b.n	8004bb4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2204      	movs	r2, #4
 80049c0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80049c2:	d000      	beq.n	80049c6 <HAL_ADC_Init+0x62>
 80049c4:	e0f6      	b.n	8004bb4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ca:	4a83      	ldr	r2, [pc, #524]	@ (8004bd8 <HAL_ADC_Init+0x274>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	2202      	movs	r2, #2
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2203      	movs	r2, #3
 80049de:	4013      	ands	r3, r2
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d112      	bne.n	8004a0a <HAL_ADC_Init+0xa6>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2201      	movs	r2, #1
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d009      	beq.n	8004a06 <HAL_ADC_Init+0xa2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	2380      	movs	r3, #128	@ 0x80
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	401a      	ands	r2, r3
 80049fe:	2380      	movs	r3, #128	@ 0x80
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d101      	bne.n	8004a0a <HAL_ADC_Init+0xa6>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <HAL_ADC_Init+0xa8>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d116      	bne.n	8004a3e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	2218      	movs	r2, #24
 8004a18:	4393      	bics	r3, r2
 8004a1a:	0019      	movs	r1, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	0899      	lsrs	r1, r3, #2
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4964      	ldr	r1, [pc, #400]	@ (8004bdc <HAL_ADC_Init+0x278>)
 8004a4a:	400a      	ands	r2, r1
 8004a4c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	7e1b      	ldrb	r3, [r3, #24]
 8004a52:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	7e5b      	ldrb	r3, [r3, #25]
 8004a58:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	7e9b      	ldrb	r3, [r3, #26]
 8004a60:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004a62:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d002      	beq.n	8004a72 <HAL_ADC_Init+0x10e>
 8004a6c:	2380      	movs	r3, #128	@ 0x80
 8004a6e:	015b      	lsls	r3, r3, #5
 8004a70:	e000      	b.n	8004a74 <HAL_ADC_Init+0x110>
 8004a72:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004a74:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004a7a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d101      	bne.n	8004a88 <HAL_ADC_Init+0x124>
 8004a84:	2304      	movs	r3, #4
 8004a86:	e000      	b.n	8004a8a <HAL_ADC_Init+0x126>
 8004a88:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004a8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2124      	movs	r1, #36	@ 0x24
 8004a90:	5c5b      	ldrb	r3, [r3, r1]
 8004a92:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004a94:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	7edb      	ldrb	r3, [r3, #27]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d115      	bne.n	8004ad0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	7e9b      	ldrb	r3, [r3, #26]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d105      	bne.n	8004ab8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2280      	movs	r2, #128	@ 0x80
 8004ab0:	0252      	lsls	r2, r2, #9
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	e00b      	b.n	8004ad0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004abc:	2220      	movs	r2, #32
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac8:	2201      	movs	r2, #1
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	23c2      	movs	r3, #194	@ 0xc2
 8004ad6:	33ff      	adds	r3, #255	@ 0xff
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d007      	beq.n	8004aec <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68d9      	ldr	r1, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b00:	2380      	movs	r3, #128	@ 0x80
 8004b02:	055b      	lsls	r3, r3, #21
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d01b      	beq.n	8004b40 <HAL_ADC_Init+0x1dc>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d017      	beq.n	8004b40 <HAL_ADC_Init+0x1dc>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d013      	beq.n	8004b40 <HAL_ADC_Init+0x1dc>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d00f      	beq.n	8004b40 <HAL_ADC_Init+0x1dc>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d00b      	beq.n	8004b40 <HAL_ADC_Init+0x1dc>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2c:	2b05      	cmp	r3, #5
 8004b2e:	d007      	beq.n	8004b40 <HAL_ADC_Init+0x1dc>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	2b06      	cmp	r3, #6
 8004b36:	d003      	beq.n	8004b40 <HAL_ADC_Init+0x1dc>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3c:	2b07      	cmp	r3, #7
 8004b3e:	d112      	bne.n	8004b66 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2107      	movs	r1, #7
 8004b4c:	438a      	bics	r2, r1
 8004b4e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6959      	ldr	r1, [r3, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	2207      	movs	r2, #7
 8004b5c:	401a      	ands	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004be0 <HAL_ADC_Init+0x27c>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d10b      	bne.n	8004b8e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	2203      	movs	r2, #3
 8004b82:	4393      	bics	r3, r2
 8004b84:	2201      	movs	r2, #1
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004b8c:	e01c      	b.n	8004bc8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b92:	2212      	movs	r2, #18
 8004b94:	4393      	bics	r3, r2
 8004b96:	2210      	movs	r2, #16
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004baa:	230f      	movs	r3, #15
 8004bac:	18fb      	adds	r3, r7, r3
 8004bae:	2201      	movs	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004bb2:	e009      	b.n	8004bc8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb8:	2210      	movs	r2, #16
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004bc0:	230f      	movs	r3, #15
 8004bc2:	18fb      	adds	r3, r7, r3
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004bc8:	230f      	movs	r3, #15
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	781b      	ldrb	r3, [r3, #0]
}
 8004bce:	0018      	movs	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
 8004bd8:	fffffefd 	.word	0xfffffefd
 8004bdc:	fffe0219 	.word	0xfffe0219
 8004be0:	833fffe7 	.word	0x833fffe7

08004be4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004be4:	b590      	push	{r4, r7, lr}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bf0:	2317      	movs	r3, #23
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	4013      	ands	r3, r2
 8004c02:	d15e      	bne.n	8004cc2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2234      	movs	r2, #52	@ 0x34
 8004c08:	5c9b      	ldrb	r3, [r3, r2]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_ADC_Start_DMA+0x2e>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e05e      	b.n	8004cd0 <HAL_ADC_Start_DMA+0xec>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2234      	movs	r2, #52	@ 0x34
 8004c16:	2101      	movs	r1, #1
 8004c18:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	7e5b      	ldrb	r3, [r3, #25]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d007      	beq.n	8004c32 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004c22:	2317      	movs	r3, #23
 8004c24:	18fc      	adds	r4, r7, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 f963 	bl	8004ef4 <ADC_Enable>
 8004c2e:	0003      	movs	r3, r0
 8004c30:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004c32:	2317      	movs	r3, #23
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d146      	bne.n	8004cca <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c40:	4a25      	ldr	r2, [pc, #148]	@ (8004cd8 <HAL_ADC_Start_DMA+0xf4>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	2280      	movs	r2, #128	@ 0x80
 8004c46:	0052      	lsls	r2, r2, #1
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2234      	movs	r2, #52	@ 0x34
 8004c58:	2100      	movs	r1, #0
 8004c5a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c60:	4a1e      	ldr	r2, [pc, #120]	@ (8004cdc <HAL_ADC_Start_DMA+0xf8>)
 8004c62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c68:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce0 <HAL_ADC_Start_DMA+0xfc>)
 8004c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c70:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce4 <HAL_ADC_Start_DMA+0x100>)
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	221c      	movs	r2, #28
 8004c7a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2110      	movs	r1, #16
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2101      	movs	r1, #1
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3340      	adds	r3, #64	@ 0x40
 8004ca6:	0019      	movs	r1, r3
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f000 fb50 	bl	8005350 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2104      	movs	r1, #4
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	609a      	str	r2, [r3, #8]
 8004cc0:	e003      	b.n	8004cca <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004cc2:	2317      	movs	r3, #23
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004cca:	2317      	movs	r3, #23
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	781b      	ldrb	r3, [r3, #0]
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b007      	add	sp, #28
 8004cd6:	bd90      	pop	{r4, r7, pc}
 8004cd8:	fffff0fe 	.word	0xfffff0fe
 8004cdc:	08004ffd 	.word	0x08004ffd
 8004ce0:	080050b1 	.word	0x080050b1
 8004ce4:	080050cf 	.word	0x080050cf

08004ce8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004cf0:	46c0      	nop			@ (mov r8, r8)
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b002      	add	sp, #8
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004d00:	46c0      	nop			@ (mov r8, r8)
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b002      	add	sp, #8
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d12:	230f      	movs	r3, #15
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d22:	2380      	movs	r3, #128	@ 0x80
 8004d24:	055b      	lsls	r3, r3, #21
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d011      	beq.n	8004d4e <HAL_ADC_ConfigChannel+0x46>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d00d      	beq.n	8004d4e <HAL_ADC_ConfigChannel+0x46>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d009      	beq.n	8004d4e <HAL_ADC_ConfigChannel+0x46>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d005      	beq.n	8004d4e <HAL_ADC_ConfigChannel+0x46>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d001      	beq.n	8004d4e <HAL_ADC_ConfigChannel+0x46>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2234      	movs	r2, #52	@ 0x34
 8004d52:	5c9b      	ldrb	r3, [r3, r2]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_ADC_ConfigChannel+0x54>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e0bb      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x1cc>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2234      	movs	r2, #52	@ 0x34
 8004d60:	2101      	movs	r1, #1
 8004d62:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2204      	movs	r2, #4
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	d000      	beq.n	8004d72 <HAL_ADC_ConfigChannel+0x6a>
 8004d70:	e09f      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	4a59      	ldr	r2, [pc, #356]	@ (8004edc <HAL_ADC_ConfigChannel+0x1d4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d100      	bne.n	8004d7e <HAL_ADC_ConfigChannel+0x76>
 8004d7c:	e077      	b.n	8004e6e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	409a      	lsls	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d98:	2380      	movs	r3, #128	@ 0x80
 8004d9a:	055b      	lsls	r3, r3, #21
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d037      	beq.n	8004e10 <HAL_ADC_ConfigChannel+0x108>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d033      	beq.n	8004e10 <HAL_ADC_ConfigChannel+0x108>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d02f      	beq.n	8004e10 <HAL_ADC_ConfigChannel+0x108>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d02b      	beq.n	8004e10 <HAL_ADC_ConfigChannel+0x108>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d027      	beq.n	8004e10 <HAL_ADC_ConfigChannel+0x108>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	2b05      	cmp	r3, #5
 8004dc6:	d023      	beq.n	8004e10 <HAL_ADC_ConfigChannel+0x108>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	2b06      	cmp	r3, #6
 8004dce:	d01f      	beq.n	8004e10 <HAL_ADC_ConfigChannel+0x108>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd4:	2b07      	cmp	r3, #7
 8004dd6:	d01b      	beq.n	8004e10 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	2107      	movs	r1, #7
 8004de4:	400b      	ands	r3, r1
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d012      	beq.n	8004e10 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2107      	movs	r1, #7
 8004df6:	438a      	bics	r2, r1
 8004df8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6959      	ldr	r1, [r3, #20]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2207      	movs	r2, #7
 8004e06:	401a      	ands	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d003      	beq.n	8004e20 <HAL_ADC_ConfigChannel+0x118>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b11      	cmp	r3, #17
 8004e1e:	d152      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004e20:	4b2f      	ldr	r3, [pc, #188]	@ (8004ee0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004e22:	6819      	ldr	r1, [r3, #0]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d102      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x12a>
 8004e2c:	2380      	movs	r3, #128	@ 0x80
 8004e2e:	041b      	lsls	r3, r3, #16
 8004e30:	e001      	b.n	8004e36 <HAL_ADC_ConfigChannel+0x12e>
 8004e32:	2380      	movs	r3, #128	@ 0x80
 8004e34:	03db      	lsls	r3, r3, #15
 8004e36:	4a2a      	ldr	r2, [pc, #168]	@ (8004ee0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d140      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e44:	4b27      	ldr	r3, [pc, #156]	@ (8004ee4 <HAL_ADC_ConfigChannel+0x1dc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4927      	ldr	r1, [pc, #156]	@ (8004ee8 <HAL_ADC_ConfigChannel+0x1e0>)
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f7fb f982 	bl	8000154 <__udivsi3>
 8004e50:	0003      	movs	r3, r0
 8004e52:	001a      	movs	r2, r3
 8004e54:	0013      	movs	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	189b      	adds	r3, r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e5e:	e002      	b.n	8004e66 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f9      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x158>
 8004e6c:	e02b      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2101      	movs	r1, #1
 8004e7a:	4099      	lsls	r1, r3
 8004e7c:	000b      	movs	r3, r1
 8004e7e:	43d9      	mvns	r1, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	400a      	ands	r2, r1
 8004e86:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d003      	beq.n	8004e98 <HAL_ADC_ConfigChannel+0x190>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b11      	cmp	r3, #17
 8004e96:	d116      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004e98:	4b11      	ldr	r3, [pc, #68]	@ (8004ee0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004e9a:	6819      	ldr	r1, [r3, #0]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d101      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x1a0>
 8004ea4:	4a11      	ldr	r2, [pc, #68]	@ (8004eec <HAL_ADC_ConfigChannel+0x1e4>)
 8004ea6:	e000      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x1a2>
 8004ea8:	4a11      	ldr	r2, [pc, #68]	@ (8004ef0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004eac:	400a      	ands	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	e009      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004ebe:	230f      	movs	r3, #15
 8004ec0:	18fb      	adds	r3, r7, r3
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2234      	movs	r2, #52	@ 0x34
 8004eca:	2100      	movs	r1, #0
 8004ecc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004ece:	230f      	movs	r3, #15
 8004ed0:	18fb      	adds	r3, r7, r3
 8004ed2:	781b      	ldrb	r3, [r3, #0]
}
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b004      	add	sp, #16
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	00001001 	.word	0x00001001
 8004ee0:	40012708 	.word	0x40012708
 8004ee4:	2000002c 	.word	0x2000002c
 8004ee8:	000f4240 	.word	0x000f4240
 8004eec:	ff7fffff 	.word	0xff7fffff
 8004ef0:	ffbfffff 	.word	0xffbfffff

08004ef4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2203      	movs	r2, #3
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d112      	bne.n	8004f38 <ADC_Enable+0x44>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d009      	beq.n	8004f34 <ADC_Enable+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	2380      	movs	r3, #128	@ 0x80
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	401a      	ands	r2, r3
 8004f2c:	2380      	movs	r3, #128	@ 0x80
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d101      	bne.n	8004f38 <ADC_Enable+0x44>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <ADC_Enable+0x46>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d152      	bne.n	8004fe4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4a2a      	ldr	r2, [pc, #168]	@ (8004ff0 <ADC_Enable+0xfc>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	d00d      	beq.n	8004f66 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4e:	2210      	movs	r2, #16
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e03f      	b.n	8004fe6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2101      	movs	r1, #1
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004f76:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff4 <ADC_Enable+0x100>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	491f      	ldr	r1, [pc, #124]	@ (8004ff8 <ADC_Enable+0x104>)
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f7fb f8e9 	bl	8000154 <__udivsi3>
 8004f82:	0003      	movs	r3, r0
 8004f84:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004f86:	e002      	b.n	8004f8e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f9      	bne.n	8004f88 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f94:	f7ff fcdc 	bl	8004950 <HAL_GetTick>
 8004f98:	0003      	movs	r3, r0
 8004f9a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004f9c:	e01b      	b.n	8004fd6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f9e:	f7ff fcd7 	bl	8004950 <HAL_GetTick>
 8004fa2:	0002      	movs	r2, r0
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d914      	bls.n	8004fd6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d00d      	beq.n	8004fd6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fca:	2201      	movs	r2, #1
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e007      	b.n	8004fe6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d1dc      	bne.n	8004f9e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	b004      	add	sp, #16
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	46c0      	nop			@ (mov r8, r8)
 8004ff0:	80000017 	.word	0x80000017
 8004ff4:	2000002c 	.word	0x2000002c
 8004ff8:	000f4240 	.word	0x000f4240

08004ffc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005008:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	2250      	movs	r2, #80	@ 0x50
 8005010:	4013      	ands	r3, r2
 8005012:	d140      	bne.n	8005096 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005018:	2280      	movs	r2, #128	@ 0x80
 800501a:	0092      	lsls	r2, r2, #2
 800501c:	431a      	orrs	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	23c0      	movs	r3, #192	@ 0xc0
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	4013      	ands	r3, r2
 800502e:	d12d      	bne.n	800508c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005034:	2b00      	cmp	r3, #0
 8005036:	d129      	bne.n	800508c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2208      	movs	r2, #8
 8005040:	4013      	ands	r3, r2
 8005042:	2b08      	cmp	r3, #8
 8005044:	d122      	bne.n	800508c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2204      	movs	r2, #4
 800504e:	4013      	ands	r3, r2
 8005050:	d110      	bne.n	8005074 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	210c      	movs	r1, #12
 800505e:	438a      	bics	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005066:	4a11      	ldr	r2, [pc, #68]	@ (80050ac <ADC_DMAConvCplt+0xb0>)
 8005068:	4013      	ands	r3, r2
 800506a:	2201      	movs	r2, #1
 800506c:	431a      	orrs	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	639a      	str	r2, [r3, #56]	@ 0x38
 8005072:	e00b      	b.n	800508c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005078:	2220      	movs	r2, #32
 800507a:	431a      	orrs	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005084:	2201      	movs	r2, #1
 8005086:	431a      	orrs	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	0018      	movs	r0, r3
 8005090:	f7fe f8b6 	bl	8003200 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8005094:	e005      	b.n	80050a2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	0010      	movs	r0, r2
 80050a0:	4798      	blx	r3
}
 80050a2:	46c0      	nop			@ (mov r8, r8)
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b004      	add	sp, #16
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	46c0      	nop			@ (mov r8, r8)
 80050ac:	fffffefe 	.word	0xfffffefe

080050b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050bc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	0018      	movs	r0, r3
 80050c2:	f7ff fe11 	bl	8004ce8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050c6:	46c0      	nop			@ (mov r8, r8)
 80050c8:	46bd      	mov	sp, r7
 80050ca:	b004      	add	sp, #16
 80050cc:	bd80      	pop	{r7, pc}

080050ce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050da:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e0:	2240      	movs	r2, #64	@ 0x40
 80050e2:	431a      	orrs	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ec:	2204      	movs	r2, #4
 80050ee:	431a      	orrs	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f7ff fdfe 	bl	8004cf8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050fc:	46c0      	nop			@ (mov r8, r8)
 80050fe:	46bd      	mov	sp, r7
 8005100:	b004      	add	sp, #16
 8005102:	bd80      	pop	{r7, pc}

08005104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	0002      	movs	r2, r0
 800510c:	1dfb      	adds	r3, r7, #7
 800510e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005110:	1dfb      	adds	r3, r7, #7
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b7f      	cmp	r3, #127	@ 0x7f
 8005116:	d809      	bhi.n	800512c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005118:	1dfb      	adds	r3, r7, #7
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	001a      	movs	r2, r3
 800511e:	231f      	movs	r3, #31
 8005120:	401a      	ands	r2, r3
 8005122:	4b04      	ldr	r3, [pc, #16]	@ (8005134 <__NVIC_EnableIRQ+0x30>)
 8005124:	2101      	movs	r1, #1
 8005126:	4091      	lsls	r1, r2
 8005128:	000a      	movs	r2, r1
 800512a:	601a      	str	r2, [r3, #0]
  }
}
 800512c:	46c0      	nop			@ (mov r8, r8)
 800512e:	46bd      	mov	sp, r7
 8005130:	b002      	add	sp, #8
 8005132:	bd80      	pop	{r7, pc}
 8005134:	e000e100 	.word	0xe000e100

08005138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005138:	b590      	push	{r4, r7, lr}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	0002      	movs	r2, r0
 8005140:	6039      	str	r1, [r7, #0]
 8005142:	1dfb      	adds	r3, r7, #7
 8005144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005146:	1dfb      	adds	r3, r7, #7
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b7f      	cmp	r3, #127	@ 0x7f
 800514c:	d828      	bhi.n	80051a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800514e:	4a2f      	ldr	r2, [pc, #188]	@ (800520c <__NVIC_SetPriority+0xd4>)
 8005150:	1dfb      	adds	r3, r7, #7
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	b25b      	sxtb	r3, r3
 8005156:	089b      	lsrs	r3, r3, #2
 8005158:	33c0      	adds	r3, #192	@ 0xc0
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	589b      	ldr	r3, [r3, r2]
 800515e:	1dfa      	adds	r2, r7, #7
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	0011      	movs	r1, r2
 8005164:	2203      	movs	r2, #3
 8005166:	400a      	ands	r2, r1
 8005168:	00d2      	lsls	r2, r2, #3
 800516a:	21ff      	movs	r1, #255	@ 0xff
 800516c:	4091      	lsls	r1, r2
 800516e:	000a      	movs	r2, r1
 8005170:	43d2      	mvns	r2, r2
 8005172:	401a      	ands	r2, r3
 8005174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	019b      	lsls	r3, r3, #6
 800517a:	22ff      	movs	r2, #255	@ 0xff
 800517c:	401a      	ands	r2, r3
 800517e:	1dfb      	adds	r3, r7, #7
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	0018      	movs	r0, r3
 8005184:	2303      	movs	r3, #3
 8005186:	4003      	ands	r3, r0
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800518c:	481f      	ldr	r0, [pc, #124]	@ (800520c <__NVIC_SetPriority+0xd4>)
 800518e:	1dfb      	adds	r3, r7, #7
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	b25b      	sxtb	r3, r3
 8005194:	089b      	lsrs	r3, r3, #2
 8005196:	430a      	orrs	r2, r1
 8005198:	33c0      	adds	r3, #192	@ 0xc0
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800519e:	e031      	b.n	8005204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005210 <__NVIC_SetPriority+0xd8>)
 80051a2:	1dfb      	adds	r3, r7, #7
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	0019      	movs	r1, r3
 80051a8:	230f      	movs	r3, #15
 80051aa:	400b      	ands	r3, r1
 80051ac:	3b08      	subs	r3, #8
 80051ae:	089b      	lsrs	r3, r3, #2
 80051b0:	3306      	adds	r3, #6
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	18d3      	adds	r3, r2, r3
 80051b6:	3304      	adds	r3, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	1dfa      	adds	r2, r7, #7
 80051bc:	7812      	ldrb	r2, [r2, #0]
 80051be:	0011      	movs	r1, r2
 80051c0:	2203      	movs	r2, #3
 80051c2:	400a      	ands	r2, r1
 80051c4:	00d2      	lsls	r2, r2, #3
 80051c6:	21ff      	movs	r1, #255	@ 0xff
 80051c8:	4091      	lsls	r1, r2
 80051ca:	000a      	movs	r2, r1
 80051cc:	43d2      	mvns	r2, r2
 80051ce:	401a      	ands	r2, r3
 80051d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	019b      	lsls	r3, r3, #6
 80051d6:	22ff      	movs	r2, #255	@ 0xff
 80051d8:	401a      	ands	r2, r3
 80051da:	1dfb      	adds	r3, r7, #7
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	0018      	movs	r0, r3
 80051e0:	2303      	movs	r3, #3
 80051e2:	4003      	ands	r3, r0
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051e8:	4809      	ldr	r0, [pc, #36]	@ (8005210 <__NVIC_SetPriority+0xd8>)
 80051ea:	1dfb      	adds	r3, r7, #7
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	001c      	movs	r4, r3
 80051f0:	230f      	movs	r3, #15
 80051f2:	4023      	ands	r3, r4
 80051f4:	3b08      	subs	r3, #8
 80051f6:	089b      	lsrs	r3, r3, #2
 80051f8:	430a      	orrs	r2, r1
 80051fa:	3306      	adds	r3, #6
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	18c3      	adds	r3, r0, r3
 8005200:	3304      	adds	r3, #4
 8005202:	601a      	str	r2, [r3, #0]
}
 8005204:	46c0      	nop			@ (mov r8, r8)
 8005206:	46bd      	mov	sp, r7
 8005208:	b003      	add	sp, #12
 800520a:	bd90      	pop	{r4, r7, pc}
 800520c:	e000e100 	.word	0xe000e100
 8005210:	e000ed00 	.word	0xe000ed00

08005214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	1e5a      	subs	r2, r3, #1
 8005220:	2380      	movs	r3, #128	@ 0x80
 8005222:	045b      	lsls	r3, r3, #17
 8005224:	429a      	cmp	r2, r3
 8005226:	d301      	bcc.n	800522c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005228:	2301      	movs	r3, #1
 800522a:	e010      	b.n	800524e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800522c:	4b0a      	ldr	r3, [pc, #40]	@ (8005258 <SysTick_Config+0x44>)
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	3a01      	subs	r2, #1
 8005232:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005234:	2301      	movs	r3, #1
 8005236:	425b      	negs	r3, r3
 8005238:	2103      	movs	r1, #3
 800523a:	0018      	movs	r0, r3
 800523c:	f7ff ff7c 	bl	8005138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005240:	4b05      	ldr	r3, [pc, #20]	@ (8005258 <SysTick_Config+0x44>)
 8005242:	2200      	movs	r2, #0
 8005244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005246:	4b04      	ldr	r3, [pc, #16]	@ (8005258 <SysTick_Config+0x44>)
 8005248:	2207      	movs	r2, #7
 800524a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800524c:	2300      	movs	r3, #0
}
 800524e:	0018      	movs	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	b002      	add	sp, #8
 8005254:	bd80      	pop	{r7, pc}
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	e000e010 	.word	0xe000e010

0800525c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	210f      	movs	r1, #15
 8005268:	187b      	adds	r3, r7, r1
 800526a:	1c02      	adds	r2, r0, #0
 800526c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	187b      	adds	r3, r7, r1
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	b25b      	sxtb	r3, r3
 8005276:	0011      	movs	r1, r2
 8005278:	0018      	movs	r0, r3
 800527a:	f7ff ff5d 	bl	8005138 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	46bd      	mov	sp, r7
 8005282:	b004      	add	sp, #16
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	0002      	movs	r2, r0
 800528e:	1dfb      	adds	r3, r7, #7
 8005290:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005292:	1dfb      	adds	r3, r7, #7
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	b25b      	sxtb	r3, r3
 8005298:	0018      	movs	r0, r3
 800529a:	f7ff ff33 	bl	8005104 <__NVIC_EnableIRQ>
}
 800529e:	46c0      	nop			@ (mov r8, r8)
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b002      	add	sp, #8
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	0018      	movs	r0, r3
 80052b2:	f7ff ffaf 	bl	8005214 <SysTick_Config>
 80052b6:	0003      	movs	r3, r0
}
 80052b8:	0018      	movs	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b002      	add	sp, #8
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e036      	b.n	8005344 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2221      	movs	r2, #33	@ 0x21
 80052da:	2102      	movs	r1, #2
 80052dc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a18      	ldr	r2, [pc, #96]	@ (800534c <HAL_DMA_Init+0x8c>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80052f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800530e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	0018      	movs	r0, r3
 8005328:	f000 f9c4 	bl	80056b4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2221      	movs	r2, #33	@ 0x21
 8005336:	2101      	movs	r1, #1
 8005338:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	2100      	movs	r1, #0
 8005340:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b004      	add	sp, #16
 800534a:	bd80      	pop	{r7, pc}
 800534c:	ffffc00f 	.word	0xffffc00f

08005350 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800535e:	2317      	movs	r3, #23
 8005360:	18fb      	adds	r3, r7, r3
 8005362:	2200      	movs	r2, #0
 8005364:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	5c9b      	ldrb	r3, [r3, r2]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_DMA_Start_IT+0x24>
 8005370:	2302      	movs	r3, #2
 8005372:	e04f      	b.n	8005414 <HAL_DMA_Start_IT+0xc4>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	2101      	movs	r1, #1
 800537a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2221      	movs	r2, #33	@ 0x21
 8005380:	5c9b      	ldrb	r3, [r3, r2]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	d13a      	bne.n	80053fe <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2221      	movs	r2, #33	@ 0x21
 800538c:	2102      	movs	r1, #2
 800538e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2101      	movs	r1, #1
 80053a2:	438a      	bics	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f954 	bl	800565a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	210e      	movs	r1, #14
 80053c6:	430a      	orrs	r2, r1
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	e00f      	b.n	80053ec <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	210a      	movs	r1, #10
 80053d8:	430a      	orrs	r2, r1
 80053da:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2104      	movs	r1, #4
 80053e8:	438a      	bics	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2101      	movs	r1, #1
 80053f8:	430a      	orrs	r2, r1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e007      	b.n	800540e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	2100      	movs	r1, #0
 8005404:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005406:	2317      	movs	r3, #23
 8005408:	18fb      	adds	r3, r7, r3
 800540a:	2202      	movs	r2, #2
 800540c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800540e:	2317      	movs	r3, #23
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	781b      	ldrb	r3, [r3, #0]
}
 8005414:	0018      	movs	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	b006      	add	sp, #24
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2221      	movs	r2, #33	@ 0x21
 8005428:	5c9b      	ldrb	r3, [r3, r2]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d008      	beq.n	8005442 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2204      	movs	r2, #4
 8005434:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	2100      	movs	r1, #0
 800543c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e020      	b.n	8005484 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	210e      	movs	r1, #14
 800544e:	438a      	bics	r2, r1
 8005450:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2101      	movs	r1, #1
 800545e:	438a      	bics	r2, r1
 8005460:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546a:	2101      	movs	r1, #1
 800546c:	4091      	lsls	r1, r2
 800546e:	000a      	movs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2221      	movs	r2, #33	@ 0x21
 8005476:	2101      	movs	r1, #1
 8005478:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	2100      	movs	r1, #0
 8005480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	0018      	movs	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	b002      	add	sp, #8
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005494:	210f      	movs	r1, #15
 8005496:	187b      	adds	r3, r7, r1
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2221      	movs	r2, #33	@ 0x21
 80054a0:	5c9b      	ldrb	r3, [r3, r2]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d006      	beq.n	80054b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2204      	movs	r2, #4
 80054ac:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80054ae:	187b      	adds	r3, r7, r1
 80054b0:	2201      	movs	r2, #1
 80054b2:	701a      	strb	r2, [r3, #0]
 80054b4:	e028      	b.n	8005508 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	210e      	movs	r1, #14
 80054c2:	438a      	bics	r2, r1
 80054c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2101      	movs	r1, #1
 80054d2:	438a      	bics	r2, r1
 80054d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054de:	2101      	movs	r1, #1
 80054e0:	4091      	lsls	r1, r2
 80054e2:	000a      	movs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2221      	movs	r2, #33	@ 0x21
 80054ea:	2101      	movs	r1, #1
 80054ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	2100      	movs	r1, #0
 80054f4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d004      	beq.n	8005508 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	0010      	movs	r0, r2
 8005506:	4798      	blx	r3
    }
  }
  return status;
 8005508:	230f      	movs	r3, #15
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	781b      	ldrb	r3, [r3, #0]
}
 800550e:	0018      	movs	r0, r3
 8005510:	46bd      	mov	sp, r7
 8005512:	b004      	add	sp, #16
 8005514:	bd80      	pop	{r7, pc}

08005516 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	2204      	movs	r2, #4
 8005534:	409a      	lsls	r2, r3
 8005536:	0013      	movs	r3, r2
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4013      	ands	r3, r2
 800553c:	d024      	beq.n	8005588 <HAL_DMA_IRQHandler+0x72>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2204      	movs	r2, #4
 8005542:	4013      	ands	r3, r2
 8005544:	d020      	beq.n	8005588 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2220      	movs	r2, #32
 800554e:	4013      	ands	r3, r2
 8005550:	d107      	bne.n	8005562 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2104      	movs	r1, #4
 800555e:	438a      	bics	r2, r1
 8005560:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556a:	2104      	movs	r1, #4
 800556c:	4091      	lsls	r1, r2
 800556e:	000a      	movs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d100      	bne.n	800557c <HAL_DMA_IRQHandler+0x66>
 800557a:	e06a      	b.n	8005652 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	0010      	movs	r0, r2
 8005584:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005586:	e064      	b.n	8005652 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558c:	2202      	movs	r2, #2
 800558e:	409a      	lsls	r2, r3
 8005590:	0013      	movs	r3, r2
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4013      	ands	r3, r2
 8005596:	d02b      	beq.n	80055f0 <HAL_DMA_IRQHandler+0xda>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2202      	movs	r2, #2
 800559c:	4013      	ands	r3, r2
 800559e:	d027      	beq.n	80055f0 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2220      	movs	r2, #32
 80055a8:	4013      	ands	r3, r2
 80055aa:	d10b      	bne.n	80055c4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	210a      	movs	r1, #10
 80055b8:	438a      	bics	r2, r1
 80055ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2221      	movs	r2, #33	@ 0x21
 80055c0:	2101      	movs	r1, #1
 80055c2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055cc:	2102      	movs	r1, #2
 80055ce:	4091      	lsls	r1, r2
 80055d0:	000a      	movs	r2, r1
 80055d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	2100      	movs	r1, #0
 80055da:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d036      	beq.n	8005652 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	0010      	movs	r0, r2
 80055ec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80055ee:	e030      	b.n	8005652 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f4:	2208      	movs	r2, #8
 80055f6:	409a      	lsls	r2, r3
 80055f8:	0013      	movs	r3, r2
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4013      	ands	r3, r2
 80055fe:	d028      	beq.n	8005652 <HAL_DMA_IRQHandler+0x13c>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2208      	movs	r2, #8
 8005604:	4013      	ands	r3, r2
 8005606:	d024      	beq.n	8005652 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	210e      	movs	r1, #14
 8005614:	438a      	bics	r2, r1
 8005616:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005620:	2101      	movs	r1, #1
 8005622:	4091      	lsls	r1, r2
 8005624:	000a      	movs	r2, r1
 8005626:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2221      	movs	r2, #33	@ 0x21
 8005632:	2101      	movs	r1, #1
 8005634:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	2100      	movs	r1, #0
 800563c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	0010      	movs	r0, r2
 800564e:	4798      	blx	r3
    }
  }
}
 8005650:	e7ff      	b.n	8005652 <HAL_DMA_IRQHandler+0x13c>
 8005652:	46c0      	nop			@ (mov r8, r8)
 8005654:	46bd      	mov	sp, r7
 8005656:	b004      	add	sp, #16
 8005658:	bd80      	pop	{r7, pc}

0800565a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005670:	2101      	movs	r1, #1
 8005672:	4091      	lsls	r1, r2
 8005674:	000a      	movs	r2, r1
 8005676:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b10      	cmp	r3, #16
 8005686:	d108      	bne.n	800569a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005698:	e007      	b.n	80056aa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	60da      	str	r2, [r3, #12]
}
 80056aa:	46c0      	nop			@ (mov r8, r8)
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b004      	add	sp, #16
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a08      	ldr	r2, [pc, #32]	@ (80056e4 <DMA_CalcBaseAndBitshift+0x30>)
 80056c2:	4694      	mov	ip, r2
 80056c4:	4463      	add	r3, ip
 80056c6:	2114      	movs	r1, #20
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7fa fd43 	bl	8000154 <__udivsi3>
 80056ce:	0003      	movs	r3, r0
 80056d0:	009a      	lsls	r2, r3, #2
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a03      	ldr	r2, [pc, #12]	@ (80056e8 <DMA_CalcBaseAndBitshift+0x34>)
 80056da:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80056dc:	46c0      	nop			@ (mov r8, r8)
 80056de:	46bd      	mov	sp, r7
 80056e0:	b002      	add	sp, #8
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	bffdfff8 	.word	0xbffdfff8
 80056e8:	40020000 	.word	0x40020000

080056ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056fa:	e14f      	b.n	800599c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2101      	movs	r1, #1
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4091      	lsls	r1, r2
 8005706:	000a      	movs	r2, r1
 8005708:	4013      	ands	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d100      	bne.n	8005714 <HAL_GPIO_Init+0x28>
 8005712:	e140      	b.n	8005996 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2203      	movs	r2, #3
 800571a:	4013      	ands	r3, r2
 800571c:	2b01      	cmp	r3, #1
 800571e:	d005      	beq.n	800572c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2203      	movs	r2, #3
 8005726:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005728:	2b02      	cmp	r3, #2
 800572a:	d130      	bne.n	800578e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	2203      	movs	r2, #3
 8005738:	409a      	lsls	r2, r3
 800573a:	0013      	movs	r3, r2
 800573c:	43da      	mvns	r2, r3
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4013      	ands	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	409a      	lsls	r2, r3
 800574e:	0013      	movs	r3, r2
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005762:	2201      	movs	r2, #1
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	409a      	lsls	r2, r3
 8005768:	0013      	movs	r3, r2
 800576a:	43da      	mvns	r2, r3
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4013      	ands	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	091b      	lsrs	r3, r3, #4
 8005778:	2201      	movs	r2, #1
 800577a:	401a      	ands	r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	409a      	lsls	r2, r3
 8005780:	0013      	movs	r3, r2
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2203      	movs	r2, #3
 8005794:	4013      	ands	r3, r2
 8005796:	2b03      	cmp	r3, #3
 8005798:	d017      	beq.n	80057ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	2203      	movs	r2, #3
 80057a6:	409a      	lsls	r2, r3
 80057a8:	0013      	movs	r3, r2
 80057aa:	43da      	mvns	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4013      	ands	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	409a      	lsls	r2, r3
 80057bc:	0013      	movs	r3, r2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2203      	movs	r2, #3
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d123      	bne.n	800581e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	08da      	lsrs	r2, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3208      	adds	r2, #8
 80057de:	0092      	lsls	r2, r2, #2
 80057e0:	58d3      	ldr	r3, [r2, r3]
 80057e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2207      	movs	r2, #7
 80057e8:	4013      	ands	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	220f      	movs	r2, #15
 80057ee:	409a      	lsls	r2, r3
 80057f0:	0013      	movs	r3, r2
 80057f2:	43da      	mvns	r2, r3
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4013      	ands	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2107      	movs	r1, #7
 8005802:	400b      	ands	r3, r1
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	409a      	lsls	r2, r3
 8005808:	0013      	movs	r3, r2
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	08da      	lsrs	r2, r3, #3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3208      	adds	r2, #8
 8005818:	0092      	lsls	r2, r2, #2
 800581a:	6939      	ldr	r1, [r7, #16]
 800581c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	2203      	movs	r2, #3
 800582a:	409a      	lsls	r2, r3
 800582c:	0013      	movs	r3, r2
 800582e:	43da      	mvns	r2, r3
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4013      	ands	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2203      	movs	r2, #3
 800583c:	401a      	ands	r2, r3
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	409a      	lsls	r2, r3
 8005844:	0013      	movs	r3, r2
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	23c0      	movs	r3, #192	@ 0xc0
 8005858:	029b      	lsls	r3, r3, #10
 800585a:	4013      	ands	r3, r2
 800585c:	d100      	bne.n	8005860 <HAL_GPIO_Init+0x174>
 800585e:	e09a      	b.n	8005996 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005860:	4b54      	ldr	r3, [pc, #336]	@ (80059b4 <HAL_GPIO_Init+0x2c8>)
 8005862:	699a      	ldr	r2, [r3, #24]
 8005864:	4b53      	ldr	r3, [pc, #332]	@ (80059b4 <HAL_GPIO_Init+0x2c8>)
 8005866:	2101      	movs	r1, #1
 8005868:	430a      	orrs	r2, r1
 800586a:	619a      	str	r2, [r3, #24]
 800586c:	4b51      	ldr	r3, [pc, #324]	@ (80059b4 <HAL_GPIO_Init+0x2c8>)
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	2201      	movs	r2, #1
 8005872:	4013      	ands	r3, r2
 8005874:	60bb      	str	r3, [r7, #8]
 8005876:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005878:	4a4f      	ldr	r2, [pc, #316]	@ (80059b8 <HAL_GPIO_Init+0x2cc>)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	089b      	lsrs	r3, r3, #2
 800587e:	3302      	adds	r3, #2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	589b      	ldr	r3, [r3, r2]
 8005884:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2203      	movs	r2, #3
 800588a:	4013      	ands	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	220f      	movs	r2, #15
 8005890:	409a      	lsls	r2, r3
 8005892:	0013      	movs	r3, r2
 8005894:	43da      	mvns	r2, r3
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4013      	ands	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	2390      	movs	r3, #144	@ 0x90
 80058a0:	05db      	lsls	r3, r3, #23
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d013      	beq.n	80058ce <HAL_GPIO_Init+0x1e2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a44      	ldr	r2, [pc, #272]	@ (80059bc <HAL_GPIO_Init+0x2d0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00d      	beq.n	80058ca <HAL_GPIO_Init+0x1de>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a43      	ldr	r2, [pc, #268]	@ (80059c0 <HAL_GPIO_Init+0x2d4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d007      	beq.n	80058c6 <HAL_GPIO_Init+0x1da>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a42      	ldr	r2, [pc, #264]	@ (80059c4 <HAL_GPIO_Init+0x2d8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d101      	bne.n	80058c2 <HAL_GPIO_Init+0x1d6>
 80058be:	2303      	movs	r3, #3
 80058c0:	e006      	b.n	80058d0 <HAL_GPIO_Init+0x1e4>
 80058c2:	2305      	movs	r3, #5
 80058c4:	e004      	b.n	80058d0 <HAL_GPIO_Init+0x1e4>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e002      	b.n	80058d0 <HAL_GPIO_Init+0x1e4>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <HAL_GPIO_Init+0x1e4>
 80058ce:	2300      	movs	r3, #0
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	2103      	movs	r1, #3
 80058d4:	400a      	ands	r2, r1
 80058d6:	0092      	lsls	r2, r2, #2
 80058d8:	4093      	lsls	r3, r2
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80058e0:	4935      	ldr	r1, [pc, #212]	@ (80059b8 <HAL_GPIO_Init+0x2cc>)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	089b      	lsrs	r3, r3, #2
 80058e6:	3302      	adds	r3, #2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058ee:	4b36      	ldr	r3, [pc, #216]	@ (80059c8 <HAL_GPIO_Init+0x2dc>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	43da      	mvns	r2, r3
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	4013      	ands	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	2380      	movs	r3, #128	@ 0x80
 8005904:	035b      	lsls	r3, r3, #13
 8005906:	4013      	ands	r3, r2
 8005908:	d003      	beq.n	8005912 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005912:	4b2d      	ldr	r3, [pc, #180]	@ (80059c8 <HAL_GPIO_Init+0x2dc>)
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005918:	4b2b      	ldr	r3, [pc, #172]	@ (80059c8 <HAL_GPIO_Init+0x2dc>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	43da      	mvns	r2, r3
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4013      	ands	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	2380      	movs	r3, #128	@ 0x80
 800592e:	039b      	lsls	r3, r3, #14
 8005930:	4013      	ands	r3, r2
 8005932:	d003      	beq.n	800593c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800593c:	4b22      	ldr	r3, [pc, #136]	@ (80059c8 <HAL_GPIO_Init+0x2dc>)
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8005942:	4b21      	ldr	r3, [pc, #132]	@ (80059c8 <HAL_GPIO_Init+0x2dc>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	43da      	mvns	r2, r3
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4013      	ands	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	2380      	movs	r3, #128	@ 0x80
 8005958:	029b      	lsls	r3, r3, #10
 800595a:	4013      	ands	r3, r2
 800595c:	d003      	beq.n	8005966 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005966:	4b18      	ldr	r3, [pc, #96]	@ (80059c8 <HAL_GPIO_Init+0x2dc>)
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800596c:	4b16      	ldr	r3, [pc, #88]	@ (80059c8 <HAL_GPIO_Init+0x2dc>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	43da      	mvns	r2, r3
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4013      	ands	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	2380      	movs	r3, #128	@ 0x80
 8005982:	025b      	lsls	r3, r3, #9
 8005984:	4013      	ands	r3, r2
 8005986:	d003      	beq.n	8005990 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005990:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <HAL_GPIO_Init+0x2dc>)
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	3301      	adds	r3, #1
 800599a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	40da      	lsrs	r2, r3
 80059a4:	1e13      	subs	r3, r2, #0
 80059a6:	d000      	beq.n	80059aa <HAL_GPIO_Init+0x2be>
 80059a8:	e6a8      	b.n	80056fc <HAL_GPIO_Init+0x10>
  } 
}
 80059aa:	46c0      	nop			@ (mov r8, r8)
 80059ac:	46c0      	nop			@ (mov r8, r8)
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b006      	add	sp, #24
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40021000 	.word	0x40021000
 80059b8:	40010000 	.word	0x40010000
 80059bc:	48000400 	.word	0x48000400
 80059c0:	48000800 	.word	0x48000800
 80059c4:	48000c00 	.word	0x48000c00
 80059c8:	40010400 	.word	0x40010400

080059cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	000a      	movs	r2, r1
 80059d6:	1cbb      	adds	r3, r7, #2
 80059d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	1cba      	adds	r2, r7, #2
 80059e0:	8812      	ldrh	r2, [r2, #0]
 80059e2:	4013      	ands	r3, r2
 80059e4:	d004      	beq.n	80059f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80059e6:	230f      	movs	r3, #15
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2201      	movs	r2, #1
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e003      	b.n	80059f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059f0:	230f      	movs	r3, #15
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80059f8:	230f      	movs	r3, #15
 80059fa:	18fb      	adds	r3, r7, r3
 80059fc:	781b      	ldrb	r3, [r3, #0]
  }
 80059fe:	0018      	movs	r0, r3
 8005a00:	46bd      	mov	sp, r7
 8005a02:	b004      	add	sp, #16
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	0008      	movs	r0, r1
 8005a10:	0011      	movs	r1, r2
 8005a12:	1cbb      	adds	r3, r7, #2
 8005a14:	1c02      	adds	r2, r0, #0
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	1c7b      	adds	r3, r7, #1
 8005a1a:	1c0a      	adds	r2, r1, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a1e:	1c7b      	adds	r3, r7, #1
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d004      	beq.n	8005a30 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a26:	1cbb      	adds	r3, r7, #2
 8005a28:	881a      	ldrh	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a2e:	e003      	b.n	8005a38 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a30:	1cbb      	adds	r3, r7, #2
 8005a32:	881a      	ldrh	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a38:	46c0      	nop			@ (mov r8, r8)
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b002      	add	sp, #8
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	0002      	movs	r2, r0
 8005a48:	1dbb      	adds	r3, r7, #6
 8005a4a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a4c:	4b09      	ldr	r3, [pc, #36]	@ (8005a74 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	1dba      	adds	r2, r7, #6
 8005a52:	8812      	ldrh	r2, [r2, #0]
 8005a54:	4013      	ands	r3, r2
 8005a56:	d008      	beq.n	8005a6a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a58:	4b06      	ldr	r3, [pc, #24]	@ (8005a74 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005a5a:	1dba      	adds	r2, r7, #6
 8005a5c:	8812      	ldrh	r2, [r2, #0]
 8005a5e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a60:	1dbb      	adds	r3, r7, #6
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	0018      	movs	r0, r3
 8005a66:	f000 f807 	bl	8005a78 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a6a:	46c0      	nop			@ (mov r8, r8)
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b002      	add	sp, #8
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	40010400 	.word	0x40010400

08005a78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	0002      	movs	r2, r0
 8005a80:	1dbb      	adds	r3, r7, #6
 8005a82:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8005a84:	46c0      	nop			@ (mov r8, r8)
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b002      	add	sp, #8
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e301      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d100      	bne.n	8005aaa <HAL_RCC_OscConfig+0x1e>
 8005aa8:	e08d      	b.n	8005bc6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005aaa:	4bc3      	ldr	r3, [pc, #780]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	220c      	movs	r2, #12
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ab6:	4bc0      	ldr	r3, [pc, #768]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	220c      	movs	r2, #12
 8005abc:	4013      	ands	r3, r2
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d116      	bne.n	8005af0 <HAL_RCC_OscConfig+0x64>
 8005ac2:	4bbd      	ldr	r3, [pc, #756]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	2380      	movs	r3, #128	@ 0x80
 8005ac8:	025b      	lsls	r3, r3, #9
 8005aca:	401a      	ands	r2, r3
 8005acc:	2380      	movs	r3, #128	@ 0x80
 8005ace:	025b      	lsls	r3, r3, #9
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d10d      	bne.n	8005af0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad4:	4bb8      	ldr	r3, [pc, #736]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	2380      	movs	r3, #128	@ 0x80
 8005ada:	029b      	lsls	r3, r3, #10
 8005adc:	4013      	ands	r3, r2
 8005ade:	d100      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x56>
 8005ae0:	e070      	b.n	8005bc4 <HAL_RCC_OscConfig+0x138>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d000      	beq.n	8005aec <HAL_RCC_OscConfig+0x60>
 8005aea:	e06b      	b.n	8005bc4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e2d8      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d107      	bne.n	8005b08 <HAL_RCC_OscConfig+0x7c>
 8005af8:	4baf      	ldr	r3, [pc, #700]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	4bae      	ldr	r3, [pc, #696]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005afe:	2180      	movs	r1, #128	@ 0x80
 8005b00:	0249      	lsls	r1, r1, #9
 8005b02:	430a      	orrs	r2, r1
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	e02f      	b.n	8005b68 <HAL_RCC_OscConfig+0xdc>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10c      	bne.n	8005b2a <HAL_RCC_OscConfig+0x9e>
 8005b10:	4ba9      	ldr	r3, [pc, #676]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	4ba8      	ldr	r3, [pc, #672]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005b16:	49a9      	ldr	r1, [pc, #676]	@ (8005dbc <HAL_RCC_OscConfig+0x330>)
 8005b18:	400a      	ands	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	4ba6      	ldr	r3, [pc, #664]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	4ba5      	ldr	r3, [pc, #660]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005b22:	49a7      	ldr	r1, [pc, #668]	@ (8005dc0 <HAL_RCC_OscConfig+0x334>)
 8005b24:	400a      	ands	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e01e      	b.n	8005b68 <HAL_RCC_OscConfig+0xdc>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b05      	cmp	r3, #5
 8005b30:	d10e      	bne.n	8005b50 <HAL_RCC_OscConfig+0xc4>
 8005b32:	4ba1      	ldr	r3, [pc, #644]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4ba0      	ldr	r3, [pc, #640]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005b38:	2180      	movs	r1, #128	@ 0x80
 8005b3a:	02c9      	lsls	r1, r1, #11
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	4b9d      	ldr	r3, [pc, #628]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4b9c      	ldr	r3, [pc, #624]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005b46:	2180      	movs	r1, #128	@ 0x80
 8005b48:	0249      	lsls	r1, r1, #9
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e00b      	b.n	8005b68 <HAL_RCC_OscConfig+0xdc>
 8005b50:	4b99      	ldr	r3, [pc, #612]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4b98      	ldr	r3, [pc, #608]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005b56:	4999      	ldr	r1, [pc, #612]	@ (8005dbc <HAL_RCC_OscConfig+0x330>)
 8005b58:	400a      	ands	r2, r1
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	4b96      	ldr	r3, [pc, #600]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	4b95      	ldr	r3, [pc, #596]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005b62:	4997      	ldr	r1, [pc, #604]	@ (8005dc0 <HAL_RCC_OscConfig+0x334>)
 8005b64:	400a      	ands	r2, r1
 8005b66:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d014      	beq.n	8005b9a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b70:	f7fe feee 	bl	8004950 <HAL_GetTick>
 8005b74:	0003      	movs	r3, r0
 8005b76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b7a:	f7fe fee9 	bl	8004950 <HAL_GetTick>
 8005b7e:	0002      	movs	r2, r0
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b64      	cmp	r3, #100	@ 0x64
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e28a      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b8c:	4b8a      	ldr	r3, [pc, #552]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	2380      	movs	r3, #128	@ 0x80
 8005b92:	029b      	lsls	r3, r3, #10
 8005b94:	4013      	ands	r3, r2
 8005b96:	d0f0      	beq.n	8005b7a <HAL_RCC_OscConfig+0xee>
 8005b98:	e015      	b.n	8005bc6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9a:	f7fe fed9 	bl	8004950 <HAL_GetTick>
 8005b9e:	0003      	movs	r3, r0
 8005ba0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ba4:	f7fe fed4 	bl	8004950 <HAL_GetTick>
 8005ba8:	0002      	movs	r2, r0
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b64      	cmp	r3, #100	@ 0x64
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e275      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bb6:	4b80      	ldr	r3, [pc, #512]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	2380      	movs	r3, #128	@ 0x80
 8005bbc:	029b      	lsls	r3, r3, #10
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d1f0      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x118>
 8005bc2:	e000      	b.n	8005bc6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bc4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d100      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x146>
 8005bd0:	e069      	b.n	8005ca6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005bd2:	4b79      	ldr	r3, [pc, #484]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	220c      	movs	r2, #12
 8005bd8:	4013      	ands	r3, r2
 8005bda:	d00b      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005bdc:	4b76      	ldr	r3, [pc, #472]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	220c      	movs	r2, #12
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d11c      	bne.n	8005c22 <HAL_RCC_OscConfig+0x196>
 8005be8:	4b73      	ldr	r3, [pc, #460]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	2380      	movs	r3, #128	@ 0x80
 8005bee:	025b      	lsls	r3, r3, #9
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d116      	bne.n	8005c22 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bf4:	4b70      	ldr	r3, [pc, #448]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d005      	beq.n	8005c0a <HAL_RCC_OscConfig+0x17e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d001      	beq.n	8005c0a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e24b      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c0a:	4b6b      	ldr	r3, [pc, #428]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	22f8      	movs	r2, #248	@ 0xf8
 8005c10:	4393      	bics	r3, r2
 8005c12:	0019      	movs	r1, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	00da      	lsls	r2, r3, #3
 8005c1a:	4b67      	ldr	r3, [pc, #412]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c20:	e041      	b.n	8005ca6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d024      	beq.n	8005c74 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c2a:	4b63      	ldr	r3, [pc, #396]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4b62      	ldr	r3, [pc, #392]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005c30:	2101      	movs	r1, #1
 8005c32:	430a      	orrs	r2, r1
 8005c34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c36:	f7fe fe8b 	bl	8004950 <HAL_GetTick>
 8005c3a:	0003      	movs	r3, r0
 8005c3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c40:	f7fe fe86 	bl	8004950 <HAL_GetTick>
 8005c44:	0002      	movs	r2, r0
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e227      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c52:	4b59      	ldr	r3, [pc, #356]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2202      	movs	r2, #2
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d0f1      	beq.n	8005c40 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c5c:	4b56      	ldr	r3, [pc, #344]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	22f8      	movs	r2, #248	@ 0xf8
 8005c62:	4393      	bics	r3, r2
 8005c64:	0019      	movs	r1, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	00da      	lsls	r2, r3, #3
 8005c6c:	4b52      	ldr	r3, [pc, #328]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	e018      	b.n	8005ca6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c74:	4b50      	ldr	r3, [pc, #320]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	4b4f      	ldr	r3, [pc, #316]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	438a      	bics	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c80:	f7fe fe66 	bl	8004950 <HAL_GetTick>
 8005c84:	0003      	movs	r3, r0
 8005c86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c8a:	f7fe fe61 	bl	8004950 <HAL_GetTick>
 8005c8e:	0002      	movs	r2, r0
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e202      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c9c:	4b46      	ldr	r3, [pc, #280]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d1f1      	bne.n	8005c8a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2208      	movs	r2, #8
 8005cac:	4013      	ands	r3, r2
 8005cae:	d036      	beq.n	8005d1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d019      	beq.n	8005cec <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005cba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc4:	f7fe fe44 	bl	8004950 <HAL_GetTick>
 8005cc8:	0003      	movs	r3, r0
 8005cca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cce:	f7fe fe3f 	bl	8004950 <HAL_GetTick>
 8005cd2:	0002      	movs	r2, r0
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e1e0      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ce0:	4b35      	ldr	r3, [pc, #212]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d0f1      	beq.n	8005cce <HAL_RCC_OscConfig+0x242>
 8005cea:	e018      	b.n	8005d1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cec:	4b32      	ldr	r3, [pc, #200]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005cee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cf0:	4b31      	ldr	r3, [pc, #196]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	438a      	bics	r2, r1
 8005cf6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cf8:	f7fe fe2a 	bl	8004950 <HAL_GetTick>
 8005cfc:	0003      	movs	r3, r0
 8005cfe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d00:	e008      	b.n	8005d14 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d02:	f7fe fe25 	bl	8004950 <HAL_GetTick>
 8005d06:	0002      	movs	r2, r0
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d901      	bls.n	8005d14 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e1c6      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d14:	4b28      	ldr	r3, [pc, #160]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	2202      	movs	r2, #2
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	d1f1      	bne.n	8005d02 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2204      	movs	r2, #4
 8005d24:	4013      	ands	r3, r2
 8005d26:	d100      	bne.n	8005d2a <HAL_RCC_OscConfig+0x29e>
 8005d28:	e0b4      	b.n	8005e94 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d2a:	201f      	movs	r0, #31
 8005d2c:	183b      	adds	r3, r7, r0
 8005d2e:	2200      	movs	r2, #0
 8005d30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d32:	4b21      	ldr	r3, [pc, #132]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005d34:	69da      	ldr	r2, [r3, #28]
 8005d36:	2380      	movs	r3, #128	@ 0x80
 8005d38:	055b      	lsls	r3, r3, #21
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d110      	bne.n	8005d60 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005d40:	69da      	ldr	r2, [r3, #28]
 8005d42:	4b1d      	ldr	r3, [pc, #116]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005d44:	2180      	movs	r1, #128	@ 0x80
 8005d46:	0549      	lsls	r1, r1, #21
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	61da      	str	r2, [r3, #28]
 8005d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	2380      	movs	r3, #128	@ 0x80
 8005d52:	055b      	lsls	r3, r3, #21
 8005d54:	4013      	ands	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d5a:	183b      	adds	r3, r7, r0
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d60:	4b18      	ldr	r3, [pc, #96]	@ (8005dc4 <HAL_RCC_OscConfig+0x338>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	2380      	movs	r3, #128	@ 0x80
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	4013      	ands	r3, r2
 8005d6a:	d11a      	bne.n	8005da2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d6c:	4b15      	ldr	r3, [pc, #84]	@ (8005dc4 <HAL_RCC_OscConfig+0x338>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b14      	ldr	r3, [pc, #80]	@ (8005dc4 <HAL_RCC_OscConfig+0x338>)
 8005d72:	2180      	movs	r1, #128	@ 0x80
 8005d74:	0049      	lsls	r1, r1, #1
 8005d76:	430a      	orrs	r2, r1
 8005d78:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d7a:	f7fe fde9 	bl	8004950 <HAL_GetTick>
 8005d7e:	0003      	movs	r3, r0
 8005d80:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d84:	f7fe fde4 	bl	8004950 <HAL_GetTick>
 8005d88:	0002      	movs	r2, r0
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b64      	cmp	r3, #100	@ 0x64
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e185      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d96:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc4 <HAL_RCC_OscConfig+0x338>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	2380      	movs	r3, #128	@ 0x80
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	4013      	ands	r3, r2
 8005da0:	d0f0      	beq.n	8005d84 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d10e      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x33c>
 8005daa:	4b03      	ldr	r3, [pc, #12]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005dac:	6a1a      	ldr	r2, [r3, #32]
 8005dae:	4b02      	ldr	r3, [pc, #8]	@ (8005db8 <HAL_RCC_OscConfig+0x32c>)
 8005db0:	2101      	movs	r1, #1
 8005db2:	430a      	orrs	r2, r1
 8005db4:	621a      	str	r2, [r3, #32]
 8005db6:	e035      	b.n	8005e24 <HAL_RCC_OscConfig+0x398>
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	fffeffff 	.word	0xfffeffff
 8005dc0:	fffbffff 	.word	0xfffbffff
 8005dc4:	40007000 	.word	0x40007000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10c      	bne.n	8005dea <HAL_RCC_OscConfig+0x35e>
 8005dd0:	4bb6      	ldr	r3, [pc, #728]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005dd2:	6a1a      	ldr	r2, [r3, #32]
 8005dd4:	4bb5      	ldr	r3, [pc, #724]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	438a      	bics	r2, r1
 8005dda:	621a      	str	r2, [r3, #32]
 8005ddc:	4bb3      	ldr	r3, [pc, #716]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005dde:	6a1a      	ldr	r2, [r3, #32]
 8005de0:	4bb2      	ldr	r3, [pc, #712]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005de2:	2104      	movs	r1, #4
 8005de4:	438a      	bics	r2, r1
 8005de6:	621a      	str	r2, [r3, #32]
 8005de8:	e01c      	b.n	8005e24 <HAL_RCC_OscConfig+0x398>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d10c      	bne.n	8005e0c <HAL_RCC_OscConfig+0x380>
 8005df2:	4bae      	ldr	r3, [pc, #696]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005df4:	6a1a      	ldr	r2, [r3, #32]
 8005df6:	4bad      	ldr	r3, [pc, #692]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005df8:	2104      	movs	r1, #4
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	621a      	str	r2, [r3, #32]
 8005dfe:	4bab      	ldr	r3, [pc, #684]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005e00:	6a1a      	ldr	r2, [r3, #32]
 8005e02:	4baa      	ldr	r3, [pc, #680]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005e04:	2101      	movs	r1, #1
 8005e06:	430a      	orrs	r2, r1
 8005e08:	621a      	str	r2, [r3, #32]
 8005e0a:	e00b      	b.n	8005e24 <HAL_RCC_OscConfig+0x398>
 8005e0c:	4ba7      	ldr	r3, [pc, #668]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005e0e:	6a1a      	ldr	r2, [r3, #32]
 8005e10:	4ba6      	ldr	r3, [pc, #664]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005e12:	2101      	movs	r1, #1
 8005e14:	438a      	bics	r2, r1
 8005e16:	621a      	str	r2, [r3, #32]
 8005e18:	4ba4      	ldr	r3, [pc, #656]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005e1a:	6a1a      	ldr	r2, [r3, #32]
 8005e1c:	4ba3      	ldr	r3, [pc, #652]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005e1e:	2104      	movs	r1, #4
 8005e20:	438a      	bics	r2, r1
 8005e22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d014      	beq.n	8005e56 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e2c:	f7fe fd90 	bl	8004950 <HAL_GetTick>
 8005e30:	0003      	movs	r3, r0
 8005e32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e34:	e009      	b.n	8005e4a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e36:	f7fe fd8b 	bl	8004950 <HAL_GetTick>
 8005e3a:	0002      	movs	r2, r0
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	4a9b      	ldr	r2, [pc, #620]	@ (80060b0 <HAL_RCC_OscConfig+0x624>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e12b      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4a:	4b98      	ldr	r3, [pc, #608]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	4013      	ands	r3, r2
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0x3aa>
 8005e54:	e013      	b.n	8005e7e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e56:	f7fe fd7b 	bl	8004950 <HAL_GetTick>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e5e:	e009      	b.n	8005e74 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e60:	f7fe fd76 	bl	8004950 <HAL_GetTick>
 8005e64:	0002      	movs	r2, r0
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	4a91      	ldr	r2, [pc, #580]	@ (80060b0 <HAL_RCC_OscConfig+0x624>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e116      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e74:	4b8d      	ldr	r3, [pc, #564]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e7e:	231f      	movs	r3, #31
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d105      	bne.n	8005e94 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e88:	4b88      	ldr	r3, [pc, #544]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005e8a:	69da      	ldr	r2, [r3, #28]
 8005e8c:	4b87      	ldr	r3, [pc, #540]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005e8e:	4989      	ldr	r1, [pc, #548]	@ (80060b4 <HAL_RCC_OscConfig+0x628>)
 8005e90:	400a      	ands	r2, r1
 8005e92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2210      	movs	r2, #16
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d063      	beq.n	8005f66 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d12a      	bne.n	8005efc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005ea6:	4b81      	ldr	r3, [pc, #516]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eaa:	4b80      	ldr	r3, [pc, #512]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005eac:	2104      	movs	r1, #4
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005eb2:	4b7e      	ldr	r3, [pc, #504]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eb6:	4b7d      	ldr	r3, [pc, #500]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005eb8:	2101      	movs	r1, #1
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ebe:	f7fe fd47 	bl	8004950 <HAL_GetTick>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005ec8:	f7fe fd42 	bl	8004950 <HAL_GetTick>
 8005ecc:	0002      	movs	r2, r0
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e0e3      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005eda:	4b74      	ldr	r3, [pc, #464]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ede:	2202      	movs	r2, #2
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d0f1      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005ee4:	4b71      	ldr	r3, [pc, #452]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee8:	22f8      	movs	r2, #248	@ 0xf8
 8005eea:	4393      	bics	r3, r2
 8005eec:	0019      	movs	r1, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	00da      	lsls	r2, r3, #3
 8005ef4:	4b6d      	ldr	r3, [pc, #436]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005efa:	e034      	b.n	8005f66 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	3305      	adds	r3, #5
 8005f02:	d111      	bne.n	8005f28 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005f04:	4b69      	ldr	r3, [pc, #420]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005f06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f08:	4b68      	ldr	r3, [pc, #416]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005f0a:	2104      	movs	r1, #4
 8005f0c:	438a      	bics	r2, r1
 8005f0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005f10:	4b66      	ldr	r3, [pc, #408]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f14:	22f8      	movs	r2, #248	@ 0xf8
 8005f16:	4393      	bics	r3, r2
 8005f18:	0019      	movs	r1, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	00da      	lsls	r2, r3, #3
 8005f20:	4b62      	ldr	r3, [pc, #392]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005f22:	430a      	orrs	r2, r1
 8005f24:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f26:	e01e      	b.n	8005f66 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005f28:	4b60      	ldr	r3, [pc, #384]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005f2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f2c:	4b5f      	ldr	r3, [pc, #380]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005f2e:	2104      	movs	r1, #4
 8005f30:	430a      	orrs	r2, r1
 8005f32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005f34:	4b5d      	ldr	r3, [pc, #372]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f38:	4b5c      	ldr	r3, [pc, #368]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	438a      	bics	r2, r1
 8005f3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f40:	f7fe fd06 	bl	8004950 <HAL_GetTick>
 8005f44:	0003      	movs	r3, r0
 8005f46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005f48:	e008      	b.n	8005f5c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005f4a:	f7fe fd01 	bl	8004950 <HAL_GetTick>
 8005f4e:	0002      	movs	r2, r0
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e0a2      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005f5c:	4b53      	ldr	r3, [pc, #332]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f60:	2202      	movs	r2, #2
 8005f62:	4013      	ands	r3, r2
 8005f64:	d1f1      	bne.n	8005f4a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d100      	bne.n	8005f70 <HAL_RCC_OscConfig+0x4e4>
 8005f6e:	e097      	b.n	80060a0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f70:	4b4e      	ldr	r3, [pc, #312]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	220c      	movs	r2, #12
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d100      	bne.n	8005f7e <HAL_RCC_OscConfig+0x4f2>
 8005f7c:	e06b      	b.n	8006056 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d14c      	bne.n	8006020 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f86:	4b49      	ldr	r3, [pc, #292]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	4b48      	ldr	r3, [pc, #288]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005f8c:	494a      	ldr	r1, [pc, #296]	@ (80060b8 <HAL_RCC_OscConfig+0x62c>)
 8005f8e:	400a      	ands	r2, r1
 8005f90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f92:	f7fe fcdd 	bl	8004950 <HAL_GetTick>
 8005f96:	0003      	movs	r3, r0
 8005f98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f9c:	f7fe fcd8 	bl	8004950 <HAL_GetTick>
 8005fa0:	0002      	movs	r2, r0
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e079      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fae:	4b3f      	ldr	r3, [pc, #252]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	2380      	movs	r3, #128	@ 0x80
 8005fb4:	049b      	lsls	r3, r3, #18
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	d1f0      	bne.n	8005f9c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fba:	4b3c      	ldr	r3, [pc, #240]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbe:	220f      	movs	r2, #15
 8005fc0:	4393      	bics	r3, r2
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc8:	4b38      	ldr	r3, [pc, #224]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005fce:	4b37      	ldr	r3, [pc, #220]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	4a3a      	ldr	r2, [pc, #232]	@ (80060bc <HAL_RCC_OscConfig+0x630>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	0019      	movs	r1, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	4b32      	ldr	r3, [pc, #200]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fe8:	4b30      	ldr	r3, [pc, #192]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	4b2f      	ldr	r3, [pc, #188]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8005fee:	2180      	movs	r1, #128	@ 0x80
 8005ff0:	0449      	lsls	r1, r1, #17
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff6:	f7fe fcab 	bl	8004950 <HAL_GetTick>
 8005ffa:	0003      	movs	r3, r0
 8005ffc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006000:	f7fe fca6 	bl	8004950 <HAL_GetTick>
 8006004:	0002      	movs	r2, r0
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e047      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006012:	4b26      	ldr	r3, [pc, #152]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	2380      	movs	r3, #128	@ 0x80
 8006018:	049b      	lsls	r3, r3, #18
 800601a:	4013      	ands	r3, r2
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0x574>
 800601e:	e03f      	b.n	80060a0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006020:	4b22      	ldr	r3, [pc, #136]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	4b21      	ldr	r3, [pc, #132]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8006026:	4924      	ldr	r1, [pc, #144]	@ (80060b8 <HAL_RCC_OscConfig+0x62c>)
 8006028:	400a      	ands	r2, r1
 800602a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602c:	f7fe fc90 	bl	8004950 <HAL_GetTick>
 8006030:	0003      	movs	r3, r0
 8006032:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006036:	f7fe fc8b 	bl	8004950 <HAL_GetTick>
 800603a:	0002      	movs	r2, r0
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e02c      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006048:	4b18      	ldr	r3, [pc, #96]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	2380      	movs	r3, #128	@ 0x80
 800604e:	049b      	lsls	r3, r3, #18
 8006050:	4013      	ands	r3, r2
 8006052:	d1f0      	bne.n	8006036 <HAL_RCC_OscConfig+0x5aa>
 8006054:	e024      	b.n	80060a0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e01f      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006062:	4b12      	ldr	r3, [pc, #72]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006068:	4b10      	ldr	r3, [pc, #64]	@ (80060ac <HAL_RCC_OscConfig+0x620>)
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	2380      	movs	r3, #128	@ 0x80
 8006072:	025b      	lsls	r3, r3, #9
 8006074:	401a      	ands	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607a:	429a      	cmp	r2, r3
 800607c:	d10e      	bne.n	800609c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	220f      	movs	r2, #15
 8006082:	401a      	ands	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006088:	429a      	cmp	r2, r3
 800608a:	d107      	bne.n	800609c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	23f0      	movs	r3, #240	@ 0xf0
 8006090:	039b      	lsls	r3, r3, #14
 8006092:	401a      	ands	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006098:	429a      	cmp	r2, r3
 800609a:	d001      	beq.n	80060a0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	0018      	movs	r0, r3
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b008      	add	sp, #32
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	46c0      	nop			@ (mov r8, r8)
 80060ac:	40021000 	.word	0x40021000
 80060b0:	00001388 	.word	0x00001388
 80060b4:	efffffff 	.word	0xefffffff
 80060b8:	feffffff 	.word	0xfeffffff
 80060bc:	ffc2ffff 	.word	0xffc2ffff

080060c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0b3      	b.n	800623c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006244 <HAL_RCC_ClockConfig+0x184>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2201      	movs	r2, #1
 80060da:	4013      	ands	r3, r2
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d911      	bls.n	8006106 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e2:	4b58      	ldr	r3, [pc, #352]	@ (8006244 <HAL_RCC_ClockConfig+0x184>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2201      	movs	r2, #1
 80060e8:	4393      	bics	r3, r2
 80060ea:	0019      	movs	r1, r3
 80060ec:	4b55      	ldr	r3, [pc, #340]	@ (8006244 <HAL_RCC_ClockConfig+0x184>)
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f4:	4b53      	ldr	r3, [pc, #332]	@ (8006244 <HAL_RCC_ClockConfig+0x184>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2201      	movs	r2, #1
 80060fa:	4013      	ands	r3, r2
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d001      	beq.n	8006106 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e09a      	b.n	800623c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2202      	movs	r2, #2
 800610c:	4013      	ands	r3, r2
 800610e:	d015      	beq.n	800613c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2204      	movs	r2, #4
 8006116:	4013      	ands	r3, r2
 8006118:	d006      	beq.n	8006128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800611a:	4b4b      	ldr	r3, [pc, #300]	@ (8006248 <HAL_RCC_ClockConfig+0x188>)
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	4b4a      	ldr	r3, [pc, #296]	@ (8006248 <HAL_RCC_ClockConfig+0x188>)
 8006120:	21e0      	movs	r1, #224	@ 0xe0
 8006122:	00c9      	lsls	r1, r1, #3
 8006124:	430a      	orrs	r2, r1
 8006126:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006128:	4b47      	ldr	r3, [pc, #284]	@ (8006248 <HAL_RCC_ClockConfig+0x188>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	22f0      	movs	r2, #240	@ 0xf0
 800612e:	4393      	bics	r3, r2
 8006130:	0019      	movs	r1, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	4b44      	ldr	r3, [pc, #272]	@ (8006248 <HAL_RCC_ClockConfig+0x188>)
 8006138:	430a      	orrs	r2, r1
 800613a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2201      	movs	r2, #1
 8006142:	4013      	ands	r3, r2
 8006144:	d040      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d107      	bne.n	800615e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800614e:	4b3e      	ldr	r3, [pc, #248]	@ (8006248 <HAL_RCC_ClockConfig+0x188>)
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	2380      	movs	r3, #128	@ 0x80
 8006154:	029b      	lsls	r3, r3, #10
 8006156:	4013      	ands	r3, r2
 8006158:	d114      	bne.n	8006184 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e06e      	b.n	800623c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b02      	cmp	r3, #2
 8006164:	d107      	bne.n	8006176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006166:	4b38      	ldr	r3, [pc, #224]	@ (8006248 <HAL_RCC_ClockConfig+0x188>)
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	2380      	movs	r3, #128	@ 0x80
 800616c:	049b      	lsls	r3, r3, #18
 800616e:	4013      	ands	r3, r2
 8006170:	d108      	bne.n	8006184 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e062      	b.n	800623c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006176:	4b34      	ldr	r3, [pc, #208]	@ (8006248 <HAL_RCC_ClockConfig+0x188>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2202      	movs	r2, #2
 800617c:	4013      	ands	r3, r2
 800617e:	d101      	bne.n	8006184 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e05b      	b.n	800623c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006184:	4b30      	ldr	r3, [pc, #192]	@ (8006248 <HAL_RCC_ClockConfig+0x188>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2203      	movs	r2, #3
 800618a:	4393      	bics	r3, r2
 800618c:	0019      	movs	r1, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	4b2d      	ldr	r3, [pc, #180]	@ (8006248 <HAL_RCC_ClockConfig+0x188>)
 8006194:	430a      	orrs	r2, r1
 8006196:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006198:	f7fe fbda 	bl	8004950 <HAL_GetTick>
 800619c:	0003      	movs	r3, r0
 800619e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a0:	e009      	b.n	80061b6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a2:	f7fe fbd5 	bl	8004950 <HAL_GetTick>
 80061a6:	0002      	movs	r2, r0
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	4a27      	ldr	r2, [pc, #156]	@ (800624c <HAL_RCC_ClockConfig+0x18c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e042      	b.n	800623c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b6:	4b24      	ldr	r3, [pc, #144]	@ (8006248 <HAL_RCC_ClockConfig+0x188>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	220c      	movs	r2, #12
 80061bc:	401a      	ands	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d1ec      	bne.n	80061a2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006244 <HAL_RCC_ClockConfig+0x184>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2201      	movs	r2, #1
 80061ce:	4013      	ands	r3, r2
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d211      	bcs.n	80061fa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006244 <HAL_RCC_ClockConfig+0x184>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2201      	movs	r2, #1
 80061dc:	4393      	bics	r3, r2
 80061de:	0019      	movs	r1, r3
 80061e0:	4b18      	ldr	r3, [pc, #96]	@ (8006244 <HAL_RCC_ClockConfig+0x184>)
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e8:	4b16      	ldr	r3, [pc, #88]	@ (8006244 <HAL_RCC_ClockConfig+0x184>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2201      	movs	r2, #1
 80061ee:	4013      	ands	r3, r2
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d001      	beq.n	80061fa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e020      	b.n	800623c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2204      	movs	r2, #4
 8006200:	4013      	ands	r3, r2
 8006202:	d009      	beq.n	8006218 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006204:	4b10      	ldr	r3, [pc, #64]	@ (8006248 <HAL_RCC_ClockConfig+0x188>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	4a11      	ldr	r2, [pc, #68]	@ (8006250 <HAL_RCC_ClockConfig+0x190>)
 800620a:	4013      	ands	r3, r2
 800620c:	0019      	movs	r1, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	4b0d      	ldr	r3, [pc, #52]	@ (8006248 <HAL_RCC_ClockConfig+0x188>)
 8006214:	430a      	orrs	r2, r1
 8006216:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006218:	f000 f820 	bl	800625c <HAL_RCC_GetSysClockFreq>
 800621c:	0001      	movs	r1, r0
 800621e:	4b0a      	ldr	r3, [pc, #40]	@ (8006248 <HAL_RCC_ClockConfig+0x188>)
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	091b      	lsrs	r3, r3, #4
 8006224:	220f      	movs	r2, #15
 8006226:	4013      	ands	r3, r2
 8006228:	4a0a      	ldr	r2, [pc, #40]	@ (8006254 <HAL_RCC_ClockConfig+0x194>)
 800622a:	5cd3      	ldrb	r3, [r2, r3]
 800622c:	000a      	movs	r2, r1
 800622e:	40da      	lsrs	r2, r3
 8006230:	4b09      	ldr	r3, [pc, #36]	@ (8006258 <HAL_RCC_ClockConfig+0x198>)
 8006232:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006234:	2003      	movs	r0, #3
 8006236:	f7fe fb45 	bl	80048c4 <HAL_InitTick>
  
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	0018      	movs	r0, r3
 800623e:	46bd      	mov	sp, r7
 8006240:	b004      	add	sp, #16
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40022000 	.word	0x40022000
 8006248:	40021000 	.word	0x40021000
 800624c:	00001388 	.word	0x00001388
 8006250:	fffff8ff 	.word	0xfffff8ff
 8006254:	0800e734 	.word	0x0800e734
 8006258:	2000002c 	.word	0x2000002c

0800625c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	2300      	movs	r3, #0
 8006268:	60bb      	str	r3, [r7, #8]
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	2300      	movs	r3, #0
 8006270:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006276:	4b20      	ldr	r3, [pc, #128]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	220c      	movs	r2, #12
 8006280:	4013      	ands	r3, r2
 8006282:	2b04      	cmp	r3, #4
 8006284:	d002      	beq.n	800628c <HAL_RCC_GetSysClockFreq+0x30>
 8006286:	2b08      	cmp	r3, #8
 8006288:	d003      	beq.n	8006292 <HAL_RCC_GetSysClockFreq+0x36>
 800628a:	e02c      	b.n	80062e6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800628c:	4b1b      	ldr	r3, [pc, #108]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800628e:	613b      	str	r3, [r7, #16]
      break;
 8006290:	e02c      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	0c9b      	lsrs	r3, r3, #18
 8006296:	220f      	movs	r2, #15
 8006298:	4013      	ands	r3, r2
 800629a:	4a19      	ldr	r2, [pc, #100]	@ (8006300 <HAL_RCC_GetSysClockFreq+0xa4>)
 800629c:	5cd3      	ldrb	r3, [r2, r3]
 800629e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80062a0:	4b15      	ldr	r3, [pc, #84]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80062a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a4:	220f      	movs	r2, #15
 80062a6:	4013      	ands	r3, r2
 80062a8:	4a16      	ldr	r2, [pc, #88]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xa8>)
 80062aa:	5cd3      	ldrb	r3, [r2, r3]
 80062ac:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	2380      	movs	r3, #128	@ 0x80
 80062b2:	025b      	lsls	r3, r3, #9
 80062b4:	4013      	ands	r3, r2
 80062b6:	d009      	beq.n	80062cc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	4810      	ldr	r0, [pc, #64]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80062bc:	f7f9 ff4a 	bl	8000154 <__udivsi3>
 80062c0:	0003      	movs	r3, r0
 80062c2:	001a      	movs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4353      	muls	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e009      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	000a      	movs	r2, r1
 80062d0:	0152      	lsls	r2, r2, #5
 80062d2:	1a52      	subs	r2, r2, r1
 80062d4:	0193      	lsls	r3, r2, #6
 80062d6:	1a9b      	subs	r3, r3, r2
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	185b      	adds	r3, r3, r1
 80062dc:	021b      	lsls	r3, r3, #8
 80062de:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	613b      	str	r3, [r7, #16]
      break;
 80062e4:	e002      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80062e6:	4b05      	ldr	r3, [pc, #20]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80062e8:	613b      	str	r3, [r7, #16]
      break;
 80062ea:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80062ec:	693b      	ldr	r3, [r7, #16]
}
 80062ee:	0018      	movs	r0, r3
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b006      	add	sp, #24
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	46c0      	nop			@ (mov r8, r8)
 80062f8:	40021000 	.word	0x40021000
 80062fc:	007a1200 	.word	0x007a1200
 8006300:	0800e74c 	.word	0x0800e74c
 8006304:	0800e75c 	.word	0x0800e75c

08006308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800630c:	4b02      	ldr	r3, [pc, #8]	@ (8006318 <HAL_RCC_GetHCLKFreq+0x10>)
 800630e:	681b      	ldr	r3, [r3, #0]
}
 8006310:	0018      	movs	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	46c0      	nop			@ (mov r8, r8)
 8006318:	2000002c 	.word	0x2000002c

0800631c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006320:	f7ff fff2 	bl	8006308 <HAL_RCC_GetHCLKFreq>
 8006324:	0001      	movs	r1, r0
 8006326:	4b06      	ldr	r3, [pc, #24]	@ (8006340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	0a1b      	lsrs	r3, r3, #8
 800632c:	2207      	movs	r2, #7
 800632e:	4013      	ands	r3, r2
 8006330:	4a04      	ldr	r2, [pc, #16]	@ (8006344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006332:	5cd3      	ldrb	r3, [r2, r3]
 8006334:	40d9      	lsrs	r1, r3
 8006336:	000b      	movs	r3, r1
}    
 8006338:	0018      	movs	r0, r3
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	46c0      	nop			@ (mov r8, r8)
 8006340:	40021000 	.word	0x40021000
 8006344:	0800e744 	.word	0x0800e744

08006348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	2380      	movs	r3, #128	@ 0x80
 800635e:	025b      	lsls	r3, r3, #9
 8006360:	4013      	ands	r3, r2
 8006362:	d100      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006364:	e08e      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006366:	2017      	movs	r0, #23
 8006368:	183b      	adds	r3, r7, r0
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800636e:	4b57      	ldr	r3, [pc, #348]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006370:	69da      	ldr	r2, [r3, #28]
 8006372:	2380      	movs	r3, #128	@ 0x80
 8006374:	055b      	lsls	r3, r3, #21
 8006376:	4013      	ands	r3, r2
 8006378:	d110      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800637a:	4b54      	ldr	r3, [pc, #336]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800637c:	69da      	ldr	r2, [r3, #28]
 800637e:	4b53      	ldr	r3, [pc, #332]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006380:	2180      	movs	r1, #128	@ 0x80
 8006382:	0549      	lsls	r1, r1, #21
 8006384:	430a      	orrs	r2, r1
 8006386:	61da      	str	r2, [r3, #28]
 8006388:	4b50      	ldr	r3, [pc, #320]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800638a:	69da      	ldr	r2, [r3, #28]
 800638c:	2380      	movs	r3, #128	@ 0x80
 800638e:	055b      	lsls	r3, r3, #21
 8006390:	4013      	ands	r3, r2
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006396:	183b      	adds	r3, r7, r0
 8006398:	2201      	movs	r2, #1
 800639a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800639c:	4b4c      	ldr	r3, [pc, #304]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	2380      	movs	r3, #128	@ 0x80
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	4013      	ands	r3, r2
 80063a6:	d11a      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063a8:	4b49      	ldr	r3, [pc, #292]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	4b48      	ldr	r3, [pc, #288]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80063ae:	2180      	movs	r1, #128	@ 0x80
 80063b0:	0049      	lsls	r1, r1, #1
 80063b2:	430a      	orrs	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063b6:	f7fe facb 	bl	8004950 <HAL_GetTick>
 80063ba:	0003      	movs	r3, r0
 80063bc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063be:	e008      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063c0:	f7fe fac6 	bl	8004950 <HAL_GetTick>
 80063c4:	0002      	movs	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b64      	cmp	r3, #100	@ 0x64
 80063cc:	d901      	bls.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e077      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063d2:	4b3f      	ldr	r3, [pc, #252]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	2380      	movs	r3, #128	@ 0x80
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	4013      	ands	r3, r2
 80063dc:	d0f0      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063de:	4b3b      	ldr	r3, [pc, #236]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80063e0:	6a1a      	ldr	r2, [r3, #32]
 80063e2:	23c0      	movs	r3, #192	@ 0xc0
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4013      	ands	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d034      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	23c0      	movs	r3, #192	@ 0xc0
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4013      	ands	r3, r2
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d02c      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006400:	4b32      	ldr	r3, [pc, #200]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	4a33      	ldr	r2, [pc, #204]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006406:	4013      	ands	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800640a:	4b30      	ldr	r3, [pc, #192]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800640c:	6a1a      	ldr	r2, [r3, #32]
 800640e:	4b2f      	ldr	r3, [pc, #188]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006410:	2180      	movs	r1, #128	@ 0x80
 8006412:	0249      	lsls	r1, r1, #9
 8006414:	430a      	orrs	r2, r1
 8006416:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006418:	4b2c      	ldr	r3, [pc, #176]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800641a:	6a1a      	ldr	r2, [r3, #32]
 800641c:	4b2b      	ldr	r3, [pc, #172]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800641e:	492e      	ldr	r1, [pc, #184]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006420:	400a      	ands	r2, r1
 8006422:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006424:	4b29      	ldr	r3, [pc, #164]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	4013      	ands	r3, r2
 8006430:	d013      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006432:	f7fe fa8d 	bl	8004950 <HAL_GetTick>
 8006436:	0003      	movs	r3, r0
 8006438:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800643a:	e009      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800643c:	f7fe fa88 	bl	8004950 <HAL_GetTick>
 8006440:	0002      	movs	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	4a25      	ldr	r2, [pc, #148]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d901      	bls.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e038      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006450:	4b1e      	ldr	r3, [pc, #120]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	2202      	movs	r2, #2
 8006456:	4013      	ands	r3, r2
 8006458:	d0f0      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800645a:	4b1c      	ldr	r3, [pc, #112]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	4a1d      	ldr	r2, [pc, #116]	@ (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006460:	4013      	ands	r3, r2
 8006462:	0019      	movs	r1, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	4b18      	ldr	r3, [pc, #96]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800646a:	430a      	orrs	r2, r1
 800646c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800646e:	2317      	movs	r3, #23
 8006470:	18fb      	adds	r3, r7, r3
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d105      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006478:	4b14      	ldr	r3, [pc, #80]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800647a:	69da      	ldr	r2, [r3, #28]
 800647c:	4b13      	ldr	r3, [pc, #76]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800647e:	4918      	ldr	r1, [pc, #96]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006480:	400a      	ands	r2, r1
 8006482:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2201      	movs	r2, #1
 800648a:	4013      	ands	r3, r2
 800648c:	d009      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800648e:	4b0f      	ldr	r3, [pc, #60]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006492:	2203      	movs	r2, #3
 8006494:	4393      	bics	r3, r2
 8006496:	0019      	movs	r1, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	4b0b      	ldr	r3, [pc, #44]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800649e:	430a      	orrs	r2, r1
 80064a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2220      	movs	r2, #32
 80064a8:	4013      	ands	r3, r2
 80064aa:	d009      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064ac:	4b07      	ldr	r3, [pc, #28]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80064ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b0:	2210      	movs	r2, #16
 80064b2:	4393      	bics	r3, r2
 80064b4:	0019      	movs	r1, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	4b04      	ldr	r3, [pc, #16]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80064bc:	430a      	orrs	r2, r1
 80064be:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	0018      	movs	r0, r3
 80064c4:	46bd      	mov	sp, r7
 80064c6:	b006      	add	sp, #24
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	46c0      	nop			@ (mov r8, r8)
 80064cc:	40021000 	.word	0x40021000
 80064d0:	40007000 	.word	0x40007000
 80064d4:	fffffcff 	.word	0xfffffcff
 80064d8:	fffeffff 	.word	0xfffeffff
 80064dc:	00001388 	.word	0x00001388
 80064e0:	efffffff 	.word	0xefffffff

080064e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e042      	b.n	800657c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	223d      	movs	r2, #61	@ 0x3d
 80064fa:	5c9b      	ldrb	r3, [r3, r2]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	223c      	movs	r2, #60	@ 0x3c
 8006506:	2100      	movs	r1, #0
 8006508:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	0018      	movs	r0, r3
 800650e:	f7fd ff35 	bl	800437c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	223d      	movs	r2, #61	@ 0x3d
 8006516:	2102      	movs	r1, #2
 8006518:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3304      	adds	r3, #4
 8006522:	0019      	movs	r1, r3
 8006524:	0010      	movs	r0, r2
 8006526:	f000 fee7 	bl	80072f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2246      	movs	r2, #70	@ 0x46
 800652e:	2101      	movs	r1, #1
 8006530:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	223e      	movs	r2, #62	@ 0x3e
 8006536:	2101      	movs	r1, #1
 8006538:	5499      	strb	r1, [r3, r2]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	223f      	movs	r2, #63	@ 0x3f
 800653e:	2101      	movs	r1, #1
 8006540:	5499      	strb	r1, [r3, r2]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2240      	movs	r2, #64	@ 0x40
 8006546:	2101      	movs	r1, #1
 8006548:	5499      	strb	r1, [r3, r2]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2241      	movs	r2, #65	@ 0x41
 800654e:	2101      	movs	r1, #1
 8006550:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2242      	movs	r2, #66	@ 0x42
 8006556:	2101      	movs	r1, #1
 8006558:	5499      	strb	r1, [r3, r2]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2243      	movs	r2, #67	@ 0x43
 800655e:	2101      	movs	r1, #1
 8006560:	5499      	strb	r1, [r3, r2]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2244      	movs	r2, #68	@ 0x44
 8006566:	2101      	movs	r1, #1
 8006568:	5499      	strb	r1, [r3, r2]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2245      	movs	r2, #69	@ 0x45
 800656e:	2101      	movs	r1, #1
 8006570:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	223d      	movs	r2, #61	@ 0x3d
 8006576:	2101      	movs	r1, #1
 8006578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	0018      	movs	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	b002      	add	sp, #8
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	223d      	movs	r2, #61	@ 0x3d
 8006590:	5c9b      	ldrb	r3, [r3, r2]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b01      	cmp	r3, #1
 8006596:	d001      	beq.n	800659c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e02d      	b.n	80065f8 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	223d      	movs	r2, #61	@ 0x3d
 80065a0:	2102      	movs	r1, #2
 80065a2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a15      	ldr	r2, [pc, #84]	@ (8006600 <HAL_TIM_Base_Start+0x7c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d009      	beq.n	80065c2 <HAL_TIM_Base_Start+0x3e>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a14      	ldr	r2, [pc, #80]	@ (8006604 <HAL_TIM_Base_Start+0x80>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d004      	beq.n	80065c2 <HAL_TIM_Base_Start+0x3e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a12      	ldr	r2, [pc, #72]	@ (8006608 <HAL_TIM_Base_Start+0x84>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d111      	bne.n	80065e6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	2207      	movs	r2, #7
 80065ca:	4013      	ands	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b06      	cmp	r3, #6
 80065d2:	d010      	beq.n	80065f6 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2101      	movs	r1, #1
 80065e0:	430a      	orrs	r2, r1
 80065e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e4:	e007      	b.n	80065f6 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2101      	movs	r1, #1
 80065f2:	430a      	orrs	r2, r1
 80065f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	0018      	movs	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	b004      	add	sp, #16
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	40012c00 	.word	0x40012c00
 8006604:	40000400 	.word	0x40000400
 8006608:	40014000 	.word	0x40014000

0800660c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	4a0d      	ldr	r2, [pc, #52]	@ (8006650 <HAL_TIM_Base_Stop+0x44>)
 800661c:	4013      	ands	r3, r2
 800661e:	d10d      	bne.n	800663c <HAL_TIM_Base_Stop+0x30>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	4a0b      	ldr	r2, [pc, #44]	@ (8006654 <HAL_TIM_Base_Stop+0x48>)
 8006628:	4013      	ands	r3, r2
 800662a:	d107      	bne.n	800663c <HAL_TIM_Base_Stop+0x30>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2101      	movs	r1, #1
 8006638:	438a      	bics	r2, r1
 800663a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	223d      	movs	r2, #61	@ 0x3d
 8006640:	2101      	movs	r1, #1
 8006642:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	0018      	movs	r0, r3
 8006648:	46bd      	mov	sp, r7
 800664a:	b002      	add	sp, #8
 800664c:	bd80      	pop	{r7, pc}
 800664e:	46c0      	nop			@ (mov r8, r8)
 8006650:	00001111 	.word	0x00001111
 8006654:	00000444 	.word	0x00000444

08006658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	223d      	movs	r2, #61	@ 0x3d
 8006664:	5c9b      	ldrb	r3, [r3, r2]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d001      	beq.n	8006670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e035      	b.n	80066dc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	223d      	movs	r2, #61	@ 0x3d
 8006674:	2102      	movs	r1, #2
 8006676:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2101      	movs	r1, #1
 8006684:	430a      	orrs	r2, r1
 8006686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a15      	ldr	r2, [pc, #84]	@ (80066e4 <HAL_TIM_Base_Start_IT+0x8c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d009      	beq.n	80066a6 <HAL_TIM_Base_Start_IT+0x4e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a14      	ldr	r2, [pc, #80]	@ (80066e8 <HAL_TIM_Base_Start_IT+0x90>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d004      	beq.n	80066a6 <HAL_TIM_Base_Start_IT+0x4e>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a12      	ldr	r2, [pc, #72]	@ (80066ec <HAL_TIM_Base_Start_IT+0x94>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d111      	bne.n	80066ca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	2207      	movs	r2, #7
 80066ae:	4013      	ands	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b06      	cmp	r3, #6
 80066b6:	d010      	beq.n	80066da <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2101      	movs	r1, #1
 80066c4:	430a      	orrs	r2, r1
 80066c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c8:	e007      	b.n	80066da <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2101      	movs	r1, #1
 80066d6:	430a      	orrs	r2, r1
 80066d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	0018      	movs	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	b004      	add	sp, #16
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40014000 	.word	0x40014000

080066f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2101      	movs	r1, #1
 8006704:	438a      	bics	r2, r1
 8006706:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	4a0d      	ldr	r2, [pc, #52]	@ (8006744 <HAL_TIM_Base_Stop_IT+0x54>)
 8006710:	4013      	ands	r3, r2
 8006712:	d10d      	bne.n	8006730 <HAL_TIM_Base_Stop_IT+0x40>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	4a0b      	ldr	r2, [pc, #44]	@ (8006748 <HAL_TIM_Base_Stop_IT+0x58>)
 800671c:	4013      	ands	r3, r2
 800671e:	d107      	bne.n	8006730 <HAL_TIM_Base_Stop_IT+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2101      	movs	r1, #1
 800672c:	438a      	bics	r2, r1
 800672e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	223d      	movs	r2, #61	@ 0x3d
 8006734:	2101      	movs	r1, #1
 8006736:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	0018      	movs	r0, r3
 800673c:	46bd      	mov	sp, r7
 800673e:	b002      	add	sp, #8
 8006740:	bd80      	pop	{r7, pc}
 8006742:	46c0      	nop			@ (mov r8, r8)
 8006744:	00001111 	.word	0x00001111
 8006748:	00000444 	.word	0x00000444

0800674c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e042      	b.n	80067e4 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	223d      	movs	r2, #61	@ 0x3d
 8006762:	5c9b      	ldrb	r3, [r3, r2]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d107      	bne.n	800677a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	223c      	movs	r2, #60	@ 0x3c
 800676e:	2100      	movs	r1, #0
 8006770:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	0018      	movs	r0, r3
 8006776:	f000 f839 	bl	80067ec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	223d      	movs	r2, #61	@ 0x3d
 800677e:	2102      	movs	r1, #2
 8006780:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3304      	adds	r3, #4
 800678a:	0019      	movs	r1, r3
 800678c:	0010      	movs	r0, r2
 800678e:	f000 fdb3 	bl	80072f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2246      	movs	r2, #70	@ 0x46
 8006796:	2101      	movs	r1, #1
 8006798:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	223e      	movs	r2, #62	@ 0x3e
 800679e:	2101      	movs	r1, #1
 80067a0:	5499      	strb	r1, [r3, r2]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	223f      	movs	r2, #63	@ 0x3f
 80067a6:	2101      	movs	r1, #1
 80067a8:	5499      	strb	r1, [r3, r2]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2240      	movs	r2, #64	@ 0x40
 80067ae:	2101      	movs	r1, #1
 80067b0:	5499      	strb	r1, [r3, r2]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2241      	movs	r2, #65	@ 0x41
 80067b6:	2101      	movs	r1, #1
 80067b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2242      	movs	r2, #66	@ 0x42
 80067be:	2101      	movs	r1, #1
 80067c0:	5499      	strb	r1, [r3, r2]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2243      	movs	r2, #67	@ 0x43
 80067c6:	2101      	movs	r1, #1
 80067c8:	5499      	strb	r1, [r3, r2]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2244      	movs	r2, #68	@ 0x44
 80067ce:	2101      	movs	r1, #1
 80067d0:	5499      	strb	r1, [r3, r2]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2245      	movs	r2, #69	@ 0x45
 80067d6:	2101      	movs	r1, #1
 80067d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	223d      	movs	r2, #61	@ 0x3d
 80067de:	2101      	movs	r1, #1
 80067e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	0018      	movs	r0, r3
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b002      	add	sp, #8
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80067f4:	46c0      	nop			@ (mov r8, r8)
 80067f6:	46bd      	mov	sp, r7
 80067f8:	b002      	add	sp, #8
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d108      	bne.n	800681e <HAL_TIM_OC_Start+0x22>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	223e      	movs	r2, #62	@ 0x3e
 8006810:	5c9b      	ldrb	r3, [r3, r2]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	1e5a      	subs	r2, r3, #1
 8006818:	4193      	sbcs	r3, r2
 800681a:	b2db      	uxtb	r3, r3
 800681c:	e01f      	b.n	800685e <HAL_TIM_OC_Start+0x62>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b04      	cmp	r3, #4
 8006822:	d108      	bne.n	8006836 <HAL_TIM_OC_Start+0x3a>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	223f      	movs	r2, #63	@ 0x3f
 8006828:	5c9b      	ldrb	r3, [r3, r2]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	1e5a      	subs	r2, r3, #1
 8006830:	4193      	sbcs	r3, r2
 8006832:	b2db      	uxtb	r3, r3
 8006834:	e013      	b.n	800685e <HAL_TIM_OC_Start+0x62>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b08      	cmp	r3, #8
 800683a:	d108      	bne.n	800684e <HAL_TIM_OC_Start+0x52>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2240      	movs	r2, #64	@ 0x40
 8006840:	5c9b      	ldrb	r3, [r3, r2]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	1e5a      	subs	r2, r3, #1
 8006848:	4193      	sbcs	r3, r2
 800684a:	b2db      	uxtb	r3, r3
 800684c:	e007      	b.n	800685e <HAL_TIM_OC_Start+0x62>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2241      	movs	r2, #65	@ 0x41
 8006852:	5c9b      	ldrb	r3, [r3, r2]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	1e5a      	subs	r2, r3, #1
 800685a:	4193      	sbcs	r3, r2
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <HAL_TIM_OC_Start+0x6a>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e06e      	b.n	8006944 <HAL_TIM_OC_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d104      	bne.n	8006876 <HAL_TIM_OC_Start+0x7a>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	223e      	movs	r2, #62	@ 0x3e
 8006870:	2102      	movs	r1, #2
 8006872:	5499      	strb	r1, [r3, r2]
 8006874:	e013      	b.n	800689e <HAL_TIM_OC_Start+0xa2>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b04      	cmp	r3, #4
 800687a:	d104      	bne.n	8006886 <HAL_TIM_OC_Start+0x8a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	223f      	movs	r2, #63	@ 0x3f
 8006880:	2102      	movs	r1, #2
 8006882:	5499      	strb	r1, [r3, r2]
 8006884:	e00b      	b.n	800689e <HAL_TIM_OC_Start+0xa2>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d104      	bne.n	8006896 <HAL_TIM_OC_Start+0x9a>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2240      	movs	r2, #64	@ 0x40
 8006890:	2102      	movs	r1, #2
 8006892:	5499      	strb	r1, [r3, r2]
 8006894:	e003      	b.n	800689e <HAL_TIM_OC_Start+0xa2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2241      	movs	r2, #65	@ 0x41
 800689a:	2102      	movs	r1, #2
 800689c:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	2201      	movs	r2, #1
 80068a6:	0018      	movs	r0, r3
 80068a8:	f001 f8d2 	bl	8007a50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a26      	ldr	r2, [pc, #152]	@ (800694c <HAL_TIM_OC_Start+0x150>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00e      	beq.n	80068d4 <HAL_TIM_OC_Start+0xd8>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a25      	ldr	r2, [pc, #148]	@ (8006950 <HAL_TIM_OC_Start+0x154>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d009      	beq.n	80068d4 <HAL_TIM_OC_Start+0xd8>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a23      	ldr	r2, [pc, #140]	@ (8006954 <HAL_TIM_OC_Start+0x158>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d004      	beq.n	80068d4 <HAL_TIM_OC_Start+0xd8>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a22      	ldr	r2, [pc, #136]	@ (8006958 <HAL_TIM_OC_Start+0x15c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d101      	bne.n	80068d8 <HAL_TIM_OC_Start+0xdc>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <HAL_TIM_OC_Start+0xde>
 80068d8:	2300      	movs	r3, #0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d008      	beq.n	80068f0 <HAL_TIM_OC_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2180      	movs	r1, #128	@ 0x80
 80068ea:	0209      	lsls	r1, r1, #8
 80068ec:	430a      	orrs	r2, r1
 80068ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a15      	ldr	r2, [pc, #84]	@ (800694c <HAL_TIM_OC_Start+0x150>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d009      	beq.n	800690e <HAL_TIM_OC_Start+0x112>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a17      	ldr	r2, [pc, #92]	@ (800695c <HAL_TIM_OC_Start+0x160>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d004      	beq.n	800690e <HAL_TIM_OC_Start+0x112>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a11      	ldr	r2, [pc, #68]	@ (8006950 <HAL_TIM_OC_Start+0x154>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d111      	bne.n	8006932 <HAL_TIM_OC_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2207      	movs	r2, #7
 8006916:	4013      	ands	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b06      	cmp	r3, #6
 800691e:	d010      	beq.n	8006942 <HAL_TIM_OC_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2101      	movs	r1, #1
 800692c:	430a      	orrs	r2, r1
 800692e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006930:	e007      	b.n	8006942 <HAL_TIM_OC_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2101      	movs	r1, #1
 800693e:	430a      	orrs	r2, r1
 8006940:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	0018      	movs	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	b004      	add	sp, #16
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40012c00 	.word	0x40012c00
 8006950:	40014000 	.word	0x40014000
 8006954:	40014400 	.word	0x40014400
 8006958:	40014800 	.word	0x40014800
 800695c:	40000400 	.word	0x40000400

08006960 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e042      	b.n	80069f8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	223d      	movs	r2, #61	@ 0x3d
 8006976:	5c9b      	ldrb	r3, [r3, r2]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d107      	bne.n	800698e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	223c      	movs	r2, #60	@ 0x3c
 8006982:	2100      	movs	r1, #0
 8006984:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	0018      	movs	r0, r3
 800698a:	f000 f839 	bl	8006a00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	223d      	movs	r2, #61	@ 0x3d
 8006992:	2102      	movs	r1, #2
 8006994:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3304      	adds	r3, #4
 800699e:	0019      	movs	r1, r3
 80069a0:	0010      	movs	r0, r2
 80069a2:	f000 fca9 	bl	80072f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2246      	movs	r2, #70	@ 0x46
 80069aa:	2101      	movs	r1, #1
 80069ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	223e      	movs	r2, #62	@ 0x3e
 80069b2:	2101      	movs	r1, #1
 80069b4:	5499      	strb	r1, [r3, r2]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	223f      	movs	r2, #63	@ 0x3f
 80069ba:	2101      	movs	r1, #1
 80069bc:	5499      	strb	r1, [r3, r2]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2240      	movs	r2, #64	@ 0x40
 80069c2:	2101      	movs	r1, #1
 80069c4:	5499      	strb	r1, [r3, r2]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2241      	movs	r2, #65	@ 0x41
 80069ca:	2101      	movs	r1, #1
 80069cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2242      	movs	r2, #66	@ 0x42
 80069d2:	2101      	movs	r1, #1
 80069d4:	5499      	strb	r1, [r3, r2]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2243      	movs	r2, #67	@ 0x43
 80069da:	2101      	movs	r1, #1
 80069dc:	5499      	strb	r1, [r3, r2]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2244      	movs	r2, #68	@ 0x44
 80069e2:	2101      	movs	r1, #1
 80069e4:	5499      	strb	r1, [r3, r2]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2245      	movs	r2, #69	@ 0x45
 80069ea:	2101      	movs	r1, #1
 80069ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	223d      	movs	r2, #61	@ 0x3d
 80069f2:	2101      	movs	r1, #1
 80069f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	0018      	movs	r0, r3
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b002      	add	sp, #8
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a08:	46c0      	nop			@ (mov r8, r8)
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	b002      	add	sp, #8
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d108      	bne.n	8006a32 <HAL_TIM_PWM_Start+0x22>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	223e      	movs	r2, #62	@ 0x3e
 8006a24:	5c9b      	ldrb	r3, [r3, r2]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	1e5a      	subs	r2, r3, #1
 8006a2c:	4193      	sbcs	r3, r2
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	e01f      	b.n	8006a72 <HAL_TIM_PWM_Start+0x62>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d108      	bne.n	8006a4a <HAL_TIM_PWM_Start+0x3a>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	223f      	movs	r2, #63	@ 0x3f
 8006a3c:	5c9b      	ldrb	r3, [r3, r2]
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	1e5a      	subs	r2, r3, #1
 8006a44:	4193      	sbcs	r3, r2
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	e013      	b.n	8006a72 <HAL_TIM_PWM_Start+0x62>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d108      	bne.n	8006a62 <HAL_TIM_PWM_Start+0x52>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2240      	movs	r2, #64	@ 0x40
 8006a54:	5c9b      	ldrb	r3, [r3, r2]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	1e5a      	subs	r2, r3, #1
 8006a5c:	4193      	sbcs	r3, r2
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	e007      	b.n	8006a72 <HAL_TIM_PWM_Start+0x62>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2241      	movs	r2, #65	@ 0x41
 8006a66:	5c9b      	ldrb	r3, [r3, r2]
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	1e5a      	subs	r2, r3, #1
 8006a6e:	4193      	sbcs	r3, r2
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e06e      	b.n	8006b58 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d104      	bne.n	8006a8a <HAL_TIM_PWM_Start+0x7a>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	223e      	movs	r2, #62	@ 0x3e
 8006a84:	2102      	movs	r1, #2
 8006a86:	5499      	strb	r1, [r3, r2]
 8006a88:	e013      	b.n	8006ab2 <HAL_TIM_PWM_Start+0xa2>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d104      	bne.n	8006a9a <HAL_TIM_PWM_Start+0x8a>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	223f      	movs	r2, #63	@ 0x3f
 8006a94:	2102      	movs	r1, #2
 8006a96:	5499      	strb	r1, [r3, r2]
 8006a98:	e00b      	b.n	8006ab2 <HAL_TIM_PWM_Start+0xa2>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d104      	bne.n	8006aaa <HAL_TIM_PWM_Start+0x9a>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2240      	movs	r2, #64	@ 0x40
 8006aa4:	2102      	movs	r1, #2
 8006aa6:	5499      	strb	r1, [r3, r2]
 8006aa8:	e003      	b.n	8006ab2 <HAL_TIM_PWM_Start+0xa2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2241      	movs	r2, #65	@ 0x41
 8006aae:	2102      	movs	r1, #2
 8006ab0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	0018      	movs	r0, r3
 8006abc:	f000 ffc8 	bl	8007a50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a26      	ldr	r2, [pc, #152]	@ (8006b60 <HAL_TIM_PWM_Start+0x150>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00e      	beq.n	8006ae8 <HAL_TIM_PWM_Start+0xd8>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a25      	ldr	r2, [pc, #148]	@ (8006b64 <HAL_TIM_PWM_Start+0x154>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d009      	beq.n	8006ae8 <HAL_TIM_PWM_Start+0xd8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a23      	ldr	r2, [pc, #140]	@ (8006b68 <HAL_TIM_PWM_Start+0x158>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d004      	beq.n	8006ae8 <HAL_TIM_PWM_Start+0xd8>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a22      	ldr	r2, [pc, #136]	@ (8006b6c <HAL_TIM_PWM_Start+0x15c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d101      	bne.n	8006aec <HAL_TIM_PWM_Start+0xdc>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <HAL_TIM_PWM_Start+0xde>
 8006aec:	2300      	movs	r3, #0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d008      	beq.n	8006b04 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2180      	movs	r1, #128	@ 0x80
 8006afe:	0209      	lsls	r1, r1, #8
 8006b00:	430a      	orrs	r2, r1
 8006b02:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a15      	ldr	r2, [pc, #84]	@ (8006b60 <HAL_TIM_PWM_Start+0x150>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d009      	beq.n	8006b22 <HAL_TIM_PWM_Start+0x112>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a17      	ldr	r2, [pc, #92]	@ (8006b70 <HAL_TIM_PWM_Start+0x160>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d004      	beq.n	8006b22 <HAL_TIM_PWM_Start+0x112>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a11      	ldr	r2, [pc, #68]	@ (8006b64 <HAL_TIM_PWM_Start+0x154>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d111      	bne.n	8006b46 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2207      	movs	r2, #7
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b06      	cmp	r3, #6
 8006b32:	d010      	beq.n	8006b56 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2101      	movs	r1, #1
 8006b40:	430a      	orrs	r2, r1
 8006b42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b44:	e007      	b.n	8006b56 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2101      	movs	r1, #1
 8006b52:	430a      	orrs	r2, r1
 8006b54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	0018      	movs	r0, r3
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	b004      	add	sp, #16
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40012c00 	.word	0x40012c00
 8006b64:	40014000 	.word	0x40014000
 8006b68:	40014400 	.word	0x40014400
 8006b6c:	40014800 	.word	0x40014800
 8006b70:	40000400 	.word	0x40000400

08006b74 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	2200      	movs	r2, #0
 8006b86:	0018      	movs	r0, r3
 8006b88:	f000 ff62 	bl	8007a50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a2f      	ldr	r2, [pc, #188]	@ (8006c50 <HAL_TIM_PWM_Stop+0xdc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00e      	beq.n	8006bb4 <HAL_TIM_PWM_Stop+0x40>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a2e      	ldr	r2, [pc, #184]	@ (8006c54 <HAL_TIM_PWM_Stop+0xe0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d009      	beq.n	8006bb4 <HAL_TIM_PWM_Stop+0x40>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8006c58 <HAL_TIM_PWM_Stop+0xe4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d004      	beq.n	8006bb4 <HAL_TIM_PWM_Stop+0x40>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a2b      	ldr	r2, [pc, #172]	@ (8006c5c <HAL_TIM_PWM_Stop+0xe8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d101      	bne.n	8006bb8 <HAL_TIM_PWM_Stop+0x44>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <HAL_TIM_PWM_Stop+0x46>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d013      	beq.n	8006be6 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	4a26      	ldr	r2, [pc, #152]	@ (8006c60 <HAL_TIM_PWM_Stop+0xec>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d10d      	bne.n	8006be6 <HAL_TIM_PWM_Stop+0x72>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	4a24      	ldr	r2, [pc, #144]	@ (8006c64 <HAL_TIM_PWM_Stop+0xf0>)
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	d107      	bne.n	8006be6 <HAL_TIM_PWM_Stop+0x72>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4921      	ldr	r1, [pc, #132]	@ (8006c68 <HAL_TIM_PWM_Stop+0xf4>)
 8006be2:	400a      	ands	r2, r1
 8006be4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	4a1c      	ldr	r2, [pc, #112]	@ (8006c60 <HAL_TIM_PWM_Stop+0xec>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	d10d      	bne.n	8006c0e <HAL_TIM_PWM_Stop+0x9a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8006c64 <HAL_TIM_PWM_Stop+0xf0>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d107      	bne.n	8006c0e <HAL_TIM_PWM_Stop+0x9a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2101      	movs	r1, #1
 8006c0a:	438a      	bics	r2, r1
 8006c0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d104      	bne.n	8006c1e <HAL_TIM_PWM_Stop+0xaa>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	223e      	movs	r2, #62	@ 0x3e
 8006c18:	2101      	movs	r1, #1
 8006c1a:	5499      	strb	r1, [r3, r2]
 8006c1c:	e013      	b.n	8006c46 <HAL_TIM_PWM_Stop+0xd2>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	d104      	bne.n	8006c2e <HAL_TIM_PWM_Stop+0xba>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	223f      	movs	r2, #63	@ 0x3f
 8006c28:	2101      	movs	r1, #1
 8006c2a:	5499      	strb	r1, [r3, r2]
 8006c2c:	e00b      	b.n	8006c46 <HAL_TIM_PWM_Stop+0xd2>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d104      	bne.n	8006c3e <HAL_TIM_PWM_Stop+0xca>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2240      	movs	r2, #64	@ 0x40
 8006c38:	2101      	movs	r1, #1
 8006c3a:	5499      	strb	r1, [r3, r2]
 8006c3c:	e003      	b.n	8006c46 <HAL_TIM_PWM_Stop+0xd2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2241      	movs	r2, #65	@ 0x41
 8006c42:	2101      	movs	r1, #1
 8006c44:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	0018      	movs	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	b002      	add	sp, #8
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40012c00 	.word	0x40012c00
 8006c54:	40014000 	.word	0x40014000
 8006c58:	40014400 	.word	0x40014400
 8006c5c:	40014800 	.word	0x40014800
 8006c60:	00001111 	.word	0x00001111
 8006c64:	00000444 	.word	0x00000444
 8006c68:	ffff7fff 	.word	0xffff7fff

08006c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2202      	movs	r2, #2
 8006c88:	4013      	ands	r3, r2
 8006c8a:	d021      	beq.n	8006cd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	4013      	ands	r3, r2
 8006c92:	d01d      	beq.n	8006cd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2203      	movs	r2, #3
 8006c9a:	4252      	negs	r2, r2
 8006c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	2203      	movs	r2, #3
 8006cac:	4013      	ands	r3, r2
 8006cae:	d004      	beq.n	8006cba <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	f000 fb08 	bl	80072c8 <HAL_TIM_IC_CaptureCallback>
 8006cb8:	e007      	b.n	8006cca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	f000 fafb 	bl	80072b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f000 fb07 	bl	80072d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2204      	movs	r2, #4
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	d022      	beq.n	8006d1e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2204      	movs	r2, #4
 8006cdc:	4013      	ands	r3, r2
 8006cde:	d01e      	beq.n	8006d1e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2205      	movs	r2, #5
 8006ce6:	4252      	negs	r2, r2
 8006ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2202      	movs	r2, #2
 8006cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	23c0      	movs	r3, #192	@ 0xc0
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	d004      	beq.n	8006d08 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	0018      	movs	r0, r3
 8006d02:	f000 fae1 	bl	80072c8 <HAL_TIM_IC_CaptureCallback>
 8006d06:	e007      	b.n	8006d18 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f000 fad4 	bl	80072b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	0018      	movs	r0, r3
 8006d14:	f000 fae0 	bl	80072d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2208      	movs	r2, #8
 8006d22:	4013      	ands	r3, r2
 8006d24:	d021      	beq.n	8006d6a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2208      	movs	r2, #8
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	d01d      	beq.n	8006d6a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2209      	movs	r2, #9
 8006d34:	4252      	negs	r2, r2
 8006d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2204      	movs	r2, #4
 8006d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	2203      	movs	r2, #3
 8006d46:	4013      	ands	r3, r2
 8006d48:	d004      	beq.n	8006d54 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	f000 fabb 	bl	80072c8 <HAL_TIM_IC_CaptureCallback>
 8006d52:	e007      	b.n	8006d64 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	0018      	movs	r0, r3
 8006d58:	f000 faae 	bl	80072b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f000 faba 	bl	80072d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2210      	movs	r2, #16
 8006d6e:	4013      	ands	r3, r2
 8006d70:	d022      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2210      	movs	r2, #16
 8006d76:	4013      	ands	r3, r2
 8006d78:	d01e      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2211      	movs	r2, #17
 8006d80:	4252      	negs	r2, r2
 8006d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2208      	movs	r2, #8
 8006d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69da      	ldr	r2, [r3, #28]
 8006d90:	23c0      	movs	r3, #192	@ 0xc0
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4013      	ands	r3, r2
 8006d96:	d004      	beq.n	8006da2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f000 fa94 	bl	80072c8 <HAL_TIM_IC_CaptureCallback>
 8006da0:	e007      	b.n	8006db2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	0018      	movs	r0, r3
 8006da6:	f000 fa87 	bl	80072b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	0018      	movs	r0, r3
 8006dae:	f000 fa93 	bl	80072d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	d00c      	beq.n	8006dda <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	d008      	beq.n	8006dda <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	4252      	negs	r2, r2
 8006dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f7fb ffa3 	bl	8002d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2280      	movs	r2, #128	@ 0x80
 8006dde:	4013      	ands	r3, r2
 8006de0:	d00c      	beq.n	8006dfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2280      	movs	r2, #128	@ 0x80
 8006de6:	4013      	ands	r3, r2
 8006de8:	d008      	beq.n	8006dfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2281      	movs	r2, #129	@ 0x81
 8006df0:	4252      	negs	r2, r2
 8006df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	0018      	movs	r0, r3
 8006df8:	f000 ff0c 	bl	8007c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2240      	movs	r2, #64	@ 0x40
 8006e00:	4013      	ands	r3, r2
 8006e02:	d00c      	beq.n	8006e1e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2240      	movs	r2, #64	@ 0x40
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d008      	beq.n	8006e1e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2241      	movs	r2, #65	@ 0x41
 8006e12:	4252      	negs	r2, r2
 8006e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f000 fa65 	bl	80072e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2220      	movs	r2, #32
 8006e22:	4013      	ands	r3, r2
 8006e24:	d00c      	beq.n	8006e40 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	d008      	beq.n	8006e40 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2221      	movs	r2, #33	@ 0x21
 8006e34:	4252      	negs	r2, r2
 8006e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f000 fee2 	bl	8007c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e40:	46c0      	nop			@ (mov r8, r8)
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b004      	add	sp, #16
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e54:	2317      	movs	r3, #23
 8006e56:	18fb      	adds	r3, r7, r3
 8006e58:	2200      	movs	r2, #0
 8006e5a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	223c      	movs	r2, #60	@ 0x3c
 8006e60:	5c9b      	ldrb	r3, [r3, r2]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d101      	bne.n	8006e6a <HAL_TIM_OC_ConfigChannel+0x22>
 8006e66:	2302      	movs	r3, #2
 8006e68:	e042      	b.n	8006ef0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	223c      	movs	r2, #60	@ 0x3c
 8006e6e:	2101      	movs	r1, #1
 8006e70:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b0c      	cmp	r3, #12
 8006e76:	d027      	beq.n	8006ec8 <HAL_TIM_OC_ConfigChannel+0x80>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b0c      	cmp	r3, #12
 8006e7c:	d82c      	bhi.n	8006ed8 <HAL_TIM_OC_ConfigChannel+0x90>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d019      	beq.n	8006eb8 <HAL_TIM_OC_ConfigChannel+0x70>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d826      	bhi.n	8006ed8 <HAL_TIM_OC_ConfigChannel+0x90>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <HAL_TIM_OC_ConfigChannel+0x50>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d008      	beq.n	8006ea8 <HAL_TIM_OC_ConfigChannel+0x60>
 8006e96:	e01f      	b.n	8006ed8 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	0011      	movs	r1, r2
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	f000 faad 	bl	8007400 <TIM_OC1_SetConfig>
      break;
 8006ea6:	e01c      	b.n	8006ee2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	0011      	movs	r1, r2
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	f000 fb2d 	bl	8007510 <TIM_OC2_SetConfig>
      break;
 8006eb6:	e014      	b.n	8006ee2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	0011      	movs	r1, r2
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f000 fba9 	bl	8007618 <TIM_OC3_SetConfig>
      break;
 8006ec6:	e00c      	b.n	8006ee2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	0011      	movs	r1, r2
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	f000 fc27 	bl	8007724 <TIM_OC4_SetConfig>
      break;
 8006ed6:	e004      	b.n	8006ee2 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006ed8:	2317      	movs	r3, #23
 8006eda:	18fb      	adds	r3, r7, r3
 8006edc:	2201      	movs	r2, #1
 8006ede:	701a      	strb	r2, [r3, #0]
      break;
 8006ee0:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	223c      	movs	r2, #60	@ 0x3c
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	5499      	strb	r1, [r3, r2]

  return status;
 8006eea:	2317      	movs	r3, #23
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	781b      	ldrb	r3, [r3, #0]
}
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b006      	add	sp, #24
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f04:	2317      	movs	r3, #23
 8006f06:	18fb      	adds	r3, r7, r3
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	223c      	movs	r2, #60	@ 0x3c
 8006f10:	5c9b      	ldrb	r3, [r3, r2]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_TIM_PWM_ConfigChannel+0x22>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e0ad      	b.n	8007076 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	223c      	movs	r2, #60	@ 0x3c
 8006f1e:	2101      	movs	r1, #1
 8006f20:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b0c      	cmp	r3, #12
 8006f26:	d100      	bne.n	8006f2a <HAL_TIM_PWM_ConfigChannel+0x32>
 8006f28:	e076      	b.n	8007018 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b0c      	cmp	r3, #12
 8006f2e:	d900      	bls.n	8006f32 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006f30:	e095      	b.n	800705e <HAL_TIM_PWM_ConfigChannel+0x166>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d04e      	beq.n	8006fd6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d900      	bls.n	8006f40 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006f3e:	e08e      	b.n	800705e <HAL_TIM_PWM_ConfigChannel+0x166>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_TIM_PWM_ConfigChannel+0x56>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d021      	beq.n	8006f90 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006f4c:	e087      	b.n	800705e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	0011      	movs	r1, r2
 8006f56:	0018      	movs	r0, r3
 8006f58:	f000 fa52 	bl	8007400 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	699a      	ldr	r2, [r3, #24]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2108      	movs	r1, #8
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699a      	ldr	r2, [r3, #24]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2104      	movs	r1, #4
 8006f78:	438a      	bics	r2, r1
 8006f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6999      	ldr	r1, [r3, #24]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	691a      	ldr	r2, [r3, #16]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	619a      	str	r2, [r3, #24]
      break;
 8006f8e:	e06b      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	0011      	movs	r1, r2
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f000 fab9 	bl	8007510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	699a      	ldr	r2, [r3, #24]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2180      	movs	r1, #128	@ 0x80
 8006faa:	0109      	lsls	r1, r1, #4
 8006fac:	430a      	orrs	r2, r1
 8006fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4931      	ldr	r1, [pc, #196]	@ (8007080 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006fbc:	400a      	ands	r2, r1
 8006fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6999      	ldr	r1, [r3, #24]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	021a      	lsls	r2, r3, #8
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	619a      	str	r2, [r3, #24]
      break;
 8006fd4:	e048      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	0011      	movs	r1, r2
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f000 fb1a 	bl	8007618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69da      	ldr	r2, [r3, #28]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2108      	movs	r1, #8
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69da      	ldr	r2, [r3, #28]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2104      	movs	r1, #4
 8007000:	438a      	bics	r2, r1
 8007002:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69d9      	ldr	r1, [r3, #28]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	691a      	ldr	r2, [r3, #16]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	61da      	str	r2, [r3, #28]
      break;
 8007016:	e027      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	0011      	movs	r1, r2
 8007020:	0018      	movs	r0, r3
 8007022:	f000 fb7f 	bl	8007724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69da      	ldr	r2, [r3, #28]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2180      	movs	r1, #128	@ 0x80
 8007032:	0109      	lsls	r1, r1, #4
 8007034:	430a      	orrs	r2, r1
 8007036:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69da      	ldr	r2, [r3, #28]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	490f      	ldr	r1, [pc, #60]	@ (8007080 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007044:	400a      	ands	r2, r1
 8007046:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69d9      	ldr	r1, [r3, #28]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	021a      	lsls	r2, r3, #8
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	61da      	str	r2, [r3, #28]
      break;
 800705c:	e004      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800705e:	2317      	movs	r3, #23
 8007060:	18fb      	adds	r3, r7, r3
 8007062:	2201      	movs	r2, #1
 8007064:	701a      	strb	r2, [r3, #0]
      break;
 8007066:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	223c      	movs	r2, #60	@ 0x3c
 800706c:	2100      	movs	r1, #0
 800706e:	5499      	strb	r1, [r3, r2]

  return status;
 8007070:	2317      	movs	r3, #23
 8007072:	18fb      	adds	r3, r7, r3
 8007074:	781b      	ldrb	r3, [r3, #0]
}
 8007076:	0018      	movs	r0, r3
 8007078:	46bd      	mov	sp, r7
 800707a:	b006      	add	sp, #24
 800707c:	bd80      	pop	{r7, pc}
 800707e:	46c0      	nop			@ (mov r8, r8)
 8007080:	fffffbff 	.word	0xfffffbff

08007084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800708e:	230f      	movs	r3, #15
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	2200      	movs	r2, #0
 8007094:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	223c      	movs	r2, #60	@ 0x3c
 800709a:	5c9b      	ldrb	r3, [r3, r2]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d101      	bne.n	80070a4 <HAL_TIM_ConfigClockSource+0x20>
 80070a0:	2302      	movs	r3, #2
 80070a2:	e0bc      	b.n	800721e <HAL_TIM_ConfigClockSource+0x19a>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	223c      	movs	r2, #60	@ 0x3c
 80070a8:	2101      	movs	r1, #1
 80070aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	223d      	movs	r2, #61	@ 0x3d
 80070b0:	2102      	movs	r1, #2
 80070b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2277      	movs	r2, #119	@ 0x77
 80070c0:	4393      	bics	r3, r2
 80070c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4a58      	ldr	r2, [pc, #352]	@ (8007228 <HAL_TIM_ConfigClockSource+0x1a4>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2280      	movs	r2, #128	@ 0x80
 80070da:	0192      	lsls	r2, r2, #6
 80070dc:	4293      	cmp	r3, r2
 80070de:	d040      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0xde>
 80070e0:	2280      	movs	r2, #128	@ 0x80
 80070e2:	0192      	lsls	r2, r2, #6
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d900      	bls.n	80070ea <HAL_TIM_ConfigClockSource+0x66>
 80070e8:	e088      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x178>
 80070ea:	2280      	movs	r2, #128	@ 0x80
 80070ec:	0152      	lsls	r2, r2, #5
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d100      	bne.n	80070f4 <HAL_TIM_ConfigClockSource+0x70>
 80070f2:	e088      	b.n	8007206 <HAL_TIM_ConfigClockSource+0x182>
 80070f4:	2280      	movs	r2, #128	@ 0x80
 80070f6:	0152      	lsls	r2, r2, #5
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d900      	bls.n	80070fe <HAL_TIM_ConfigClockSource+0x7a>
 80070fc:	e07e      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x178>
 80070fe:	2b70      	cmp	r3, #112	@ 0x70
 8007100:	d018      	beq.n	8007134 <HAL_TIM_ConfigClockSource+0xb0>
 8007102:	d900      	bls.n	8007106 <HAL_TIM_ConfigClockSource+0x82>
 8007104:	e07a      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x178>
 8007106:	2b60      	cmp	r3, #96	@ 0x60
 8007108:	d04f      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x126>
 800710a:	d900      	bls.n	800710e <HAL_TIM_ConfigClockSource+0x8a>
 800710c:	e076      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x178>
 800710e:	2b50      	cmp	r3, #80	@ 0x50
 8007110:	d03b      	beq.n	800718a <HAL_TIM_ConfigClockSource+0x106>
 8007112:	d900      	bls.n	8007116 <HAL_TIM_ConfigClockSource+0x92>
 8007114:	e072      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x178>
 8007116:	2b40      	cmp	r3, #64	@ 0x40
 8007118:	d057      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0x146>
 800711a:	d900      	bls.n	800711e <HAL_TIM_ConfigClockSource+0x9a>
 800711c:	e06e      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x178>
 800711e:	2b30      	cmp	r3, #48	@ 0x30
 8007120:	d063      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x166>
 8007122:	d86b      	bhi.n	80071fc <HAL_TIM_ConfigClockSource+0x178>
 8007124:	2b20      	cmp	r3, #32
 8007126:	d060      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x166>
 8007128:	d868      	bhi.n	80071fc <HAL_TIM_ConfigClockSource+0x178>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d05d      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x166>
 800712e:	2b10      	cmp	r3, #16
 8007130:	d05b      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x166>
 8007132:	e063      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007144:	f000 fc64 	bl	8007a10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2277      	movs	r2, #119	@ 0x77
 8007154:	4313      	orrs	r3, r2
 8007156:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	609a      	str	r2, [r3, #8]
      break;
 8007160:	e052      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007172:	f000 fc4d 	bl	8007a10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2180      	movs	r1, #128	@ 0x80
 8007182:	01c9      	lsls	r1, r1, #7
 8007184:	430a      	orrs	r2, r1
 8007186:	609a      	str	r2, [r3, #8]
      break;
 8007188:	e03e      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007196:	001a      	movs	r2, r3
 8007198:	f000 fbc0 	bl	800791c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2150      	movs	r1, #80	@ 0x50
 80071a2:	0018      	movs	r0, r3
 80071a4:	f000 fc1a 	bl	80079dc <TIM_ITRx_SetConfig>
      break;
 80071a8:	e02e      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071b6:	001a      	movs	r2, r3
 80071b8:	f000 fbde 	bl	8007978 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2160      	movs	r1, #96	@ 0x60
 80071c2:	0018      	movs	r0, r3
 80071c4:	f000 fc0a 	bl	80079dc <TIM_ITRx_SetConfig>
      break;
 80071c8:	e01e      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d6:	001a      	movs	r2, r3
 80071d8:	f000 fba0 	bl	800791c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2140      	movs	r1, #64	@ 0x40
 80071e2:	0018      	movs	r0, r3
 80071e4:	f000 fbfa 	bl	80079dc <TIM_ITRx_SetConfig>
      break;
 80071e8:	e00e      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	0019      	movs	r1, r3
 80071f4:	0010      	movs	r0, r2
 80071f6:	f000 fbf1 	bl	80079dc <TIM_ITRx_SetConfig>
      break;
 80071fa:	e005      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80071fc:	230f      	movs	r3, #15
 80071fe:	18fb      	adds	r3, r7, r3
 8007200:	2201      	movs	r2, #1
 8007202:	701a      	strb	r2, [r3, #0]
      break;
 8007204:	e000      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007206:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	223d      	movs	r2, #61	@ 0x3d
 800720c:	2101      	movs	r1, #1
 800720e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	223c      	movs	r2, #60	@ 0x3c
 8007214:	2100      	movs	r1, #0
 8007216:	5499      	strb	r1, [r3, r2]

  return status;
 8007218:	230f      	movs	r3, #15
 800721a:	18fb      	adds	r3, r7, r3
 800721c:	781b      	ldrb	r3, [r3, #0]
}
 800721e:	0018      	movs	r0, r3
 8007220:	46bd      	mov	sp, r7
 8007222:	b004      	add	sp, #16
 8007224:	bd80      	pop	{r7, pc}
 8007226:	46c0      	nop			@ (mov r8, r8)
 8007228:	ffff00ff 	.word	0xffff00ff

0800722c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	223c      	movs	r2, #60	@ 0x3c
 800723a:	5c9b      	ldrb	r3, [r3, r2]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007240:	2302      	movs	r3, #2
 8007242:	e032      	b.n	80072aa <HAL_TIM_SlaveConfigSynchro+0x7e>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	223c      	movs	r2, #60	@ 0x3c
 8007248:	2101      	movs	r1, #1
 800724a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	223d      	movs	r2, #61	@ 0x3d
 8007250:	2102      	movs	r1, #2
 8007252:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	0011      	movs	r1, r2
 800725a:	0018      	movs	r0, r3
 800725c:	f000 facc 	bl	80077f8 <TIM_SlaveTimer_SetConfig>
 8007260:	1e03      	subs	r3, r0, #0
 8007262:	d009      	beq.n	8007278 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	223d      	movs	r2, #61	@ 0x3d
 8007268:	2101      	movs	r1, #1
 800726a:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	223c      	movs	r2, #60	@ 0x3c
 8007270:	2100      	movs	r1, #0
 8007272:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e018      	b.n	80072aa <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2140      	movs	r1, #64	@ 0x40
 8007284:	438a      	bics	r2, r1
 8007286:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4908      	ldr	r1, [pc, #32]	@ (80072b4 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8007294:	400a      	ands	r2, r1
 8007296:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	223d      	movs	r2, #61	@ 0x3d
 800729c:	2101      	movs	r1, #1
 800729e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	223c      	movs	r2, #60	@ 0x3c
 80072a4:	2100      	movs	r1, #0
 80072a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	0018      	movs	r0, r3
 80072ac:	46bd      	mov	sp, r7
 80072ae:	b002      	add	sp, #8
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	46c0      	nop			@ (mov r8, r8)
 80072b4:	ffffbfff 	.word	0xffffbfff

080072b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072c0:	46c0      	nop			@ (mov r8, r8)
 80072c2:	46bd      	mov	sp, r7
 80072c4:	b002      	add	sp, #8
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072d0:	46c0      	nop			@ (mov r8, r8)
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b002      	add	sp, #8
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072e0:	46c0      	nop			@ (mov r8, r8)
 80072e2:	46bd      	mov	sp, r7
 80072e4:	b002      	add	sp, #8
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072f0:	46c0      	nop			@ (mov r8, r8)
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b002      	add	sp, #8
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a36      	ldr	r2, [pc, #216]	@ (80073e4 <TIM_Base_SetConfig+0xec>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d003      	beq.n	8007318 <TIM_Base_SetConfig+0x20>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a35      	ldr	r2, [pc, #212]	@ (80073e8 <TIM_Base_SetConfig+0xf0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d108      	bne.n	800732a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2270      	movs	r2, #112	@ 0x70
 800731c:	4393      	bics	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a2d      	ldr	r2, [pc, #180]	@ (80073e4 <TIM_Base_SetConfig+0xec>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d013      	beq.n	800735a <TIM_Base_SetConfig+0x62>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a2c      	ldr	r2, [pc, #176]	@ (80073e8 <TIM_Base_SetConfig+0xf0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00f      	beq.n	800735a <TIM_Base_SetConfig+0x62>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a2b      	ldr	r2, [pc, #172]	@ (80073ec <TIM_Base_SetConfig+0xf4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00b      	beq.n	800735a <TIM_Base_SetConfig+0x62>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a2a      	ldr	r2, [pc, #168]	@ (80073f0 <TIM_Base_SetConfig+0xf8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d007      	beq.n	800735a <TIM_Base_SetConfig+0x62>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a29      	ldr	r2, [pc, #164]	@ (80073f4 <TIM_Base_SetConfig+0xfc>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d003      	beq.n	800735a <TIM_Base_SetConfig+0x62>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a28      	ldr	r2, [pc, #160]	@ (80073f8 <TIM_Base_SetConfig+0x100>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d108      	bne.n	800736c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4a27      	ldr	r2, [pc, #156]	@ (80073fc <TIM_Base_SetConfig+0x104>)
 800735e:	4013      	ands	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2280      	movs	r2, #128	@ 0x80
 8007370:	4393      	bics	r3, r2
 8007372:	001a      	movs	r2, r3
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	4313      	orrs	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	689a      	ldr	r2, [r3, #8]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a13      	ldr	r2, [pc, #76]	@ (80073e4 <TIM_Base_SetConfig+0xec>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d00b      	beq.n	80073b2 <TIM_Base_SetConfig+0xba>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a14      	ldr	r2, [pc, #80]	@ (80073f0 <TIM_Base_SetConfig+0xf8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d007      	beq.n	80073b2 <TIM_Base_SetConfig+0xba>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a13      	ldr	r2, [pc, #76]	@ (80073f4 <TIM_Base_SetConfig+0xfc>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d003      	beq.n	80073b2 <TIM_Base_SetConfig+0xba>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a12      	ldr	r2, [pc, #72]	@ (80073f8 <TIM_Base_SetConfig+0x100>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d103      	bne.n	80073ba <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	691a      	ldr	r2, [r3, #16]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	2201      	movs	r2, #1
 80073c6:	4013      	ands	r3, r2
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d106      	bne.n	80073da <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	2201      	movs	r2, #1
 80073d2:	4393      	bics	r3, r2
 80073d4:	001a      	movs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	611a      	str	r2, [r3, #16]
  }
}
 80073da:	46c0      	nop			@ (mov r8, r8)
 80073dc:	46bd      	mov	sp, r7
 80073de:	b004      	add	sp, #16
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	46c0      	nop			@ (mov r8, r8)
 80073e4:	40012c00 	.word	0x40012c00
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40002000 	.word	0x40002000
 80073f0:	40014000 	.word	0x40014000
 80073f4:	40014400 	.word	0x40014400
 80073f8:	40014800 	.word	0x40014800
 80073fc:	fffffcff 	.word	0xfffffcff

08007400 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	2201      	movs	r2, #1
 8007416:	4393      	bics	r3, r2
 8007418:	001a      	movs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2270      	movs	r2, #112	@ 0x70
 800742e:	4393      	bics	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2203      	movs	r2, #3
 8007436:	4393      	bics	r3, r2
 8007438:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2202      	movs	r2, #2
 8007448:	4393      	bics	r3, r2
 800744a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a27      	ldr	r2, [pc, #156]	@ (80074f8 <TIM_OC1_SetConfig+0xf8>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d00b      	beq.n	8007476 <TIM_OC1_SetConfig+0x76>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a26      	ldr	r2, [pc, #152]	@ (80074fc <TIM_OC1_SetConfig+0xfc>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d007      	beq.n	8007476 <TIM_OC1_SetConfig+0x76>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a25      	ldr	r2, [pc, #148]	@ (8007500 <TIM_OC1_SetConfig+0x100>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d003      	beq.n	8007476 <TIM_OC1_SetConfig+0x76>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a24      	ldr	r2, [pc, #144]	@ (8007504 <TIM_OC1_SetConfig+0x104>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d10c      	bne.n	8007490 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2208      	movs	r2, #8
 800747a:	4393      	bics	r3, r2
 800747c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2204      	movs	r2, #4
 800748c:	4393      	bics	r3, r2
 800748e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a19      	ldr	r2, [pc, #100]	@ (80074f8 <TIM_OC1_SetConfig+0xf8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00b      	beq.n	80074b0 <TIM_OC1_SetConfig+0xb0>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a18      	ldr	r2, [pc, #96]	@ (80074fc <TIM_OC1_SetConfig+0xfc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d007      	beq.n	80074b0 <TIM_OC1_SetConfig+0xb0>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a17      	ldr	r2, [pc, #92]	@ (8007500 <TIM_OC1_SetConfig+0x100>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d003      	beq.n	80074b0 <TIM_OC1_SetConfig+0xb0>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a16      	ldr	r2, [pc, #88]	@ (8007504 <TIM_OC1_SetConfig+0x104>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d111      	bne.n	80074d4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	4a15      	ldr	r2, [pc, #84]	@ (8007508 <TIM_OC1_SetConfig+0x108>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	4a14      	ldr	r2, [pc, #80]	@ (800750c <TIM_OC1_SetConfig+0x10c>)
 80074bc:	4013      	ands	r3, r2
 80074be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	621a      	str	r2, [r3, #32]
}
 80074ee:	46c0      	nop			@ (mov r8, r8)
 80074f0:	46bd      	mov	sp, r7
 80074f2:	b006      	add	sp, #24
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	46c0      	nop			@ (mov r8, r8)
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40014000 	.word	0x40014000
 8007500:	40014400 	.word	0x40014400
 8007504:	40014800 	.word	0x40014800
 8007508:	fffffeff 	.word	0xfffffeff
 800750c:	fffffdff 	.word	0xfffffdff

08007510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	2210      	movs	r2, #16
 8007526:	4393      	bics	r3, r2
 8007528:	001a      	movs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4a2e      	ldr	r2, [pc, #184]	@ (80075f8 <TIM_OC2_SetConfig+0xe8>)
 800753e:	4013      	ands	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4a2d      	ldr	r2, [pc, #180]	@ (80075fc <TIM_OC2_SetConfig+0xec>)
 8007546:	4013      	ands	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	021b      	lsls	r3, r3, #8
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2220      	movs	r2, #32
 800755a:	4393      	bics	r3, r2
 800755c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	011b      	lsls	r3, r3, #4
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	4313      	orrs	r3, r2
 8007568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a24      	ldr	r2, [pc, #144]	@ (8007600 <TIM_OC2_SetConfig+0xf0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d10d      	bne.n	800758e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2280      	movs	r2, #128	@ 0x80
 8007576:	4393      	bics	r3, r2
 8007578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2240      	movs	r2, #64	@ 0x40
 800758a:	4393      	bics	r3, r2
 800758c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a1b      	ldr	r2, [pc, #108]	@ (8007600 <TIM_OC2_SetConfig+0xf0>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d00b      	beq.n	80075ae <TIM_OC2_SetConfig+0x9e>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a1a      	ldr	r2, [pc, #104]	@ (8007604 <TIM_OC2_SetConfig+0xf4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d007      	beq.n	80075ae <TIM_OC2_SetConfig+0x9e>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a19      	ldr	r2, [pc, #100]	@ (8007608 <TIM_OC2_SetConfig+0xf8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d003      	beq.n	80075ae <TIM_OC2_SetConfig+0x9e>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a18      	ldr	r2, [pc, #96]	@ (800760c <TIM_OC2_SetConfig+0xfc>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d113      	bne.n	80075d6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	4a17      	ldr	r2, [pc, #92]	@ (8007610 <TIM_OC2_SetConfig+0x100>)
 80075b2:	4013      	ands	r3, r2
 80075b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	4a16      	ldr	r2, [pc, #88]	@ (8007614 <TIM_OC2_SetConfig+0x104>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	621a      	str	r2, [r3, #32]
}
 80075f0:	46c0      	nop			@ (mov r8, r8)
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b006      	add	sp, #24
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	ffff8fff 	.word	0xffff8fff
 80075fc:	fffffcff 	.word	0xfffffcff
 8007600:	40012c00 	.word	0x40012c00
 8007604:	40014000 	.word	0x40014000
 8007608:	40014400 	.word	0x40014400
 800760c:	40014800 	.word	0x40014800
 8007610:	fffffbff 	.word	0xfffffbff
 8007614:	fffff7ff 	.word	0xfffff7ff

08007618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	4a33      	ldr	r2, [pc, #204]	@ (80076fc <TIM_OC3_SetConfig+0xe4>)
 800762e:	401a      	ands	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2270      	movs	r2, #112	@ 0x70
 8007644:	4393      	bics	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2203      	movs	r2, #3
 800764c:	4393      	bics	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	4a28      	ldr	r2, [pc, #160]	@ (8007700 <TIM_OC3_SetConfig+0xe8>)
 800765e:	4013      	ands	r3, r2
 8007660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a24      	ldr	r2, [pc, #144]	@ (8007704 <TIM_OC3_SetConfig+0xec>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d10d      	bne.n	8007692 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	4a23      	ldr	r2, [pc, #140]	@ (8007708 <TIM_OC3_SetConfig+0xf0>)
 800767a:	4013      	ands	r3, r2
 800767c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	4a1f      	ldr	r2, [pc, #124]	@ (800770c <TIM_OC3_SetConfig+0xf4>)
 800768e:	4013      	ands	r3, r2
 8007690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a1b      	ldr	r2, [pc, #108]	@ (8007704 <TIM_OC3_SetConfig+0xec>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00b      	beq.n	80076b2 <TIM_OC3_SetConfig+0x9a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a1c      	ldr	r2, [pc, #112]	@ (8007710 <TIM_OC3_SetConfig+0xf8>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d007      	beq.n	80076b2 <TIM_OC3_SetConfig+0x9a>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007714 <TIM_OC3_SetConfig+0xfc>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d003      	beq.n	80076b2 <TIM_OC3_SetConfig+0x9a>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007718 <TIM_OC3_SetConfig+0x100>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d113      	bne.n	80076da <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	4a19      	ldr	r2, [pc, #100]	@ (800771c <TIM_OC3_SetConfig+0x104>)
 80076b6:	4013      	ands	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	4a18      	ldr	r2, [pc, #96]	@ (8007720 <TIM_OC3_SetConfig+0x108>)
 80076be:	4013      	ands	r3, r2
 80076c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	011b      	lsls	r3, r3, #4
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	621a      	str	r2, [r3, #32]
}
 80076f4:	46c0      	nop			@ (mov r8, r8)
 80076f6:	46bd      	mov	sp, r7
 80076f8:	b006      	add	sp, #24
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	fffffeff 	.word	0xfffffeff
 8007700:	fffffdff 	.word	0xfffffdff
 8007704:	40012c00 	.word	0x40012c00
 8007708:	fffff7ff 	.word	0xfffff7ff
 800770c:	fffffbff 	.word	0xfffffbff
 8007710:	40014000 	.word	0x40014000
 8007714:	40014400 	.word	0x40014400
 8007718:	40014800 	.word	0x40014800
 800771c:	ffffefff 	.word	0xffffefff
 8007720:	ffffdfff 	.word	0xffffdfff

08007724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	4a26      	ldr	r2, [pc, #152]	@ (80077d4 <TIM_OC4_SetConfig+0xb0>)
 800773a:	401a      	ands	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4a22      	ldr	r2, [pc, #136]	@ (80077d8 <TIM_OC4_SetConfig+0xb4>)
 8007750:	4013      	ands	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4a21      	ldr	r2, [pc, #132]	@ (80077dc <TIM_OC4_SetConfig+0xb8>)
 8007758:	4013      	ands	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	021b      	lsls	r3, r3, #8
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	4313      	orrs	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	4a1d      	ldr	r2, [pc, #116]	@ (80077e0 <TIM_OC4_SetConfig+0xbc>)
 800776c:	4013      	ands	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	031b      	lsls	r3, r3, #12
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	4313      	orrs	r3, r2
 800777a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a19      	ldr	r2, [pc, #100]	@ (80077e4 <TIM_OC4_SetConfig+0xc0>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00b      	beq.n	800779c <TIM_OC4_SetConfig+0x78>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a18      	ldr	r2, [pc, #96]	@ (80077e8 <TIM_OC4_SetConfig+0xc4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d007      	beq.n	800779c <TIM_OC4_SetConfig+0x78>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a17      	ldr	r2, [pc, #92]	@ (80077ec <TIM_OC4_SetConfig+0xc8>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d003      	beq.n	800779c <TIM_OC4_SetConfig+0x78>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a16      	ldr	r2, [pc, #88]	@ (80077f0 <TIM_OC4_SetConfig+0xcc>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d109      	bne.n	80077b0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	4a15      	ldr	r2, [pc, #84]	@ (80077f4 <TIM_OC4_SetConfig+0xd0>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	019b      	lsls	r3, r3, #6
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	621a      	str	r2, [r3, #32]
}
 80077ca:	46c0      	nop			@ (mov r8, r8)
 80077cc:	46bd      	mov	sp, r7
 80077ce:	b006      	add	sp, #24
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	46c0      	nop			@ (mov r8, r8)
 80077d4:	ffffefff 	.word	0xffffefff
 80077d8:	ffff8fff 	.word	0xffff8fff
 80077dc:	fffffcff 	.word	0xfffffcff
 80077e0:	ffffdfff 	.word	0xffffdfff
 80077e4:	40012c00 	.word	0x40012c00
 80077e8:	40014000 	.word	0x40014000
 80077ec:	40014400 	.word	0x40014400
 80077f0:	40014800 	.word	0x40014800
 80077f4:	ffffbfff 	.word	0xffffbfff

080077f8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007802:	2317      	movs	r3, #23
 8007804:	18fb      	adds	r3, r7, r3
 8007806:	2200      	movs	r2, #0
 8007808:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	2270      	movs	r2, #112	@ 0x70
 8007816:	4393      	bics	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4313      	orrs	r3, r2
 8007822:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2207      	movs	r2, #7
 8007828:	4393      	bics	r3, r2
 800782a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	4313      	orrs	r3, r2
 8007834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	2b70      	cmp	r3, #112	@ 0x70
 8007844:	d015      	beq.n	8007872 <TIM_SlaveTimer_SetConfig+0x7a>
 8007846:	d900      	bls.n	800784a <TIM_SlaveTimer_SetConfig+0x52>
 8007848:	e05b      	b.n	8007902 <TIM_SlaveTimer_SetConfig+0x10a>
 800784a:	2b60      	cmp	r3, #96	@ 0x60
 800784c:	d04f      	beq.n	80078ee <TIM_SlaveTimer_SetConfig+0xf6>
 800784e:	d858      	bhi.n	8007902 <TIM_SlaveTimer_SetConfig+0x10a>
 8007850:	2b50      	cmp	r3, #80	@ 0x50
 8007852:	d042      	beq.n	80078da <TIM_SlaveTimer_SetConfig+0xe2>
 8007854:	d855      	bhi.n	8007902 <TIM_SlaveTimer_SetConfig+0x10a>
 8007856:	2b40      	cmp	r3, #64	@ 0x40
 8007858:	d016      	beq.n	8007888 <TIM_SlaveTimer_SetConfig+0x90>
 800785a:	d852      	bhi.n	8007902 <TIM_SlaveTimer_SetConfig+0x10a>
 800785c:	2b30      	cmp	r3, #48	@ 0x30
 800785e:	d055      	beq.n	800790c <TIM_SlaveTimer_SetConfig+0x114>
 8007860:	d84f      	bhi.n	8007902 <TIM_SlaveTimer_SetConfig+0x10a>
 8007862:	2b20      	cmp	r3, #32
 8007864:	d052      	beq.n	800790c <TIM_SlaveTimer_SetConfig+0x114>
 8007866:	d84c      	bhi.n	8007902 <TIM_SlaveTimer_SetConfig+0x10a>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d04f      	beq.n	800790c <TIM_SlaveTimer_SetConfig+0x114>
 800786c:	2b10      	cmp	r3, #16
 800786e:	d04d      	beq.n	800790c <TIM_SlaveTimer_SetConfig+0x114>
 8007870:	e047      	b.n	8007902 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007882:	f000 f8c5 	bl	8007a10 <TIM_ETR_SetConfig>
      break;
 8007886:	e042      	b.n	800790e <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b05      	cmp	r3, #5
 800788e:	d101      	bne.n	8007894 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e03f      	b.n	8007914 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6a1a      	ldr	r2, [r3, #32]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2101      	movs	r1, #1
 80078a8:	438a      	bics	r2, r1
 80078aa:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	22f0      	movs	r2, #240	@ 0xf0
 80078b8:	4393      	bics	r3, r2
 80078ba:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	621a      	str	r2, [r3, #32]
      break;
 80078d8:	e019      	b.n	800790e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078e6:	001a      	movs	r2, r3
 80078e8:	f000 f818 	bl	800791c <TIM_TI1_ConfigInputStage>
      break;
 80078ec:	e00f      	b.n	800790e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078fa:	001a      	movs	r2, r3
 80078fc:	f000 f83c 	bl	8007978 <TIM_TI2_ConfigInputStage>
      break;
 8007900:	e005      	b.n	800790e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007902:	2317      	movs	r3, #23
 8007904:	18fb      	adds	r3, r7, r3
 8007906:	2201      	movs	r2, #1
 8007908:	701a      	strb	r2, [r3, #0]
      break;
 800790a:	e000      	b.n	800790e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 800790c:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 800790e:	2317      	movs	r3, #23
 8007910:	18fb      	adds	r3, r7, r3
 8007912:	781b      	ldrb	r3, [r3, #0]
}
 8007914:	0018      	movs	r0, r3
 8007916:	46bd      	mov	sp, r7
 8007918:	b006      	add	sp, #24
 800791a:	bd80      	pop	{r7, pc}

0800791c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	2201      	movs	r2, #1
 8007934:	4393      	bics	r3, r2
 8007936:	001a      	movs	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	22f0      	movs	r2, #240	@ 0xf0
 8007946:	4393      	bics	r3, r2
 8007948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	4313      	orrs	r3, r2
 8007952:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	220a      	movs	r2, #10
 8007958:	4393      	bics	r3, r2
 800795a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	4313      	orrs	r3, r2
 8007962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	621a      	str	r2, [r3, #32]
}
 8007970:	46c0      	nop			@ (mov r8, r8)
 8007972:	46bd      	mov	sp, r7
 8007974:	b006      	add	sp, #24
 8007976:	bd80      	pop	{r7, pc}

08007978 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	2210      	movs	r2, #16
 8007990:	4393      	bics	r3, r2
 8007992:	001a      	movs	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	4a0d      	ldr	r2, [pc, #52]	@ (80079d8 <TIM_TI2_ConfigInputStage+0x60>)
 80079a2:	4013      	ands	r3, r2
 80079a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	031b      	lsls	r3, r3, #12
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	22a0      	movs	r2, #160	@ 0xa0
 80079b4:	4393      	bics	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	46c0      	nop			@ (mov r8, r8)
 80079d0:	46bd      	mov	sp, r7
 80079d2:	b006      	add	sp, #24
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	46c0      	nop			@ (mov r8, r8)
 80079d8:	ffff0fff 	.word	0xffff0fff

080079dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2270      	movs	r2, #112	@ 0x70
 80079f0:	4393      	bics	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	2207      	movs	r2, #7
 80079fc:	4313      	orrs	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	609a      	str	r2, [r3, #8]
}
 8007a06:	46c0      	nop			@ (mov r8, r8)
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	b004      	add	sp, #16
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	4a09      	ldr	r2, [pc, #36]	@ (8007a4c <TIM_ETR_SetConfig+0x3c>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	021a      	lsls	r2, r3, #8
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	431a      	orrs	r2, r3
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	609a      	str	r2, [r3, #8]
}
 8007a44:	46c0      	nop			@ (mov r8, r8)
 8007a46:	46bd      	mov	sp, r7
 8007a48:	b006      	add	sp, #24
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	ffff00ff 	.word	0xffff00ff

08007a50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	221f      	movs	r2, #31
 8007a60:	4013      	ands	r3, r2
 8007a62:	2201      	movs	r2, #1
 8007a64:	409a      	lsls	r2, r3
 8007a66:	0013      	movs	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	43d2      	mvns	r2, r2
 8007a72:	401a      	ands	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6a1a      	ldr	r2, [r3, #32]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	211f      	movs	r1, #31
 8007a80:	400b      	ands	r3, r1
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	4099      	lsls	r1, r3
 8007a86:	000b      	movs	r3, r1
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	621a      	str	r2, [r3, #32]
}
 8007a8e:	46c0      	nop			@ (mov r8, r8)
 8007a90:	46bd      	mov	sp, r7
 8007a92:	b006      	add	sp, #24
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	223c      	movs	r2, #60	@ 0x3c
 8007aa6:	5c9b      	ldrb	r3, [r3, r2]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007aac:	2302      	movs	r3, #2
 8007aae:	e041      	b.n	8007b34 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	223c      	movs	r2, #60	@ 0x3c
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	223d      	movs	r2, #61	@ 0x3d
 8007abc:	2102      	movs	r1, #2
 8007abe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2270      	movs	r2, #112	@ 0x70
 8007ad4:	4393      	bics	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a13      	ldr	r2, [pc, #76]	@ (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d009      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a11      	ldr	r2, [pc, #68]	@ (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a10      	ldr	r2, [pc, #64]	@ (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d10c      	bne.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2280      	movs	r2, #128	@ 0x80
 8007b0c:	4393      	bics	r3, r2
 8007b0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	223d      	movs	r2, #61	@ 0x3d
 8007b26:	2101      	movs	r1, #1
 8007b28:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	223c      	movs	r2, #60	@ 0x3c
 8007b2e:	2100      	movs	r1, #0
 8007b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	0018      	movs	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	b004      	add	sp, #16
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	40012c00 	.word	0x40012c00
 8007b40:	40000400 	.word	0x40000400
 8007b44:	40014000 	.word	0x40014000

08007b48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	223c      	movs	r2, #60	@ 0x3c
 8007b5a:	5c9b      	ldrb	r3, [r3, r2]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d101      	bne.n	8007b64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b60:	2302      	movs	r3, #2
 8007b62:	e03e      	b.n	8007be2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	223c      	movs	r2, #60	@ 0x3c
 8007b68:	2101      	movs	r1, #1
 8007b6a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	22ff      	movs	r2, #255	@ 0xff
 8007b70:	4393      	bics	r3, r2
 8007b72:	001a      	movs	r2, r3
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8007bec <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007b80:	401a      	ands	r2, r3
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	4a18      	ldr	r2, [pc, #96]	@ (8007bf0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007b8e:	401a      	ands	r2, r3
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4a16      	ldr	r2, [pc, #88]	@ (8007bf4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007b9c:	401a      	ands	r2, r3
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4a13      	ldr	r2, [pc, #76]	@ (8007bf8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8007baa:	401a      	ands	r2, r3
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4a11      	ldr	r2, [pc, #68]	@ (8007bfc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8007bb8:	401a      	ands	r2, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8007c00 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8007bc6:	401a      	ands	r2, r3
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	223c      	movs	r2, #60	@ 0x3c
 8007bdc:	2100      	movs	r1, #0
 8007bde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	0018      	movs	r0, r3
 8007be4:	46bd      	mov	sp, r7
 8007be6:	b004      	add	sp, #16
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	46c0      	nop			@ (mov r8, r8)
 8007bec:	fffffcff 	.word	0xfffffcff
 8007bf0:	fffffbff 	.word	0xfffffbff
 8007bf4:	fffff7ff 	.word	0xfffff7ff
 8007bf8:	ffffefff 	.word	0xffffefff
 8007bfc:	ffffdfff 	.word	0xffffdfff
 8007c00:	ffffbfff 	.word	0xffffbfff

08007c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c0c:	46c0      	nop			@ (mov r8, r8)
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	b002      	add	sp, #8
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c1c:	46c0      	nop			@ (mov r8, r8)
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	b002      	add	sp, #8
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e044      	b.n	8007cc0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d107      	bne.n	8007c4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2278      	movs	r2, #120	@ 0x78
 8007c42:	2100      	movs	r1, #0
 8007c44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	0018      	movs	r0, r3
 8007c4a:	f7fc fd31 	bl	80046b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2224      	movs	r2, #36	@ 0x24
 8007c52:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2101      	movs	r1, #1
 8007c60:	438a      	bics	r2, r1
 8007c62:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f000 fdd6 	bl	8008820 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	0018      	movs	r0, r3
 8007c78:	f000 fc92 	bl	80085a0 <UART_SetConfig>
 8007c7c:	0003      	movs	r3, r0
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e01c      	b.n	8007cc0 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	490d      	ldr	r1, [pc, #52]	@ (8007cc8 <HAL_UART_Init+0xa4>)
 8007c92:	400a      	ands	r2, r1
 8007c94:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2108      	movs	r1, #8
 8007ca2:	438a      	bics	r2, r1
 8007ca4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f000 fe65 	bl	8008988 <UART_CheckIdleState>
 8007cbe:	0003      	movs	r3, r0
}
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	b002      	add	sp, #8
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	fffff7ff 	.word	0xfffff7ff

08007ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08a      	sub	sp, #40	@ 0x28
 8007cd0:	af02      	add	r7, sp, #8
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	1dbb      	adds	r3, r7, #6
 8007cda:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ce0:	2b20      	cmp	r3, #32
 8007ce2:	d000      	beq.n	8007ce6 <HAL_UART_Transmit+0x1a>
 8007ce4:	e08c      	b.n	8007e00 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_UART_Transmit+0x28>
 8007cec:	1dbb      	adds	r3, r7, #6
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e084      	b.n	8007e02 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	2380      	movs	r3, #128	@ 0x80
 8007cfe:	015b      	lsls	r3, r3, #5
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d109      	bne.n	8007d18 <HAL_UART_Transmit+0x4c>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d105      	bne.n	8007d18 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	4013      	ands	r3, r2
 8007d12:	d001      	beq.n	8007d18 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e074      	b.n	8007e02 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2284      	movs	r2, #132	@ 0x84
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2221      	movs	r2, #33	@ 0x21
 8007d24:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d26:	f7fc fe13 	bl	8004950 <HAL_GetTick>
 8007d2a:	0003      	movs	r3, r0
 8007d2c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	1dba      	adds	r2, r7, #6
 8007d32:	2150      	movs	r1, #80	@ 0x50
 8007d34:	8812      	ldrh	r2, [r2, #0]
 8007d36:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	1dba      	adds	r2, r7, #6
 8007d3c:	2152      	movs	r1, #82	@ 0x52
 8007d3e:	8812      	ldrh	r2, [r2, #0]
 8007d40:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	689a      	ldr	r2, [r3, #8]
 8007d46:	2380      	movs	r3, #128	@ 0x80
 8007d48:	015b      	lsls	r3, r3, #5
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d108      	bne.n	8007d60 <HAL_UART_Transmit+0x94>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d104      	bne.n	8007d60 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	61bb      	str	r3, [r7, #24]
 8007d5e:	e003      	b.n	8007d68 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d64:	2300      	movs	r3, #0
 8007d66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d68:	e02f      	b.n	8007dca <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	0013      	movs	r3, r2
 8007d74:	2200      	movs	r2, #0
 8007d76:	2180      	movs	r1, #128	@ 0x80
 8007d78:	f000 feae 	bl	8008ad8 <UART_WaitOnFlagUntilTimeout>
 8007d7c:	1e03      	subs	r3, r0, #0
 8007d7e:	d004      	beq.n	8007d8a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2220      	movs	r2, #32
 8007d84:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e03b      	b.n	8007e02 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10b      	bne.n	8007da8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	881a      	ldrh	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	05d2      	lsls	r2, r2, #23
 8007d9a:	0dd2      	lsrs	r2, r2, #23
 8007d9c:	b292      	uxth	r2, r2
 8007d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	3302      	adds	r3, #2
 8007da4:	61bb      	str	r3, [r7, #24]
 8007da6:	e007      	b.n	8007db8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	781a      	ldrb	r2, [r3, #0]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	3301      	adds	r3, #1
 8007db6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2252      	movs	r2, #82	@ 0x52
 8007dbc:	5a9b      	ldrh	r3, [r3, r2]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b299      	uxth	r1, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2252      	movs	r2, #82	@ 0x52
 8007dc8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2252      	movs	r2, #82	@ 0x52
 8007dce:	5a9b      	ldrh	r3, [r3, r2]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1c9      	bne.n	8007d6a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	0013      	movs	r3, r2
 8007de0:	2200      	movs	r2, #0
 8007de2:	2140      	movs	r1, #64	@ 0x40
 8007de4:	f000 fe78 	bl	8008ad8 <UART_WaitOnFlagUntilTimeout>
 8007de8:	1e03      	subs	r3, r0, #0
 8007dea:	d004      	beq.n	8007df6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2220      	movs	r2, #32
 8007df0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e005      	b.n	8007e02 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	e000      	b.n	8007e02 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007e00:	2302      	movs	r3, #2
  }
}
 8007e02:	0018      	movs	r0, r3
 8007e04:	46bd      	mov	sp, r7
 8007e06:	b008      	add	sp, #32
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b088      	sub	sp, #32
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	1dbb      	adds	r3, r7, #6
 8007e16:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2280      	movs	r2, #128	@ 0x80
 8007e1c:	589b      	ldr	r3, [r3, r2]
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d145      	bne.n	8007eae <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d003      	beq.n	8007e30 <HAL_UART_Receive_IT+0x26>
 8007e28:	1dbb      	adds	r3, r7, #6
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e03d      	b.n	8007eb0 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	2380      	movs	r3, #128	@ 0x80
 8007e3a:	015b      	lsls	r3, r3, #5
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d109      	bne.n	8007e54 <HAL_UART_Receive_IT+0x4a>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d105      	bne.n	8007e54 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	d001      	beq.n	8007e54 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e02d      	b.n	8007eb0 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	2380      	movs	r3, #128	@ 0x80
 8007e62:	041b      	lsls	r3, r3, #16
 8007e64:	4013      	ands	r3, r2
 8007e66:	d019      	beq.n	8007e9c <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e68:	f3ef 8310 	mrs	r3, PRIMASK
 8007e6c:	613b      	str	r3, [r7, #16]
  return(result);
 8007e6e:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e70:	61fb      	str	r3, [r7, #28]
 8007e72:	2301      	movs	r3, #1
 8007e74:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f383 8810 	msr	PRIMASK, r3
}
 8007e7c:	46c0      	nop			@ (mov r8, r8)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2180      	movs	r1, #128	@ 0x80
 8007e8a:	04c9      	lsls	r1, r1, #19
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	f383 8810 	msr	PRIMASK, r3
}
 8007e9a:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e9c:	1dbb      	adds	r3, r7, #6
 8007e9e:	881a      	ldrh	r2, [r3, #0]
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	f000 fe87 	bl	8008bb8 <UART_Start_Receive_IT>
 8007eaa:	0003      	movs	r3, r0
 8007eac:	e000      	b.n	8007eb0 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007eae:	2302      	movs	r3, #2
  }
}
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	b008      	add	sp, #32
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	1dbb      	adds	r3, r7, #6
 8007ec4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007eca:	2b20      	cmp	r3, #32
 8007ecc:	d000      	beq.n	8007ed0 <HAL_UART_Transmit_DMA+0x18>
 8007ece:	e077      	b.n	8007fc0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_UART_Transmit_DMA+0x26>
 8007ed6:	1dbb      	adds	r3, r7, #6
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e06f      	b.n	8007fc2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689a      	ldr	r2, [r3, #8]
 8007ee6:	2380      	movs	r3, #128	@ 0x80
 8007ee8:	015b      	lsls	r3, r3, #5
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d109      	bne.n	8007f02 <HAL_UART_Transmit_DMA+0x4a>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d105      	bne.n	8007f02 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	4013      	ands	r3, r2
 8007efc:	d001      	beq.n	8007f02 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e05f      	b.n	8007fc2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	1dba      	adds	r2, r7, #6
 8007f0c:	2150      	movs	r1, #80	@ 0x50
 8007f0e:	8812      	ldrh	r2, [r2, #0]
 8007f10:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	1dba      	adds	r2, r7, #6
 8007f16:	2152      	movs	r1, #82	@ 0x52
 8007f18:	8812      	ldrh	r2, [r2, #0]
 8007f1a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2284      	movs	r2, #132	@ 0x84
 8007f20:	2100      	movs	r1, #0
 8007f22:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2221      	movs	r2, #33	@ 0x21
 8007f28:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d027      	beq.n	8007f82 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f36:	4a25      	ldr	r2, [pc, #148]	@ (8007fcc <HAL_UART_Transmit_DMA+0x114>)
 8007f38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f3e:	4a24      	ldr	r2, [pc, #144]	@ (8007fd0 <HAL_UART_Transmit_DMA+0x118>)
 8007f40:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f46:	4a23      	ldr	r2, [pc, #140]	@ (8007fd4 <HAL_UART_Transmit_DMA+0x11c>)
 8007f48:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f4e:	2200      	movs	r2, #0
 8007f50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f5a:	0019      	movs	r1, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3328      	adds	r3, #40	@ 0x28
 8007f62:	001a      	movs	r2, r3
 8007f64:	1dbb      	adds	r3, r7, #6
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	f7fd f9f2 	bl	8005350 <HAL_DMA_Start_IT>
 8007f6c:	1e03      	subs	r3, r0, #0
 8007f6e:	d008      	beq.n	8007f82 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2284      	movs	r2, #132	@ 0x84
 8007f74:	2110      	movs	r1, #16
 8007f76:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e01f      	b.n	8007fc2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2240      	movs	r2, #64	@ 0x40
 8007f88:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f8e:	613b      	str	r3, [r7, #16]
  return(result);
 8007f90:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f92:	61fb      	str	r3, [r7, #28]
 8007f94:	2301      	movs	r3, #1
 8007f96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f383 8810 	msr	PRIMASK, r3
}
 8007f9e:	46c0      	nop			@ (mov r8, r8)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2180      	movs	r1, #128	@ 0x80
 8007fac:	430a      	orrs	r2, r1
 8007fae:	609a      	str	r2, [r3, #8]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	f383 8810 	msr	PRIMASK, r3
}
 8007fba:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e000      	b.n	8007fc2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007fc0:	2302      	movs	r3, #2
  }
}
 8007fc2:	0018      	movs	r0, r3
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	b008      	add	sp, #32
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	46c0      	nop			@ (mov r8, r8)
 8007fcc:	08008e35 	.word	0x08008e35
 8007fd0:	08008ec9 	.word	0x08008ec9
 8007fd4:	08008ee7 	.word	0x08008ee7

08007fd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fd8:	b590      	push	{r4, r7, lr}
 8007fda:	b0ab      	sub	sp, #172	@ 0xac
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	22a4      	movs	r2, #164	@ 0xa4
 8007fe8:	18b9      	adds	r1, r7, r2
 8007fea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	20a0      	movs	r0, #160	@ 0xa0
 8007ff4:	1839      	adds	r1, r7, r0
 8007ff6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	219c      	movs	r1, #156	@ 0x9c
 8008000:	1879      	adds	r1, r7, r1
 8008002:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008004:	0011      	movs	r1, r2
 8008006:	18bb      	adds	r3, r7, r2
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a99      	ldr	r2, [pc, #612]	@ (8008270 <HAL_UART_IRQHandler+0x298>)
 800800c:	4013      	ands	r3, r2
 800800e:	2298      	movs	r2, #152	@ 0x98
 8008010:	18bc      	adds	r4, r7, r2
 8008012:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008014:	18bb      	adds	r3, r7, r2
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d114      	bne.n	8008046 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800801c:	187b      	adds	r3, r7, r1
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2220      	movs	r2, #32
 8008022:	4013      	ands	r3, r2
 8008024:	d00f      	beq.n	8008046 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008026:	183b      	adds	r3, r7, r0
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2220      	movs	r2, #32
 800802c:	4013      	ands	r3, r2
 800802e:	d00a      	beq.n	8008046 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008034:	2b00      	cmp	r3, #0
 8008036:	d100      	bne.n	800803a <HAL_UART_IRQHandler+0x62>
 8008038:	e286      	b.n	8008548 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	0010      	movs	r0, r2
 8008042:	4798      	blx	r3
      }
      return;
 8008044:	e280      	b.n	8008548 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008046:	2398      	movs	r3, #152	@ 0x98
 8008048:	18fb      	adds	r3, r7, r3
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d100      	bne.n	8008052 <HAL_UART_IRQHandler+0x7a>
 8008050:	e114      	b.n	800827c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008052:	239c      	movs	r3, #156	@ 0x9c
 8008054:	18fb      	adds	r3, r7, r3
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2201      	movs	r2, #1
 800805a:	4013      	ands	r3, r2
 800805c:	d106      	bne.n	800806c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800805e:	23a0      	movs	r3, #160	@ 0xa0
 8008060:	18fb      	adds	r3, r7, r3
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a83      	ldr	r2, [pc, #524]	@ (8008274 <HAL_UART_IRQHandler+0x29c>)
 8008066:	4013      	ands	r3, r2
 8008068:	d100      	bne.n	800806c <HAL_UART_IRQHandler+0x94>
 800806a:	e107      	b.n	800827c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800806c:	23a4      	movs	r3, #164	@ 0xa4
 800806e:	18fb      	adds	r3, r7, r3
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2201      	movs	r2, #1
 8008074:	4013      	ands	r3, r2
 8008076:	d012      	beq.n	800809e <HAL_UART_IRQHandler+0xc6>
 8008078:	23a0      	movs	r3, #160	@ 0xa0
 800807a:	18fb      	adds	r3, r7, r3
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	2380      	movs	r3, #128	@ 0x80
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	4013      	ands	r3, r2
 8008084:	d00b      	beq.n	800809e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2201      	movs	r2, #1
 800808c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2284      	movs	r2, #132	@ 0x84
 8008092:	589b      	ldr	r3, [r3, r2]
 8008094:	2201      	movs	r2, #1
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2184      	movs	r1, #132	@ 0x84
 800809c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800809e:	23a4      	movs	r3, #164	@ 0xa4
 80080a0:	18fb      	adds	r3, r7, r3
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2202      	movs	r2, #2
 80080a6:	4013      	ands	r3, r2
 80080a8:	d011      	beq.n	80080ce <HAL_UART_IRQHandler+0xf6>
 80080aa:	239c      	movs	r3, #156	@ 0x9c
 80080ac:	18fb      	adds	r3, r7, r3
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2201      	movs	r2, #1
 80080b2:	4013      	ands	r3, r2
 80080b4:	d00b      	beq.n	80080ce <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2202      	movs	r2, #2
 80080bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2284      	movs	r2, #132	@ 0x84
 80080c2:	589b      	ldr	r3, [r3, r2]
 80080c4:	2204      	movs	r2, #4
 80080c6:	431a      	orrs	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2184      	movs	r1, #132	@ 0x84
 80080cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080ce:	23a4      	movs	r3, #164	@ 0xa4
 80080d0:	18fb      	adds	r3, r7, r3
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2204      	movs	r2, #4
 80080d6:	4013      	ands	r3, r2
 80080d8:	d011      	beq.n	80080fe <HAL_UART_IRQHandler+0x126>
 80080da:	239c      	movs	r3, #156	@ 0x9c
 80080dc:	18fb      	adds	r3, r7, r3
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2201      	movs	r2, #1
 80080e2:	4013      	ands	r3, r2
 80080e4:	d00b      	beq.n	80080fe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2204      	movs	r2, #4
 80080ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2284      	movs	r2, #132	@ 0x84
 80080f2:	589b      	ldr	r3, [r3, r2]
 80080f4:	2202      	movs	r2, #2
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2184      	movs	r1, #132	@ 0x84
 80080fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080fe:	23a4      	movs	r3, #164	@ 0xa4
 8008100:	18fb      	adds	r3, r7, r3
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2208      	movs	r2, #8
 8008106:	4013      	ands	r3, r2
 8008108:	d017      	beq.n	800813a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800810a:	23a0      	movs	r3, #160	@ 0xa0
 800810c:	18fb      	adds	r3, r7, r3
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2220      	movs	r2, #32
 8008112:	4013      	ands	r3, r2
 8008114:	d105      	bne.n	8008122 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008116:	239c      	movs	r3, #156	@ 0x9c
 8008118:	18fb      	adds	r3, r7, r3
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2201      	movs	r2, #1
 800811e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008120:	d00b      	beq.n	800813a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2208      	movs	r2, #8
 8008128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2284      	movs	r2, #132	@ 0x84
 800812e:	589b      	ldr	r3, [r3, r2]
 8008130:	2208      	movs	r2, #8
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2184      	movs	r1, #132	@ 0x84
 8008138:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800813a:	23a4      	movs	r3, #164	@ 0xa4
 800813c:	18fb      	adds	r3, r7, r3
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	2380      	movs	r3, #128	@ 0x80
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	4013      	ands	r3, r2
 8008146:	d013      	beq.n	8008170 <HAL_UART_IRQHandler+0x198>
 8008148:	23a0      	movs	r3, #160	@ 0xa0
 800814a:	18fb      	adds	r3, r7, r3
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	2380      	movs	r3, #128	@ 0x80
 8008150:	04db      	lsls	r3, r3, #19
 8008152:	4013      	ands	r3, r2
 8008154:	d00c      	beq.n	8008170 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2280      	movs	r2, #128	@ 0x80
 800815c:	0112      	lsls	r2, r2, #4
 800815e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2284      	movs	r2, #132	@ 0x84
 8008164:	589b      	ldr	r3, [r3, r2]
 8008166:	2220      	movs	r2, #32
 8008168:	431a      	orrs	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2184      	movs	r1, #132	@ 0x84
 800816e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2284      	movs	r2, #132	@ 0x84
 8008174:	589b      	ldr	r3, [r3, r2]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d100      	bne.n	800817c <HAL_UART_IRQHandler+0x1a4>
 800817a:	e1e7      	b.n	800854c <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800817c:	23a4      	movs	r3, #164	@ 0xa4
 800817e:	18fb      	adds	r3, r7, r3
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2220      	movs	r2, #32
 8008184:	4013      	ands	r3, r2
 8008186:	d00e      	beq.n	80081a6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008188:	23a0      	movs	r3, #160	@ 0xa0
 800818a:	18fb      	adds	r3, r7, r3
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2220      	movs	r2, #32
 8008190:	4013      	ands	r3, r2
 8008192:	d008      	beq.n	80081a6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008198:	2b00      	cmp	r3, #0
 800819a:	d004      	beq.n	80081a6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	0010      	movs	r0, r2
 80081a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2284      	movs	r2, #132	@ 0x84
 80081aa:	589b      	ldr	r3, [r3, r2]
 80081ac:	2194      	movs	r1, #148	@ 0x94
 80081ae:	187a      	adds	r2, r7, r1
 80081b0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	2240      	movs	r2, #64	@ 0x40
 80081ba:	4013      	ands	r3, r2
 80081bc:	2b40      	cmp	r3, #64	@ 0x40
 80081be:	d004      	beq.n	80081ca <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081c0:	187b      	adds	r3, r7, r1
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2228      	movs	r2, #40	@ 0x28
 80081c6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081c8:	d047      	beq.n	800825a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	0018      	movs	r0, r3
 80081ce:	f000 fdcd 	bl	8008d6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	2240      	movs	r2, #64	@ 0x40
 80081da:	4013      	ands	r3, r2
 80081dc:	2b40      	cmp	r3, #64	@ 0x40
 80081de:	d137      	bne.n	8008250 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081e0:	f3ef 8310 	mrs	r3, PRIMASK
 80081e4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80081e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081e8:	2090      	movs	r0, #144	@ 0x90
 80081ea:	183a      	adds	r2, r7, r0
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	2301      	movs	r3, #1
 80081f0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081f4:	f383 8810 	msr	PRIMASK, r3
}
 80081f8:	46c0      	nop			@ (mov r8, r8)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2140      	movs	r1, #64	@ 0x40
 8008206:	438a      	bics	r2, r1
 8008208:	609a      	str	r2, [r3, #8]
 800820a:	183b      	adds	r3, r7, r0
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008210:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008212:	f383 8810 	msr	PRIMASK, r3
}
 8008216:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800821c:	2b00      	cmp	r3, #0
 800821e:	d012      	beq.n	8008246 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008224:	4a14      	ldr	r2, [pc, #80]	@ (8008278 <HAL_UART_IRQHandler+0x2a0>)
 8008226:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800822c:	0018      	movs	r0, r3
 800822e:	f7fd f92d 	bl	800548c <HAL_DMA_Abort_IT>
 8008232:	1e03      	subs	r3, r0, #0
 8008234:	d01a      	beq.n	800826c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800823a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008240:	0018      	movs	r0, r3
 8008242:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008244:	e012      	b.n	800826c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	0018      	movs	r0, r3
 800824a:	f000 f995 	bl	8008578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800824e:	e00d      	b.n	800826c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	0018      	movs	r0, r3
 8008254:	f000 f990 	bl	8008578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008258:	e008      	b.n	800826c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	0018      	movs	r0, r3
 800825e:	f000 f98b 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2284      	movs	r2, #132	@ 0x84
 8008266:	2100      	movs	r1, #0
 8008268:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800826a:	e16f      	b.n	800854c <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800826c:	46c0      	nop			@ (mov r8, r8)
    return;
 800826e:	e16d      	b.n	800854c <HAL_UART_IRQHandler+0x574>
 8008270:	0000080f 	.word	0x0000080f
 8008274:	04000120 	.word	0x04000120
 8008278:	08008f6b 	.word	0x08008f6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008280:	2b01      	cmp	r3, #1
 8008282:	d000      	beq.n	8008286 <HAL_UART_IRQHandler+0x2ae>
 8008284:	e139      	b.n	80084fa <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008286:	23a4      	movs	r3, #164	@ 0xa4
 8008288:	18fb      	adds	r3, r7, r3
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2210      	movs	r2, #16
 800828e:	4013      	ands	r3, r2
 8008290:	d100      	bne.n	8008294 <HAL_UART_IRQHandler+0x2bc>
 8008292:	e132      	b.n	80084fa <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008294:	23a0      	movs	r3, #160	@ 0xa0
 8008296:	18fb      	adds	r3, r7, r3
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2210      	movs	r2, #16
 800829c:	4013      	ands	r3, r2
 800829e:	d100      	bne.n	80082a2 <HAL_UART_IRQHandler+0x2ca>
 80082a0:	e12b      	b.n	80084fa <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2210      	movs	r2, #16
 80082a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	2240      	movs	r2, #64	@ 0x40
 80082b2:	4013      	ands	r3, r2
 80082b4:	2b40      	cmp	r3, #64	@ 0x40
 80082b6:	d000      	beq.n	80082ba <HAL_UART_IRQHandler+0x2e2>
 80082b8:	e09f      	b.n	80083fa <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	217e      	movs	r1, #126	@ 0x7e
 80082c4:	187b      	adds	r3, r7, r1
 80082c6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80082c8:	187b      	adds	r3, r7, r1
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d100      	bne.n	80082d2 <HAL_UART_IRQHandler+0x2fa>
 80082d0:	e13e      	b.n	8008550 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2258      	movs	r2, #88	@ 0x58
 80082d6:	5a9b      	ldrh	r3, [r3, r2]
 80082d8:	187a      	adds	r2, r7, r1
 80082da:	8812      	ldrh	r2, [r2, #0]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d300      	bcc.n	80082e2 <HAL_UART_IRQHandler+0x30a>
 80082e0:	e136      	b.n	8008550 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	187a      	adds	r2, r7, r1
 80082e6:	215a      	movs	r1, #90	@ 0x5a
 80082e8:	8812      	ldrh	r2, [r2, #0]
 80082ea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	2b20      	cmp	r3, #32
 80082f4:	d06f      	beq.n	80083d6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f6:	f3ef 8310 	mrs	r3, PRIMASK
 80082fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80082fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008300:	2301      	movs	r3, #1
 8008302:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008306:	f383 8810 	msr	PRIMASK, r3
}
 800830a:	46c0      	nop			@ (mov r8, r8)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4992      	ldr	r1, [pc, #584]	@ (8008560 <HAL_UART_IRQHandler+0x588>)
 8008318:	400a      	ands	r2, r1
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800831e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008322:	f383 8810 	msr	PRIMASK, r3
}
 8008326:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008328:	f3ef 8310 	mrs	r3, PRIMASK
 800832c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800832e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008330:	677b      	str	r3, [r7, #116]	@ 0x74
 8008332:	2301      	movs	r3, #1
 8008334:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008338:	f383 8810 	msr	PRIMASK, r3
}
 800833c:	46c0      	nop			@ (mov r8, r8)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2101      	movs	r1, #1
 800834a:	438a      	bics	r2, r1
 800834c:	609a      	str	r2, [r3, #8]
 800834e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008350:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008354:	f383 8810 	msr	PRIMASK, r3
}
 8008358:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800835a:	f3ef 8310 	mrs	r3, PRIMASK
 800835e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008362:	673b      	str	r3, [r7, #112]	@ 0x70
 8008364:	2301      	movs	r3, #1
 8008366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800836a:	f383 8810 	msr	PRIMASK, r3
}
 800836e:	46c0      	nop			@ (mov r8, r8)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689a      	ldr	r2, [r3, #8]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2140      	movs	r1, #64	@ 0x40
 800837c:	438a      	bics	r2, r1
 800837e:	609a      	str	r2, [r3, #8]
 8008380:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008382:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008386:	f383 8810 	msr	PRIMASK, r3
}
 800838a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2280      	movs	r2, #128	@ 0x80
 8008390:	2120      	movs	r1, #32
 8008392:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800839a:	f3ef 8310 	mrs	r3, PRIMASK
 800839e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80083a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083a4:	2301      	movs	r3, #1
 80083a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083aa:	f383 8810 	msr	PRIMASK, r3
}
 80083ae:	46c0      	nop			@ (mov r8, r8)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2110      	movs	r1, #16
 80083bc:	438a      	bics	r2, r1
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083c6:	f383 8810 	msr	PRIMASK, r3
}
 80083ca:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083d0:	0018      	movs	r0, r3
 80083d2:	f7fd f823 	bl	800541c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2202      	movs	r2, #2
 80083da:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2258      	movs	r2, #88	@ 0x58
 80083e0:	5a9a      	ldrh	r2, [r3, r2]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	215a      	movs	r1, #90	@ 0x5a
 80083e6:	5a5b      	ldrh	r3, [r3, r1]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	0011      	movs	r1, r2
 80083f2:	0018      	movs	r0, r3
 80083f4:	f000 f8c8 	bl	8008588 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083f8:	e0aa      	b.n	8008550 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2258      	movs	r2, #88	@ 0x58
 80083fe:	5a99      	ldrh	r1, [r3, r2]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	225a      	movs	r2, #90	@ 0x5a
 8008404:	5a9b      	ldrh	r3, [r3, r2]
 8008406:	b29a      	uxth	r2, r3
 8008408:	208e      	movs	r0, #142	@ 0x8e
 800840a:	183b      	adds	r3, r7, r0
 800840c:	1a8a      	subs	r2, r1, r2
 800840e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	225a      	movs	r2, #90	@ 0x5a
 8008414:	5a9b      	ldrh	r3, [r3, r2]
 8008416:	b29b      	uxth	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d100      	bne.n	800841e <HAL_UART_IRQHandler+0x446>
 800841c:	e09a      	b.n	8008554 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800841e:	183b      	adds	r3, r7, r0
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d100      	bne.n	8008428 <HAL_UART_IRQHandler+0x450>
 8008426:	e095      	b.n	8008554 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008428:	f3ef 8310 	mrs	r3, PRIMASK
 800842c:	60fb      	str	r3, [r7, #12]
  return(result);
 800842e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008430:	2488      	movs	r4, #136	@ 0x88
 8008432:	193a      	adds	r2, r7, r4
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	2301      	movs	r3, #1
 8008438:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f383 8810 	msr	PRIMASK, r3
}
 8008440:	46c0      	nop			@ (mov r8, r8)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4945      	ldr	r1, [pc, #276]	@ (8008564 <HAL_UART_IRQHandler+0x58c>)
 800844e:	400a      	ands	r2, r1
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	193b      	adds	r3, r7, r4
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f383 8810 	msr	PRIMASK, r3
}
 800845e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008460:	f3ef 8310 	mrs	r3, PRIMASK
 8008464:	61bb      	str	r3, [r7, #24]
  return(result);
 8008466:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008468:	2484      	movs	r4, #132	@ 0x84
 800846a:	193a      	adds	r2, r7, r4
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	2301      	movs	r3, #1
 8008470:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	f383 8810 	msr	PRIMASK, r3
}
 8008478:	46c0      	nop			@ (mov r8, r8)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2101      	movs	r1, #1
 8008486:	438a      	bics	r2, r1
 8008488:	609a      	str	r2, [r3, #8]
 800848a:	193b      	adds	r3, r7, r4
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	f383 8810 	msr	PRIMASK, r3
}
 8008496:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2280      	movs	r2, #128	@ 0x80
 800849c:	2120      	movs	r1, #32
 800849e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084ac:	f3ef 8310 	mrs	r3, PRIMASK
 80084b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80084b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b4:	2480      	movs	r4, #128	@ 0x80
 80084b6:	193a      	adds	r2, r7, r4
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	2301      	movs	r3, #1
 80084bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c0:	f383 8810 	msr	PRIMASK, r3
}
 80084c4:	46c0      	nop			@ (mov r8, r8)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2110      	movs	r1, #16
 80084d2:	438a      	bics	r2, r1
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	193b      	adds	r3, r7, r4
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084de:	f383 8810 	msr	PRIMASK, r3
}
 80084e2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084ea:	183b      	adds	r3, r7, r0
 80084ec:	881a      	ldrh	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	0011      	movs	r1, r2
 80084f2:	0018      	movs	r0, r3
 80084f4:	f000 f848 	bl	8008588 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084f8:	e02c      	b.n	8008554 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80084fa:	23a4      	movs	r3, #164	@ 0xa4
 80084fc:	18fb      	adds	r3, r7, r3
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2280      	movs	r2, #128	@ 0x80
 8008502:	4013      	ands	r3, r2
 8008504:	d00f      	beq.n	8008526 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008506:	23a0      	movs	r3, #160	@ 0xa0
 8008508:	18fb      	adds	r3, r7, r3
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2280      	movs	r2, #128	@ 0x80
 800850e:	4013      	ands	r3, r2
 8008510:	d009      	beq.n	8008526 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d01e      	beq.n	8008558 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	0010      	movs	r0, r2
 8008522:	4798      	blx	r3
    }
    return;
 8008524:	e018      	b.n	8008558 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008526:	23a4      	movs	r3, #164	@ 0xa4
 8008528:	18fb      	adds	r3, r7, r3
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2240      	movs	r2, #64	@ 0x40
 800852e:	4013      	ands	r3, r2
 8008530:	d013      	beq.n	800855a <HAL_UART_IRQHandler+0x582>
 8008532:	23a0      	movs	r3, #160	@ 0xa0
 8008534:	18fb      	adds	r3, r7, r3
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2240      	movs	r2, #64	@ 0x40
 800853a:	4013      	ands	r3, r2
 800853c:	d00d      	beq.n	800855a <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	0018      	movs	r0, r3
 8008542:	f000 fd29 	bl	8008f98 <UART_EndTransmit_IT>
    return;
 8008546:	e008      	b.n	800855a <HAL_UART_IRQHandler+0x582>
      return;
 8008548:	46c0      	nop			@ (mov r8, r8)
 800854a:	e006      	b.n	800855a <HAL_UART_IRQHandler+0x582>
    return;
 800854c:	46c0      	nop			@ (mov r8, r8)
 800854e:	e004      	b.n	800855a <HAL_UART_IRQHandler+0x582>
      return;
 8008550:	46c0      	nop			@ (mov r8, r8)
 8008552:	e002      	b.n	800855a <HAL_UART_IRQHandler+0x582>
      return;
 8008554:	46c0      	nop			@ (mov r8, r8)
 8008556:	e000      	b.n	800855a <HAL_UART_IRQHandler+0x582>
    return;
 8008558:	46c0      	nop			@ (mov r8, r8)
  }

}
 800855a:	46bd      	mov	sp, r7
 800855c:	b02b      	add	sp, #172	@ 0xac
 800855e:	bd90      	pop	{r4, r7, pc}
 8008560:	fffffeff 	.word	0xfffffeff
 8008564:	fffffedf 	.word	0xfffffedf

08008568 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008570:	46c0      	nop			@ (mov r8, r8)
 8008572:	46bd      	mov	sp, r7
 8008574:	b002      	add	sp, #8
 8008576:	bd80      	pop	{r7, pc}

08008578 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008580:	46c0      	nop			@ (mov r8, r8)
 8008582:	46bd      	mov	sp, r7
 8008584:	b002      	add	sp, #8
 8008586:	bd80      	pop	{r7, pc}

08008588 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	000a      	movs	r2, r1
 8008592:	1cbb      	adds	r3, r7, #2
 8008594:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008596:	46c0      	nop			@ (mov r8, r8)
 8008598:	46bd      	mov	sp, r7
 800859a:	b002      	add	sp, #8
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085a8:	231e      	movs	r3, #30
 80085aa:	18fb      	adds	r3, r7, r3
 80085ac:	2200      	movs	r2, #0
 80085ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	431a      	orrs	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	431a      	orrs	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a8d      	ldr	r2, [pc, #564]	@ (8008804 <UART_SetConfig+0x264>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	0019      	movs	r1, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	430a      	orrs	r2, r1
 80085dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	4a88      	ldr	r2, [pc, #544]	@ (8008808 <UART_SetConfig+0x268>)
 80085e6:	4013      	ands	r3, r2
 80085e8:	0019      	movs	r1, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	4313      	orrs	r3, r2
 8008604:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	4a7f      	ldr	r2, [pc, #508]	@ (800880c <UART_SetConfig+0x26c>)
 800860e:	4013      	ands	r3, r2
 8008610:	0019      	movs	r1, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	430a      	orrs	r2, r1
 800861a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a7b      	ldr	r2, [pc, #492]	@ (8008810 <UART_SetConfig+0x270>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d127      	bne.n	8008676 <UART_SetConfig+0xd6>
 8008626:	4b7b      	ldr	r3, [pc, #492]	@ (8008814 <UART_SetConfig+0x274>)
 8008628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800862a:	2203      	movs	r2, #3
 800862c:	4013      	ands	r3, r2
 800862e:	2b03      	cmp	r3, #3
 8008630:	d00d      	beq.n	800864e <UART_SetConfig+0xae>
 8008632:	d81b      	bhi.n	800866c <UART_SetConfig+0xcc>
 8008634:	2b02      	cmp	r3, #2
 8008636:	d014      	beq.n	8008662 <UART_SetConfig+0xc2>
 8008638:	d818      	bhi.n	800866c <UART_SetConfig+0xcc>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <UART_SetConfig+0xa4>
 800863e:	2b01      	cmp	r3, #1
 8008640:	d00a      	beq.n	8008658 <UART_SetConfig+0xb8>
 8008642:	e013      	b.n	800866c <UART_SetConfig+0xcc>
 8008644:	231f      	movs	r3, #31
 8008646:	18fb      	adds	r3, r7, r3
 8008648:	2200      	movs	r2, #0
 800864a:	701a      	strb	r2, [r3, #0]
 800864c:	e021      	b.n	8008692 <UART_SetConfig+0xf2>
 800864e:	231f      	movs	r3, #31
 8008650:	18fb      	adds	r3, r7, r3
 8008652:	2202      	movs	r2, #2
 8008654:	701a      	strb	r2, [r3, #0]
 8008656:	e01c      	b.n	8008692 <UART_SetConfig+0xf2>
 8008658:	231f      	movs	r3, #31
 800865a:	18fb      	adds	r3, r7, r3
 800865c:	2204      	movs	r2, #4
 800865e:	701a      	strb	r2, [r3, #0]
 8008660:	e017      	b.n	8008692 <UART_SetConfig+0xf2>
 8008662:	231f      	movs	r3, #31
 8008664:	18fb      	adds	r3, r7, r3
 8008666:	2208      	movs	r2, #8
 8008668:	701a      	strb	r2, [r3, #0]
 800866a:	e012      	b.n	8008692 <UART_SetConfig+0xf2>
 800866c:	231f      	movs	r3, #31
 800866e:	18fb      	adds	r3, r7, r3
 8008670:	2210      	movs	r2, #16
 8008672:	701a      	strb	r2, [r3, #0]
 8008674:	e00d      	b.n	8008692 <UART_SetConfig+0xf2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a67      	ldr	r2, [pc, #412]	@ (8008818 <UART_SetConfig+0x278>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d104      	bne.n	800868a <UART_SetConfig+0xea>
 8008680:	231f      	movs	r3, #31
 8008682:	18fb      	adds	r3, r7, r3
 8008684:	2200      	movs	r2, #0
 8008686:	701a      	strb	r2, [r3, #0]
 8008688:	e003      	b.n	8008692 <UART_SetConfig+0xf2>
 800868a:	231f      	movs	r3, #31
 800868c:	18fb      	adds	r3, r7, r3
 800868e:	2210      	movs	r2, #16
 8008690:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	69da      	ldr	r2, [r3, #28]
 8008696:	2380      	movs	r3, #128	@ 0x80
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	429a      	cmp	r2, r3
 800869c:	d15c      	bne.n	8008758 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800869e:	231f      	movs	r3, #31
 80086a0:	18fb      	adds	r3, r7, r3
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d015      	beq.n	80086d4 <UART_SetConfig+0x134>
 80086a8:	dc18      	bgt.n	80086dc <UART_SetConfig+0x13c>
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d00d      	beq.n	80086ca <UART_SetConfig+0x12a>
 80086ae:	dc15      	bgt.n	80086dc <UART_SetConfig+0x13c>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <UART_SetConfig+0x11a>
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d005      	beq.n	80086c4 <UART_SetConfig+0x124>
 80086b8:	e010      	b.n	80086dc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086ba:	f7fd fe2f 	bl	800631c <HAL_RCC_GetPCLK1Freq>
 80086be:	0003      	movs	r3, r0
 80086c0:	61bb      	str	r3, [r7, #24]
        break;
 80086c2:	e012      	b.n	80086ea <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086c4:	4b55      	ldr	r3, [pc, #340]	@ (800881c <UART_SetConfig+0x27c>)
 80086c6:	61bb      	str	r3, [r7, #24]
        break;
 80086c8:	e00f      	b.n	80086ea <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ca:	f7fd fdc7 	bl	800625c <HAL_RCC_GetSysClockFreq>
 80086ce:	0003      	movs	r3, r0
 80086d0:	61bb      	str	r3, [r7, #24]
        break;
 80086d2:	e00a      	b.n	80086ea <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086d4:	2380      	movs	r3, #128	@ 0x80
 80086d6:	021b      	lsls	r3, r3, #8
 80086d8:	61bb      	str	r3, [r7, #24]
        break;
 80086da:	e006      	b.n	80086ea <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80086e0:	231e      	movs	r3, #30
 80086e2:	18fb      	adds	r3, r7, r3
 80086e4:	2201      	movs	r2, #1
 80086e6:	701a      	strb	r2, [r3, #0]
        break;
 80086e8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d100      	bne.n	80086f2 <UART_SetConfig+0x152>
 80086f0:	e07a      	b.n	80087e8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	005a      	lsls	r2, r3, #1
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	085b      	lsrs	r3, r3, #1
 80086fc:	18d2      	adds	r2, r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	0019      	movs	r1, r3
 8008704:	0010      	movs	r0, r2
 8008706:	f7f7 fd25 	bl	8000154 <__udivsi3>
 800870a:	0003      	movs	r3, r0
 800870c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	2b0f      	cmp	r3, #15
 8008712:	d91c      	bls.n	800874e <UART_SetConfig+0x1ae>
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	2380      	movs	r3, #128	@ 0x80
 8008718:	025b      	lsls	r3, r3, #9
 800871a:	429a      	cmp	r2, r3
 800871c:	d217      	bcs.n	800874e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	b29a      	uxth	r2, r3
 8008722:	200e      	movs	r0, #14
 8008724:	183b      	adds	r3, r7, r0
 8008726:	210f      	movs	r1, #15
 8008728:	438a      	bics	r2, r1
 800872a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	085b      	lsrs	r3, r3, #1
 8008730:	b29b      	uxth	r3, r3
 8008732:	2207      	movs	r2, #7
 8008734:	4013      	ands	r3, r2
 8008736:	b299      	uxth	r1, r3
 8008738:	183b      	adds	r3, r7, r0
 800873a:	183a      	adds	r2, r7, r0
 800873c:	8812      	ldrh	r2, [r2, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	183a      	adds	r2, r7, r0
 8008748:	8812      	ldrh	r2, [r2, #0]
 800874a:	60da      	str	r2, [r3, #12]
 800874c:	e04c      	b.n	80087e8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800874e:	231e      	movs	r3, #30
 8008750:	18fb      	adds	r3, r7, r3
 8008752:	2201      	movs	r2, #1
 8008754:	701a      	strb	r2, [r3, #0]
 8008756:	e047      	b.n	80087e8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008758:	231f      	movs	r3, #31
 800875a:	18fb      	adds	r3, r7, r3
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	2b08      	cmp	r3, #8
 8008760:	d015      	beq.n	800878e <UART_SetConfig+0x1ee>
 8008762:	dc18      	bgt.n	8008796 <UART_SetConfig+0x1f6>
 8008764:	2b04      	cmp	r3, #4
 8008766:	d00d      	beq.n	8008784 <UART_SetConfig+0x1e4>
 8008768:	dc15      	bgt.n	8008796 <UART_SetConfig+0x1f6>
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <UART_SetConfig+0x1d4>
 800876e:	2b02      	cmp	r3, #2
 8008770:	d005      	beq.n	800877e <UART_SetConfig+0x1de>
 8008772:	e010      	b.n	8008796 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008774:	f7fd fdd2 	bl	800631c <HAL_RCC_GetPCLK1Freq>
 8008778:	0003      	movs	r3, r0
 800877a:	61bb      	str	r3, [r7, #24]
        break;
 800877c:	e012      	b.n	80087a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800877e:	4b27      	ldr	r3, [pc, #156]	@ (800881c <UART_SetConfig+0x27c>)
 8008780:	61bb      	str	r3, [r7, #24]
        break;
 8008782:	e00f      	b.n	80087a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008784:	f7fd fd6a 	bl	800625c <HAL_RCC_GetSysClockFreq>
 8008788:	0003      	movs	r3, r0
 800878a:	61bb      	str	r3, [r7, #24]
        break;
 800878c:	e00a      	b.n	80087a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800878e:	2380      	movs	r3, #128	@ 0x80
 8008790:	021b      	lsls	r3, r3, #8
 8008792:	61bb      	str	r3, [r7, #24]
        break;
 8008794:	e006      	b.n	80087a4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800879a:	231e      	movs	r3, #30
 800879c:	18fb      	adds	r3, r7, r3
 800879e:	2201      	movs	r2, #1
 80087a0:	701a      	strb	r2, [r3, #0]
        break;
 80087a2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d01e      	beq.n	80087e8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	085a      	lsrs	r2, r3, #1
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	18d2      	adds	r2, r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	0019      	movs	r1, r3
 80087ba:	0010      	movs	r0, r2
 80087bc:	f7f7 fcca 	bl	8000154 <__udivsi3>
 80087c0:	0003      	movs	r3, r0
 80087c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	2b0f      	cmp	r3, #15
 80087c8:	d90a      	bls.n	80087e0 <UART_SetConfig+0x240>
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	2380      	movs	r3, #128	@ 0x80
 80087ce:	025b      	lsls	r3, r3, #9
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d205      	bcs.n	80087e0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60da      	str	r2, [r3, #12]
 80087de:	e003      	b.n	80087e8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80087e0:	231e      	movs	r3, #30
 80087e2:	18fb      	adds	r3, r7, r3
 80087e4:	2201      	movs	r2, #1
 80087e6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80087f4:	231e      	movs	r3, #30
 80087f6:	18fb      	adds	r3, r7, r3
 80087f8:	781b      	ldrb	r3, [r3, #0]
}
 80087fa:	0018      	movs	r0, r3
 80087fc:	46bd      	mov	sp, r7
 80087fe:	b008      	add	sp, #32
 8008800:	bd80      	pop	{r7, pc}
 8008802:	46c0      	nop			@ (mov r8, r8)
 8008804:	ffff69f3 	.word	0xffff69f3
 8008808:	ffffcfff 	.word	0xffffcfff
 800880c:	fffff4ff 	.word	0xfffff4ff
 8008810:	40013800 	.word	0x40013800
 8008814:	40021000 	.word	0x40021000
 8008818:	40004400 	.word	0x40004400
 800881c:	007a1200 	.word	0x007a1200

08008820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800882c:	2208      	movs	r2, #8
 800882e:	4013      	ands	r3, r2
 8008830:	d00b      	beq.n	800884a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	4a4a      	ldr	r2, [pc, #296]	@ (8008964 <UART_AdvFeatureConfig+0x144>)
 800883a:	4013      	ands	r3, r2
 800883c:	0019      	movs	r1, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884e:	2201      	movs	r2, #1
 8008850:	4013      	ands	r3, r2
 8008852:	d00b      	beq.n	800886c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	4a43      	ldr	r2, [pc, #268]	@ (8008968 <UART_AdvFeatureConfig+0x148>)
 800885c:	4013      	ands	r3, r2
 800885e:	0019      	movs	r1, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008870:	2202      	movs	r2, #2
 8008872:	4013      	ands	r3, r2
 8008874:	d00b      	beq.n	800888e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	4a3b      	ldr	r2, [pc, #236]	@ (800896c <UART_AdvFeatureConfig+0x14c>)
 800887e:	4013      	ands	r3, r2
 8008880:	0019      	movs	r1, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008892:	2204      	movs	r2, #4
 8008894:	4013      	ands	r3, r2
 8008896:	d00b      	beq.n	80088b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	4a34      	ldr	r2, [pc, #208]	@ (8008970 <UART_AdvFeatureConfig+0x150>)
 80088a0:	4013      	ands	r3, r2
 80088a2:	0019      	movs	r1, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b4:	2210      	movs	r2, #16
 80088b6:	4013      	ands	r3, r2
 80088b8:	d00b      	beq.n	80088d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	4a2c      	ldr	r2, [pc, #176]	@ (8008974 <UART_AdvFeatureConfig+0x154>)
 80088c2:	4013      	ands	r3, r2
 80088c4:	0019      	movs	r1, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d6:	2220      	movs	r2, #32
 80088d8:	4013      	ands	r3, r2
 80088da:	d00b      	beq.n	80088f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	4a25      	ldr	r2, [pc, #148]	@ (8008978 <UART_AdvFeatureConfig+0x158>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	0019      	movs	r1, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f8:	2240      	movs	r2, #64	@ 0x40
 80088fa:	4013      	ands	r3, r2
 80088fc:	d01d      	beq.n	800893a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	4a1d      	ldr	r2, [pc, #116]	@ (800897c <UART_AdvFeatureConfig+0x15c>)
 8008906:	4013      	ands	r3, r2
 8008908:	0019      	movs	r1, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800891a:	2380      	movs	r3, #128	@ 0x80
 800891c:	035b      	lsls	r3, r3, #13
 800891e:	429a      	cmp	r2, r3
 8008920:	d10b      	bne.n	800893a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	4a15      	ldr	r2, [pc, #84]	@ (8008980 <UART_AdvFeatureConfig+0x160>)
 800892a:	4013      	ands	r3, r2
 800892c:	0019      	movs	r1, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893e:	2280      	movs	r2, #128	@ 0x80
 8008940:	4013      	ands	r3, r2
 8008942:	d00b      	beq.n	800895c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	4a0e      	ldr	r2, [pc, #56]	@ (8008984 <UART_AdvFeatureConfig+0x164>)
 800894c:	4013      	ands	r3, r2
 800894e:	0019      	movs	r1, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	605a      	str	r2, [r3, #4]
  }
}
 800895c:	46c0      	nop			@ (mov r8, r8)
 800895e:	46bd      	mov	sp, r7
 8008960:	b002      	add	sp, #8
 8008962:	bd80      	pop	{r7, pc}
 8008964:	ffff7fff 	.word	0xffff7fff
 8008968:	fffdffff 	.word	0xfffdffff
 800896c:	fffeffff 	.word	0xfffeffff
 8008970:	fffbffff 	.word	0xfffbffff
 8008974:	ffffefff 	.word	0xffffefff
 8008978:	ffffdfff 	.word	0xffffdfff
 800897c:	ffefffff 	.word	0xffefffff
 8008980:	ff9fffff 	.word	0xff9fffff
 8008984:	fff7ffff 	.word	0xfff7ffff

08008988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b092      	sub	sp, #72	@ 0x48
 800898c:	af02      	add	r7, sp, #8
 800898e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2284      	movs	r2, #132	@ 0x84
 8008994:	2100      	movs	r1, #0
 8008996:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008998:	f7fb ffda 	bl	8004950 <HAL_GetTick>
 800899c:	0003      	movs	r3, r0
 800899e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2208      	movs	r2, #8
 80089a8:	4013      	ands	r3, r2
 80089aa:	2b08      	cmp	r3, #8
 80089ac:	d12c      	bne.n	8008a08 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089b0:	2280      	movs	r2, #128	@ 0x80
 80089b2:	0391      	lsls	r1, r2, #14
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	4a46      	ldr	r2, [pc, #280]	@ (8008ad0 <UART_CheckIdleState+0x148>)
 80089b8:	9200      	str	r2, [sp, #0]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f000 f88c 	bl	8008ad8 <UART_WaitOnFlagUntilTimeout>
 80089c0:	1e03      	subs	r3, r0, #0
 80089c2:	d021      	beq.n	8008a08 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089c4:	f3ef 8310 	mrs	r3, PRIMASK
 80089c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80089ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80089cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80089ce:	2301      	movs	r3, #1
 80089d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d4:	f383 8810 	msr	PRIMASK, r3
}
 80089d8:	46c0      	nop			@ (mov r8, r8)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2180      	movs	r1, #128	@ 0x80
 80089e6:	438a      	bics	r2, r1
 80089e8:	601a      	str	r2, [r3, #0]
 80089ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f0:	f383 8810 	msr	PRIMASK, r3
}
 80089f4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2220      	movs	r2, #32
 80089fa:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2278      	movs	r2, #120	@ 0x78
 8008a00:	2100      	movs	r1, #0
 8008a02:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e05f      	b.n	8008ac8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2204      	movs	r2, #4
 8008a10:	4013      	ands	r3, r2
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	d146      	bne.n	8008aa4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a18:	2280      	movs	r2, #128	@ 0x80
 8008a1a:	03d1      	lsls	r1, r2, #15
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8008ad0 <UART_CheckIdleState+0x148>)
 8008a20:	9200      	str	r2, [sp, #0]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f000 f858 	bl	8008ad8 <UART_WaitOnFlagUntilTimeout>
 8008a28:	1e03      	subs	r3, r0, #0
 8008a2a:	d03b      	beq.n	8008aa4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a30:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a32:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a36:	2301      	movs	r3, #1
 8008a38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f383 8810 	msr	PRIMASK, r3
}
 8008a40:	46c0      	nop			@ (mov r8, r8)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4921      	ldr	r1, [pc, #132]	@ (8008ad4 <UART_CheckIdleState+0x14c>)
 8008a4e:	400a      	ands	r2, r1
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f383 8810 	msr	PRIMASK, r3
}
 8008a5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a62:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a64:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a66:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a68:	2301      	movs	r3, #1
 8008a6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	f383 8810 	msr	PRIMASK, r3
}
 8008a72:	46c0      	nop			@ (mov r8, r8)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	689a      	ldr	r2, [r3, #8]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2101      	movs	r1, #1
 8008a80:	438a      	bics	r2, r1
 8008a82:	609a      	str	r2, [r3, #8]
 8008a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	f383 8810 	msr	PRIMASK, r3
}
 8008a8e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2280      	movs	r2, #128	@ 0x80
 8008a94:	2120      	movs	r1, #32
 8008a96:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2278      	movs	r2, #120	@ 0x78
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e011      	b.n	8008ac8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2280      	movs	r2, #128	@ 0x80
 8008aae:	2120      	movs	r1, #32
 8008ab0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2278      	movs	r2, #120	@ 0x78
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	0018      	movs	r0, r3
 8008aca:	46bd      	mov	sp, r7
 8008acc:	b010      	add	sp, #64	@ 0x40
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	01ffffff 	.word	0x01ffffff
 8008ad4:	fffffedf 	.word	0xfffffedf

08008ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	603b      	str	r3, [r7, #0]
 8008ae4:	1dfb      	adds	r3, r7, #7
 8008ae6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ae8:	e051      	b.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	3301      	adds	r3, #1
 8008aee:	d04e      	beq.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af0:	f7fb ff2e 	bl	8004950 <HAL_GetTick>
 8008af4:	0002      	movs	r2, r0
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d302      	bcc.n	8008b06 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e051      	b.n	8008bae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2204      	movs	r2, #4
 8008b12:	4013      	ands	r3, r2
 8008b14:	d03b      	beq.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xb6>
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2b80      	cmp	r3, #128	@ 0x80
 8008b1a:	d038      	beq.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xb6>
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b40      	cmp	r3, #64	@ 0x40
 8008b20:	d035      	beq.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	2208      	movs	r2, #8
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d111      	bne.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2208      	movs	r2, #8
 8008b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f000 f916 	bl	8008d6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2284      	movs	r2, #132	@ 0x84
 8008b44:	2108      	movs	r1, #8
 8008b46:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2278      	movs	r2, #120	@ 0x78
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e02c      	b.n	8008bae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	69da      	ldr	r2, [r3, #28]
 8008b5a:	2380      	movs	r3, #128	@ 0x80
 8008b5c:	011b      	lsls	r3, r3, #4
 8008b5e:	401a      	ands	r2, r3
 8008b60:	2380      	movs	r3, #128	@ 0x80
 8008b62:	011b      	lsls	r3, r3, #4
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d112      	bne.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2280      	movs	r2, #128	@ 0x80
 8008b6e:	0112      	lsls	r2, r2, #4
 8008b70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	0018      	movs	r0, r3
 8008b76:	f000 f8f9 	bl	8008d6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2284      	movs	r2, #132	@ 0x84
 8008b7e:	2120      	movs	r1, #32
 8008b80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2278      	movs	r2, #120	@ 0x78
 8008b86:	2100      	movs	r1, #0
 8008b88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e00f      	b.n	8008bae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	4013      	ands	r3, r2
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	425a      	negs	r2, r3
 8008b9e:	4153      	adcs	r3, r2
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	001a      	movs	r2, r3
 8008ba4:	1dfb      	adds	r3, r7, #7
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d09e      	beq.n	8008aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	0018      	movs	r0, r3
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	b004      	add	sp, #16
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b090      	sub	sp, #64	@ 0x40
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	1dbb      	adds	r3, r7, #6
 8008bc4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	1dba      	adds	r2, r7, #6
 8008bd0:	2158      	movs	r1, #88	@ 0x58
 8008bd2:	8812      	ldrh	r2, [r2, #0]
 8008bd4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	1dba      	adds	r2, r7, #6
 8008bda:	215a      	movs	r1, #90	@ 0x5a
 8008bdc:	8812      	ldrh	r2, [r2, #0]
 8008bde:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	2380      	movs	r3, #128	@ 0x80
 8008bec:	015b      	lsls	r3, r3, #5
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d10d      	bne.n	8008c0e <UART_Start_Receive_IT+0x56>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d104      	bne.n	8008c04 <UART_Start_Receive_IT+0x4c>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	225c      	movs	r2, #92	@ 0x5c
 8008bfe:	4946      	ldr	r1, [pc, #280]	@ (8008d18 <UART_Start_Receive_IT+0x160>)
 8008c00:	5299      	strh	r1, [r3, r2]
 8008c02:	e01a      	b.n	8008c3a <UART_Start_Receive_IT+0x82>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	225c      	movs	r2, #92	@ 0x5c
 8008c08:	21ff      	movs	r1, #255	@ 0xff
 8008c0a:	5299      	strh	r1, [r3, r2]
 8008c0c:	e015      	b.n	8008c3a <UART_Start_Receive_IT+0x82>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10d      	bne.n	8008c32 <UART_Start_Receive_IT+0x7a>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d104      	bne.n	8008c28 <UART_Start_Receive_IT+0x70>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	225c      	movs	r2, #92	@ 0x5c
 8008c22:	21ff      	movs	r1, #255	@ 0xff
 8008c24:	5299      	strh	r1, [r3, r2]
 8008c26:	e008      	b.n	8008c3a <UART_Start_Receive_IT+0x82>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	225c      	movs	r2, #92	@ 0x5c
 8008c2c:	217f      	movs	r1, #127	@ 0x7f
 8008c2e:	5299      	strh	r1, [r3, r2]
 8008c30:	e003      	b.n	8008c3a <UART_Start_Receive_IT+0x82>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	225c      	movs	r2, #92	@ 0x5c
 8008c36:	2100      	movs	r1, #0
 8008c38:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2284      	movs	r2, #132	@ 0x84
 8008c3e:	2100      	movs	r1, #0
 8008c40:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2280      	movs	r2, #128	@ 0x80
 8008c46:	2122      	movs	r1, #34	@ 0x22
 8008c48:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8008c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c54:	2301      	movs	r3, #1
 8008c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5a:	f383 8810 	msr	PRIMASK, r3
}
 8008c5e:	46c0      	nop			@ (mov r8, r8)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689a      	ldr	r2, [r3, #8]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	609a      	str	r2, [r3, #8]
 8008c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c72:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c76:	f383 8810 	msr	PRIMASK, r3
}
 8008c7a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	689a      	ldr	r2, [r3, #8]
 8008c80:	2380      	movs	r3, #128	@ 0x80
 8008c82:	015b      	lsls	r3, r3, #5
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d107      	bne.n	8008c98 <UART_Start_Receive_IT+0xe0>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d103      	bne.n	8008c98 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	4a22      	ldr	r2, [pc, #136]	@ (8008d1c <UART_Start_Receive_IT+0x164>)
 8008c94:	669a      	str	r2, [r3, #104]	@ 0x68
 8008c96:	e002      	b.n	8008c9e <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	4a21      	ldr	r2, [pc, #132]	@ (8008d20 <UART_Start_Receive_IT+0x168>)
 8008c9c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d019      	beq.n	8008cda <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8008caa:	61fb      	str	r3, [r7, #28]
  return(result);
 8008cac:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	f383 8810 	msr	PRIMASK, r3
}
 8008cba:	46c0      	nop			@ (mov r8, r8)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2190      	movs	r1, #144	@ 0x90
 8008cc8:	0049      	lsls	r1, r1, #1
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd4:	f383 8810 	msr	PRIMASK, r3
}
 8008cd8:	e018      	b.n	8008d0c <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cda:	f3ef 8310 	mrs	r3, PRIMASK
 8008cde:	613b      	str	r3, [r7, #16]
  return(result);
 8008ce0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f383 8810 	msr	PRIMASK, r3
}
 8008cee:	46c0      	nop			@ (mov r8, r8)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2120      	movs	r1, #32
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	f383 8810 	msr	PRIMASK, r3
}
 8008d0a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	0018      	movs	r0, r3
 8008d10:	46bd      	mov	sp, r7
 8008d12:	b010      	add	sp, #64	@ 0x40
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	46c0      	nop			@ (mov r8, r8)
 8008d18:	000001ff 	.word	0x000001ff
 8008d1c:	080091a9 	.word	0x080091a9
 8008d20:	08008ff1 	.word	0x08008ff1

08008d24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d30:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d32:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	2301      	movs	r3, #1
 8008d38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f383 8810 	msr	PRIMASK, r3
}
 8008d40:	46c0      	nop			@ (mov r8, r8)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	21c0      	movs	r1, #192	@ 0xc0
 8008d4e:	438a      	bics	r2, r1
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f383 8810 	msr	PRIMASK, r3
}
 8008d5c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2220      	movs	r2, #32
 8008d62:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008d64:	46c0      	nop			@ (mov r8, r8)
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b006      	add	sp, #24
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08e      	sub	sp, #56	@ 0x38
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d74:	f3ef 8310 	mrs	r3, PRIMASK
 8008d78:	617b      	str	r3, [r7, #20]
  return(result);
 8008d7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d7e:	2301      	movs	r3, #1
 8008d80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	f383 8810 	msr	PRIMASK, r3
}
 8008d88:	46c0      	nop			@ (mov r8, r8)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4926      	ldr	r1, [pc, #152]	@ (8008e30 <UART_EndRxTransfer+0xc4>)
 8008d96:	400a      	ands	r2, r1
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	f383 8810 	msr	PRIMASK, r3
}
 8008da4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008da6:	f3ef 8310 	mrs	r3, PRIMASK
 8008daa:	623b      	str	r3, [r7, #32]
  return(result);
 8008dac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dae:	633b      	str	r3, [r7, #48]	@ 0x30
 8008db0:	2301      	movs	r3, #1
 8008db2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db6:	f383 8810 	msr	PRIMASK, r3
}
 8008dba:	46c0      	nop			@ (mov r8, r8)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689a      	ldr	r2, [r3, #8]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	438a      	bics	r2, r1
 8008dca:	609a      	str	r2, [r3, #8]
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	f383 8810 	msr	PRIMASK, r3
}
 8008dd6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d118      	bne.n	8008e12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de0:	f3ef 8310 	mrs	r3, PRIMASK
 8008de4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008de6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dea:	2301      	movs	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f383 8810 	msr	PRIMASK, r3
}
 8008df4:	46c0      	nop			@ (mov r8, r8)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2110      	movs	r1, #16
 8008e02:	438a      	bics	r2, r1
 8008e04:	601a      	str	r2, [r3, #0]
 8008e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	f383 8810 	msr	PRIMASK, r3
}
 8008e10:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2280      	movs	r2, #128	@ 0x80
 8008e16:	2120      	movs	r1, #32
 8008e18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008e26:	46c0      	nop			@ (mov r8, r8)
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	b00e      	add	sp, #56	@ 0x38
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	46c0      	nop			@ (mov r8, r8)
 8008e30:	fffffedf 	.word	0xfffffedf

08008e34 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08c      	sub	sp, #48	@ 0x30
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e40:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	d035      	beq.n	8008eb6 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8008e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4c:	2252      	movs	r2, #82	@ 0x52
 8008e4e:	2100      	movs	r1, #0
 8008e50:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e52:	f3ef 8310 	mrs	r3, PRIMASK
 8008e56:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e58:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f383 8810 	msr	PRIMASK, r3
}
 8008e66:	46c0      	nop			@ (mov r8, r8)
 8008e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689a      	ldr	r2, [r3, #8]
 8008e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2180      	movs	r1, #128	@ 0x80
 8008e74:	438a      	bics	r2, r1
 8008e76:	609a      	str	r2, [r3, #8]
 8008e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f383 8810 	msr	PRIMASK, r3
}
 8008e82:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e84:	f3ef 8310 	mrs	r3, PRIMASK
 8008e88:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e8a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e8e:	2301      	movs	r3, #1
 8008e90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	f383 8810 	msr	PRIMASK, r3
}
 8008e98:	46c0      	nop			@ (mov r8, r8)
 8008e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2140      	movs	r1, #64	@ 0x40
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	f383 8810 	msr	PRIMASK, r3
}
 8008eb4:	e004      	b.n	8008ec0 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8008eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb8:	0018      	movs	r0, r3
 8008eba:	f7fa f999 	bl	80031f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ebe:	46c0      	nop			@ (mov r8, r8)
 8008ec0:	46c0      	nop			@ (mov r8, r8)
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	b00c      	add	sp, #48	@ 0x30
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	0018      	movs	r0, r3
 8008eda:	f7ff fb45 	bl	8008568 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ede:	46c0      	nop			@ (mov r8, r8)
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	b004      	add	sp, #16
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b086      	sub	sp, #24
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ef8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	2280      	movs	r2, #128	@ 0x80
 8008efe:	589b      	ldr	r3, [r3, r2]
 8008f00:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	2280      	movs	r2, #128	@ 0x80
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b80      	cmp	r3, #128	@ 0x80
 8008f0e:	d10a      	bne.n	8008f26 <UART_DMAError+0x40>
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	2b21      	cmp	r3, #33	@ 0x21
 8008f14:	d107      	bne.n	8008f26 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2252      	movs	r2, #82	@ 0x52
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	0018      	movs	r0, r3
 8008f22:	f7ff feff 	bl	8008d24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	2240      	movs	r2, #64	@ 0x40
 8008f2e:	4013      	ands	r3, r2
 8008f30:	2b40      	cmp	r3, #64	@ 0x40
 8008f32:	d10a      	bne.n	8008f4a <UART_DMAError+0x64>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b22      	cmp	r3, #34	@ 0x22
 8008f38:	d107      	bne.n	8008f4a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	225a      	movs	r2, #90	@ 0x5a
 8008f3e:	2100      	movs	r1, #0
 8008f40:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	0018      	movs	r0, r3
 8008f46:	f7ff ff11 	bl	8008d6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2284      	movs	r2, #132	@ 0x84
 8008f4e:	589b      	ldr	r3, [r3, r2]
 8008f50:	2210      	movs	r2, #16
 8008f52:	431a      	orrs	r2, r3
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	2184      	movs	r1, #132	@ 0x84
 8008f58:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	f7ff fb0b 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f62:	46c0      	nop			@ (mov r8, r8)
 8008f64:	46bd      	mov	sp, r7
 8008f66:	b006      	add	sp, #24
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	225a      	movs	r2, #90	@ 0x5a
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2252      	movs	r2, #82	@ 0x52
 8008f84:	2100      	movs	r1, #0
 8008f86:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f7ff faf4 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f90:	46c0      	nop			@ (mov r8, r8)
 8008f92:	46bd      	mov	sp, r7
 8008f94:	b004      	add	sp, #16
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8008fa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fa6:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fa8:	617b      	str	r3, [r7, #20]
 8008faa:	2301      	movs	r3, #1
 8008fac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f383 8810 	msr	PRIMASK, r3
}
 8008fb4:	46c0      	nop			@ (mov r8, r8)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2140      	movs	r1, #64	@ 0x40
 8008fc2:	438a      	bics	r2, r1
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f383 8810 	msr	PRIMASK, r3
}
 8008fd0:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	0018      	movs	r0, r3
 8008fe2:	f7fa f905 	bl	80031f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fe6:	46c0      	nop			@ (mov r8, r8)
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	b006      	add	sp, #24
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b094      	sub	sp, #80	@ 0x50
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ff8:	204e      	movs	r0, #78	@ 0x4e
 8008ffa:	183b      	adds	r3, r7, r0
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	215c      	movs	r1, #92	@ 0x5c
 8009000:	5a52      	ldrh	r2, [r2, r1]
 8009002:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2280      	movs	r2, #128	@ 0x80
 8009008:	589b      	ldr	r3, [r3, r2]
 800900a:	2b22      	cmp	r3, #34	@ 0x22
 800900c:	d000      	beq.n	8009010 <UART_RxISR_8BIT+0x20>
 800900e:	e0ba      	b.n	8009186 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	214c      	movs	r1, #76	@ 0x4c
 8009016:	187b      	adds	r3, r7, r1
 8009018:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800901a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800901c:	187b      	adds	r3, r7, r1
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	b2da      	uxtb	r2, r3
 8009022:	183b      	adds	r3, r7, r0
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	b2d9      	uxtb	r1, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800902c:	400a      	ands	r2, r1
 800902e:	b2d2      	uxtb	r2, r2
 8009030:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009036:	1c5a      	adds	r2, r3, #1
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	225a      	movs	r2, #90	@ 0x5a
 8009040:	5a9b      	ldrh	r3, [r3, r2]
 8009042:	b29b      	uxth	r3, r3
 8009044:	3b01      	subs	r3, #1
 8009046:	b299      	uxth	r1, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	225a      	movs	r2, #90	@ 0x5a
 800904c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	225a      	movs	r2, #90	@ 0x5a
 8009052:	5a9b      	ldrh	r3, [r3, r2]
 8009054:	b29b      	uxth	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d000      	beq.n	800905c <UART_RxISR_8BIT+0x6c>
 800905a:	e09c      	b.n	8009196 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800905c:	f3ef 8310 	mrs	r3, PRIMASK
 8009060:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009064:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009066:	2301      	movs	r3, #1
 8009068:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800906a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906c:	f383 8810 	msr	PRIMASK, r3
}
 8009070:	46c0      	nop			@ (mov r8, r8)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4948      	ldr	r1, [pc, #288]	@ (80091a0 <UART_RxISR_8BIT+0x1b0>)
 800907e:	400a      	ands	r2, r1
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009088:	f383 8810 	msr	PRIMASK, r3
}
 800908c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800908e:	f3ef 8310 	mrs	r3, PRIMASK
 8009092:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009096:	647b      	str	r3, [r7, #68]	@ 0x44
 8009098:	2301      	movs	r3, #1
 800909a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800909c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800909e:	f383 8810 	msr	PRIMASK, r3
}
 80090a2:	46c0      	nop			@ (mov r8, r8)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689a      	ldr	r2, [r3, #8]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2101      	movs	r1, #1
 80090b0:	438a      	bics	r2, r1
 80090b2:	609a      	str	r2, [r3, #8]
 80090b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ba:	f383 8810 	msr	PRIMASK, r3
}
 80090be:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2280      	movs	r2, #128	@ 0x80
 80090c4:	2120      	movs	r1, #32
 80090c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	2380      	movs	r3, #128	@ 0x80
 80090dc:	041b      	lsls	r3, r3, #16
 80090de:	4013      	ands	r3, r2
 80090e0:	d018      	beq.n	8009114 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090e2:	f3ef 8310 	mrs	r3, PRIMASK
 80090e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80090e8:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80090ec:	2301      	movs	r3, #1
 80090ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	f383 8810 	msr	PRIMASK, r3
}
 80090f6:	46c0      	nop			@ (mov r8, r8)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4928      	ldr	r1, [pc, #160]	@ (80091a4 <UART_RxISR_8BIT+0x1b4>)
 8009104:	400a      	ands	r2, r1
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800910a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	f383 8810 	msr	PRIMASK, r3
}
 8009112:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009118:	2b01      	cmp	r3, #1
 800911a:	d12f      	bne.n	800917c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009122:	f3ef 8310 	mrs	r3, PRIMASK
 8009126:	60fb      	str	r3, [r7, #12]
  return(result);
 8009128:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800912a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800912c:	2301      	movs	r3, #1
 800912e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	f383 8810 	msr	PRIMASK, r3
}
 8009136:	46c0      	nop			@ (mov r8, r8)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2110      	movs	r1, #16
 8009144:	438a      	bics	r2, r1
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800914a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f383 8810 	msr	PRIMASK, r3
}
 8009152:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	2210      	movs	r2, #16
 800915c:	4013      	ands	r3, r2
 800915e:	2b10      	cmp	r3, #16
 8009160:	d103      	bne.n	800916a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2210      	movs	r2, #16
 8009168:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2258      	movs	r2, #88	@ 0x58
 800916e:	5a9a      	ldrh	r2, [r3, r2]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	0011      	movs	r1, r2
 8009174:	0018      	movs	r0, r3
 8009176:	f7ff fa07 	bl	8008588 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800917a:	e00c      	b.n	8009196 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	0018      	movs	r0, r3
 8009180:	f7f9 fef6 	bl	8002f70 <HAL_UART_RxCpltCallback>
}
 8009184:	e007      	b.n	8009196 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	699a      	ldr	r2, [r3, #24]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2108      	movs	r1, #8
 8009192:	430a      	orrs	r2, r1
 8009194:	619a      	str	r2, [r3, #24]
}
 8009196:	46c0      	nop			@ (mov r8, r8)
 8009198:	46bd      	mov	sp, r7
 800919a:	b014      	add	sp, #80	@ 0x50
 800919c:	bd80      	pop	{r7, pc}
 800919e:	46c0      	nop			@ (mov r8, r8)
 80091a0:	fffffedf 	.word	0xfffffedf
 80091a4:	fbffffff 	.word	0xfbffffff

080091a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b094      	sub	sp, #80	@ 0x50
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80091b0:	204e      	movs	r0, #78	@ 0x4e
 80091b2:	183b      	adds	r3, r7, r0
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	215c      	movs	r1, #92	@ 0x5c
 80091b8:	5a52      	ldrh	r2, [r2, r1]
 80091ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2280      	movs	r2, #128	@ 0x80
 80091c0:	589b      	ldr	r3, [r3, r2]
 80091c2:	2b22      	cmp	r3, #34	@ 0x22
 80091c4:	d000      	beq.n	80091c8 <UART_RxISR_16BIT+0x20>
 80091c6:	e0ba      	b.n	800933e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	214c      	movs	r1, #76	@ 0x4c
 80091ce:	187b      	adds	r3, r7, r1
 80091d0:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80091d2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80091da:	187b      	adds	r3, r7, r1
 80091dc:	183a      	adds	r2, r7, r0
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	8812      	ldrh	r2, [r2, #0]
 80091e2:	4013      	ands	r3, r2
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ee:	1c9a      	adds	r2, r3, #2
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	225a      	movs	r2, #90	@ 0x5a
 80091f8:	5a9b      	ldrh	r3, [r3, r2]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	3b01      	subs	r3, #1
 80091fe:	b299      	uxth	r1, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	225a      	movs	r2, #90	@ 0x5a
 8009204:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	225a      	movs	r2, #90	@ 0x5a
 800920a:	5a9b      	ldrh	r3, [r3, r2]
 800920c:	b29b      	uxth	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	d000      	beq.n	8009214 <UART_RxISR_16BIT+0x6c>
 8009212:	e09c      	b.n	800934e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009214:	f3ef 8310 	mrs	r3, PRIMASK
 8009218:	623b      	str	r3, [r7, #32]
  return(result);
 800921a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800921c:	647b      	str	r3, [r7, #68]	@ 0x44
 800921e:	2301      	movs	r3, #1
 8009220:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009224:	f383 8810 	msr	PRIMASK, r3
}
 8009228:	46c0      	nop			@ (mov r8, r8)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4948      	ldr	r1, [pc, #288]	@ (8009358 <UART_RxISR_16BIT+0x1b0>)
 8009236:	400a      	ands	r2, r1
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800923c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800923e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009240:	f383 8810 	msr	PRIMASK, r3
}
 8009244:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009246:	f3ef 8310 	mrs	r3, PRIMASK
 800924a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800924c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800924e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009250:	2301      	movs	r3, #1
 8009252:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009256:	f383 8810 	msr	PRIMASK, r3
}
 800925a:	46c0      	nop			@ (mov r8, r8)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2101      	movs	r1, #1
 8009268:	438a      	bics	r2, r1
 800926a:	609a      	str	r2, [r3, #8]
 800926c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800926e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009272:	f383 8810 	msr	PRIMASK, r3
}
 8009276:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2280      	movs	r2, #128	@ 0x80
 800927c:	2120      	movs	r1, #32
 800927e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	2380      	movs	r3, #128	@ 0x80
 8009294:	041b      	lsls	r3, r3, #16
 8009296:	4013      	ands	r3, r2
 8009298:	d018      	beq.n	80092cc <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800929a:	f3ef 8310 	mrs	r3, PRIMASK
 800929e:	617b      	str	r3, [r7, #20]
  return(result);
 80092a0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092a4:	2301      	movs	r3, #1
 80092a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	f383 8810 	msr	PRIMASK, r3
}
 80092ae:	46c0      	nop			@ (mov r8, r8)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4928      	ldr	r1, [pc, #160]	@ (800935c <UART_RxISR_16BIT+0x1b4>)
 80092bc:	400a      	ands	r2, r1
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	f383 8810 	msr	PRIMASK, r3
}
 80092ca:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d12f      	bne.n	8009334 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092da:	f3ef 8310 	mrs	r3, PRIMASK
 80092de:	60bb      	str	r3, [r7, #8]
  return(result);
 80092e0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80092e4:	2301      	movs	r3, #1
 80092e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f383 8810 	msr	PRIMASK, r3
}
 80092ee:	46c0      	nop			@ (mov r8, r8)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2110      	movs	r1, #16
 80092fc:	438a      	bics	r2, r1
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009302:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f383 8810 	msr	PRIMASK, r3
}
 800930a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	2210      	movs	r2, #16
 8009314:	4013      	ands	r3, r2
 8009316:	2b10      	cmp	r3, #16
 8009318:	d103      	bne.n	8009322 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2210      	movs	r2, #16
 8009320:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2258      	movs	r2, #88	@ 0x58
 8009326:	5a9a      	ldrh	r2, [r3, r2]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	0011      	movs	r1, r2
 800932c:	0018      	movs	r0, r3
 800932e:	f7ff f92b 	bl	8008588 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009332:	e00c      	b.n	800934e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	0018      	movs	r0, r3
 8009338:	f7f9 fe1a 	bl	8002f70 <HAL_UART_RxCpltCallback>
}
 800933c:	e007      	b.n	800934e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	699a      	ldr	r2, [r3, #24]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2108      	movs	r1, #8
 800934a:	430a      	orrs	r2, r1
 800934c:	619a      	str	r2, [r3, #24]
}
 800934e:	46c0      	nop			@ (mov r8, r8)
 8009350:	46bd      	mov	sp, r7
 8009352:	b014      	add	sp, #80	@ 0x50
 8009354:	bd80      	pop	{r7, pc}
 8009356:	46c0      	nop			@ (mov r8, r8)
 8009358:	fffffedf 	.word	0xfffffedf
 800935c:	fbffffff 	.word	0xfbffffff

08009360 <atof>:
 8009360:	b510      	push	{r4, lr}
 8009362:	2100      	movs	r1, #0
 8009364:	f000 fe14 	bl	8009f90 <strtod>
 8009368:	bd10      	pop	{r4, pc}
	...

0800936c <sulp>:
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	0016      	movs	r6, r2
 8009370:	000d      	movs	r5, r1
 8009372:	f003 fe69 	bl	800d048 <__ulp>
 8009376:	2e00      	cmp	r6, #0
 8009378:	d00d      	beq.n	8009396 <sulp+0x2a>
 800937a:	236b      	movs	r3, #107	@ 0x6b
 800937c:	006a      	lsls	r2, r5, #1
 800937e:	0d52      	lsrs	r2, r2, #21
 8009380:	1a9b      	subs	r3, r3, r2
 8009382:	2b00      	cmp	r3, #0
 8009384:	dd07      	ble.n	8009396 <sulp+0x2a>
 8009386:	2400      	movs	r4, #0
 8009388:	4a03      	ldr	r2, [pc, #12]	@ (8009398 <sulp+0x2c>)
 800938a:	051b      	lsls	r3, r3, #20
 800938c:	189d      	adds	r5, r3, r2
 800938e:	002b      	movs	r3, r5
 8009390:	0022      	movs	r2, r4
 8009392:	f7f8 fbdd 	bl	8001b50 <__aeabi_dmul>
 8009396:	bd70      	pop	{r4, r5, r6, pc}
 8009398:	3ff00000 	.word	0x3ff00000

0800939c <_strtod_l>:
 800939c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800939e:	b0a3      	sub	sp, #140	@ 0x8c
 80093a0:	921b      	str	r2, [sp, #108]	@ 0x6c
 80093a2:	2200      	movs	r2, #0
 80093a4:	2600      	movs	r6, #0
 80093a6:	2700      	movs	r7, #0
 80093a8:	9005      	str	r0, [sp, #20]
 80093aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80093ac:	921e      	str	r2, [sp, #120]	@ 0x78
 80093ae:	911d      	str	r1, [sp, #116]	@ 0x74
 80093b0:	780a      	ldrb	r2, [r1, #0]
 80093b2:	2a2b      	cmp	r2, #43	@ 0x2b
 80093b4:	d053      	beq.n	800945e <_strtod_l+0xc2>
 80093b6:	d83f      	bhi.n	8009438 <_strtod_l+0x9c>
 80093b8:	2a0d      	cmp	r2, #13
 80093ba:	d839      	bhi.n	8009430 <_strtod_l+0x94>
 80093bc:	2a08      	cmp	r2, #8
 80093be:	d839      	bhi.n	8009434 <_strtod_l+0x98>
 80093c0:	2a00      	cmp	r2, #0
 80093c2:	d042      	beq.n	800944a <_strtod_l+0xae>
 80093c4:	2200      	movs	r2, #0
 80093c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80093c8:	2100      	movs	r1, #0
 80093ca:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80093cc:	910c      	str	r1, [sp, #48]	@ 0x30
 80093ce:	782a      	ldrb	r2, [r5, #0]
 80093d0:	2a30      	cmp	r2, #48	@ 0x30
 80093d2:	d000      	beq.n	80093d6 <_strtod_l+0x3a>
 80093d4:	e083      	b.n	80094de <_strtod_l+0x142>
 80093d6:	786a      	ldrb	r2, [r5, #1]
 80093d8:	3120      	adds	r1, #32
 80093da:	438a      	bics	r2, r1
 80093dc:	2a58      	cmp	r2, #88	@ 0x58
 80093de:	d000      	beq.n	80093e2 <_strtod_l+0x46>
 80093e0:	e073      	b.n	80094ca <_strtod_l+0x12e>
 80093e2:	9302      	str	r3, [sp, #8]
 80093e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80093e6:	4a95      	ldr	r2, [pc, #596]	@ (800963c <_strtod_l+0x2a0>)
 80093e8:	9301      	str	r3, [sp, #4]
 80093ea:	ab1e      	add	r3, sp, #120	@ 0x78
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	9805      	ldr	r0, [sp, #20]
 80093f0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80093f2:	a91d      	add	r1, sp, #116	@ 0x74
 80093f4:	f002 fed8 	bl	800c1a8 <__gethex>
 80093f8:	230f      	movs	r3, #15
 80093fa:	0002      	movs	r2, r0
 80093fc:	401a      	ands	r2, r3
 80093fe:	0004      	movs	r4, r0
 8009400:	9206      	str	r2, [sp, #24]
 8009402:	4218      	tst	r0, r3
 8009404:	d005      	beq.n	8009412 <_strtod_l+0x76>
 8009406:	2a06      	cmp	r2, #6
 8009408:	d12b      	bne.n	8009462 <_strtod_l+0xc6>
 800940a:	2300      	movs	r3, #0
 800940c:	3501      	adds	r5, #1
 800940e:	951d      	str	r5, [sp, #116]	@ 0x74
 8009410:	9312      	str	r3, [sp, #72]	@ 0x48
 8009412:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <_strtod_l+0x82>
 8009418:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800941a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800941c:	6013      	str	r3, [r2, #0]
 800941e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009420:	2b00      	cmp	r3, #0
 8009422:	d019      	beq.n	8009458 <_strtod_l+0xbc>
 8009424:	2380      	movs	r3, #128	@ 0x80
 8009426:	0030      	movs	r0, r6
 8009428:	061b      	lsls	r3, r3, #24
 800942a:	18f9      	adds	r1, r7, r3
 800942c:	b023      	add	sp, #140	@ 0x8c
 800942e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009430:	2a20      	cmp	r2, #32
 8009432:	d1c7      	bne.n	80093c4 <_strtod_l+0x28>
 8009434:	3101      	adds	r1, #1
 8009436:	e7ba      	b.n	80093ae <_strtod_l+0x12>
 8009438:	2a2d      	cmp	r2, #45	@ 0x2d
 800943a:	d1c3      	bne.n	80093c4 <_strtod_l+0x28>
 800943c:	3a2c      	subs	r2, #44	@ 0x2c
 800943e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009440:	1c4a      	adds	r2, r1, #1
 8009442:	921d      	str	r2, [sp, #116]	@ 0x74
 8009444:	784a      	ldrb	r2, [r1, #1]
 8009446:	2a00      	cmp	r2, #0
 8009448:	d1be      	bne.n	80093c8 <_strtod_l+0x2c>
 800944a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800944c:	931d      	str	r3, [sp, #116]	@ 0x74
 800944e:	2300      	movs	r3, #0
 8009450:	9312      	str	r3, [sp, #72]	@ 0x48
 8009452:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1df      	bne.n	8009418 <_strtod_l+0x7c>
 8009458:	0030      	movs	r0, r6
 800945a:	0039      	movs	r1, r7
 800945c:	e7e6      	b.n	800942c <_strtod_l+0x90>
 800945e:	2200      	movs	r2, #0
 8009460:	e7ed      	b.n	800943e <_strtod_l+0xa2>
 8009462:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009464:	2a00      	cmp	r2, #0
 8009466:	d007      	beq.n	8009478 <_strtod_l+0xdc>
 8009468:	2135      	movs	r1, #53	@ 0x35
 800946a:	a820      	add	r0, sp, #128	@ 0x80
 800946c:	f003 fee2 	bl	800d234 <__copybits>
 8009470:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009472:	9805      	ldr	r0, [sp, #20]
 8009474:	f003 fa9c 	bl	800c9b0 <_Bfree>
 8009478:	9806      	ldr	r0, [sp, #24]
 800947a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800947c:	3801      	subs	r0, #1
 800947e:	2804      	cmp	r0, #4
 8009480:	d806      	bhi.n	8009490 <_strtod_l+0xf4>
 8009482:	f7f6 fe53 	bl	800012c <__gnu_thumb1_case_uqi>
 8009486:	0312      	.short	0x0312
 8009488:	1e1c      	.short	0x1e1c
 800948a:	12          	.byte	0x12
 800948b:	00          	.byte	0x00
 800948c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800948e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8009490:	05e4      	lsls	r4, r4, #23
 8009492:	d502      	bpl.n	800949a <_strtod_l+0xfe>
 8009494:	2380      	movs	r3, #128	@ 0x80
 8009496:	061b      	lsls	r3, r3, #24
 8009498:	431f      	orrs	r7, r3
 800949a:	4b69      	ldr	r3, [pc, #420]	@ (8009640 <_strtod_l+0x2a4>)
 800949c:	423b      	tst	r3, r7
 800949e:	d1b8      	bne.n	8009412 <_strtod_l+0x76>
 80094a0:	f001 ff02 	bl	800b2a8 <__errno>
 80094a4:	2322      	movs	r3, #34	@ 0x22
 80094a6:	6003      	str	r3, [r0, #0]
 80094a8:	e7b3      	b.n	8009412 <_strtod_l+0x76>
 80094aa:	4966      	ldr	r1, [pc, #408]	@ (8009644 <_strtod_l+0x2a8>)
 80094ac:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80094ae:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80094b0:	400a      	ands	r2, r1
 80094b2:	4965      	ldr	r1, [pc, #404]	@ (8009648 <_strtod_l+0x2ac>)
 80094b4:	185b      	adds	r3, r3, r1
 80094b6:	051b      	lsls	r3, r3, #20
 80094b8:	431a      	orrs	r2, r3
 80094ba:	0017      	movs	r7, r2
 80094bc:	e7e8      	b.n	8009490 <_strtod_l+0xf4>
 80094be:	4f60      	ldr	r7, [pc, #384]	@ (8009640 <_strtod_l+0x2a4>)
 80094c0:	e7e6      	b.n	8009490 <_strtod_l+0xf4>
 80094c2:	2601      	movs	r6, #1
 80094c4:	4f61      	ldr	r7, [pc, #388]	@ (800964c <_strtod_l+0x2b0>)
 80094c6:	4276      	negs	r6, r6
 80094c8:	e7e2      	b.n	8009490 <_strtod_l+0xf4>
 80094ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094cc:	1c5a      	adds	r2, r3, #1
 80094ce:	921d      	str	r2, [sp, #116]	@ 0x74
 80094d0:	785b      	ldrb	r3, [r3, #1]
 80094d2:	2b30      	cmp	r3, #48	@ 0x30
 80094d4:	d0f9      	beq.n	80094ca <_strtod_l+0x12e>
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d09b      	beq.n	8009412 <_strtod_l+0x76>
 80094da:	2301      	movs	r3, #1
 80094dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80094de:	2500      	movs	r5, #0
 80094e0:	220a      	movs	r2, #10
 80094e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094e4:	950d      	str	r5, [sp, #52]	@ 0x34
 80094e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094e8:	9508      	str	r5, [sp, #32]
 80094ea:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80094ec:	7804      	ldrb	r4, [r0, #0]
 80094ee:	0023      	movs	r3, r4
 80094f0:	3b30      	subs	r3, #48	@ 0x30
 80094f2:	b2d9      	uxtb	r1, r3
 80094f4:	2909      	cmp	r1, #9
 80094f6:	d927      	bls.n	8009548 <_strtod_l+0x1ac>
 80094f8:	2201      	movs	r2, #1
 80094fa:	4955      	ldr	r1, [pc, #340]	@ (8009650 <_strtod_l+0x2b4>)
 80094fc:	f001 fe70 	bl	800b1e0 <strncmp>
 8009500:	2800      	cmp	r0, #0
 8009502:	d031      	beq.n	8009568 <_strtod_l+0x1cc>
 8009504:	2000      	movs	r0, #0
 8009506:	0023      	movs	r3, r4
 8009508:	4684      	mov	ip, r0
 800950a:	9a08      	ldr	r2, [sp, #32]
 800950c:	900e      	str	r0, [sp, #56]	@ 0x38
 800950e:	9206      	str	r2, [sp, #24]
 8009510:	2220      	movs	r2, #32
 8009512:	0019      	movs	r1, r3
 8009514:	4391      	bics	r1, r2
 8009516:	000a      	movs	r2, r1
 8009518:	2100      	movs	r1, #0
 800951a:	9107      	str	r1, [sp, #28]
 800951c:	2a45      	cmp	r2, #69	@ 0x45
 800951e:	d000      	beq.n	8009522 <_strtod_l+0x186>
 8009520:	e0c0      	b.n	80096a4 <_strtod_l+0x308>
 8009522:	9b06      	ldr	r3, [sp, #24]
 8009524:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009526:	4303      	orrs	r3, r0
 8009528:	4313      	orrs	r3, r2
 800952a:	428b      	cmp	r3, r1
 800952c:	d08d      	beq.n	800944a <_strtod_l+0xae>
 800952e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009530:	9309      	str	r3, [sp, #36]	@ 0x24
 8009532:	3301      	adds	r3, #1
 8009534:	931d      	str	r3, [sp, #116]	@ 0x74
 8009536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009538:	785b      	ldrb	r3, [r3, #1]
 800953a:	2b2b      	cmp	r3, #43	@ 0x2b
 800953c:	d070      	beq.n	8009620 <_strtod_l+0x284>
 800953e:	000c      	movs	r4, r1
 8009540:	2b2d      	cmp	r3, #45	@ 0x2d
 8009542:	d173      	bne.n	800962c <_strtod_l+0x290>
 8009544:	2401      	movs	r4, #1
 8009546:	e06c      	b.n	8009622 <_strtod_l+0x286>
 8009548:	9908      	ldr	r1, [sp, #32]
 800954a:	2908      	cmp	r1, #8
 800954c:	dc09      	bgt.n	8009562 <_strtod_l+0x1c6>
 800954e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009550:	4351      	muls	r1, r2
 8009552:	185b      	adds	r3, r3, r1
 8009554:	930d      	str	r3, [sp, #52]	@ 0x34
 8009556:	9b08      	ldr	r3, [sp, #32]
 8009558:	3001      	adds	r0, #1
 800955a:	3301      	adds	r3, #1
 800955c:	9308      	str	r3, [sp, #32]
 800955e:	901d      	str	r0, [sp, #116]	@ 0x74
 8009560:	e7c3      	b.n	80094ea <_strtod_l+0x14e>
 8009562:	4355      	muls	r5, r2
 8009564:	195d      	adds	r5, r3, r5
 8009566:	e7f6      	b.n	8009556 <_strtod_l+0x1ba>
 8009568:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	921d      	str	r2, [sp, #116]	@ 0x74
 800956e:	9a08      	ldr	r2, [sp, #32]
 8009570:	785b      	ldrb	r3, [r3, #1]
 8009572:	2a00      	cmp	r2, #0
 8009574:	d03a      	beq.n	80095ec <_strtod_l+0x250>
 8009576:	900e      	str	r0, [sp, #56]	@ 0x38
 8009578:	9206      	str	r2, [sp, #24]
 800957a:	001a      	movs	r2, r3
 800957c:	3a30      	subs	r2, #48	@ 0x30
 800957e:	2a09      	cmp	r2, #9
 8009580:	d912      	bls.n	80095a8 <_strtod_l+0x20c>
 8009582:	2201      	movs	r2, #1
 8009584:	4694      	mov	ip, r2
 8009586:	e7c3      	b.n	8009510 <_strtod_l+0x174>
 8009588:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800958a:	3001      	adds	r0, #1
 800958c:	1c5a      	adds	r2, r3, #1
 800958e:	921d      	str	r2, [sp, #116]	@ 0x74
 8009590:	785b      	ldrb	r3, [r3, #1]
 8009592:	2b30      	cmp	r3, #48	@ 0x30
 8009594:	d0f8      	beq.n	8009588 <_strtod_l+0x1ec>
 8009596:	001a      	movs	r2, r3
 8009598:	3a31      	subs	r2, #49	@ 0x31
 800959a:	2a08      	cmp	r2, #8
 800959c:	d83b      	bhi.n	8009616 <_strtod_l+0x27a>
 800959e:	900e      	str	r0, [sp, #56]	@ 0x38
 80095a0:	2000      	movs	r0, #0
 80095a2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80095a4:	9006      	str	r0, [sp, #24]
 80095a6:	9213      	str	r2, [sp, #76]	@ 0x4c
 80095a8:	001a      	movs	r2, r3
 80095aa:	1c41      	adds	r1, r0, #1
 80095ac:	3a30      	subs	r2, #48	@ 0x30
 80095ae:	2b30      	cmp	r3, #48	@ 0x30
 80095b0:	d016      	beq.n	80095e0 <_strtod_l+0x244>
 80095b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095b4:	185b      	adds	r3, r3, r1
 80095b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80095b8:	9b06      	ldr	r3, [sp, #24]
 80095ba:	210a      	movs	r1, #10
 80095bc:	469c      	mov	ip, r3
 80095be:	4484      	add	ip, r0
 80095c0:	459c      	cmp	ip, r3
 80095c2:	d115      	bne.n	80095f0 <_strtod_l+0x254>
 80095c4:	9906      	ldr	r1, [sp, #24]
 80095c6:	9b06      	ldr	r3, [sp, #24]
 80095c8:	3101      	adds	r1, #1
 80095ca:	1809      	adds	r1, r1, r0
 80095cc:	181b      	adds	r3, r3, r0
 80095ce:	9106      	str	r1, [sp, #24]
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	dc19      	bgt.n	8009608 <_strtod_l+0x26c>
 80095d4:	230a      	movs	r3, #10
 80095d6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80095d8:	434b      	muls	r3, r1
 80095da:	2100      	movs	r1, #0
 80095dc:	18d3      	adds	r3, r2, r3
 80095de:	930d      	str	r3, [sp, #52]	@ 0x34
 80095e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80095e2:	0008      	movs	r0, r1
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	921d      	str	r2, [sp, #116]	@ 0x74
 80095e8:	785b      	ldrb	r3, [r3, #1]
 80095ea:	e7c6      	b.n	800957a <_strtod_l+0x1de>
 80095ec:	9808      	ldr	r0, [sp, #32]
 80095ee:	e7d0      	b.n	8009592 <_strtod_l+0x1f6>
 80095f0:	1c5c      	adds	r4, r3, #1
 80095f2:	2b08      	cmp	r3, #8
 80095f4:	dc04      	bgt.n	8009600 <_strtod_l+0x264>
 80095f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095f8:	434b      	muls	r3, r1
 80095fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80095fc:	0023      	movs	r3, r4
 80095fe:	e7df      	b.n	80095c0 <_strtod_l+0x224>
 8009600:	2c10      	cmp	r4, #16
 8009602:	dcfb      	bgt.n	80095fc <_strtod_l+0x260>
 8009604:	434d      	muls	r5, r1
 8009606:	e7f9      	b.n	80095fc <_strtod_l+0x260>
 8009608:	2100      	movs	r1, #0
 800960a:	2b0f      	cmp	r3, #15
 800960c:	dce8      	bgt.n	80095e0 <_strtod_l+0x244>
 800960e:	230a      	movs	r3, #10
 8009610:	435d      	muls	r5, r3
 8009612:	1955      	adds	r5, r2, r5
 8009614:	e7e4      	b.n	80095e0 <_strtod_l+0x244>
 8009616:	2200      	movs	r2, #0
 8009618:	920e      	str	r2, [sp, #56]	@ 0x38
 800961a:	9206      	str	r2, [sp, #24]
 800961c:	3201      	adds	r2, #1
 800961e:	e7b1      	b.n	8009584 <_strtod_l+0x1e8>
 8009620:	2400      	movs	r4, #0
 8009622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009624:	3302      	adds	r3, #2
 8009626:	931d      	str	r3, [sp, #116]	@ 0x74
 8009628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800962a:	789b      	ldrb	r3, [r3, #2]
 800962c:	001a      	movs	r2, r3
 800962e:	3a30      	subs	r2, #48	@ 0x30
 8009630:	2a09      	cmp	r2, #9
 8009632:	d913      	bls.n	800965c <_strtod_l+0x2c0>
 8009634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009636:	921d      	str	r2, [sp, #116]	@ 0x74
 8009638:	2200      	movs	r2, #0
 800963a:	e032      	b.n	80096a2 <_strtod_l+0x306>
 800963c:	0800e784 	.word	0x0800e784
 8009640:	7ff00000 	.word	0x7ff00000
 8009644:	ffefffff 	.word	0xffefffff
 8009648:	00000433 	.word	0x00000433
 800964c:	7fffffff 	.word	0x7fffffff
 8009650:	0800e76c 	.word	0x0800e76c
 8009654:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009656:	1c5a      	adds	r2, r3, #1
 8009658:	921d      	str	r2, [sp, #116]	@ 0x74
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	2b30      	cmp	r3, #48	@ 0x30
 800965e:	d0f9      	beq.n	8009654 <_strtod_l+0x2b8>
 8009660:	2200      	movs	r2, #0
 8009662:	9207      	str	r2, [sp, #28]
 8009664:	001a      	movs	r2, r3
 8009666:	3a31      	subs	r2, #49	@ 0x31
 8009668:	2a08      	cmp	r2, #8
 800966a:	d81b      	bhi.n	80096a4 <_strtod_l+0x308>
 800966c:	3b30      	subs	r3, #48	@ 0x30
 800966e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009670:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009672:	9307      	str	r3, [sp, #28]
 8009674:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009676:	1c59      	adds	r1, r3, #1
 8009678:	911d      	str	r1, [sp, #116]	@ 0x74
 800967a:	785b      	ldrb	r3, [r3, #1]
 800967c:	001a      	movs	r2, r3
 800967e:	3a30      	subs	r2, #48	@ 0x30
 8009680:	2a09      	cmp	r2, #9
 8009682:	d93a      	bls.n	80096fa <_strtod_l+0x35e>
 8009684:	9a07      	ldr	r2, [sp, #28]
 8009686:	1a8a      	subs	r2, r1, r2
 8009688:	49b4      	ldr	r1, [pc, #720]	@ (800995c <_strtod_l+0x5c0>)
 800968a:	9107      	str	r1, [sp, #28]
 800968c:	2a08      	cmp	r2, #8
 800968e:	dc04      	bgt.n	800969a <_strtod_l+0x2fe>
 8009690:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009692:	9207      	str	r2, [sp, #28]
 8009694:	428a      	cmp	r2, r1
 8009696:	dd00      	ble.n	800969a <_strtod_l+0x2fe>
 8009698:	9107      	str	r1, [sp, #28]
 800969a:	2c00      	cmp	r4, #0
 800969c:	d002      	beq.n	80096a4 <_strtod_l+0x308>
 800969e:	9a07      	ldr	r2, [sp, #28]
 80096a0:	4252      	negs	r2, r2
 80096a2:	9207      	str	r2, [sp, #28]
 80096a4:	9a06      	ldr	r2, [sp, #24]
 80096a6:	2a00      	cmp	r2, #0
 80096a8:	d14d      	bne.n	8009746 <_strtod_l+0x3aa>
 80096aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80096ac:	4310      	orrs	r0, r2
 80096ae:	d000      	beq.n	80096b2 <_strtod_l+0x316>
 80096b0:	e6af      	b.n	8009412 <_strtod_l+0x76>
 80096b2:	4662      	mov	r2, ip
 80096b4:	2a00      	cmp	r2, #0
 80096b6:	d000      	beq.n	80096ba <_strtod_l+0x31e>
 80096b8:	e6c7      	b.n	800944a <_strtod_l+0xae>
 80096ba:	2b69      	cmp	r3, #105	@ 0x69
 80096bc:	d027      	beq.n	800970e <_strtod_l+0x372>
 80096be:	dc23      	bgt.n	8009708 <_strtod_l+0x36c>
 80096c0:	2b49      	cmp	r3, #73	@ 0x49
 80096c2:	d024      	beq.n	800970e <_strtod_l+0x372>
 80096c4:	2b4e      	cmp	r3, #78	@ 0x4e
 80096c6:	d000      	beq.n	80096ca <_strtod_l+0x32e>
 80096c8:	e6bf      	b.n	800944a <_strtod_l+0xae>
 80096ca:	49a5      	ldr	r1, [pc, #660]	@ (8009960 <_strtod_l+0x5c4>)
 80096cc:	a81d      	add	r0, sp, #116	@ 0x74
 80096ce:	f002 ffa1 	bl	800c614 <__match>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d100      	bne.n	80096d8 <_strtod_l+0x33c>
 80096d6:	e6b8      	b.n	800944a <_strtod_l+0xae>
 80096d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2b28      	cmp	r3, #40	@ 0x28
 80096de:	d12c      	bne.n	800973a <_strtod_l+0x39e>
 80096e0:	49a0      	ldr	r1, [pc, #640]	@ (8009964 <_strtod_l+0x5c8>)
 80096e2:	aa20      	add	r2, sp, #128	@ 0x80
 80096e4:	a81d      	add	r0, sp, #116	@ 0x74
 80096e6:	f002 ffa9 	bl	800c63c <__hexnan>
 80096ea:	2805      	cmp	r0, #5
 80096ec:	d125      	bne.n	800973a <_strtod_l+0x39e>
 80096ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096f0:	4a9d      	ldr	r2, [pc, #628]	@ (8009968 <_strtod_l+0x5cc>)
 80096f2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80096f4:	431a      	orrs	r2, r3
 80096f6:	0017      	movs	r7, r2
 80096f8:	e68b      	b.n	8009412 <_strtod_l+0x76>
 80096fa:	220a      	movs	r2, #10
 80096fc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80096fe:	434a      	muls	r2, r1
 8009700:	18d2      	adds	r2, r2, r3
 8009702:	3a30      	subs	r2, #48	@ 0x30
 8009704:	9210      	str	r2, [sp, #64]	@ 0x40
 8009706:	e7b5      	b.n	8009674 <_strtod_l+0x2d8>
 8009708:	2b6e      	cmp	r3, #110	@ 0x6e
 800970a:	d0de      	beq.n	80096ca <_strtod_l+0x32e>
 800970c:	e69d      	b.n	800944a <_strtod_l+0xae>
 800970e:	4997      	ldr	r1, [pc, #604]	@ (800996c <_strtod_l+0x5d0>)
 8009710:	a81d      	add	r0, sp, #116	@ 0x74
 8009712:	f002 ff7f 	bl	800c614 <__match>
 8009716:	2800      	cmp	r0, #0
 8009718:	d100      	bne.n	800971c <_strtod_l+0x380>
 800971a:	e696      	b.n	800944a <_strtod_l+0xae>
 800971c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800971e:	4994      	ldr	r1, [pc, #592]	@ (8009970 <_strtod_l+0x5d4>)
 8009720:	3b01      	subs	r3, #1
 8009722:	a81d      	add	r0, sp, #116	@ 0x74
 8009724:	931d      	str	r3, [sp, #116]	@ 0x74
 8009726:	f002 ff75 	bl	800c614 <__match>
 800972a:	2800      	cmp	r0, #0
 800972c:	d102      	bne.n	8009734 <_strtod_l+0x398>
 800972e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009730:	3301      	adds	r3, #1
 8009732:	931d      	str	r3, [sp, #116]	@ 0x74
 8009734:	2600      	movs	r6, #0
 8009736:	4f8c      	ldr	r7, [pc, #560]	@ (8009968 <_strtod_l+0x5cc>)
 8009738:	e66b      	b.n	8009412 <_strtod_l+0x76>
 800973a:	488e      	ldr	r0, [pc, #568]	@ (8009974 <_strtod_l+0x5d8>)
 800973c:	f001 fdf6 	bl	800b32c <nan>
 8009740:	0006      	movs	r6, r0
 8009742:	000f      	movs	r7, r1
 8009744:	e665      	b.n	8009412 <_strtod_l+0x76>
 8009746:	9b07      	ldr	r3, [sp, #28]
 8009748:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800974a:	1a9b      	subs	r3, r3, r2
 800974c:	930c      	str	r3, [sp, #48]	@ 0x30
 800974e:	9b08      	ldr	r3, [sp, #32]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d101      	bne.n	8009758 <_strtod_l+0x3bc>
 8009754:	9b06      	ldr	r3, [sp, #24]
 8009756:	9308      	str	r3, [sp, #32]
 8009758:	9c06      	ldr	r4, [sp, #24]
 800975a:	2c10      	cmp	r4, #16
 800975c:	dd00      	ble.n	8009760 <_strtod_l+0x3c4>
 800975e:	2410      	movs	r4, #16
 8009760:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009762:	f7f9 f8e5 	bl	8002930 <__aeabi_ui2d>
 8009766:	9b06      	ldr	r3, [sp, #24]
 8009768:	0006      	movs	r6, r0
 800976a:	000f      	movs	r7, r1
 800976c:	2b09      	cmp	r3, #9
 800976e:	dc13      	bgt.n	8009798 <_strtod_l+0x3fc>
 8009770:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009772:	2b00      	cmp	r3, #0
 8009774:	d100      	bne.n	8009778 <_strtod_l+0x3dc>
 8009776:	e64c      	b.n	8009412 <_strtod_l+0x76>
 8009778:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800977a:	2b00      	cmp	r3, #0
 800977c:	dc00      	bgt.n	8009780 <_strtod_l+0x3e4>
 800977e:	e07e      	b.n	800987e <_strtod_l+0x4e2>
 8009780:	2b16      	cmp	r3, #22
 8009782:	dc63      	bgt.n	800984c <_strtod_l+0x4b0>
 8009784:	497c      	ldr	r1, [pc, #496]	@ (8009978 <_strtod_l+0x5dc>)
 8009786:	00db      	lsls	r3, r3, #3
 8009788:	18c9      	adds	r1, r1, r3
 800978a:	0032      	movs	r2, r6
 800978c:	6808      	ldr	r0, [r1, #0]
 800978e:	6849      	ldr	r1, [r1, #4]
 8009790:	003b      	movs	r3, r7
 8009792:	f7f8 f9dd 	bl	8001b50 <__aeabi_dmul>
 8009796:	e7d3      	b.n	8009740 <_strtod_l+0x3a4>
 8009798:	0022      	movs	r2, r4
 800979a:	4b77      	ldr	r3, [pc, #476]	@ (8009978 <_strtod_l+0x5dc>)
 800979c:	3a09      	subs	r2, #9
 800979e:	00d2      	lsls	r2, r2, #3
 80097a0:	189b      	adds	r3, r3, r2
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f7f8 f9d3 	bl	8001b50 <__aeabi_dmul>
 80097aa:	0006      	movs	r6, r0
 80097ac:	0028      	movs	r0, r5
 80097ae:	000f      	movs	r7, r1
 80097b0:	f7f9 f8be 	bl	8002930 <__aeabi_ui2d>
 80097b4:	000b      	movs	r3, r1
 80097b6:	0002      	movs	r2, r0
 80097b8:	0039      	movs	r1, r7
 80097ba:	0030      	movs	r0, r6
 80097bc:	f7f7 fa20 	bl	8000c00 <__aeabi_dadd>
 80097c0:	9b06      	ldr	r3, [sp, #24]
 80097c2:	0006      	movs	r6, r0
 80097c4:	000f      	movs	r7, r1
 80097c6:	2b0f      	cmp	r3, #15
 80097c8:	ddd2      	ble.n	8009770 <_strtod_l+0x3d4>
 80097ca:	9b06      	ldr	r3, [sp, #24]
 80097cc:	1b1c      	subs	r4, r3, r4
 80097ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097d0:	18e4      	adds	r4, r4, r3
 80097d2:	2c00      	cmp	r4, #0
 80097d4:	dc00      	bgt.n	80097d8 <_strtod_l+0x43c>
 80097d6:	e09b      	b.n	8009910 <_strtod_l+0x574>
 80097d8:	220f      	movs	r2, #15
 80097da:	0023      	movs	r3, r4
 80097dc:	4013      	ands	r3, r2
 80097de:	4214      	tst	r4, r2
 80097e0:	d00a      	beq.n	80097f8 <_strtod_l+0x45c>
 80097e2:	4965      	ldr	r1, [pc, #404]	@ (8009978 <_strtod_l+0x5dc>)
 80097e4:	00db      	lsls	r3, r3, #3
 80097e6:	18c9      	adds	r1, r1, r3
 80097e8:	0032      	movs	r2, r6
 80097ea:	6808      	ldr	r0, [r1, #0]
 80097ec:	6849      	ldr	r1, [r1, #4]
 80097ee:	003b      	movs	r3, r7
 80097f0:	f7f8 f9ae 	bl	8001b50 <__aeabi_dmul>
 80097f4:	0006      	movs	r6, r0
 80097f6:	000f      	movs	r7, r1
 80097f8:	230f      	movs	r3, #15
 80097fa:	439c      	bics	r4, r3
 80097fc:	d073      	beq.n	80098e6 <_strtod_l+0x54a>
 80097fe:	3326      	adds	r3, #38	@ 0x26
 8009800:	33ff      	adds	r3, #255	@ 0xff
 8009802:	429c      	cmp	r4, r3
 8009804:	dd4b      	ble.n	800989e <_strtod_l+0x502>
 8009806:	2300      	movs	r3, #0
 8009808:	9306      	str	r3, [sp, #24]
 800980a:	9307      	str	r3, [sp, #28]
 800980c:	930d      	str	r3, [sp, #52]	@ 0x34
 800980e:	9308      	str	r3, [sp, #32]
 8009810:	2322      	movs	r3, #34	@ 0x22
 8009812:	2600      	movs	r6, #0
 8009814:	9a05      	ldr	r2, [sp, #20]
 8009816:	4f54      	ldr	r7, [pc, #336]	@ (8009968 <_strtod_l+0x5cc>)
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800981c:	42b3      	cmp	r3, r6
 800981e:	d100      	bne.n	8009822 <_strtod_l+0x486>
 8009820:	e5f7      	b.n	8009412 <_strtod_l+0x76>
 8009822:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009824:	9805      	ldr	r0, [sp, #20]
 8009826:	f003 f8c3 	bl	800c9b0 <_Bfree>
 800982a:	9908      	ldr	r1, [sp, #32]
 800982c:	9805      	ldr	r0, [sp, #20]
 800982e:	f003 f8bf 	bl	800c9b0 <_Bfree>
 8009832:	9907      	ldr	r1, [sp, #28]
 8009834:	9805      	ldr	r0, [sp, #20]
 8009836:	f003 f8bb 	bl	800c9b0 <_Bfree>
 800983a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800983c:	9805      	ldr	r0, [sp, #20]
 800983e:	f003 f8b7 	bl	800c9b0 <_Bfree>
 8009842:	9906      	ldr	r1, [sp, #24]
 8009844:	9805      	ldr	r0, [sp, #20]
 8009846:	f003 f8b3 	bl	800c9b0 <_Bfree>
 800984a:	e5e2      	b.n	8009412 <_strtod_l+0x76>
 800984c:	2325      	movs	r3, #37	@ 0x25
 800984e:	9a06      	ldr	r2, [sp, #24]
 8009850:	1a9b      	subs	r3, r3, r2
 8009852:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009854:	4293      	cmp	r3, r2
 8009856:	dbb8      	blt.n	80097ca <_strtod_l+0x42e>
 8009858:	240f      	movs	r4, #15
 800985a:	9b06      	ldr	r3, [sp, #24]
 800985c:	4d46      	ldr	r5, [pc, #280]	@ (8009978 <_strtod_l+0x5dc>)
 800985e:	1ae4      	subs	r4, r4, r3
 8009860:	00e1      	lsls	r1, r4, #3
 8009862:	1869      	adds	r1, r5, r1
 8009864:	0032      	movs	r2, r6
 8009866:	6808      	ldr	r0, [r1, #0]
 8009868:	6849      	ldr	r1, [r1, #4]
 800986a:	003b      	movs	r3, r7
 800986c:	f7f8 f970 	bl	8001b50 <__aeabi_dmul>
 8009870:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009872:	1b1c      	subs	r4, r3, r4
 8009874:	00e4      	lsls	r4, r4, #3
 8009876:	192d      	adds	r5, r5, r4
 8009878:	682a      	ldr	r2, [r5, #0]
 800987a:	686b      	ldr	r3, [r5, #4]
 800987c:	e789      	b.n	8009792 <_strtod_l+0x3f6>
 800987e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009880:	3316      	adds	r3, #22
 8009882:	dba2      	blt.n	80097ca <_strtod_l+0x42e>
 8009884:	9907      	ldr	r1, [sp, #28]
 8009886:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009888:	4b3b      	ldr	r3, [pc, #236]	@ (8009978 <_strtod_l+0x5dc>)
 800988a:	1a52      	subs	r2, r2, r1
 800988c:	00d2      	lsls	r2, r2, #3
 800988e:	189b      	adds	r3, r3, r2
 8009890:	0030      	movs	r0, r6
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	0039      	movs	r1, r7
 8009898:	f7f7 fd16 	bl	80012c8 <__aeabi_ddiv>
 800989c:	e750      	b.n	8009740 <_strtod_l+0x3a4>
 800989e:	2300      	movs	r3, #0
 80098a0:	0030      	movs	r0, r6
 80098a2:	0039      	movs	r1, r7
 80098a4:	4d35      	ldr	r5, [pc, #212]	@ (800997c <_strtod_l+0x5e0>)
 80098a6:	1124      	asrs	r4, r4, #4
 80098a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098aa:	2c01      	cmp	r4, #1
 80098ac:	dc1e      	bgt.n	80098ec <_strtod_l+0x550>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <_strtod_l+0x51a>
 80098b2:	0006      	movs	r6, r0
 80098b4:	000f      	movs	r7, r1
 80098b6:	4b32      	ldr	r3, [pc, #200]	@ (8009980 <_strtod_l+0x5e4>)
 80098b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098ba:	18ff      	adds	r7, r7, r3
 80098bc:	4b2f      	ldr	r3, [pc, #188]	@ (800997c <_strtod_l+0x5e0>)
 80098be:	00d5      	lsls	r5, r2, #3
 80098c0:	195d      	adds	r5, r3, r5
 80098c2:	0032      	movs	r2, r6
 80098c4:	6828      	ldr	r0, [r5, #0]
 80098c6:	6869      	ldr	r1, [r5, #4]
 80098c8:	003b      	movs	r3, r7
 80098ca:	f7f8 f941 	bl	8001b50 <__aeabi_dmul>
 80098ce:	4b26      	ldr	r3, [pc, #152]	@ (8009968 <_strtod_l+0x5cc>)
 80098d0:	4a2c      	ldr	r2, [pc, #176]	@ (8009984 <_strtod_l+0x5e8>)
 80098d2:	0006      	movs	r6, r0
 80098d4:	400b      	ands	r3, r1
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d895      	bhi.n	8009806 <_strtod_l+0x46a>
 80098da:	4a2b      	ldr	r2, [pc, #172]	@ (8009988 <_strtod_l+0x5ec>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d913      	bls.n	8009908 <_strtod_l+0x56c>
 80098e0:	2601      	movs	r6, #1
 80098e2:	4f2a      	ldr	r7, [pc, #168]	@ (800998c <_strtod_l+0x5f0>)
 80098e4:	4276      	negs	r6, r6
 80098e6:	2300      	movs	r3, #0
 80098e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ea:	e086      	b.n	80099fa <_strtod_l+0x65e>
 80098ec:	2201      	movs	r2, #1
 80098ee:	4214      	tst	r4, r2
 80098f0:	d004      	beq.n	80098fc <_strtod_l+0x560>
 80098f2:	682a      	ldr	r2, [r5, #0]
 80098f4:	686b      	ldr	r3, [r5, #4]
 80098f6:	f7f8 f92b 	bl	8001b50 <__aeabi_dmul>
 80098fa:	2301      	movs	r3, #1
 80098fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098fe:	1064      	asrs	r4, r4, #1
 8009900:	3201      	adds	r2, #1
 8009902:	9209      	str	r2, [sp, #36]	@ 0x24
 8009904:	3508      	adds	r5, #8
 8009906:	e7d0      	b.n	80098aa <_strtod_l+0x50e>
 8009908:	23d4      	movs	r3, #212	@ 0xd4
 800990a:	049b      	lsls	r3, r3, #18
 800990c:	18cf      	adds	r7, r1, r3
 800990e:	e7ea      	b.n	80098e6 <_strtod_l+0x54a>
 8009910:	2c00      	cmp	r4, #0
 8009912:	d0e8      	beq.n	80098e6 <_strtod_l+0x54a>
 8009914:	4264      	negs	r4, r4
 8009916:	230f      	movs	r3, #15
 8009918:	0022      	movs	r2, r4
 800991a:	401a      	ands	r2, r3
 800991c:	421c      	tst	r4, r3
 800991e:	d00a      	beq.n	8009936 <_strtod_l+0x59a>
 8009920:	4b15      	ldr	r3, [pc, #84]	@ (8009978 <_strtod_l+0x5dc>)
 8009922:	00d2      	lsls	r2, r2, #3
 8009924:	189b      	adds	r3, r3, r2
 8009926:	0030      	movs	r0, r6
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	0039      	movs	r1, r7
 800992e:	f7f7 fccb 	bl	80012c8 <__aeabi_ddiv>
 8009932:	0006      	movs	r6, r0
 8009934:	000f      	movs	r7, r1
 8009936:	1124      	asrs	r4, r4, #4
 8009938:	d0d5      	beq.n	80098e6 <_strtod_l+0x54a>
 800993a:	2c1f      	cmp	r4, #31
 800993c:	dd28      	ble.n	8009990 <_strtod_l+0x5f4>
 800993e:	2300      	movs	r3, #0
 8009940:	9306      	str	r3, [sp, #24]
 8009942:	9307      	str	r3, [sp, #28]
 8009944:	930d      	str	r3, [sp, #52]	@ 0x34
 8009946:	9308      	str	r3, [sp, #32]
 8009948:	2322      	movs	r3, #34	@ 0x22
 800994a:	9a05      	ldr	r2, [sp, #20]
 800994c:	2600      	movs	r6, #0
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009952:	2700      	movs	r7, #0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d000      	beq.n	800995a <_strtod_l+0x5be>
 8009958:	e763      	b.n	8009822 <_strtod_l+0x486>
 800995a:	e55a      	b.n	8009412 <_strtod_l+0x76>
 800995c:	00004e1f 	.word	0x00004e1f
 8009960:	0800e7cd 	.word	0x0800e7cd
 8009964:	0800e770 	.word	0x0800e770
 8009968:	7ff00000 	.word	0x7ff00000
 800996c:	0800e7c5 	.word	0x0800e7c5
 8009970:	0800e802 	.word	0x0800e802
 8009974:	0800ebb0 	.word	0x0800ebb0
 8009978:	0800e980 	.word	0x0800e980
 800997c:	0800e958 	.word	0x0800e958
 8009980:	fcb00000 	.word	0xfcb00000
 8009984:	7ca00000 	.word	0x7ca00000
 8009988:	7c900000 	.word	0x7c900000
 800998c:	7fefffff 	.word	0x7fefffff
 8009990:	2310      	movs	r3, #16
 8009992:	0022      	movs	r2, r4
 8009994:	401a      	ands	r2, r3
 8009996:	9209      	str	r2, [sp, #36]	@ 0x24
 8009998:	421c      	tst	r4, r3
 800999a:	d001      	beq.n	80099a0 <_strtod_l+0x604>
 800999c:	335a      	adds	r3, #90	@ 0x5a
 800999e:	9309      	str	r3, [sp, #36]	@ 0x24
 80099a0:	0030      	movs	r0, r6
 80099a2:	0039      	movs	r1, r7
 80099a4:	2300      	movs	r3, #0
 80099a6:	4dbf      	ldr	r5, [pc, #764]	@ (8009ca4 <_strtod_l+0x908>)
 80099a8:	2201      	movs	r2, #1
 80099aa:	4214      	tst	r4, r2
 80099ac:	d004      	beq.n	80099b8 <_strtod_l+0x61c>
 80099ae:	682a      	ldr	r2, [r5, #0]
 80099b0:	686b      	ldr	r3, [r5, #4]
 80099b2:	f7f8 f8cd 	bl	8001b50 <__aeabi_dmul>
 80099b6:	2301      	movs	r3, #1
 80099b8:	1064      	asrs	r4, r4, #1
 80099ba:	3508      	adds	r5, #8
 80099bc:	2c00      	cmp	r4, #0
 80099be:	d1f3      	bne.n	80099a8 <_strtod_l+0x60c>
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <_strtod_l+0x62c>
 80099c4:	0006      	movs	r6, r0
 80099c6:	000f      	movs	r7, r1
 80099c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00d      	beq.n	80099ea <_strtod_l+0x64e>
 80099ce:	236b      	movs	r3, #107	@ 0x6b
 80099d0:	007a      	lsls	r2, r7, #1
 80099d2:	0d52      	lsrs	r2, r2, #21
 80099d4:	0039      	movs	r1, r7
 80099d6:	1a9b      	subs	r3, r3, r2
 80099d8:	2b00      	cmp	r3, #0
 80099da:	dd06      	ble.n	80099ea <_strtod_l+0x64e>
 80099dc:	2b1f      	cmp	r3, #31
 80099de:	dd5a      	ble.n	8009a96 <_strtod_l+0x6fa>
 80099e0:	2600      	movs	r6, #0
 80099e2:	2b34      	cmp	r3, #52	@ 0x34
 80099e4:	dd50      	ble.n	8009a88 <_strtod_l+0x6ec>
 80099e6:	27dc      	movs	r7, #220	@ 0xdc
 80099e8:	04bf      	lsls	r7, r7, #18
 80099ea:	2200      	movs	r2, #0
 80099ec:	2300      	movs	r3, #0
 80099ee:	0030      	movs	r0, r6
 80099f0:	0039      	movs	r1, r7
 80099f2:	f7f6 fd35 	bl	8000460 <__aeabi_dcmpeq>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d1a1      	bne.n	800993e <_strtod_l+0x5a2>
 80099fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099fc:	9a08      	ldr	r2, [sp, #32]
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009a02:	9b06      	ldr	r3, [sp, #24]
 8009a04:	9805      	ldr	r0, [sp, #20]
 8009a06:	f003 f83b 	bl	800ca80 <__s2b>
 8009a0a:	900d      	str	r0, [sp, #52]	@ 0x34
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d100      	bne.n	8009a12 <_strtod_l+0x676>
 8009a10:	e6f9      	b.n	8009806 <_strtod_l+0x46a>
 8009a12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a14:	9907      	ldr	r1, [sp, #28]
 8009a16:	17da      	asrs	r2, r3, #31
 8009a18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a1a:	1a5b      	subs	r3, r3, r1
 8009a1c:	401a      	ands	r2, r3
 8009a1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009a22:	43db      	mvns	r3, r3
 8009a24:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009a26:	17db      	asrs	r3, r3, #31
 8009a28:	401a      	ands	r2, r3
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009a2e:	9306      	str	r3, [sp, #24]
 8009a30:	9307      	str	r3, [sp, #28]
 8009a32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a34:	9805      	ldr	r0, [sp, #20]
 8009a36:	6859      	ldr	r1, [r3, #4]
 8009a38:	f002 ff76 	bl	800c928 <_Balloc>
 8009a3c:	9008      	str	r0, [sp, #32]
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d100      	bne.n	8009a44 <_strtod_l+0x6a8>
 8009a42:	e6e5      	b.n	8009810 <_strtod_l+0x474>
 8009a44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a46:	300c      	adds	r0, #12
 8009a48:	0019      	movs	r1, r3
 8009a4a:	691a      	ldr	r2, [r3, #16]
 8009a4c:	310c      	adds	r1, #12
 8009a4e:	3202      	adds	r2, #2
 8009a50:	0092      	lsls	r2, r2, #2
 8009a52:	f001 fc61 	bl	800b318 <memcpy>
 8009a56:	ab20      	add	r3, sp, #128	@ 0x80
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	0032      	movs	r2, r6
 8009a60:	003b      	movs	r3, r7
 8009a62:	9805      	ldr	r0, [sp, #20]
 8009a64:	9610      	str	r6, [sp, #64]	@ 0x40
 8009a66:	9711      	str	r7, [sp, #68]	@ 0x44
 8009a68:	f003 fb5a 	bl	800d120 <__d2b>
 8009a6c:	901e      	str	r0, [sp, #120]	@ 0x78
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d100      	bne.n	8009a74 <_strtod_l+0x6d8>
 8009a72:	e6cd      	b.n	8009810 <_strtod_l+0x474>
 8009a74:	2101      	movs	r1, #1
 8009a76:	9805      	ldr	r0, [sp, #20]
 8009a78:	f003 f89e 	bl	800cbb8 <__i2b>
 8009a7c:	9007      	str	r0, [sp, #28]
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d10e      	bne.n	8009aa0 <_strtod_l+0x704>
 8009a82:	2300      	movs	r3, #0
 8009a84:	9307      	str	r3, [sp, #28]
 8009a86:	e6c3      	b.n	8009810 <_strtod_l+0x474>
 8009a88:	234b      	movs	r3, #75	@ 0x4b
 8009a8a:	1a9a      	subs	r2, r3, r2
 8009a8c:	3b4c      	subs	r3, #76	@ 0x4c
 8009a8e:	4093      	lsls	r3, r2
 8009a90:	4019      	ands	r1, r3
 8009a92:	000f      	movs	r7, r1
 8009a94:	e7a9      	b.n	80099ea <_strtod_l+0x64e>
 8009a96:	2201      	movs	r2, #1
 8009a98:	4252      	negs	r2, r2
 8009a9a:	409a      	lsls	r2, r3
 8009a9c:	4016      	ands	r6, r2
 8009a9e:	e7a4      	b.n	80099ea <_strtod_l+0x64e>
 8009aa0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009aa2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009aa4:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8009aa6:	1ad4      	subs	r4, r2, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	db01      	blt.n	8009ab0 <_strtod_l+0x714>
 8009aac:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8009aae:	195d      	adds	r5, r3, r5
 8009ab0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ab2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009ab4:	1a5b      	subs	r3, r3, r1
 8009ab6:	2136      	movs	r1, #54	@ 0x36
 8009ab8:	189b      	adds	r3, r3, r2
 8009aba:	1a8a      	subs	r2, r1, r2
 8009abc:	497a      	ldr	r1, [pc, #488]	@ (8009ca8 <_strtod_l+0x90c>)
 8009abe:	2001      	movs	r0, #1
 8009ac0:	468c      	mov	ip, r1
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	9116      	str	r1, [sp, #88]	@ 0x58
 8009ac8:	9014      	str	r0, [sp, #80]	@ 0x50
 8009aca:	4563      	cmp	r3, ip
 8009acc:	da06      	bge.n	8009adc <_strtod_l+0x740>
 8009ace:	4661      	mov	r1, ip
 8009ad0:	1ac9      	subs	r1, r1, r3
 8009ad2:	1a52      	subs	r2, r2, r1
 8009ad4:	291f      	cmp	r1, #31
 8009ad6:	dc3f      	bgt.n	8009b58 <_strtod_l+0x7bc>
 8009ad8:	4088      	lsls	r0, r1
 8009ada:	9014      	str	r0, [sp, #80]	@ 0x50
 8009adc:	18ab      	adds	r3, r5, r2
 8009ade:	930e      	str	r3, [sp, #56]	@ 0x38
 8009ae0:	18a4      	adds	r4, r4, r2
 8009ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ae6:	191c      	adds	r4, r3, r4
 8009ae8:	002b      	movs	r3, r5
 8009aea:	4295      	cmp	r5, r2
 8009aec:	dd00      	ble.n	8009af0 <_strtod_l+0x754>
 8009aee:	0013      	movs	r3, r2
 8009af0:	42a3      	cmp	r3, r4
 8009af2:	dd00      	ble.n	8009af6 <_strtod_l+0x75a>
 8009af4:	0023      	movs	r3, r4
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	dd04      	ble.n	8009b04 <_strtod_l+0x768>
 8009afa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009afc:	1ae4      	subs	r4, r4, r3
 8009afe:	1ad2      	subs	r2, r2, r3
 8009b00:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b02:	1aed      	subs	r5, r5, r3
 8009b04:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	dd16      	ble.n	8009b38 <_strtod_l+0x79c>
 8009b0a:	001a      	movs	r2, r3
 8009b0c:	9907      	ldr	r1, [sp, #28]
 8009b0e:	9805      	ldr	r0, [sp, #20]
 8009b10:	f003 f91c 	bl	800cd4c <__pow5mult>
 8009b14:	9007      	str	r0, [sp, #28]
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d0b3      	beq.n	8009a82 <_strtod_l+0x6e6>
 8009b1a:	0001      	movs	r1, r0
 8009b1c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009b1e:	9805      	ldr	r0, [sp, #20]
 8009b20:	f003 f862 	bl	800cbe8 <__multiply>
 8009b24:	9013      	str	r0, [sp, #76]	@ 0x4c
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d100      	bne.n	8009b2c <_strtod_l+0x790>
 8009b2a:	e671      	b.n	8009810 <_strtod_l+0x474>
 8009b2c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009b2e:	9805      	ldr	r0, [sp, #20]
 8009b30:	f002 ff3e 	bl	800c9b0 <_Bfree>
 8009b34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b36:	931e      	str	r3, [sp, #120]	@ 0x78
 8009b38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	dc12      	bgt.n	8009b64 <_strtod_l+0x7c8>
 8009b3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dd18      	ble.n	8009b76 <_strtod_l+0x7da>
 8009b44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b46:	9908      	ldr	r1, [sp, #32]
 8009b48:	9805      	ldr	r0, [sp, #20]
 8009b4a:	f003 f8ff 	bl	800cd4c <__pow5mult>
 8009b4e:	9008      	str	r0, [sp, #32]
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d110      	bne.n	8009b76 <_strtod_l+0x7da>
 8009b54:	2300      	movs	r3, #0
 8009b56:	e65a      	b.n	800980e <_strtod_l+0x472>
 8009b58:	4954      	ldr	r1, [pc, #336]	@ (8009cac <_strtod_l+0x910>)
 8009b5a:	1acb      	subs	r3, r1, r3
 8009b5c:	0001      	movs	r1, r0
 8009b5e:	4099      	lsls	r1, r3
 8009b60:	9116      	str	r1, [sp, #88]	@ 0x58
 8009b62:	e7ba      	b.n	8009ada <_strtod_l+0x73e>
 8009b64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b66:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009b68:	9805      	ldr	r0, [sp, #20]
 8009b6a:	f003 f94b 	bl	800ce04 <__lshift>
 8009b6e:	901e      	str	r0, [sp, #120]	@ 0x78
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d1e4      	bne.n	8009b3e <_strtod_l+0x7a2>
 8009b74:	e64c      	b.n	8009810 <_strtod_l+0x474>
 8009b76:	2c00      	cmp	r4, #0
 8009b78:	dd07      	ble.n	8009b8a <_strtod_l+0x7ee>
 8009b7a:	0022      	movs	r2, r4
 8009b7c:	9908      	ldr	r1, [sp, #32]
 8009b7e:	9805      	ldr	r0, [sp, #20]
 8009b80:	f003 f940 	bl	800ce04 <__lshift>
 8009b84:	9008      	str	r0, [sp, #32]
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d0e4      	beq.n	8009b54 <_strtod_l+0x7b8>
 8009b8a:	2d00      	cmp	r5, #0
 8009b8c:	dd08      	ble.n	8009ba0 <_strtod_l+0x804>
 8009b8e:	002a      	movs	r2, r5
 8009b90:	9907      	ldr	r1, [sp, #28]
 8009b92:	9805      	ldr	r0, [sp, #20]
 8009b94:	f003 f936 	bl	800ce04 <__lshift>
 8009b98:	9007      	str	r0, [sp, #28]
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d100      	bne.n	8009ba0 <_strtod_l+0x804>
 8009b9e:	e637      	b.n	8009810 <_strtod_l+0x474>
 8009ba0:	9a08      	ldr	r2, [sp, #32]
 8009ba2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009ba4:	9805      	ldr	r0, [sp, #20]
 8009ba6:	f003 f9b5 	bl	800cf14 <__mdiff>
 8009baa:	9006      	str	r0, [sp, #24]
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d100      	bne.n	8009bb2 <_strtod_l+0x816>
 8009bb0:	e62e      	b.n	8009810 <_strtod_l+0x474>
 8009bb2:	68c3      	ldr	r3, [r0, #12]
 8009bb4:	9907      	ldr	r1, [sp, #28]
 8009bb6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60c3      	str	r3, [r0, #12]
 8009bbc:	f003 f98e 	bl	800cedc <__mcmp>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	da3b      	bge.n	8009c3c <_strtod_l+0x8a0>
 8009bc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009bc6:	4333      	orrs	r3, r6
 8009bc8:	d167      	bne.n	8009c9a <_strtod_l+0x8fe>
 8009bca:	033b      	lsls	r3, r7, #12
 8009bcc:	d165      	bne.n	8009c9a <_strtod_l+0x8fe>
 8009bce:	22d6      	movs	r2, #214	@ 0xd6
 8009bd0:	4b37      	ldr	r3, [pc, #220]	@ (8009cb0 <_strtod_l+0x914>)
 8009bd2:	04d2      	lsls	r2, r2, #19
 8009bd4:	403b      	ands	r3, r7
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d95f      	bls.n	8009c9a <_strtod_l+0x8fe>
 8009bda:	9b06      	ldr	r3, [sp, #24]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d103      	bne.n	8009bea <_strtod_l+0x84e>
 8009be2:	9b06      	ldr	r3, [sp, #24]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	dd57      	ble.n	8009c9a <_strtod_l+0x8fe>
 8009bea:	9906      	ldr	r1, [sp, #24]
 8009bec:	2201      	movs	r2, #1
 8009bee:	9805      	ldr	r0, [sp, #20]
 8009bf0:	f003 f908 	bl	800ce04 <__lshift>
 8009bf4:	9907      	ldr	r1, [sp, #28]
 8009bf6:	9006      	str	r0, [sp, #24]
 8009bf8:	f003 f970 	bl	800cedc <__mcmp>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	dd4c      	ble.n	8009c9a <_strtod_l+0x8fe>
 8009c00:	4b2b      	ldr	r3, [pc, #172]	@ (8009cb0 <_strtod_l+0x914>)
 8009c02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c04:	403b      	ands	r3, r7
 8009c06:	2a00      	cmp	r2, #0
 8009c08:	d074      	beq.n	8009cf4 <_strtod_l+0x958>
 8009c0a:	22d6      	movs	r2, #214	@ 0xd6
 8009c0c:	04d2      	lsls	r2, r2, #19
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d870      	bhi.n	8009cf4 <_strtod_l+0x958>
 8009c12:	22dc      	movs	r2, #220	@ 0xdc
 8009c14:	0492      	lsls	r2, r2, #18
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d800      	bhi.n	8009c1c <_strtod_l+0x880>
 8009c1a:	e695      	b.n	8009948 <_strtod_l+0x5ac>
 8009c1c:	0030      	movs	r0, r6
 8009c1e:	0039      	movs	r1, r7
 8009c20:	4b24      	ldr	r3, [pc, #144]	@ (8009cb4 <_strtod_l+0x918>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	f7f7 ff94 	bl	8001b50 <__aeabi_dmul>
 8009c28:	4b21      	ldr	r3, [pc, #132]	@ (8009cb0 <_strtod_l+0x914>)
 8009c2a:	0006      	movs	r6, r0
 8009c2c:	000f      	movs	r7, r1
 8009c2e:	420b      	tst	r3, r1
 8009c30:	d000      	beq.n	8009c34 <_strtod_l+0x898>
 8009c32:	e5f6      	b.n	8009822 <_strtod_l+0x486>
 8009c34:	2322      	movs	r3, #34	@ 0x22
 8009c36:	9a05      	ldr	r2, [sp, #20]
 8009c38:	6013      	str	r3, [r2, #0]
 8009c3a:	e5f2      	b.n	8009822 <_strtod_l+0x486>
 8009c3c:	970e      	str	r7, [sp, #56]	@ 0x38
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d175      	bne.n	8009d2e <_strtod_l+0x992>
 8009c42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c44:	033b      	lsls	r3, r7, #12
 8009c46:	0b1b      	lsrs	r3, r3, #12
 8009c48:	2a00      	cmp	r2, #0
 8009c4a:	d039      	beq.n	8009cc0 <_strtod_l+0x924>
 8009c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8009cb8 <_strtod_l+0x91c>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d138      	bne.n	8009cc4 <_strtod_l+0x928>
 8009c52:	2101      	movs	r1, #1
 8009c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c56:	4249      	negs	r1, r1
 8009c58:	0032      	movs	r2, r6
 8009c5a:	0008      	movs	r0, r1
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00b      	beq.n	8009c78 <_strtod_l+0x8dc>
 8009c60:	24d4      	movs	r4, #212	@ 0xd4
 8009c62:	4b13      	ldr	r3, [pc, #76]	@ (8009cb0 <_strtod_l+0x914>)
 8009c64:	0008      	movs	r0, r1
 8009c66:	403b      	ands	r3, r7
 8009c68:	04e4      	lsls	r4, r4, #19
 8009c6a:	42a3      	cmp	r3, r4
 8009c6c:	d804      	bhi.n	8009c78 <_strtod_l+0x8dc>
 8009c6e:	306c      	adds	r0, #108	@ 0x6c
 8009c70:	0d1b      	lsrs	r3, r3, #20
 8009c72:	1ac3      	subs	r3, r0, r3
 8009c74:	4099      	lsls	r1, r3
 8009c76:	0008      	movs	r0, r1
 8009c78:	4282      	cmp	r2, r0
 8009c7a:	d123      	bne.n	8009cc4 <_strtod_l+0x928>
 8009c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8009cbc <_strtod_l+0x920>)
 8009c7e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009c80:	4299      	cmp	r1, r3
 8009c82:	d102      	bne.n	8009c8a <_strtod_l+0x8ee>
 8009c84:	3201      	adds	r2, #1
 8009c86:	d100      	bne.n	8009c8a <_strtod_l+0x8ee>
 8009c88:	e5c2      	b.n	8009810 <_strtod_l+0x474>
 8009c8a:	4b09      	ldr	r3, [pc, #36]	@ (8009cb0 <_strtod_l+0x914>)
 8009c8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c8e:	2600      	movs	r6, #0
 8009c90:	401a      	ands	r2, r3
 8009c92:	0013      	movs	r3, r2
 8009c94:	2280      	movs	r2, #128	@ 0x80
 8009c96:	0352      	lsls	r2, r2, #13
 8009c98:	189f      	adds	r7, r3, r2
 8009c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1bd      	bne.n	8009c1c <_strtod_l+0x880>
 8009ca0:	e5bf      	b.n	8009822 <_strtod_l+0x486>
 8009ca2:	46c0      	nop			@ (mov r8, r8)
 8009ca4:	0800e798 	.word	0x0800e798
 8009ca8:	fffffc02 	.word	0xfffffc02
 8009cac:	fffffbe2 	.word	0xfffffbe2
 8009cb0:	7ff00000 	.word	0x7ff00000
 8009cb4:	39500000 	.word	0x39500000
 8009cb8:	000fffff 	.word	0x000fffff
 8009cbc:	7fefffff 	.word	0x7fefffff
 8009cc0:	4333      	orrs	r3, r6
 8009cc2:	d09d      	beq.n	8009c00 <_strtod_l+0x864>
 8009cc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d01c      	beq.n	8009d04 <_strtod_l+0x968>
 8009cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ccc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009cce:	4213      	tst	r3, r2
 8009cd0:	d0e3      	beq.n	8009c9a <_strtod_l+0x8fe>
 8009cd2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009cd4:	0030      	movs	r0, r6
 8009cd6:	0039      	movs	r1, r7
 8009cd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d016      	beq.n	8009d0c <_strtod_l+0x970>
 8009cde:	f7ff fb45 	bl	800936c <sulp>
 8009ce2:	0002      	movs	r2, r0
 8009ce4:	000b      	movs	r3, r1
 8009ce6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009ce8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009cea:	f7f6 ff89 	bl	8000c00 <__aeabi_dadd>
 8009cee:	0006      	movs	r6, r0
 8009cf0:	000f      	movs	r7, r1
 8009cf2:	e7d2      	b.n	8009c9a <_strtod_l+0x8fe>
 8009cf4:	2601      	movs	r6, #1
 8009cf6:	4a92      	ldr	r2, [pc, #584]	@ (8009f40 <_strtod_l+0xba4>)
 8009cf8:	4276      	negs	r6, r6
 8009cfa:	189b      	adds	r3, r3, r2
 8009cfc:	4a91      	ldr	r2, [pc, #580]	@ (8009f44 <_strtod_l+0xba8>)
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	0017      	movs	r7, r2
 8009d02:	e7ca      	b.n	8009c9a <_strtod_l+0x8fe>
 8009d04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d06:	4233      	tst	r3, r6
 8009d08:	d0c7      	beq.n	8009c9a <_strtod_l+0x8fe>
 8009d0a:	e7e2      	b.n	8009cd2 <_strtod_l+0x936>
 8009d0c:	f7ff fb2e 	bl	800936c <sulp>
 8009d10:	0002      	movs	r2, r0
 8009d12:	000b      	movs	r3, r1
 8009d14:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009d16:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009d18:	f7f8 f9e2 	bl	80020e0 <__aeabi_dsub>
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2300      	movs	r3, #0
 8009d20:	0006      	movs	r6, r0
 8009d22:	000f      	movs	r7, r1
 8009d24:	f7f6 fb9c 	bl	8000460 <__aeabi_dcmpeq>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d0b6      	beq.n	8009c9a <_strtod_l+0x8fe>
 8009d2c:	e60c      	b.n	8009948 <_strtod_l+0x5ac>
 8009d2e:	9907      	ldr	r1, [sp, #28]
 8009d30:	9806      	ldr	r0, [sp, #24]
 8009d32:	f003 fa55 	bl	800d1e0 <__ratio>
 8009d36:	2380      	movs	r3, #128	@ 0x80
 8009d38:	2200      	movs	r2, #0
 8009d3a:	05db      	lsls	r3, r3, #23
 8009d3c:	0004      	movs	r4, r0
 8009d3e:	000d      	movs	r5, r1
 8009d40:	f7f6 fb9e 	bl	8000480 <__aeabi_dcmple>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d06c      	beq.n	8009e22 <_strtod_l+0xa86>
 8009d48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d177      	bne.n	8009e3e <_strtod_l+0xaa2>
 8009d4e:	2e00      	cmp	r6, #0
 8009d50:	d157      	bne.n	8009e02 <_strtod_l+0xa66>
 8009d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d54:	031b      	lsls	r3, r3, #12
 8009d56:	d15a      	bne.n	8009e0e <_strtod_l+0xa72>
 8009d58:	2200      	movs	r2, #0
 8009d5a:	0020      	movs	r0, r4
 8009d5c:	0029      	movs	r1, r5
 8009d5e:	4b7a      	ldr	r3, [pc, #488]	@ (8009f48 <_strtod_l+0xbac>)
 8009d60:	f7f6 fb84 	bl	800046c <__aeabi_dcmplt>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d159      	bne.n	8009e1c <_strtod_l+0xa80>
 8009d68:	0020      	movs	r0, r4
 8009d6a:	0029      	movs	r1, r5
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4b77      	ldr	r3, [pc, #476]	@ (8009f4c <_strtod_l+0xbb0>)
 8009d70:	f7f7 feee 	bl	8001b50 <__aeabi_dmul>
 8009d74:	0004      	movs	r4, r0
 8009d76:	000d      	movs	r5, r1
 8009d78:	2380      	movs	r3, #128	@ 0x80
 8009d7a:	061b      	lsls	r3, r3, #24
 8009d7c:	18eb      	adds	r3, r5, r3
 8009d7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d86:	9214      	str	r2, [sp, #80]	@ 0x50
 8009d88:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d8a:	4a71      	ldr	r2, [pc, #452]	@ (8009f50 <_strtod_l+0xbb4>)
 8009d8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d8e:	4013      	ands	r3, r2
 8009d90:	9316      	str	r3, [sp, #88]	@ 0x58
 8009d92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009d94:	4b6f      	ldr	r3, [pc, #444]	@ (8009f54 <_strtod_l+0xbb8>)
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d000      	beq.n	8009d9c <_strtod_l+0xa00>
 8009d9a:	e087      	b.n	8009eac <_strtod_l+0xb10>
 8009d9c:	4a6e      	ldr	r2, [pc, #440]	@ (8009f58 <_strtod_l+0xbbc>)
 8009d9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009da0:	4694      	mov	ip, r2
 8009da2:	4463      	add	r3, ip
 8009da4:	001f      	movs	r7, r3
 8009da6:	0030      	movs	r0, r6
 8009da8:	0019      	movs	r1, r3
 8009daa:	f003 f94d 	bl	800d048 <__ulp>
 8009dae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009db0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009db2:	f7f7 fecd 	bl	8001b50 <__aeabi_dmul>
 8009db6:	0032      	movs	r2, r6
 8009db8:	003b      	movs	r3, r7
 8009dba:	f7f6 ff21 	bl	8000c00 <__aeabi_dadd>
 8009dbe:	4a64      	ldr	r2, [pc, #400]	@ (8009f50 <_strtod_l+0xbb4>)
 8009dc0:	4b66      	ldr	r3, [pc, #408]	@ (8009f5c <_strtod_l+0xbc0>)
 8009dc2:	0006      	movs	r6, r0
 8009dc4:	400a      	ands	r2, r1
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d940      	bls.n	8009e4c <_strtod_l+0xab0>
 8009dca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009dcc:	4a64      	ldr	r2, [pc, #400]	@ (8009f60 <_strtod_l+0xbc4>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d103      	bne.n	8009dda <_strtod_l+0xa3e>
 8009dd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	d100      	bne.n	8009dda <_strtod_l+0xa3e>
 8009dd8:	e51a      	b.n	8009810 <_strtod_l+0x474>
 8009dda:	2601      	movs	r6, #1
 8009ddc:	4f60      	ldr	r7, [pc, #384]	@ (8009f60 <_strtod_l+0xbc4>)
 8009dde:	4276      	negs	r6, r6
 8009de0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009de2:	9805      	ldr	r0, [sp, #20]
 8009de4:	f002 fde4 	bl	800c9b0 <_Bfree>
 8009de8:	9908      	ldr	r1, [sp, #32]
 8009dea:	9805      	ldr	r0, [sp, #20]
 8009dec:	f002 fde0 	bl	800c9b0 <_Bfree>
 8009df0:	9907      	ldr	r1, [sp, #28]
 8009df2:	9805      	ldr	r0, [sp, #20]
 8009df4:	f002 fddc 	bl	800c9b0 <_Bfree>
 8009df8:	9906      	ldr	r1, [sp, #24]
 8009dfa:	9805      	ldr	r0, [sp, #20]
 8009dfc:	f002 fdd8 	bl	800c9b0 <_Bfree>
 8009e00:	e617      	b.n	8009a32 <_strtod_l+0x696>
 8009e02:	2e01      	cmp	r6, #1
 8009e04:	d103      	bne.n	8009e0e <_strtod_l+0xa72>
 8009e06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d100      	bne.n	8009e0e <_strtod_l+0xa72>
 8009e0c:	e59c      	b.n	8009948 <_strtod_l+0x5ac>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	4c54      	ldr	r4, [pc, #336]	@ (8009f64 <_strtod_l+0xbc8>)
 8009e12:	4d4d      	ldr	r5, [pc, #308]	@ (8009f48 <_strtod_l+0xbac>)
 8009e14:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009e18:	2400      	movs	r4, #0
 8009e1a:	e7b2      	b.n	8009d82 <_strtod_l+0x9e6>
 8009e1c:	2400      	movs	r4, #0
 8009e1e:	4d4b      	ldr	r5, [pc, #300]	@ (8009f4c <_strtod_l+0xbb0>)
 8009e20:	e7aa      	b.n	8009d78 <_strtod_l+0x9dc>
 8009e22:	0020      	movs	r0, r4
 8009e24:	0029      	movs	r1, r5
 8009e26:	4b49      	ldr	r3, [pc, #292]	@ (8009f4c <_strtod_l+0xbb0>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f7f7 fe91 	bl	8001b50 <__aeabi_dmul>
 8009e2e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e30:	0004      	movs	r4, r0
 8009e32:	000d      	movs	r5, r1
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d09f      	beq.n	8009d78 <_strtod_l+0x9dc>
 8009e38:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e3a:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009e3c:	e7a1      	b.n	8009d82 <_strtod_l+0x9e6>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	4c41      	ldr	r4, [pc, #260]	@ (8009f48 <_strtod_l+0xbac>)
 8009e42:	0025      	movs	r5, r4
 8009e44:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e46:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009e48:	001c      	movs	r4, r3
 8009e4a:	e79a      	b.n	8009d82 <_strtod_l+0x9e6>
 8009e4c:	23d4      	movs	r3, #212	@ 0xd4
 8009e4e:	049b      	lsls	r3, r3, #18
 8009e50:	18cf      	adds	r7, r1, r3
 8009e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e54:	9710      	str	r7, [sp, #64]	@ 0x40
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1c2      	bne.n	8009de0 <_strtod_l+0xa44>
 8009e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8009f50 <_strtod_l+0xbb4>)
 8009e5c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009e5e:	403b      	ands	r3, r7
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d1bd      	bne.n	8009de0 <_strtod_l+0xa44>
 8009e64:	0020      	movs	r0, r4
 8009e66:	0029      	movs	r1, r5
 8009e68:	f7f6 fb46 	bl	80004f8 <__aeabi_d2lz>
 8009e6c:	f7f6 fb7e 	bl	800056c <__aeabi_l2d>
 8009e70:	0002      	movs	r2, r0
 8009e72:	000b      	movs	r3, r1
 8009e74:	0020      	movs	r0, r4
 8009e76:	0029      	movs	r1, r5
 8009e78:	f7f8 f932 	bl	80020e0 <__aeabi_dsub>
 8009e7c:	033c      	lsls	r4, r7, #12
 8009e7e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e80:	0b24      	lsrs	r4, r4, #12
 8009e82:	4334      	orrs	r4, r6
 8009e84:	900e      	str	r0, [sp, #56]	@ 0x38
 8009e86:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009e88:	4a37      	ldr	r2, [pc, #220]	@ (8009f68 <_strtod_l+0xbcc>)
 8009e8a:	431c      	orrs	r4, r3
 8009e8c:	d052      	beq.n	8009f34 <_strtod_l+0xb98>
 8009e8e:	4b37      	ldr	r3, [pc, #220]	@ (8009f6c <_strtod_l+0xbd0>)
 8009e90:	f7f6 faec 	bl	800046c <__aeabi_dcmplt>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d000      	beq.n	8009e9a <_strtod_l+0xafe>
 8009e98:	e4c3      	b.n	8009822 <_strtod_l+0x486>
 8009e9a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009e9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009e9e:	4a34      	ldr	r2, [pc, #208]	@ (8009f70 <_strtod_l+0xbd4>)
 8009ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8009f4c <_strtod_l+0xbb0>)
 8009ea2:	f7f6 faf7 	bl	8000494 <__aeabi_dcmpgt>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d09a      	beq.n	8009de0 <_strtod_l+0xa44>
 8009eaa:	e4ba      	b.n	8009822 <_strtod_l+0x486>
 8009eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d02a      	beq.n	8009f08 <_strtod_l+0xb6c>
 8009eb2:	23d4      	movs	r3, #212	@ 0xd4
 8009eb4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009eb6:	04db      	lsls	r3, r3, #19
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d825      	bhi.n	8009f08 <_strtod_l+0xb6c>
 8009ebc:	0020      	movs	r0, r4
 8009ebe:	0029      	movs	r1, r5
 8009ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8009f74 <_strtod_l+0xbd8>)
 8009ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8009f78 <_strtod_l+0xbdc>)
 8009ec4:	f7f6 fadc 	bl	8000480 <__aeabi_dcmple>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d016      	beq.n	8009efa <_strtod_l+0xb5e>
 8009ecc:	0020      	movs	r0, r4
 8009ece:	0029      	movs	r1, r5
 8009ed0:	f7f6 faf4 	bl	80004bc <__aeabi_d2uiz>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d100      	bne.n	8009eda <_strtod_l+0xb3e>
 8009ed8:	3001      	adds	r0, #1
 8009eda:	f7f8 fd29 	bl	8002930 <__aeabi_ui2d>
 8009ede:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ee0:	0004      	movs	r4, r0
 8009ee2:	000d      	movs	r5, r1
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d122      	bne.n	8009f2e <_strtod_l+0xb92>
 8009ee8:	2380      	movs	r3, #128	@ 0x80
 8009eea:	061b      	lsls	r3, r3, #24
 8009eec:	18cb      	adds	r3, r1, r3
 8009eee:	9018      	str	r0, [sp, #96]	@ 0x60
 8009ef0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ef2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009ef4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ef6:	9214      	str	r2, [sp, #80]	@ 0x50
 8009ef8:	9315      	str	r3, [sp, #84]	@ 0x54
 8009efa:	22d6      	movs	r2, #214	@ 0xd6
 8009efc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009efe:	04d2      	lsls	r2, r2, #19
 8009f00:	189b      	adds	r3, r3, r2
 8009f02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009f04:	1a9b      	subs	r3, r3, r2
 8009f06:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f08:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009f0a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009f0c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009f0e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8009f10:	f003 f89a 	bl	800d048 <__ulp>
 8009f14:	0002      	movs	r2, r0
 8009f16:	000b      	movs	r3, r1
 8009f18:	0030      	movs	r0, r6
 8009f1a:	0039      	movs	r1, r7
 8009f1c:	f7f7 fe18 	bl	8001b50 <__aeabi_dmul>
 8009f20:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009f22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f24:	f7f6 fe6c 	bl	8000c00 <__aeabi_dadd>
 8009f28:	0006      	movs	r6, r0
 8009f2a:	000f      	movs	r7, r1
 8009f2c:	e791      	b.n	8009e52 <_strtod_l+0xab6>
 8009f2e:	9418      	str	r4, [sp, #96]	@ 0x60
 8009f30:	9519      	str	r5, [sp, #100]	@ 0x64
 8009f32:	e7de      	b.n	8009ef2 <_strtod_l+0xb56>
 8009f34:	4b11      	ldr	r3, [pc, #68]	@ (8009f7c <_strtod_l+0xbe0>)
 8009f36:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009f38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009f3a:	f7f6 fa97 	bl	800046c <__aeabi_dcmplt>
 8009f3e:	e7b2      	b.n	8009ea6 <_strtod_l+0xb0a>
 8009f40:	fff00000 	.word	0xfff00000
 8009f44:	000fffff 	.word	0x000fffff
 8009f48:	3ff00000 	.word	0x3ff00000
 8009f4c:	3fe00000 	.word	0x3fe00000
 8009f50:	7ff00000 	.word	0x7ff00000
 8009f54:	7fe00000 	.word	0x7fe00000
 8009f58:	fcb00000 	.word	0xfcb00000
 8009f5c:	7c9fffff 	.word	0x7c9fffff
 8009f60:	7fefffff 	.word	0x7fefffff
 8009f64:	bff00000 	.word	0xbff00000
 8009f68:	94a03595 	.word	0x94a03595
 8009f6c:	3fdfffff 	.word	0x3fdfffff
 8009f70:	35afe535 	.word	0x35afe535
 8009f74:	ffc00000 	.word	0xffc00000
 8009f78:	41dfffff 	.word	0x41dfffff
 8009f7c:	3fcfffff 	.word	0x3fcfffff

08009f80 <_strtod_r>:
 8009f80:	b510      	push	{r4, lr}
 8009f82:	4b02      	ldr	r3, [pc, #8]	@ (8009f8c <_strtod_r+0xc>)
 8009f84:	f7ff fa0a 	bl	800939c <_strtod_l>
 8009f88:	bd10      	pop	{r4, pc}
 8009f8a:	46c0      	nop			@ (mov r8, r8)
 8009f8c:	20000044 	.word	0x20000044

08009f90 <strtod>:
 8009f90:	b510      	push	{r4, lr}
 8009f92:	4c04      	ldr	r4, [pc, #16]	@ (8009fa4 <strtod+0x14>)
 8009f94:	000a      	movs	r2, r1
 8009f96:	0001      	movs	r1, r0
 8009f98:	4b03      	ldr	r3, [pc, #12]	@ (8009fa8 <strtod+0x18>)
 8009f9a:	6820      	ldr	r0, [r4, #0]
 8009f9c:	f7ff f9fe 	bl	800939c <_strtod_l>
 8009fa0:	bd10      	pop	{r4, pc}
 8009fa2:	46c0      	nop			@ (mov r8, r8)
 8009fa4:	200001b0 	.word	0x200001b0
 8009fa8:	20000044 	.word	0x20000044

08009fac <__cvt>:
 8009fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fae:	001f      	movs	r7, r3
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	0016      	movs	r6, r2
 8009fb4:	b08b      	sub	sp, #44	@ 0x2c
 8009fb6:	429f      	cmp	r7, r3
 8009fb8:	da04      	bge.n	8009fc4 <__cvt+0x18>
 8009fba:	2180      	movs	r1, #128	@ 0x80
 8009fbc:	0609      	lsls	r1, r1, #24
 8009fbe:	187b      	adds	r3, r7, r1
 8009fc0:	001f      	movs	r7, r3
 8009fc2:	232d      	movs	r3, #45	@ 0x2d
 8009fc4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009fc6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009fc8:	7013      	strb	r3, [r2, #0]
 8009fca:	2320      	movs	r3, #32
 8009fcc:	2203      	movs	r2, #3
 8009fce:	439d      	bics	r5, r3
 8009fd0:	2d46      	cmp	r5, #70	@ 0x46
 8009fd2:	d007      	beq.n	8009fe4 <__cvt+0x38>
 8009fd4:	002b      	movs	r3, r5
 8009fd6:	3b45      	subs	r3, #69	@ 0x45
 8009fd8:	4259      	negs	r1, r3
 8009fda:	414b      	adcs	r3, r1
 8009fdc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009fde:	3a01      	subs	r2, #1
 8009fe0:	18cb      	adds	r3, r1, r3
 8009fe2:	9310      	str	r3, [sp, #64]	@ 0x40
 8009fe4:	ab09      	add	r3, sp, #36	@ 0x24
 8009fe6:	9304      	str	r3, [sp, #16]
 8009fe8:	ab08      	add	r3, sp, #32
 8009fea:	9303      	str	r3, [sp, #12]
 8009fec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009fee:	9200      	str	r2, [sp, #0]
 8009ff0:	9302      	str	r3, [sp, #8]
 8009ff2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ff4:	0032      	movs	r2, r6
 8009ff6:	9301      	str	r3, [sp, #4]
 8009ff8:	003b      	movs	r3, r7
 8009ffa:	f001 fa2f 	bl	800b45c <_dtoa_r>
 8009ffe:	0004      	movs	r4, r0
 800a000:	2d47      	cmp	r5, #71	@ 0x47
 800a002:	d11b      	bne.n	800a03c <__cvt+0x90>
 800a004:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a006:	07db      	lsls	r3, r3, #31
 800a008:	d511      	bpl.n	800a02e <__cvt+0x82>
 800a00a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a00c:	18c3      	adds	r3, r0, r3
 800a00e:	9307      	str	r3, [sp, #28]
 800a010:	2200      	movs	r2, #0
 800a012:	2300      	movs	r3, #0
 800a014:	0030      	movs	r0, r6
 800a016:	0039      	movs	r1, r7
 800a018:	f7f6 fa22 	bl	8000460 <__aeabi_dcmpeq>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d001      	beq.n	800a024 <__cvt+0x78>
 800a020:	9b07      	ldr	r3, [sp, #28]
 800a022:	9309      	str	r3, [sp, #36]	@ 0x24
 800a024:	2230      	movs	r2, #48	@ 0x30
 800a026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a028:	9907      	ldr	r1, [sp, #28]
 800a02a:	428b      	cmp	r3, r1
 800a02c:	d320      	bcc.n	800a070 <__cvt+0xc4>
 800a02e:	0020      	movs	r0, r4
 800a030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a032:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a034:	1b1b      	subs	r3, r3, r4
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	b00b      	add	sp, #44	@ 0x2c
 800a03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a03c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a03e:	18c3      	adds	r3, r0, r3
 800a040:	9307      	str	r3, [sp, #28]
 800a042:	2d46      	cmp	r5, #70	@ 0x46
 800a044:	d1e4      	bne.n	800a010 <__cvt+0x64>
 800a046:	7803      	ldrb	r3, [r0, #0]
 800a048:	2b30      	cmp	r3, #48	@ 0x30
 800a04a:	d10c      	bne.n	800a066 <__cvt+0xba>
 800a04c:	2200      	movs	r2, #0
 800a04e:	2300      	movs	r3, #0
 800a050:	0030      	movs	r0, r6
 800a052:	0039      	movs	r1, r7
 800a054:	f7f6 fa04 	bl	8000460 <__aeabi_dcmpeq>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d104      	bne.n	800a066 <__cvt+0xba>
 800a05c:	2301      	movs	r3, #1
 800a05e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a060:	1a9b      	subs	r3, r3, r2
 800a062:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a068:	9a07      	ldr	r2, [sp, #28]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	18d3      	adds	r3, r2, r3
 800a06e:	e7ce      	b.n	800a00e <__cvt+0x62>
 800a070:	1c59      	adds	r1, r3, #1
 800a072:	9109      	str	r1, [sp, #36]	@ 0x24
 800a074:	701a      	strb	r2, [r3, #0]
 800a076:	e7d6      	b.n	800a026 <__cvt+0x7a>

0800a078 <__exponent>:
 800a078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a07a:	232b      	movs	r3, #43	@ 0x2b
 800a07c:	0005      	movs	r5, r0
 800a07e:	000c      	movs	r4, r1
 800a080:	b085      	sub	sp, #20
 800a082:	7002      	strb	r2, [r0, #0]
 800a084:	2900      	cmp	r1, #0
 800a086:	da01      	bge.n	800a08c <__exponent+0x14>
 800a088:	424c      	negs	r4, r1
 800a08a:	3302      	adds	r3, #2
 800a08c:	706b      	strb	r3, [r5, #1]
 800a08e:	2c09      	cmp	r4, #9
 800a090:	dd2c      	ble.n	800a0ec <__exponent+0x74>
 800a092:	ab02      	add	r3, sp, #8
 800a094:	1dde      	adds	r6, r3, #7
 800a096:	0020      	movs	r0, r4
 800a098:	210a      	movs	r1, #10
 800a09a:	f7f6 f9cb 	bl	8000434 <__aeabi_idivmod>
 800a09e:	0037      	movs	r7, r6
 800a0a0:	3130      	adds	r1, #48	@ 0x30
 800a0a2:	3e01      	subs	r6, #1
 800a0a4:	0020      	movs	r0, r4
 800a0a6:	7031      	strb	r1, [r6, #0]
 800a0a8:	210a      	movs	r1, #10
 800a0aa:	9401      	str	r4, [sp, #4]
 800a0ac:	f7f6 f8dc 	bl	8000268 <__divsi3>
 800a0b0:	9b01      	ldr	r3, [sp, #4]
 800a0b2:	0004      	movs	r4, r0
 800a0b4:	2b63      	cmp	r3, #99	@ 0x63
 800a0b6:	dcee      	bgt.n	800a096 <__exponent+0x1e>
 800a0b8:	1eba      	subs	r2, r7, #2
 800a0ba:	1ca8      	adds	r0, r5, #2
 800a0bc:	0001      	movs	r1, r0
 800a0be:	0013      	movs	r3, r2
 800a0c0:	3430      	adds	r4, #48	@ 0x30
 800a0c2:	7014      	strb	r4, [r2, #0]
 800a0c4:	ac02      	add	r4, sp, #8
 800a0c6:	3407      	adds	r4, #7
 800a0c8:	429c      	cmp	r4, r3
 800a0ca:	d80a      	bhi.n	800a0e2 <__exponent+0x6a>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	42a2      	cmp	r2, r4
 800a0d0:	d803      	bhi.n	800a0da <__exponent+0x62>
 800a0d2:	3309      	adds	r3, #9
 800a0d4:	aa02      	add	r2, sp, #8
 800a0d6:	189b      	adds	r3, r3, r2
 800a0d8:	1bdb      	subs	r3, r3, r7
 800a0da:	18c0      	adds	r0, r0, r3
 800a0dc:	1b40      	subs	r0, r0, r5
 800a0de:	b005      	add	sp, #20
 800a0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e2:	781c      	ldrb	r4, [r3, #0]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	700c      	strb	r4, [r1, #0]
 800a0e8:	3101      	adds	r1, #1
 800a0ea:	e7eb      	b.n	800a0c4 <__exponent+0x4c>
 800a0ec:	2330      	movs	r3, #48	@ 0x30
 800a0ee:	18e4      	adds	r4, r4, r3
 800a0f0:	70ab      	strb	r3, [r5, #2]
 800a0f2:	1d28      	adds	r0, r5, #4
 800a0f4:	70ec      	strb	r4, [r5, #3]
 800a0f6:	e7f1      	b.n	800a0dc <__exponent+0x64>

0800a0f8 <_printf_float>:
 800a0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0fa:	b097      	sub	sp, #92	@ 0x5c
 800a0fc:	000d      	movs	r5, r1
 800a0fe:	920a      	str	r2, [sp, #40]	@ 0x28
 800a100:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800a102:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a104:	9009      	str	r0, [sp, #36]	@ 0x24
 800a106:	f001 f87d 	bl	800b204 <_localeconv_r>
 800a10a:	6803      	ldr	r3, [r0, #0]
 800a10c:	0018      	movs	r0, r3
 800a10e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a110:	f7f6 f804 	bl	800011c <strlen>
 800a114:	2300      	movs	r3, #0
 800a116:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a118:	9314      	str	r3, [sp, #80]	@ 0x50
 800a11a:	7e2b      	ldrb	r3, [r5, #24]
 800a11c:	2207      	movs	r2, #7
 800a11e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	930e      	str	r3, [sp, #56]	@ 0x38
 800a124:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	05c9      	lsls	r1, r1, #23
 800a12a:	d545      	bpl.n	800a1b8 <_printf_float+0xc0>
 800a12c:	189b      	adds	r3, r3, r2
 800a12e:	4393      	bics	r3, r2
 800a130:	001a      	movs	r2, r3
 800a132:	3208      	adds	r2, #8
 800a134:	6022      	str	r2, [r4, #0]
 800a136:	2201      	movs	r2, #1
 800a138:	681e      	ldr	r6, [r3, #0]
 800a13a:	685f      	ldr	r7, [r3, #4]
 800a13c:	007b      	lsls	r3, r7, #1
 800a13e:	085b      	lsrs	r3, r3, #1
 800a140:	9311      	str	r3, [sp, #68]	@ 0x44
 800a142:	9610      	str	r6, [sp, #64]	@ 0x40
 800a144:	64ae      	str	r6, [r5, #72]	@ 0x48
 800a146:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800a148:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a14a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a14c:	4ba7      	ldr	r3, [pc, #668]	@ (800a3ec <_printf_float+0x2f4>)
 800a14e:	4252      	negs	r2, r2
 800a150:	f7f8 fb62 	bl	8002818 <__aeabi_dcmpun>
 800a154:	2800      	cmp	r0, #0
 800a156:	d131      	bne.n	800a1bc <_printf_float+0xc4>
 800a158:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a15a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a15c:	2201      	movs	r2, #1
 800a15e:	4ba3      	ldr	r3, [pc, #652]	@ (800a3ec <_printf_float+0x2f4>)
 800a160:	4252      	negs	r2, r2
 800a162:	f7f6 f98d 	bl	8000480 <__aeabi_dcmple>
 800a166:	2800      	cmp	r0, #0
 800a168:	d128      	bne.n	800a1bc <_printf_float+0xc4>
 800a16a:	2200      	movs	r2, #0
 800a16c:	2300      	movs	r3, #0
 800a16e:	0030      	movs	r0, r6
 800a170:	0039      	movs	r1, r7
 800a172:	f7f6 f97b 	bl	800046c <__aeabi_dcmplt>
 800a176:	2800      	cmp	r0, #0
 800a178:	d003      	beq.n	800a182 <_printf_float+0x8a>
 800a17a:	002b      	movs	r3, r5
 800a17c:	222d      	movs	r2, #45	@ 0x2d
 800a17e:	3343      	adds	r3, #67	@ 0x43
 800a180:	701a      	strb	r2, [r3, #0]
 800a182:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a184:	4f9a      	ldr	r7, [pc, #616]	@ (800a3f0 <_printf_float+0x2f8>)
 800a186:	2b47      	cmp	r3, #71	@ 0x47
 800a188:	d900      	bls.n	800a18c <_printf_float+0x94>
 800a18a:	4f9a      	ldr	r7, [pc, #616]	@ (800a3f4 <_printf_float+0x2fc>)
 800a18c:	2303      	movs	r3, #3
 800a18e:	2400      	movs	r4, #0
 800a190:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a192:	612b      	str	r3, [r5, #16]
 800a194:	3301      	adds	r3, #1
 800a196:	439a      	bics	r2, r3
 800a198:	602a      	str	r2, [r5, #0]
 800a19a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a19c:	0029      	movs	r1, r5
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1a4:	aa15      	add	r2, sp, #84	@ 0x54
 800a1a6:	f000 f9e5 	bl	800a574 <_printf_common>
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d000      	beq.n	800a1b0 <_printf_float+0xb8>
 800a1ae:	e09f      	b.n	800a2f0 <_printf_float+0x1f8>
 800a1b0:	2001      	movs	r0, #1
 800a1b2:	4240      	negs	r0, r0
 800a1b4:	b017      	add	sp, #92	@ 0x5c
 800a1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1b8:	3307      	adds	r3, #7
 800a1ba:	e7b8      	b.n	800a12e <_printf_float+0x36>
 800a1bc:	0032      	movs	r2, r6
 800a1be:	003b      	movs	r3, r7
 800a1c0:	0030      	movs	r0, r6
 800a1c2:	0039      	movs	r1, r7
 800a1c4:	f7f8 fb28 	bl	8002818 <__aeabi_dcmpun>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d00b      	beq.n	800a1e4 <_printf_float+0xec>
 800a1cc:	2f00      	cmp	r7, #0
 800a1ce:	da03      	bge.n	800a1d8 <_printf_float+0xe0>
 800a1d0:	002b      	movs	r3, r5
 800a1d2:	222d      	movs	r2, #45	@ 0x2d
 800a1d4:	3343      	adds	r3, #67	@ 0x43
 800a1d6:	701a      	strb	r2, [r3, #0]
 800a1d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1da:	4f87      	ldr	r7, [pc, #540]	@ (800a3f8 <_printf_float+0x300>)
 800a1dc:	2b47      	cmp	r3, #71	@ 0x47
 800a1de:	d9d5      	bls.n	800a18c <_printf_float+0x94>
 800a1e0:	4f86      	ldr	r7, [pc, #536]	@ (800a3fc <_printf_float+0x304>)
 800a1e2:	e7d3      	b.n	800a18c <_printf_float+0x94>
 800a1e4:	2220      	movs	r2, #32
 800a1e6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a1e8:	686b      	ldr	r3, [r5, #4]
 800a1ea:	4394      	bics	r4, r2
 800a1ec:	1c5a      	adds	r2, r3, #1
 800a1ee:	d146      	bne.n	800a27e <_printf_float+0x186>
 800a1f0:	3307      	adds	r3, #7
 800a1f2:	606b      	str	r3, [r5, #4]
 800a1f4:	2380      	movs	r3, #128	@ 0x80
 800a1f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1f8:	00db      	lsls	r3, r3, #3
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	602b      	str	r3, [r5, #0]
 800a200:	9206      	str	r2, [sp, #24]
 800a202:	aa14      	add	r2, sp, #80	@ 0x50
 800a204:	9205      	str	r2, [sp, #20]
 800a206:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a208:	a90a      	add	r1, sp, #40	@ 0x28
 800a20a:	9204      	str	r2, [sp, #16]
 800a20c:	aa13      	add	r2, sp, #76	@ 0x4c
 800a20e:	9203      	str	r2, [sp, #12]
 800a210:	2223      	movs	r2, #35	@ 0x23
 800a212:	1852      	adds	r2, r2, r1
 800a214:	9202      	str	r2, [sp, #8]
 800a216:	9301      	str	r3, [sp, #4]
 800a218:	686b      	ldr	r3, [r5, #4]
 800a21a:	0032      	movs	r2, r6
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a220:	003b      	movs	r3, r7
 800a222:	f7ff fec3 	bl	8009fac <__cvt>
 800a226:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a228:	0007      	movs	r7, r0
 800a22a:	2c47      	cmp	r4, #71	@ 0x47
 800a22c:	d12d      	bne.n	800a28a <_printf_float+0x192>
 800a22e:	1cd3      	adds	r3, r2, #3
 800a230:	db02      	blt.n	800a238 <_printf_float+0x140>
 800a232:	686b      	ldr	r3, [r5, #4]
 800a234:	429a      	cmp	r2, r3
 800a236:	dd48      	ble.n	800a2ca <_printf_float+0x1d2>
 800a238:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a23a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a23c:	3b02      	subs	r3, #2
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	930c      	str	r3, [sp, #48]	@ 0x30
 800a242:	0028      	movs	r0, r5
 800a244:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a246:	3901      	subs	r1, #1
 800a248:	3050      	adds	r0, #80	@ 0x50
 800a24a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a24c:	f7ff ff14 	bl	800a078 <__exponent>
 800a250:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a252:	0004      	movs	r4, r0
 800a254:	1813      	adds	r3, r2, r0
 800a256:	612b      	str	r3, [r5, #16]
 800a258:	2a01      	cmp	r2, #1
 800a25a:	dc02      	bgt.n	800a262 <_printf_float+0x16a>
 800a25c:	682a      	ldr	r2, [r5, #0]
 800a25e:	07d2      	lsls	r2, r2, #31
 800a260:	d501      	bpl.n	800a266 <_printf_float+0x16e>
 800a262:	3301      	adds	r3, #1
 800a264:	612b      	str	r3, [r5, #16]
 800a266:	2323      	movs	r3, #35	@ 0x23
 800a268:	aa0a      	add	r2, sp, #40	@ 0x28
 800a26a:	189b      	adds	r3, r3, r2
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d100      	bne.n	800a274 <_printf_float+0x17c>
 800a272:	e792      	b.n	800a19a <_printf_float+0xa2>
 800a274:	002b      	movs	r3, r5
 800a276:	222d      	movs	r2, #45	@ 0x2d
 800a278:	3343      	adds	r3, #67	@ 0x43
 800a27a:	701a      	strb	r2, [r3, #0]
 800a27c:	e78d      	b.n	800a19a <_printf_float+0xa2>
 800a27e:	2c47      	cmp	r4, #71	@ 0x47
 800a280:	d1b8      	bne.n	800a1f4 <_printf_float+0xfc>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1b6      	bne.n	800a1f4 <_printf_float+0xfc>
 800a286:	3301      	adds	r3, #1
 800a288:	e7b3      	b.n	800a1f2 <_printf_float+0xfa>
 800a28a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a28c:	0011      	movs	r1, r2
 800a28e:	2b65      	cmp	r3, #101	@ 0x65
 800a290:	d9d7      	bls.n	800a242 <_printf_float+0x14a>
 800a292:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a294:	2b66      	cmp	r3, #102	@ 0x66
 800a296:	d11a      	bne.n	800a2ce <_printf_float+0x1d6>
 800a298:	686b      	ldr	r3, [r5, #4]
 800a29a:	2a00      	cmp	r2, #0
 800a29c:	dd09      	ble.n	800a2b2 <_printf_float+0x1ba>
 800a29e:	612a      	str	r2, [r5, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d102      	bne.n	800a2aa <_printf_float+0x1b2>
 800a2a4:	6829      	ldr	r1, [r5, #0]
 800a2a6:	07c9      	lsls	r1, r1, #31
 800a2a8:	d50b      	bpl.n	800a2c2 <_printf_float+0x1ca>
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	189b      	adds	r3, r3, r2
 800a2ae:	612b      	str	r3, [r5, #16]
 800a2b0:	e007      	b.n	800a2c2 <_printf_float+0x1ca>
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d103      	bne.n	800a2be <_printf_float+0x1c6>
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	6829      	ldr	r1, [r5, #0]
 800a2ba:	4211      	tst	r1, r2
 800a2bc:	d000      	beq.n	800a2c0 <_printf_float+0x1c8>
 800a2be:	1c9a      	adds	r2, r3, #2
 800a2c0:	612a      	str	r2, [r5, #16]
 800a2c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2c4:	2400      	movs	r4, #0
 800a2c6:	65ab      	str	r3, [r5, #88]	@ 0x58
 800a2c8:	e7cd      	b.n	800a266 <_printf_float+0x16e>
 800a2ca:	2367      	movs	r3, #103	@ 0x67
 800a2cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2ce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a2d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a2d2:	4299      	cmp	r1, r3
 800a2d4:	db06      	blt.n	800a2e4 <_printf_float+0x1ec>
 800a2d6:	682b      	ldr	r3, [r5, #0]
 800a2d8:	6129      	str	r1, [r5, #16]
 800a2da:	07db      	lsls	r3, r3, #31
 800a2dc:	d5f1      	bpl.n	800a2c2 <_printf_float+0x1ca>
 800a2de:	3101      	adds	r1, #1
 800a2e0:	6129      	str	r1, [r5, #16]
 800a2e2:	e7ee      	b.n	800a2c2 <_printf_float+0x1ca>
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	2900      	cmp	r1, #0
 800a2e8:	dce0      	bgt.n	800a2ac <_printf_float+0x1b4>
 800a2ea:	1892      	adds	r2, r2, r2
 800a2ec:	1a52      	subs	r2, r2, r1
 800a2ee:	e7dd      	b.n	800a2ac <_printf_float+0x1b4>
 800a2f0:	682a      	ldr	r2, [r5, #0]
 800a2f2:	0553      	lsls	r3, r2, #21
 800a2f4:	d408      	bmi.n	800a308 <_printf_float+0x210>
 800a2f6:	692b      	ldr	r3, [r5, #16]
 800a2f8:	003a      	movs	r2, r7
 800a2fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a2fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a300:	47a0      	blx	r4
 800a302:	3001      	adds	r0, #1
 800a304:	d129      	bne.n	800a35a <_printf_float+0x262>
 800a306:	e753      	b.n	800a1b0 <_printf_float+0xb8>
 800a308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a30a:	2b65      	cmp	r3, #101	@ 0x65
 800a30c:	d800      	bhi.n	800a310 <_printf_float+0x218>
 800a30e:	e0da      	b.n	800a4c6 <_printf_float+0x3ce>
 800a310:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a312:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a314:	2200      	movs	r2, #0
 800a316:	2300      	movs	r3, #0
 800a318:	f7f6 f8a2 	bl	8000460 <__aeabi_dcmpeq>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d033      	beq.n	800a388 <_printf_float+0x290>
 800a320:	2301      	movs	r3, #1
 800a322:	4a37      	ldr	r2, [pc, #220]	@ (800a400 <_printf_float+0x308>)
 800a324:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a328:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a32a:	47a0      	blx	r4
 800a32c:	3001      	adds	r0, #1
 800a32e:	d100      	bne.n	800a332 <_printf_float+0x23a>
 800a330:	e73e      	b.n	800a1b0 <_printf_float+0xb8>
 800a332:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a334:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a336:	42b3      	cmp	r3, r6
 800a338:	db02      	blt.n	800a340 <_printf_float+0x248>
 800a33a:	682b      	ldr	r3, [r5, #0]
 800a33c:	07db      	lsls	r3, r3, #31
 800a33e:	d50c      	bpl.n	800a35a <_printf_float+0x262>
 800a340:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a342:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a344:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a346:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a348:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a34a:	47a0      	blx	r4
 800a34c:	2400      	movs	r4, #0
 800a34e:	3001      	adds	r0, #1
 800a350:	d100      	bne.n	800a354 <_printf_float+0x25c>
 800a352:	e72d      	b.n	800a1b0 <_printf_float+0xb8>
 800a354:	1e73      	subs	r3, r6, #1
 800a356:	42a3      	cmp	r3, r4
 800a358:	dc0a      	bgt.n	800a370 <_printf_float+0x278>
 800a35a:	682b      	ldr	r3, [r5, #0]
 800a35c:	079b      	lsls	r3, r3, #30
 800a35e:	d500      	bpl.n	800a362 <_printf_float+0x26a>
 800a360:	e105      	b.n	800a56e <_printf_float+0x476>
 800a362:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a364:	68e8      	ldr	r0, [r5, #12]
 800a366:	4298      	cmp	r0, r3
 800a368:	db00      	blt.n	800a36c <_printf_float+0x274>
 800a36a:	e723      	b.n	800a1b4 <_printf_float+0xbc>
 800a36c:	0018      	movs	r0, r3
 800a36e:	e721      	b.n	800a1b4 <_printf_float+0xbc>
 800a370:	002a      	movs	r2, r5
 800a372:	2301      	movs	r3, #1
 800a374:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a376:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a378:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a37a:	321a      	adds	r2, #26
 800a37c:	47b8      	blx	r7
 800a37e:	3001      	adds	r0, #1
 800a380:	d100      	bne.n	800a384 <_printf_float+0x28c>
 800a382:	e715      	b.n	800a1b0 <_printf_float+0xb8>
 800a384:	3401      	adds	r4, #1
 800a386:	e7e5      	b.n	800a354 <_printf_float+0x25c>
 800a388:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	dc3a      	bgt.n	800a404 <_printf_float+0x30c>
 800a38e:	2301      	movs	r3, #1
 800a390:	4a1b      	ldr	r2, [pc, #108]	@ (800a400 <_printf_float+0x308>)
 800a392:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a394:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a396:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a398:	47a0      	blx	r4
 800a39a:	3001      	adds	r0, #1
 800a39c:	d100      	bne.n	800a3a0 <_printf_float+0x2a8>
 800a39e:	e707      	b.n	800a1b0 <_printf_float+0xb8>
 800a3a0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a3a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3a4:	4333      	orrs	r3, r6
 800a3a6:	d102      	bne.n	800a3ae <_printf_float+0x2b6>
 800a3a8:	682b      	ldr	r3, [r5, #0]
 800a3aa:	07db      	lsls	r3, r3, #31
 800a3ac:	d5d5      	bpl.n	800a35a <_printf_float+0x262>
 800a3ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a3b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a3b8:	47a0      	blx	r4
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d100      	bne.n	800a3c2 <_printf_float+0x2ca>
 800a3c0:	e6f6      	b.n	800a1b0 <_printf_float+0xb8>
 800a3c2:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a3c8:	425b      	negs	r3, r3
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	dc01      	bgt.n	800a3d2 <_printf_float+0x2da>
 800a3ce:	0033      	movs	r3, r6
 800a3d0:	e792      	b.n	800a2f8 <_printf_float+0x200>
 800a3d2:	002a      	movs	r2, r5
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3da:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a3dc:	321a      	adds	r2, #26
 800a3de:	47a0      	blx	r4
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d100      	bne.n	800a3e6 <_printf_float+0x2ee>
 800a3e4:	e6e4      	b.n	800a1b0 <_printf_float+0xb8>
 800a3e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	e7ea      	b.n	800a3c2 <_printf_float+0x2ca>
 800a3ec:	7fefffff 	.word	0x7fefffff
 800a3f0:	0800e7c0 	.word	0x0800e7c0
 800a3f4:	0800e7c4 	.word	0x0800e7c4
 800a3f8:	0800e7c8 	.word	0x0800e7c8
 800a3fc:	0800e7cc 	.word	0x0800e7cc
 800a400:	0800eb70 	.word	0x0800eb70
 800a404:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a406:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a408:	930c      	str	r3, [sp, #48]	@ 0x30
 800a40a:	429e      	cmp	r6, r3
 800a40c:	dd00      	ble.n	800a410 <_printf_float+0x318>
 800a40e:	001e      	movs	r6, r3
 800a410:	2e00      	cmp	r6, #0
 800a412:	dc31      	bgt.n	800a478 <_printf_float+0x380>
 800a414:	43f3      	mvns	r3, r6
 800a416:	2400      	movs	r4, #0
 800a418:	17db      	asrs	r3, r3, #31
 800a41a:	4033      	ands	r3, r6
 800a41c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a41e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a422:	1af3      	subs	r3, r6, r3
 800a424:	42a3      	cmp	r3, r4
 800a426:	dc30      	bgt.n	800a48a <_printf_float+0x392>
 800a428:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a42a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a42c:	429a      	cmp	r2, r3
 800a42e:	dc38      	bgt.n	800a4a2 <_printf_float+0x3aa>
 800a430:	682b      	ldr	r3, [r5, #0]
 800a432:	07db      	lsls	r3, r3, #31
 800a434:	d435      	bmi.n	800a4a2 <_printf_float+0x3aa>
 800a436:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a438:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a43a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a43c:	1b9b      	subs	r3, r3, r6
 800a43e:	1b14      	subs	r4, r2, r4
 800a440:	429c      	cmp	r4, r3
 800a442:	dd00      	ble.n	800a446 <_printf_float+0x34e>
 800a444:	001c      	movs	r4, r3
 800a446:	2c00      	cmp	r4, #0
 800a448:	dc34      	bgt.n	800a4b4 <_printf_float+0x3bc>
 800a44a:	43e3      	mvns	r3, r4
 800a44c:	2600      	movs	r6, #0
 800a44e:	17db      	asrs	r3, r3, #31
 800a450:	401c      	ands	r4, r3
 800a452:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a454:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	1b1b      	subs	r3, r3, r4
 800a45a:	42b3      	cmp	r3, r6
 800a45c:	dc00      	bgt.n	800a460 <_printf_float+0x368>
 800a45e:	e77c      	b.n	800a35a <_printf_float+0x262>
 800a460:	002a      	movs	r2, r5
 800a462:	2301      	movs	r3, #1
 800a464:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a468:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a46a:	321a      	adds	r2, #26
 800a46c:	47b8      	blx	r7
 800a46e:	3001      	adds	r0, #1
 800a470:	d100      	bne.n	800a474 <_printf_float+0x37c>
 800a472:	e69d      	b.n	800a1b0 <_printf_float+0xb8>
 800a474:	3601      	adds	r6, #1
 800a476:	e7ec      	b.n	800a452 <_printf_float+0x35a>
 800a478:	0033      	movs	r3, r6
 800a47a:	003a      	movs	r2, r7
 800a47c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a47e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a480:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a482:	47a0      	blx	r4
 800a484:	3001      	adds	r0, #1
 800a486:	d1c5      	bne.n	800a414 <_printf_float+0x31c>
 800a488:	e692      	b.n	800a1b0 <_printf_float+0xb8>
 800a48a:	002a      	movs	r2, r5
 800a48c:	2301      	movs	r3, #1
 800a48e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a490:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a492:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a494:	321a      	adds	r2, #26
 800a496:	47b0      	blx	r6
 800a498:	3001      	adds	r0, #1
 800a49a:	d100      	bne.n	800a49e <_printf_float+0x3a6>
 800a49c:	e688      	b.n	800a1b0 <_printf_float+0xb8>
 800a49e:	3401      	adds	r4, #1
 800a4a0:	e7bd      	b.n	800a41e <_printf_float+0x326>
 800a4a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a4a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a4a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a4ac:	47a0      	blx	r4
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	d1c1      	bne.n	800a436 <_printf_float+0x33e>
 800a4b2:	e67d      	b.n	800a1b0 <_printf_float+0xb8>
 800a4b4:	19ba      	adds	r2, r7, r6
 800a4b6:	0023      	movs	r3, r4
 800a4b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a4ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a4be:	47b0      	blx	r6
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	d1c2      	bne.n	800a44a <_printf_float+0x352>
 800a4c4:	e674      	b.n	800a1b0 <_printf_float+0xb8>
 800a4c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a4c8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	dc02      	bgt.n	800a4d4 <_printf_float+0x3dc>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	421a      	tst	r2, r3
 800a4d2:	d039      	beq.n	800a548 <_printf_float+0x450>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	003a      	movs	r2, r7
 800a4d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a4da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a4de:	47b0      	blx	r6
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	d100      	bne.n	800a4e6 <_printf_float+0x3ee>
 800a4e4:	e664      	b.n	800a1b0 <_printf_float+0xb8>
 800a4e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a4ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a4ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4ee:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a4f0:	47b0      	blx	r6
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	d100      	bne.n	800a4f8 <_printf_float+0x400>
 800a4f6:	e65b      	b.n	800a1b0 <_printf_float+0xb8>
 800a4f8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a4fa:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a4fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4fe:	2200      	movs	r2, #0
 800a500:	3b01      	subs	r3, #1
 800a502:	930c      	str	r3, [sp, #48]	@ 0x30
 800a504:	2300      	movs	r3, #0
 800a506:	f7f5 ffab 	bl	8000460 <__aeabi_dcmpeq>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d11a      	bne.n	800a544 <_printf_float+0x44c>
 800a50e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a510:	1c7a      	adds	r2, r7, #1
 800a512:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a514:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a516:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a518:	47b0      	blx	r6
 800a51a:	3001      	adds	r0, #1
 800a51c:	d10e      	bne.n	800a53c <_printf_float+0x444>
 800a51e:	e647      	b.n	800a1b0 <_printf_float+0xb8>
 800a520:	002a      	movs	r2, r5
 800a522:	2301      	movs	r3, #1
 800a524:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a528:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a52a:	321a      	adds	r2, #26
 800a52c:	47b8      	blx	r7
 800a52e:	3001      	adds	r0, #1
 800a530:	d100      	bne.n	800a534 <_printf_float+0x43c>
 800a532:	e63d      	b.n	800a1b0 <_printf_float+0xb8>
 800a534:	3601      	adds	r6, #1
 800a536:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a538:	429e      	cmp	r6, r3
 800a53a:	dbf1      	blt.n	800a520 <_printf_float+0x428>
 800a53c:	002a      	movs	r2, r5
 800a53e:	0023      	movs	r3, r4
 800a540:	3250      	adds	r2, #80	@ 0x50
 800a542:	e6da      	b.n	800a2fa <_printf_float+0x202>
 800a544:	2600      	movs	r6, #0
 800a546:	e7f6      	b.n	800a536 <_printf_float+0x43e>
 800a548:	003a      	movs	r2, r7
 800a54a:	e7e2      	b.n	800a512 <_printf_float+0x41a>
 800a54c:	002a      	movs	r2, r5
 800a54e:	2301      	movs	r3, #1
 800a550:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a552:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a554:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a556:	3219      	adds	r2, #25
 800a558:	47b0      	blx	r6
 800a55a:	3001      	adds	r0, #1
 800a55c:	d100      	bne.n	800a560 <_printf_float+0x468>
 800a55e:	e627      	b.n	800a1b0 <_printf_float+0xb8>
 800a560:	3401      	adds	r4, #1
 800a562:	68eb      	ldr	r3, [r5, #12]
 800a564:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a566:	1a9b      	subs	r3, r3, r2
 800a568:	42a3      	cmp	r3, r4
 800a56a:	dcef      	bgt.n	800a54c <_printf_float+0x454>
 800a56c:	e6f9      	b.n	800a362 <_printf_float+0x26a>
 800a56e:	2400      	movs	r4, #0
 800a570:	e7f7      	b.n	800a562 <_printf_float+0x46a>
 800a572:	46c0      	nop			@ (mov r8, r8)

0800a574 <_printf_common>:
 800a574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a576:	0016      	movs	r6, r2
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	688a      	ldr	r2, [r1, #8]
 800a57c:	690b      	ldr	r3, [r1, #16]
 800a57e:	000c      	movs	r4, r1
 800a580:	9000      	str	r0, [sp, #0]
 800a582:	4293      	cmp	r3, r2
 800a584:	da00      	bge.n	800a588 <_printf_common+0x14>
 800a586:	0013      	movs	r3, r2
 800a588:	0022      	movs	r2, r4
 800a58a:	6033      	str	r3, [r6, #0]
 800a58c:	3243      	adds	r2, #67	@ 0x43
 800a58e:	7812      	ldrb	r2, [r2, #0]
 800a590:	2a00      	cmp	r2, #0
 800a592:	d001      	beq.n	800a598 <_printf_common+0x24>
 800a594:	3301      	adds	r3, #1
 800a596:	6033      	str	r3, [r6, #0]
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	069b      	lsls	r3, r3, #26
 800a59c:	d502      	bpl.n	800a5a4 <_printf_common+0x30>
 800a59e:	6833      	ldr	r3, [r6, #0]
 800a5a0:	3302      	adds	r3, #2
 800a5a2:	6033      	str	r3, [r6, #0]
 800a5a4:	6822      	ldr	r2, [r4, #0]
 800a5a6:	2306      	movs	r3, #6
 800a5a8:	0015      	movs	r5, r2
 800a5aa:	401d      	ands	r5, r3
 800a5ac:	421a      	tst	r2, r3
 800a5ae:	d027      	beq.n	800a600 <_printf_common+0x8c>
 800a5b0:	0023      	movs	r3, r4
 800a5b2:	3343      	adds	r3, #67	@ 0x43
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	1e5a      	subs	r2, r3, #1
 800a5b8:	4193      	sbcs	r3, r2
 800a5ba:	6822      	ldr	r2, [r4, #0]
 800a5bc:	0692      	lsls	r2, r2, #26
 800a5be:	d430      	bmi.n	800a622 <_printf_common+0xae>
 800a5c0:	0022      	movs	r2, r4
 800a5c2:	9901      	ldr	r1, [sp, #4]
 800a5c4:	9800      	ldr	r0, [sp, #0]
 800a5c6:	9d08      	ldr	r5, [sp, #32]
 800a5c8:	3243      	adds	r2, #67	@ 0x43
 800a5ca:	47a8      	blx	r5
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	d025      	beq.n	800a61c <_printf_common+0xa8>
 800a5d0:	2206      	movs	r2, #6
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	2500      	movs	r5, #0
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	2b04      	cmp	r3, #4
 800a5da:	d105      	bne.n	800a5e8 <_printf_common+0x74>
 800a5dc:	6833      	ldr	r3, [r6, #0]
 800a5de:	68e5      	ldr	r5, [r4, #12]
 800a5e0:	1aed      	subs	r5, r5, r3
 800a5e2:	43eb      	mvns	r3, r5
 800a5e4:	17db      	asrs	r3, r3, #31
 800a5e6:	401d      	ands	r5, r3
 800a5e8:	68a3      	ldr	r3, [r4, #8]
 800a5ea:	6922      	ldr	r2, [r4, #16]
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	dd01      	ble.n	800a5f4 <_printf_common+0x80>
 800a5f0:	1a9b      	subs	r3, r3, r2
 800a5f2:	18ed      	adds	r5, r5, r3
 800a5f4:	2600      	movs	r6, #0
 800a5f6:	42b5      	cmp	r5, r6
 800a5f8:	d120      	bne.n	800a63c <_printf_common+0xc8>
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	e010      	b.n	800a620 <_printf_common+0xac>
 800a5fe:	3501      	adds	r5, #1
 800a600:	68e3      	ldr	r3, [r4, #12]
 800a602:	6832      	ldr	r2, [r6, #0]
 800a604:	1a9b      	subs	r3, r3, r2
 800a606:	42ab      	cmp	r3, r5
 800a608:	ddd2      	ble.n	800a5b0 <_printf_common+0x3c>
 800a60a:	0022      	movs	r2, r4
 800a60c:	2301      	movs	r3, #1
 800a60e:	9901      	ldr	r1, [sp, #4]
 800a610:	9800      	ldr	r0, [sp, #0]
 800a612:	9f08      	ldr	r7, [sp, #32]
 800a614:	3219      	adds	r2, #25
 800a616:	47b8      	blx	r7
 800a618:	3001      	adds	r0, #1
 800a61a:	d1f0      	bne.n	800a5fe <_printf_common+0x8a>
 800a61c:	2001      	movs	r0, #1
 800a61e:	4240      	negs	r0, r0
 800a620:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a622:	2030      	movs	r0, #48	@ 0x30
 800a624:	18e1      	adds	r1, r4, r3
 800a626:	3143      	adds	r1, #67	@ 0x43
 800a628:	7008      	strb	r0, [r1, #0]
 800a62a:	0021      	movs	r1, r4
 800a62c:	1c5a      	adds	r2, r3, #1
 800a62e:	3145      	adds	r1, #69	@ 0x45
 800a630:	7809      	ldrb	r1, [r1, #0]
 800a632:	18a2      	adds	r2, r4, r2
 800a634:	3243      	adds	r2, #67	@ 0x43
 800a636:	3302      	adds	r3, #2
 800a638:	7011      	strb	r1, [r2, #0]
 800a63a:	e7c1      	b.n	800a5c0 <_printf_common+0x4c>
 800a63c:	0022      	movs	r2, r4
 800a63e:	2301      	movs	r3, #1
 800a640:	9901      	ldr	r1, [sp, #4]
 800a642:	9800      	ldr	r0, [sp, #0]
 800a644:	9f08      	ldr	r7, [sp, #32]
 800a646:	321a      	adds	r2, #26
 800a648:	47b8      	blx	r7
 800a64a:	3001      	adds	r0, #1
 800a64c:	d0e6      	beq.n	800a61c <_printf_common+0xa8>
 800a64e:	3601      	adds	r6, #1
 800a650:	e7d1      	b.n	800a5f6 <_printf_common+0x82>
	...

0800a654 <_printf_i>:
 800a654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a656:	b08b      	sub	sp, #44	@ 0x2c
 800a658:	9206      	str	r2, [sp, #24]
 800a65a:	000a      	movs	r2, r1
 800a65c:	3243      	adds	r2, #67	@ 0x43
 800a65e:	9307      	str	r3, [sp, #28]
 800a660:	9005      	str	r0, [sp, #20]
 800a662:	9203      	str	r2, [sp, #12]
 800a664:	7e0a      	ldrb	r2, [r1, #24]
 800a666:	000c      	movs	r4, r1
 800a668:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a66a:	2a78      	cmp	r2, #120	@ 0x78
 800a66c:	d809      	bhi.n	800a682 <_printf_i+0x2e>
 800a66e:	2a62      	cmp	r2, #98	@ 0x62
 800a670:	d80b      	bhi.n	800a68a <_printf_i+0x36>
 800a672:	2a00      	cmp	r2, #0
 800a674:	d100      	bne.n	800a678 <_printf_i+0x24>
 800a676:	e0bc      	b.n	800a7f2 <_printf_i+0x19e>
 800a678:	497b      	ldr	r1, [pc, #492]	@ (800a868 <_printf_i+0x214>)
 800a67a:	9104      	str	r1, [sp, #16]
 800a67c:	2a58      	cmp	r2, #88	@ 0x58
 800a67e:	d100      	bne.n	800a682 <_printf_i+0x2e>
 800a680:	e090      	b.n	800a7a4 <_printf_i+0x150>
 800a682:	0025      	movs	r5, r4
 800a684:	3542      	adds	r5, #66	@ 0x42
 800a686:	702a      	strb	r2, [r5, #0]
 800a688:	e022      	b.n	800a6d0 <_printf_i+0x7c>
 800a68a:	0010      	movs	r0, r2
 800a68c:	3863      	subs	r0, #99	@ 0x63
 800a68e:	2815      	cmp	r0, #21
 800a690:	d8f7      	bhi.n	800a682 <_printf_i+0x2e>
 800a692:	f7f5 fd55 	bl	8000140 <__gnu_thumb1_case_shi>
 800a696:	0016      	.short	0x0016
 800a698:	fff6001f 	.word	0xfff6001f
 800a69c:	fff6fff6 	.word	0xfff6fff6
 800a6a0:	001ffff6 	.word	0x001ffff6
 800a6a4:	fff6fff6 	.word	0xfff6fff6
 800a6a8:	fff6fff6 	.word	0xfff6fff6
 800a6ac:	003600a1 	.word	0x003600a1
 800a6b0:	fff60080 	.word	0xfff60080
 800a6b4:	00b2fff6 	.word	0x00b2fff6
 800a6b8:	0036fff6 	.word	0x0036fff6
 800a6bc:	fff6fff6 	.word	0xfff6fff6
 800a6c0:	0084      	.short	0x0084
 800a6c2:	0025      	movs	r5, r4
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	3542      	adds	r5, #66	@ 0x42
 800a6c8:	1d11      	adds	r1, r2, #4
 800a6ca:	6019      	str	r1, [r3, #0]
 800a6cc:	6813      	ldr	r3, [r2, #0]
 800a6ce:	702b      	strb	r3, [r5, #0]
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e0a0      	b.n	800a816 <_printf_i+0x1c2>
 800a6d4:	6818      	ldr	r0, [r3, #0]
 800a6d6:	6809      	ldr	r1, [r1, #0]
 800a6d8:	1d02      	adds	r2, r0, #4
 800a6da:	060d      	lsls	r5, r1, #24
 800a6dc:	d50b      	bpl.n	800a6f6 <_printf_i+0xa2>
 800a6de:	6806      	ldr	r6, [r0, #0]
 800a6e0:	601a      	str	r2, [r3, #0]
 800a6e2:	2e00      	cmp	r6, #0
 800a6e4:	da03      	bge.n	800a6ee <_printf_i+0x9a>
 800a6e6:	232d      	movs	r3, #45	@ 0x2d
 800a6e8:	9a03      	ldr	r2, [sp, #12]
 800a6ea:	4276      	negs	r6, r6
 800a6ec:	7013      	strb	r3, [r2, #0]
 800a6ee:	4b5e      	ldr	r3, [pc, #376]	@ (800a868 <_printf_i+0x214>)
 800a6f0:	270a      	movs	r7, #10
 800a6f2:	9304      	str	r3, [sp, #16]
 800a6f4:	e018      	b.n	800a728 <_printf_i+0xd4>
 800a6f6:	6806      	ldr	r6, [r0, #0]
 800a6f8:	601a      	str	r2, [r3, #0]
 800a6fa:	0649      	lsls	r1, r1, #25
 800a6fc:	d5f1      	bpl.n	800a6e2 <_printf_i+0x8e>
 800a6fe:	b236      	sxth	r6, r6
 800a700:	e7ef      	b.n	800a6e2 <_printf_i+0x8e>
 800a702:	6808      	ldr	r0, [r1, #0]
 800a704:	6819      	ldr	r1, [r3, #0]
 800a706:	c940      	ldmia	r1!, {r6}
 800a708:	0605      	lsls	r5, r0, #24
 800a70a:	d402      	bmi.n	800a712 <_printf_i+0xbe>
 800a70c:	0640      	lsls	r0, r0, #25
 800a70e:	d500      	bpl.n	800a712 <_printf_i+0xbe>
 800a710:	b2b6      	uxth	r6, r6
 800a712:	6019      	str	r1, [r3, #0]
 800a714:	4b54      	ldr	r3, [pc, #336]	@ (800a868 <_printf_i+0x214>)
 800a716:	270a      	movs	r7, #10
 800a718:	9304      	str	r3, [sp, #16]
 800a71a:	2a6f      	cmp	r2, #111	@ 0x6f
 800a71c:	d100      	bne.n	800a720 <_printf_i+0xcc>
 800a71e:	3f02      	subs	r7, #2
 800a720:	0023      	movs	r3, r4
 800a722:	2200      	movs	r2, #0
 800a724:	3343      	adds	r3, #67	@ 0x43
 800a726:	701a      	strb	r2, [r3, #0]
 800a728:	6863      	ldr	r3, [r4, #4]
 800a72a:	60a3      	str	r3, [r4, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	db03      	blt.n	800a738 <_printf_i+0xe4>
 800a730:	2104      	movs	r1, #4
 800a732:	6822      	ldr	r2, [r4, #0]
 800a734:	438a      	bics	r2, r1
 800a736:	6022      	str	r2, [r4, #0]
 800a738:	2e00      	cmp	r6, #0
 800a73a:	d102      	bne.n	800a742 <_printf_i+0xee>
 800a73c:	9d03      	ldr	r5, [sp, #12]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00c      	beq.n	800a75c <_printf_i+0x108>
 800a742:	9d03      	ldr	r5, [sp, #12]
 800a744:	0030      	movs	r0, r6
 800a746:	0039      	movs	r1, r7
 800a748:	f7f5 fd8a 	bl	8000260 <__aeabi_uidivmod>
 800a74c:	9b04      	ldr	r3, [sp, #16]
 800a74e:	3d01      	subs	r5, #1
 800a750:	5c5b      	ldrb	r3, [r3, r1]
 800a752:	702b      	strb	r3, [r5, #0]
 800a754:	0033      	movs	r3, r6
 800a756:	0006      	movs	r6, r0
 800a758:	429f      	cmp	r7, r3
 800a75a:	d9f3      	bls.n	800a744 <_printf_i+0xf0>
 800a75c:	2f08      	cmp	r7, #8
 800a75e:	d109      	bne.n	800a774 <_printf_i+0x120>
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	07db      	lsls	r3, r3, #31
 800a764:	d506      	bpl.n	800a774 <_printf_i+0x120>
 800a766:	6862      	ldr	r2, [r4, #4]
 800a768:	6923      	ldr	r3, [r4, #16]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	dc02      	bgt.n	800a774 <_printf_i+0x120>
 800a76e:	2330      	movs	r3, #48	@ 0x30
 800a770:	3d01      	subs	r5, #1
 800a772:	702b      	strb	r3, [r5, #0]
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	1b5b      	subs	r3, r3, r5
 800a778:	6123      	str	r3, [r4, #16]
 800a77a:	9b07      	ldr	r3, [sp, #28]
 800a77c:	0021      	movs	r1, r4
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	9805      	ldr	r0, [sp, #20]
 800a782:	9b06      	ldr	r3, [sp, #24]
 800a784:	aa09      	add	r2, sp, #36	@ 0x24
 800a786:	f7ff fef5 	bl	800a574 <_printf_common>
 800a78a:	3001      	adds	r0, #1
 800a78c:	d148      	bne.n	800a820 <_printf_i+0x1cc>
 800a78e:	2001      	movs	r0, #1
 800a790:	4240      	negs	r0, r0
 800a792:	b00b      	add	sp, #44	@ 0x2c
 800a794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a796:	2220      	movs	r2, #32
 800a798:	6809      	ldr	r1, [r1, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	6022      	str	r2, [r4, #0]
 800a79e:	2278      	movs	r2, #120	@ 0x78
 800a7a0:	4932      	ldr	r1, [pc, #200]	@ (800a86c <_printf_i+0x218>)
 800a7a2:	9104      	str	r1, [sp, #16]
 800a7a4:	0021      	movs	r1, r4
 800a7a6:	3145      	adds	r1, #69	@ 0x45
 800a7a8:	700a      	strb	r2, [r1, #0]
 800a7aa:	6819      	ldr	r1, [r3, #0]
 800a7ac:	6822      	ldr	r2, [r4, #0]
 800a7ae:	c940      	ldmia	r1!, {r6}
 800a7b0:	0610      	lsls	r0, r2, #24
 800a7b2:	d402      	bmi.n	800a7ba <_printf_i+0x166>
 800a7b4:	0650      	lsls	r0, r2, #25
 800a7b6:	d500      	bpl.n	800a7ba <_printf_i+0x166>
 800a7b8:	b2b6      	uxth	r6, r6
 800a7ba:	6019      	str	r1, [r3, #0]
 800a7bc:	07d3      	lsls	r3, r2, #31
 800a7be:	d502      	bpl.n	800a7c6 <_printf_i+0x172>
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	2e00      	cmp	r6, #0
 800a7c8:	d001      	beq.n	800a7ce <_printf_i+0x17a>
 800a7ca:	2710      	movs	r7, #16
 800a7cc:	e7a8      	b.n	800a720 <_printf_i+0xcc>
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	4393      	bics	r3, r2
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	e7f8      	b.n	800a7ca <_printf_i+0x176>
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	680d      	ldr	r5, [r1, #0]
 800a7dc:	1d10      	adds	r0, r2, #4
 800a7de:	6949      	ldr	r1, [r1, #20]
 800a7e0:	6018      	str	r0, [r3, #0]
 800a7e2:	6813      	ldr	r3, [r2, #0]
 800a7e4:	062e      	lsls	r6, r5, #24
 800a7e6:	d501      	bpl.n	800a7ec <_printf_i+0x198>
 800a7e8:	6019      	str	r1, [r3, #0]
 800a7ea:	e002      	b.n	800a7f2 <_printf_i+0x19e>
 800a7ec:	066d      	lsls	r5, r5, #25
 800a7ee:	d5fb      	bpl.n	800a7e8 <_printf_i+0x194>
 800a7f0:	8019      	strh	r1, [r3, #0]
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	9d03      	ldr	r5, [sp, #12]
 800a7f6:	6123      	str	r3, [r4, #16]
 800a7f8:	e7bf      	b.n	800a77a <_printf_i+0x126>
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	1d11      	adds	r1, r2, #4
 800a7fe:	6019      	str	r1, [r3, #0]
 800a800:	6815      	ldr	r5, [r2, #0]
 800a802:	2100      	movs	r1, #0
 800a804:	0028      	movs	r0, r5
 800a806:	6862      	ldr	r2, [r4, #4]
 800a808:	f000 fd7b 	bl	800b302 <memchr>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	d001      	beq.n	800a814 <_printf_i+0x1c0>
 800a810:	1b40      	subs	r0, r0, r5
 800a812:	6060      	str	r0, [r4, #4]
 800a814:	6863      	ldr	r3, [r4, #4]
 800a816:	6123      	str	r3, [r4, #16]
 800a818:	2300      	movs	r3, #0
 800a81a:	9a03      	ldr	r2, [sp, #12]
 800a81c:	7013      	strb	r3, [r2, #0]
 800a81e:	e7ac      	b.n	800a77a <_printf_i+0x126>
 800a820:	002a      	movs	r2, r5
 800a822:	6923      	ldr	r3, [r4, #16]
 800a824:	9906      	ldr	r1, [sp, #24]
 800a826:	9805      	ldr	r0, [sp, #20]
 800a828:	9d07      	ldr	r5, [sp, #28]
 800a82a:	47a8      	blx	r5
 800a82c:	3001      	adds	r0, #1
 800a82e:	d0ae      	beq.n	800a78e <_printf_i+0x13a>
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	079b      	lsls	r3, r3, #30
 800a834:	d415      	bmi.n	800a862 <_printf_i+0x20e>
 800a836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a838:	68e0      	ldr	r0, [r4, #12]
 800a83a:	4298      	cmp	r0, r3
 800a83c:	daa9      	bge.n	800a792 <_printf_i+0x13e>
 800a83e:	0018      	movs	r0, r3
 800a840:	e7a7      	b.n	800a792 <_printf_i+0x13e>
 800a842:	0022      	movs	r2, r4
 800a844:	2301      	movs	r3, #1
 800a846:	9906      	ldr	r1, [sp, #24]
 800a848:	9805      	ldr	r0, [sp, #20]
 800a84a:	9e07      	ldr	r6, [sp, #28]
 800a84c:	3219      	adds	r2, #25
 800a84e:	47b0      	blx	r6
 800a850:	3001      	adds	r0, #1
 800a852:	d09c      	beq.n	800a78e <_printf_i+0x13a>
 800a854:	3501      	adds	r5, #1
 800a856:	68e3      	ldr	r3, [r4, #12]
 800a858:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a85a:	1a9b      	subs	r3, r3, r2
 800a85c:	42ab      	cmp	r3, r5
 800a85e:	dcf0      	bgt.n	800a842 <_printf_i+0x1ee>
 800a860:	e7e9      	b.n	800a836 <_printf_i+0x1e2>
 800a862:	2500      	movs	r5, #0
 800a864:	e7f7      	b.n	800a856 <_printf_i+0x202>
 800a866:	46c0      	nop			@ (mov r8, r8)
 800a868:	0800e7d0 	.word	0x0800e7d0
 800a86c:	0800e7e1 	.word	0x0800e7e1

0800a870 <_scanf_float>:
 800a870:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a872:	b08b      	sub	sp, #44	@ 0x2c
 800a874:	0016      	movs	r6, r2
 800a876:	9003      	str	r0, [sp, #12]
 800a878:	22ae      	movs	r2, #174	@ 0xae
 800a87a:	2000      	movs	r0, #0
 800a87c:	9307      	str	r3, [sp, #28]
 800a87e:	688b      	ldr	r3, [r1, #8]
 800a880:	000c      	movs	r4, r1
 800a882:	1e59      	subs	r1, r3, #1
 800a884:	0052      	lsls	r2, r2, #1
 800a886:	9006      	str	r0, [sp, #24]
 800a888:	4291      	cmp	r1, r2
 800a88a:	d905      	bls.n	800a898 <_scanf_float+0x28>
 800a88c:	3b5e      	subs	r3, #94	@ 0x5e
 800a88e:	3bff      	subs	r3, #255	@ 0xff
 800a890:	9306      	str	r3, [sp, #24]
 800a892:	235e      	movs	r3, #94	@ 0x5e
 800a894:	33ff      	adds	r3, #255	@ 0xff
 800a896:	60a3      	str	r3, [r4, #8]
 800a898:	23f0      	movs	r3, #240	@ 0xf0
 800a89a:	6822      	ldr	r2, [r4, #0]
 800a89c:	00db      	lsls	r3, r3, #3
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	0023      	movs	r3, r4
 800a8a4:	2500      	movs	r5, #0
 800a8a6:	331c      	adds	r3, #28
 800a8a8:	001f      	movs	r7, r3
 800a8aa:	9304      	str	r3, [sp, #16]
 800a8ac:	9502      	str	r5, [sp, #8]
 800a8ae:	9509      	str	r5, [sp, #36]	@ 0x24
 800a8b0:	9508      	str	r5, [sp, #32]
 800a8b2:	9501      	str	r5, [sp, #4]
 800a8b4:	9505      	str	r5, [sp, #20]
 800a8b6:	68a2      	ldr	r2, [r4, #8]
 800a8b8:	2a00      	cmp	r2, #0
 800a8ba:	d00a      	beq.n	800a8d2 <_scanf_float+0x62>
 800a8bc:	6833      	ldr	r3, [r6, #0]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	2b4e      	cmp	r3, #78	@ 0x4e
 800a8c2:	d844      	bhi.n	800a94e <_scanf_float+0xde>
 800a8c4:	0018      	movs	r0, r3
 800a8c6:	2b40      	cmp	r3, #64	@ 0x40
 800a8c8:	d82c      	bhi.n	800a924 <_scanf_float+0xb4>
 800a8ca:	382b      	subs	r0, #43	@ 0x2b
 800a8cc:	b2c1      	uxtb	r1, r0
 800a8ce:	290e      	cmp	r1, #14
 800a8d0:	d92a      	bls.n	800a928 <_scanf_float+0xb8>
 800a8d2:	9b01      	ldr	r3, [sp, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d003      	beq.n	800a8e0 <_scanf_float+0x70>
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	4aa6      	ldr	r2, [pc, #664]	@ (800ab74 <_scanf_float+0x304>)
 800a8dc:	4013      	ands	r3, r2
 800a8de:	6023      	str	r3, [r4, #0]
 800a8e0:	9b02      	ldr	r3, [sp, #8]
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d900      	bls.n	800a8ea <_scanf_float+0x7a>
 800a8e8:	e0fe      	b.n	800aae8 <_scanf_float+0x278>
 800a8ea:	25be      	movs	r5, #190	@ 0xbe
 800a8ec:	006d      	lsls	r5, r5, #1
 800a8ee:	9b04      	ldr	r3, [sp, #16]
 800a8f0:	429f      	cmp	r7, r3
 800a8f2:	d900      	bls.n	800a8f6 <_scanf_float+0x86>
 800a8f4:	e0ee      	b.n	800aad4 <_scanf_float+0x264>
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	b00b      	add	sp, #44	@ 0x2c
 800a8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8fc:	0018      	movs	r0, r3
 800a8fe:	3861      	subs	r0, #97	@ 0x61
 800a900:	280d      	cmp	r0, #13
 800a902:	d8e6      	bhi.n	800a8d2 <_scanf_float+0x62>
 800a904:	f7f5 fc1c 	bl	8000140 <__gnu_thumb1_case_shi>
 800a908:	ffe50089 	.word	0xffe50089
 800a90c:	ffe5ffe5 	.word	0xffe5ffe5
 800a910:	00a700bb 	.word	0x00a700bb
 800a914:	ffe5ffe5 	.word	0xffe5ffe5
 800a918:	ffe5008f 	.word	0xffe5008f
 800a91c:	ffe5ffe5 	.word	0xffe5ffe5
 800a920:	006bffe5 	.word	0x006bffe5
 800a924:	3841      	subs	r0, #65	@ 0x41
 800a926:	e7eb      	b.n	800a900 <_scanf_float+0x90>
 800a928:	280e      	cmp	r0, #14
 800a92a:	d8d2      	bhi.n	800a8d2 <_scanf_float+0x62>
 800a92c:	f7f5 fc08 	bl	8000140 <__gnu_thumb1_case_shi>
 800a930:	ffd1004f 	.word	0xffd1004f
 800a934:	009d004f 	.word	0x009d004f
 800a938:	0021ffd1 	.word	0x0021ffd1
 800a93c:	00410041 	.word	0x00410041
 800a940:	00410041 	.word	0x00410041
 800a944:	00410041 	.word	0x00410041
 800a948:	00410041 	.word	0x00410041
 800a94c:	0041      	.short	0x0041
 800a94e:	2b6e      	cmp	r3, #110	@ 0x6e
 800a950:	d80a      	bhi.n	800a968 <_scanf_float+0xf8>
 800a952:	2b60      	cmp	r3, #96	@ 0x60
 800a954:	d8d2      	bhi.n	800a8fc <_scanf_float+0x8c>
 800a956:	2b54      	cmp	r3, #84	@ 0x54
 800a958:	d100      	bne.n	800a95c <_scanf_float+0xec>
 800a95a:	e081      	b.n	800aa60 <_scanf_float+0x1f0>
 800a95c:	2b59      	cmp	r3, #89	@ 0x59
 800a95e:	d1b8      	bne.n	800a8d2 <_scanf_float+0x62>
 800a960:	2d07      	cmp	r5, #7
 800a962:	d1b6      	bne.n	800a8d2 <_scanf_float+0x62>
 800a964:	2508      	movs	r5, #8
 800a966:	e02f      	b.n	800a9c8 <_scanf_float+0x158>
 800a968:	2b74      	cmp	r3, #116	@ 0x74
 800a96a:	d079      	beq.n	800aa60 <_scanf_float+0x1f0>
 800a96c:	2b79      	cmp	r3, #121	@ 0x79
 800a96e:	d0f7      	beq.n	800a960 <_scanf_float+0xf0>
 800a970:	e7af      	b.n	800a8d2 <_scanf_float+0x62>
 800a972:	6821      	ldr	r1, [r4, #0]
 800a974:	05c8      	lsls	r0, r1, #23
 800a976:	d51c      	bpl.n	800a9b2 <_scanf_float+0x142>
 800a978:	2380      	movs	r3, #128	@ 0x80
 800a97a:	4399      	bics	r1, r3
 800a97c:	9b01      	ldr	r3, [sp, #4]
 800a97e:	6021      	str	r1, [r4, #0]
 800a980:	3301      	adds	r3, #1
 800a982:	9301      	str	r3, [sp, #4]
 800a984:	9b06      	ldr	r3, [sp, #24]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <_scanf_float+0x122>
 800a98a:	3b01      	subs	r3, #1
 800a98c:	3201      	adds	r2, #1
 800a98e:	9306      	str	r3, [sp, #24]
 800a990:	60a2      	str	r2, [r4, #8]
 800a992:	68a3      	ldr	r3, [r4, #8]
 800a994:	3b01      	subs	r3, #1
 800a996:	60a3      	str	r3, [r4, #8]
 800a998:	6923      	ldr	r3, [r4, #16]
 800a99a:	3301      	adds	r3, #1
 800a99c:	6123      	str	r3, [r4, #16]
 800a99e:	6873      	ldr	r3, [r6, #4]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	6073      	str	r3, [r6, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	dc00      	bgt.n	800a9aa <_scanf_float+0x13a>
 800a9a8:	e08a      	b.n	800aac0 <_scanf_float+0x250>
 800a9aa:	6833      	ldr	r3, [r6, #0]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	6033      	str	r3, [r6, #0]
 800a9b0:	e781      	b.n	800a8b6 <_scanf_float+0x46>
 800a9b2:	9a02      	ldr	r2, [sp, #8]
 800a9b4:	1951      	adds	r1, r2, r5
 800a9b6:	2900      	cmp	r1, #0
 800a9b8:	d000      	beq.n	800a9bc <_scanf_float+0x14c>
 800a9ba:	e78a      	b.n	800a8d2 <_scanf_float+0x62>
 800a9bc:	000d      	movs	r5, r1
 800a9be:	6822      	ldr	r2, [r4, #0]
 800a9c0:	486d      	ldr	r0, [pc, #436]	@ (800ab78 <_scanf_float+0x308>)
 800a9c2:	9102      	str	r1, [sp, #8]
 800a9c4:	4002      	ands	r2, r0
 800a9c6:	6022      	str	r2, [r4, #0]
 800a9c8:	703b      	strb	r3, [r7, #0]
 800a9ca:	3701      	adds	r7, #1
 800a9cc:	e7e1      	b.n	800a992 <_scanf_float+0x122>
 800a9ce:	2180      	movs	r1, #128	@ 0x80
 800a9d0:	6822      	ldr	r2, [r4, #0]
 800a9d2:	420a      	tst	r2, r1
 800a9d4:	d100      	bne.n	800a9d8 <_scanf_float+0x168>
 800a9d6:	e77c      	b.n	800a8d2 <_scanf_float+0x62>
 800a9d8:	438a      	bics	r2, r1
 800a9da:	6022      	str	r2, [r4, #0]
 800a9dc:	e7f4      	b.n	800a9c8 <_scanf_float+0x158>
 800a9de:	9a02      	ldr	r2, [sp, #8]
 800a9e0:	2a00      	cmp	r2, #0
 800a9e2:	d10f      	bne.n	800aa04 <_scanf_float+0x194>
 800a9e4:	9a01      	ldr	r2, [sp, #4]
 800a9e6:	2a00      	cmp	r2, #0
 800a9e8:	d10f      	bne.n	800aa0a <_scanf_float+0x19a>
 800a9ea:	6822      	ldr	r2, [r4, #0]
 800a9ec:	21e0      	movs	r1, #224	@ 0xe0
 800a9ee:	0010      	movs	r0, r2
 800a9f0:	00c9      	lsls	r1, r1, #3
 800a9f2:	4008      	ands	r0, r1
 800a9f4:	4288      	cmp	r0, r1
 800a9f6:	d108      	bne.n	800aa0a <_scanf_float+0x19a>
 800a9f8:	4960      	ldr	r1, [pc, #384]	@ (800ab7c <_scanf_float+0x30c>)
 800a9fa:	400a      	ands	r2, r1
 800a9fc:	6022      	str	r2, [r4, #0]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	9202      	str	r2, [sp, #8]
 800aa02:	e7e1      	b.n	800a9c8 <_scanf_float+0x158>
 800aa04:	9a02      	ldr	r2, [sp, #8]
 800aa06:	2a02      	cmp	r2, #2
 800aa08:	d058      	beq.n	800aabc <_scanf_float+0x24c>
 800aa0a:	2d01      	cmp	r5, #1
 800aa0c:	d002      	beq.n	800aa14 <_scanf_float+0x1a4>
 800aa0e:	2d04      	cmp	r5, #4
 800aa10:	d000      	beq.n	800aa14 <_scanf_float+0x1a4>
 800aa12:	e75e      	b.n	800a8d2 <_scanf_float+0x62>
 800aa14:	3501      	adds	r5, #1
 800aa16:	b2ed      	uxtb	r5, r5
 800aa18:	e7d6      	b.n	800a9c8 <_scanf_float+0x158>
 800aa1a:	9a02      	ldr	r2, [sp, #8]
 800aa1c:	2a01      	cmp	r2, #1
 800aa1e:	d000      	beq.n	800aa22 <_scanf_float+0x1b2>
 800aa20:	e757      	b.n	800a8d2 <_scanf_float+0x62>
 800aa22:	2202      	movs	r2, #2
 800aa24:	e7ec      	b.n	800aa00 <_scanf_float+0x190>
 800aa26:	2d00      	cmp	r5, #0
 800aa28:	d110      	bne.n	800aa4c <_scanf_float+0x1dc>
 800aa2a:	9a01      	ldr	r2, [sp, #4]
 800aa2c:	2a00      	cmp	r2, #0
 800aa2e:	d000      	beq.n	800aa32 <_scanf_float+0x1c2>
 800aa30:	e752      	b.n	800a8d8 <_scanf_float+0x68>
 800aa32:	6822      	ldr	r2, [r4, #0]
 800aa34:	21e0      	movs	r1, #224	@ 0xe0
 800aa36:	0010      	movs	r0, r2
 800aa38:	00c9      	lsls	r1, r1, #3
 800aa3a:	4008      	ands	r0, r1
 800aa3c:	4288      	cmp	r0, r1
 800aa3e:	d000      	beq.n	800aa42 <_scanf_float+0x1d2>
 800aa40:	e11d      	b.n	800ac7e <_scanf_float+0x40e>
 800aa42:	494e      	ldr	r1, [pc, #312]	@ (800ab7c <_scanf_float+0x30c>)
 800aa44:	3501      	adds	r5, #1
 800aa46:	400a      	ands	r2, r1
 800aa48:	6022      	str	r2, [r4, #0]
 800aa4a:	e7bd      	b.n	800a9c8 <_scanf_float+0x158>
 800aa4c:	21fd      	movs	r1, #253	@ 0xfd
 800aa4e:	1eea      	subs	r2, r5, #3
 800aa50:	420a      	tst	r2, r1
 800aa52:	d0df      	beq.n	800aa14 <_scanf_float+0x1a4>
 800aa54:	e73d      	b.n	800a8d2 <_scanf_float+0x62>
 800aa56:	2d02      	cmp	r5, #2
 800aa58:	d000      	beq.n	800aa5c <_scanf_float+0x1ec>
 800aa5a:	e73a      	b.n	800a8d2 <_scanf_float+0x62>
 800aa5c:	2503      	movs	r5, #3
 800aa5e:	e7b3      	b.n	800a9c8 <_scanf_float+0x158>
 800aa60:	2d06      	cmp	r5, #6
 800aa62:	d000      	beq.n	800aa66 <_scanf_float+0x1f6>
 800aa64:	e735      	b.n	800a8d2 <_scanf_float+0x62>
 800aa66:	2507      	movs	r5, #7
 800aa68:	e7ae      	b.n	800a9c8 <_scanf_float+0x158>
 800aa6a:	6822      	ldr	r2, [r4, #0]
 800aa6c:	0591      	lsls	r1, r2, #22
 800aa6e:	d400      	bmi.n	800aa72 <_scanf_float+0x202>
 800aa70:	e72f      	b.n	800a8d2 <_scanf_float+0x62>
 800aa72:	4943      	ldr	r1, [pc, #268]	@ (800ab80 <_scanf_float+0x310>)
 800aa74:	400a      	ands	r2, r1
 800aa76:	6022      	str	r2, [r4, #0]
 800aa78:	9a01      	ldr	r2, [sp, #4]
 800aa7a:	9205      	str	r2, [sp, #20]
 800aa7c:	e7a4      	b.n	800a9c8 <_scanf_float+0x158>
 800aa7e:	21a0      	movs	r1, #160	@ 0xa0
 800aa80:	2080      	movs	r0, #128	@ 0x80
 800aa82:	6822      	ldr	r2, [r4, #0]
 800aa84:	00c9      	lsls	r1, r1, #3
 800aa86:	4011      	ands	r1, r2
 800aa88:	00c0      	lsls	r0, r0, #3
 800aa8a:	4281      	cmp	r1, r0
 800aa8c:	d006      	beq.n	800aa9c <_scanf_float+0x22c>
 800aa8e:	4202      	tst	r2, r0
 800aa90:	d100      	bne.n	800aa94 <_scanf_float+0x224>
 800aa92:	e71e      	b.n	800a8d2 <_scanf_float+0x62>
 800aa94:	9901      	ldr	r1, [sp, #4]
 800aa96:	2900      	cmp	r1, #0
 800aa98:	d100      	bne.n	800aa9c <_scanf_float+0x22c>
 800aa9a:	e0f0      	b.n	800ac7e <_scanf_float+0x40e>
 800aa9c:	0591      	lsls	r1, r2, #22
 800aa9e:	d404      	bmi.n	800aaaa <_scanf_float+0x23a>
 800aaa0:	9901      	ldr	r1, [sp, #4]
 800aaa2:	9805      	ldr	r0, [sp, #20]
 800aaa4:	9709      	str	r7, [sp, #36]	@ 0x24
 800aaa6:	1a09      	subs	r1, r1, r0
 800aaa8:	9108      	str	r1, [sp, #32]
 800aaaa:	4934      	ldr	r1, [pc, #208]	@ (800ab7c <_scanf_float+0x30c>)
 800aaac:	400a      	ands	r2, r1
 800aaae:	21c0      	movs	r1, #192	@ 0xc0
 800aab0:	0049      	lsls	r1, r1, #1
 800aab2:	430a      	orrs	r2, r1
 800aab4:	6022      	str	r2, [r4, #0]
 800aab6:	2200      	movs	r2, #0
 800aab8:	9201      	str	r2, [sp, #4]
 800aaba:	e785      	b.n	800a9c8 <_scanf_float+0x158>
 800aabc:	2203      	movs	r2, #3
 800aabe:	e79f      	b.n	800aa00 <_scanf_float+0x190>
 800aac0:	23c0      	movs	r3, #192	@ 0xc0
 800aac2:	005b      	lsls	r3, r3, #1
 800aac4:	0031      	movs	r1, r6
 800aac6:	58e3      	ldr	r3, [r4, r3]
 800aac8:	9803      	ldr	r0, [sp, #12]
 800aaca:	4798      	blx	r3
 800aacc:	2800      	cmp	r0, #0
 800aace:	d100      	bne.n	800aad2 <_scanf_float+0x262>
 800aad0:	e6f1      	b.n	800a8b6 <_scanf_float+0x46>
 800aad2:	e6fe      	b.n	800a8d2 <_scanf_float+0x62>
 800aad4:	3f01      	subs	r7, #1
 800aad6:	5963      	ldr	r3, [r4, r5]
 800aad8:	0032      	movs	r2, r6
 800aada:	7839      	ldrb	r1, [r7, #0]
 800aadc:	9803      	ldr	r0, [sp, #12]
 800aade:	4798      	blx	r3
 800aae0:	6923      	ldr	r3, [r4, #16]
 800aae2:	3b01      	subs	r3, #1
 800aae4:	6123      	str	r3, [r4, #16]
 800aae6:	e702      	b.n	800a8ee <_scanf_float+0x7e>
 800aae8:	1e6b      	subs	r3, r5, #1
 800aaea:	2b06      	cmp	r3, #6
 800aaec:	d80e      	bhi.n	800ab0c <_scanf_float+0x29c>
 800aaee:	9702      	str	r7, [sp, #8]
 800aaf0:	2d02      	cmp	r5, #2
 800aaf2:	d920      	bls.n	800ab36 <_scanf_float+0x2c6>
 800aaf4:	1beb      	subs	r3, r5, r7
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	9306      	str	r3, [sp, #24]
 800aafa:	9b02      	ldr	r3, [sp, #8]
 800aafc:	9a06      	ldr	r2, [sp, #24]
 800aafe:	189b      	adds	r3, r3, r2
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d127      	bne.n	800ab56 <_scanf_float+0x2e6>
 800ab06:	3d03      	subs	r5, #3
 800ab08:	b2ed      	uxtb	r5, r5
 800ab0a:	1b7f      	subs	r7, r7, r5
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	05da      	lsls	r2, r3, #23
 800ab10:	d553      	bpl.n	800abba <_scanf_float+0x34a>
 800ab12:	055b      	lsls	r3, r3, #21
 800ab14:	d536      	bpl.n	800ab84 <_scanf_float+0x314>
 800ab16:	25be      	movs	r5, #190	@ 0xbe
 800ab18:	006d      	lsls	r5, r5, #1
 800ab1a:	9b04      	ldr	r3, [sp, #16]
 800ab1c:	429f      	cmp	r7, r3
 800ab1e:	d800      	bhi.n	800ab22 <_scanf_float+0x2b2>
 800ab20:	e6e9      	b.n	800a8f6 <_scanf_float+0x86>
 800ab22:	3f01      	subs	r7, #1
 800ab24:	5963      	ldr	r3, [r4, r5]
 800ab26:	0032      	movs	r2, r6
 800ab28:	7839      	ldrb	r1, [r7, #0]
 800ab2a:	9803      	ldr	r0, [sp, #12]
 800ab2c:	4798      	blx	r3
 800ab2e:	6923      	ldr	r3, [r4, #16]
 800ab30:	3b01      	subs	r3, #1
 800ab32:	6123      	str	r3, [r4, #16]
 800ab34:	e7f1      	b.n	800ab1a <_scanf_float+0x2aa>
 800ab36:	25be      	movs	r5, #190	@ 0xbe
 800ab38:	006d      	lsls	r5, r5, #1
 800ab3a:	9b04      	ldr	r3, [sp, #16]
 800ab3c:	429f      	cmp	r7, r3
 800ab3e:	d800      	bhi.n	800ab42 <_scanf_float+0x2d2>
 800ab40:	e6d9      	b.n	800a8f6 <_scanf_float+0x86>
 800ab42:	3f01      	subs	r7, #1
 800ab44:	5963      	ldr	r3, [r4, r5]
 800ab46:	0032      	movs	r2, r6
 800ab48:	7839      	ldrb	r1, [r7, #0]
 800ab4a:	9803      	ldr	r0, [sp, #12]
 800ab4c:	4798      	blx	r3
 800ab4e:	6923      	ldr	r3, [r4, #16]
 800ab50:	3b01      	subs	r3, #1
 800ab52:	6123      	str	r3, [r4, #16]
 800ab54:	e7f1      	b.n	800ab3a <_scanf_float+0x2ca>
 800ab56:	9b02      	ldr	r3, [sp, #8]
 800ab58:	0032      	movs	r2, r6
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	7819      	ldrb	r1, [r3, #0]
 800ab5e:	9302      	str	r3, [sp, #8]
 800ab60:	23be      	movs	r3, #190	@ 0xbe
 800ab62:	005b      	lsls	r3, r3, #1
 800ab64:	58e3      	ldr	r3, [r4, r3]
 800ab66:	9803      	ldr	r0, [sp, #12]
 800ab68:	4798      	blx	r3
 800ab6a:	6923      	ldr	r3, [r4, #16]
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	6123      	str	r3, [r4, #16]
 800ab70:	e7c3      	b.n	800aafa <_scanf_float+0x28a>
 800ab72:	46c0      	nop			@ (mov r8, r8)
 800ab74:	fffffeff 	.word	0xfffffeff
 800ab78:	fffffe7f 	.word	0xfffffe7f
 800ab7c:	fffff87f 	.word	0xfffff87f
 800ab80:	fffffd7f 	.word	0xfffffd7f
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	1e7d      	subs	r5, r7, #1
 800ab88:	7829      	ldrb	r1, [r5, #0]
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	6123      	str	r3, [r4, #16]
 800ab8e:	2965      	cmp	r1, #101	@ 0x65
 800ab90:	d00c      	beq.n	800abac <_scanf_float+0x33c>
 800ab92:	2945      	cmp	r1, #69	@ 0x45
 800ab94:	d00a      	beq.n	800abac <_scanf_float+0x33c>
 800ab96:	23be      	movs	r3, #190	@ 0xbe
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	58e3      	ldr	r3, [r4, r3]
 800ab9c:	0032      	movs	r2, r6
 800ab9e:	9803      	ldr	r0, [sp, #12]
 800aba0:	4798      	blx	r3
 800aba2:	6923      	ldr	r3, [r4, #16]
 800aba4:	1ebd      	subs	r5, r7, #2
 800aba6:	3b01      	subs	r3, #1
 800aba8:	7829      	ldrb	r1, [r5, #0]
 800abaa:	6123      	str	r3, [r4, #16]
 800abac:	23be      	movs	r3, #190	@ 0xbe
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	0032      	movs	r2, r6
 800abb2:	58e3      	ldr	r3, [r4, r3]
 800abb4:	9803      	ldr	r0, [sp, #12]
 800abb6:	4798      	blx	r3
 800abb8:	002f      	movs	r7, r5
 800abba:	6821      	ldr	r1, [r4, #0]
 800abbc:	2310      	movs	r3, #16
 800abbe:	000a      	movs	r2, r1
 800abc0:	401a      	ands	r2, r3
 800abc2:	4219      	tst	r1, r3
 800abc4:	d001      	beq.n	800abca <_scanf_float+0x35a>
 800abc6:	2000      	movs	r0, #0
 800abc8:	e696      	b.n	800a8f8 <_scanf_float+0x88>
 800abca:	21c0      	movs	r1, #192	@ 0xc0
 800abcc:	703a      	strb	r2, [r7, #0]
 800abce:	6823      	ldr	r3, [r4, #0]
 800abd0:	00c9      	lsls	r1, r1, #3
 800abd2:	400b      	ands	r3, r1
 800abd4:	2180      	movs	r1, #128	@ 0x80
 800abd6:	00c9      	lsls	r1, r1, #3
 800abd8:	428b      	cmp	r3, r1
 800abda:	d11c      	bne.n	800ac16 <_scanf_float+0x3a6>
 800abdc:	9b05      	ldr	r3, [sp, #20]
 800abde:	9a01      	ldr	r2, [sp, #4]
 800abe0:	9905      	ldr	r1, [sp, #20]
 800abe2:	1a9a      	subs	r2, r3, r2
 800abe4:	9b01      	ldr	r3, [sp, #4]
 800abe6:	428b      	cmp	r3, r1
 800abe8:	d121      	bne.n	800ac2e <_scanf_float+0x3be>
 800abea:	2200      	movs	r2, #0
 800abec:	9904      	ldr	r1, [sp, #16]
 800abee:	9803      	ldr	r0, [sp, #12]
 800abf0:	f7ff f9c6 	bl	8009f80 <_strtod_r>
 800abf4:	9b07      	ldr	r3, [sp, #28]
 800abf6:	6822      	ldr	r2, [r4, #0]
 800abf8:	0006      	movs	r6, r0
 800abfa:	000f      	movs	r7, r1
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	0791      	lsls	r1, r2, #30
 800ac00:	d522      	bpl.n	800ac48 <_scanf_float+0x3d8>
 800ac02:	9907      	ldr	r1, [sp, #28]
 800ac04:	1d1a      	adds	r2, r3, #4
 800ac06:	600a      	str	r2, [r1, #0]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	601e      	str	r6, [r3, #0]
 800ac0c:	605f      	str	r7, [r3, #4]
 800ac0e:	68e3      	ldr	r3, [r4, #12]
 800ac10:	3301      	adds	r3, #1
 800ac12:	60e3      	str	r3, [r4, #12]
 800ac14:	e7d7      	b.n	800abc6 <_scanf_float+0x356>
 800ac16:	9b08      	ldr	r3, [sp, #32]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d0e6      	beq.n	800abea <_scanf_float+0x37a>
 800ac1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac1e:	9803      	ldr	r0, [sp, #12]
 800ac20:	1c59      	adds	r1, r3, #1
 800ac22:	230a      	movs	r3, #10
 800ac24:	f002 fbd4 	bl	800d3d0 <_strtol_r>
 800ac28:	9b08      	ldr	r3, [sp, #32]
 800ac2a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800ac2c:	1ac2      	subs	r2, r0, r3
 800ac2e:	0023      	movs	r3, r4
 800ac30:	3370      	adds	r3, #112	@ 0x70
 800ac32:	33ff      	adds	r3, #255	@ 0xff
 800ac34:	429f      	cmp	r7, r3
 800ac36:	d302      	bcc.n	800ac3e <_scanf_float+0x3ce>
 800ac38:	0027      	movs	r7, r4
 800ac3a:	376f      	adds	r7, #111	@ 0x6f
 800ac3c:	37ff      	adds	r7, #255	@ 0xff
 800ac3e:	0038      	movs	r0, r7
 800ac40:	4910      	ldr	r1, [pc, #64]	@ (800ac84 <_scanf_float+0x414>)
 800ac42:	f000 f957 	bl	800aef4 <siprintf>
 800ac46:	e7d0      	b.n	800abea <_scanf_float+0x37a>
 800ac48:	1d19      	adds	r1, r3, #4
 800ac4a:	0752      	lsls	r2, r2, #29
 800ac4c:	d502      	bpl.n	800ac54 <_scanf_float+0x3e4>
 800ac4e:	9a07      	ldr	r2, [sp, #28]
 800ac50:	6011      	str	r1, [r2, #0]
 800ac52:	e7d9      	b.n	800ac08 <_scanf_float+0x398>
 800ac54:	9a07      	ldr	r2, [sp, #28]
 800ac56:	0030      	movs	r0, r6
 800ac58:	6011      	str	r1, [r2, #0]
 800ac5a:	681d      	ldr	r5, [r3, #0]
 800ac5c:	0032      	movs	r2, r6
 800ac5e:	003b      	movs	r3, r7
 800ac60:	0039      	movs	r1, r7
 800ac62:	f7f7 fdd9 	bl	8002818 <__aeabi_dcmpun>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d004      	beq.n	800ac74 <_scanf_float+0x404>
 800ac6a:	4807      	ldr	r0, [pc, #28]	@ (800ac88 <_scanf_float+0x418>)
 800ac6c:	f000 fb64 	bl	800b338 <nanf>
 800ac70:	6028      	str	r0, [r5, #0]
 800ac72:	e7cc      	b.n	800ac0e <_scanf_float+0x39e>
 800ac74:	0030      	movs	r0, r6
 800ac76:	0039      	movs	r1, r7
 800ac78:	f7f7 fe7e 	bl	8002978 <__aeabi_d2f>
 800ac7c:	e7f8      	b.n	800ac70 <_scanf_float+0x400>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	9301      	str	r3, [sp, #4]
 800ac82:	e62d      	b.n	800a8e0 <_scanf_float+0x70>
 800ac84:	0800e7f2 	.word	0x0800e7f2
 800ac88:	0800ebb0 	.word	0x0800ebb0

0800ac8c <std>:
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	b510      	push	{r4, lr}
 800ac90:	0004      	movs	r4, r0
 800ac92:	6003      	str	r3, [r0, #0]
 800ac94:	6043      	str	r3, [r0, #4]
 800ac96:	6083      	str	r3, [r0, #8]
 800ac98:	8181      	strh	r1, [r0, #12]
 800ac9a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac9c:	81c2      	strh	r2, [r0, #14]
 800ac9e:	6103      	str	r3, [r0, #16]
 800aca0:	6143      	str	r3, [r0, #20]
 800aca2:	6183      	str	r3, [r0, #24]
 800aca4:	0019      	movs	r1, r3
 800aca6:	2208      	movs	r2, #8
 800aca8:	305c      	adds	r0, #92	@ 0x5c
 800acaa:	f000 fa91 	bl	800b1d0 <memset>
 800acae:	4b0b      	ldr	r3, [pc, #44]	@ (800acdc <std+0x50>)
 800acb0:	6224      	str	r4, [r4, #32]
 800acb2:	6263      	str	r3, [r4, #36]	@ 0x24
 800acb4:	4b0a      	ldr	r3, [pc, #40]	@ (800ace0 <std+0x54>)
 800acb6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acb8:	4b0a      	ldr	r3, [pc, #40]	@ (800ace4 <std+0x58>)
 800acba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800acbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ace8 <std+0x5c>)
 800acbe:	6323      	str	r3, [r4, #48]	@ 0x30
 800acc0:	4b0a      	ldr	r3, [pc, #40]	@ (800acec <std+0x60>)
 800acc2:	429c      	cmp	r4, r3
 800acc4:	d005      	beq.n	800acd2 <std+0x46>
 800acc6:	4b0a      	ldr	r3, [pc, #40]	@ (800acf0 <std+0x64>)
 800acc8:	429c      	cmp	r4, r3
 800acca:	d002      	beq.n	800acd2 <std+0x46>
 800accc:	4b09      	ldr	r3, [pc, #36]	@ (800acf4 <std+0x68>)
 800acce:	429c      	cmp	r4, r3
 800acd0:	d103      	bne.n	800acda <std+0x4e>
 800acd2:	0020      	movs	r0, r4
 800acd4:	3058      	adds	r0, #88	@ 0x58
 800acd6:	f000 fb11 	bl	800b2fc <__retarget_lock_init_recursive>
 800acda:	bd10      	pop	{r4, pc}
 800acdc:	0800af85 	.word	0x0800af85
 800ace0:	0800afb1 	.word	0x0800afb1
 800ace4:	0800afe9 	.word	0x0800afe9
 800ace8:	0800b015 	.word	0x0800b015
 800acec:	2000078c 	.word	0x2000078c
 800acf0:	200007f4 	.word	0x200007f4
 800acf4:	2000085c 	.word	0x2000085c

0800acf8 <stdio_exit_handler>:
 800acf8:	b510      	push	{r4, lr}
 800acfa:	4a03      	ldr	r2, [pc, #12]	@ (800ad08 <stdio_exit_handler+0x10>)
 800acfc:	4903      	ldr	r1, [pc, #12]	@ (800ad0c <stdio_exit_handler+0x14>)
 800acfe:	4804      	ldr	r0, [pc, #16]	@ (800ad10 <stdio_exit_handler+0x18>)
 800ad00:	f000 f86c 	bl	800addc <_fwalk_sglue>
 800ad04:	bd10      	pop	{r4, pc}
 800ad06:	46c0      	nop			@ (mov r8, r8)
 800ad08:	20000038 	.word	0x20000038
 800ad0c:	0800e081 	.word	0x0800e081
 800ad10:	200001b4 	.word	0x200001b4

0800ad14 <cleanup_stdio>:
 800ad14:	6841      	ldr	r1, [r0, #4]
 800ad16:	4b0b      	ldr	r3, [pc, #44]	@ (800ad44 <cleanup_stdio+0x30>)
 800ad18:	b510      	push	{r4, lr}
 800ad1a:	0004      	movs	r4, r0
 800ad1c:	4299      	cmp	r1, r3
 800ad1e:	d001      	beq.n	800ad24 <cleanup_stdio+0x10>
 800ad20:	f003 f9ae 	bl	800e080 <_fflush_r>
 800ad24:	68a1      	ldr	r1, [r4, #8]
 800ad26:	4b08      	ldr	r3, [pc, #32]	@ (800ad48 <cleanup_stdio+0x34>)
 800ad28:	4299      	cmp	r1, r3
 800ad2a:	d002      	beq.n	800ad32 <cleanup_stdio+0x1e>
 800ad2c:	0020      	movs	r0, r4
 800ad2e:	f003 f9a7 	bl	800e080 <_fflush_r>
 800ad32:	68e1      	ldr	r1, [r4, #12]
 800ad34:	4b05      	ldr	r3, [pc, #20]	@ (800ad4c <cleanup_stdio+0x38>)
 800ad36:	4299      	cmp	r1, r3
 800ad38:	d002      	beq.n	800ad40 <cleanup_stdio+0x2c>
 800ad3a:	0020      	movs	r0, r4
 800ad3c:	f003 f9a0 	bl	800e080 <_fflush_r>
 800ad40:	bd10      	pop	{r4, pc}
 800ad42:	46c0      	nop			@ (mov r8, r8)
 800ad44:	2000078c 	.word	0x2000078c
 800ad48:	200007f4 	.word	0x200007f4
 800ad4c:	2000085c 	.word	0x2000085c

0800ad50 <global_stdio_init.part.0>:
 800ad50:	b510      	push	{r4, lr}
 800ad52:	4b09      	ldr	r3, [pc, #36]	@ (800ad78 <global_stdio_init.part.0+0x28>)
 800ad54:	4a09      	ldr	r2, [pc, #36]	@ (800ad7c <global_stdio_init.part.0+0x2c>)
 800ad56:	2104      	movs	r1, #4
 800ad58:	601a      	str	r2, [r3, #0]
 800ad5a:	4809      	ldr	r0, [pc, #36]	@ (800ad80 <global_stdio_init.part.0+0x30>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f7ff ff95 	bl	800ac8c <std>
 800ad62:	2201      	movs	r2, #1
 800ad64:	2109      	movs	r1, #9
 800ad66:	4807      	ldr	r0, [pc, #28]	@ (800ad84 <global_stdio_init.part.0+0x34>)
 800ad68:	f7ff ff90 	bl	800ac8c <std>
 800ad6c:	2202      	movs	r2, #2
 800ad6e:	2112      	movs	r1, #18
 800ad70:	4805      	ldr	r0, [pc, #20]	@ (800ad88 <global_stdio_init.part.0+0x38>)
 800ad72:	f7ff ff8b 	bl	800ac8c <std>
 800ad76:	bd10      	pop	{r4, pc}
 800ad78:	200008c4 	.word	0x200008c4
 800ad7c:	0800acf9 	.word	0x0800acf9
 800ad80:	2000078c 	.word	0x2000078c
 800ad84:	200007f4 	.word	0x200007f4
 800ad88:	2000085c 	.word	0x2000085c

0800ad8c <__sfp_lock_acquire>:
 800ad8c:	b510      	push	{r4, lr}
 800ad8e:	4802      	ldr	r0, [pc, #8]	@ (800ad98 <__sfp_lock_acquire+0xc>)
 800ad90:	f000 fab5 	bl	800b2fe <__retarget_lock_acquire_recursive>
 800ad94:	bd10      	pop	{r4, pc}
 800ad96:	46c0      	nop			@ (mov r8, r8)
 800ad98:	200008cd 	.word	0x200008cd

0800ad9c <__sfp_lock_release>:
 800ad9c:	b510      	push	{r4, lr}
 800ad9e:	4802      	ldr	r0, [pc, #8]	@ (800ada8 <__sfp_lock_release+0xc>)
 800ada0:	f000 faae 	bl	800b300 <__retarget_lock_release_recursive>
 800ada4:	bd10      	pop	{r4, pc}
 800ada6:	46c0      	nop			@ (mov r8, r8)
 800ada8:	200008cd 	.word	0x200008cd

0800adac <__sinit>:
 800adac:	b510      	push	{r4, lr}
 800adae:	0004      	movs	r4, r0
 800adb0:	f7ff ffec 	bl	800ad8c <__sfp_lock_acquire>
 800adb4:	6a23      	ldr	r3, [r4, #32]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d002      	beq.n	800adc0 <__sinit+0x14>
 800adba:	f7ff ffef 	bl	800ad9c <__sfp_lock_release>
 800adbe:	bd10      	pop	{r4, pc}
 800adc0:	4b04      	ldr	r3, [pc, #16]	@ (800add4 <__sinit+0x28>)
 800adc2:	6223      	str	r3, [r4, #32]
 800adc4:	4b04      	ldr	r3, [pc, #16]	@ (800add8 <__sinit+0x2c>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1f6      	bne.n	800adba <__sinit+0xe>
 800adcc:	f7ff ffc0 	bl	800ad50 <global_stdio_init.part.0>
 800add0:	e7f3      	b.n	800adba <__sinit+0xe>
 800add2:	46c0      	nop			@ (mov r8, r8)
 800add4:	0800ad15 	.word	0x0800ad15
 800add8:	200008c4 	.word	0x200008c4

0800addc <_fwalk_sglue>:
 800addc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adde:	0014      	movs	r4, r2
 800ade0:	2600      	movs	r6, #0
 800ade2:	9000      	str	r0, [sp, #0]
 800ade4:	9101      	str	r1, [sp, #4]
 800ade6:	68a5      	ldr	r5, [r4, #8]
 800ade8:	6867      	ldr	r7, [r4, #4]
 800adea:	3f01      	subs	r7, #1
 800adec:	d504      	bpl.n	800adf8 <_fwalk_sglue+0x1c>
 800adee:	6824      	ldr	r4, [r4, #0]
 800adf0:	2c00      	cmp	r4, #0
 800adf2:	d1f8      	bne.n	800ade6 <_fwalk_sglue+0xa>
 800adf4:	0030      	movs	r0, r6
 800adf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800adf8:	89ab      	ldrh	r3, [r5, #12]
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d908      	bls.n	800ae10 <_fwalk_sglue+0x34>
 800adfe:	220e      	movs	r2, #14
 800ae00:	5eab      	ldrsh	r3, [r5, r2]
 800ae02:	3301      	adds	r3, #1
 800ae04:	d004      	beq.n	800ae10 <_fwalk_sglue+0x34>
 800ae06:	0029      	movs	r1, r5
 800ae08:	9800      	ldr	r0, [sp, #0]
 800ae0a:	9b01      	ldr	r3, [sp, #4]
 800ae0c:	4798      	blx	r3
 800ae0e:	4306      	orrs	r6, r0
 800ae10:	3568      	adds	r5, #104	@ 0x68
 800ae12:	e7ea      	b.n	800adea <_fwalk_sglue+0xe>

0800ae14 <iprintf>:
 800ae14:	b40f      	push	{r0, r1, r2, r3}
 800ae16:	b507      	push	{r0, r1, r2, lr}
 800ae18:	4905      	ldr	r1, [pc, #20]	@ (800ae30 <iprintf+0x1c>)
 800ae1a:	ab04      	add	r3, sp, #16
 800ae1c:	6808      	ldr	r0, [r1, #0]
 800ae1e:	cb04      	ldmia	r3!, {r2}
 800ae20:	6881      	ldr	r1, [r0, #8]
 800ae22:	9301      	str	r3, [sp, #4]
 800ae24:	f002 fe2a 	bl	800da7c <_vfiprintf_r>
 800ae28:	b003      	add	sp, #12
 800ae2a:	bc08      	pop	{r3}
 800ae2c:	b004      	add	sp, #16
 800ae2e:	4718      	bx	r3
 800ae30:	200001b0 	.word	0x200001b0

0800ae34 <_puts_r>:
 800ae34:	6a03      	ldr	r3, [r0, #32]
 800ae36:	b570      	push	{r4, r5, r6, lr}
 800ae38:	0005      	movs	r5, r0
 800ae3a:	000e      	movs	r6, r1
 800ae3c:	6884      	ldr	r4, [r0, #8]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d101      	bne.n	800ae46 <_puts_r+0x12>
 800ae42:	f7ff ffb3 	bl	800adac <__sinit>
 800ae46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae48:	07db      	lsls	r3, r3, #31
 800ae4a:	d405      	bmi.n	800ae58 <_puts_r+0x24>
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	059b      	lsls	r3, r3, #22
 800ae50:	d402      	bmi.n	800ae58 <_puts_r+0x24>
 800ae52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae54:	f000 fa53 	bl	800b2fe <__retarget_lock_acquire_recursive>
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	071b      	lsls	r3, r3, #28
 800ae5c:	d502      	bpl.n	800ae64 <_puts_r+0x30>
 800ae5e:	6923      	ldr	r3, [r4, #16]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d11f      	bne.n	800aea4 <_puts_r+0x70>
 800ae64:	0021      	movs	r1, r4
 800ae66:	0028      	movs	r0, r5
 800ae68:	f000 f954 	bl	800b114 <__swsetup_r>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d019      	beq.n	800aea4 <_puts_r+0x70>
 800ae70:	2501      	movs	r5, #1
 800ae72:	426d      	negs	r5, r5
 800ae74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae76:	07db      	lsls	r3, r3, #31
 800ae78:	d405      	bmi.n	800ae86 <_puts_r+0x52>
 800ae7a:	89a3      	ldrh	r3, [r4, #12]
 800ae7c:	059b      	lsls	r3, r3, #22
 800ae7e:	d402      	bmi.n	800ae86 <_puts_r+0x52>
 800ae80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae82:	f000 fa3d 	bl	800b300 <__retarget_lock_release_recursive>
 800ae86:	0028      	movs	r0, r5
 800ae88:	bd70      	pop	{r4, r5, r6, pc}
 800ae8a:	3601      	adds	r6, #1
 800ae8c:	60a3      	str	r3, [r4, #8]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	da04      	bge.n	800ae9c <_puts_r+0x68>
 800ae92:	69a2      	ldr	r2, [r4, #24]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	dc16      	bgt.n	800aec6 <_puts_r+0x92>
 800ae98:	290a      	cmp	r1, #10
 800ae9a:	d014      	beq.n	800aec6 <_puts_r+0x92>
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	6022      	str	r2, [r4, #0]
 800aea2:	7019      	strb	r1, [r3, #0]
 800aea4:	68a3      	ldr	r3, [r4, #8]
 800aea6:	7831      	ldrb	r1, [r6, #0]
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	2900      	cmp	r1, #0
 800aeac:	d1ed      	bne.n	800ae8a <_puts_r+0x56>
 800aeae:	60a3      	str	r3, [r4, #8]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	da0f      	bge.n	800aed4 <_puts_r+0xa0>
 800aeb4:	0022      	movs	r2, r4
 800aeb6:	0028      	movs	r0, r5
 800aeb8:	310a      	adds	r1, #10
 800aeba:	f000 f8e9 	bl	800b090 <__swbuf_r>
 800aebe:	3001      	adds	r0, #1
 800aec0:	d0d6      	beq.n	800ae70 <_puts_r+0x3c>
 800aec2:	250a      	movs	r5, #10
 800aec4:	e7d6      	b.n	800ae74 <_puts_r+0x40>
 800aec6:	0022      	movs	r2, r4
 800aec8:	0028      	movs	r0, r5
 800aeca:	f000 f8e1 	bl	800b090 <__swbuf_r>
 800aece:	3001      	adds	r0, #1
 800aed0:	d1e8      	bne.n	800aea4 <_puts_r+0x70>
 800aed2:	e7cd      	b.n	800ae70 <_puts_r+0x3c>
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	1c5a      	adds	r2, r3, #1
 800aed8:	6022      	str	r2, [r4, #0]
 800aeda:	220a      	movs	r2, #10
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	e7f0      	b.n	800aec2 <_puts_r+0x8e>

0800aee0 <puts>:
 800aee0:	b510      	push	{r4, lr}
 800aee2:	4b03      	ldr	r3, [pc, #12]	@ (800aef0 <puts+0x10>)
 800aee4:	0001      	movs	r1, r0
 800aee6:	6818      	ldr	r0, [r3, #0]
 800aee8:	f7ff ffa4 	bl	800ae34 <_puts_r>
 800aeec:	bd10      	pop	{r4, pc}
 800aeee:	46c0      	nop			@ (mov r8, r8)
 800aef0:	200001b0 	.word	0x200001b0

0800aef4 <siprintf>:
 800aef4:	b40e      	push	{r1, r2, r3}
 800aef6:	b500      	push	{lr}
 800aef8:	490b      	ldr	r1, [pc, #44]	@ (800af28 <siprintf+0x34>)
 800aefa:	b09c      	sub	sp, #112	@ 0x70
 800aefc:	ab1d      	add	r3, sp, #116	@ 0x74
 800aefe:	9002      	str	r0, [sp, #8]
 800af00:	9006      	str	r0, [sp, #24]
 800af02:	9107      	str	r1, [sp, #28]
 800af04:	9104      	str	r1, [sp, #16]
 800af06:	4809      	ldr	r0, [pc, #36]	@ (800af2c <siprintf+0x38>)
 800af08:	4909      	ldr	r1, [pc, #36]	@ (800af30 <siprintf+0x3c>)
 800af0a:	cb04      	ldmia	r3!, {r2}
 800af0c:	9105      	str	r1, [sp, #20]
 800af0e:	6800      	ldr	r0, [r0, #0]
 800af10:	a902      	add	r1, sp, #8
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	f002 face 	bl	800d4b4 <_svfiprintf_r>
 800af18:	2200      	movs	r2, #0
 800af1a:	9b02      	ldr	r3, [sp, #8]
 800af1c:	701a      	strb	r2, [r3, #0]
 800af1e:	b01c      	add	sp, #112	@ 0x70
 800af20:	bc08      	pop	{r3}
 800af22:	b003      	add	sp, #12
 800af24:	4718      	bx	r3
 800af26:	46c0      	nop			@ (mov r8, r8)
 800af28:	7fffffff 	.word	0x7fffffff
 800af2c:	200001b0 	.word	0x200001b0
 800af30:	ffff0208 	.word	0xffff0208

0800af34 <siscanf>:
 800af34:	b40e      	push	{r1, r2, r3}
 800af36:	b530      	push	{r4, r5, lr}
 800af38:	2381      	movs	r3, #129	@ 0x81
 800af3a:	b09c      	sub	sp, #112	@ 0x70
 800af3c:	466a      	mov	r2, sp
 800af3e:	ac1f      	add	r4, sp, #124	@ 0x7c
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	cc20      	ldmia	r4!, {r5}
 800af44:	8293      	strh	r3, [r2, #20]
 800af46:	9002      	str	r0, [sp, #8]
 800af48:	9006      	str	r0, [sp, #24]
 800af4a:	f7f5 f8e7 	bl	800011c <strlen>
 800af4e:	4b0b      	ldr	r3, [pc, #44]	@ (800af7c <siscanf+0x48>)
 800af50:	466a      	mov	r2, sp
 800af52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af54:	2300      	movs	r3, #0
 800af56:	9003      	str	r0, [sp, #12]
 800af58:	9007      	str	r0, [sp, #28]
 800af5a:	4809      	ldr	r0, [pc, #36]	@ (800af80 <siscanf+0x4c>)
 800af5c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af5e:	9314      	str	r3, [sp, #80]	@ 0x50
 800af60:	3b01      	subs	r3, #1
 800af62:	82d3      	strh	r3, [r2, #22]
 800af64:	a902      	add	r1, sp, #8
 800af66:	0023      	movs	r3, r4
 800af68:	002a      	movs	r2, r5
 800af6a:	6800      	ldr	r0, [r0, #0]
 800af6c:	9401      	str	r4, [sp, #4]
 800af6e:	f002 fbfb 	bl	800d768 <__ssvfiscanf_r>
 800af72:	b01c      	add	sp, #112	@ 0x70
 800af74:	bc30      	pop	{r4, r5}
 800af76:	bc08      	pop	{r3}
 800af78:	b003      	add	sp, #12
 800af7a:	4718      	bx	r3
 800af7c:	0800afad 	.word	0x0800afad
 800af80:	200001b0 	.word	0x200001b0

0800af84 <__sread>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	000c      	movs	r4, r1
 800af88:	250e      	movs	r5, #14
 800af8a:	5f49      	ldrsh	r1, [r1, r5]
 800af8c:	f000 f964 	bl	800b258 <_read_r>
 800af90:	2800      	cmp	r0, #0
 800af92:	db03      	blt.n	800af9c <__sread+0x18>
 800af94:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800af96:	181b      	adds	r3, r3, r0
 800af98:	6563      	str	r3, [r4, #84]	@ 0x54
 800af9a:	bd70      	pop	{r4, r5, r6, pc}
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	4a02      	ldr	r2, [pc, #8]	@ (800afa8 <__sread+0x24>)
 800afa0:	4013      	ands	r3, r2
 800afa2:	81a3      	strh	r3, [r4, #12]
 800afa4:	e7f9      	b.n	800af9a <__sread+0x16>
 800afa6:	46c0      	nop			@ (mov r8, r8)
 800afa8:	ffffefff 	.word	0xffffefff

0800afac <__seofread>:
 800afac:	2000      	movs	r0, #0
 800afae:	4770      	bx	lr

0800afb0 <__swrite>:
 800afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb2:	001f      	movs	r7, r3
 800afb4:	898b      	ldrh	r3, [r1, #12]
 800afb6:	0005      	movs	r5, r0
 800afb8:	000c      	movs	r4, r1
 800afba:	0016      	movs	r6, r2
 800afbc:	05db      	lsls	r3, r3, #23
 800afbe:	d505      	bpl.n	800afcc <__swrite+0x1c>
 800afc0:	230e      	movs	r3, #14
 800afc2:	5ec9      	ldrsh	r1, [r1, r3]
 800afc4:	2200      	movs	r2, #0
 800afc6:	2302      	movs	r3, #2
 800afc8:	f000 f932 	bl	800b230 <_lseek_r>
 800afcc:	89a3      	ldrh	r3, [r4, #12]
 800afce:	4a05      	ldr	r2, [pc, #20]	@ (800afe4 <__swrite+0x34>)
 800afd0:	0028      	movs	r0, r5
 800afd2:	4013      	ands	r3, r2
 800afd4:	81a3      	strh	r3, [r4, #12]
 800afd6:	0032      	movs	r2, r6
 800afd8:	230e      	movs	r3, #14
 800afda:	5ee1      	ldrsh	r1, [r4, r3]
 800afdc:	003b      	movs	r3, r7
 800afde:	f000 f94f 	bl	800b280 <_write_r>
 800afe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afe4:	ffffefff 	.word	0xffffefff

0800afe8 <__sseek>:
 800afe8:	b570      	push	{r4, r5, r6, lr}
 800afea:	000c      	movs	r4, r1
 800afec:	250e      	movs	r5, #14
 800afee:	5f49      	ldrsh	r1, [r1, r5]
 800aff0:	f000 f91e 	bl	800b230 <_lseek_r>
 800aff4:	89a3      	ldrh	r3, [r4, #12]
 800aff6:	1c42      	adds	r2, r0, #1
 800aff8:	d103      	bne.n	800b002 <__sseek+0x1a>
 800affa:	4a05      	ldr	r2, [pc, #20]	@ (800b010 <__sseek+0x28>)
 800affc:	4013      	ands	r3, r2
 800affe:	81a3      	strh	r3, [r4, #12]
 800b000:	bd70      	pop	{r4, r5, r6, pc}
 800b002:	2280      	movs	r2, #128	@ 0x80
 800b004:	0152      	lsls	r2, r2, #5
 800b006:	4313      	orrs	r3, r2
 800b008:	81a3      	strh	r3, [r4, #12]
 800b00a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b00c:	e7f8      	b.n	800b000 <__sseek+0x18>
 800b00e:	46c0      	nop			@ (mov r8, r8)
 800b010:	ffffefff 	.word	0xffffefff

0800b014 <__sclose>:
 800b014:	b510      	push	{r4, lr}
 800b016:	230e      	movs	r3, #14
 800b018:	5ec9      	ldrsh	r1, [r1, r3]
 800b01a:	f000 f8f7 	bl	800b20c <_close_r>
 800b01e:	bd10      	pop	{r4, pc}

0800b020 <_vsniprintf_r>:
 800b020:	b530      	push	{r4, r5, lr}
 800b022:	0014      	movs	r4, r2
 800b024:	0005      	movs	r5, r0
 800b026:	001a      	movs	r2, r3
 800b028:	b09b      	sub	sp, #108	@ 0x6c
 800b02a:	2c00      	cmp	r4, #0
 800b02c:	da05      	bge.n	800b03a <_vsniprintf_r+0x1a>
 800b02e:	238b      	movs	r3, #139	@ 0x8b
 800b030:	6003      	str	r3, [r0, #0]
 800b032:	2001      	movs	r0, #1
 800b034:	4240      	negs	r0, r0
 800b036:	b01b      	add	sp, #108	@ 0x6c
 800b038:	bd30      	pop	{r4, r5, pc}
 800b03a:	2382      	movs	r3, #130	@ 0x82
 800b03c:	4668      	mov	r0, sp
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	8183      	strh	r3, [r0, #12]
 800b042:	2300      	movs	r3, #0
 800b044:	9100      	str	r1, [sp, #0]
 800b046:	9104      	str	r1, [sp, #16]
 800b048:	429c      	cmp	r4, r3
 800b04a:	d000      	beq.n	800b04e <_vsniprintf_r+0x2e>
 800b04c:	1e63      	subs	r3, r4, #1
 800b04e:	9302      	str	r3, [sp, #8]
 800b050:	9305      	str	r3, [sp, #20]
 800b052:	2301      	movs	r3, #1
 800b054:	4669      	mov	r1, sp
 800b056:	425b      	negs	r3, r3
 800b058:	81cb      	strh	r3, [r1, #14]
 800b05a:	0028      	movs	r0, r5
 800b05c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b05e:	f002 fa29 	bl	800d4b4 <_svfiprintf_r>
 800b062:	1c43      	adds	r3, r0, #1
 800b064:	da01      	bge.n	800b06a <_vsniprintf_r+0x4a>
 800b066:	238b      	movs	r3, #139	@ 0x8b
 800b068:	602b      	str	r3, [r5, #0]
 800b06a:	2c00      	cmp	r4, #0
 800b06c:	d0e3      	beq.n	800b036 <_vsniprintf_r+0x16>
 800b06e:	2200      	movs	r2, #0
 800b070:	9b00      	ldr	r3, [sp, #0]
 800b072:	701a      	strb	r2, [r3, #0]
 800b074:	e7df      	b.n	800b036 <_vsniprintf_r+0x16>
	...

0800b078 <vsniprintf>:
 800b078:	b513      	push	{r0, r1, r4, lr}
 800b07a:	4c04      	ldr	r4, [pc, #16]	@ (800b08c <vsniprintf+0x14>)
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	0013      	movs	r3, r2
 800b080:	000a      	movs	r2, r1
 800b082:	0001      	movs	r1, r0
 800b084:	6820      	ldr	r0, [r4, #0]
 800b086:	f7ff ffcb 	bl	800b020 <_vsniprintf_r>
 800b08a:	bd16      	pop	{r1, r2, r4, pc}
 800b08c:	200001b0 	.word	0x200001b0

0800b090 <__swbuf_r>:
 800b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b092:	0006      	movs	r6, r0
 800b094:	000d      	movs	r5, r1
 800b096:	0014      	movs	r4, r2
 800b098:	2800      	cmp	r0, #0
 800b09a:	d004      	beq.n	800b0a6 <__swbuf_r+0x16>
 800b09c:	6a03      	ldr	r3, [r0, #32]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <__swbuf_r+0x16>
 800b0a2:	f7ff fe83 	bl	800adac <__sinit>
 800b0a6:	69a3      	ldr	r3, [r4, #24]
 800b0a8:	60a3      	str	r3, [r4, #8]
 800b0aa:	89a3      	ldrh	r3, [r4, #12]
 800b0ac:	071b      	lsls	r3, r3, #28
 800b0ae:	d502      	bpl.n	800b0b6 <__swbuf_r+0x26>
 800b0b0:	6923      	ldr	r3, [r4, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d109      	bne.n	800b0ca <__swbuf_r+0x3a>
 800b0b6:	0021      	movs	r1, r4
 800b0b8:	0030      	movs	r0, r6
 800b0ba:	f000 f82b 	bl	800b114 <__swsetup_r>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d003      	beq.n	800b0ca <__swbuf_r+0x3a>
 800b0c2:	2501      	movs	r5, #1
 800b0c4:	426d      	negs	r5, r5
 800b0c6:	0028      	movs	r0, r5
 800b0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ca:	6923      	ldr	r3, [r4, #16]
 800b0cc:	6820      	ldr	r0, [r4, #0]
 800b0ce:	b2ef      	uxtb	r7, r5
 800b0d0:	1ac0      	subs	r0, r0, r3
 800b0d2:	6963      	ldr	r3, [r4, #20]
 800b0d4:	b2ed      	uxtb	r5, r5
 800b0d6:	4283      	cmp	r3, r0
 800b0d8:	dc05      	bgt.n	800b0e6 <__swbuf_r+0x56>
 800b0da:	0021      	movs	r1, r4
 800b0dc:	0030      	movs	r0, r6
 800b0de:	f002 ffcf 	bl	800e080 <_fflush_r>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d1ed      	bne.n	800b0c2 <__swbuf_r+0x32>
 800b0e6:	68a3      	ldr	r3, [r4, #8]
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	60a3      	str	r3, [r4, #8]
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	1c5a      	adds	r2, r3, #1
 800b0f2:	6022      	str	r2, [r4, #0]
 800b0f4:	701f      	strb	r7, [r3, #0]
 800b0f6:	6963      	ldr	r3, [r4, #20]
 800b0f8:	4283      	cmp	r3, r0
 800b0fa:	d004      	beq.n	800b106 <__swbuf_r+0x76>
 800b0fc:	89a3      	ldrh	r3, [r4, #12]
 800b0fe:	07db      	lsls	r3, r3, #31
 800b100:	d5e1      	bpl.n	800b0c6 <__swbuf_r+0x36>
 800b102:	2d0a      	cmp	r5, #10
 800b104:	d1df      	bne.n	800b0c6 <__swbuf_r+0x36>
 800b106:	0021      	movs	r1, r4
 800b108:	0030      	movs	r0, r6
 800b10a:	f002 ffb9 	bl	800e080 <_fflush_r>
 800b10e:	2800      	cmp	r0, #0
 800b110:	d0d9      	beq.n	800b0c6 <__swbuf_r+0x36>
 800b112:	e7d6      	b.n	800b0c2 <__swbuf_r+0x32>

0800b114 <__swsetup_r>:
 800b114:	4b2d      	ldr	r3, [pc, #180]	@ (800b1cc <__swsetup_r+0xb8>)
 800b116:	b570      	push	{r4, r5, r6, lr}
 800b118:	0005      	movs	r5, r0
 800b11a:	6818      	ldr	r0, [r3, #0]
 800b11c:	000c      	movs	r4, r1
 800b11e:	2800      	cmp	r0, #0
 800b120:	d004      	beq.n	800b12c <__swsetup_r+0x18>
 800b122:	6a03      	ldr	r3, [r0, #32]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d101      	bne.n	800b12c <__swsetup_r+0x18>
 800b128:	f7ff fe40 	bl	800adac <__sinit>
 800b12c:	230c      	movs	r3, #12
 800b12e:	5ee2      	ldrsh	r2, [r4, r3]
 800b130:	0713      	lsls	r3, r2, #28
 800b132:	d423      	bmi.n	800b17c <__swsetup_r+0x68>
 800b134:	06d3      	lsls	r3, r2, #27
 800b136:	d407      	bmi.n	800b148 <__swsetup_r+0x34>
 800b138:	2309      	movs	r3, #9
 800b13a:	602b      	str	r3, [r5, #0]
 800b13c:	2340      	movs	r3, #64	@ 0x40
 800b13e:	2001      	movs	r0, #1
 800b140:	4313      	orrs	r3, r2
 800b142:	81a3      	strh	r3, [r4, #12]
 800b144:	4240      	negs	r0, r0
 800b146:	e03a      	b.n	800b1be <__swsetup_r+0xaa>
 800b148:	0752      	lsls	r2, r2, #29
 800b14a:	d513      	bpl.n	800b174 <__swsetup_r+0x60>
 800b14c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b14e:	2900      	cmp	r1, #0
 800b150:	d008      	beq.n	800b164 <__swsetup_r+0x50>
 800b152:	0023      	movs	r3, r4
 800b154:	3344      	adds	r3, #68	@ 0x44
 800b156:	4299      	cmp	r1, r3
 800b158:	d002      	beq.n	800b160 <__swsetup_r+0x4c>
 800b15a:	0028      	movs	r0, r5
 800b15c:	f000 ff72 	bl	800c044 <_free_r>
 800b160:	2300      	movs	r3, #0
 800b162:	6363      	str	r3, [r4, #52]	@ 0x34
 800b164:	2224      	movs	r2, #36	@ 0x24
 800b166:	89a3      	ldrh	r3, [r4, #12]
 800b168:	4393      	bics	r3, r2
 800b16a:	81a3      	strh	r3, [r4, #12]
 800b16c:	2300      	movs	r3, #0
 800b16e:	6063      	str	r3, [r4, #4]
 800b170:	6923      	ldr	r3, [r4, #16]
 800b172:	6023      	str	r3, [r4, #0]
 800b174:	2308      	movs	r3, #8
 800b176:	89a2      	ldrh	r2, [r4, #12]
 800b178:	4313      	orrs	r3, r2
 800b17a:	81a3      	strh	r3, [r4, #12]
 800b17c:	6923      	ldr	r3, [r4, #16]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10b      	bne.n	800b19a <__swsetup_r+0x86>
 800b182:	21a0      	movs	r1, #160	@ 0xa0
 800b184:	2280      	movs	r2, #128	@ 0x80
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	0089      	lsls	r1, r1, #2
 800b18a:	0092      	lsls	r2, r2, #2
 800b18c:	400b      	ands	r3, r1
 800b18e:	4293      	cmp	r3, r2
 800b190:	d003      	beq.n	800b19a <__swsetup_r+0x86>
 800b192:	0021      	movs	r1, r4
 800b194:	0028      	movs	r0, r5
 800b196:	f002 ffc9 	bl	800e12c <__smakebuf_r>
 800b19a:	230c      	movs	r3, #12
 800b19c:	5ee2      	ldrsh	r2, [r4, r3]
 800b19e:	2101      	movs	r1, #1
 800b1a0:	0013      	movs	r3, r2
 800b1a2:	400b      	ands	r3, r1
 800b1a4:	420a      	tst	r2, r1
 800b1a6:	d00b      	beq.n	800b1c0 <__swsetup_r+0xac>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	60a3      	str	r3, [r4, #8]
 800b1ac:	6963      	ldr	r3, [r4, #20]
 800b1ae:	425b      	negs	r3, r3
 800b1b0:	61a3      	str	r3, [r4, #24]
 800b1b2:	2000      	movs	r0, #0
 800b1b4:	6923      	ldr	r3, [r4, #16]
 800b1b6:	4283      	cmp	r3, r0
 800b1b8:	d101      	bne.n	800b1be <__swsetup_r+0xaa>
 800b1ba:	0613      	lsls	r3, r2, #24
 800b1bc:	d4be      	bmi.n	800b13c <__swsetup_r+0x28>
 800b1be:	bd70      	pop	{r4, r5, r6, pc}
 800b1c0:	0791      	lsls	r1, r2, #30
 800b1c2:	d400      	bmi.n	800b1c6 <__swsetup_r+0xb2>
 800b1c4:	6963      	ldr	r3, [r4, #20]
 800b1c6:	60a3      	str	r3, [r4, #8]
 800b1c8:	e7f3      	b.n	800b1b2 <__swsetup_r+0x9e>
 800b1ca:	46c0      	nop			@ (mov r8, r8)
 800b1cc:	200001b0 	.word	0x200001b0

0800b1d0 <memset>:
 800b1d0:	0003      	movs	r3, r0
 800b1d2:	1882      	adds	r2, r0, r2
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d100      	bne.n	800b1da <memset+0xa>
 800b1d8:	4770      	bx	lr
 800b1da:	7019      	strb	r1, [r3, #0]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	e7f9      	b.n	800b1d4 <memset+0x4>

0800b1e0 <strncmp>:
 800b1e0:	b530      	push	{r4, r5, lr}
 800b1e2:	0005      	movs	r5, r0
 800b1e4:	1e10      	subs	r0, r2, #0
 800b1e6:	d00b      	beq.n	800b200 <strncmp+0x20>
 800b1e8:	2400      	movs	r4, #0
 800b1ea:	3a01      	subs	r2, #1
 800b1ec:	5d2b      	ldrb	r3, [r5, r4]
 800b1ee:	5d08      	ldrb	r0, [r1, r4]
 800b1f0:	4283      	cmp	r3, r0
 800b1f2:	d104      	bne.n	800b1fe <strncmp+0x1e>
 800b1f4:	42a2      	cmp	r2, r4
 800b1f6:	d002      	beq.n	800b1fe <strncmp+0x1e>
 800b1f8:	3401      	adds	r4, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1f6      	bne.n	800b1ec <strncmp+0xc>
 800b1fe:	1a18      	subs	r0, r3, r0
 800b200:	bd30      	pop	{r4, r5, pc}
	...

0800b204 <_localeconv_r>:
 800b204:	4800      	ldr	r0, [pc, #0]	@ (800b208 <_localeconv_r+0x4>)
 800b206:	4770      	bx	lr
 800b208:	20000134 	.word	0x20000134

0800b20c <_close_r>:
 800b20c:	2300      	movs	r3, #0
 800b20e:	b570      	push	{r4, r5, r6, lr}
 800b210:	4d06      	ldr	r5, [pc, #24]	@ (800b22c <_close_r+0x20>)
 800b212:	0004      	movs	r4, r0
 800b214:	0008      	movs	r0, r1
 800b216:	602b      	str	r3, [r5, #0]
 800b218:	f7f8 fdfa 	bl	8003e10 <_close>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d103      	bne.n	800b228 <_close_r+0x1c>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d000      	beq.n	800b228 <_close_r+0x1c>
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	bd70      	pop	{r4, r5, r6, pc}
 800b22a:	46c0      	nop			@ (mov r8, r8)
 800b22c:	200008c8 	.word	0x200008c8

0800b230 <_lseek_r>:
 800b230:	b570      	push	{r4, r5, r6, lr}
 800b232:	0004      	movs	r4, r0
 800b234:	0008      	movs	r0, r1
 800b236:	0011      	movs	r1, r2
 800b238:	001a      	movs	r2, r3
 800b23a:	2300      	movs	r3, #0
 800b23c:	4d05      	ldr	r5, [pc, #20]	@ (800b254 <_lseek_r+0x24>)
 800b23e:	602b      	str	r3, [r5, #0]
 800b240:	f7f8 fe07 	bl	8003e52 <_lseek>
 800b244:	1c43      	adds	r3, r0, #1
 800b246:	d103      	bne.n	800b250 <_lseek_r+0x20>
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d000      	beq.n	800b250 <_lseek_r+0x20>
 800b24e:	6023      	str	r3, [r4, #0]
 800b250:	bd70      	pop	{r4, r5, r6, pc}
 800b252:	46c0      	nop			@ (mov r8, r8)
 800b254:	200008c8 	.word	0x200008c8

0800b258 <_read_r>:
 800b258:	b570      	push	{r4, r5, r6, lr}
 800b25a:	0004      	movs	r4, r0
 800b25c:	0008      	movs	r0, r1
 800b25e:	0011      	movs	r1, r2
 800b260:	001a      	movs	r2, r3
 800b262:	2300      	movs	r3, #0
 800b264:	4d05      	ldr	r5, [pc, #20]	@ (800b27c <_read_r+0x24>)
 800b266:	602b      	str	r3, [r5, #0]
 800b268:	f7f8 fd99 	bl	8003d9e <_read>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d103      	bne.n	800b278 <_read_r+0x20>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d000      	beq.n	800b278 <_read_r+0x20>
 800b276:	6023      	str	r3, [r4, #0]
 800b278:	bd70      	pop	{r4, r5, r6, pc}
 800b27a:	46c0      	nop			@ (mov r8, r8)
 800b27c:	200008c8 	.word	0x200008c8

0800b280 <_write_r>:
 800b280:	b570      	push	{r4, r5, r6, lr}
 800b282:	0004      	movs	r4, r0
 800b284:	0008      	movs	r0, r1
 800b286:	0011      	movs	r1, r2
 800b288:	001a      	movs	r2, r3
 800b28a:	2300      	movs	r3, #0
 800b28c:	4d05      	ldr	r5, [pc, #20]	@ (800b2a4 <_write_r+0x24>)
 800b28e:	602b      	str	r3, [r5, #0]
 800b290:	f7f8 fda2 	bl	8003dd8 <_write>
 800b294:	1c43      	adds	r3, r0, #1
 800b296:	d103      	bne.n	800b2a0 <_write_r+0x20>
 800b298:	682b      	ldr	r3, [r5, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d000      	beq.n	800b2a0 <_write_r+0x20>
 800b29e:	6023      	str	r3, [r4, #0]
 800b2a0:	bd70      	pop	{r4, r5, r6, pc}
 800b2a2:	46c0      	nop			@ (mov r8, r8)
 800b2a4:	200008c8 	.word	0x200008c8

0800b2a8 <__errno>:
 800b2a8:	4b01      	ldr	r3, [pc, #4]	@ (800b2b0 <__errno+0x8>)
 800b2aa:	6818      	ldr	r0, [r3, #0]
 800b2ac:	4770      	bx	lr
 800b2ae:	46c0      	nop			@ (mov r8, r8)
 800b2b0:	200001b0 	.word	0x200001b0

0800b2b4 <__libc_init_array>:
 800b2b4:	b570      	push	{r4, r5, r6, lr}
 800b2b6:	2600      	movs	r6, #0
 800b2b8:	4c0c      	ldr	r4, [pc, #48]	@ (800b2ec <__libc_init_array+0x38>)
 800b2ba:	4d0d      	ldr	r5, [pc, #52]	@ (800b2f0 <__libc_init_array+0x3c>)
 800b2bc:	1b64      	subs	r4, r4, r5
 800b2be:	10a4      	asrs	r4, r4, #2
 800b2c0:	42a6      	cmp	r6, r4
 800b2c2:	d109      	bne.n	800b2d8 <__libc_init_array+0x24>
 800b2c4:	2600      	movs	r6, #0
 800b2c6:	f003 f99b 	bl	800e600 <_init>
 800b2ca:	4c0a      	ldr	r4, [pc, #40]	@ (800b2f4 <__libc_init_array+0x40>)
 800b2cc:	4d0a      	ldr	r5, [pc, #40]	@ (800b2f8 <__libc_init_array+0x44>)
 800b2ce:	1b64      	subs	r4, r4, r5
 800b2d0:	10a4      	asrs	r4, r4, #2
 800b2d2:	42a6      	cmp	r6, r4
 800b2d4:	d105      	bne.n	800b2e2 <__libc_init_array+0x2e>
 800b2d6:	bd70      	pop	{r4, r5, r6, pc}
 800b2d8:	00b3      	lsls	r3, r6, #2
 800b2da:	58eb      	ldr	r3, [r5, r3]
 800b2dc:	4798      	blx	r3
 800b2de:	3601      	adds	r6, #1
 800b2e0:	e7ee      	b.n	800b2c0 <__libc_init_array+0xc>
 800b2e2:	00b3      	lsls	r3, r6, #2
 800b2e4:	58eb      	ldr	r3, [r5, r3]
 800b2e6:	4798      	blx	r3
 800b2e8:	3601      	adds	r6, #1
 800b2ea:	e7f2      	b.n	800b2d2 <__libc_init_array+0x1e>
 800b2ec:	0800ebb4 	.word	0x0800ebb4
 800b2f0:	0800ebb4 	.word	0x0800ebb4
 800b2f4:	0800ebb8 	.word	0x0800ebb8
 800b2f8:	0800ebb4 	.word	0x0800ebb4

0800b2fc <__retarget_lock_init_recursive>:
 800b2fc:	4770      	bx	lr

0800b2fe <__retarget_lock_acquire_recursive>:
 800b2fe:	4770      	bx	lr

0800b300 <__retarget_lock_release_recursive>:
 800b300:	4770      	bx	lr

0800b302 <memchr>:
 800b302:	b2c9      	uxtb	r1, r1
 800b304:	1882      	adds	r2, r0, r2
 800b306:	4290      	cmp	r0, r2
 800b308:	d101      	bne.n	800b30e <memchr+0xc>
 800b30a:	2000      	movs	r0, #0
 800b30c:	4770      	bx	lr
 800b30e:	7803      	ldrb	r3, [r0, #0]
 800b310:	428b      	cmp	r3, r1
 800b312:	d0fb      	beq.n	800b30c <memchr+0xa>
 800b314:	3001      	adds	r0, #1
 800b316:	e7f6      	b.n	800b306 <memchr+0x4>

0800b318 <memcpy>:
 800b318:	2300      	movs	r3, #0
 800b31a:	b510      	push	{r4, lr}
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d100      	bne.n	800b322 <memcpy+0xa>
 800b320:	bd10      	pop	{r4, pc}
 800b322:	5ccc      	ldrb	r4, [r1, r3]
 800b324:	54c4      	strb	r4, [r0, r3]
 800b326:	3301      	adds	r3, #1
 800b328:	e7f8      	b.n	800b31c <memcpy+0x4>
	...

0800b32c <nan>:
 800b32c:	2000      	movs	r0, #0
 800b32e:	4901      	ldr	r1, [pc, #4]	@ (800b334 <nan+0x8>)
 800b330:	4770      	bx	lr
 800b332:	46c0      	nop			@ (mov r8, r8)
 800b334:	7ff80000 	.word	0x7ff80000

0800b338 <nanf>:
 800b338:	4800      	ldr	r0, [pc, #0]	@ (800b33c <nanf+0x4>)
 800b33a:	4770      	bx	lr
 800b33c:	7fc00000 	.word	0x7fc00000

0800b340 <quorem>:
 800b340:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b342:	6902      	ldr	r2, [r0, #16]
 800b344:	690f      	ldr	r7, [r1, #16]
 800b346:	b087      	sub	sp, #28
 800b348:	0006      	movs	r6, r0
 800b34a:	000b      	movs	r3, r1
 800b34c:	2000      	movs	r0, #0
 800b34e:	9102      	str	r1, [sp, #8]
 800b350:	42ba      	cmp	r2, r7
 800b352:	db6d      	blt.n	800b430 <quorem+0xf0>
 800b354:	3f01      	subs	r7, #1
 800b356:	00bc      	lsls	r4, r7, #2
 800b358:	3314      	adds	r3, #20
 800b35a:	9305      	str	r3, [sp, #20]
 800b35c:	191b      	adds	r3, r3, r4
 800b35e:	9303      	str	r3, [sp, #12]
 800b360:	0033      	movs	r3, r6
 800b362:	3314      	adds	r3, #20
 800b364:	191c      	adds	r4, r3, r4
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	9304      	str	r3, [sp, #16]
 800b36c:	9b03      	ldr	r3, [sp, #12]
 800b36e:	9804      	ldr	r0, [sp, #16]
 800b370:	681d      	ldr	r5, [r3, #0]
 800b372:	3501      	adds	r5, #1
 800b374:	0029      	movs	r1, r5
 800b376:	f7f4 feed 	bl	8000154 <__udivsi3>
 800b37a:	9b04      	ldr	r3, [sp, #16]
 800b37c:	9000      	str	r0, [sp, #0]
 800b37e:	42ab      	cmp	r3, r5
 800b380:	d32b      	bcc.n	800b3da <quorem+0x9a>
 800b382:	9b05      	ldr	r3, [sp, #20]
 800b384:	9d01      	ldr	r5, [sp, #4]
 800b386:	469c      	mov	ip, r3
 800b388:	2300      	movs	r3, #0
 800b38a:	9305      	str	r3, [sp, #20]
 800b38c:	9304      	str	r3, [sp, #16]
 800b38e:	4662      	mov	r2, ip
 800b390:	ca08      	ldmia	r2!, {r3}
 800b392:	6828      	ldr	r0, [r5, #0]
 800b394:	4694      	mov	ip, r2
 800b396:	9a00      	ldr	r2, [sp, #0]
 800b398:	b299      	uxth	r1, r3
 800b39a:	4351      	muls	r1, r2
 800b39c:	9a05      	ldr	r2, [sp, #20]
 800b39e:	0c1b      	lsrs	r3, r3, #16
 800b3a0:	1889      	adds	r1, r1, r2
 800b3a2:	9a00      	ldr	r2, [sp, #0]
 800b3a4:	4353      	muls	r3, r2
 800b3a6:	0c0a      	lsrs	r2, r1, #16
 800b3a8:	189b      	adds	r3, r3, r2
 800b3aa:	0c1a      	lsrs	r2, r3, #16
 800b3ac:	b289      	uxth	r1, r1
 800b3ae:	9205      	str	r2, [sp, #20]
 800b3b0:	b282      	uxth	r2, r0
 800b3b2:	1a52      	subs	r2, r2, r1
 800b3b4:	9904      	ldr	r1, [sp, #16]
 800b3b6:	0c00      	lsrs	r0, r0, #16
 800b3b8:	1852      	adds	r2, r2, r1
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	1411      	asrs	r1, r2, #16
 800b3be:	1ac3      	subs	r3, r0, r3
 800b3c0:	185b      	adds	r3, r3, r1
 800b3c2:	1419      	asrs	r1, r3, #16
 800b3c4:	b292      	uxth	r2, r2
 800b3c6:	041b      	lsls	r3, r3, #16
 800b3c8:	431a      	orrs	r2, r3
 800b3ca:	9b03      	ldr	r3, [sp, #12]
 800b3cc:	9104      	str	r1, [sp, #16]
 800b3ce:	c504      	stmia	r5!, {r2}
 800b3d0:	4563      	cmp	r3, ip
 800b3d2:	d2dc      	bcs.n	800b38e <quorem+0x4e>
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d030      	beq.n	800b43c <quorem+0xfc>
 800b3da:	0030      	movs	r0, r6
 800b3dc:	9902      	ldr	r1, [sp, #8]
 800b3de:	f001 fd7d 	bl	800cedc <__mcmp>
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	db23      	blt.n	800b42e <quorem+0xee>
 800b3e6:	0034      	movs	r4, r6
 800b3e8:	2500      	movs	r5, #0
 800b3ea:	9902      	ldr	r1, [sp, #8]
 800b3ec:	3414      	adds	r4, #20
 800b3ee:	3114      	adds	r1, #20
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	c901      	ldmia	r1!, {r0}
 800b3f4:	9302      	str	r3, [sp, #8]
 800b3f6:	466b      	mov	r3, sp
 800b3f8:	891b      	ldrh	r3, [r3, #8]
 800b3fa:	b282      	uxth	r2, r0
 800b3fc:	1a9a      	subs	r2, r3, r2
 800b3fe:	9b02      	ldr	r3, [sp, #8]
 800b400:	1952      	adds	r2, r2, r5
 800b402:	0c00      	lsrs	r0, r0, #16
 800b404:	0c1b      	lsrs	r3, r3, #16
 800b406:	1a1b      	subs	r3, r3, r0
 800b408:	1410      	asrs	r0, r2, #16
 800b40a:	181b      	adds	r3, r3, r0
 800b40c:	141d      	asrs	r5, r3, #16
 800b40e:	b292      	uxth	r2, r2
 800b410:	041b      	lsls	r3, r3, #16
 800b412:	431a      	orrs	r2, r3
 800b414:	9b03      	ldr	r3, [sp, #12]
 800b416:	c404      	stmia	r4!, {r2}
 800b418:	428b      	cmp	r3, r1
 800b41a:	d2e9      	bcs.n	800b3f0 <quorem+0xb0>
 800b41c:	9a01      	ldr	r2, [sp, #4]
 800b41e:	00bb      	lsls	r3, r7, #2
 800b420:	18d3      	adds	r3, r2, r3
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	2a00      	cmp	r2, #0
 800b426:	d013      	beq.n	800b450 <quorem+0x110>
 800b428:	9b00      	ldr	r3, [sp, #0]
 800b42a:	3301      	adds	r3, #1
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	9800      	ldr	r0, [sp, #0]
 800b430:	b007      	add	sp, #28
 800b432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d104      	bne.n	800b444 <quorem+0x104>
 800b43a:	3f01      	subs	r7, #1
 800b43c:	9b01      	ldr	r3, [sp, #4]
 800b43e:	3c04      	subs	r4, #4
 800b440:	42a3      	cmp	r3, r4
 800b442:	d3f7      	bcc.n	800b434 <quorem+0xf4>
 800b444:	6137      	str	r7, [r6, #16]
 800b446:	e7c8      	b.n	800b3da <quorem+0x9a>
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	2a00      	cmp	r2, #0
 800b44c:	d104      	bne.n	800b458 <quorem+0x118>
 800b44e:	3f01      	subs	r7, #1
 800b450:	9a01      	ldr	r2, [sp, #4]
 800b452:	3b04      	subs	r3, #4
 800b454:	429a      	cmp	r2, r3
 800b456:	d3f7      	bcc.n	800b448 <quorem+0x108>
 800b458:	6137      	str	r7, [r6, #16]
 800b45a:	e7e5      	b.n	800b428 <quorem+0xe8>

0800b45c <_dtoa_r>:
 800b45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b45e:	0014      	movs	r4, r2
 800b460:	001d      	movs	r5, r3
 800b462:	69c6      	ldr	r6, [r0, #28]
 800b464:	b09d      	sub	sp, #116	@ 0x74
 800b466:	940a      	str	r4, [sp, #40]	@ 0x28
 800b468:	950b      	str	r5, [sp, #44]	@ 0x2c
 800b46a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800b46c:	9003      	str	r0, [sp, #12]
 800b46e:	2e00      	cmp	r6, #0
 800b470:	d10f      	bne.n	800b492 <_dtoa_r+0x36>
 800b472:	2010      	movs	r0, #16
 800b474:	f001 f98a 	bl	800c78c <malloc>
 800b478:	9b03      	ldr	r3, [sp, #12]
 800b47a:	1e02      	subs	r2, r0, #0
 800b47c:	61d8      	str	r0, [r3, #28]
 800b47e:	d104      	bne.n	800b48a <_dtoa_r+0x2e>
 800b480:	21ef      	movs	r1, #239	@ 0xef
 800b482:	4bc7      	ldr	r3, [pc, #796]	@ (800b7a0 <_dtoa_r+0x344>)
 800b484:	48c7      	ldr	r0, [pc, #796]	@ (800b7a4 <_dtoa_r+0x348>)
 800b486:	f002 ff53 	bl	800e330 <__assert_func>
 800b48a:	6046      	str	r6, [r0, #4]
 800b48c:	6086      	str	r6, [r0, #8]
 800b48e:	6006      	str	r6, [r0, #0]
 800b490:	60c6      	str	r6, [r0, #12]
 800b492:	9b03      	ldr	r3, [sp, #12]
 800b494:	69db      	ldr	r3, [r3, #28]
 800b496:	6819      	ldr	r1, [r3, #0]
 800b498:	2900      	cmp	r1, #0
 800b49a:	d00b      	beq.n	800b4b4 <_dtoa_r+0x58>
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	2301      	movs	r3, #1
 800b4a0:	4093      	lsls	r3, r2
 800b4a2:	604a      	str	r2, [r1, #4]
 800b4a4:	608b      	str	r3, [r1, #8]
 800b4a6:	9803      	ldr	r0, [sp, #12]
 800b4a8:	f001 fa82 	bl	800c9b0 <_Bfree>
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	9b03      	ldr	r3, [sp, #12]
 800b4b0:	69db      	ldr	r3, [r3, #28]
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	2d00      	cmp	r5, #0
 800b4b6:	da1e      	bge.n	800b4f6 <_dtoa_r+0x9a>
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	603b      	str	r3, [r7, #0]
 800b4bc:	006b      	lsls	r3, r5, #1
 800b4be:	085b      	lsrs	r3, r3, #1
 800b4c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4c2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b4c4:	4bb8      	ldr	r3, [pc, #736]	@ (800b7a8 <_dtoa_r+0x34c>)
 800b4c6:	4ab8      	ldr	r2, [pc, #736]	@ (800b7a8 <_dtoa_r+0x34c>)
 800b4c8:	403b      	ands	r3, r7
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d116      	bne.n	800b4fc <_dtoa_r+0xa0>
 800b4ce:	4bb7      	ldr	r3, [pc, #732]	@ (800b7ac <_dtoa_r+0x350>)
 800b4d0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	033b      	lsls	r3, r7, #12
 800b4d6:	0b1b      	lsrs	r3, r3, #12
 800b4d8:	4323      	orrs	r3, r4
 800b4da:	d101      	bne.n	800b4e0 <_dtoa_r+0x84>
 800b4dc:	f000 fd83 	bl	800bfe6 <_dtoa_r+0xb8a>
 800b4e0:	4bb3      	ldr	r3, [pc, #716]	@ (800b7b0 <_dtoa_r+0x354>)
 800b4e2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b4e4:	9308      	str	r3, [sp, #32]
 800b4e6:	2a00      	cmp	r2, #0
 800b4e8:	d002      	beq.n	800b4f0 <_dtoa_r+0x94>
 800b4ea:	4bb2      	ldr	r3, [pc, #712]	@ (800b7b4 <_dtoa_r+0x358>)
 800b4ec:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	9808      	ldr	r0, [sp, #32]
 800b4f2:	b01d      	add	sp, #116	@ 0x74
 800b4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	603b      	str	r3, [r7, #0]
 800b4fa:	e7e2      	b.n	800b4c2 <_dtoa_r+0x66>
 800b4fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b500:	9212      	str	r2, [sp, #72]	@ 0x48
 800b502:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b504:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b506:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b508:	2200      	movs	r2, #0
 800b50a:	2300      	movs	r3, #0
 800b50c:	f7f4 ffa8 	bl	8000460 <__aeabi_dcmpeq>
 800b510:	1e06      	subs	r6, r0, #0
 800b512:	d00b      	beq.n	800b52c <_dtoa_r+0xd0>
 800b514:	2301      	movs	r3, #1
 800b516:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <_dtoa_r+0xca>
 800b520:	4ba5      	ldr	r3, [pc, #660]	@ (800b7b8 <_dtoa_r+0x35c>)
 800b522:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b524:	6013      	str	r3, [r2, #0]
 800b526:	4ba5      	ldr	r3, [pc, #660]	@ (800b7bc <_dtoa_r+0x360>)
 800b528:	9308      	str	r3, [sp, #32]
 800b52a:	e7e1      	b.n	800b4f0 <_dtoa_r+0x94>
 800b52c:	ab1a      	add	r3, sp, #104	@ 0x68
 800b52e:	9301      	str	r3, [sp, #4]
 800b530:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	9803      	ldr	r0, [sp, #12]
 800b536:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b538:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b53a:	f001 fdf1 	bl	800d120 <__d2b>
 800b53e:	007a      	lsls	r2, r7, #1
 800b540:	9005      	str	r0, [sp, #20]
 800b542:	0d52      	lsrs	r2, r2, #21
 800b544:	d100      	bne.n	800b548 <_dtoa_r+0xec>
 800b546:	e07b      	b.n	800b640 <_dtoa_r+0x1e4>
 800b548:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b54a:	9618      	str	r6, [sp, #96]	@ 0x60
 800b54c:	0319      	lsls	r1, r3, #12
 800b54e:	4b9c      	ldr	r3, [pc, #624]	@ (800b7c0 <_dtoa_r+0x364>)
 800b550:	0b09      	lsrs	r1, r1, #12
 800b552:	430b      	orrs	r3, r1
 800b554:	499b      	ldr	r1, [pc, #620]	@ (800b7c4 <_dtoa_r+0x368>)
 800b556:	1857      	adds	r7, r2, r1
 800b558:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b55a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b55c:	0019      	movs	r1, r3
 800b55e:	2200      	movs	r2, #0
 800b560:	4b99      	ldr	r3, [pc, #612]	@ (800b7c8 <_dtoa_r+0x36c>)
 800b562:	f7f6 fdbd 	bl	80020e0 <__aeabi_dsub>
 800b566:	4a99      	ldr	r2, [pc, #612]	@ (800b7cc <_dtoa_r+0x370>)
 800b568:	4b99      	ldr	r3, [pc, #612]	@ (800b7d0 <_dtoa_r+0x374>)
 800b56a:	f7f6 faf1 	bl	8001b50 <__aeabi_dmul>
 800b56e:	4a99      	ldr	r2, [pc, #612]	@ (800b7d4 <_dtoa_r+0x378>)
 800b570:	4b99      	ldr	r3, [pc, #612]	@ (800b7d8 <_dtoa_r+0x37c>)
 800b572:	f7f5 fb45 	bl	8000c00 <__aeabi_dadd>
 800b576:	0004      	movs	r4, r0
 800b578:	0038      	movs	r0, r7
 800b57a:	000d      	movs	r5, r1
 800b57c:	f7f7 f9aa 	bl	80028d4 <__aeabi_i2d>
 800b580:	4a96      	ldr	r2, [pc, #600]	@ (800b7dc <_dtoa_r+0x380>)
 800b582:	4b97      	ldr	r3, [pc, #604]	@ (800b7e0 <_dtoa_r+0x384>)
 800b584:	f7f6 fae4 	bl	8001b50 <__aeabi_dmul>
 800b588:	0002      	movs	r2, r0
 800b58a:	000b      	movs	r3, r1
 800b58c:	0020      	movs	r0, r4
 800b58e:	0029      	movs	r1, r5
 800b590:	f7f5 fb36 	bl	8000c00 <__aeabi_dadd>
 800b594:	0004      	movs	r4, r0
 800b596:	000d      	movs	r5, r1
 800b598:	f7f7 f960 	bl	800285c <__aeabi_d2iz>
 800b59c:	2200      	movs	r2, #0
 800b59e:	9004      	str	r0, [sp, #16]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	0020      	movs	r0, r4
 800b5a4:	0029      	movs	r1, r5
 800b5a6:	f7f4 ff61 	bl	800046c <__aeabi_dcmplt>
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d00b      	beq.n	800b5c6 <_dtoa_r+0x16a>
 800b5ae:	9804      	ldr	r0, [sp, #16]
 800b5b0:	f7f7 f990 	bl	80028d4 <__aeabi_i2d>
 800b5b4:	002b      	movs	r3, r5
 800b5b6:	0022      	movs	r2, r4
 800b5b8:	f7f4 ff52 	bl	8000460 <__aeabi_dcmpeq>
 800b5bc:	4243      	negs	r3, r0
 800b5be:	4158      	adcs	r0, r3
 800b5c0:	9b04      	ldr	r3, [sp, #16]
 800b5c2:	1a1b      	subs	r3, r3, r0
 800b5c4:	9304      	str	r3, [sp, #16]
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5ca:	9b04      	ldr	r3, [sp, #16]
 800b5cc:	2b16      	cmp	r3, #22
 800b5ce:	d810      	bhi.n	800b5f2 <_dtoa_r+0x196>
 800b5d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b5d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b5d4:	9a04      	ldr	r2, [sp, #16]
 800b5d6:	4b83      	ldr	r3, [pc, #524]	@ (800b7e4 <_dtoa_r+0x388>)
 800b5d8:	00d2      	lsls	r2, r2, #3
 800b5da:	189b      	adds	r3, r3, r2
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	f7f4 ff44 	bl	800046c <__aeabi_dcmplt>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d047      	beq.n	800b678 <_dtoa_r+0x21c>
 800b5e8:	9b04      	ldr	r3, [sp, #16]
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	9304      	str	r3, [sp, #16]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b5f6:	9206      	str	r2, [sp, #24]
 800b5f8:	1bdb      	subs	r3, r3, r7
 800b5fa:	1e5a      	subs	r2, r3, #1
 800b5fc:	d53e      	bpl.n	800b67c <_dtoa_r+0x220>
 800b5fe:	2201      	movs	r2, #1
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	9306      	str	r3, [sp, #24]
 800b604:	2300      	movs	r3, #0
 800b606:	930d      	str	r3, [sp, #52]	@ 0x34
 800b608:	9b04      	ldr	r3, [sp, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	db38      	blt.n	800b680 <_dtoa_r+0x224>
 800b60e:	9a04      	ldr	r2, [sp, #16]
 800b610:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b612:	4694      	mov	ip, r2
 800b614:	4463      	add	r3, ip
 800b616:	930d      	str	r3, [sp, #52]	@ 0x34
 800b618:	2300      	movs	r3, #0
 800b61a:	9214      	str	r2, [sp, #80]	@ 0x50
 800b61c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b61e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b620:	2401      	movs	r4, #1
 800b622:	2b09      	cmp	r3, #9
 800b624:	d867      	bhi.n	800b6f6 <_dtoa_r+0x29a>
 800b626:	2b05      	cmp	r3, #5
 800b628:	dd02      	ble.n	800b630 <_dtoa_r+0x1d4>
 800b62a:	2400      	movs	r4, #0
 800b62c:	3b04      	subs	r3, #4
 800b62e:	9322      	str	r3, [sp, #136]	@ 0x88
 800b630:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b632:	1e98      	subs	r0, r3, #2
 800b634:	2803      	cmp	r0, #3
 800b636:	d867      	bhi.n	800b708 <_dtoa_r+0x2ac>
 800b638:	f7f4 fd78 	bl	800012c <__gnu_thumb1_case_uqi>
 800b63c:	5b383a2b 	.word	0x5b383a2b
 800b640:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b642:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800b644:	18f6      	adds	r6, r6, r3
 800b646:	4b68      	ldr	r3, [pc, #416]	@ (800b7e8 <_dtoa_r+0x38c>)
 800b648:	18f2      	adds	r2, r6, r3
 800b64a:	2a20      	cmp	r2, #32
 800b64c:	dd0f      	ble.n	800b66e <_dtoa_r+0x212>
 800b64e:	2340      	movs	r3, #64	@ 0x40
 800b650:	1a9b      	subs	r3, r3, r2
 800b652:	409f      	lsls	r7, r3
 800b654:	4b65      	ldr	r3, [pc, #404]	@ (800b7ec <_dtoa_r+0x390>)
 800b656:	0038      	movs	r0, r7
 800b658:	18f3      	adds	r3, r6, r3
 800b65a:	40dc      	lsrs	r4, r3
 800b65c:	4320      	orrs	r0, r4
 800b65e:	f7f7 f967 	bl	8002930 <__aeabi_ui2d>
 800b662:	2201      	movs	r2, #1
 800b664:	4b62      	ldr	r3, [pc, #392]	@ (800b7f0 <_dtoa_r+0x394>)
 800b666:	1e77      	subs	r7, r6, #1
 800b668:	18cb      	adds	r3, r1, r3
 800b66a:	9218      	str	r2, [sp, #96]	@ 0x60
 800b66c:	e776      	b.n	800b55c <_dtoa_r+0x100>
 800b66e:	2320      	movs	r3, #32
 800b670:	0020      	movs	r0, r4
 800b672:	1a9b      	subs	r3, r3, r2
 800b674:	4098      	lsls	r0, r3
 800b676:	e7f2      	b.n	800b65e <_dtoa_r+0x202>
 800b678:	9015      	str	r0, [sp, #84]	@ 0x54
 800b67a:	e7ba      	b.n	800b5f2 <_dtoa_r+0x196>
 800b67c:	920d      	str	r2, [sp, #52]	@ 0x34
 800b67e:	e7c3      	b.n	800b608 <_dtoa_r+0x1ac>
 800b680:	9b06      	ldr	r3, [sp, #24]
 800b682:	9a04      	ldr	r2, [sp, #16]
 800b684:	1a9b      	subs	r3, r3, r2
 800b686:	9306      	str	r3, [sp, #24]
 800b688:	4253      	negs	r3, r2
 800b68a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b68c:	2300      	movs	r3, #0
 800b68e:	9314      	str	r3, [sp, #80]	@ 0x50
 800b690:	e7c5      	b.n	800b61e <_dtoa_r+0x1c2>
 800b692:	2300      	movs	r3, #0
 800b694:	9310      	str	r3, [sp, #64]	@ 0x40
 800b696:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b698:	930e      	str	r3, [sp, #56]	@ 0x38
 800b69a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	dc13      	bgt.n	800b6c8 <_dtoa_r+0x26c>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	001a      	movs	r2, r3
 800b6a4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b6a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6a8:	9223      	str	r2, [sp, #140]	@ 0x8c
 800b6aa:	e00d      	b.n	800b6c8 <_dtoa_r+0x26c>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e7f1      	b.n	800b694 <_dtoa_r+0x238>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b6b4:	9310      	str	r3, [sp, #64]	@ 0x40
 800b6b6:	4694      	mov	ip, r2
 800b6b8:	9b04      	ldr	r3, [sp, #16]
 800b6ba:	4463      	add	r3, ip
 800b6bc:	930e      	str	r3, [sp, #56]	@ 0x38
 800b6be:	3301      	adds	r3, #1
 800b6c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	dc00      	bgt.n	800b6c8 <_dtoa_r+0x26c>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	9a03      	ldr	r2, [sp, #12]
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	69d0      	ldr	r0, [r2, #28]
 800b6ce:	2204      	movs	r2, #4
 800b6d0:	0015      	movs	r5, r2
 800b6d2:	3514      	adds	r5, #20
 800b6d4:	429d      	cmp	r5, r3
 800b6d6:	d91b      	bls.n	800b710 <_dtoa_r+0x2b4>
 800b6d8:	6041      	str	r1, [r0, #4]
 800b6da:	9803      	ldr	r0, [sp, #12]
 800b6dc:	f001 f924 	bl	800c928 <_Balloc>
 800b6e0:	9008      	str	r0, [sp, #32]
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d117      	bne.n	800b716 <_dtoa_r+0x2ba>
 800b6e6:	21b0      	movs	r1, #176	@ 0xb0
 800b6e8:	4b42      	ldr	r3, [pc, #264]	@ (800b7f4 <_dtoa_r+0x398>)
 800b6ea:	482e      	ldr	r0, [pc, #184]	@ (800b7a4 <_dtoa_r+0x348>)
 800b6ec:	9a08      	ldr	r2, [sp, #32]
 800b6ee:	31ff      	adds	r1, #255	@ 0xff
 800b6f0:	e6c9      	b.n	800b486 <_dtoa_r+0x2a>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e7dd      	b.n	800b6b2 <_dtoa_r+0x256>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9410      	str	r4, [sp, #64]	@ 0x40
 800b6fa:	9322      	str	r3, [sp, #136]	@ 0x88
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	930e      	str	r3, [sp, #56]	@ 0x38
 800b700:	9309      	str	r3, [sp, #36]	@ 0x24
 800b702:	2200      	movs	r2, #0
 800b704:	3313      	adds	r3, #19
 800b706:	e7cf      	b.n	800b6a8 <_dtoa_r+0x24c>
 800b708:	2301      	movs	r3, #1
 800b70a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b70c:	3b02      	subs	r3, #2
 800b70e:	e7f6      	b.n	800b6fe <_dtoa_r+0x2a2>
 800b710:	3101      	adds	r1, #1
 800b712:	0052      	lsls	r2, r2, #1
 800b714:	e7dc      	b.n	800b6d0 <_dtoa_r+0x274>
 800b716:	9b03      	ldr	r3, [sp, #12]
 800b718:	9a08      	ldr	r2, [sp, #32]
 800b71a:	69db      	ldr	r3, [r3, #28]
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b720:	2b0e      	cmp	r3, #14
 800b722:	d900      	bls.n	800b726 <_dtoa_r+0x2ca>
 800b724:	e0d9      	b.n	800b8da <_dtoa_r+0x47e>
 800b726:	2c00      	cmp	r4, #0
 800b728:	d100      	bne.n	800b72c <_dtoa_r+0x2d0>
 800b72a:	e0d6      	b.n	800b8da <_dtoa_r+0x47e>
 800b72c:	9b04      	ldr	r3, [sp, #16]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	dd64      	ble.n	800b7fc <_dtoa_r+0x3a0>
 800b732:	210f      	movs	r1, #15
 800b734:	9a04      	ldr	r2, [sp, #16]
 800b736:	4b2b      	ldr	r3, [pc, #172]	@ (800b7e4 <_dtoa_r+0x388>)
 800b738:	400a      	ands	r2, r1
 800b73a:	00d2      	lsls	r2, r2, #3
 800b73c:	189b      	adds	r3, r3, r2
 800b73e:	681e      	ldr	r6, [r3, #0]
 800b740:	685f      	ldr	r7, [r3, #4]
 800b742:	9b04      	ldr	r3, [sp, #16]
 800b744:	2402      	movs	r4, #2
 800b746:	111d      	asrs	r5, r3, #4
 800b748:	05db      	lsls	r3, r3, #23
 800b74a:	d50a      	bpl.n	800b762 <_dtoa_r+0x306>
 800b74c:	4b2a      	ldr	r3, [pc, #168]	@ (800b7f8 <_dtoa_r+0x39c>)
 800b74e:	400d      	ands	r5, r1
 800b750:	6a1a      	ldr	r2, [r3, #32]
 800b752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b754:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b756:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b758:	f7f5 fdb6 	bl	80012c8 <__aeabi_ddiv>
 800b75c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b75e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b760:	3401      	adds	r4, #1
 800b762:	4b25      	ldr	r3, [pc, #148]	@ (800b7f8 <_dtoa_r+0x39c>)
 800b764:	930c      	str	r3, [sp, #48]	@ 0x30
 800b766:	2d00      	cmp	r5, #0
 800b768:	d108      	bne.n	800b77c <_dtoa_r+0x320>
 800b76a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b76c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b76e:	0032      	movs	r2, r6
 800b770:	003b      	movs	r3, r7
 800b772:	f7f5 fda9 	bl	80012c8 <__aeabi_ddiv>
 800b776:	900a      	str	r0, [sp, #40]	@ 0x28
 800b778:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b77a:	e05a      	b.n	800b832 <_dtoa_r+0x3d6>
 800b77c:	2301      	movs	r3, #1
 800b77e:	421d      	tst	r5, r3
 800b780:	d009      	beq.n	800b796 <_dtoa_r+0x33a>
 800b782:	18e4      	adds	r4, r4, r3
 800b784:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b786:	0030      	movs	r0, r6
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	0039      	movs	r1, r7
 800b78e:	f7f6 f9df 	bl	8001b50 <__aeabi_dmul>
 800b792:	0006      	movs	r6, r0
 800b794:	000f      	movs	r7, r1
 800b796:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b798:	106d      	asrs	r5, r5, #1
 800b79a:	3308      	adds	r3, #8
 800b79c:	e7e2      	b.n	800b764 <_dtoa_r+0x308>
 800b79e:	46c0      	nop			@ (mov r8, r8)
 800b7a0:	0800e80c 	.word	0x0800e80c
 800b7a4:	0800e823 	.word	0x0800e823
 800b7a8:	7ff00000 	.word	0x7ff00000
 800b7ac:	0000270f 	.word	0x0000270f
 800b7b0:	0800e808 	.word	0x0800e808
 800b7b4:	0800e80b 	.word	0x0800e80b
 800b7b8:	0800eb71 	.word	0x0800eb71
 800b7bc:	0800eb70 	.word	0x0800eb70
 800b7c0:	3ff00000 	.word	0x3ff00000
 800b7c4:	fffffc01 	.word	0xfffffc01
 800b7c8:	3ff80000 	.word	0x3ff80000
 800b7cc:	636f4361 	.word	0x636f4361
 800b7d0:	3fd287a7 	.word	0x3fd287a7
 800b7d4:	8b60c8b3 	.word	0x8b60c8b3
 800b7d8:	3fc68a28 	.word	0x3fc68a28
 800b7dc:	509f79fb 	.word	0x509f79fb
 800b7e0:	3fd34413 	.word	0x3fd34413
 800b7e4:	0800e980 	.word	0x0800e980
 800b7e8:	00000432 	.word	0x00000432
 800b7ec:	00000412 	.word	0x00000412
 800b7f0:	fe100000 	.word	0xfe100000
 800b7f4:	0800e87b 	.word	0x0800e87b
 800b7f8:	0800e958 	.word	0x0800e958
 800b7fc:	9b04      	ldr	r3, [sp, #16]
 800b7fe:	2402      	movs	r4, #2
 800b800:	2b00      	cmp	r3, #0
 800b802:	d016      	beq.n	800b832 <_dtoa_r+0x3d6>
 800b804:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b806:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b808:	220f      	movs	r2, #15
 800b80a:	425d      	negs	r5, r3
 800b80c:	402a      	ands	r2, r5
 800b80e:	4bd7      	ldr	r3, [pc, #860]	@ (800bb6c <_dtoa_r+0x710>)
 800b810:	00d2      	lsls	r2, r2, #3
 800b812:	189b      	adds	r3, r3, r2
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	f7f6 f99a 	bl	8001b50 <__aeabi_dmul>
 800b81c:	2701      	movs	r7, #1
 800b81e:	2300      	movs	r3, #0
 800b820:	900a      	str	r0, [sp, #40]	@ 0x28
 800b822:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b824:	4ed2      	ldr	r6, [pc, #840]	@ (800bb70 <_dtoa_r+0x714>)
 800b826:	112d      	asrs	r5, r5, #4
 800b828:	2d00      	cmp	r5, #0
 800b82a:	d000      	beq.n	800b82e <_dtoa_r+0x3d2>
 800b82c:	e0ba      	b.n	800b9a4 <_dtoa_r+0x548>
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d1a1      	bne.n	800b776 <_dtoa_r+0x31a>
 800b832:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b834:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b836:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d100      	bne.n	800b83e <_dtoa_r+0x3e2>
 800b83c:	e0bd      	b.n	800b9ba <_dtoa_r+0x55e>
 800b83e:	2200      	movs	r2, #0
 800b840:	0030      	movs	r0, r6
 800b842:	0039      	movs	r1, r7
 800b844:	4bcb      	ldr	r3, [pc, #812]	@ (800bb74 <_dtoa_r+0x718>)
 800b846:	f7f4 fe11 	bl	800046c <__aeabi_dcmplt>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d100      	bne.n	800b850 <_dtoa_r+0x3f4>
 800b84e:	e0b4      	b.n	800b9ba <_dtoa_r+0x55e>
 800b850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b852:	2b00      	cmp	r3, #0
 800b854:	d100      	bne.n	800b858 <_dtoa_r+0x3fc>
 800b856:	e0b0      	b.n	800b9ba <_dtoa_r+0x55e>
 800b858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	dd39      	ble.n	800b8d2 <_dtoa_r+0x476>
 800b85e:	9b04      	ldr	r3, [sp, #16]
 800b860:	2200      	movs	r2, #0
 800b862:	3b01      	subs	r3, #1
 800b864:	930c      	str	r3, [sp, #48]	@ 0x30
 800b866:	0030      	movs	r0, r6
 800b868:	4bc3      	ldr	r3, [pc, #780]	@ (800bb78 <_dtoa_r+0x71c>)
 800b86a:	0039      	movs	r1, r7
 800b86c:	f7f6 f970 	bl	8001b50 <__aeabi_dmul>
 800b870:	900a      	str	r0, [sp, #40]	@ 0x28
 800b872:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b876:	3401      	adds	r4, #1
 800b878:	0020      	movs	r0, r4
 800b87a:	9311      	str	r3, [sp, #68]	@ 0x44
 800b87c:	f7f7 f82a 	bl	80028d4 <__aeabi_i2d>
 800b880:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b882:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b884:	f7f6 f964 	bl	8001b50 <__aeabi_dmul>
 800b888:	4bbc      	ldr	r3, [pc, #752]	@ (800bb7c <_dtoa_r+0x720>)
 800b88a:	2200      	movs	r2, #0
 800b88c:	f7f5 f9b8 	bl	8000c00 <__aeabi_dadd>
 800b890:	4bbb      	ldr	r3, [pc, #748]	@ (800bb80 <_dtoa_r+0x724>)
 800b892:	0006      	movs	r6, r0
 800b894:	18cf      	adds	r7, r1, r3
 800b896:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d000      	beq.n	800b89e <_dtoa_r+0x442>
 800b89c:	e091      	b.n	800b9c2 <_dtoa_r+0x566>
 800b89e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b8a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	4bb7      	ldr	r3, [pc, #732]	@ (800bb84 <_dtoa_r+0x728>)
 800b8a6:	f7f6 fc1b 	bl	80020e0 <__aeabi_dsub>
 800b8aa:	0032      	movs	r2, r6
 800b8ac:	003b      	movs	r3, r7
 800b8ae:	0004      	movs	r4, r0
 800b8b0:	000d      	movs	r5, r1
 800b8b2:	f7f4 fdef 	bl	8000494 <__aeabi_dcmpgt>
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d000      	beq.n	800b8bc <_dtoa_r+0x460>
 800b8ba:	e29d      	b.n	800bdf8 <_dtoa_r+0x99c>
 800b8bc:	2180      	movs	r1, #128	@ 0x80
 800b8be:	0609      	lsls	r1, r1, #24
 800b8c0:	187b      	adds	r3, r7, r1
 800b8c2:	0032      	movs	r2, r6
 800b8c4:	0020      	movs	r0, r4
 800b8c6:	0029      	movs	r1, r5
 800b8c8:	f7f4 fdd0 	bl	800046c <__aeabi_dcmplt>
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	d000      	beq.n	800b8d2 <_dtoa_r+0x476>
 800b8d0:	e130      	b.n	800bb34 <_dtoa_r+0x6d8>
 800b8d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b8d4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800b8d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8d8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b8da:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	da00      	bge.n	800b8e2 <_dtoa_r+0x486>
 800b8e0:	e177      	b.n	800bbd2 <_dtoa_r+0x776>
 800b8e2:	9a04      	ldr	r2, [sp, #16]
 800b8e4:	2a0e      	cmp	r2, #14
 800b8e6:	dd00      	ble.n	800b8ea <_dtoa_r+0x48e>
 800b8e8:	e173      	b.n	800bbd2 <_dtoa_r+0x776>
 800b8ea:	4ba0      	ldr	r3, [pc, #640]	@ (800bb6c <_dtoa_r+0x710>)
 800b8ec:	00d2      	lsls	r2, r2, #3
 800b8ee:	189b      	adds	r3, r3, r2
 800b8f0:	685c      	ldr	r4, [r3, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	9306      	str	r3, [sp, #24]
 800b8f6:	9407      	str	r4, [sp, #28]
 800b8f8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	da03      	bge.n	800b906 <_dtoa_r+0x4aa>
 800b8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b900:	2b00      	cmp	r3, #0
 800b902:	dc00      	bgt.n	800b906 <_dtoa_r+0x4aa>
 800b904:	e106      	b.n	800bb14 <_dtoa_r+0x6b8>
 800b906:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b908:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b90a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b90c:	9d08      	ldr	r5, [sp, #32]
 800b90e:	3b01      	subs	r3, #1
 800b910:	195b      	adds	r3, r3, r5
 800b912:	930a      	str	r3, [sp, #40]	@ 0x28
 800b914:	9a06      	ldr	r2, [sp, #24]
 800b916:	9b07      	ldr	r3, [sp, #28]
 800b918:	0030      	movs	r0, r6
 800b91a:	0039      	movs	r1, r7
 800b91c:	f7f5 fcd4 	bl	80012c8 <__aeabi_ddiv>
 800b920:	f7f6 ff9c 	bl	800285c <__aeabi_d2iz>
 800b924:	9009      	str	r0, [sp, #36]	@ 0x24
 800b926:	f7f6 ffd5 	bl	80028d4 <__aeabi_i2d>
 800b92a:	9a06      	ldr	r2, [sp, #24]
 800b92c:	9b07      	ldr	r3, [sp, #28]
 800b92e:	f7f6 f90f 	bl	8001b50 <__aeabi_dmul>
 800b932:	0002      	movs	r2, r0
 800b934:	000b      	movs	r3, r1
 800b936:	0030      	movs	r0, r6
 800b938:	0039      	movs	r1, r7
 800b93a:	f7f6 fbd1 	bl	80020e0 <__aeabi_dsub>
 800b93e:	002b      	movs	r3, r5
 800b940:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b942:	3501      	adds	r5, #1
 800b944:	3230      	adds	r2, #48	@ 0x30
 800b946:	701a      	strb	r2, [r3, #0]
 800b948:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b94a:	002c      	movs	r4, r5
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d000      	beq.n	800b952 <_dtoa_r+0x4f6>
 800b950:	e131      	b.n	800bbb6 <_dtoa_r+0x75a>
 800b952:	0002      	movs	r2, r0
 800b954:	000b      	movs	r3, r1
 800b956:	f7f5 f953 	bl	8000c00 <__aeabi_dadd>
 800b95a:	9a06      	ldr	r2, [sp, #24]
 800b95c:	9b07      	ldr	r3, [sp, #28]
 800b95e:	0006      	movs	r6, r0
 800b960:	000f      	movs	r7, r1
 800b962:	f7f4 fd97 	bl	8000494 <__aeabi_dcmpgt>
 800b966:	2800      	cmp	r0, #0
 800b968:	d000      	beq.n	800b96c <_dtoa_r+0x510>
 800b96a:	e10f      	b.n	800bb8c <_dtoa_r+0x730>
 800b96c:	9a06      	ldr	r2, [sp, #24]
 800b96e:	9b07      	ldr	r3, [sp, #28]
 800b970:	0030      	movs	r0, r6
 800b972:	0039      	movs	r1, r7
 800b974:	f7f4 fd74 	bl	8000460 <__aeabi_dcmpeq>
 800b978:	2800      	cmp	r0, #0
 800b97a:	d003      	beq.n	800b984 <_dtoa_r+0x528>
 800b97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b97e:	07dd      	lsls	r5, r3, #31
 800b980:	d500      	bpl.n	800b984 <_dtoa_r+0x528>
 800b982:	e103      	b.n	800bb8c <_dtoa_r+0x730>
 800b984:	9905      	ldr	r1, [sp, #20]
 800b986:	9803      	ldr	r0, [sp, #12]
 800b988:	f001 f812 	bl	800c9b0 <_Bfree>
 800b98c:	2300      	movs	r3, #0
 800b98e:	7023      	strb	r3, [r4, #0]
 800b990:	9b04      	ldr	r3, [sp, #16]
 800b992:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b994:	3301      	adds	r3, #1
 800b996:	6013      	str	r3, [r2, #0]
 800b998:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d100      	bne.n	800b9a0 <_dtoa_r+0x544>
 800b99e:	e5a7      	b.n	800b4f0 <_dtoa_r+0x94>
 800b9a0:	601c      	str	r4, [r3, #0]
 800b9a2:	e5a5      	b.n	800b4f0 <_dtoa_r+0x94>
 800b9a4:	423d      	tst	r5, r7
 800b9a6:	d005      	beq.n	800b9b4 <_dtoa_r+0x558>
 800b9a8:	6832      	ldr	r2, [r6, #0]
 800b9aa:	6873      	ldr	r3, [r6, #4]
 800b9ac:	f7f6 f8d0 	bl	8001b50 <__aeabi_dmul>
 800b9b0:	003b      	movs	r3, r7
 800b9b2:	3401      	adds	r4, #1
 800b9b4:	106d      	asrs	r5, r5, #1
 800b9b6:	3608      	adds	r6, #8
 800b9b8:	e736      	b.n	800b828 <_dtoa_r+0x3cc>
 800b9ba:	9b04      	ldr	r3, [sp, #16]
 800b9bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9c0:	e75a      	b.n	800b878 <_dtoa_r+0x41c>
 800b9c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b9c4:	4b69      	ldr	r3, [pc, #420]	@ (800bb6c <_dtoa_r+0x710>)
 800b9c6:	3a01      	subs	r2, #1
 800b9c8:	00d2      	lsls	r2, r2, #3
 800b9ca:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b9cc:	189b      	adds	r3, r3, r2
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	2900      	cmp	r1, #0
 800b9d4:	d04c      	beq.n	800ba70 <_dtoa_r+0x614>
 800b9d6:	2000      	movs	r0, #0
 800b9d8:	496b      	ldr	r1, [pc, #428]	@ (800bb88 <_dtoa_r+0x72c>)
 800b9da:	f7f5 fc75 	bl	80012c8 <__aeabi_ddiv>
 800b9de:	0032      	movs	r2, r6
 800b9e0:	003b      	movs	r3, r7
 800b9e2:	f7f6 fb7d 	bl	80020e0 <__aeabi_dsub>
 800b9e6:	9a08      	ldr	r2, [sp, #32]
 800b9e8:	0006      	movs	r6, r0
 800b9ea:	4694      	mov	ip, r2
 800b9ec:	000f      	movs	r7, r1
 800b9ee:	9b08      	ldr	r3, [sp, #32]
 800b9f0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b9f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b9f4:	4463      	add	r3, ip
 800b9f6:	9311      	str	r3, [sp, #68]	@ 0x44
 800b9f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b9fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9fc:	f7f6 ff2e 	bl	800285c <__aeabi_d2iz>
 800ba00:	0005      	movs	r5, r0
 800ba02:	f7f6 ff67 	bl	80028d4 <__aeabi_i2d>
 800ba06:	0002      	movs	r2, r0
 800ba08:	000b      	movs	r3, r1
 800ba0a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba0e:	f7f6 fb67 	bl	80020e0 <__aeabi_dsub>
 800ba12:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba14:	3530      	adds	r5, #48	@ 0x30
 800ba16:	1c5c      	adds	r4, r3, #1
 800ba18:	701d      	strb	r5, [r3, #0]
 800ba1a:	0032      	movs	r2, r6
 800ba1c:	003b      	movs	r3, r7
 800ba1e:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba20:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ba22:	f7f4 fd23 	bl	800046c <__aeabi_dcmplt>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d16a      	bne.n	800bb00 <_dtoa_r+0x6a4>
 800ba2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba2e:	2000      	movs	r0, #0
 800ba30:	4950      	ldr	r1, [pc, #320]	@ (800bb74 <_dtoa_r+0x718>)
 800ba32:	f7f6 fb55 	bl	80020e0 <__aeabi_dsub>
 800ba36:	0032      	movs	r2, r6
 800ba38:	003b      	movs	r3, r7
 800ba3a:	f7f4 fd17 	bl	800046c <__aeabi_dcmplt>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d000      	beq.n	800ba44 <_dtoa_r+0x5e8>
 800ba42:	e0a5      	b.n	800bb90 <_dtoa_r+0x734>
 800ba44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba46:	42a3      	cmp	r3, r4
 800ba48:	d100      	bne.n	800ba4c <_dtoa_r+0x5f0>
 800ba4a:	e742      	b.n	800b8d2 <_dtoa_r+0x476>
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	0030      	movs	r0, r6
 800ba50:	0039      	movs	r1, r7
 800ba52:	4b49      	ldr	r3, [pc, #292]	@ (800bb78 <_dtoa_r+0x71c>)
 800ba54:	f7f6 f87c 	bl	8001b50 <__aeabi_dmul>
 800ba58:	2200      	movs	r2, #0
 800ba5a:	0006      	movs	r6, r0
 800ba5c:	000f      	movs	r7, r1
 800ba5e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba62:	4b45      	ldr	r3, [pc, #276]	@ (800bb78 <_dtoa_r+0x71c>)
 800ba64:	f7f6 f874 	bl	8001b50 <__aeabi_dmul>
 800ba68:	9416      	str	r4, [sp, #88]	@ 0x58
 800ba6a:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba6c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ba6e:	e7c3      	b.n	800b9f8 <_dtoa_r+0x59c>
 800ba70:	0030      	movs	r0, r6
 800ba72:	0039      	movs	r1, r7
 800ba74:	f7f6 f86c 	bl	8001b50 <__aeabi_dmul>
 800ba78:	9d08      	ldr	r5, [sp, #32]
 800ba7a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ba7c:	002b      	movs	r3, r5
 800ba7e:	4694      	mov	ip, r2
 800ba80:	9016      	str	r0, [sp, #88]	@ 0x58
 800ba82:	9117      	str	r1, [sp, #92]	@ 0x5c
 800ba84:	4463      	add	r3, ip
 800ba86:	9319      	str	r3, [sp, #100]	@ 0x64
 800ba88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba8c:	f7f6 fee6 	bl	800285c <__aeabi_d2iz>
 800ba90:	0004      	movs	r4, r0
 800ba92:	f7f6 ff1f 	bl	80028d4 <__aeabi_i2d>
 800ba96:	000b      	movs	r3, r1
 800ba98:	0002      	movs	r2, r0
 800ba9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba9e:	f7f6 fb1f 	bl	80020e0 <__aeabi_dsub>
 800baa2:	3430      	adds	r4, #48	@ 0x30
 800baa4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baa6:	702c      	strb	r4, [r5, #0]
 800baa8:	3501      	adds	r5, #1
 800baaa:	0006      	movs	r6, r0
 800baac:	000f      	movs	r7, r1
 800baae:	42ab      	cmp	r3, r5
 800bab0:	d129      	bne.n	800bb06 <_dtoa_r+0x6aa>
 800bab2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800bab4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800bab6:	9b08      	ldr	r3, [sp, #32]
 800bab8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800baba:	469c      	mov	ip, r3
 800babc:	2200      	movs	r2, #0
 800babe:	4b32      	ldr	r3, [pc, #200]	@ (800bb88 <_dtoa_r+0x72c>)
 800bac0:	4464      	add	r4, ip
 800bac2:	f7f5 f89d 	bl	8000c00 <__aeabi_dadd>
 800bac6:	0002      	movs	r2, r0
 800bac8:	000b      	movs	r3, r1
 800baca:	0030      	movs	r0, r6
 800bacc:	0039      	movs	r1, r7
 800bace:	f7f4 fce1 	bl	8000494 <__aeabi_dcmpgt>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d15c      	bne.n	800bb90 <_dtoa_r+0x734>
 800bad6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bad8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bada:	2000      	movs	r0, #0
 800badc:	492a      	ldr	r1, [pc, #168]	@ (800bb88 <_dtoa_r+0x72c>)
 800bade:	f7f6 faff 	bl	80020e0 <__aeabi_dsub>
 800bae2:	0002      	movs	r2, r0
 800bae4:	000b      	movs	r3, r1
 800bae6:	0030      	movs	r0, r6
 800bae8:	0039      	movs	r1, r7
 800baea:	f7f4 fcbf 	bl	800046c <__aeabi_dcmplt>
 800baee:	2800      	cmp	r0, #0
 800baf0:	d100      	bne.n	800baf4 <_dtoa_r+0x698>
 800baf2:	e6ee      	b.n	800b8d2 <_dtoa_r+0x476>
 800baf4:	0023      	movs	r3, r4
 800baf6:	3c01      	subs	r4, #1
 800baf8:	7822      	ldrb	r2, [r4, #0]
 800bafa:	2a30      	cmp	r2, #48	@ 0x30
 800bafc:	d0fa      	beq.n	800baf4 <_dtoa_r+0x698>
 800bafe:	001c      	movs	r4, r3
 800bb00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb02:	9304      	str	r3, [sp, #16]
 800bb04:	e73e      	b.n	800b984 <_dtoa_r+0x528>
 800bb06:	2200      	movs	r2, #0
 800bb08:	4b1b      	ldr	r3, [pc, #108]	@ (800bb78 <_dtoa_r+0x71c>)
 800bb0a:	f7f6 f821 	bl	8001b50 <__aeabi_dmul>
 800bb0e:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb10:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bb12:	e7b9      	b.n	800ba88 <_dtoa_r+0x62c>
 800bb14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d10c      	bne.n	800bb34 <_dtoa_r+0x6d8>
 800bb1a:	9806      	ldr	r0, [sp, #24]
 800bb1c:	9907      	ldr	r1, [sp, #28]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	4b18      	ldr	r3, [pc, #96]	@ (800bb84 <_dtoa_r+0x728>)
 800bb22:	f7f6 f815 	bl	8001b50 <__aeabi_dmul>
 800bb26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb2a:	f7f4 fcbd 	bl	80004a8 <__aeabi_dcmpge>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d100      	bne.n	800bb34 <_dtoa_r+0x6d8>
 800bb32:	e164      	b.n	800bdfe <_dtoa_r+0x9a2>
 800bb34:	2600      	movs	r6, #0
 800bb36:	0037      	movs	r7, r6
 800bb38:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb3a:	9c08      	ldr	r4, [sp, #32]
 800bb3c:	43db      	mvns	r3, r3
 800bb3e:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb40:	2300      	movs	r3, #0
 800bb42:	9304      	str	r3, [sp, #16]
 800bb44:	0031      	movs	r1, r6
 800bb46:	9803      	ldr	r0, [sp, #12]
 800bb48:	f000 ff32 	bl	800c9b0 <_Bfree>
 800bb4c:	2f00      	cmp	r7, #0
 800bb4e:	d0d7      	beq.n	800bb00 <_dtoa_r+0x6a4>
 800bb50:	9b04      	ldr	r3, [sp, #16]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d005      	beq.n	800bb62 <_dtoa_r+0x706>
 800bb56:	42bb      	cmp	r3, r7
 800bb58:	d003      	beq.n	800bb62 <_dtoa_r+0x706>
 800bb5a:	0019      	movs	r1, r3
 800bb5c:	9803      	ldr	r0, [sp, #12]
 800bb5e:	f000 ff27 	bl	800c9b0 <_Bfree>
 800bb62:	0039      	movs	r1, r7
 800bb64:	9803      	ldr	r0, [sp, #12]
 800bb66:	f000 ff23 	bl	800c9b0 <_Bfree>
 800bb6a:	e7c9      	b.n	800bb00 <_dtoa_r+0x6a4>
 800bb6c:	0800e980 	.word	0x0800e980
 800bb70:	0800e958 	.word	0x0800e958
 800bb74:	3ff00000 	.word	0x3ff00000
 800bb78:	40240000 	.word	0x40240000
 800bb7c:	401c0000 	.word	0x401c0000
 800bb80:	fcc00000 	.word	0xfcc00000
 800bb84:	40140000 	.word	0x40140000
 800bb88:	3fe00000 	.word	0x3fe00000
 800bb8c:	9b04      	ldr	r3, [sp, #16]
 800bb8e:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb90:	0023      	movs	r3, r4
 800bb92:	001c      	movs	r4, r3
 800bb94:	3b01      	subs	r3, #1
 800bb96:	781a      	ldrb	r2, [r3, #0]
 800bb98:	2a39      	cmp	r2, #57	@ 0x39
 800bb9a:	d108      	bne.n	800bbae <_dtoa_r+0x752>
 800bb9c:	9a08      	ldr	r2, [sp, #32]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d1f7      	bne.n	800bb92 <_dtoa_r+0x736>
 800bba2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bba4:	9908      	ldr	r1, [sp, #32]
 800bba6:	3201      	adds	r2, #1
 800bba8:	920c      	str	r2, [sp, #48]	@ 0x30
 800bbaa:	2230      	movs	r2, #48	@ 0x30
 800bbac:	700a      	strb	r2, [r1, #0]
 800bbae:	781a      	ldrb	r2, [r3, #0]
 800bbb0:	3201      	adds	r2, #1
 800bbb2:	701a      	strb	r2, [r3, #0]
 800bbb4:	e7a4      	b.n	800bb00 <_dtoa_r+0x6a4>
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4bc6      	ldr	r3, [pc, #792]	@ (800bed4 <_dtoa_r+0xa78>)
 800bbba:	f7f5 ffc9 	bl	8001b50 <__aeabi_dmul>
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	0006      	movs	r6, r0
 800bbc4:	000f      	movs	r7, r1
 800bbc6:	f7f4 fc4b 	bl	8000460 <__aeabi_dcmpeq>
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d100      	bne.n	800bbd0 <_dtoa_r+0x774>
 800bbce:	e6a1      	b.n	800b914 <_dtoa_r+0x4b8>
 800bbd0:	e6d8      	b.n	800b984 <_dtoa_r+0x528>
 800bbd2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800bbd4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bbd6:	9c06      	ldr	r4, [sp, #24]
 800bbd8:	2f00      	cmp	r7, #0
 800bbda:	d014      	beq.n	800bc06 <_dtoa_r+0x7aa>
 800bbdc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bbde:	2a01      	cmp	r2, #1
 800bbe0:	dd00      	ble.n	800bbe4 <_dtoa_r+0x788>
 800bbe2:	e0c8      	b.n	800bd76 <_dtoa_r+0x91a>
 800bbe4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800bbe6:	2a00      	cmp	r2, #0
 800bbe8:	d100      	bne.n	800bbec <_dtoa_r+0x790>
 800bbea:	e0be      	b.n	800bd6a <_dtoa_r+0x90e>
 800bbec:	4aba      	ldr	r2, [pc, #744]	@ (800bed8 <_dtoa_r+0xa7c>)
 800bbee:	189b      	adds	r3, r3, r2
 800bbf0:	9a06      	ldr	r2, [sp, #24]
 800bbf2:	2101      	movs	r1, #1
 800bbf4:	18d2      	adds	r2, r2, r3
 800bbf6:	9206      	str	r2, [sp, #24]
 800bbf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bbfa:	9803      	ldr	r0, [sp, #12]
 800bbfc:	18d3      	adds	r3, r2, r3
 800bbfe:	930d      	str	r3, [sp, #52]	@ 0x34
 800bc00:	f000 ffda 	bl	800cbb8 <__i2b>
 800bc04:	0007      	movs	r7, r0
 800bc06:	2c00      	cmp	r4, #0
 800bc08:	d00e      	beq.n	800bc28 <_dtoa_r+0x7cc>
 800bc0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	dd0b      	ble.n	800bc28 <_dtoa_r+0x7cc>
 800bc10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bc12:	0023      	movs	r3, r4
 800bc14:	4294      	cmp	r4, r2
 800bc16:	dd00      	ble.n	800bc1a <_dtoa_r+0x7be>
 800bc18:	0013      	movs	r3, r2
 800bc1a:	9a06      	ldr	r2, [sp, #24]
 800bc1c:	1ae4      	subs	r4, r4, r3
 800bc1e:	1ad2      	subs	r2, r2, r3
 800bc20:	9206      	str	r2, [sp, #24]
 800bc22:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	930d      	str	r3, [sp, #52]	@ 0x34
 800bc28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d01f      	beq.n	800bc6e <_dtoa_r+0x812>
 800bc2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d100      	bne.n	800bc36 <_dtoa_r+0x7da>
 800bc34:	e0b5      	b.n	800bda2 <_dtoa_r+0x946>
 800bc36:	2d00      	cmp	r5, #0
 800bc38:	d010      	beq.n	800bc5c <_dtoa_r+0x800>
 800bc3a:	0039      	movs	r1, r7
 800bc3c:	002a      	movs	r2, r5
 800bc3e:	9803      	ldr	r0, [sp, #12]
 800bc40:	f001 f884 	bl	800cd4c <__pow5mult>
 800bc44:	9a05      	ldr	r2, [sp, #20]
 800bc46:	0001      	movs	r1, r0
 800bc48:	0007      	movs	r7, r0
 800bc4a:	9803      	ldr	r0, [sp, #12]
 800bc4c:	f000 ffcc 	bl	800cbe8 <__multiply>
 800bc50:	0006      	movs	r6, r0
 800bc52:	9905      	ldr	r1, [sp, #20]
 800bc54:	9803      	ldr	r0, [sp, #12]
 800bc56:	f000 feab 	bl	800c9b0 <_Bfree>
 800bc5a:	9605      	str	r6, [sp, #20]
 800bc5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc5e:	1b5a      	subs	r2, r3, r5
 800bc60:	42ab      	cmp	r3, r5
 800bc62:	d004      	beq.n	800bc6e <_dtoa_r+0x812>
 800bc64:	9905      	ldr	r1, [sp, #20]
 800bc66:	9803      	ldr	r0, [sp, #12]
 800bc68:	f001 f870 	bl	800cd4c <__pow5mult>
 800bc6c:	9005      	str	r0, [sp, #20]
 800bc6e:	2101      	movs	r1, #1
 800bc70:	9803      	ldr	r0, [sp, #12]
 800bc72:	f000 ffa1 	bl	800cbb8 <__i2b>
 800bc76:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bc78:	0006      	movs	r6, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d100      	bne.n	800bc80 <_dtoa_r+0x824>
 800bc7e:	e1bc      	b.n	800bffa <_dtoa_r+0xb9e>
 800bc80:	001a      	movs	r2, r3
 800bc82:	0001      	movs	r1, r0
 800bc84:	9803      	ldr	r0, [sp, #12]
 800bc86:	f001 f861 	bl	800cd4c <__pow5mult>
 800bc8a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bc8c:	0006      	movs	r6, r0
 800bc8e:	2500      	movs	r5, #0
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	dc16      	bgt.n	800bcc2 <_dtoa_r+0x866>
 800bc94:	2500      	movs	r5, #0
 800bc96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc98:	42ab      	cmp	r3, r5
 800bc9a:	d10e      	bne.n	800bcba <_dtoa_r+0x85e>
 800bc9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc9e:	031b      	lsls	r3, r3, #12
 800bca0:	42ab      	cmp	r3, r5
 800bca2:	d10a      	bne.n	800bcba <_dtoa_r+0x85e>
 800bca4:	4b8d      	ldr	r3, [pc, #564]	@ (800bedc <_dtoa_r+0xa80>)
 800bca6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bca8:	4213      	tst	r3, r2
 800bcaa:	d006      	beq.n	800bcba <_dtoa_r+0x85e>
 800bcac:	9b06      	ldr	r3, [sp, #24]
 800bcae:	3501      	adds	r5, #1
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	9306      	str	r3, [sp, #24]
 800bcb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	930d      	str	r3, [sp, #52]	@ 0x34
 800bcba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bcbc:	2001      	movs	r0, #1
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d008      	beq.n	800bcd4 <_dtoa_r+0x878>
 800bcc2:	6933      	ldr	r3, [r6, #16]
 800bcc4:	3303      	adds	r3, #3
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	18f3      	adds	r3, r6, r3
 800bcca:	6858      	ldr	r0, [r3, #4]
 800bccc:	f000 ff24 	bl	800cb18 <__hi0bits>
 800bcd0:	2320      	movs	r3, #32
 800bcd2:	1a18      	subs	r0, r3, r0
 800bcd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcd6:	1818      	adds	r0, r3, r0
 800bcd8:	0002      	movs	r2, r0
 800bcda:	231f      	movs	r3, #31
 800bcdc:	401a      	ands	r2, r3
 800bcde:	4218      	tst	r0, r3
 800bce0:	d065      	beq.n	800bdae <_dtoa_r+0x952>
 800bce2:	3301      	adds	r3, #1
 800bce4:	1a9b      	subs	r3, r3, r2
 800bce6:	2b04      	cmp	r3, #4
 800bce8:	dd5d      	ble.n	800bda6 <_dtoa_r+0x94a>
 800bcea:	231c      	movs	r3, #28
 800bcec:	1a9b      	subs	r3, r3, r2
 800bcee:	9a06      	ldr	r2, [sp, #24]
 800bcf0:	18e4      	adds	r4, r4, r3
 800bcf2:	18d2      	adds	r2, r2, r3
 800bcf4:	9206      	str	r2, [sp, #24]
 800bcf6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcf8:	18d3      	adds	r3, r2, r3
 800bcfa:	930d      	str	r3, [sp, #52]	@ 0x34
 800bcfc:	9b06      	ldr	r3, [sp, #24]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	dd05      	ble.n	800bd0e <_dtoa_r+0x8b2>
 800bd02:	001a      	movs	r2, r3
 800bd04:	9905      	ldr	r1, [sp, #20]
 800bd06:	9803      	ldr	r0, [sp, #12]
 800bd08:	f001 f87c 	bl	800ce04 <__lshift>
 800bd0c:	9005      	str	r0, [sp, #20]
 800bd0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	dd05      	ble.n	800bd20 <_dtoa_r+0x8c4>
 800bd14:	0031      	movs	r1, r6
 800bd16:	001a      	movs	r2, r3
 800bd18:	9803      	ldr	r0, [sp, #12]
 800bd1a:	f001 f873 	bl	800ce04 <__lshift>
 800bd1e:	0006      	movs	r6, r0
 800bd20:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d045      	beq.n	800bdb2 <_dtoa_r+0x956>
 800bd26:	0031      	movs	r1, r6
 800bd28:	9805      	ldr	r0, [sp, #20]
 800bd2a:	f001 f8d7 	bl	800cedc <__mcmp>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	da3f      	bge.n	800bdb2 <_dtoa_r+0x956>
 800bd32:	9b04      	ldr	r3, [sp, #16]
 800bd34:	220a      	movs	r2, #10
 800bd36:	3b01      	subs	r3, #1
 800bd38:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd3a:	9905      	ldr	r1, [sp, #20]
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	9803      	ldr	r0, [sp, #12]
 800bd40:	f000 fe5a 	bl	800c9f8 <__multadd>
 800bd44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd46:	9005      	str	r0, [sp, #20]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d100      	bne.n	800bd4e <_dtoa_r+0x8f2>
 800bd4c:	e15c      	b.n	800c008 <_dtoa_r+0xbac>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	0039      	movs	r1, r7
 800bd52:	220a      	movs	r2, #10
 800bd54:	9803      	ldr	r0, [sp, #12]
 800bd56:	f000 fe4f 	bl	800c9f8 <__multadd>
 800bd5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd5c:	0007      	movs	r7, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	dc55      	bgt.n	800be0e <_dtoa_r+0x9b2>
 800bd62:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	dc2d      	bgt.n	800bdc4 <_dtoa_r+0x968>
 800bd68:	e051      	b.n	800be0e <_dtoa_r+0x9b2>
 800bd6a:	2336      	movs	r3, #54	@ 0x36
 800bd6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bd6e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bd70:	9c06      	ldr	r4, [sp, #24]
 800bd72:	1a9b      	subs	r3, r3, r2
 800bd74:	e73c      	b.n	800bbf0 <_dtoa_r+0x794>
 800bd76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd78:	1e5d      	subs	r5, r3, #1
 800bd7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd7c:	42ab      	cmp	r3, r5
 800bd7e:	db08      	blt.n	800bd92 <_dtoa_r+0x936>
 800bd80:	1b5d      	subs	r5, r3, r5
 800bd82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd84:	9c06      	ldr	r4, [sp, #24]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	db00      	blt.n	800bd8c <_dtoa_r+0x930>
 800bd8a:	e731      	b.n	800bbf0 <_dtoa_r+0x794>
 800bd8c:	1ae4      	subs	r4, r4, r3
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e72e      	b.n	800bbf0 <_dtoa_r+0x794>
 800bd92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd94:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bd96:	1aeb      	subs	r3, r5, r3
 800bd98:	18d3      	adds	r3, r2, r3
 800bd9a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800bd9c:	9314      	str	r3, [sp, #80]	@ 0x50
 800bd9e:	2500      	movs	r5, #0
 800bda0:	e7ef      	b.n	800bd82 <_dtoa_r+0x926>
 800bda2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bda4:	e75e      	b.n	800bc64 <_dtoa_r+0x808>
 800bda6:	2b04      	cmp	r3, #4
 800bda8:	d0a8      	beq.n	800bcfc <_dtoa_r+0x8a0>
 800bdaa:	331c      	adds	r3, #28
 800bdac:	e79f      	b.n	800bcee <_dtoa_r+0x892>
 800bdae:	0013      	movs	r3, r2
 800bdb0:	e7fb      	b.n	800bdaa <_dtoa_r+0x94e>
 800bdb2:	9b04      	ldr	r3, [sp, #16]
 800bdb4:	930c      	str	r3, [sp, #48]	@ 0x30
 800bdb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb8:	930e      	str	r3, [sp, #56]	@ 0x38
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	dc23      	bgt.n	800be06 <_dtoa_r+0x9aa>
 800bdbe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	dd20      	ble.n	800be06 <_dtoa_r+0x9aa>
 800bdc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d000      	beq.n	800bdcc <_dtoa_r+0x970>
 800bdca:	e6b5      	b.n	800bb38 <_dtoa_r+0x6dc>
 800bdcc:	0031      	movs	r1, r6
 800bdce:	2205      	movs	r2, #5
 800bdd0:	9803      	ldr	r0, [sp, #12]
 800bdd2:	f000 fe11 	bl	800c9f8 <__multadd>
 800bdd6:	0006      	movs	r6, r0
 800bdd8:	0001      	movs	r1, r0
 800bdda:	9805      	ldr	r0, [sp, #20]
 800bddc:	f001 f87e 	bl	800cedc <__mcmp>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	dc00      	bgt.n	800bde6 <_dtoa_r+0x98a>
 800bde4:	e6a8      	b.n	800bb38 <_dtoa_r+0x6dc>
 800bde6:	9b08      	ldr	r3, [sp, #32]
 800bde8:	9a08      	ldr	r2, [sp, #32]
 800bdea:	1c5c      	adds	r4, r3, #1
 800bdec:	2331      	movs	r3, #49	@ 0x31
 800bdee:	7013      	strb	r3, [r2, #0]
 800bdf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	930c      	str	r3, [sp, #48]	@ 0x30
 800bdf6:	e6a3      	b.n	800bb40 <_dtoa_r+0x6e4>
 800bdf8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bdfa:	0037      	movs	r7, r6
 800bdfc:	e7f3      	b.n	800bde6 <_dtoa_r+0x98a>
 800bdfe:	9b04      	ldr	r3, [sp, #16]
 800be00:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800be02:	930c      	str	r3, [sp, #48]	@ 0x30
 800be04:	e7f9      	b.n	800bdfa <_dtoa_r+0x99e>
 800be06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d100      	bne.n	800be0e <_dtoa_r+0x9b2>
 800be0c:	e100      	b.n	800c010 <_dtoa_r+0xbb4>
 800be0e:	2c00      	cmp	r4, #0
 800be10:	dd05      	ble.n	800be1e <_dtoa_r+0x9c2>
 800be12:	0039      	movs	r1, r7
 800be14:	0022      	movs	r2, r4
 800be16:	9803      	ldr	r0, [sp, #12]
 800be18:	f000 fff4 	bl	800ce04 <__lshift>
 800be1c:	0007      	movs	r7, r0
 800be1e:	0038      	movs	r0, r7
 800be20:	2d00      	cmp	r5, #0
 800be22:	d018      	beq.n	800be56 <_dtoa_r+0x9fa>
 800be24:	6879      	ldr	r1, [r7, #4]
 800be26:	9803      	ldr	r0, [sp, #12]
 800be28:	f000 fd7e 	bl	800c928 <_Balloc>
 800be2c:	1e04      	subs	r4, r0, #0
 800be2e:	d105      	bne.n	800be3c <_dtoa_r+0x9e0>
 800be30:	0022      	movs	r2, r4
 800be32:	4b2b      	ldr	r3, [pc, #172]	@ (800bee0 <_dtoa_r+0xa84>)
 800be34:	482b      	ldr	r0, [pc, #172]	@ (800bee4 <_dtoa_r+0xa88>)
 800be36:	492c      	ldr	r1, [pc, #176]	@ (800bee8 <_dtoa_r+0xa8c>)
 800be38:	f7ff fb25 	bl	800b486 <_dtoa_r+0x2a>
 800be3c:	0039      	movs	r1, r7
 800be3e:	693a      	ldr	r2, [r7, #16]
 800be40:	310c      	adds	r1, #12
 800be42:	3202      	adds	r2, #2
 800be44:	0092      	lsls	r2, r2, #2
 800be46:	300c      	adds	r0, #12
 800be48:	f7ff fa66 	bl	800b318 <memcpy>
 800be4c:	2201      	movs	r2, #1
 800be4e:	0021      	movs	r1, r4
 800be50:	9803      	ldr	r0, [sp, #12]
 800be52:	f000 ffd7 	bl	800ce04 <__lshift>
 800be56:	9b08      	ldr	r3, [sp, #32]
 800be58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be5a:	9306      	str	r3, [sp, #24]
 800be5c:	3b01      	subs	r3, #1
 800be5e:	189b      	adds	r3, r3, r2
 800be60:	2201      	movs	r2, #1
 800be62:	9704      	str	r7, [sp, #16]
 800be64:	0007      	movs	r7, r0
 800be66:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be6a:	4013      	ands	r3, r2
 800be6c:	930e      	str	r3, [sp, #56]	@ 0x38
 800be6e:	0031      	movs	r1, r6
 800be70:	9805      	ldr	r0, [sp, #20]
 800be72:	f7ff fa65 	bl	800b340 <quorem>
 800be76:	9904      	ldr	r1, [sp, #16]
 800be78:	0005      	movs	r5, r0
 800be7a:	900a      	str	r0, [sp, #40]	@ 0x28
 800be7c:	9805      	ldr	r0, [sp, #20]
 800be7e:	f001 f82d 	bl	800cedc <__mcmp>
 800be82:	003a      	movs	r2, r7
 800be84:	900d      	str	r0, [sp, #52]	@ 0x34
 800be86:	0031      	movs	r1, r6
 800be88:	9803      	ldr	r0, [sp, #12]
 800be8a:	f001 f843 	bl	800cf14 <__mdiff>
 800be8e:	2201      	movs	r2, #1
 800be90:	68c3      	ldr	r3, [r0, #12]
 800be92:	0004      	movs	r4, r0
 800be94:	3530      	adds	r5, #48	@ 0x30
 800be96:	9209      	str	r2, [sp, #36]	@ 0x24
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d104      	bne.n	800bea6 <_dtoa_r+0xa4a>
 800be9c:	0001      	movs	r1, r0
 800be9e:	9805      	ldr	r0, [sp, #20]
 800bea0:	f001 f81c 	bl	800cedc <__mcmp>
 800bea4:	9009      	str	r0, [sp, #36]	@ 0x24
 800bea6:	0021      	movs	r1, r4
 800bea8:	9803      	ldr	r0, [sp, #12]
 800beaa:	f000 fd81 	bl	800c9b0 <_Bfree>
 800beae:	9b06      	ldr	r3, [sp, #24]
 800beb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800beb2:	1c5c      	adds	r4, r3, #1
 800beb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800beb6:	4313      	orrs	r3, r2
 800beb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800beba:	4313      	orrs	r3, r2
 800bebc:	d116      	bne.n	800beec <_dtoa_r+0xa90>
 800bebe:	2d39      	cmp	r5, #57	@ 0x39
 800bec0:	d02f      	beq.n	800bf22 <_dtoa_r+0xac6>
 800bec2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	dd01      	ble.n	800becc <_dtoa_r+0xa70>
 800bec8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800beca:	3531      	adds	r5, #49	@ 0x31
 800becc:	9b06      	ldr	r3, [sp, #24]
 800bece:	701d      	strb	r5, [r3, #0]
 800bed0:	e638      	b.n	800bb44 <_dtoa_r+0x6e8>
 800bed2:	46c0      	nop			@ (mov r8, r8)
 800bed4:	40240000 	.word	0x40240000
 800bed8:	00000433 	.word	0x00000433
 800bedc:	7ff00000 	.word	0x7ff00000
 800bee0:	0800e87b 	.word	0x0800e87b
 800bee4:	0800e823 	.word	0x0800e823
 800bee8:	000002ef 	.word	0x000002ef
 800beec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800beee:	2b00      	cmp	r3, #0
 800bef0:	db04      	blt.n	800befc <_dtoa_r+0xaa0>
 800bef2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bef4:	4313      	orrs	r3, r2
 800bef6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bef8:	4313      	orrs	r3, r2
 800befa:	d11e      	bne.n	800bf3a <_dtoa_r+0xade>
 800befc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800befe:	2b00      	cmp	r3, #0
 800bf00:	dde4      	ble.n	800becc <_dtoa_r+0xa70>
 800bf02:	9905      	ldr	r1, [sp, #20]
 800bf04:	2201      	movs	r2, #1
 800bf06:	9803      	ldr	r0, [sp, #12]
 800bf08:	f000 ff7c 	bl	800ce04 <__lshift>
 800bf0c:	0031      	movs	r1, r6
 800bf0e:	9005      	str	r0, [sp, #20]
 800bf10:	f000 ffe4 	bl	800cedc <__mcmp>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	dc02      	bgt.n	800bf1e <_dtoa_r+0xac2>
 800bf18:	d1d8      	bne.n	800becc <_dtoa_r+0xa70>
 800bf1a:	07eb      	lsls	r3, r5, #31
 800bf1c:	d5d6      	bpl.n	800becc <_dtoa_r+0xa70>
 800bf1e:	2d39      	cmp	r5, #57	@ 0x39
 800bf20:	d1d2      	bne.n	800bec8 <_dtoa_r+0xa6c>
 800bf22:	2339      	movs	r3, #57	@ 0x39
 800bf24:	9a06      	ldr	r2, [sp, #24]
 800bf26:	7013      	strb	r3, [r2, #0]
 800bf28:	0023      	movs	r3, r4
 800bf2a:	001c      	movs	r4, r3
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	781a      	ldrb	r2, [r3, #0]
 800bf30:	2a39      	cmp	r2, #57	@ 0x39
 800bf32:	d04f      	beq.n	800bfd4 <_dtoa_r+0xb78>
 800bf34:	3201      	adds	r2, #1
 800bf36:	701a      	strb	r2, [r3, #0]
 800bf38:	e604      	b.n	800bb44 <_dtoa_r+0x6e8>
 800bf3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	dd03      	ble.n	800bf48 <_dtoa_r+0xaec>
 800bf40:	2d39      	cmp	r5, #57	@ 0x39
 800bf42:	d0ee      	beq.n	800bf22 <_dtoa_r+0xac6>
 800bf44:	3501      	adds	r5, #1
 800bf46:	e7c1      	b.n	800becc <_dtoa_r+0xa70>
 800bf48:	9b06      	ldr	r3, [sp, #24]
 800bf4a:	9a06      	ldr	r2, [sp, #24]
 800bf4c:	701d      	strb	r5, [r3, #0]
 800bf4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d02a      	beq.n	800bfaa <_dtoa_r+0xb4e>
 800bf54:	2300      	movs	r3, #0
 800bf56:	220a      	movs	r2, #10
 800bf58:	9905      	ldr	r1, [sp, #20]
 800bf5a:	9803      	ldr	r0, [sp, #12]
 800bf5c:	f000 fd4c 	bl	800c9f8 <__multadd>
 800bf60:	9b04      	ldr	r3, [sp, #16]
 800bf62:	9005      	str	r0, [sp, #20]
 800bf64:	42bb      	cmp	r3, r7
 800bf66:	d109      	bne.n	800bf7c <_dtoa_r+0xb20>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	220a      	movs	r2, #10
 800bf6c:	9904      	ldr	r1, [sp, #16]
 800bf6e:	9803      	ldr	r0, [sp, #12]
 800bf70:	f000 fd42 	bl	800c9f8 <__multadd>
 800bf74:	9004      	str	r0, [sp, #16]
 800bf76:	0007      	movs	r7, r0
 800bf78:	9406      	str	r4, [sp, #24]
 800bf7a:	e778      	b.n	800be6e <_dtoa_r+0xa12>
 800bf7c:	9904      	ldr	r1, [sp, #16]
 800bf7e:	2300      	movs	r3, #0
 800bf80:	220a      	movs	r2, #10
 800bf82:	9803      	ldr	r0, [sp, #12]
 800bf84:	f000 fd38 	bl	800c9f8 <__multadd>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	9004      	str	r0, [sp, #16]
 800bf8c:	220a      	movs	r2, #10
 800bf8e:	0039      	movs	r1, r7
 800bf90:	9803      	ldr	r0, [sp, #12]
 800bf92:	f000 fd31 	bl	800c9f8 <__multadd>
 800bf96:	e7ee      	b.n	800bf76 <_dtoa_r+0xb1a>
 800bf98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf9a:	2401      	movs	r4, #1
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	dd00      	ble.n	800bfa2 <_dtoa_r+0xb46>
 800bfa0:	001c      	movs	r4, r3
 800bfa2:	9b08      	ldr	r3, [sp, #32]
 800bfa4:	191c      	adds	r4, r3, r4
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	9304      	str	r3, [sp, #16]
 800bfaa:	9905      	ldr	r1, [sp, #20]
 800bfac:	2201      	movs	r2, #1
 800bfae:	9803      	ldr	r0, [sp, #12]
 800bfb0:	f000 ff28 	bl	800ce04 <__lshift>
 800bfb4:	0031      	movs	r1, r6
 800bfb6:	9005      	str	r0, [sp, #20]
 800bfb8:	f000 ff90 	bl	800cedc <__mcmp>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	dcb3      	bgt.n	800bf28 <_dtoa_r+0xacc>
 800bfc0:	d101      	bne.n	800bfc6 <_dtoa_r+0xb6a>
 800bfc2:	07ed      	lsls	r5, r5, #31
 800bfc4:	d4b0      	bmi.n	800bf28 <_dtoa_r+0xacc>
 800bfc6:	0023      	movs	r3, r4
 800bfc8:	001c      	movs	r4, r3
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	781a      	ldrb	r2, [r3, #0]
 800bfce:	2a30      	cmp	r2, #48	@ 0x30
 800bfd0:	d0fa      	beq.n	800bfc8 <_dtoa_r+0xb6c>
 800bfd2:	e5b7      	b.n	800bb44 <_dtoa_r+0x6e8>
 800bfd4:	9a08      	ldr	r2, [sp, #32]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d1a7      	bne.n	800bf2a <_dtoa_r+0xace>
 800bfda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bfdc:	3301      	adds	r3, #1
 800bfde:	930c      	str	r3, [sp, #48]	@ 0x30
 800bfe0:	2331      	movs	r3, #49	@ 0x31
 800bfe2:	7013      	strb	r3, [r2, #0]
 800bfe4:	e5ae      	b.n	800bb44 <_dtoa_r+0x6e8>
 800bfe6:	4b15      	ldr	r3, [pc, #84]	@ (800c03c <_dtoa_r+0xbe0>)
 800bfe8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800bfea:	9308      	str	r3, [sp, #32]
 800bfec:	4b14      	ldr	r3, [pc, #80]	@ (800c040 <_dtoa_r+0xbe4>)
 800bfee:	2a00      	cmp	r2, #0
 800bff0:	d001      	beq.n	800bff6 <_dtoa_r+0xb9a>
 800bff2:	f7ff fa7b 	bl	800b4ec <_dtoa_r+0x90>
 800bff6:	f7ff fa7b 	bl	800b4f0 <_dtoa_r+0x94>
 800bffa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	dc00      	bgt.n	800c002 <_dtoa_r+0xba6>
 800c000:	e648      	b.n	800bc94 <_dtoa_r+0x838>
 800c002:	2001      	movs	r0, #1
 800c004:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c006:	e665      	b.n	800bcd4 <_dtoa_r+0x878>
 800c008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	dc00      	bgt.n	800c010 <_dtoa_r+0xbb4>
 800c00e:	e6d6      	b.n	800bdbe <_dtoa_r+0x962>
 800c010:	2400      	movs	r4, #0
 800c012:	0031      	movs	r1, r6
 800c014:	9805      	ldr	r0, [sp, #20]
 800c016:	f7ff f993 	bl	800b340 <quorem>
 800c01a:	9b08      	ldr	r3, [sp, #32]
 800c01c:	3030      	adds	r0, #48	@ 0x30
 800c01e:	5518      	strb	r0, [r3, r4]
 800c020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c022:	3401      	adds	r4, #1
 800c024:	0005      	movs	r5, r0
 800c026:	429c      	cmp	r4, r3
 800c028:	dab6      	bge.n	800bf98 <_dtoa_r+0xb3c>
 800c02a:	2300      	movs	r3, #0
 800c02c:	220a      	movs	r2, #10
 800c02e:	9905      	ldr	r1, [sp, #20]
 800c030:	9803      	ldr	r0, [sp, #12]
 800c032:	f000 fce1 	bl	800c9f8 <__multadd>
 800c036:	9005      	str	r0, [sp, #20]
 800c038:	e7eb      	b.n	800c012 <_dtoa_r+0xbb6>
 800c03a:	46c0      	nop			@ (mov r8, r8)
 800c03c:	0800e7ff 	.word	0x0800e7ff
 800c040:	0800e807 	.word	0x0800e807

0800c044 <_free_r>:
 800c044:	b570      	push	{r4, r5, r6, lr}
 800c046:	0005      	movs	r5, r0
 800c048:	1e0c      	subs	r4, r1, #0
 800c04a:	d010      	beq.n	800c06e <_free_r+0x2a>
 800c04c:	3c04      	subs	r4, #4
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	da00      	bge.n	800c056 <_free_r+0x12>
 800c054:	18e4      	adds	r4, r4, r3
 800c056:	0028      	movs	r0, r5
 800c058:	f000 fc56 	bl	800c908 <__malloc_lock>
 800c05c:	4a1d      	ldr	r2, [pc, #116]	@ (800c0d4 <_free_r+0x90>)
 800c05e:	6813      	ldr	r3, [r2, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d105      	bne.n	800c070 <_free_r+0x2c>
 800c064:	6063      	str	r3, [r4, #4]
 800c066:	6014      	str	r4, [r2, #0]
 800c068:	0028      	movs	r0, r5
 800c06a:	f000 fc55 	bl	800c918 <__malloc_unlock>
 800c06e:	bd70      	pop	{r4, r5, r6, pc}
 800c070:	42a3      	cmp	r3, r4
 800c072:	d908      	bls.n	800c086 <_free_r+0x42>
 800c074:	6820      	ldr	r0, [r4, #0]
 800c076:	1821      	adds	r1, r4, r0
 800c078:	428b      	cmp	r3, r1
 800c07a:	d1f3      	bne.n	800c064 <_free_r+0x20>
 800c07c:	6819      	ldr	r1, [r3, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	1809      	adds	r1, r1, r0
 800c082:	6021      	str	r1, [r4, #0]
 800c084:	e7ee      	b.n	800c064 <_free_r+0x20>
 800c086:	001a      	movs	r2, r3
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d001      	beq.n	800c092 <_free_r+0x4e>
 800c08e:	42a3      	cmp	r3, r4
 800c090:	d9f9      	bls.n	800c086 <_free_r+0x42>
 800c092:	6811      	ldr	r1, [r2, #0]
 800c094:	1850      	adds	r0, r2, r1
 800c096:	42a0      	cmp	r0, r4
 800c098:	d10b      	bne.n	800c0b2 <_free_r+0x6e>
 800c09a:	6820      	ldr	r0, [r4, #0]
 800c09c:	1809      	adds	r1, r1, r0
 800c09e:	1850      	adds	r0, r2, r1
 800c0a0:	6011      	str	r1, [r2, #0]
 800c0a2:	4283      	cmp	r3, r0
 800c0a4:	d1e0      	bne.n	800c068 <_free_r+0x24>
 800c0a6:	6818      	ldr	r0, [r3, #0]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	1841      	adds	r1, r0, r1
 800c0ac:	6011      	str	r1, [r2, #0]
 800c0ae:	6053      	str	r3, [r2, #4]
 800c0b0:	e7da      	b.n	800c068 <_free_r+0x24>
 800c0b2:	42a0      	cmp	r0, r4
 800c0b4:	d902      	bls.n	800c0bc <_free_r+0x78>
 800c0b6:	230c      	movs	r3, #12
 800c0b8:	602b      	str	r3, [r5, #0]
 800c0ba:	e7d5      	b.n	800c068 <_free_r+0x24>
 800c0bc:	6820      	ldr	r0, [r4, #0]
 800c0be:	1821      	adds	r1, r4, r0
 800c0c0:	428b      	cmp	r3, r1
 800c0c2:	d103      	bne.n	800c0cc <_free_r+0x88>
 800c0c4:	6819      	ldr	r1, [r3, #0]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	1809      	adds	r1, r1, r0
 800c0ca:	6021      	str	r1, [r4, #0]
 800c0cc:	6063      	str	r3, [r4, #4]
 800c0ce:	6054      	str	r4, [r2, #4]
 800c0d0:	e7ca      	b.n	800c068 <_free_r+0x24>
 800c0d2:	46c0      	nop			@ (mov r8, r8)
 800c0d4:	200008d4 	.word	0x200008d4

0800c0d8 <rshift>:
 800c0d8:	0002      	movs	r2, r0
 800c0da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0dc:	6904      	ldr	r4, [r0, #16]
 800c0de:	b085      	sub	sp, #20
 800c0e0:	3214      	adds	r2, #20
 800c0e2:	114b      	asrs	r3, r1, #5
 800c0e4:	0016      	movs	r6, r2
 800c0e6:	9302      	str	r3, [sp, #8]
 800c0e8:	429c      	cmp	r4, r3
 800c0ea:	dd31      	ble.n	800c150 <rshift+0x78>
 800c0ec:	261f      	movs	r6, #31
 800c0ee:	000f      	movs	r7, r1
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	00a5      	lsls	r5, r4, #2
 800c0f4:	18d3      	adds	r3, r2, r3
 800c0f6:	4037      	ands	r7, r6
 800c0f8:	1955      	adds	r5, r2, r5
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	9701      	str	r7, [sp, #4]
 800c0fe:	4231      	tst	r1, r6
 800c100:	d10d      	bne.n	800c11e <rshift+0x46>
 800c102:	0016      	movs	r6, r2
 800c104:	0019      	movs	r1, r3
 800c106:	428d      	cmp	r5, r1
 800c108:	d836      	bhi.n	800c178 <rshift+0xa0>
 800c10a:	9b00      	ldr	r3, [sp, #0]
 800c10c:	2600      	movs	r6, #0
 800c10e:	3b03      	subs	r3, #3
 800c110:	429d      	cmp	r5, r3
 800c112:	d302      	bcc.n	800c11a <rshift+0x42>
 800c114:	9b02      	ldr	r3, [sp, #8]
 800c116:	1ae4      	subs	r4, r4, r3
 800c118:	00a6      	lsls	r6, r4, #2
 800c11a:	1996      	adds	r6, r2, r6
 800c11c:	e018      	b.n	800c150 <rshift+0x78>
 800c11e:	2120      	movs	r1, #32
 800c120:	9e01      	ldr	r6, [sp, #4]
 800c122:	9f01      	ldr	r7, [sp, #4]
 800c124:	1b89      	subs	r1, r1, r6
 800c126:	9e00      	ldr	r6, [sp, #0]
 800c128:	9103      	str	r1, [sp, #12]
 800c12a:	ce02      	ldmia	r6!, {r1}
 800c12c:	4694      	mov	ip, r2
 800c12e:	40f9      	lsrs	r1, r7
 800c130:	42b5      	cmp	r5, r6
 800c132:	d816      	bhi.n	800c162 <rshift+0x8a>
 800c134:	9b00      	ldr	r3, [sp, #0]
 800c136:	2600      	movs	r6, #0
 800c138:	3301      	adds	r3, #1
 800c13a:	429d      	cmp	r5, r3
 800c13c:	d303      	bcc.n	800c146 <rshift+0x6e>
 800c13e:	9b02      	ldr	r3, [sp, #8]
 800c140:	1ae4      	subs	r4, r4, r3
 800c142:	00a6      	lsls	r6, r4, #2
 800c144:	3e04      	subs	r6, #4
 800c146:	1996      	adds	r6, r2, r6
 800c148:	6031      	str	r1, [r6, #0]
 800c14a:	2900      	cmp	r1, #0
 800c14c:	d000      	beq.n	800c150 <rshift+0x78>
 800c14e:	3604      	adds	r6, #4
 800c150:	1ab1      	subs	r1, r6, r2
 800c152:	1089      	asrs	r1, r1, #2
 800c154:	6101      	str	r1, [r0, #16]
 800c156:	4296      	cmp	r6, r2
 800c158:	d101      	bne.n	800c15e <rshift+0x86>
 800c15a:	2300      	movs	r3, #0
 800c15c:	6143      	str	r3, [r0, #20]
 800c15e:	b005      	add	sp, #20
 800c160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c162:	6837      	ldr	r7, [r6, #0]
 800c164:	9b03      	ldr	r3, [sp, #12]
 800c166:	409f      	lsls	r7, r3
 800c168:	430f      	orrs	r7, r1
 800c16a:	4661      	mov	r1, ip
 800c16c:	c180      	stmia	r1!, {r7}
 800c16e:	468c      	mov	ip, r1
 800c170:	9b01      	ldr	r3, [sp, #4]
 800c172:	ce02      	ldmia	r6!, {r1}
 800c174:	40d9      	lsrs	r1, r3
 800c176:	e7db      	b.n	800c130 <rshift+0x58>
 800c178:	c980      	ldmia	r1!, {r7}
 800c17a:	c680      	stmia	r6!, {r7}
 800c17c:	e7c3      	b.n	800c106 <rshift+0x2e>

0800c17e <__hexdig_fun>:
 800c17e:	0002      	movs	r2, r0
 800c180:	3a30      	subs	r2, #48	@ 0x30
 800c182:	0003      	movs	r3, r0
 800c184:	2a09      	cmp	r2, #9
 800c186:	d802      	bhi.n	800c18e <__hexdig_fun+0x10>
 800c188:	3b20      	subs	r3, #32
 800c18a:	b2d8      	uxtb	r0, r3
 800c18c:	4770      	bx	lr
 800c18e:	0002      	movs	r2, r0
 800c190:	3a61      	subs	r2, #97	@ 0x61
 800c192:	2a05      	cmp	r2, #5
 800c194:	d801      	bhi.n	800c19a <__hexdig_fun+0x1c>
 800c196:	3b47      	subs	r3, #71	@ 0x47
 800c198:	e7f7      	b.n	800c18a <__hexdig_fun+0xc>
 800c19a:	001a      	movs	r2, r3
 800c19c:	3a41      	subs	r2, #65	@ 0x41
 800c19e:	2000      	movs	r0, #0
 800c1a0:	2a05      	cmp	r2, #5
 800c1a2:	d8f3      	bhi.n	800c18c <__hexdig_fun+0xe>
 800c1a4:	3b27      	subs	r3, #39	@ 0x27
 800c1a6:	e7f0      	b.n	800c18a <__hexdig_fun+0xc>

0800c1a8 <__gethex>:
 800c1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1aa:	b089      	sub	sp, #36	@ 0x24
 800c1ac:	9307      	str	r3, [sp, #28]
 800c1ae:	680b      	ldr	r3, [r1, #0]
 800c1b0:	9201      	str	r2, [sp, #4]
 800c1b2:	9003      	str	r0, [sp, #12]
 800c1b4:	9106      	str	r1, [sp, #24]
 800c1b6:	1c9a      	adds	r2, r3, #2
 800c1b8:	0011      	movs	r1, r2
 800c1ba:	3201      	adds	r2, #1
 800c1bc:	1e50      	subs	r0, r2, #1
 800c1be:	7800      	ldrb	r0, [r0, #0]
 800c1c0:	2830      	cmp	r0, #48	@ 0x30
 800c1c2:	d0f9      	beq.n	800c1b8 <__gethex+0x10>
 800c1c4:	1acb      	subs	r3, r1, r3
 800c1c6:	3b02      	subs	r3, #2
 800c1c8:	9305      	str	r3, [sp, #20]
 800c1ca:	9100      	str	r1, [sp, #0]
 800c1cc:	f7ff ffd7 	bl	800c17e <__hexdig_fun>
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	001d      	movs	r5, r3
 800c1d4:	9302      	str	r3, [sp, #8]
 800c1d6:	4298      	cmp	r0, r3
 800c1d8:	d11e      	bne.n	800c218 <__gethex+0x70>
 800c1da:	2201      	movs	r2, #1
 800c1dc:	49a6      	ldr	r1, [pc, #664]	@ (800c478 <__gethex+0x2d0>)
 800c1de:	9800      	ldr	r0, [sp, #0]
 800c1e0:	f7fe fffe 	bl	800b1e0 <strncmp>
 800c1e4:	0007      	movs	r7, r0
 800c1e6:	42a8      	cmp	r0, r5
 800c1e8:	d000      	beq.n	800c1ec <__gethex+0x44>
 800c1ea:	e06a      	b.n	800c2c2 <__gethex+0x11a>
 800c1ec:	9b00      	ldr	r3, [sp, #0]
 800c1ee:	7858      	ldrb	r0, [r3, #1]
 800c1f0:	1c5c      	adds	r4, r3, #1
 800c1f2:	f7ff ffc4 	bl	800c17e <__hexdig_fun>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	9302      	str	r3, [sp, #8]
 800c1fa:	42a8      	cmp	r0, r5
 800c1fc:	d02f      	beq.n	800c25e <__gethex+0xb6>
 800c1fe:	9400      	str	r4, [sp, #0]
 800c200:	9b00      	ldr	r3, [sp, #0]
 800c202:	7818      	ldrb	r0, [r3, #0]
 800c204:	2830      	cmp	r0, #48	@ 0x30
 800c206:	d009      	beq.n	800c21c <__gethex+0x74>
 800c208:	f7ff ffb9 	bl	800c17e <__hexdig_fun>
 800c20c:	4242      	negs	r2, r0
 800c20e:	4142      	adcs	r2, r0
 800c210:	2301      	movs	r3, #1
 800c212:	0025      	movs	r5, r4
 800c214:	9202      	str	r2, [sp, #8]
 800c216:	9305      	str	r3, [sp, #20]
 800c218:	9c00      	ldr	r4, [sp, #0]
 800c21a:	e004      	b.n	800c226 <__gethex+0x7e>
 800c21c:	9b00      	ldr	r3, [sp, #0]
 800c21e:	3301      	adds	r3, #1
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	e7ed      	b.n	800c200 <__gethex+0x58>
 800c224:	3401      	adds	r4, #1
 800c226:	7820      	ldrb	r0, [r4, #0]
 800c228:	f7ff ffa9 	bl	800c17e <__hexdig_fun>
 800c22c:	1e07      	subs	r7, r0, #0
 800c22e:	d1f9      	bne.n	800c224 <__gethex+0x7c>
 800c230:	2201      	movs	r2, #1
 800c232:	0020      	movs	r0, r4
 800c234:	4990      	ldr	r1, [pc, #576]	@ (800c478 <__gethex+0x2d0>)
 800c236:	f7fe ffd3 	bl	800b1e0 <strncmp>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d10d      	bne.n	800c25a <__gethex+0xb2>
 800c23e:	2d00      	cmp	r5, #0
 800c240:	d106      	bne.n	800c250 <__gethex+0xa8>
 800c242:	3401      	adds	r4, #1
 800c244:	0025      	movs	r5, r4
 800c246:	7820      	ldrb	r0, [r4, #0]
 800c248:	f7ff ff99 	bl	800c17e <__hexdig_fun>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d102      	bne.n	800c256 <__gethex+0xae>
 800c250:	1b2d      	subs	r5, r5, r4
 800c252:	00af      	lsls	r7, r5, #2
 800c254:	e003      	b.n	800c25e <__gethex+0xb6>
 800c256:	3401      	adds	r4, #1
 800c258:	e7f5      	b.n	800c246 <__gethex+0x9e>
 800c25a:	2d00      	cmp	r5, #0
 800c25c:	d1f8      	bne.n	800c250 <__gethex+0xa8>
 800c25e:	2220      	movs	r2, #32
 800c260:	7823      	ldrb	r3, [r4, #0]
 800c262:	0026      	movs	r6, r4
 800c264:	4393      	bics	r3, r2
 800c266:	2b50      	cmp	r3, #80	@ 0x50
 800c268:	d11d      	bne.n	800c2a6 <__gethex+0xfe>
 800c26a:	7863      	ldrb	r3, [r4, #1]
 800c26c:	2b2b      	cmp	r3, #43	@ 0x2b
 800c26e:	d02d      	beq.n	800c2cc <__gethex+0x124>
 800c270:	2b2d      	cmp	r3, #45	@ 0x2d
 800c272:	d02f      	beq.n	800c2d4 <__gethex+0x12c>
 800c274:	2300      	movs	r3, #0
 800c276:	1c66      	adds	r6, r4, #1
 800c278:	9304      	str	r3, [sp, #16]
 800c27a:	7830      	ldrb	r0, [r6, #0]
 800c27c:	f7ff ff7f 	bl	800c17e <__hexdig_fun>
 800c280:	1e43      	subs	r3, r0, #1
 800c282:	b2db      	uxtb	r3, r3
 800c284:	0005      	movs	r5, r0
 800c286:	2b18      	cmp	r3, #24
 800c288:	d82a      	bhi.n	800c2e0 <__gethex+0x138>
 800c28a:	7870      	ldrb	r0, [r6, #1]
 800c28c:	f7ff ff77 	bl	800c17e <__hexdig_fun>
 800c290:	1e43      	subs	r3, r0, #1
 800c292:	b2db      	uxtb	r3, r3
 800c294:	3601      	adds	r6, #1
 800c296:	3d10      	subs	r5, #16
 800c298:	2b18      	cmp	r3, #24
 800c29a:	d91d      	bls.n	800c2d8 <__gethex+0x130>
 800c29c:	9b04      	ldr	r3, [sp, #16]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d000      	beq.n	800c2a4 <__gethex+0xfc>
 800c2a2:	426d      	negs	r5, r5
 800c2a4:	197f      	adds	r7, r7, r5
 800c2a6:	9b06      	ldr	r3, [sp, #24]
 800c2a8:	601e      	str	r6, [r3, #0]
 800c2aa:	9b02      	ldr	r3, [sp, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d019      	beq.n	800c2e4 <__gethex+0x13c>
 800c2b0:	9b05      	ldr	r3, [sp, #20]
 800c2b2:	2606      	movs	r6, #6
 800c2b4:	425a      	negs	r2, r3
 800c2b6:	4153      	adcs	r3, r2
 800c2b8:	425b      	negs	r3, r3
 800c2ba:	401e      	ands	r6, r3
 800c2bc:	0030      	movs	r0, r6
 800c2be:	b009      	add	sp, #36	@ 0x24
 800c2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	2700      	movs	r7, #0
 800c2c6:	9c00      	ldr	r4, [sp, #0]
 800c2c8:	9302      	str	r3, [sp, #8]
 800c2ca:	e7c8      	b.n	800c25e <__gethex+0xb6>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	9304      	str	r3, [sp, #16]
 800c2d0:	1ca6      	adds	r6, r4, #2
 800c2d2:	e7d2      	b.n	800c27a <__gethex+0xd2>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e7fa      	b.n	800c2ce <__gethex+0x126>
 800c2d8:	230a      	movs	r3, #10
 800c2da:	435d      	muls	r5, r3
 800c2dc:	182d      	adds	r5, r5, r0
 800c2de:	e7d4      	b.n	800c28a <__gethex+0xe2>
 800c2e0:	0026      	movs	r6, r4
 800c2e2:	e7e0      	b.n	800c2a6 <__gethex+0xfe>
 800c2e4:	9b00      	ldr	r3, [sp, #0]
 800c2e6:	9902      	ldr	r1, [sp, #8]
 800c2e8:	1ae3      	subs	r3, r4, r3
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	2b07      	cmp	r3, #7
 800c2ee:	dc0a      	bgt.n	800c306 <__gethex+0x15e>
 800c2f0:	9803      	ldr	r0, [sp, #12]
 800c2f2:	f000 fb19 	bl	800c928 <_Balloc>
 800c2f6:	1e05      	subs	r5, r0, #0
 800c2f8:	d108      	bne.n	800c30c <__gethex+0x164>
 800c2fa:	002a      	movs	r2, r5
 800c2fc:	21e4      	movs	r1, #228	@ 0xe4
 800c2fe:	4b5f      	ldr	r3, [pc, #380]	@ (800c47c <__gethex+0x2d4>)
 800c300:	485f      	ldr	r0, [pc, #380]	@ (800c480 <__gethex+0x2d8>)
 800c302:	f002 f815 	bl	800e330 <__assert_func>
 800c306:	3101      	adds	r1, #1
 800c308:	105b      	asrs	r3, r3, #1
 800c30a:	e7ef      	b.n	800c2ec <__gethex+0x144>
 800c30c:	0003      	movs	r3, r0
 800c30e:	3314      	adds	r3, #20
 800c310:	9302      	str	r3, [sp, #8]
 800c312:	9305      	str	r3, [sp, #20]
 800c314:	2300      	movs	r3, #0
 800c316:	001e      	movs	r6, r3
 800c318:	9304      	str	r3, [sp, #16]
 800c31a:	9b00      	ldr	r3, [sp, #0]
 800c31c:	42a3      	cmp	r3, r4
 800c31e:	d338      	bcc.n	800c392 <__gethex+0x1ea>
 800c320:	9c05      	ldr	r4, [sp, #20]
 800c322:	9b02      	ldr	r3, [sp, #8]
 800c324:	c440      	stmia	r4!, {r6}
 800c326:	1ae4      	subs	r4, r4, r3
 800c328:	10a4      	asrs	r4, r4, #2
 800c32a:	0030      	movs	r0, r6
 800c32c:	612c      	str	r4, [r5, #16]
 800c32e:	f000 fbf3 	bl	800cb18 <__hi0bits>
 800c332:	9b01      	ldr	r3, [sp, #4]
 800c334:	0164      	lsls	r4, r4, #5
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	1a26      	subs	r6, r4, r0
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	429e      	cmp	r6, r3
 800c33e:	dd52      	ble.n	800c3e6 <__gethex+0x23e>
 800c340:	1af6      	subs	r6, r6, r3
 800c342:	0031      	movs	r1, r6
 800c344:	0028      	movs	r0, r5
 800c346:	f000 ff96 	bl	800d276 <__any_on>
 800c34a:	1e04      	subs	r4, r0, #0
 800c34c:	d00f      	beq.n	800c36e <__gethex+0x1c6>
 800c34e:	2401      	movs	r4, #1
 800c350:	231f      	movs	r3, #31
 800c352:	0020      	movs	r0, r4
 800c354:	1e72      	subs	r2, r6, #1
 800c356:	4013      	ands	r3, r2
 800c358:	4098      	lsls	r0, r3
 800c35a:	0003      	movs	r3, r0
 800c35c:	1151      	asrs	r1, r2, #5
 800c35e:	9802      	ldr	r0, [sp, #8]
 800c360:	0089      	lsls	r1, r1, #2
 800c362:	5809      	ldr	r1, [r1, r0]
 800c364:	4219      	tst	r1, r3
 800c366:	d002      	beq.n	800c36e <__gethex+0x1c6>
 800c368:	42a2      	cmp	r2, r4
 800c36a:	dc34      	bgt.n	800c3d6 <__gethex+0x22e>
 800c36c:	2402      	movs	r4, #2
 800c36e:	0031      	movs	r1, r6
 800c370:	0028      	movs	r0, r5
 800c372:	f7ff feb1 	bl	800c0d8 <rshift>
 800c376:	19bf      	adds	r7, r7, r6
 800c378:	9b01      	ldr	r3, [sp, #4]
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	42bb      	cmp	r3, r7
 800c37e:	da42      	bge.n	800c406 <__gethex+0x25e>
 800c380:	0029      	movs	r1, r5
 800c382:	9803      	ldr	r0, [sp, #12]
 800c384:	f000 fb14 	bl	800c9b0 <_Bfree>
 800c388:	2300      	movs	r3, #0
 800c38a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c38c:	26a3      	movs	r6, #163	@ 0xa3
 800c38e:	6013      	str	r3, [r2, #0]
 800c390:	e794      	b.n	800c2bc <__gethex+0x114>
 800c392:	3c01      	subs	r4, #1
 800c394:	7823      	ldrb	r3, [r4, #0]
 800c396:	2b2e      	cmp	r3, #46	@ 0x2e
 800c398:	d012      	beq.n	800c3c0 <__gethex+0x218>
 800c39a:	9b04      	ldr	r3, [sp, #16]
 800c39c:	2b20      	cmp	r3, #32
 800c39e:	d104      	bne.n	800c3aa <__gethex+0x202>
 800c3a0:	9b05      	ldr	r3, [sp, #20]
 800c3a2:	c340      	stmia	r3!, {r6}
 800c3a4:	2600      	movs	r6, #0
 800c3a6:	9305      	str	r3, [sp, #20]
 800c3a8:	9604      	str	r6, [sp, #16]
 800c3aa:	7820      	ldrb	r0, [r4, #0]
 800c3ac:	f7ff fee7 	bl	800c17e <__hexdig_fun>
 800c3b0:	230f      	movs	r3, #15
 800c3b2:	4018      	ands	r0, r3
 800c3b4:	9b04      	ldr	r3, [sp, #16]
 800c3b6:	4098      	lsls	r0, r3
 800c3b8:	3304      	adds	r3, #4
 800c3ba:	4306      	orrs	r6, r0
 800c3bc:	9304      	str	r3, [sp, #16]
 800c3be:	e7ac      	b.n	800c31a <__gethex+0x172>
 800c3c0:	9b00      	ldr	r3, [sp, #0]
 800c3c2:	42a3      	cmp	r3, r4
 800c3c4:	d8e9      	bhi.n	800c39a <__gethex+0x1f2>
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	0020      	movs	r0, r4
 800c3ca:	492b      	ldr	r1, [pc, #172]	@ (800c478 <__gethex+0x2d0>)
 800c3cc:	f7fe ff08 	bl	800b1e0 <strncmp>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d1e2      	bne.n	800c39a <__gethex+0x1f2>
 800c3d4:	e7a1      	b.n	800c31a <__gethex+0x172>
 800c3d6:	0028      	movs	r0, r5
 800c3d8:	1eb1      	subs	r1, r6, #2
 800c3da:	f000 ff4c 	bl	800d276 <__any_on>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	d0c4      	beq.n	800c36c <__gethex+0x1c4>
 800c3e2:	2403      	movs	r4, #3
 800c3e4:	e7c3      	b.n	800c36e <__gethex+0x1c6>
 800c3e6:	9b00      	ldr	r3, [sp, #0]
 800c3e8:	2400      	movs	r4, #0
 800c3ea:	429e      	cmp	r6, r3
 800c3ec:	dac4      	bge.n	800c378 <__gethex+0x1d0>
 800c3ee:	1b9e      	subs	r6, r3, r6
 800c3f0:	0029      	movs	r1, r5
 800c3f2:	0032      	movs	r2, r6
 800c3f4:	9803      	ldr	r0, [sp, #12]
 800c3f6:	f000 fd05 	bl	800ce04 <__lshift>
 800c3fa:	0003      	movs	r3, r0
 800c3fc:	3314      	adds	r3, #20
 800c3fe:	0005      	movs	r5, r0
 800c400:	1bbf      	subs	r7, r7, r6
 800c402:	9302      	str	r3, [sp, #8]
 800c404:	e7b8      	b.n	800c378 <__gethex+0x1d0>
 800c406:	9b01      	ldr	r3, [sp, #4]
 800c408:	685e      	ldr	r6, [r3, #4]
 800c40a:	42be      	cmp	r6, r7
 800c40c:	dd6f      	ble.n	800c4ee <__gethex+0x346>
 800c40e:	9b00      	ldr	r3, [sp, #0]
 800c410:	1bf6      	subs	r6, r6, r7
 800c412:	42b3      	cmp	r3, r6
 800c414:	dc36      	bgt.n	800c484 <__gethex+0x2dc>
 800c416:	9b01      	ldr	r3, [sp, #4]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d024      	beq.n	800c468 <__gethex+0x2c0>
 800c41e:	2b03      	cmp	r3, #3
 800c420:	d026      	beq.n	800c470 <__gethex+0x2c8>
 800c422:	2b01      	cmp	r3, #1
 800c424:	d117      	bne.n	800c456 <__gethex+0x2ae>
 800c426:	9b00      	ldr	r3, [sp, #0]
 800c428:	42b3      	cmp	r3, r6
 800c42a:	d114      	bne.n	800c456 <__gethex+0x2ae>
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d10b      	bne.n	800c448 <__gethex+0x2a0>
 800c430:	9b01      	ldr	r3, [sp, #4]
 800c432:	9a07      	ldr	r2, [sp, #28]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	2662      	movs	r6, #98	@ 0x62
 800c438:	6013      	str	r3, [r2, #0]
 800c43a:	2301      	movs	r3, #1
 800c43c:	9a02      	ldr	r2, [sp, #8]
 800c43e:	612b      	str	r3, [r5, #16]
 800c440:	6013      	str	r3, [r2, #0]
 800c442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c444:	601d      	str	r5, [r3, #0]
 800c446:	e739      	b.n	800c2bc <__gethex+0x114>
 800c448:	9900      	ldr	r1, [sp, #0]
 800c44a:	0028      	movs	r0, r5
 800c44c:	3901      	subs	r1, #1
 800c44e:	f000 ff12 	bl	800d276 <__any_on>
 800c452:	2800      	cmp	r0, #0
 800c454:	d1ec      	bne.n	800c430 <__gethex+0x288>
 800c456:	0029      	movs	r1, r5
 800c458:	9803      	ldr	r0, [sp, #12]
 800c45a:	f000 faa9 	bl	800c9b0 <_Bfree>
 800c45e:	2300      	movs	r3, #0
 800c460:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c462:	2650      	movs	r6, #80	@ 0x50
 800c464:	6013      	str	r3, [r2, #0]
 800c466:	e729      	b.n	800c2bc <__gethex+0x114>
 800c468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1f3      	bne.n	800c456 <__gethex+0x2ae>
 800c46e:	e7df      	b.n	800c430 <__gethex+0x288>
 800c470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1dc      	bne.n	800c430 <__gethex+0x288>
 800c476:	e7ee      	b.n	800c456 <__gethex+0x2ae>
 800c478:	0800e76c 	.word	0x0800e76c
 800c47c:	0800e87b 	.word	0x0800e87b
 800c480:	0800e88c 	.word	0x0800e88c
 800c484:	1e77      	subs	r7, r6, #1
 800c486:	2c00      	cmp	r4, #0
 800c488:	d12f      	bne.n	800c4ea <__gethex+0x342>
 800c48a:	2f00      	cmp	r7, #0
 800c48c:	d004      	beq.n	800c498 <__gethex+0x2f0>
 800c48e:	0039      	movs	r1, r7
 800c490:	0028      	movs	r0, r5
 800c492:	f000 fef0 	bl	800d276 <__any_on>
 800c496:	0004      	movs	r4, r0
 800c498:	231f      	movs	r3, #31
 800c49a:	117a      	asrs	r2, r7, #5
 800c49c:	401f      	ands	r7, r3
 800c49e:	3b1e      	subs	r3, #30
 800c4a0:	40bb      	lsls	r3, r7
 800c4a2:	9902      	ldr	r1, [sp, #8]
 800c4a4:	0092      	lsls	r2, r2, #2
 800c4a6:	5852      	ldr	r2, [r2, r1]
 800c4a8:	421a      	tst	r2, r3
 800c4aa:	d001      	beq.n	800c4b0 <__gethex+0x308>
 800c4ac:	2302      	movs	r3, #2
 800c4ae:	431c      	orrs	r4, r3
 800c4b0:	9b00      	ldr	r3, [sp, #0]
 800c4b2:	0031      	movs	r1, r6
 800c4b4:	1b9b      	subs	r3, r3, r6
 800c4b6:	2602      	movs	r6, #2
 800c4b8:	0028      	movs	r0, r5
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	f7ff fe0c 	bl	800c0d8 <rshift>
 800c4c0:	9b01      	ldr	r3, [sp, #4]
 800c4c2:	685f      	ldr	r7, [r3, #4]
 800c4c4:	2c00      	cmp	r4, #0
 800c4c6:	d03f      	beq.n	800c548 <__gethex+0x3a0>
 800c4c8:	9b01      	ldr	r3, [sp, #4]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d010      	beq.n	800c4f2 <__gethex+0x34a>
 800c4d0:	2b03      	cmp	r3, #3
 800c4d2:	d012      	beq.n	800c4fa <__gethex+0x352>
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d106      	bne.n	800c4e6 <__gethex+0x33e>
 800c4d8:	07a2      	lsls	r2, r4, #30
 800c4da:	d504      	bpl.n	800c4e6 <__gethex+0x33e>
 800c4dc:	9a02      	ldr	r2, [sp, #8]
 800c4de:	6812      	ldr	r2, [r2, #0]
 800c4e0:	4314      	orrs	r4, r2
 800c4e2:	421c      	tst	r4, r3
 800c4e4:	d10c      	bne.n	800c500 <__gethex+0x358>
 800c4e6:	2310      	movs	r3, #16
 800c4e8:	e02d      	b.n	800c546 <__gethex+0x39e>
 800c4ea:	2401      	movs	r4, #1
 800c4ec:	e7d4      	b.n	800c498 <__gethex+0x2f0>
 800c4ee:	2601      	movs	r6, #1
 800c4f0:	e7e8      	b.n	800c4c4 <__gethex+0x31c>
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c4f6:	1a9b      	subs	r3, r3, r2
 800c4f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d0f2      	beq.n	800c4e6 <__gethex+0x33e>
 800c500:	692b      	ldr	r3, [r5, #16]
 800c502:	2000      	movs	r0, #0
 800c504:	9302      	str	r3, [sp, #8]
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	9304      	str	r3, [sp, #16]
 800c50a:	002b      	movs	r3, r5
 800c50c:	9a04      	ldr	r2, [sp, #16]
 800c50e:	3314      	adds	r3, #20
 800c510:	1899      	adds	r1, r3, r2
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	1c54      	adds	r4, r2, #1
 800c516:	d01c      	beq.n	800c552 <__gethex+0x3aa>
 800c518:	3201      	adds	r2, #1
 800c51a:	601a      	str	r2, [r3, #0]
 800c51c:	002b      	movs	r3, r5
 800c51e:	3314      	adds	r3, #20
 800c520:	2e02      	cmp	r6, #2
 800c522:	d13f      	bne.n	800c5a4 <__gethex+0x3fc>
 800c524:	9a01      	ldr	r2, [sp, #4]
 800c526:	9900      	ldr	r1, [sp, #0]
 800c528:	6812      	ldr	r2, [r2, #0]
 800c52a:	3a01      	subs	r2, #1
 800c52c:	428a      	cmp	r2, r1
 800c52e:	d109      	bne.n	800c544 <__gethex+0x39c>
 800c530:	000a      	movs	r2, r1
 800c532:	201f      	movs	r0, #31
 800c534:	4010      	ands	r0, r2
 800c536:	2201      	movs	r2, #1
 800c538:	4082      	lsls	r2, r0
 800c53a:	1149      	asrs	r1, r1, #5
 800c53c:	0089      	lsls	r1, r1, #2
 800c53e:	58cb      	ldr	r3, [r1, r3]
 800c540:	4213      	tst	r3, r2
 800c542:	d13d      	bne.n	800c5c0 <__gethex+0x418>
 800c544:	2320      	movs	r3, #32
 800c546:	431e      	orrs	r6, r3
 800c548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c54a:	601d      	str	r5, [r3, #0]
 800c54c:	9b07      	ldr	r3, [sp, #28]
 800c54e:	601f      	str	r7, [r3, #0]
 800c550:	e6b4      	b.n	800c2bc <__gethex+0x114>
 800c552:	c301      	stmia	r3!, {r0}
 800c554:	4299      	cmp	r1, r3
 800c556:	d8dc      	bhi.n	800c512 <__gethex+0x36a>
 800c558:	68ab      	ldr	r3, [r5, #8]
 800c55a:	9a02      	ldr	r2, [sp, #8]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	db18      	blt.n	800c592 <__gethex+0x3ea>
 800c560:	6869      	ldr	r1, [r5, #4]
 800c562:	9803      	ldr	r0, [sp, #12]
 800c564:	3101      	adds	r1, #1
 800c566:	f000 f9df 	bl	800c928 <_Balloc>
 800c56a:	1e04      	subs	r4, r0, #0
 800c56c:	d104      	bne.n	800c578 <__gethex+0x3d0>
 800c56e:	0022      	movs	r2, r4
 800c570:	2184      	movs	r1, #132	@ 0x84
 800c572:	4b1d      	ldr	r3, [pc, #116]	@ (800c5e8 <__gethex+0x440>)
 800c574:	481d      	ldr	r0, [pc, #116]	@ (800c5ec <__gethex+0x444>)
 800c576:	e6c4      	b.n	800c302 <__gethex+0x15a>
 800c578:	0029      	movs	r1, r5
 800c57a:	692a      	ldr	r2, [r5, #16]
 800c57c:	310c      	adds	r1, #12
 800c57e:	3202      	adds	r2, #2
 800c580:	0092      	lsls	r2, r2, #2
 800c582:	300c      	adds	r0, #12
 800c584:	f7fe fec8 	bl	800b318 <memcpy>
 800c588:	0029      	movs	r1, r5
 800c58a:	9803      	ldr	r0, [sp, #12]
 800c58c:	f000 fa10 	bl	800c9b0 <_Bfree>
 800c590:	0025      	movs	r5, r4
 800c592:	692b      	ldr	r3, [r5, #16]
 800c594:	1c5a      	adds	r2, r3, #1
 800c596:	612a      	str	r2, [r5, #16]
 800c598:	2201      	movs	r2, #1
 800c59a:	3304      	adds	r3, #4
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	18eb      	adds	r3, r5, r3
 800c5a0:	605a      	str	r2, [r3, #4]
 800c5a2:	e7bb      	b.n	800c51c <__gethex+0x374>
 800c5a4:	692a      	ldr	r2, [r5, #16]
 800c5a6:	9902      	ldr	r1, [sp, #8]
 800c5a8:	428a      	cmp	r2, r1
 800c5aa:	dd0b      	ble.n	800c5c4 <__gethex+0x41c>
 800c5ac:	2101      	movs	r1, #1
 800c5ae:	0028      	movs	r0, r5
 800c5b0:	f7ff fd92 	bl	800c0d8 <rshift>
 800c5b4:	9b01      	ldr	r3, [sp, #4]
 800c5b6:	3701      	adds	r7, #1
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	42bb      	cmp	r3, r7
 800c5bc:	da00      	bge.n	800c5c0 <__gethex+0x418>
 800c5be:	e6df      	b.n	800c380 <__gethex+0x1d8>
 800c5c0:	2601      	movs	r6, #1
 800c5c2:	e7bf      	b.n	800c544 <__gethex+0x39c>
 800c5c4:	221f      	movs	r2, #31
 800c5c6:	9c00      	ldr	r4, [sp, #0]
 800c5c8:	9900      	ldr	r1, [sp, #0]
 800c5ca:	4014      	ands	r4, r2
 800c5cc:	4211      	tst	r1, r2
 800c5ce:	d0f7      	beq.n	800c5c0 <__gethex+0x418>
 800c5d0:	9a04      	ldr	r2, [sp, #16]
 800c5d2:	189b      	adds	r3, r3, r2
 800c5d4:	3b04      	subs	r3, #4
 800c5d6:	6818      	ldr	r0, [r3, #0]
 800c5d8:	f000 fa9e 	bl	800cb18 <__hi0bits>
 800c5dc:	2320      	movs	r3, #32
 800c5de:	1b1b      	subs	r3, r3, r4
 800c5e0:	4298      	cmp	r0, r3
 800c5e2:	dbe3      	blt.n	800c5ac <__gethex+0x404>
 800c5e4:	e7ec      	b.n	800c5c0 <__gethex+0x418>
 800c5e6:	46c0      	nop			@ (mov r8, r8)
 800c5e8:	0800e87b 	.word	0x0800e87b
 800c5ec:	0800e88c 	.word	0x0800e88c

0800c5f0 <L_shift>:
 800c5f0:	2308      	movs	r3, #8
 800c5f2:	b570      	push	{r4, r5, r6, lr}
 800c5f4:	2520      	movs	r5, #32
 800c5f6:	1a9a      	subs	r2, r3, r2
 800c5f8:	0092      	lsls	r2, r2, #2
 800c5fa:	1aad      	subs	r5, r5, r2
 800c5fc:	6843      	ldr	r3, [r0, #4]
 800c5fe:	6804      	ldr	r4, [r0, #0]
 800c600:	001e      	movs	r6, r3
 800c602:	40ae      	lsls	r6, r5
 800c604:	40d3      	lsrs	r3, r2
 800c606:	4334      	orrs	r4, r6
 800c608:	6004      	str	r4, [r0, #0]
 800c60a:	6043      	str	r3, [r0, #4]
 800c60c:	3004      	adds	r0, #4
 800c60e:	4288      	cmp	r0, r1
 800c610:	d3f4      	bcc.n	800c5fc <L_shift+0xc>
 800c612:	bd70      	pop	{r4, r5, r6, pc}

0800c614 <__match>:
 800c614:	b530      	push	{r4, r5, lr}
 800c616:	6803      	ldr	r3, [r0, #0]
 800c618:	780c      	ldrb	r4, [r1, #0]
 800c61a:	3301      	adds	r3, #1
 800c61c:	2c00      	cmp	r4, #0
 800c61e:	d102      	bne.n	800c626 <__match+0x12>
 800c620:	6003      	str	r3, [r0, #0]
 800c622:	2001      	movs	r0, #1
 800c624:	bd30      	pop	{r4, r5, pc}
 800c626:	781a      	ldrb	r2, [r3, #0]
 800c628:	0015      	movs	r5, r2
 800c62a:	3d41      	subs	r5, #65	@ 0x41
 800c62c:	2d19      	cmp	r5, #25
 800c62e:	d800      	bhi.n	800c632 <__match+0x1e>
 800c630:	3220      	adds	r2, #32
 800c632:	3101      	adds	r1, #1
 800c634:	42a2      	cmp	r2, r4
 800c636:	d0ef      	beq.n	800c618 <__match+0x4>
 800c638:	2000      	movs	r0, #0
 800c63a:	e7f3      	b.n	800c624 <__match+0x10>

0800c63c <__hexnan>:
 800c63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c63e:	680b      	ldr	r3, [r1, #0]
 800c640:	b08b      	sub	sp, #44	@ 0x2c
 800c642:	9201      	str	r2, [sp, #4]
 800c644:	9901      	ldr	r1, [sp, #4]
 800c646:	115a      	asrs	r2, r3, #5
 800c648:	0092      	lsls	r2, r2, #2
 800c64a:	188a      	adds	r2, r1, r2
 800c64c:	9202      	str	r2, [sp, #8]
 800c64e:	0019      	movs	r1, r3
 800c650:	221f      	movs	r2, #31
 800c652:	4011      	ands	r1, r2
 800c654:	9008      	str	r0, [sp, #32]
 800c656:	9106      	str	r1, [sp, #24]
 800c658:	4213      	tst	r3, r2
 800c65a:	d002      	beq.n	800c662 <__hexnan+0x26>
 800c65c:	9b02      	ldr	r3, [sp, #8]
 800c65e:	3304      	adds	r3, #4
 800c660:	9302      	str	r3, [sp, #8]
 800c662:	9b02      	ldr	r3, [sp, #8]
 800c664:	2500      	movs	r5, #0
 800c666:	1f1f      	subs	r7, r3, #4
 800c668:	003e      	movs	r6, r7
 800c66a:	003c      	movs	r4, r7
 800c66c:	9b08      	ldr	r3, [sp, #32]
 800c66e:	603d      	str	r5, [r7, #0]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	9507      	str	r5, [sp, #28]
 800c674:	9305      	str	r3, [sp, #20]
 800c676:	9503      	str	r5, [sp, #12]
 800c678:	9b05      	ldr	r3, [sp, #20]
 800c67a:	3301      	adds	r3, #1
 800c67c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c67e:	9b05      	ldr	r3, [sp, #20]
 800c680:	785b      	ldrb	r3, [r3, #1]
 800c682:	9304      	str	r3, [sp, #16]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d028      	beq.n	800c6da <__hexnan+0x9e>
 800c688:	9804      	ldr	r0, [sp, #16]
 800c68a:	f7ff fd78 	bl	800c17e <__hexdig_fun>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d155      	bne.n	800c73e <__hexnan+0x102>
 800c692:	9b04      	ldr	r3, [sp, #16]
 800c694:	2b20      	cmp	r3, #32
 800c696:	d819      	bhi.n	800c6cc <__hexnan+0x90>
 800c698:	9b03      	ldr	r3, [sp, #12]
 800c69a:	9a07      	ldr	r2, [sp, #28]
 800c69c:	4293      	cmp	r3, r2
 800c69e:	dd12      	ble.n	800c6c6 <__hexnan+0x8a>
 800c6a0:	42b4      	cmp	r4, r6
 800c6a2:	d206      	bcs.n	800c6b2 <__hexnan+0x76>
 800c6a4:	2d07      	cmp	r5, #7
 800c6a6:	dc04      	bgt.n	800c6b2 <__hexnan+0x76>
 800c6a8:	002a      	movs	r2, r5
 800c6aa:	0031      	movs	r1, r6
 800c6ac:	0020      	movs	r0, r4
 800c6ae:	f7ff ff9f 	bl	800c5f0 <L_shift>
 800c6b2:	9b01      	ldr	r3, [sp, #4]
 800c6b4:	2508      	movs	r5, #8
 800c6b6:	429c      	cmp	r4, r3
 800c6b8:	d905      	bls.n	800c6c6 <__hexnan+0x8a>
 800c6ba:	1f26      	subs	r6, r4, #4
 800c6bc:	2500      	movs	r5, #0
 800c6be:	0034      	movs	r4, r6
 800c6c0:	9b03      	ldr	r3, [sp, #12]
 800c6c2:	6035      	str	r5, [r6, #0]
 800c6c4:	9307      	str	r3, [sp, #28]
 800c6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6c8:	9305      	str	r3, [sp, #20]
 800c6ca:	e7d5      	b.n	800c678 <__hexnan+0x3c>
 800c6cc:	9b04      	ldr	r3, [sp, #16]
 800c6ce:	2b29      	cmp	r3, #41	@ 0x29
 800c6d0:	d15a      	bne.n	800c788 <__hexnan+0x14c>
 800c6d2:	9b05      	ldr	r3, [sp, #20]
 800c6d4:	9a08      	ldr	r2, [sp, #32]
 800c6d6:	3302      	adds	r3, #2
 800c6d8:	6013      	str	r3, [r2, #0]
 800c6da:	9b03      	ldr	r3, [sp, #12]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d053      	beq.n	800c788 <__hexnan+0x14c>
 800c6e0:	42b4      	cmp	r4, r6
 800c6e2:	d206      	bcs.n	800c6f2 <__hexnan+0xb6>
 800c6e4:	2d07      	cmp	r5, #7
 800c6e6:	dc04      	bgt.n	800c6f2 <__hexnan+0xb6>
 800c6e8:	002a      	movs	r2, r5
 800c6ea:	0031      	movs	r1, r6
 800c6ec:	0020      	movs	r0, r4
 800c6ee:	f7ff ff7f 	bl	800c5f0 <L_shift>
 800c6f2:	9b01      	ldr	r3, [sp, #4]
 800c6f4:	429c      	cmp	r4, r3
 800c6f6:	d936      	bls.n	800c766 <__hexnan+0x12a>
 800c6f8:	001a      	movs	r2, r3
 800c6fa:	0023      	movs	r3, r4
 800c6fc:	cb02      	ldmia	r3!, {r1}
 800c6fe:	c202      	stmia	r2!, {r1}
 800c700:	429f      	cmp	r7, r3
 800c702:	d2fb      	bcs.n	800c6fc <__hexnan+0xc0>
 800c704:	9b02      	ldr	r3, [sp, #8]
 800c706:	1c61      	adds	r1, r4, #1
 800c708:	1eda      	subs	r2, r3, #3
 800c70a:	2304      	movs	r3, #4
 800c70c:	4291      	cmp	r1, r2
 800c70e:	d805      	bhi.n	800c71c <__hexnan+0xe0>
 800c710:	9b02      	ldr	r3, [sp, #8]
 800c712:	3b04      	subs	r3, #4
 800c714:	1b1b      	subs	r3, r3, r4
 800c716:	089b      	lsrs	r3, r3, #2
 800c718:	3301      	adds	r3, #1
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	9a01      	ldr	r2, [sp, #4]
 800c71e:	18d3      	adds	r3, r2, r3
 800c720:	2200      	movs	r2, #0
 800c722:	c304      	stmia	r3!, {r2}
 800c724:	429f      	cmp	r7, r3
 800c726:	d2fc      	bcs.n	800c722 <__hexnan+0xe6>
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d104      	bne.n	800c738 <__hexnan+0xfc>
 800c72e:	9b01      	ldr	r3, [sp, #4]
 800c730:	429f      	cmp	r7, r3
 800c732:	d127      	bne.n	800c784 <__hexnan+0x148>
 800c734:	2301      	movs	r3, #1
 800c736:	603b      	str	r3, [r7, #0]
 800c738:	2005      	movs	r0, #5
 800c73a:	b00b      	add	sp, #44	@ 0x2c
 800c73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c73e:	9b03      	ldr	r3, [sp, #12]
 800c740:	3501      	adds	r5, #1
 800c742:	3301      	adds	r3, #1
 800c744:	9303      	str	r3, [sp, #12]
 800c746:	2d08      	cmp	r5, #8
 800c748:	dd06      	ble.n	800c758 <__hexnan+0x11c>
 800c74a:	9b01      	ldr	r3, [sp, #4]
 800c74c:	429c      	cmp	r4, r3
 800c74e:	d9ba      	bls.n	800c6c6 <__hexnan+0x8a>
 800c750:	2300      	movs	r3, #0
 800c752:	2501      	movs	r5, #1
 800c754:	3c04      	subs	r4, #4
 800c756:	6023      	str	r3, [r4, #0]
 800c758:	220f      	movs	r2, #15
 800c75a:	6823      	ldr	r3, [r4, #0]
 800c75c:	4010      	ands	r0, r2
 800c75e:	011b      	lsls	r3, r3, #4
 800c760:	4303      	orrs	r3, r0
 800c762:	6023      	str	r3, [r4, #0]
 800c764:	e7af      	b.n	800c6c6 <__hexnan+0x8a>
 800c766:	9b06      	ldr	r3, [sp, #24]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d0dd      	beq.n	800c728 <__hexnan+0xec>
 800c76c:	2320      	movs	r3, #32
 800c76e:	9a06      	ldr	r2, [sp, #24]
 800c770:	9902      	ldr	r1, [sp, #8]
 800c772:	1a9b      	subs	r3, r3, r2
 800c774:	2201      	movs	r2, #1
 800c776:	4252      	negs	r2, r2
 800c778:	40da      	lsrs	r2, r3
 800c77a:	3904      	subs	r1, #4
 800c77c:	680b      	ldr	r3, [r1, #0]
 800c77e:	4013      	ands	r3, r2
 800c780:	600b      	str	r3, [r1, #0]
 800c782:	e7d1      	b.n	800c728 <__hexnan+0xec>
 800c784:	3f04      	subs	r7, #4
 800c786:	e7cf      	b.n	800c728 <__hexnan+0xec>
 800c788:	2004      	movs	r0, #4
 800c78a:	e7d6      	b.n	800c73a <__hexnan+0xfe>

0800c78c <malloc>:
 800c78c:	b510      	push	{r4, lr}
 800c78e:	4b03      	ldr	r3, [pc, #12]	@ (800c79c <malloc+0x10>)
 800c790:	0001      	movs	r1, r0
 800c792:	6818      	ldr	r0, [r3, #0]
 800c794:	f000 f826 	bl	800c7e4 <_malloc_r>
 800c798:	bd10      	pop	{r4, pc}
 800c79a:	46c0      	nop			@ (mov r8, r8)
 800c79c:	200001b0 	.word	0x200001b0

0800c7a0 <sbrk_aligned>:
 800c7a0:	b570      	push	{r4, r5, r6, lr}
 800c7a2:	4e0f      	ldr	r6, [pc, #60]	@ (800c7e0 <sbrk_aligned+0x40>)
 800c7a4:	000d      	movs	r5, r1
 800c7a6:	6831      	ldr	r1, [r6, #0]
 800c7a8:	0004      	movs	r4, r0
 800c7aa:	2900      	cmp	r1, #0
 800c7ac:	d102      	bne.n	800c7b4 <sbrk_aligned+0x14>
 800c7ae:	f001 fdad 	bl	800e30c <_sbrk_r>
 800c7b2:	6030      	str	r0, [r6, #0]
 800c7b4:	0029      	movs	r1, r5
 800c7b6:	0020      	movs	r0, r4
 800c7b8:	f001 fda8 	bl	800e30c <_sbrk_r>
 800c7bc:	1c43      	adds	r3, r0, #1
 800c7be:	d103      	bne.n	800c7c8 <sbrk_aligned+0x28>
 800c7c0:	2501      	movs	r5, #1
 800c7c2:	426d      	negs	r5, r5
 800c7c4:	0028      	movs	r0, r5
 800c7c6:	bd70      	pop	{r4, r5, r6, pc}
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	1cc5      	adds	r5, r0, #3
 800c7cc:	439d      	bics	r5, r3
 800c7ce:	42a8      	cmp	r0, r5
 800c7d0:	d0f8      	beq.n	800c7c4 <sbrk_aligned+0x24>
 800c7d2:	1a29      	subs	r1, r5, r0
 800c7d4:	0020      	movs	r0, r4
 800c7d6:	f001 fd99 	bl	800e30c <_sbrk_r>
 800c7da:	3001      	adds	r0, #1
 800c7dc:	d1f2      	bne.n	800c7c4 <sbrk_aligned+0x24>
 800c7de:	e7ef      	b.n	800c7c0 <sbrk_aligned+0x20>
 800c7e0:	200008d0 	.word	0x200008d0

0800c7e4 <_malloc_r>:
 800c7e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7e6:	2203      	movs	r2, #3
 800c7e8:	1ccb      	adds	r3, r1, #3
 800c7ea:	4393      	bics	r3, r2
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	0005      	movs	r5, r0
 800c7f0:	001f      	movs	r7, r3
 800c7f2:	2b0c      	cmp	r3, #12
 800c7f4:	d234      	bcs.n	800c860 <_malloc_r+0x7c>
 800c7f6:	270c      	movs	r7, #12
 800c7f8:	42b9      	cmp	r1, r7
 800c7fa:	d833      	bhi.n	800c864 <_malloc_r+0x80>
 800c7fc:	0028      	movs	r0, r5
 800c7fe:	f000 f883 	bl	800c908 <__malloc_lock>
 800c802:	4e37      	ldr	r6, [pc, #220]	@ (800c8e0 <_malloc_r+0xfc>)
 800c804:	6833      	ldr	r3, [r6, #0]
 800c806:	001c      	movs	r4, r3
 800c808:	2c00      	cmp	r4, #0
 800c80a:	d12f      	bne.n	800c86c <_malloc_r+0x88>
 800c80c:	0039      	movs	r1, r7
 800c80e:	0028      	movs	r0, r5
 800c810:	f7ff ffc6 	bl	800c7a0 <sbrk_aligned>
 800c814:	0004      	movs	r4, r0
 800c816:	1c43      	adds	r3, r0, #1
 800c818:	d15f      	bne.n	800c8da <_malloc_r+0xf6>
 800c81a:	6834      	ldr	r4, [r6, #0]
 800c81c:	9400      	str	r4, [sp, #0]
 800c81e:	9b00      	ldr	r3, [sp, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d14a      	bne.n	800c8ba <_malloc_r+0xd6>
 800c824:	2c00      	cmp	r4, #0
 800c826:	d052      	beq.n	800c8ce <_malloc_r+0xea>
 800c828:	6823      	ldr	r3, [r4, #0]
 800c82a:	0028      	movs	r0, r5
 800c82c:	18e3      	adds	r3, r4, r3
 800c82e:	9900      	ldr	r1, [sp, #0]
 800c830:	9301      	str	r3, [sp, #4]
 800c832:	f001 fd6b 	bl	800e30c <_sbrk_r>
 800c836:	9b01      	ldr	r3, [sp, #4]
 800c838:	4283      	cmp	r3, r0
 800c83a:	d148      	bne.n	800c8ce <_malloc_r+0xea>
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	0028      	movs	r0, r5
 800c840:	1aff      	subs	r7, r7, r3
 800c842:	0039      	movs	r1, r7
 800c844:	f7ff ffac 	bl	800c7a0 <sbrk_aligned>
 800c848:	3001      	adds	r0, #1
 800c84a:	d040      	beq.n	800c8ce <_malloc_r+0xea>
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	19db      	adds	r3, r3, r7
 800c850:	6023      	str	r3, [r4, #0]
 800c852:	6833      	ldr	r3, [r6, #0]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	2a00      	cmp	r2, #0
 800c858:	d133      	bne.n	800c8c2 <_malloc_r+0xde>
 800c85a:	9b00      	ldr	r3, [sp, #0]
 800c85c:	6033      	str	r3, [r6, #0]
 800c85e:	e019      	b.n	800c894 <_malloc_r+0xb0>
 800c860:	2b00      	cmp	r3, #0
 800c862:	dac9      	bge.n	800c7f8 <_malloc_r+0x14>
 800c864:	230c      	movs	r3, #12
 800c866:	602b      	str	r3, [r5, #0]
 800c868:	2000      	movs	r0, #0
 800c86a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c86c:	6821      	ldr	r1, [r4, #0]
 800c86e:	1bc9      	subs	r1, r1, r7
 800c870:	d420      	bmi.n	800c8b4 <_malloc_r+0xd0>
 800c872:	290b      	cmp	r1, #11
 800c874:	d90a      	bls.n	800c88c <_malloc_r+0xa8>
 800c876:	19e2      	adds	r2, r4, r7
 800c878:	6027      	str	r7, [r4, #0]
 800c87a:	42a3      	cmp	r3, r4
 800c87c:	d104      	bne.n	800c888 <_malloc_r+0xa4>
 800c87e:	6032      	str	r2, [r6, #0]
 800c880:	6863      	ldr	r3, [r4, #4]
 800c882:	6011      	str	r1, [r2, #0]
 800c884:	6053      	str	r3, [r2, #4]
 800c886:	e005      	b.n	800c894 <_malloc_r+0xb0>
 800c888:	605a      	str	r2, [r3, #4]
 800c88a:	e7f9      	b.n	800c880 <_malloc_r+0x9c>
 800c88c:	6862      	ldr	r2, [r4, #4]
 800c88e:	42a3      	cmp	r3, r4
 800c890:	d10e      	bne.n	800c8b0 <_malloc_r+0xcc>
 800c892:	6032      	str	r2, [r6, #0]
 800c894:	0028      	movs	r0, r5
 800c896:	f000 f83f 	bl	800c918 <__malloc_unlock>
 800c89a:	0020      	movs	r0, r4
 800c89c:	2207      	movs	r2, #7
 800c89e:	300b      	adds	r0, #11
 800c8a0:	1d23      	adds	r3, r4, #4
 800c8a2:	4390      	bics	r0, r2
 800c8a4:	1ac2      	subs	r2, r0, r3
 800c8a6:	4298      	cmp	r0, r3
 800c8a8:	d0df      	beq.n	800c86a <_malloc_r+0x86>
 800c8aa:	1a1b      	subs	r3, r3, r0
 800c8ac:	50a3      	str	r3, [r4, r2]
 800c8ae:	e7dc      	b.n	800c86a <_malloc_r+0x86>
 800c8b0:	605a      	str	r2, [r3, #4]
 800c8b2:	e7ef      	b.n	800c894 <_malloc_r+0xb0>
 800c8b4:	0023      	movs	r3, r4
 800c8b6:	6864      	ldr	r4, [r4, #4]
 800c8b8:	e7a6      	b.n	800c808 <_malloc_r+0x24>
 800c8ba:	9c00      	ldr	r4, [sp, #0]
 800c8bc:	6863      	ldr	r3, [r4, #4]
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	e7ad      	b.n	800c81e <_malloc_r+0x3a>
 800c8c2:	001a      	movs	r2, r3
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	42a3      	cmp	r3, r4
 800c8c8:	d1fb      	bne.n	800c8c2 <_malloc_r+0xde>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	e7da      	b.n	800c884 <_malloc_r+0xa0>
 800c8ce:	230c      	movs	r3, #12
 800c8d0:	0028      	movs	r0, r5
 800c8d2:	602b      	str	r3, [r5, #0]
 800c8d4:	f000 f820 	bl	800c918 <__malloc_unlock>
 800c8d8:	e7c6      	b.n	800c868 <_malloc_r+0x84>
 800c8da:	6007      	str	r7, [r0, #0]
 800c8dc:	e7da      	b.n	800c894 <_malloc_r+0xb0>
 800c8de:	46c0      	nop			@ (mov r8, r8)
 800c8e0:	200008d4 	.word	0x200008d4

0800c8e4 <__ascii_mbtowc>:
 800c8e4:	b082      	sub	sp, #8
 800c8e6:	2900      	cmp	r1, #0
 800c8e8:	d100      	bne.n	800c8ec <__ascii_mbtowc+0x8>
 800c8ea:	a901      	add	r1, sp, #4
 800c8ec:	1e10      	subs	r0, r2, #0
 800c8ee:	d006      	beq.n	800c8fe <__ascii_mbtowc+0x1a>
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d006      	beq.n	800c902 <__ascii_mbtowc+0x1e>
 800c8f4:	7813      	ldrb	r3, [r2, #0]
 800c8f6:	600b      	str	r3, [r1, #0]
 800c8f8:	7810      	ldrb	r0, [r2, #0]
 800c8fa:	1e43      	subs	r3, r0, #1
 800c8fc:	4198      	sbcs	r0, r3
 800c8fe:	b002      	add	sp, #8
 800c900:	4770      	bx	lr
 800c902:	2002      	movs	r0, #2
 800c904:	4240      	negs	r0, r0
 800c906:	e7fa      	b.n	800c8fe <__ascii_mbtowc+0x1a>

0800c908 <__malloc_lock>:
 800c908:	b510      	push	{r4, lr}
 800c90a:	4802      	ldr	r0, [pc, #8]	@ (800c914 <__malloc_lock+0xc>)
 800c90c:	f7fe fcf7 	bl	800b2fe <__retarget_lock_acquire_recursive>
 800c910:	bd10      	pop	{r4, pc}
 800c912:	46c0      	nop			@ (mov r8, r8)
 800c914:	200008cc 	.word	0x200008cc

0800c918 <__malloc_unlock>:
 800c918:	b510      	push	{r4, lr}
 800c91a:	4802      	ldr	r0, [pc, #8]	@ (800c924 <__malloc_unlock+0xc>)
 800c91c:	f7fe fcf0 	bl	800b300 <__retarget_lock_release_recursive>
 800c920:	bd10      	pop	{r4, pc}
 800c922:	46c0      	nop			@ (mov r8, r8)
 800c924:	200008cc 	.word	0x200008cc

0800c928 <_Balloc>:
 800c928:	b570      	push	{r4, r5, r6, lr}
 800c92a:	69c5      	ldr	r5, [r0, #28]
 800c92c:	0006      	movs	r6, r0
 800c92e:	000c      	movs	r4, r1
 800c930:	2d00      	cmp	r5, #0
 800c932:	d10e      	bne.n	800c952 <_Balloc+0x2a>
 800c934:	2010      	movs	r0, #16
 800c936:	f7ff ff29 	bl	800c78c <malloc>
 800c93a:	1e02      	subs	r2, r0, #0
 800c93c:	61f0      	str	r0, [r6, #28]
 800c93e:	d104      	bne.n	800c94a <_Balloc+0x22>
 800c940:	216b      	movs	r1, #107	@ 0x6b
 800c942:	4b19      	ldr	r3, [pc, #100]	@ (800c9a8 <_Balloc+0x80>)
 800c944:	4819      	ldr	r0, [pc, #100]	@ (800c9ac <_Balloc+0x84>)
 800c946:	f001 fcf3 	bl	800e330 <__assert_func>
 800c94a:	6045      	str	r5, [r0, #4]
 800c94c:	6085      	str	r5, [r0, #8]
 800c94e:	6005      	str	r5, [r0, #0]
 800c950:	60c5      	str	r5, [r0, #12]
 800c952:	69f5      	ldr	r5, [r6, #28]
 800c954:	68eb      	ldr	r3, [r5, #12]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d013      	beq.n	800c982 <_Balloc+0x5a>
 800c95a:	69f3      	ldr	r3, [r6, #28]
 800c95c:	00a2      	lsls	r2, r4, #2
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	189b      	adds	r3, r3, r2
 800c962:	6818      	ldr	r0, [r3, #0]
 800c964:	2800      	cmp	r0, #0
 800c966:	d118      	bne.n	800c99a <_Balloc+0x72>
 800c968:	2101      	movs	r1, #1
 800c96a:	000d      	movs	r5, r1
 800c96c:	40a5      	lsls	r5, r4
 800c96e:	1d6a      	adds	r2, r5, #5
 800c970:	0030      	movs	r0, r6
 800c972:	0092      	lsls	r2, r2, #2
 800c974:	f001 fcfa 	bl	800e36c <_calloc_r>
 800c978:	2800      	cmp	r0, #0
 800c97a:	d00c      	beq.n	800c996 <_Balloc+0x6e>
 800c97c:	6044      	str	r4, [r0, #4]
 800c97e:	6085      	str	r5, [r0, #8]
 800c980:	e00d      	b.n	800c99e <_Balloc+0x76>
 800c982:	2221      	movs	r2, #33	@ 0x21
 800c984:	2104      	movs	r1, #4
 800c986:	0030      	movs	r0, r6
 800c988:	f001 fcf0 	bl	800e36c <_calloc_r>
 800c98c:	69f3      	ldr	r3, [r6, #28]
 800c98e:	60e8      	str	r0, [r5, #12]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1e1      	bne.n	800c95a <_Balloc+0x32>
 800c996:	2000      	movs	r0, #0
 800c998:	bd70      	pop	{r4, r5, r6, pc}
 800c99a:	6802      	ldr	r2, [r0, #0]
 800c99c:	601a      	str	r2, [r3, #0]
 800c99e:	2300      	movs	r3, #0
 800c9a0:	6103      	str	r3, [r0, #16]
 800c9a2:	60c3      	str	r3, [r0, #12]
 800c9a4:	e7f8      	b.n	800c998 <_Balloc+0x70>
 800c9a6:	46c0      	nop			@ (mov r8, r8)
 800c9a8:	0800e80c 	.word	0x0800e80c
 800c9ac:	0800e8ec 	.word	0x0800e8ec

0800c9b0 <_Bfree>:
 800c9b0:	b570      	push	{r4, r5, r6, lr}
 800c9b2:	69c6      	ldr	r6, [r0, #28]
 800c9b4:	0005      	movs	r5, r0
 800c9b6:	000c      	movs	r4, r1
 800c9b8:	2e00      	cmp	r6, #0
 800c9ba:	d10e      	bne.n	800c9da <_Bfree+0x2a>
 800c9bc:	2010      	movs	r0, #16
 800c9be:	f7ff fee5 	bl	800c78c <malloc>
 800c9c2:	1e02      	subs	r2, r0, #0
 800c9c4:	61e8      	str	r0, [r5, #28]
 800c9c6:	d104      	bne.n	800c9d2 <_Bfree+0x22>
 800c9c8:	218f      	movs	r1, #143	@ 0x8f
 800c9ca:	4b09      	ldr	r3, [pc, #36]	@ (800c9f0 <_Bfree+0x40>)
 800c9cc:	4809      	ldr	r0, [pc, #36]	@ (800c9f4 <_Bfree+0x44>)
 800c9ce:	f001 fcaf 	bl	800e330 <__assert_func>
 800c9d2:	6046      	str	r6, [r0, #4]
 800c9d4:	6086      	str	r6, [r0, #8]
 800c9d6:	6006      	str	r6, [r0, #0]
 800c9d8:	60c6      	str	r6, [r0, #12]
 800c9da:	2c00      	cmp	r4, #0
 800c9dc:	d007      	beq.n	800c9ee <_Bfree+0x3e>
 800c9de:	69eb      	ldr	r3, [r5, #28]
 800c9e0:	6862      	ldr	r2, [r4, #4]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	0092      	lsls	r2, r2, #2
 800c9e6:	189b      	adds	r3, r3, r2
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	6022      	str	r2, [r4, #0]
 800c9ec:	601c      	str	r4, [r3, #0]
 800c9ee:	bd70      	pop	{r4, r5, r6, pc}
 800c9f0:	0800e80c 	.word	0x0800e80c
 800c9f4:	0800e8ec 	.word	0x0800e8ec

0800c9f8 <__multadd>:
 800c9f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9fa:	000f      	movs	r7, r1
 800c9fc:	9001      	str	r0, [sp, #4]
 800c9fe:	000c      	movs	r4, r1
 800ca00:	001e      	movs	r6, r3
 800ca02:	2000      	movs	r0, #0
 800ca04:	690d      	ldr	r5, [r1, #16]
 800ca06:	3714      	adds	r7, #20
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	3001      	adds	r0, #1
 800ca0c:	b299      	uxth	r1, r3
 800ca0e:	4351      	muls	r1, r2
 800ca10:	0c1b      	lsrs	r3, r3, #16
 800ca12:	4353      	muls	r3, r2
 800ca14:	1989      	adds	r1, r1, r6
 800ca16:	0c0e      	lsrs	r6, r1, #16
 800ca18:	199b      	adds	r3, r3, r6
 800ca1a:	0c1e      	lsrs	r6, r3, #16
 800ca1c:	b289      	uxth	r1, r1
 800ca1e:	041b      	lsls	r3, r3, #16
 800ca20:	185b      	adds	r3, r3, r1
 800ca22:	c708      	stmia	r7!, {r3}
 800ca24:	4285      	cmp	r5, r0
 800ca26:	dcef      	bgt.n	800ca08 <__multadd+0x10>
 800ca28:	2e00      	cmp	r6, #0
 800ca2a:	d022      	beq.n	800ca72 <__multadd+0x7a>
 800ca2c:	68a3      	ldr	r3, [r4, #8]
 800ca2e:	42ab      	cmp	r3, r5
 800ca30:	dc19      	bgt.n	800ca66 <__multadd+0x6e>
 800ca32:	6861      	ldr	r1, [r4, #4]
 800ca34:	9801      	ldr	r0, [sp, #4]
 800ca36:	3101      	adds	r1, #1
 800ca38:	f7ff ff76 	bl	800c928 <_Balloc>
 800ca3c:	1e07      	subs	r7, r0, #0
 800ca3e:	d105      	bne.n	800ca4c <__multadd+0x54>
 800ca40:	003a      	movs	r2, r7
 800ca42:	21ba      	movs	r1, #186	@ 0xba
 800ca44:	4b0c      	ldr	r3, [pc, #48]	@ (800ca78 <__multadd+0x80>)
 800ca46:	480d      	ldr	r0, [pc, #52]	@ (800ca7c <__multadd+0x84>)
 800ca48:	f001 fc72 	bl	800e330 <__assert_func>
 800ca4c:	0021      	movs	r1, r4
 800ca4e:	6922      	ldr	r2, [r4, #16]
 800ca50:	310c      	adds	r1, #12
 800ca52:	3202      	adds	r2, #2
 800ca54:	0092      	lsls	r2, r2, #2
 800ca56:	300c      	adds	r0, #12
 800ca58:	f7fe fc5e 	bl	800b318 <memcpy>
 800ca5c:	0021      	movs	r1, r4
 800ca5e:	9801      	ldr	r0, [sp, #4]
 800ca60:	f7ff ffa6 	bl	800c9b0 <_Bfree>
 800ca64:	003c      	movs	r4, r7
 800ca66:	1d2b      	adds	r3, r5, #4
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	18e3      	adds	r3, r4, r3
 800ca6c:	3501      	adds	r5, #1
 800ca6e:	605e      	str	r6, [r3, #4]
 800ca70:	6125      	str	r5, [r4, #16]
 800ca72:	0020      	movs	r0, r4
 800ca74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca76:	46c0      	nop			@ (mov r8, r8)
 800ca78:	0800e87b 	.word	0x0800e87b
 800ca7c:	0800e8ec 	.word	0x0800e8ec

0800ca80 <__s2b>:
 800ca80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca82:	0007      	movs	r7, r0
 800ca84:	0018      	movs	r0, r3
 800ca86:	000c      	movs	r4, r1
 800ca88:	3008      	adds	r0, #8
 800ca8a:	2109      	movs	r1, #9
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	0015      	movs	r5, r2
 800ca90:	f7f3 fbea 	bl	8000268 <__divsi3>
 800ca94:	2301      	movs	r3, #1
 800ca96:	2100      	movs	r1, #0
 800ca98:	4283      	cmp	r3, r0
 800ca9a:	db0a      	blt.n	800cab2 <__s2b+0x32>
 800ca9c:	0038      	movs	r0, r7
 800ca9e:	f7ff ff43 	bl	800c928 <_Balloc>
 800caa2:	1e01      	subs	r1, r0, #0
 800caa4:	d108      	bne.n	800cab8 <__s2b+0x38>
 800caa6:	000a      	movs	r2, r1
 800caa8:	4b19      	ldr	r3, [pc, #100]	@ (800cb10 <__s2b+0x90>)
 800caaa:	481a      	ldr	r0, [pc, #104]	@ (800cb14 <__s2b+0x94>)
 800caac:	31d3      	adds	r1, #211	@ 0xd3
 800caae:	f001 fc3f 	bl	800e330 <__assert_func>
 800cab2:	005b      	lsls	r3, r3, #1
 800cab4:	3101      	adds	r1, #1
 800cab6:	e7ef      	b.n	800ca98 <__s2b+0x18>
 800cab8:	9b08      	ldr	r3, [sp, #32]
 800caba:	6143      	str	r3, [r0, #20]
 800cabc:	2301      	movs	r3, #1
 800cabe:	6103      	str	r3, [r0, #16]
 800cac0:	2d09      	cmp	r5, #9
 800cac2:	dd18      	ble.n	800caf6 <__s2b+0x76>
 800cac4:	0023      	movs	r3, r4
 800cac6:	3309      	adds	r3, #9
 800cac8:	001e      	movs	r6, r3
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	1964      	adds	r4, r4, r5
 800cace:	7833      	ldrb	r3, [r6, #0]
 800cad0:	220a      	movs	r2, #10
 800cad2:	0038      	movs	r0, r7
 800cad4:	3b30      	subs	r3, #48	@ 0x30
 800cad6:	f7ff ff8f 	bl	800c9f8 <__multadd>
 800cada:	3601      	adds	r6, #1
 800cadc:	0001      	movs	r1, r0
 800cade:	42a6      	cmp	r6, r4
 800cae0:	d1f5      	bne.n	800cace <__s2b+0x4e>
 800cae2:	002c      	movs	r4, r5
 800cae4:	9b00      	ldr	r3, [sp, #0]
 800cae6:	3c08      	subs	r4, #8
 800cae8:	191c      	adds	r4, r3, r4
 800caea:	002e      	movs	r6, r5
 800caec:	9b01      	ldr	r3, [sp, #4]
 800caee:	429e      	cmp	r6, r3
 800caf0:	db04      	blt.n	800cafc <__s2b+0x7c>
 800caf2:	0008      	movs	r0, r1
 800caf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800caf6:	2509      	movs	r5, #9
 800caf8:	340a      	adds	r4, #10
 800cafa:	e7f6      	b.n	800caea <__s2b+0x6a>
 800cafc:	1b63      	subs	r3, r4, r5
 800cafe:	5d9b      	ldrb	r3, [r3, r6]
 800cb00:	220a      	movs	r2, #10
 800cb02:	0038      	movs	r0, r7
 800cb04:	3b30      	subs	r3, #48	@ 0x30
 800cb06:	f7ff ff77 	bl	800c9f8 <__multadd>
 800cb0a:	3601      	adds	r6, #1
 800cb0c:	0001      	movs	r1, r0
 800cb0e:	e7ed      	b.n	800caec <__s2b+0x6c>
 800cb10:	0800e87b 	.word	0x0800e87b
 800cb14:	0800e8ec 	.word	0x0800e8ec

0800cb18 <__hi0bits>:
 800cb18:	2280      	movs	r2, #128	@ 0x80
 800cb1a:	0003      	movs	r3, r0
 800cb1c:	0252      	lsls	r2, r2, #9
 800cb1e:	2000      	movs	r0, #0
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d201      	bcs.n	800cb28 <__hi0bits+0x10>
 800cb24:	041b      	lsls	r3, r3, #16
 800cb26:	3010      	adds	r0, #16
 800cb28:	2280      	movs	r2, #128	@ 0x80
 800cb2a:	0452      	lsls	r2, r2, #17
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d201      	bcs.n	800cb34 <__hi0bits+0x1c>
 800cb30:	3008      	adds	r0, #8
 800cb32:	021b      	lsls	r3, r3, #8
 800cb34:	2280      	movs	r2, #128	@ 0x80
 800cb36:	0552      	lsls	r2, r2, #21
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d201      	bcs.n	800cb40 <__hi0bits+0x28>
 800cb3c:	3004      	adds	r0, #4
 800cb3e:	011b      	lsls	r3, r3, #4
 800cb40:	2280      	movs	r2, #128	@ 0x80
 800cb42:	05d2      	lsls	r2, r2, #23
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d201      	bcs.n	800cb4c <__hi0bits+0x34>
 800cb48:	3002      	adds	r0, #2
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	db03      	blt.n	800cb58 <__hi0bits+0x40>
 800cb50:	3001      	adds	r0, #1
 800cb52:	4213      	tst	r3, r2
 800cb54:	d100      	bne.n	800cb58 <__hi0bits+0x40>
 800cb56:	2020      	movs	r0, #32
 800cb58:	4770      	bx	lr

0800cb5a <__lo0bits>:
 800cb5a:	6803      	ldr	r3, [r0, #0]
 800cb5c:	0001      	movs	r1, r0
 800cb5e:	2207      	movs	r2, #7
 800cb60:	0018      	movs	r0, r3
 800cb62:	4010      	ands	r0, r2
 800cb64:	4213      	tst	r3, r2
 800cb66:	d00d      	beq.n	800cb84 <__lo0bits+0x2a>
 800cb68:	3a06      	subs	r2, #6
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	4213      	tst	r3, r2
 800cb6e:	d105      	bne.n	800cb7c <__lo0bits+0x22>
 800cb70:	3002      	adds	r0, #2
 800cb72:	4203      	tst	r3, r0
 800cb74:	d003      	beq.n	800cb7e <__lo0bits+0x24>
 800cb76:	40d3      	lsrs	r3, r2
 800cb78:	0010      	movs	r0, r2
 800cb7a:	600b      	str	r3, [r1, #0]
 800cb7c:	4770      	bx	lr
 800cb7e:	089b      	lsrs	r3, r3, #2
 800cb80:	600b      	str	r3, [r1, #0]
 800cb82:	e7fb      	b.n	800cb7c <__lo0bits+0x22>
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	2a00      	cmp	r2, #0
 800cb88:	d101      	bne.n	800cb8e <__lo0bits+0x34>
 800cb8a:	2010      	movs	r0, #16
 800cb8c:	0c1b      	lsrs	r3, r3, #16
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	2a00      	cmp	r2, #0
 800cb92:	d101      	bne.n	800cb98 <__lo0bits+0x3e>
 800cb94:	3008      	adds	r0, #8
 800cb96:	0a1b      	lsrs	r3, r3, #8
 800cb98:	071a      	lsls	r2, r3, #28
 800cb9a:	d101      	bne.n	800cba0 <__lo0bits+0x46>
 800cb9c:	3004      	adds	r0, #4
 800cb9e:	091b      	lsrs	r3, r3, #4
 800cba0:	079a      	lsls	r2, r3, #30
 800cba2:	d101      	bne.n	800cba8 <__lo0bits+0x4e>
 800cba4:	3002      	adds	r0, #2
 800cba6:	089b      	lsrs	r3, r3, #2
 800cba8:	07da      	lsls	r2, r3, #31
 800cbaa:	d4e9      	bmi.n	800cb80 <__lo0bits+0x26>
 800cbac:	3001      	adds	r0, #1
 800cbae:	085b      	lsrs	r3, r3, #1
 800cbb0:	d1e6      	bne.n	800cb80 <__lo0bits+0x26>
 800cbb2:	2020      	movs	r0, #32
 800cbb4:	e7e2      	b.n	800cb7c <__lo0bits+0x22>
	...

0800cbb8 <__i2b>:
 800cbb8:	b510      	push	{r4, lr}
 800cbba:	000c      	movs	r4, r1
 800cbbc:	2101      	movs	r1, #1
 800cbbe:	f7ff feb3 	bl	800c928 <_Balloc>
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	d107      	bne.n	800cbd6 <__i2b+0x1e>
 800cbc6:	2146      	movs	r1, #70	@ 0x46
 800cbc8:	4c05      	ldr	r4, [pc, #20]	@ (800cbe0 <__i2b+0x28>)
 800cbca:	0002      	movs	r2, r0
 800cbcc:	4b05      	ldr	r3, [pc, #20]	@ (800cbe4 <__i2b+0x2c>)
 800cbce:	0020      	movs	r0, r4
 800cbd0:	31ff      	adds	r1, #255	@ 0xff
 800cbd2:	f001 fbad 	bl	800e330 <__assert_func>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	6144      	str	r4, [r0, #20]
 800cbda:	6103      	str	r3, [r0, #16]
 800cbdc:	bd10      	pop	{r4, pc}
 800cbde:	46c0      	nop			@ (mov r8, r8)
 800cbe0:	0800e8ec 	.word	0x0800e8ec
 800cbe4:	0800e87b 	.word	0x0800e87b

0800cbe8 <__multiply>:
 800cbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbea:	0014      	movs	r4, r2
 800cbec:	690a      	ldr	r2, [r1, #16]
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	000d      	movs	r5, r1
 800cbf2:	b08b      	sub	sp, #44	@ 0x2c
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	db02      	blt.n	800cbfe <__multiply+0x16>
 800cbf8:	0023      	movs	r3, r4
 800cbfa:	000c      	movs	r4, r1
 800cbfc:	001d      	movs	r5, r3
 800cbfe:	6927      	ldr	r7, [r4, #16]
 800cc00:	692e      	ldr	r6, [r5, #16]
 800cc02:	6861      	ldr	r1, [r4, #4]
 800cc04:	19bb      	adds	r3, r7, r6
 800cc06:	9303      	str	r3, [sp, #12]
 800cc08:	68a3      	ldr	r3, [r4, #8]
 800cc0a:	19ba      	adds	r2, r7, r6
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	da00      	bge.n	800cc12 <__multiply+0x2a>
 800cc10:	3101      	adds	r1, #1
 800cc12:	f7ff fe89 	bl	800c928 <_Balloc>
 800cc16:	9002      	str	r0, [sp, #8]
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d106      	bne.n	800cc2a <__multiply+0x42>
 800cc1c:	21b1      	movs	r1, #177	@ 0xb1
 800cc1e:	4b49      	ldr	r3, [pc, #292]	@ (800cd44 <__multiply+0x15c>)
 800cc20:	4849      	ldr	r0, [pc, #292]	@ (800cd48 <__multiply+0x160>)
 800cc22:	9a02      	ldr	r2, [sp, #8]
 800cc24:	0049      	lsls	r1, r1, #1
 800cc26:	f001 fb83 	bl	800e330 <__assert_func>
 800cc2a:	9b02      	ldr	r3, [sp, #8]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	3314      	adds	r3, #20
 800cc30:	469c      	mov	ip, r3
 800cc32:	19bb      	adds	r3, r7, r6
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	4463      	add	r3, ip
 800cc38:	9304      	str	r3, [sp, #16]
 800cc3a:	4663      	mov	r3, ip
 800cc3c:	9904      	ldr	r1, [sp, #16]
 800cc3e:	428b      	cmp	r3, r1
 800cc40:	d32a      	bcc.n	800cc98 <__multiply+0xb0>
 800cc42:	0023      	movs	r3, r4
 800cc44:	00bf      	lsls	r7, r7, #2
 800cc46:	3314      	adds	r3, #20
 800cc48:	3514      	adds	r5, #20
 800cc4a:	9308      	str	r3, [sp, #32]
 800cc4c:	00b6      	lsls	r6, r6, #2
 800cc4e:	19db      	adds	r3, r3, r7
 800cc50:	9305      	str	r3, [sp, #20]
 800cc52:	19ab      	adds	r3, r5, r6
 800cc54:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc56:	2304      	movs	r3, #4
 800cc58:	9306      	str	r3, [sp, #24]
 800cc5a:	0023      	movs	r3, r4
 800cc5c:	9a05      	ldr	r2, [sp, #20]
 800cc5e:	3315      	adds	r3, #21
 800cc60:	9501      	str	r5, [sp, #4]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d305      	bcc.n	800cc72 <__multiply+0x8a>
 800cc66:	1b13      	subs	r3, r2, r4
 800cc68:	3b15      	subs	r3, #21
 800cc6a:	089b      	lsrs	r3, r3, #2
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	9306      	str	r3, [sp, #24]
 800cc72:	9b01      	ldr	r3, [sp, #4]
 800cc74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d310      	bcc.n	800cc9c <__multiply+0xb4>
 800cc7a:	9b03      	ldr	r3, [sp, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	dd05      	ble.n	800cc8c <__multiply+0xa4>
 800cc80:	9b04      	ldr	r3, [sp, #16]
 800cc82:	3b04      	subs	r3, #4
 800cc84:	9304      	str	r3, [sp, #16]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d056      	beq.n	800cd3a <__multiply+0x152>
 800cc8c:	9b02      	ldr	r3, [sp, #8]
 800cc8e:	9a03      	ldr	r2, [sp, #12]
 800cc90:	0018      	movs	r0, r3
 800cc92:	611a      	str	r2, [r3, #16]
 800cc94:	b00b      	add	sp, #44	@ 0x2c
 800cc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc98:	c304      	stmia	r3!, {r2}
 800cc9a:	e7cf      	b.n	800cc3c <__multiply+0x54>
 800cc9c:	9b01      	ldr	r3, [sp, #4]
 800cc9e:	6818      	ldr	r0, [r3, #0]
 800cca0:	b280      	uxth	r0, r0
 800cca2:	2800      	cmp	r0, #0
 800cca4:	d01e      	beq.n	800cce4 <__multiply+0xfc>
 800cca6:	4667      	mov	r7, ip
 800cca8:	2500      	movs	r5, #0
 800ccaa:	9e08      	ldr	r6, [sp, #32]
 800ccac:	ce02      	ldmia	r6!, {r1}
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	9307      	str	r3, [sp, #28]
 800ccb2:	b28b      	uxth	r3, r1
 800ccb4:	4343      	muls	r3, r0
 800ccb6:	001a      	movs	r2, r3
 800ccb8:	466b      	mov	r3, sp
 800ccba:	0c09      	lsrs	r1, r1, #16
 800ccbc:	8b9b      	ldrh	r3, [r3, #28]
 800ccbe:	4341      	muls	r1, r0
 800ccc0:	18d3      	adds	r3, r2, r3
 800ccc2:	9a07      	ldr	r2, [sp, #28]
 800ccc4:	195b      	adds	r3, r3, r5
 800ccc6:	0c12      	lsrs	r2, r2, #16
 800ccc8:	1889      	adds	r1, r1, r2
 800ccca:	0c1a      	lsrs	r2, r3, #16
 800cccc:	188a      	adds	r2, r1, r2
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	0c15      	lsrs	r5, r2, #16
 800ccd2:	0412      	lsls	r2, r2, #16
 800ccd4:	431a      	orrs	r2, r3
 800ccd6:	9b05      	ldr	r3, [sp, #20]
 800ccd8:	c704      	stmia	r7!, {r2}
 800ccda:	42b3      	cmp	r3, r6
 800ccdc:	d8e6      	bhi.n	800ccac <__multiply+0xc4>
 800ccde:	4663      	mov	r3, ip
 800cce0:	9a06      	ldr	r2, [sp, #24]
 800cce2:	509d      	str	r5, [r3, r2]
 800cce4:	9b01      	ldr	r3, [sp, #4]
 800cce6:	6818      	ldr	r0, [r3, #0]
 800cce8:	0c00      	lsrs	r0, r0, #16
 800ccea:	d020      	beq.n	800cd2e <__multiply+0x146>
 800ccec:	4663      	mov	r3, ip
 800ccee:	0025      	movs	r5, r4
 800ccf0:	4661      	mov	r1, ip
 800ccf2:	2700      	movs	r7, #0
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	3514      	adds	r5, #20
 800ccf8:	682a      	ldr	r2, [r5, #0]
 800ccfa:	680e      	ldr	r6, [r1, #0]
 800ccfc:	b292      	uxth	r2, r2
 800ccfe:	4342      	muls	r2, r0
 800cd00:	0c36      	lsrs	r6, r6, #16
 800cd02:	1992      	adds	r2, r2, r6
 800cd04:	19d2      	adds	r2, r2, r7
 800cd06:	0416      	lsls	r6, r2, #16
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	431e      	orrs	r6, r3
 800cd0c:	600e      	str	r6, [r1, #0]
 800cd0e:	cd40      	ldmia	r5!, {r6}
 800cd10:	684b      	ldr	r3, [r1, #4]
 800cd12:	0c36      	lsrs	r6, r6, #16
 800cd14:	4346      	muls	r6, r0
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	0c12      	lsrs	r2, r2, #16
 800cd1a:	18f3      	adds	r3, r6, r3
 800cd1c:	189b      	adds	r3, r3, r2
 800cd1e:	9a05      	ldr	r2, [sp, #20]
 800cd20:	0c1f      	lsrs	r7, r3, #16
 800cd22:	3104      	adds	r1, #4
 800cd24:	42aa      	cmp	r2, r5
 800cd26:	d8e7      	bhi.n	800ccf8 <__multiply+0x110>
 800cd28:	4662      	mov	r2, ip
 800cd2a:	9906      	ldr	r1, [sp, #24]
 800cd2c:	5053      	str	r3, [r2, r1]
 800cd2e:	9b01      	ldr	r3, [sp, #4]
 800cd30:	3304      	adds	r3, #4
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	2304      	movs	r3, #4
 800cd36:	449c      	add	ip, r3
 800cd38:	e79b      	b.n	800cc72 <__multiply+0x8a>
 800cd3a:	9b03      	ldr	r3, [sp, #12]
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	9303      	str	r3, [sp, #12]
 800cd40:	e79b      	b.n	800cc7a <__multiply+0x92>
 800cd42:	46c0      	nop			@ (mov r8, r8)
 800cd44:	0800e87b 	.word	0x0800e87b
 800cd48:	0800e8ec 	.word	0x0800e8ec

0800cd4c <__pow5mult>:
 800cd4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd4e:	2303      	movs	r3, #3
 800cd50:	0015      	movs	r5, r2
 800cd52:	0007      	movs	r7, r0
 800cd54:	000e      	movs	r6, r1
 800cd56:	401a      	ands	r2, r3
 800cd58:	421d      	tst	r5, r3
 800cd5a:	d008      	beq.n	800cd6e <__pow5mult+0x22>
 800cd5c:	4925      	ldr	r1, [pc, #148]	@ (800cdf4 <__pow5mult+0xa8>)
 800cd5e:	3a01      	subs	r2, #1
 800cd60:	0092      	lsls	r2, r2, #2
 800cd62:	5852      	ldr	r2, [r2, r1]
 800cd64:	2300      	movs	r3, #0
 800cd66:	0031      	movs	r1, r6
 800cd68:	f7ff fe46 	bl	800c9f8 <__multadd>
 800cd6c:	0006      	movs	r6, r0
 800cd6e:	10ad      	asrs	r5, r5, #2
 800cd70:	d03d      	beq.n	800cdee <__pow5mult+0xa2>
 800cd72:	69fc      	ldr	r4, [r7, #28]
 800cd74:	2c00      	cmp	r4, #0
 800cd76:	d10f      	bne.n	800cd98 <__pow5mult+0x4c>
 800cd78:	2010      	movs	r0, #16
 800cd7a:	f7ff fd07 	bl	800c78c <malloc>
 800cd7e:	1e02      	subs	r2, r0, #0
 800cd80:	61f8      	str	r0, [r7, #28]
 800cd82:	d105      	bne.n	800cd90 <__pow5mult+0x44>
 800cd84:	21b4      	movs	r1, #180	@ 0xb4
 800cd86:	4b1c      	ldr	r3, [pc, #112]	@ (800cdf8 <__pow5mult+0xac>)
 800cd88:	481c      	ldr	r0, [pc, #112]	@ (800cdfc <__pow5mult+0xb0>)
 800cd8a:	31ff      	adds	r1, #255	@ 0xff
 800cd8c:	f001 fad0 	bl	800e330 <__assert_func>
 800cd90:	6044      	str	r4, [r0, #4]
 800cd92:	6084      	str	r4, [r0, #8]
 800cd94:	6004      	str	r4, [r0, #0]
 800cd96:	60c4      	str	r4, [r0, #12]
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	689c      	ldr	r4, [r3, #8]
 800cd9c:	9301      	str	r3, [sp, #4]
 800cd9e:	2c00      	cmp	r4, #0
 800cda0:	d108      	bne.n	800cdb4 <__pow5mult+0x68>
 800cda2:	0038      	movs	r0, r7
 800cda4:	4916      	ldr	r1, [pc, #88]	@ (800ce00 <__pow5mult+0xb4>)
 800cda6:	f7ff ff07 	bl	800cbb8 <__i2b>
 800cdaa:	9b01      	ldr	r3, [sp, #4]
 800cdac:	0004      	movs	r4, r0
 800cdae:	6098      	str	r0, [r3, #8]
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	6003      	str	r3, [r0, #0]
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	421d      	tst	r5, r3
 800cdb8:	d00a      	beq.n	800cdd0 <__pow5mult+0x84>
 800cdba:	0031      	movs	r1, r6
 800cdbc:	0022      	movs	r2, r4
 800cdbe:	0038      	movs	r0, r7
 800cdc0:	f7ff ff12 	bl	800cbe8 <__multiply>
 800cdc4:	0031      	movs	r1, r6
 800cdc6:	9001      	str	r0, [sp, #4]
 800cdc8:	0038      	movs	r0, r7
 800cdca:	f7ff fdf1 	bl	800c9b0 <_Bfree>
 800cdce:	9e01      	ldr	r6, [sp, #4]
 800cdd0:	106d      	asrs	r5, r5, #1
 800cdd2:	d00c      	beq.n	800cdee <__pow5mult+0xa2>
 800cdd4:	6820      	ldr	r0, [r4, #0]
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d107      	bne.n	800cdea <__pow5mult+0x9e>
 800cdda:	0022      	movs	r2, r4
 800cddc:	0021      	movs	r1, r4
 800cdde:	0038      	movs	r0, r7
 800cde0:	f7ff ff02 	bl	800cbe8 <__multiply>
 800cde4:	2300      	movs	r3, #0
 800cde6:	6020      	str	r0, [r4, #0]
 800cde8:	6003      	str	r3, [r0, #0]
 800cdea:	0004      	movs	r4, r0
 800cdec:	e7e2      	b.n	800cdb4 <__pow5mult+0x68>
 800cdee:	0030      	movs	r0, r6
 800cdf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cdf2:	46c0      	nop			@ (mov r8, r8)
 800cdf4:	0800e948 	.word	0x0800e948
 800cdf8:	0800e80c 	.word	0x0800e80c
 800cdfc:	0800e8ec 	.word	0x0800e8ec
 800ce00:	00000271 	.word	0x00000271

0800ce04 <__lshift>:
 800ce04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce06:	000c      	movs	r4, r1
 800ce08:	0016      	movs	r6, r2
 800ce0a:	6923      	ldr	r3, [r4, #16]
 800ce0c:	1157      	asrs	r7, r2, #5
 800ce0e:	b085      	sub	sp, #20
 800ce10:	18fb      	adds	r3, r7, r3
 800ce12:	9301      	str	r3, [sp, #4]
 800ce14:	3301      	adds	r3, #1
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	6849      	ldr	r1, [r1, #4]
 800ce1a:	68a3      	ldr	r3, [r4, #8]
 800ce1c:	9002      	str	r0, [sp, #8]
 800ce1e:	9a00      	ldr	r2, [sp, #0]
 800ce20:	4293      	cmp	r3, r2
 800ce22:	db10      	blt.n	800ce46 <__lshift+0x42>
 800ce24:	9802      	ldr	r0, [sp, #8]
 800ce26:	f7ff fd7f 	bl	800c928 <_Balloc>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	0001      	movs	r1, r0
 800ce2e:	0005      	movs	r5, r0
 800ce30:	001a      	movs	r2, r3
 800ce32:	3114      	adds	r1, #20
 800ce34:	4298      	cmp	r0, r3
 800ce36:	d10c      	bne.n	800ce52 <__lshift+0x4e>
 800ce38:	21ef      	movs	r1, #239	@ 0xef
 800ce3a:	002a      	movs	r2, r5
 800ce3c:	4b25      	ldr	r3, [pc, #148]	@ (800ced4 <__lshift+0xd0>)
 800ce3e:	4826      	ldr	r0, [pc, #152]	@ (800ced8 <__lshift+0xd4>)
 800ce40:	0049      	lsls	r1, r1, #1
 800ce42:	f001 fa75 	bl	800e330 <__assert_func>
 800ce46:	3101      	adds	r1, #1
 800ce48:	005b      	lsls	r3, r3, #1
 800ce4a:	e7e8      	b.n	800ce1e <__lshift+0x1a>
 800ce4c:	0098      	lsls	r0, r3, #2
 800ce4e:	500a      	str	r2, [r1, r0]
 800ce50:	3301      	adds	r3, #1
 800ce52:	42bb      	cmp	r3, r7
 800ce54:	dbfa      	blt.n	800ce4c <__lshift+0x48>
 800ce56:	43fb      	mvns	r3, r7
 800ce58:	17db      	asrs	r3, r3, #31
 800ce5a:	401f      	ands	r7, r3
 800ce5c:	00bf      	lsls	r7, r7, #2
 800ce5e:	0023      	movs	r3, r4
 800ce60:	201f      	movs	r0, #31
 800ce62:	19c9      	adds	r1, r1, r7
 800ce64:	0037      	movs	r7, r6
 800ce66:	6922      	ldr	r2, [r4, #16]
 800ce68:	3314      	adds	r3, #20
 800ce6a:	0092      	lsls	r2, r2, #2
 800ce6c:	189a      	adds	r2, r3, r2
 800ce6e:	4007      	ands	r7, r0
 800ce70:	4206      	tst	r6, r0
 800ce72:	d029      	beq.n	800cec8 <__lshift+0xc4>
 800ce74:	3001      	adds	r0, #1
 800ce76:	1bc0      	subs	r0, r0, r7
 800ce78:	9003      	str	r0, [sp, #12]
 800ce7a:	468c      	mov	ip, r1
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	681e      	ldr	r6, [r3, #0]
 800ce80:	40be      	lsls	r6, r7
 800ce82:	4306      	orrs	r6, r0
 800ce84:	4660      	mov	r0, ip
 800ce86:	c040      	stmia	r0!, {r6}
 800ce88:	4684      	mov	ip, r0
 800ce8a:	9e03      	ldr	r6, [sp, #12]
 800ce8c:	cb01      	ldmia	r3!, {r0}
 800ce8e:	40f0      	lsrs	r0, r6
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d8f4      	bhi.n	800ce7e <__lshift+0x7a>
 800ce94:	0026      	movs	r6, r4
 800ce96:	3615      	adds	r6, #21
 800ce98:	2304      	movs	r3, #4
 800ce9a:	42b2      	cmp	r2, r6
 800ce9c:	d304      	bcc.n	800cea8 <__lshift+0xa4>
 800ce9e:	1b13      	subs	r3, r2, r4
 800cea0:	3b15      	subs	r3, #21
 800cea2:	089b      	lsrs	r3, r3, #2
 800cea4:	3301      	adds	r3, #1
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	50c8      	str	r0, [r1, r3]
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d002      	beq.n	800ceb4 <__lshift+0xb0>
 800ceae:	9b01      	ldr	r3, [sp, #4]
 800ceb0:	3302      	adds	r3, #2
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	9b00      	ldr	r3, [sp, #0]
 800ceb6:	9802      	ldr	r0, [sp, #8]
 800ceb8:	3b01      	subs	r3, #1
 800ceba:	0021      	movs	r1, r4
 800cebc:	612b      	str	r3, [r5, #16]
 800cebe:	f7ff fd77 	bl	800c9b0 <_Bfree>
 800cec2:	0028      	movs	r0, r5
 800cec4:	b005      	add	sp, #20
 800cec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cec8:	cb01      	ldmia	r3!, {r0}
 800ceca:	c101      	stmia	r1!, {r0}
 800cecc:	429a      	cmp	r2, r3
 800cece:	d8fb      	bhi.n	800cec8 <__lshift+0xc4>
 800ced0:	e7f0      	b.n	800ceb4 <__lshift+0xb0>
 800ced2:	46c0      	nop			@ (mov r8, r8)
 800ced4:	0800e87b 	.word	0x0800e87b
 800ced8:	0800e8ec 	.word	0x0800e8ec

0800cedc <__mcmp>:
 800cedc:	b530      	push	{r4, r5, lr}
 800cede:	690b      	ldr	r3, [r1, #16]
 800cee0:	6904      	ldr	r4, [r0, #16]
 800cee2:	0002      	movs	r2, r0
 800cee4:	1ae0      	subs	r0, r4, r3
 800cee6:	429c      	cmp	r4, r3
 800cee8:	d10f      	bne.n	800cf0a <__mcmp+0x2e>
 800ceea:	3214      	adds	r2, #20
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	3114      	adds	r1, #20
 800cef0:	0014      	movs	r4, r2
 800cef2:	18c9      	adds	r1, r1, r3
 800cef4:	18d2      	adds	r2, r2, r3
 800cef6:	3a04      	subs	r2, #4
 800cef8:	3904      	subs	r1, #4
 800cefa:	6815      	ldr	r5, [r2, #0]
 800cefc:	680b      	ldr	r3, [r1, #0]
 800cefe:	429d      	cmp	r5, r3
 800cf00:	d004      	beq.n	800cf0c <__mcmp+0x30>
 800cf02:	2001      	movs	r0, #1
 800cf04:	429d      	cmp	r5, r3
 800cf06:	d200      	bcs.n	800cf0a <__mcmp+0x2e>
 800cf08:	3802      	subs	r0, #2
 800cf0a:	bd30      	pop	{r4, r5, pc}
 800cf0c:	4294      	cmp	r4, r2
 800cf0e:	d3f2      	bcc.n	800cef6 <__mcmp+0x1a>
 800cf10:	e7fb      	b.n	800cf0a <__mcmp+0x2e>
	...

0800cf14 <__mdiff>:
 800cf14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf16:	000c      	movs	r4, r1
 800cf18:	b087      	sub	sp, #28
 800cf1a:	9000      	str	r0, [sp, #0]
 800cf1c:	0011      	movs	r1, r2
 800cf1e:	0020      	movs	r0, r4
 800cf20:	0017      	movs	r7, r2
 800cf22:	f7ff ffdb 	bl	800cedc <__mcmp>
 800cf26:	1e05      	subs	r5, r0, #0
 800cf28:	d110      	bne.n	800cf4c <__mdiff+0x38>
 800cf2a:	0001      	movs	r1, r0
 800cf2c:	9800      	ldr	r0, [sp, #0]
 800cf2e:	f7ff fcfb 	bl	800c928 <_Balloc>
 800cf32:	1e02      	subs	r2, r0, #0
 800cf34:	d104      	bne.n	800cf40 <__mdiff+0x2c>
 800cf36:	4b40      	ldr	r3, [pc, #256]	@ (800d038 <__mdiff+0x124>)
 800cf38:	4840      	ldr	r0, [pc, #256]	@ (800d03c <__mdiff+0x128>)
 800cf3a:	4941      	ldr	r1, [pc, #260]	@ (800d040 <__mdiff+0x12c>)
 800cf3c:	f001 f9f8 	bl	800e330 <__assert_func>
 800cf40:	2301      	movs	r3, #1
 800cf42:	6145      	str	r5, [r0, #20]
 800cf44:	6103      	str	r3, [r0, #16]
 800cf46:	0010      	movs	r0, r2
 800cf48:	b007      	add	sp, #28
 800cf4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf4c:	2600      	movs	r6, #0
 800cf4e:	42b0      	cmp	r0, r6
 800cf50:	da03      	bge.n	800cf5a <__mdiff+0x46>
 800cf52:	0023      	movs	r3, r4
 800cf54:	003c      	movs	r4, r7
 800cf56:	001f      	movs	r7, r3
 800cf58:	3601      	adds	r6, #1
 800cf5a:	6861      	ldr	r1, [r4, #4]
 800cf5c:	9800      	ldr	r0, [sp, #0]
 800cf5e:	f7ff fce3 	bl	800c928 <_Balloc>
 800cf62:	1e02      	subs	r2, r0, #0
 800cf64:	d103      	bne.n	800cf6e <__mdiff+0x5a>
 800cf66:	4b34      	ldr	r3, [pc, #208]	@ (800d038 <__mdiff+0x124>)
 800cf68:	4834      	ldr	r0, [pc, #208]	@ (800d03c <__mdiff+0x128>)
 800cf6a:	4936      	ldr	r1, [pc, #216]	@ (800d044 <__mdiff+0x130>)
 800cf6c:	e7e6      	b.n	800cf3c <__mdiff+0x28>
 800cf6e:	6923      	ldr	r3, [r4, #16]
 800cf70:	3414      	adds	r4, #20
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	18e3      	adds	r3, r4, r3
 800cf78:	0021      	movs	r1, r4
 800cf7a:	9401      	str	r4, [sp, #4]
 800cf7c:	003c      	movs	r4, r7
 800cf7e:	9302      	str	r3, [sp, #8]
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	3414      	adds	r4, #20
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	18e3      	adds	r3, r4, r3
 800cf88:	9303      	str	r3, [sp, #12]
 800cf8a:	0003      	movs	r3, r0
 800cf8c:	60c6      	str	r6, [r0, #12]
 800cf8e:	468c      	mov	ip, r1
 800cf90:	2000      	movs	r0, #0
 800cf92:	3314      	adds	r3, #20
 800cf94:	9304      	str	r3, [sp, #16]
 800cf96:	9305      	str	r3, [sp, #20]
 800cf98:	4663      	mov	r3, ip
 800cf9a:	cb20      	ldmia	r3!, {r5}
 800cf9c:	b2a9      	uxth	r1, r5
 800cf9e:	000e      	movs	r6, r1
 800cfa0:	469c      	mov	ip, r3
 800cfa2:	cc08      	ldmia	r4!, {r3}
 800cfa4:	0c2d      	lsrs	r5, r5, #16
 800cfa6:	b299      	uxth	r1, r3
 800cfa8:	1a71      	subs	r1, r6, r1
 800cfaa:	1809      	adds	r1, r1, r0
 800cfac:	0c1b      	lsrs	r3, r3, #16
 800cfae:	1408      	asrs	r0, r1, #16
 800cfb0:	1aeb      	subs	r3, r5, r3
 800cfb2:	181b      	adds	r3, r3, r0
 800cfb4:	1418      	asrs	r0, r3, #16
 800cfb6:	b289      	uxth	r1, r1
 800cfb8:	041b      	lsls	r3, r3, #16
 800cfba:	4319      	orrs	r1, r3
 800cfbc:	9b05      	ldr	r3, [sp, #20]
 800cfbe:	c302      	stmia	r3!, {r1}
 800cfc0:	9305      	str	r3, [sp, #20]
 800cfc2:	9b03      	ldr	r3, [sp, #12]
 800cfc4:	42a3      	cmp	r3, r4
 800cfc6:	d8e7      	bhi.n	800cf98 <__mdiff+0x84>
 800cfc8:	0039      	movs	r1, r7
 800cfca:	9c03      	ldr	r4, [sp, #12]
 800cfcc:	3115      	adds	r1, #21
 800cfce:	2304      	movs	r3, #4
 800cfd0:	428c      	cmp	r4, r1
 800cfd2:	d304      	bcc.n	800cfde <__mdiff+0xca>
 800cfd4:	1be3      	subs	r3, r4, r7
 800cfd6:	3b15      	subs	r3, #21
 800cfd8:	089b      	lsrs	r3, r3, #2
 800cfda:	3301      	adds	r3, #1
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	9901      	ldr	r1, [sp, #4]
 800cfe0:	18cd      	adds	r5, r1, r3
 800cfe2:	9904      	ldr	r1, [sp, #16]
 800cfe4:	002e      	movs	r6, r5
 800cfe6:	18cb      	adds	r3, r1, r3
 800cfe8:	001f      	movs	r7, r3
 800cfea:	9902      	ldr	r1, [sp, #8]
 800cfec:	428e      	cmp	r6, r1
 800cfee:	d311      	bcc.n	800d014 <__mdiff+0x100>
 800cff0:	9c02      	ldr	r4, [sp, #8]
 800cff2:	1ee9      	subs	r1, r5, #3
 800cff4:	2000      	movs	r0, #0
 800cff6:	428c      	cmp	r4, r1
 800cff8:	d304      	bcc.n	800d004 <__mdiff+0xf0>
 800cffa:	0021      	movs	r1, r4
 800cffc:	3103      	adds	r1, #3
 800cffe:	1b49      	subs	r1, r1, r5
 800d000:	0889      	lsrs	r1, r1, #2
 800d002:	0088      	lsls	r0, r1, #2
 800d004:	181b      	adds	r3, r3, r0
 800d006:	3b04      	subs	r3, #4
 800d008:	6819      	ldr	r1, [r3, #0]
 800d00a:	2900      	cmp	r1, #0
 800d00c:	d010      	beq.n	800d030 <__mdiff+0x11c>
 800d00e:	9b00      	ldr	r3, [sp, #0]
 800d010:	6113      	str	r3, [r2, #16]
 800d012:	e798      	b.n	800cf46 <__mdiff+0x32>
 800d014:	4684      	mov	ip, r0
 800d016:	ce02      	ldmia	r6!, {r1}
 800d018:	b288      	uxth	r0, r1
 800d01a:	4460      	add	r0, ip
 800d01c:	1400      	asrs	r0, r0, #16
 800d01e:	0c0c      	lsrs	r4, r1, #16
 800d020:	1904      	adds	r4, r0, r4
 800d022:	4461      	add	r1, ip
 800d024:	1420      	asrs	r0, r4, #16
 800d026:	b289      	uxth	r1, r1
 800d028:	0424      	lsls	r4, r4, #16
 800d02a:	4321      	orrs	r1, r4
 800d02c:	c702      	stmia	r7!, {r1}
 800d02e:	e7dc      	b.n	800cfea <__mdiff+0xd6>
 800d030:	9900      	ldr	r1, [sp, #0]
 800d032:	3901      	subs	r1, #1
 800d034:	9100      	str	r1, [sp, #0]
 800d036:	e7e6      	b.n	800d006 <__mdiff+0xf2>
 800d038:	0800e87b 	.word	0x0800e87b
 800d03c:	0800e8ec 	.word	0x0800e8ec
 800d040:	00000237 	.word	0x00000237
 800d044:	00000245 	.word	0x00000245

0800d048 <__ulp>:
 800d048:	b510      	push	{r4, lr}
 800d04a:	2400      	movs	r4, #0
 800d04c:	4b0c      	ldr	r3, [pc, #48]	@ (800d080 <__ulp+0x38>)
 800d04e:	4a0d      	ldr	r2, [pc, #52]	@ (800d084 <__ulp+0x3c>)
 800d050:	400b      	ands	r3, r1
 800d052:	189b      	adds	r3, r3, r2
 800d054:	42a3      	cmp	r3, r4
 800d056:	dc06      	bgt.n	800d066 <__ulp+0x1e>
 800d058:	425b      	negs	r3, r3
 800d05a:	151a      	asrs	r2, r3, #20
 800d05c:	2a13      	cmp	r2, #19
 800d05e:	dc05      	bgt.n	800d06c <__ulp+0x24>
 800d060:	2380      	movs	r3, #128	@ 0x80
 800d062:	031b      	lsls	r3, r3, #12
 800d064:	4113      	asrs	r3, r2
 800d066:	0019      	movs	r1, r3
 800d068:	0020      	movs	r0, r4
 800d06a:	bd10      	pop	{r4, pc}
 800d06c:	3a14      	subs	r2, #20
 800d06e:	2401      	movs	r4, #1
 800d070:	2a1e      	cmp	r2, #30
 800d072:	dc02      	bgt.n	800d07a <__ulp+0x32>
 800d074:	2480      	movs	r4, #128	@ 0x80
 800d076:	0624      	lsls	r4, r4, #24
 800d078:	40d4      	lsrs	r4, r2
 800d07a:	2300      	movs	r3, #0
 800d07c:	e7f3      	b.n	800d066 <__ulp+0x1e>
 800d07e:	46c0      	nop			@ (mov r8, r8)
 800d080:	7ff00000 	.word	0x7ff00000
 800d084:	fcc00000 	.word	0xfcc00000

0800d088 <__b2d>:
 800d088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d08a:	0006      	movs	r6, r0
 800d08c:	6903      	ldr	r3, [r0, #16]
 800d08e:	3614      	adds	r6, #20
 800d090:	009b      	lsls	r3, r3, #2
 800d092:	18f3      	adds	r3, r6, r3
 800d094:	1f1d      	subs	r5, r3, #4
 800d096:	682c      	ldr	r4, [r5, #0]
 800d098:	000f      	movs	r7, r1
 800d09a:	0020      	movs	r0, r4
 800d09c:	9301      	str	r3, [sp, #4]
 800d09e:	f7ff fd3b 	bl	800cb18 <__hi0bits>
 800d0a2:	2220      	movs	r2, #32
 800d0a4:	1a12      	subs	r2, r2, r0
 800d0a6:	603a      	str	r2, [r7, #0]
 800d0a8:	0003      	movs	r3, r0
 800d0aa:	4a1c      	ldr	r2, [pc, #112]	@ (800d11c <__b2d+0x94>)
 800d0ac:	280a      	cmp	r0, #10
 800d0ae:	dc15      	bgt.n	800d0dc <__b2d+0x54>
 800d0b0:	210b      	movs	r1, #11
 800d0b2:	0027      	movs	r7, r4
 800d0b4:	1a09      	subs	r1, r1, r0
 800d0b6:	40cf      	lsrs	r7, r1
 800d0b8:	433a      	orrs	r2, r7
 800d0ba:	468c      	mov	ip, r1
 800d0bc:	0011      	movs	r1, r2
 800d0be:	2200      	movs	r2, #0
 800d0c0:	42ae      	cmp	r6, r5
 800d0c2:	d202      	bcs.n	800d0ca <__b2d+0x42>
 800d0c4:	9a01      	ldr	r2, [sp, #4]
 800d0c6:	3a08      	subs	r2, #8
 800d0c8:	6812      	ldr	r2, [r2, #0]
 800d0ca:	3315      	adds	r3, #21
 800d0cc:	409c      	lsls	r4, r3
 800d0ce:	4663      	mov	r3, ip
 800d0d0:	0027      	movs	r7, r4
 800d0d2:	40da      	lsrs	r2, r3
 800d0d4:	4317      	orrs	r7, r2
 800d0d6:	0038      	movs	r0, r7
 800d0d8:	b003      	add	sp, #12
 800d0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0dc:	2700      	movs	r7, #0
 800d0de:	42ae      	cmp	r6, r5
 800d0e0:	d202      	bcs.n	800d0e8 <__b2d+0x60>
 800d0e2:	9d01      	ldr	r5, [sp, #4]
 800d0e4:	3d08      	subs	r5, #8
 800d0e6:	682f      	ldr	r7, [r5, #0]
 800d0e8:	210b      	movs	r1, #11
 800d0ea:	4249      	negs	r1, r1
 800d0ec:	468c      	mov	ip, r1
 800d0ee:	449c      	add	ip, r3
 800d0f0:	2b0b      	cmp	r3, #11
 800d0f2:	d010      	beq.n	800d116 <__b2d+0x8e>
 800d0f4:	4661      	mov	r1, ip
 800d0f6:	2320      	movs	r3, #32
 800d0f8:	408c      	lsls	r4, r1
 800d0fa:	1a5b      	subs	r3, r3, r1
 800d0fc:	0039      	movs	r1, r7
 800d0fe:	40d9      	lsrs	r1, r3
 800d100:	430c      	orrs	r4, r1
 800d102:	4322      	orrs	r2, r4
 800d104:	0011      	movs	r1, r2
 800d106:	2200      	movs	r2, #0
 800d108:	42b5      	cmp	r5, r6
 800d10a:	d901      	bls.n	800d110 <__b2d+0x88>
 800d10c:	3d04      	subs	r5, #4
 800d10e:	682a      	ldr	r2, [r5, #0]
 800d110:	4664      	mov	r4, ip
 800d112:	40a7      	lsls	r7, r4
 800d114:	e7dd      	b.n	800d0d2 <__b2d+0x4a>
 800d116:	4322      	orrs	r2, r4
 800d118:	0011      	movs	r1, r2
 800d11a:	e7dc      	b.n	800d0d6 <__b2d+0x4e>
 800d11c:	3ff00000 	.word	0x3ff00000

0800d120 <__d2b>:
 800d120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d122:	2101      	movs	r1, #1
 800d124:	0016      	movs	r6, r2
 800d126:	001f      	movs	r7, r3
 800d128:	f7ff fbfe 	bl	800c928 <_Balloc>
 800d12c:	1e04      	subs	r4, r0, #0
 800d12e:	d105      	bne.n	800d13c <__d2b+0x1c>
 800d130:	0022      	movs	r2, r4
 800d132:	4b25      	ldr	r3, [pc, #148]	@ (800d1c8 <__d2b+0xa8>)
 800d134:	4825      	ldr	r0, [pc, #148]	@ (800d1cc <__d2b+0xac>)
 800d136:	4926      	ldr	r1, [pc, #152]	@ (800d1d0 <__d2b+0xb0>)
 800d138:	f001 f8fa 	bl	800e330 <__assert_func>
 800d13c:	033b      	lsls	r3, r7, #12
 800d13e:	007d      	lsls	r5, r7, #1
 800d140:	0b1b      	lsrs	r3, r3, #12
 800d142:	0d6d      	lsrs	r5, r5, #21
 800d144:	d002      	beq.n	800d14c <__d2b+0x2c>
 800d146:	2280      	movs	r2, #128	@ 0x80
 800d148:	0352      	lsls	r2, r2, #13
 800d14a:	4313      	orrs	r3, r2
 800d14c:	9301      	str	r3, [sp, #4]
 800d14e:	2e00      	cmp	r6, #0
 800d150:	d025      	beq.n	800d19e <__d2b+0x7e>
 800d152:	4668      	mov	r0, sp
 800d154:	9600      	str	r6, [sp, #0]
 800d156:	f7ff fd00 	bl	800cb5a <__lo0bits>
 800d15a:	9b01      	ldr	r3, [sp, #4]
 800d15c:	9900      	ldr	r1, [sp, #0]
 800d15e:	2800      	cmp	r0, #0
 800d160:	d01b      	beq.n	800d19a <__d2b+0x7a>
 800d162:	2220      	movs	r2, #32
 800d164:	001e      	movs	r6, r3
 800d166:	1a12      	subs	r2, r2, r0
 800d168:	4096      	lsls	r6, r2
 800d16a:	0032      	movs	r2, r6
 800d16c:	40c3      	lsrs	r3, r0
 800d16e:	430a      	orrs	r2, r1
 800d170:	6162      	str	r2, [r4, #20]
 800d172:	9301      	str	r3, [sp, #4]
 800d174:	9e01      	ldr	r6, [sp, #4]
 800d176:	61a6      	str	r6, [r4, #24]
 800d178:	1e73      	subs	r3, r6, #1
 800d17a:	419e      	sbcs	r6, r3
 800d17c:	3601      	adds	r6, #1
 800d17e:	6126      	str	r6, [r4, #16]
 800d180:	2d00      	cmp	r5, #0
 800d182:	d014      	beq.n	800d1ae <__d2b+0x8e>
 800d184:	2635      	movs	r6, #53	@ 0x35
 800d186:	4b13      	ldr	r3, [pc, #76]	@ (800d1d4 <__d2b+0xb4>)
 800d188:	18ed      	adds	r5, r5, r3
 800d18a:	9b08      	ldr	r3, [sp, #32]
 800d18c:	182d      	adds	r5, r5, r0
 800d18e:	601d      	str	r5, [r3, #0]
 800d190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d192:	1a36      	subs	r6, r6, r0
 800d194:	601e      	str	r6, [r3, #0]
 800d196:	0020      	movs	r0, r4
 800d198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d19a:	6161      	str	r1, [r4, #20]
 800d19c:	e7ea      	b.n	800d174 <__d2b+0x54>
 800d19e:	a801      	add	r0, sp, #4
 800d1a0:	f7ff fcdb 	bl	800cb5a <__lo0bits>
 800d1a4:	9b01      	ldr	r3, [sp, #4]
 800d1a6:	2601      	movs	r6, #1
 800d1a8:	6163      	str	r3, [r4, #20]
 800d1aa:	3020      	adds	r0, #32
 800d1ac:	e7e7      	b.n	800d17e <__d2b+0x5e>
 800d1ae:	4b0a      	ldr	r3, [pc, #40]	@ (800d1d8 <__d2b+0xb8>)
 800d1b0:	18c0      	adds	r0, r0, r3
 800d1b2:	9b08      	ldr	r3, [sp, #32]
 800d1b4:	6018      	str	r0, [r3, #0]
 800d1b6:	4b09      	ldr	r3, [pc, #36]	@ (800d1dc <__d2b+0xbc>)
 800d1b8:	18f3      	adds	r3, r6, r3
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	18e3      	adds	r3, r4, r3
 800d1be:	6958      	ldr	r0, [r3, #20]
 800d1c0:	f7ff fcaa 	bl	800cb18 <__hi0bits>
 800d1c4:	0176      	lsls	r6, r6, #5
 800d1c6:	e7e3      	b.n	800d190 <__d2b+0x70>
 800d1c8:	0800e87b 	.word	0x0800e87b
 800d1cc:	0800e8ec 	.word	0x0800e8ec
 800d1d0:	0000030f 	.word	0x0000030f
 800d1d4:	fffffbcd 	.word	0xfffffbcd
 800d1d8:	fffffbce 	.word	0xfffffbce
 800d1dc:	3fffffff 	.word	0x3fffffff

0800d1e0 <__ratio>:
 800d1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1e2:	b087      	sub	sp, #28
 800d1e4:	000f      	movs	r7, r1
 800d1e6:	a904      	add	r1, sp, #16
 800d1e8:	0006      	movs	r6, r0
 800d1ea:	f7ff ff4d 	bl	800d088 <__b2d>
 800d1ee:	9000      	str	r0, [sp, #0]
 800d1f0:	9101      	str	r1, [sp, #4]
 800d1f2:	9b00      	ldr	r3, [sp, #0]
 800d1f4:	9c01      	ldr	r4, [sp, #4]
 800d1f6:	0038      	movs	r0, r7
 800d1f8:	a905      	add	r1, sp, #20
 800d1fa:	9302      	str	r3, [sp, #8]
 800d1fc:	9403      	str	r4, [sp, #12]
 800d1fe:	f7ff ff43 	bl	800d088 <__b2d>
 800d202:	000d      	movs	r5, r1
 800d204:	0002      	movs	r2, r0
 800d206:	000b      	movs	r3, r1
 800d208:	6930      	ldr	r0, [r6, #16]
 800d20a:	6939      	ldr	r1, [r7, #16]
 800d20c:	9e04      	ldr	r6, [sp, #16]
 800d20e:	1a40      	subs	r0, r0, r1
 800d210:	9905      	ldr	r1, [sp, #20]
 800d212:	0140      	lsls	r0, r0, #5
 800d214:	1a71      	subs	r1, r6, r1
 800d216:	1841      	adds	r1, r0, r1
 800d218:	0508      	lsls	r0, r1, #20
 800d21a:	2900      	cmp	r1, #0
 800d21c:	dd08      	ble.n	800d230 <__ratio+0x50>
 800d21e:	9901      	ldr	r1, [sp, #4]
 800d220:	1841      	adds	r1, r0, r1
 800d222:	9103      	str	r1, [sp, #12]
 800d224:	9802      	ldr	r0, [sp, #8]
 800d226:	9903      	ldr	r1, [sp, #12]
 800d228:	f7f4 f84e 	bl	80012c8 <__aeabi_ddiv>
 800d22c:	b007      	add	sp, #28
 800d22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d230:	1a2b      	subs	r3, r5, r0
 800d232:	e7f7      	b.n	800d224 <__ratio+0x44>

0800d234 <__copybits>:
 800d234:	b570      	push	{r4, r5, r6, lr}
 800d236:	0014      	movs	r4, r2
 800d238:	0005      	movs	r5, r0
 800d23a:	3901      	subs	r1, #1
 800d23c:	6913      	ldr	r3, [r2, #16]
 800d23e:	1149      	asrs	r1, r1, #5
 800d240:	3101      	adds	r1, #1
 800d242:	0089      	lsls	r1, r1, #2
 800d244:	3414      	adds	r4, #20
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	1841      	adds	r1, r0, r1
 800d24a:	18e3      	adds	r3, r4, r3
 800d24c:	42a3      	cmp	r3, r4
 800d24e:	d80d      	bhi.n	800d26c <__copybits+0x38>
 800d250:	0014      	movs	r4, r2
 800d252:	3411      	adds	r4, #17
 800d254:	2500      	movs	r5, #0
 800d256:	429c      	cmp	r4, r3
 800d258:	d803      	bhi.n	800d262 <__copybits+0x2e>
 800d25a:	1a9b      	subs	r3, r3, r2
 800d25c:	3b11      	subs	r3, #17
 800d25e:	089b      	lsrs	r3, r3, #2
 800d260:	009d      	lsls	r5, r3, #2
 800d262:	2300      	movs	r3, #0
 800d264:	1940      	adds	r0, r0, r5
 800d266:	4281      	cmp	r1, r0
 800d268:	d803      	bhi.n	800d272 <__copybits+0x3e>
 800d26a:	bd70      	pop	{r4, r5, r6, pc}
 800d26c:	cc40      	ldmia	r4!, {r6}
 800d26e:	c540      	stmia	r5!, {r6}
 800d270:	e7ec      	b.n	800d24c <__copybits+0x18>
 800d272:	c008      	stmia	r0!, {r3}
 800d274:	e7f7      	b.n	800d266 <__copybits+0x32>

0800d276 <__any_on>:
 800d276:	0002      	movs	r2, r0
 800d278:	6900      	ldr	r0, [r0, #16]
 800d27a:	b510      	push	{r4, lr}
 800d27c:	3214      	adds	r2, #20
 800d27e:	114b      	asrs	r3, r1, #5
 800d280:	4298      	cmp	r0, r3
 800d282:	db13      	blt.n	800d2ac <__any_on+0x36>
 800d284:	dd0c      	ble.n	800d2a0 <__any_on+0x2a>
 800d286:	241f      	movs	r4, #31
 800d288:	0008      	movs	r0, r1
 800d28a:	4020      	ands	r0, r4
 800d28c:	4221      	tst	r1, r4
 800d28e:	d007      	beq.n	800d2a0 <__any_on+0x2a>
 800d290:	0099      	lsls	r1, r3, #2
 800d292:	588c      	ldr	r4, [r1, r2]
 800d294:	0021      	movs	r1, r4
 800d296:	40c1      	lsrs	r1, r0
 800d298:	4081      	lsls	r1, r0
 800d29a:	2001      	movs	r0, #1
 800d29c:	428c      	cmp	r4, r1
 800d29e:	d104      	bne.n	800d2aa <__any_on+0x34>
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	18d3      	adds	r3, r2, r3
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d803      	bhi.n	800d2b0 <__any_on+0x3a>
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	bd10      	pop	{r4, pc}
 800d2ac:	0003      	movs	r3, r0
 800d2ae:	e7f7      	b.n	800d2a0 <__any_on+0x2a>
 800d2b0:	3b04      	subs	r3, #4
 800d2b2:	6819      	ldr	r1, [r3, #0]
 800d2b4:	2900      	cmp	r1, #0
 800d2b6:	d0f5      	beq.n	800d2a4 <__any_on+0x2e>
 800d2b8:	2001      	movs	r0, #1
 800d2ba:	e7f6      	b.n	800d2aa <__any_on+0x34>

0800d2bc <_strtol_l.constprop.0>:
 800d2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	0017      	movs	r7, r2
 800d2c2:	001e      	movs	r6, r3
 800d2c4:	9003      	str	r0, [sp, #12]
 800d2c6:	9101      	str	r1, [sp, #4]
 800d2c8:	2b24      	cmp	r3, #36	@ 0x24
 800d2ca:	d844      	bhi.n	800d356 <_strtol_l.constprop.0+0x9a>
 800d2cc:	000c      	movs	r4, r1
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d041      	beq.n	800d356 <_strtol_l.constprop.0+0x9a>
 800d2d2:	4b3d      	ldr	r3, [pc, #244]	@ (800d3c8 <_strtol_l.constprop.0+0x10c>)
 800d2d4:	2208      	movs	r2, #8
 800d2d6:	469c      	mov	ip, r3
 800d2d8:	0023      	movs	r3, r4
 800d2da:	4661      	mov	r1, ip
 800d2dc:	781d      	ldrb	r5, [r3, #0]
 800d2de:	3401      	adds	r4, #1
 800d2e0:	5d48      	ldrb	r0, [r1, r5]
 800d2e2:	0001      	movs	r1, r0
 800d2e4:	4011      	ands	r1, r2
 800d2e6:	4210      	tst	r0, r2
 800d2e8:	d1f6      	bne.n	800d2d8 <_strtol_l.constprop.0+0x1c>
 800d2ea:	2d2d      	cmp	r5, #45	@ 0x2d
 800d2ec:	d13a      	bne.n	800d364 <_strtol_l.constprop.0+0xa8>
 800d2ee:	7825      	ldrb	r5, [r4, #0]
 800d2f0:	1c9c      	adds	r4, r3, #2
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	2210      	movs	r2, #16
 800d2f8:	0033      	movs	r3, r6
 800d2fa:	4393      	bics	r3, r2
 800d2fc:	d109      	bne.n	800d312 <_strtol_l.constprop.0+0x56>
 800d2fe:	2d30      	cmp	r5, #48	@ 0x30
 800d300:	d136      	bne.n	800d370 <_strtol_l.constprop.0+0xb4>
 800d302:	2120      	movs	r1, #32
 800d304:	7823      	ldrb	r3, [r4, #0]
 800d306:	438b      	bics	r3, r1
 800d308:	2b58      	cmp	r3, #88	@ 0x58
 800d30a:	d131      	bne.n	800d370 <_strtol_l.constprop.0+0xb4>
 800d30c:	0016      	movs	r6, r2
 800d30e:	7865      	ldrb	r5, [r4, #1]
 800d310:	3402      	adds	r4, #2
 800d312:	4a2e      	ldr	r2, [pc, #184]	@ (800d3cc <_strtol_l.constprop.0+0x110>)
 800d314:	9b00      	ldr	r3, [sp, #0]
 800d316:	4694      	mov	ip, r2
 800d318:	4463      	add	r3, ip
 800d31a:	0031      	movs	r1, r6
 800d31c:	0018      	movs	r0, r3
 800d31e:	9302      	str	r3, [sp, #8]
 800d320:	f7f2 ff9e 	bl	8000260 <__aeabi_uidivmod>
 800d324:	2200      	movs	r2, #0
 800d326:	4684      	mov	ip, r0
 800d328:	0010      	movs	r0, r2
 800d32a:	002b      	movs	r3, r5
 800d32c:	3b30      	subs	r3, #48	@ 0x30
 800d32e:	2b09      	cmp	r3, #9
 800d330:	d825      	bhi.n	800d37e <_strtol_l.constprop.0+0xc2>
 800d332:	001d      	movs	r5, r3
 800d334:	42ae      	cmp	r6, r5
 800d336:	dd31      	ble.n	800d39c <_strtol_l.constprop.0+0xe0>
 800d338:	1c53      	adds	r3, r2, #1
 800d33a:	d009      	beq.n	800d350 <_strtol_l.constprop.0+0x94>
 800d33c:	2201      	movs	r2, #1
 800d33e:	4252      	negs	r2, r2
 800d340:	4584      	cmp	ip, r0
 800d342:	d305      	bcc.n	800d350 <_strtol_l.constprop.0+0x94>
 800d344:	d101      	bne.n	800d34a <_strtol_l.constprop.0+0x8e>
 800d346:	42a9      	cmp	r1, r5
 800d348:	db25      	blt.n	800d396 <_strtol_l.constprop.0+0xda>
 800d34a:	2201      	movs	r2, #1
 800d34c:	4370      	muls	r0, r6
 800d34e:	1828      	adds	r0, r5, r0
 800d350:	7825      	ldrb	r5, [r4, #0]
 800d352:	3401      	adds	r4, #1
 800d354:	e7e9      	b.n	800d32a <_strtol_l.constprop.0+0x6e>
 800d356:	f7fd ffa7 	bl	800b2a8 <__errno>
 800d35a:	2316      	movs	r3, #22
 800d35c:	6003      	str	r3, [r0, #0]
 800d35e:	2000      	movs	r0, #0
 800d360:	b005      	add	sp, #20
 800d362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d364:	9100      	str	r1, [sp, #0]
 800d366:	2d2b      	cmp	r5, #43	@ 0x2b
 800d368:	d1c5      	bne.n	800d2f6 <_strtol_l.constprop.0+0x3a>
 800d36a:	7825      	ldrb	r5, [r4, #0]
 800d36c:	1c9c      	adds	r4, r3, #2
 800d36e:	e7c2      	b.n	800d2f6 <_strtol_l.constprop.0+0x3a>
 800d370:	2e00      	cmp	r6, #0
 800d372:	d1ce      	bne.n	800d312 <_strtol_l.constprop.0+0x56>
 800d374:	3608      	adds	r6, #8
 800d376:	2d30      	cmp	r5, #48	@ 0x30
 800d378:	d0cb      	beq.n	800d312 <_strtol_l.constprop.0+0x56>
 800d37a:	3602      	adds	r6, #2
 800d37c:	e7c9      	b.n	800d312 <_strtol_l.constprop.0+0x56>
 800d37e:	002b      	movs	r3, r5
 800d380:	3b41      	subs	r3, #65	@ 0x41
 800d382:	2b19      	cmp	r3, #25
 800d384:	d801      	bhi.n	800d38a <_strtol_l.constprop.0+0xce>
 800d386:	3d37      	subs	r5, #55	@ 0x37
 800d388:	e7d4      	b.n	800d334 <_strtol_l.constprop.0+0x78>
 800d38a:	002b      	movs	r3, r5
 800d38c:	3b61      	subs	r3, #97	@ 0x61
 800d38e:	2b19      	cmp	r3, #25
 800d390:	d804      	bhi.n	800d39c <_strtol_l.constprop.0+0xe0>
 800d392:	3d57      	subs	r5, #87	@ 0x57
 800d394:	e7ce      	b.n	800d334 <_strtol_l.constprop.0+0x78>
 800d396:	2201      	movs	r2, #1
 800d398:	4252      	negs	r2, r2
 800d39a:	e7d9      	b.n	800d350 <_strtol_l.constprop.0+0x94>
 800d39c:	1c53      	adds	r3, r2, #1
 800d39e:	d108      	bne.n	800d3b2 <_strtol_l.constprop.0+0xf6>
 800d3a0:	2322      	movs	r3, #34	@ 0x22
 800d3a2:	9a03      	ldr	r2, [sp, #12]
 800d3a4:	9802      	ldr	r0, [sp, #8]
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	2f00      	cmp	r7, #0
 800d3aa:	d0d9      	beq.n	800d360 <_strtol_l.constprop.0+0xa4>
 800d3ac:	1e63      	subs	r3, r4, #1
 800d3ae:	9301      	str	r3, [sp, #4]
 800d3b0:	e007      	b.n	800d3c2 <_strtol_l.constprop.0+0x106>
 800d3b2:	9b00      	ldr	r3, [sp, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d000      	beq.n	800d3ba <_strtol_l.constprop.0+0xfe>
 800d3b8:	4240      	negs	r0, r0
 800d3ba:	2f00      	cmp	r7, #0
 800d3bc:	d0d0      	beq.n	800d360 <_strtol_l.constprop.0+0xa4>
 800d3be:	2a00      	cmp	r2, #0
 800d3c0:	d1f4      	bne.n	800d3ac <_strtol_l.constprop.0+0xf0>
 800d3c2:	9b01      	ldr	r3, [sp, #4]
 800d3c4:	603b      	str	r3, [r7, #0]
 800d3c6:	e7cb      	b.n	800d360 <_strtol_l.constprop.0+0xa4>
 800d3c8:	0800ea49 	.word	0x0800ea49
 800d3cc:	7fffffff 	.word	0x7fffffff

0800d3d0 <_strtol_r>:
 800d3d0:	b510      	push	{r4, lr}
 800d3d2:	f7ff ff73 	bl	800d2bc <_strtol_l.constprop.0>
 800d3d6:	bd10      	pop	{r4, pc}

0800d3d8 <__ascii_wctomb>:
 800d3d8:	0003      	movs	r3, r0
 800d3da:	1e08      	subs	r0, r1, #0
 800d3dc:	d005      	beq.n	800d3ea <__ascii_wctomb+0x12>
 800d3de:	2aff      	cmp	r2, #255	@ 0xff
 800d3e0:	d904      	bls.n	800d3ec <__ascii_wctomb+0x14>
 800d3e2:	228a      	movs	r2, #138	@ 0x8a
 800d3e4:	2001      	movs	r0, #1
 800d3e6:	601a      	str	r2, [r3, #0]
 800d3e8:	4240      	negs	r0, r0
 800d3ea:	4770      	bx	lr
 800d3ec:	2001      	movs	r0, #1
 800d3ee:	700a      	strb	r2, [r1, #0]
 800d3f0:	e7fb      	b.n	800d3ea <__ascii_wctomb+0x12>
	...

0800d3f4 <__ssputs_r>:
 800d3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3f6:	688e      	ldr	r6, [r1, #8]
 800d3f8:	b085      	sub	sp, #20
 800d3fa:	001f      	movs	r7, r3
 800d3fc:	000c      	movs	r4, r1
 800d3fe:	680b      	ldr	r3, [r1, #0]
 800d400:	9002      	str	r0, [sp, #8]
 800d402:	9203      	str	r2, [sp, #12]
 800d404:	42be      	cmp	r6, r7
 800d406:	d830      	bhi.n	800d46a <__ssputs_r+0x76>
 800d408:	210c      	movs	r1, #12
 800d40a:	5e62      	ldrsh	r2, [r4, r1]
 800d40c:	2190      	movs	r1, #144	@ 0x90
 800d40e:	00c9      	lsls	r1, r1, #3
 800d410:	420a      	tst	r2, r1
 800d412:	d028      	beq.n	800d466 <__ssputs_r+0x72>
 800d414:	2003      	movs	r0, #3
 800d416:	6921      	ldr	r1, [r4, #16]
 800d418:	1a5b      	subs	r3, r3, r1
 800d41a:	9301      	str	r3, [sp, #4]
 800d41c:	6963      	ldr	r3, [r4, #20]
 800d41e:	4343      	muls	r3, r0
 800d420:	9801      	ldr	r0, [sp, #4]
 800d422:	0fdd      	lsrs	r5, r3, #31
 800d424:	18ed      	adds	r5, r5, r3
 800d426:	1c7b      	adds	r3, r7, #1
 800d428:	181b      	adds	r3, r3, r0
 800d42a:	106d      	asrs	r5, r5, #1
 800d42c:	42ab      	cmp	r3, r5
 800d42e:	d900      	bls.n	800d432 <__ssputs_r+0x3e>
 800d430:	001d      	movs	r5, r3
 800d432:	0552      	lsls	r2, r2, #21
 800d434:	d528      	bpl.n	800d488 <__ssputs_r+0x94>
 800d436:	0029      	movs	r1, r5
 800d438:	9802      	ldr	r0, [sp, #8]
 800d43a:	f7ff f9d3 	bl	800c7e4 <_malloc_r>
 800d43e:	1e06      	subs	r6, r0, #0
 800d440:	d02c      	beq.n	800d49c <__ssputs_r+0xa8>
 800d442:	9a01      	ldr	r2, [sp, #4]
 800d444:	6921      	ldr	r1, [r4, #16]
 800d446:	f7fd ff67 	bl	800b318 <memcpy>
 800d44a:	89a2      	ldrh	r2, [r4, #12]
 800d44c:	4b18      	ldr	r3, [pc, #96]	@ (800d4b0 <__ssputs_r+0xbc>)
 800d44e:	401a      	ands	r2, r3
 800d450:	2380      	movs	r3, #128	@ 0x80
 800d452:	4313      	orrs	r3, r2
 800d454:	81a3      	strh	r3, [r4, #12]
 800d456:	9b01      	ldr	r3, [sp, #4]
 800d458:	6126      	str	r6, [r4, #16]
 800d45a:	18f6      	adds	r6, r6, r3
 800d45c:	6026      	str	r6, [r4, #0]
 800d45e:	003e      	movs	r6, r7
 800d460:	6165      	str	r5, [r4, #20]
 800d462:	1aed      	subs	r5, r5, r3
 800d464:	60a5      	str	r5, [r4, #8]
 800d466:	42be      	cmp	r6, r7
 800d468:	d900      	bls.n	800d46c <__ssputs_r+0x78>
 800d46a:	003e      	movs	r6, r7
 800d46c:	0032      	movs	r2, r6
 800d46e:	9903      	ldr	r1, [sp, #12]
 800d470:	6820      	ldr	r0, [r4, #0]
 800d472:	f000 ff13 	bl	800e29c <memmove>
 800d476:	2000      	movs	r0, #0
 800d478:	68a3      	ldr	r3, [r4, #8]
 800d47a:	1b9b      	subs	r3, r3, r6
 800d47c:	60a3      	str	r3, [r4, #8]
 800d47e:	6823      	ldr	r3, [r4, #0]
 800d480:	199b      	adds	r3, r3, r6
 800d482:	6023      	str	r3, [r4, #0]
 800d484:	b005      	add	sp, #20
 800d486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d488:	002a      	movs	r2, r5
 800d48a:	9802      	ldr	r0, [sp, #8]
 800d48c:	f000 ff9b 	bl	800e3c6 <_realloc_r>
 800d490:	1e06      	subs	r6, r0, #0
 800d492:	d1e0      	bne.n	800d456 <__ssputs_r+0x62>
 800d494:	6921      	ldr	r1, [r4, #16]
 800d496:	9802      	ldr	r0, [sp, #8]
 800d498:	f7fe fdd4 	bl	800c044 <_free_r>
 800d49c:	230c      	movs	r3, #12
 800d49e:	2001      	movs	r0, #1
 800d4a0:	9a02      	ldr	r2, [sp, #8]
 800d4a2:	4240      	negs	r0, r0
 800d4a4:	6013      	str	r3, [r2, #0]
 800d4a6:	89a2      	ldrh	r2, [r4, #12]
 800d4a8:	3334      	adds	r3, #52	@ 0x34
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	81a3      	strh	r3, [r4, #12]
 800d4ae:	e7e9      	b.n	800d484 <__ssputs_r+0x90>
 800d4b0:	fffffb7f 	.word	0xfffffb7f

0800d4b4 <_svfiprintf_r>:
 800d4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4b6:	b0a1      	sub	sp, #132	@ 0x84
 800d4b8:	9003      	str	r0, [sp, #12]
 800d4ba:	001d      	movs	r5, r3
 800d4bc:	898b      	ldrh	r3, [r1, #12]
 800d4be:	000f      	movs	r7, r1
 800d4c0:	0016      	movs	r6, r2
 800d4c2:	061b      	lsls	r3, r3, #24
 800d4c4:	d511      	bpl.n	800d4ea <_svfiprintf_r+0x36>
 800d4c6:	690b      	ldr	r3, [r1, #16]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10e      	bne.n	800d4ea <_svfiprintf_r+0x36>
 800d4cc:	2140      	movs	r1, #64	@ 0x40
 800d4ce:	f7ff f989 	bl	800c7e4 <_malloc_r>
 800d4d2:	6038      	str	r0, [r7, #0]
 800d4d4:	6138      	str	r0, [r7, #16]
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d105      	bne.n	800d4e6 <_svfiprintf_r+0x32>
 800d4da:	230c      	movs	r3, #12
 800d4dc:	9a03      	ldr	r2, [sp, #12]
 800d4de:	6013      	str	r3, [r2, #0]
 800d4e0:	2001      	movs	r0, #1
 800d4e2:	4240      	negs	r0, r0
 800d4e4:	e0cf      	b.n	800d686 <_svfiprintf_r+0x1d2>
 800d4e6:	2340      	movs	r3, #64	@ 0x40
 800d4e8:	617b      	str	r3, [r7, #20]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	ac08      	add	r4, sp, #32
 800d4ee:	6163      	str	r3, [r4, #20]
 800d4f0:	3320      	adds	r3, #32
 800d4f2:	7663      	strb	r3, [r4, #25]
 800d4f4:	3310      	adds	r3, #16
 800d4f6:	76a3      	strb	r3, [r4, #26]
 800d4f8:	9507      	str	r5, [sp, #28]
 800d4fa:	0035      	movs	r5, r6
 800d4fc:	782b      	ldrb	r3, [r5, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <_svfiprintf_r+0x52>
 800d502:	2b25      	cmp	r3, #37	@ 0x25
 800d504:	d148      	bne.n	800d598 <_svfiprintf_r+0xe4>
 800d506:	1bab      	subs	r3, r5, r6
 800d508:	9305      	str	r3, [sp, #20]
 800d50a:	42b5      	cmp	r5, r6
 800d50c:	d00b      	beq.n	800d526 <_svfiprintf_r+0x72>
 800d50e:	0032      	movs	r2, r6
 800d510:	0039      	movs	r1, r7
 800d512:	9803      	ldr	r0, [sp, #12]
 800d514:	f7ff ff6e 	bl	800d3f4 <__ssputs_r>
 800d518:	3001      	adds	r0, #1
 800d51a:	d100      	bne.n	800d51e <_svfiprintf_r+0x6a>
 800d51c:	e0ae      	b.n	800d67c <_svfiprintf_r+0x1c8>
 800d51e:	6963      	ldr	r3, [r4, #20]
 800d520:	9a05      	ldr	r2, [sp, #20]
 800d522:	189b      	adds	r3, r3, r2
 800d524:	6163      	str	r3, [r4, #20]
 800d526:	782b      	ldrb	r3, [r5, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d100      	bne.n	800d52e <_svfiprintf_r+0x7a>
 800d52c:	e0a6      	b.n	800d67c <_svfiprintf_r+0x1c8>
 800d52e:	2201      	movs	r2, #1
 800d530:	2300      	movs	r3, #0
 800d532:	4252      	negs	r2, r2
 800d534:	6062      	str	r2, [r4, #4]
 800d536:	a904      	add	r1, sp, #16
 800d538:	3254      	adds	r2, #84	@ 0x54
 800d53a:	1852      	adds	r2, r2, r1
 800d53c:	1c6e      	adds	r6, r5, #1
 800d53e:	6023      	str	r3, [r4, #0]
 800d540:	60e3      	str	r3, [r4, #12]
 800d542:	60a3      	str	r3, [r4, #8]
 800d544:	7013      	strb	r3, [r2, #0]
 800d546:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d548:	4b54      	ldr	r3, [pc, #336]	@ (800d69c <_svfiprintf_r+0x1e8>)
 800d54a:	2205      	movs	r2, #5
 800d54c:	0018      	movs	r0, r3
 800d54e:	7831      	ldrb	r1, [r6, #0]
 800d550:	9305      	str	r3, [sp, #20]
 800d552:	f7fd fed6 	bl	800b302 <memchr>
 800d556:	1c75      	adds	r5, r6, #1
 800d558:	2800      	cmp	r0, #0
 800d55a:	d11f      	bne.n	800d59c <_svfiprintf_r+0xe8>
 800d55c:	6822      	ldr	r2, [r4, #0]
 800d55e:	06d3      	lsls	r3, r2, #27
 800d560:	d504      	bpl.n	800d56c <_svfiprintf_r+0xb8>
 800d562:	2353      	movs	r3, #83	@ 0x53
 800d564:	a904      	add	r1, sp, #16
 800d566:	185b      	adds	r3, r3, r1
 800d568:	2120      	movs	r1, #32
 800d56a:	7019      	strb	r1, [r3, #0]
 800d56c:	0713      	lsls	r3, r2, #28
 800d56e:	d504      	bpl.n	800d57a <_svfiprintf_r+0xc6>
 800d570:	2353      	movs	r3, #83	@ 0x53
 800d572:	a904      	add	r1, sp, #16
 800d574:	185b      	adds	r3, r3, r1
 800d576:	212b      	movs	r1, #43	@ 0x2b
 800d578:	7019      	strb	r1, [r3, #0]
 800d57a:	7833      	ldrb	r3, [r6, #0]
 800d57c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d57e:	d016      	beq.n	800d5ae <_svfiprintf_r+0xfa>
 800d580:	0035      	movs	r5, r6
 800d582:	2100      	movs	r1, #0
 800d584:	200a      	movs	r0, #10
 800d586:	68e3      	ldr	r3, [r4, #12]
 800d588:	782a      	ldrb	r2, [r5, #0]
 800d58a:	1c6e      	adds	r6, r5, #1
 800d58c:	3a30      	subs	r2, #48	@ 0x30
 800d58e:	2a09      	cmp	r2, #9
 800d590:	d950      	bls.n	800d634 <_svfiprintf_r+0x180>
 800d592:	2900      	cmp	r1, #0
 800d594:	d111      	bne.n	800d5ba <_svfiprintf_r+0x106>
 800d596:	e017      	b.n	800d5c8 <_svfiprintf_r+0x114>
 800d598:	3501      	adds	r5, #1
 800d59a:	e7af      	b.n	800d4fc <_svfiprintf_r+0x48>
 800d59c:	9b05      	ldr	r3, [sp, #20]
 800d59e:	6822      	ldr	r2, [r4, #0]
 800d5a0:	1ac0      	subs	r0, r0, r3
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	4083      	lsls	r3, r0
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	002e      	movs	r6, r5
 800d5aa:	6023      	str	r3, [r4, #0]
 800d5ac:	e7cc      	b.n	800d548 <_svfiprintf_r+0x94>
 800d5ae:	9b07      	ldr	r3, [sp, #28]
 800d5b0:	1d19      	adds	r1, r3, #4
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	9107      	str	r1, [sp, #28]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	db01      	blt.n	800d5be <_svfiprintf_r+0x10a>
 800d5ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5bc:	e004      	b.n	800d5c8 <_svfiprintf_r+0x114>
 800d5be:	425b      	negs	r3, r3
 800d5c0:	60e3      	str	r3, [r4, #12]
 800d5c2:	2302      	movs	r3, #2
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	6023      	str	r3, [r4, #0]
 800d5c8:	782b      	ldrb	r3, [r5, #0]
 800d5ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5cc:	d10c      	bne.n	800d5e8 <_svfiprintf_r+0x134>
 800d5ce:	786b      	ldrb	r3, [r5, #1]
 800d5d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5d2:	d134      	bne.n	800d63e <_svfiprintf_r+0x18a>
 800d5d4:	9b07      	ldr	r3, [sp, #28]
 800d5d6:	3502      	adds	r5, #2
 800d5d8:	1d1a      	adds	r2, r3, #4
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	9207      	str	r2, [sp, #28]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	da01      	bge.n	800d5e6 <_svfiprintf_r+0x132>
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	425b      	negs	r3, r3
 800d5e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5e8:	4e2d      	ldr	r6, [pc, #180]	@ (800d6a0 <_svfiprintf_r+0x1ec>)
 800d5ea:	2203      	movs	r2, #3
 800d5ec:	0030      	movs	r0, r6
 800d5ee:	7829      	ldrb	r1, [r5, #0]
 800d5f0:	f7fd fe87 	bl	800b302 <memchr>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d006      	beq.n	800d606 <_svfiprintf_r+0x152>
 800d5f8:	2340      	movs	r3, #64	@ 0x40
 800d5fa:	1b80      	subs	r0, r0, r6
 800d5fc:	4083      	lsls	r3, r0
 800d5fe:	6822      	ldr	r2, [r4, #0]
 800d600:	3501      	adds	r5, #1
 800d602:	4313      	orrs	r3, r2
 800d604:	6023      	str	r3, [r4, #0]
 800d606:	7829      	ldrb	r1, [r5, #0]
 800d608:	2206      	movs	r2, #6
 800d60a:	4826      	ldr	r0, [pc, #152]	@ (800d6a4 <_svfiprintf_r+0x1f0>)
 800d60c:	1c6e      	adds	r6, r5, #1
 800d60e:	7621      	strb	r1, [r4, #24]
 800d610:	f7fd fe77 	bl	800b302 <memchr>
 800d614:	2800      	cmp	r0, #0
 800d616:	d038      	beq.n	800d68a <_svfiprintf_r+0x1d6>
 800d618:	4b23      	ldr	r3, [pc, #140]	@ (800d6a8 <_svfiprintf_r+0x1f4>)
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d122      	bne.n	800d664 <_svfiprintf_r+0x1b0>
 800d61e:	2207      	movs	r2, #7
 800d620:	9b07      	ldr	r3, [sp, #28]
 800d622:	3307      	adds	r3, #7
 800d624:	4393      	bics	r3, r2
 800d626:	3308      	adds	r3, #8
 800d628:	9307      	str	r3, [sp, #28]
 800d62a:	6963      	ldr	r3, [r4, #20]
 800d62c:	9a04      	ldr	r2, [sp, #16]
 800d62e:	189b      	adds	r3, r3, r2
 800d630:	6163      	str	r3, [r4, #20]
 800d632:	e762      	b.n	800d4fa <_svfiprintf_r+0x46>
 800d634:	4343      	muls	r3, r0
 800d636:	0035      	movs	r5, r6
 800d638:	2101      	movs	r1, #1
 800d63a:	189b      	adds	r3, r3, r2
 800d63c:	e7a4      	b.n	800d588 <_svfiprintf_r+0xd4>
 800d63e:	2300      	movs	r3, #0
 800d640:	200a      	movs	r0, #10
 800d642:	0019      	movs	r1, r3
 800d644:	3501      	adds	r5, #1
 800d646:	6063      	str	r3, [r4, #4]
 800d648:	782a      	ldrb	r2, [r5, #0]
 800d64a:	1c6e      	adds	r6, r5, #1
 800d64c:	3a30      	subs	r2, #48	@ 0x30
 800d64e:	2a09      	cmp	r2, #9
 800d650:	d903      	bls.n	800d65a <_svfiprintf_r+0x1a6>
 800d652:	2b00      	cmp	r3, #0
 800d654:	d0c8      	beq.n	800d5e8 <_svfiprintf_r+0x134>
 800d656:	9109      	str	r1, [sp, #36]	@ 0x24
 800d658:	e7c6      	b.n	800d5e8 <_svfiprintf_r+0x134>
 800d65a:	4341      	muls	r1, r0
 800d65c:	0035      	movs	r5, r6
 800d65e:	2301      	movs	r3, #1
 800d660:	1889      	adds	r1, r1, r2
 800d662:	e7f1      	b.n	800d648 <_svfiprintf_r+0x194>
 800d664:	aa07      	add	r2, sp, #28
 800d666:	9200      	str	r2, [sp, #0]
 800d668:	0021      	movs	r1, r4
 800d66a:	003a      	movs	r2, r7
 800d66c:	4b0f      	ldr	r3, [pc, #60]	@ (800d6ac <_svfiprintf_r+0x1f8>)
 800d66e:	9803      	ldr	r0, [sp, #12]
 800d670:	f7fc fd42 	bl	800a0f8 <_printf_float>
 800d674:	9004      	str	r0, [sp, #16]
 800d676:	9b04      	ldr	r3, [sp, #16]
 800d678:	3301      	adds	r3, #1
 800d67a:	d1d6      	bne.n	800d62a <_svfiprintf_r+0x176>
 800d67c:	89bb      	ldrh	r3, [r7, #12]
 800d67e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d680:	065b      	lsls	r3, r3, #25
 800d682:	d500      	bpl.n	800d686 <_svfiprintf_r+0x1d2>
 800d684:	e72c      	b.n	800d4e0 <_svfiprintf_r+0x2c>
 800d686:	b021      	add	sp, #132	@ 0x84
 800d688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d68a:	aa07      	add	r2, sp, #28
 800d68c:	9200      	str	r2, [sp, #0]
 800d68e:	0021      	movs	r1, r4
 800d690:	003a      	movs	r2, r7
 800d692:	4b06      	ldr	r3, [pc, #24]	@ (800d6ac <_svfiprintf_r+0x1f8>)
 800d694:	9803      	ldr	r0, [sp, #12]
 800d696:	f7fc ffdd 	bl	800a654 <_printf_i>
 800d69a:	e7eb      	b.n	800d674 <_svfiprintf_r+0x1c0>
 800d69c:	0800eb49 	.word	0x0800eb49
 800d6a0:	0800eb4f 	.word	0x0800eb4f
 800d6a4:	0800eb53 	.word	0x0800eb53
 800d6a8:	0800a0f9 	.word	0x0800a0f9
 800d6ac:	0800d3f5 	.word	0x0800d3f5

0800d6b0 <_sungetc_r>:
 800d6b0:	b570      	push	{r4, r5, r6, lr}
 800d6b2:	0014      	movs	r4, r2
 800d6b4:	1c4b      	adds	r3, r1, #1
 800d6b6:	d103      	bne.n	800d6c0 <_sungetc_r+0x10>
 800d6b8:	2501      	movs	r5, #1
 800d6ba:	426d      	negs	r5, r5
 800d6bc:	0028      	movs	r0, r5
 800d6be:	bd70      	pop	{r4, r5, r6, pc}
 800d6c0:	8993      	ldrh	r3, [r2, #12]
 800d6c2:	2220      	movs	r2, #32
 800d6c4:	4393      	bics	r3, r2
 800d6c6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d6c8:	81a3      	strh	r3, [r4, #12]
 800d6ca:	b2ce      	uxtb	r6, r1
 800d6cc:	6863      	ldr	r3, [r4, #4]
 800d6ce:	b2cd      	uxtb	r5, r1
 800d6d0:	2a00      	cmp	r2, #0
 800d6d2:	d010      	beq.n	800d6f6 <_sungetc_r+0x46>
 800d6d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	dd07      	ble.n	800d6ea <_sungetc_r+0x3a>
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	6023      	str	r3, [r4, #0]
 800d6e0:	701e      	strb	r6, [r3, #0]
 800d6e2:	6863      	ldr	r3, [r4, #4]
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	6063      	str	r3, [r4, #4]
 800d6e8:	e7e8      	b.n	800d6bc <_sungetc_r+0xc>
 800d6ea:	0021      	movs	r1, r4
 800d6ec:	f000 fd98 	bl	800e220 <__submore>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d0f2      	beq.n	800d6da <_sungetc_r+0x2a>
 800d6f4:	e7e0      	b.n	800d6b8 <_sungetc_r+0x8>
 800d6f6:	6921      	ldr	r1, [r4, #16]
 800d6f8:	6822      	ldr	r2, [r4, #0]
 800d6fa:	2900      	cmp	r1, #0
 800d6fc:	d007      	beq.n	800d70e <_sungetc_r+0x5e>
 800d6fe:	4291      	cmp	r1, r2
 800d700:	d205      	bcs.n	800d70e <_sungetc_r+0x5e>
 800d702:	1e51      	subs	r1, r2, #1
 800d704:	7808      	ldrb	r0, [r1, #0]
 800d706:	42a8      	cmp	r0, r5
 800d708:	d101      	bne.n	800d70e <_sungetc_r+0x5e>
 800d70a:	6021      	str	r1, [r4, #0]
 800d70c:	e7ea      	b.n	800d6e4 <_sungetc_r+0x34>
 800d70e:	6423      	str	r3, [r4, #64]	@ 0x40
 800d710:	0023      	movs	r3, r4
 800d712:	3344      	adds	r3, #68	@ 0x44
 800d714:	6363      	str	r3, [r4, #52]	@ 0x34
 800d716:	2303      	movs	r3, #3
 800d718:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d71a:	0023      	movs	r3, r4
 800d71c:	3346      	adds	r3, #70	@ 0x46
 800d71e:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800d720:	701e      	strb	r6, [r3, #0]
 800d722:	6023      	str	r3, [r4, #0]
 800d724:	2301      	movs	r3, #1
 800d726:	e7de      	b.n	800d6e6 <_sungetc_r+0x36>

0800d728 <__ssrefill_r>:
 800d728:	b510      	push	{r4, lr}
 800d72a:	000c      	movs	r4, r1
 800d72c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d72e:	2900      	cmp	r1, #0
 800d730:	d00e      	beq.n	800d750 <__ssrefill_r+0x28>
 800d732:	0023      	movs	r3, r4
 800d734:	3344      	adds	r3, #68	@ 0x44
 800d736:	4299      	cmp	r1, r3
 800d738:	d001      	beq.n	800d73e <__ssrefill_r+0x16>
 800d73a:	f7fe fc83 	bl	800c044 <_free_r>
 800d73e:	2000      	movs	r0, #0
 800d740:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d742:	6360      	str	r0, [r4, #52]	@ 0x34
 800d744:	6063      	str	r3, [r4, #4]
 800d746:	4283      	cmp	r3, r0
 800d748:	d002      	beq.n	800d750 <__ssrefill_r+0x28>
 800d74a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	bd10      	pop	{r4, pc}
 800d750:	6923      	ldr	r3, [r4, #16]
 800d752:	2001      	movs	r0, #1
 800d754:	6023      	str	r3, [r4, #0]
 800d756:	2300      	movs	r3, #0
 800d758:	89a2      	ldrh	r2, [r4, #12]
 800d75a:	6063      	str	r3, [r4, #4]
 800d75c:	3320      	adds	r3, #32
 800d75e:	4313      	orrs	r3, r2
 800d760:	81a3      	strh	r3, [r4, #12]
 800d762:	4240      	negs	r0, r0
 800d764:	e7f3      	b.n	800d74e <__ssrefill_r+0x26>
	...

0800d768 <__ssvfiscanf_r>:
 800d768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d76a:	4caa      	ldr	r4, [pc, #680]	@ (800da14 <__ssvfiscanf_r+0x2ac>)
 800d76c:	44a5      	add	sp, r4
 800d76e:	000c      	movs	r4, r1
 800d770:	2100      	movs	r1, #0
 800d772:	9001      	str	r0, [sp, #4]
 800d774:	20be      	movs	r0, #190	@ 0xbe
 800d776:	9146      	str	r1, [sp, #280]	@ 0x118
 800d778:	9147      	str	r1, [sp, #284]	@ 0x11c
 800d77a:	a903      	add	r1, sp, #12
 800d77c:	9148      	str	r1, [sp, #288]	@ 0x120
 800d77e:	49a6      	ldr	r1, [pc, #664]	@ (800da18 <__ssvfiscanf_r+0x2b0>)
 800d780:	0040      	lsls	r0, r0, #1
 800d782:	ad43      	add	r5, sp, #268	@ 0x10c
 800d784:	5029      	str	r1, [r5, r0]
 800d786:	49a5      	ldr	r1, [pc, #660]	@ (800da1c <__ssvfiscanf_r+0x2b4>)
 800d788:	3004      	adds	r0, #4
 800d78a:	ad43      	add	r5, sp, #268	@ 0x10c
 800d78c:	5029      	str	r1, [r5, r0]
 800d78e:	9302      	str	r3, [sp, #8]
 800d790:	7813      	ldrb	r3, [r2, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d100      	bne.n	800d798 <__ssvfiscanf_r+0x30>
 800d796:	e13a      	b.n	800da0e <__ssvfiscanf_r+0x2a6>
 800d798:	2108      	movs	r1, #8
 800d79a:	2708      	movs	r7, #8
 800d79c:	4ea0      	ldr	r6, [pc, #640]	@ (800da20 <__ssvfiscanf_r+0x2b8>)
 800d79e:	1c55      	adds	r5, r2, #1
 800d7a0:	5cf0      	ldrb	r0, [r6, r3]
 800d7a2:	4001      	ands	r1, r0
 800d7a4:	4238      	tst	r0, r7
 800d7a6:	d01c      	beq.n	800d7e2 <__ssvfiscanf_r+0x7a>
 800d7a8:	6863      	ldr	r3, [r4, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	dd0f      	ble.n	800d7ce <__ssvfiscanf_r+0x66>
 800d7ae:	6823      	ldr	r3, [r4, #0]
 800d7b0:	781a      	ldrb	r2, [r3, #0]
 800d7b2:	5cb2      	ldrb	r2, [r6, r2]
 800d7b4:	423a      	tst	r2, r7
 800d7b6:	d101      	bne.n	800d7bc <__ssvfiscanf_r+0x54>
 800d7b8:	002a      	movs	r2, r5
 800d7ba:	e7e9      	b.n	800d790 <__ssvfiscanf_r+0x28>
 800d7bc:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800d7be:	3301      	adds	r3, #1
 800d7c0:	3201      	adds	r2, #1
 800d7c2:	9247      	str	r2, [sp, #284]	@ 0x11c
 800d7c4:	6862      	ldr	r2, [r4, #4]
 800d7c6:	6023      	str	r3, [r4, #0]
 800d7c8:	3a01      	subs	r2, #1
 800d7ca:	6062      	str	r2, [r4, #4]
 800d7cc:	e7ec      	b.n	800d7a8 <__ssvfiscanf_r+0x40>
 800d7ce:	22c0      	movs	r2, #192	@ 0xc0
 800d7d0:	ab43      	add	r3, sp, #268	@ 0x10c
 800d7d2:	0052      	lsls	r2, r2, #1
 800d7d4:	0021      	movs	r1, r4
 800d7d6:	589b      	ldr	r3, [r3, r2]
 800d7d8:	9801      	ldr	r0, [sp, #4]
 800d7da:	4798      	blx	r3
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d0e6      	beq.n	800d7ae <__ssvfiscanf_r+0x46>
 800d7e0:	e7ea      	b.n	800d7b8 <__ssvfiscanf_r+0x50>
 800d7e2:	001e      	movs	r6, r3
 800d7e4:	2b25      	cmp	r3, #37	@ 0x25
 800d7e6:	d160      	bne.n	800d8aa <__ssvfiscanf_r+0x142>
 800d7e8:	9145      	str	r1, [sp, #276]	@ 0x114
 800d7ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d7ec:	7853      	ldrb	r3, [r2, #1]
 800d7ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7f0:	d102      	bne.n	800d7f8 <__ssvfiscanf_r+0x90>
 800d7f2:	3b1a      	subs	r3, #26
 800d7f4:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d7f6:	1c95      	adds	r5, r2, #2
 800d7f8:	002e      	movs	r6, r5
 800d7fa:	220a      	movs	r2, #10
 800d7fc:	7831      	ldrb	r1, [r6, #0]
 800d7fe:	1c75      	adds	r5, r6, #1
 800d800:	000b      	movs	r3, r1
 800d802:	3b30      	subs	r3, #48	@ 0x30
 800d804:	2b09      	cmp	r3, #9
 800d806:	d91d      	bls.n	800d844 <__ssvfiscanf_r+0xdc>
 800d808:	4f86      	ldr	r7, [pc, #536]	@ (800da24 <__ssvfiscanf_r+0x2bc>)
 800d80a:	2203      	movs	r2, #3
 800d80c:	0038      	movs	r0, r7
 800d80e:	f7fd fd78 	bl	800b302 <memchr>
 800d812:	2800      	cmp	r0, #0
 800d814:	d006      	beq.n	800d824 <__ssvfiscanf_r+0xbc>
 800d816:	2301      	movs	r3, #1
 800d818:	1bc0      	subs	r0, r0, r7
 800d81a:	4083      	lsls	r3, r0
 800d81c:	002e      	movs	r6, r5
 800d81e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800d820:	4313      	orrs	r3, r2
 800d822:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d824:	1c75      	adds	r5, r6, #1
 800d826:	7836      	ldrb	r6, [r6, #0]
 800d828:	2e78      	cmp	r6, #120	@ 0x78
 800d82a:	d806      	bhi.n	800d83a <__ssvfiscanf_r+0xd2>
 800d82c:	2e57      	cmp	r6, #87	@ 0x57
 800d82e:	d810      	bhi.n	800d852 <__ssvfiscanf_r+0xea>
 800d830:	2e25      	cmp	r6, #37	@ 0x25
 800d832:	d03a      	beq.n	800d8aa <__ssvfiscanf_r+0x142>
 800d834:	d834      	bhi.n	800d8a0 <__ssvfiscanf_r+0x138>
 800d836:	2e00      	cmp	r6, #0
 800d838:	d055      	beq.n	800d8e6 <__ssvfiscanf_r+0x17e>
 800d83a:	2303      	movs	r3, #3
 800d83c:	9349      	str	r3, [sp, #292]	@ 0x124
 800d83e:	3307      	adds	r3, #7
 800d840:	9344      	str	r3, [sp, #272]	@ 0x110
 800d842:	e069      	b.n	800d918 <__ssvfiscanf_r+0x1b0>
 800d844:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d846:	002e      	movs	r6, r5
 800d848:	4353      	muls	r3, r2
 800d84a:	3b30      	subs	r3, #48	@ 0x30
 800d84c:	185b      	adds	r3, r3, r1
 800d84e:	9345      	str	r3, [sp, #276]	@ 0x114
 800d850:	e7d4      	b.n	800d7fc <__ssvfiscanf_r+0x94>
 800d852:	0030      	movs	r0, r6
 800d854:	3858      	subs	r0, #88	@ 0x58
 800d856:	2820      	cmp	r0, #32
 800d858:	d8ef      	bhi.n	800d83a <__ssvfiscanf_r+0xd2>
 800d85a:	f7f2 fc71 	bl	8000140 <__gnu_thumb1_case_shi>
 800d85e:	004b      	.short	0x004b
 800d860:	ffeeffee 	.word	0xffeeffee
 800d864:	ffee007d 	.word	0xffee007d
 800d868:	ffeeffee 	.word	0xffeeffee
 800d86c:	ffeeffee 	.word	0xffeeffee
 800d870:	ffeeffee 	.word	0xffeeffee
 800d874:	007b0088 	.word	0x007b0088
 800d878:	00240024 	.word	0x00240024
 800d87c:	ffee0024 	.word	0xffee0024
 800d880:	ffee0055 	.word	0xffee0055
 800d884:	ffeeffee 	.word	0xffeeffee
 800d888:	0090ffee 	.word	0x0090ffee
 800d88c:	00470059 	.word	0x00470059
 800d890:	ffeeffee 	.word	0xffeeffee
 800d894:	ffee008e 	.word	0xffee008e
 800d898:	ffee007b 	.word	0xffee007b
 800d89c:	004bffee 	.word	0x004bffee
 800d8a0:	3e45      	subs	r6, #69	@ 0x45
 800d8a2:	2e02      	cmp	r6, #2
 800d8a4:	d8c9      	bhi.n	800d83a <__ssvfiscanf_r+0xd2>
 800d8a6:	2305      	movs	r3, #5
 800d8a8:	e035      	b.n	800d916 <__ssvfiscanf_r+0x1ae>
 800d8aa:	6863      	ldr	r3, [r4, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	dd0d      	ble.n	800d8cc <__ssvfiscanf_r+0x164>
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	781a      	ldrb	r2, [r3, #0]
 800d8b4:	42b2      	cmp	r2, r6
 800d8b6:	d000      	beq.n	800d8ba <__ssvfiscanf_r+0x152>
 800d8b8:	e0a9      	b.n	800da0e <__ssvfiscanf_r+0x2a6>
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	6862      	ldr	r2, [r4, #4]
 800d8be:	6023      	str	r3, [r4, #0]
 800d8c0:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d8c2:	3a01      	subs	r2, #1
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	6062      	str	r2, [r4, #4]
 800d8c8:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d8ca:	e775      	b.n	800d7b8 <__ssvfiscanf_r+0x50>
 800d8cc:	23c0      	movs	r3, #192	@ 0xc0
 800d8ce:	aa43      	add	r2, sp, #268	@ 0x10c
 800d8d0:	005b      	lsls	r3, r3, #1
 800d8d2:	0021      	movs	r1, r4
 800d8d4:	58d3      	ldr	r3, [r2, r3]
 800d8d6:	9801      	ldr	r0, [sp, #4]
 800d8d8:	4798      	blx	r3
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	d0e8      	beq.n	800d8b0 <__ssvfiscanf_r+0x148>
 800d8de:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	d000      	beq.n	800d8e6 <__ssvfiscanf_r+0x17e>
 800d8e4:	e08b      	b.n	800d9fe <__ssvfiscanf_r+0x296>
 800d8e6:	2001      	movs	r0, #1
 800d8e8:	4240      	negs	r0, r0
 800d8ea:	e08c      	b.n	800da06 <__ssvfiscanf_r+0x29e>
 800d8ec:	2320      	movs	r3, #32
 800d8ee:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d8f4:	2380      	movs	r3, #128	@ 0x80
 800d8f6:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d8fe:	2310      	movs	r3, #16
 800d900:	9344      	str	r3, [sp, #272]	@ 0x110
 800d902:	2e6e      	cmp	r6, #110	@ 0x6e
 800d904:	d902      	bls.n	800d90c <__ssvfiscanf_r+0x1a4>
 800d906:	e005      	b.n	800d914 <__ssvfiscanf_r+0x1ac>
 800d908:	2300      	movs	r3, #0
 800d90a:	9344      	str	r3, [sp, #272]	@ 0x110
 800d90c:	2303      	movs	r3, #3
 800d90e:	e002      	b.n	800d916 <__ssvfiscanf_r+0x1ae>
 800d910:	2308      	movs	r3, #8
 800d912:	9344      	str	r3, [sp, #272]	@ 0x110
 800d914:	2304      	movs	r3, #4
 800d916:	9349      	str	r3, [sp, #292]	@ 0x124
 800d918:	6863      	ldr	r3, [r4, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	dd3e      	ble.n	800d99c <__ssvfiscanf_r+0x234>
 800d91e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d920:	065b      	lsls	r3, r3, #25
 800d922:	d408      	bmi.n	800d936 <__ssvfiscanf_r+0x1ce>
 800d924:	27c0      	movs	r7, #192	@ 0xc0
 800d926:	2608      	movs	r6, #8
 800d928:	007f      	lsls	r7, r7, #1
 800d92a:	6823      	ldr	r3, [r4, #0]
 800d92c:	493c      	ldr	r1, [pc, #240]	@ (800da20 <__ssvfiscanf_r+0x2b8>)
 800d92e:	781a      	ldrb	r2, [r3, #0]
 800d930:	5c8a      	ldrb	r2, [r1, r2]
 800d932:	4232      	tst	r2, r6
 800d934:	d13c      	bne.n	800d9b0 <__ssvfiscanf_r+0x248>
 800d936:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 800d938:	2b02      	cmp	r3, #2
 800d93a:	dc4c      	bgt.n	800d9d6 <__ssvfiscanf_r+0x26e>
 800d93c:	0022      	movs	r2, r4
 800d93e:	9801      	ldr	r0, [sp, #4]
 800d940:	ab02      	add	r3, sp, #8
 800d942:	a943      	add	r1, sp, #268	@ 0x10c
 800d944:	f000 f9b6 	bl	800dcb4 <_scanf_chars>
 800d948:	2801      	cmp	r0, #1
 800d94a:	d060      	beq.n	800da0e <__ssvfiscanf_r+0x2a6>
 800d94c:	2802      	cmp	r0, #2
 800d94e:	d000      	beq.n	800d952 <__ssvfiscanf_r+0x1ea>
 800d950:	e732      	b.n	800d7b8 <__ssvfiscanf_r+0x50>
 800d952:	e7c4      	b.n	800d8de <__ssvfiscanf_r+0x176>
 800d954:	230a      	movs	r3, #10
 800d956:	e7d3      	b.n	800d900 <__ssvfiscanf_r+0x198>
 800d958:	0029      	movs	r1, r5
 800d95a:	a803      	add	r0, sp, #12
 800d95c:	f000 fc27 	bl	800e1ae <__sccl>
 800d960:	2340      	movs	r3, #64	@ 0x40
 800d962:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800d964:	0005      	movs	r5, r0
 800d966:	4313      	orrs	r3, r2
 800d968:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d96a:	2301      	movs	r3, #1
 800d96c:	e7d3      	b.n	800d916 <__ssvfiscanf_r+0x1ae>
 800d96e:	2340      	movs	r3, #64	@ 0x40
 800d970:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800d972:	4313      	orrs	r3, r2
 800d974:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d976:	2300      	movs	r3, #0
 800d978:	e7cd      	b.n	800d916 <__ssvfiscanf_r+0x1ae>
 800d97a:	2302      	movs	r3, #2
 800d97c:	e7cb      	b.n	800d916 <__ssvfiscanf_r+0x1ae>
 800d97e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800d980:	06d3      	lsls	r3, r2, #27
 800d982:	d500      	bpl.n	800d986 <__ssvfiscanf_r+0x21e>
 800d984:	e718      	b.n	800d7b8 <__ssvfiscanf_r+0x50>
 800d986:	9b02      	ldr	r3, [sp, #8]
 800d988:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 800d98a:	1d18      	adds	r0, r3, #4
 800d98c:	9002      	str	r0, [sp, #8]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	07d6      	lsls	r6, r2, #31
 800d992:	d501      	bpl.n	800d998 <__ssvfiscanf_r+0x230>
 800d994:	8019      	strh	r1, [r3, #0]
 800d996:	e70f      	b.n	800d7b8 <__ssvfiscanf_r+0x50>
 800d998:	6019      	str	r1, [r3, #0]
 800d99a:	e70d      	b.n	800d7b8 <__ssvfiscanf_r+0x50>
 800d99c:	23c0      	movs	r3, #192	@ 0xc0
 800d99e:	aa43      	add	r2, sp, #268	@ 0x10c
 800d9a0:	005b      	lsls	r3, r3, #1
 800d9a2:	0021      	movs	r1, r4
 800d9a4:	58d3      	ldr	r3, [r2, r3]
 800d9a6:	9801      	ldr	r0, [sp, #4]
 800d9a8:	4798      	blx	r3
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	d0b7      	beq.n	800d91e <__ssvfiscanf_r+0x1b6>
 800d9ae:	e796      	b.n	800d8de <__ssvfiscanf_r+0x176>
 800d9b0:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800d9b2:	3201      	adds	r2, #1
 800d9b4:	9247      	str	r2, [sp, #284]	@ 0x11c
 800d9b6:	6862      	ldr	r2, [r4, #4]
 800d9b8:	3a01      	subs	r2, #1
 800d9ba:	6062      	str	r2, [r4, #4]
 800d9bc:	2a00      	cmp	r2, #0
 800d9be:	dd02      	ble.n	800d9c6 <__ssvfiscanf_r+0x25e>
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	6023      	str	r3, [r4, #0]
 800d9c4:	e7b1      	b.n	800d92a <__ssvfiscanf_r+0x1c2>
 800d9c6:	ab43      	add	r3, sp, #268	@ 0x10c
 800d9c8:	0021      	movs	r1, r4
 800d9ca:	59db      	ldr	r3, [r3, r7]
 800d9cc:	9801      	ldr	r0, [sp, #4]
 800d9ce:	4798      	blx	r3
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d0aa      	beq.n	800d92a <__ssvfiscanf_r+0x1c2>
 800d9d4:	e783      	b.n	800d8de <__ssvfiscanf_r+0x176>
 800d9d6:	2b04      	cmp	r3, #4
 800d9d8:	dc06      	bgt.n	800d9e8 <__ssvfiscanf_r+0x280>
 800d9da:	0022      	movs	r2, r4
 800d9dc:	9801      	ldr	r0, [sp, #4]
 800d9de:	ab02      	add	r3, sp, #8
 800d9e0:	a943      	add	r1, sp, #268	@ 0x10c
 800d9e2:	f000 f9c7 	bl	800dd74 <_scanf_i>
 800d9e6:	e7af      	b.n	800d948 <__ssvfiscanf_r+0x1e0>
 800d9e8:	4b0f      	ldr	r3, [pc, #60]	@ (800da28 <__ssvfiscanf_r+0x2c0>)
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d100      	bne.n	800d9f0 <__ssvfiscanf_r+0x288>
 800d9ee:	e6e3      	b.n	800d7b8 <__ssvfiscanf_r+0x50>
 800d9f0:	0022      	movs	r2, r4
 800d9f2:	9801      	ldr	r0, [sp, #4]
 800d9f4:	ab02      	add	r3, sp, #8
 800d9f6:	a943      	add	r1, sp, #268	@ 0x10c
 800d9f8:	f7fc ff3a 	bl	800a870 <_scanf_float>
 800d9fc:	e7a4      	b.n	800d948 <__ssvfiscanf_r+0x1e0>
 800d9fe:	89a3      	ldrh	r3, [r4, #12]
 800da00:	065b      	lsls	r3, r3, #25
 800da02:	d500      	bpl.n	800da06 <__ssvfiscanf_r+0x29e>
 800da04:	e76f      	b.n	800d8e6 <__ssvfiscanf_r+0x17e>
 800da06:	23a5      	movs	r3, #165	@ 0xa5
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	449d      	add	sp, r3
 800da0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da0e:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800da10:	e7f9      	b.n	800da06 <__ssvfiscanf_r+0x29e>
 800da12:	46c0      	nop			@ (mov r8, r8)
 800da14:	fffffd6c 	.word	0xfffffd6c
 800da18:	0800d6b1 	.word	0x0800d6b1
 800da1c:	0800d729 	.word	0x0800d729
 800da20:	0800ea49 	.word	0x0800ea49
 800da24:	0800eb4f 	.word	0x0800eb4f
 800da28:	0800a871 	.word	0x0800a871

0800da2c <__sfputc_r>:
 800da2c:	6893      	ldr	r3, [r2, #8]
 800da2e:	b510      	push	{r4, lr}
 800da30:	3b01      	subs	r3, #1
 800da32:	6093      	str	r3, [r2, #8]
 800da34:	2b00      	cmp	r3, #0
 800da36:	da04      	bge.n	800da42 <__sfputc_r+0x16>
 800da38:	6994      	ldr	r4, [r2, #24]
 800da3a:	42a3      	cmp	r3, r4
 800da3c:	db07      	blt.n	800da4e <__sfputc_r+0x22>
 800da3e:	290a      	cmp	r1, #10
 800da40:	d005      	beq.n	800da4e <__sfputc_r+0x22>
 800da42:	6813      	ldr	r3, [r2, #0]
 800da44:	1c58      	adds	r0, r3, #1
 800da46:	6010      	str	r0, [r2, #0]
 800da48:	7019      	strb	r1, [r3, #0]
 800da4a:	0008      	movs	r0, r1
 800da4c:	bd10      	pop	{r4, pc}
 800da4e:	f7fd fb1f 	bl	800b090 <__swbuf_r>
 800da52:	0001      	movs	r1, r0
 800da54:	e7f9      	b.n	800da4a <__sfputc_r+0x1e>

0800da56 <__sfputs_r>:
 800da56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da58:	0006      	movs	r6, r0
 800da5a:	000f      	movs	r7, r1
 800da5c:	0014      	movs	r4, r2
 800da5e:	18d5      	adds	r5, r2, r3
 800da60:	42ac      	cmp	r4, r5
 800da62:	d101      	bne.n	800da68 <__sfputs_r+0x12>
 800da64:	2000      	movs	r0, #0
 800da66:	e007      	b.n	800da78 <__sfputs_r+0x22>
 800da68:	7821      	ldrb	r1, [r4, #0]
 800da6a:	003a      	movs	r2, r7
 800da6c:	0030      	movs	r0, r6
 800da6e:	f7ff ffdd 	bl	800da2c <__sfputc_r>
 800da72:	3401      	adds	r4, #1
 800da74:	1c43      	adds	r3, r0, #1
 800da76:	d1f3      	bne.n	800da60 <__sfputs_r+0xa>
 800da78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da7c <_vfiprintf_r>:
 800da7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da7e:	b0a1      	sub	sp, #132	@ 0x84
 800da80:	000f      	movs	r7, r1
 800da82:	0015      	movs	r5, r2
 800da84:	001e      	movs	r6, r3
 800da86:	9003      	str	r0, [sp, #12]
 800da88:	2800      	cmp	r0, #0
 800da8a:	d004      	beq.n	800da96 <_vfiprintf_r+0x1a>
 800da8c:	6a03      	ldr	r3, [r0, #32]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d101      	bne.n	800da96 <_vfiprintf_r+0x1a>
 800da92:	f7fd f98b 	bl	800adac <__sinit>
 800da96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da98:	07db      	lsls	r3, r3, #31
 800da9a:	d405      	bmi.n	800daa8 <_vfiprintf_r+0x2c>
 800da9c:	89bb      	ldrh	r3, [r7, #12]
 800da9e:	059b      	lsls	r3, r3, #22
 800daa0:	d402      	bmi.n	800daa8 <_vfiprintf_r+0x2c>
 800daa2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800daa4:	f7fd fc2b 	bl	800b2fe <__retarget_lock_acquire_recursive>
 800daa8:	89bb      	ldrh	r3, [r7, #12]
 800daaa:	071b      	lsls	r3, r3, #28
 800daac:	d502      	bpl.n	800dab4 <_vfiprintf_r+0x38>
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d113      	bne.n	800dadc <_vfiprintf_r+0x60>
 800dab4:	0039      	movs	r1, r7
 800dab6:	9803      	ldr	r0, [sp, #12]
 800dab8:	f7fd fb2c 	bl	800b114 <__swsetup_r>
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d00d      	beq.n	800dadc <_vfiprintf_r+0x60>
 800dac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dac2:	07db      	lsls	r3, r3, #31
 800dac4:	d503      	bpl.n	800dace <_vfiprintf_r+0x52>
 800dac6:	2001      	movs	r0, #1
 800dac8:	4240      	negs	r0, r0
 800daca:	b021      	add	sp, #132	@ 0x84
 800dacc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dace:	89bb      	ldrh	r3, [r7, #12]
 800dad0:	059b      	lsls	r3, r3, #22
 800dad2:	d4f8      	bmi.n	800dac6 <_vfiprintf_r+0x4a>
 800dad4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800dad6:	f7fd fc13 	bl	800b300 <__retarget_lock_release_recursive>
 800dada:	e7f4      	b.n	800dac6 <_vfiprintf_r+0x4a>
 800dadc:	2300      	movs	r3, #0
 800dade:	ac08      	add	r4, sp, #32
 800dae0:	6163      	str	r3, [r4, #20]
 800dae2:	3320      	adds	r3, #32
 800dae4:	7663      	strb	r3, [r4, #25]
 800dae6:	3310      	adds	r3, #16
 800dae8:	76a3      	strb	r3, [r4, #26]
 800daea:	9607      	str	r6, [sp, #28]
 800daec:	002e      	movs	r6, r5
 800daee:	7833      	ldrb	r3, [r6, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d001      	beq.n	800daf8 <_vfiprintf_r+0x7c>
 800daf4:	2b25      	cmp	r3, #37	@ 0x25
 800daf6:	d148      	bne.n	800db8a <_vfiprintf_r+0x10e>
 800daf8:	1b73      	subs	r3, r6, r5
 800dafa:	9305      	str	r3, [sp, #20]
 800dafc:	42ae      	cmp	r6, r5
 800dafe:	d00b      	beq.n	800db18 <_vfiprintf_r+0x9c>
 800db00:	002a      	movs	r2, r5
 800db02:	0039      	movs	r1, r7
 800db04:	9803      	ldr	r0, [sp, #12]
 800db06:	f7ff ffa6 	bl	800da56 <__sfputs_r>
 800db0a:	3001      	adds	r0, #1
 800db0c:	d100      	bne.n	800db10 <_vfiprintf_r+0x94>
 800db0e:	e0ae      	b.n	800dc6e <_vfiprintf_r+0x1f2>
 800db10:	6963      	ldr	r3, [r4, #20]
 800db12:	9a05      	ldr	r2, [sp, #20]
 800db14:	189b      	adds	r3, r3, r2
 800db16:	6163      	str	r3, [r4, #20]
 800db18:	7833      	ldrb	r3, [r6, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d100      	bne.n	800db20 <_vfiprintf_r+0xa4>
 800db1e:	e0a6      	b.n	800dc6e <_vfiprintf_r+0x1f2>
 800db20:	2201      	movs	r2, #1
 800db22:	2300      	movs	r3, #0
 800db24:	4252      	negs	r2, r2
 800db26:	6062      	str	r2, [r4, #4]
 800db28:	a904      	add	r1, sp, #16
 800db2a:	3254      	adds	r2, #84	@ 0x54
 800db2c:	1852      	adds	r2, r2, r1
 800db2e:	1c75      	adds	r5, r6, #1
 800db30:	6023      	str	r3, [r4, #0]
 800db32:	60e3      	str	r3, [r4, #12]
 800db34:	60a3      	str	r3, [r4, #8]
 800db36:	7013      	strb	r3, [r2, #0]
 800db38:	65a3      	str	r3, [r4, #88]	@ 0x58
 800db3a:	4b59      	ldr	r3, [pc, #356]	@ (800dca0 <_vfiprintf_r+0x224>)
 800db3c:	2205      	movs	r2, #5
 800db3e:	0018      	movs	r0, r3
 800db40:	7829      	ldrb	r1, [r5, #0]
 800db42:	9305      	str	r3, [sp, #20]
 800db44:	f7fd fbdd 	bl	800b302 <memchr>
 800db48:	1c6e      	adds	r6, r5, #1
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d11f      	bne.n	800db8e <_vfiprintf_r+0x112>
 800db4e:	6822      	ldr	r2, [r4, #0]
 800db50:	06d3      	lsls	r3, r2, #27
 800db52:	d504      	bpl.n	800db5e <_vfiprintf_r+0xe2>
 800db54:	2353      	movs	r3, #83	@ 0x53
 800db56:	a904      	add	r1, sp, #16
 800db58:	185b      	adds	r3, r3, r1
 800db5a:	2120      	movs	r1, #32
 800db5c:	7019      	strb	r1, [r3, #0]
 800db5e:	0713      	lsls	r3, r2, #28
 800db60:	d504      	bpl.n	800db6c <_vfiprintf_r+0xf0>
 800db62:	2353      	movs	r3, #83	@ 0x53
 800db64:	a904      	add	r1, sp, #16
 800db66:	185b      	adds	r3, r3, r1
 800db68:	212b      	movs	r1, #43	@ 0x2b
 800db6a:	7019      	strb	r1, [r3, #0]
 800db6c:	782b      	ldrb	r3, [r5, #0]
 800db6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800db70:	d016      	beq.n	800dba0 <_vfiprintf_r+0x124>
 800db72:	002e      	movs	r6, r5
 800db74:	2100      	movs	r1, #0
 800db76:	200a      	movs	r0, #10
 800db78:	68e3      	ldr	r3, [r4, #12]
 800db7a:	7832      	ldrb	r2, [r6, #0]
 800db7c:	1c75      	adds	r5, r6, #1
 800db7e:	3a30      	subs	r2, #48	@ 0x30
 800db80:	2a09      	cmp	r2, #9
 800db82:	d950      	bls.n	800dc26 <_vfiprintf_r+0x1aa>
 800db84:	2900      	cmp	r1, #0
 800db86:	d111      	bne.n	800dbac <_vfiprintf_r+0x130>
 800db88:	e017      	b.n	800dbba <_vfiprintf_r+0x13e>
 800db8a:	3601      	adds	r6, #1
 800db8c:	e7af      	b.n	800daee <_vfiprintf_r+0x72>
 800db8e:	9b05      	ldr	r3, [sp, #20]
 800db90:	6822      	ldr	r2, [r4, #0]
 800db92:	1ac0      	subs	r0, r0, r3
 800db94:	2301      	movs	r3, #1
 800db96:	4083      	lsls	r3, r0
 800db98:	4313      	orrs	r3, r2
 800db9a:	0035      	movs	r5, r6
 800db9c:	6023      	str	r3, [r4, #0]
 800db9e:	e7cc      	b.n	800db3a <_vfiprintf_r+0xbe>
 800dba0:	9b07      	ldr	r3, [sp, #28]
 800dba2:	1d19      	adds	r1, r3, #4
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	9107      	str	r1, [sp, #28]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	db01      	blt.n	800dbb0 <_vfiprintf_r+0x134>
 800dbac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbae:	e004      	b.n	800dbba <_vfiprintf_r+0x13e>
 800dbb0:	425b      	negs	r3, r3
 800dbb2:	60e3      	str	r3, [r4, #12]
 800dbb4:	2302      	movs	r3, #2
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	6023      	str	r3, [r4, #0]
 800dbba:	7833      	ldrb	r3, [r6, #0]
 800dbbc:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbbe:	d10c      	bne.n	800dbda <_vfiprintf_r+0x15e>
 800dbc0:	7873      	ldrb	r3, [r6, #1]
 800dbc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbc4:	d134      	bne.n	800dc30 <_vfiprintf_r+0x1b4>
 800dbc6:	9b07      	ldr	r3, [sp, #28]
 800dbc8:	3602      	adds	r6, #2
 800dbca:	1d1a      	adds	r2, r3, #4
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	9207      	str	r2, [sp, #28]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	da01      	bge.n	800dbd8 <_vfiprintf_r+0x15c>
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	425b      	negs	r3, r3
 800dbd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbda:	4d32      	ldr	r5, [pc, #200]	@ (800dca4 <_vfiprintf_r+0x228>)
 800dbdc:	2203      	movs	r2, #3
 800dbde:	0028      	movs	r0, r5
 800dbe0:	7831      	ldrb	r1, [r6, #0]
 800dbe2:	f7fd fb8e 	bl	800b302 <memchr>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d006      	beq.n	800dbf8 <_vfiprintf_r+0x17c>
 800dbea:	2340      	movs	r3, #64	@ 0x40
 800dbec:	1b40      	subs	r0, r0, r5
 800dbee:	4083      	lsls	r3, r0
 800dbf0:	6822      	ldr	r2, [r4, #0]
 800dbf2:	3601      	adds	r6, #1
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	6023      	str	r3, [r4, #0]
 800dbf8:	7831      	ldrb	r1, [r6, #0]
 800dbfa:	2206      	movs	r2, #6
 800dbfc:	482a      	ldr	r0, [pc, #168]	@ (800dca8 <_vfiprintf_r+0x22c>)
 800dbfe:	1c75      	adds	r5, r6, #1
 800dc00:	7621      	strb	r1, [r4, #24]
 800dc02:	f7fd fb7e 	bl	800b302 <memchr>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d040      	beq.n	800dc8c <_vfiprintf_r+0x210>
 800dc0a:	4b28      	ldr	r3, [pc, #160]	@ (800dcac <_vfiprintf_r+0x230>)
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d122      	bne.n	800dc56 <_vfiprintf_r+0x1da>
 800dc10:	2207      	movs	r2, #7
 800dc12:	9b07      	ldr	r3, [sp, #28]
 800dc14:	3307      	adds	r3, #7
 800dc16:	4393      	bics	r3, r2
 800dc18:	3308      	adds	r3, #8
 800dc1a:	9307      	str	r3, [sp, #28]
 800dc1c:	6963      	ldr	r3, [r4, #20]
 800dc1e:	9a04      	ldr	r2, [sp, #16]
 800dc20:	189b      	adds	r3, r3, r2
 800dc22:	6163      	str	r3, [r4, #20]
 800dc24:	e762      	b.n	800daec <_vfiprintf_r+0x70>
 800dc26:	4343      	muls	r3, r0
 800dc28:	002e      	movs	r6, r5
 800dc2a:	2101      	movs	r1, #1
 800dc2c:	189b      	adds	r3, r3, r2
 800dc2e:	e7a4      	b.n	800db7a <_vfiprintf_r+0xfe>
 800dc30:	2300      	movs	r3, #0
 800dc32:	200a      	movs	r0, #10
 800dc34:	0019      	movs	r1, r3
 800dc36:	3601      	adds	r6, #1
 800dc38:	6063      	str	r3, [r4, #4]
 800dc3a:	7832      	ldrb	r2, [r6, #0]
 800dc3c:	1c75      	adds	r5, r6, #1
 800dc3e:	3a30      	subs	r2, #48	@ 0x30
 800dc40:	2a09      	cmp	r2, #9
 800dc42:	d903      	bls.n	800dc4c <_vfiprintf_r+0x1d0>
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d0c8      	beq.n	800dbda <_vfiprintf_r+0x15e>
 800dc48:	9109      	str	r1, [sp, #36]	@ 0x24
 800dc4a:	e7c6      	b.n	800dbda <_vfiprintf_r+0x15e>
 800dc4c:	4341      	muls	r1, r0
 800dc4e:	002e      	movs	r6, r5
 800dc50:	2301      	movs	r3, #1
 800dc52:	1889      	adds	r1, r1, r2
 800dc54:	e7f1      	b.n	800dc3a <_vfiprintf_r+0x1be>
 800dc56:	aa07      	add	r2, sp, #28
 800dc58:	9200      	str	r2, [sp, #0]
 800dc5a:	0021      	movs	r1, r4
 800dc5c:	003a      	movs	r2, r7
 800dc5e:	4b14      	ldr	r3, [pc, #80]	@ (800dcb0 <_vfiprintf_r+0x234>)
 800dc60:	9803      	ldr	r0, [sp, #12]
 800dc62:	f7fc fa49 	bl	800a0f8 <_printf_float>
 800dc66:	9004      	str	r0, [sp, #16]
 800dc68:	9b04      	ldr	r3, [sp, #16]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	d1d6      	bne.n	800dc1c <_vfiprintf_r+0x1a0>
 800dc6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc70:	07db      	lsls	r3, r3, #31
 800dc72:	d405      	bmi.n	800dc80 <_vfiprintf_r+0x204>
 800dc74:	89bb      	ldrh	r3, [r7, #12]
 800dc76:	059b      	lsls	r3, r3, #22
 800dc78:	d402      	bmi.n	800dc80 <_vfiprintf_r+0x204>
 800dc7a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800dc7c:	f7fd fb40 	bl	800b300 <__retarget_lock_release_recursive>
 800dc80:	89bb      	ldrh	r3, [r7, #12]
 800dc82:	065b      	lsls	r3, r3, #25
 800dc84:	d500      	bpl.n	800dc88 <_vfiprintf_r+0x20c>
 800dc86:	e71e      	b.n	800dac6 <_vfiprintf_r+0x4a>
 800dc88:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800dc8a:	e71e      	b.n	800daca <_vfiprintf_r+0x4e>
 800dc8c:	aa07      	add	r2, sp, #28
 800dc8e:	9200      	str	r2, [sp, #0]
 800dc90:	0021      	movs	r1, r4
 800dc92:	003a      	movs	r2, r7
 800dc94:	4b06      	ldr	r3, [pc, #24]	@ (800dcb0 <_vfiprintf_r+0x234>)
 800dc96:	9803      	ldr	r0, [sp, #12]
 800dc98:	f7fc fcdc 	bl	800a654 <_printf_i>
 800dc9c:	e7e3      	b.n	800dc66 <_vfiprintf_r+0x1ea>
 800dc9e:	46c0      	nop			@ (mov r8, r8)
 800dca0:	0800eb49 	.word	0x0800eb49
 800dca4:	0800eb4f 	.word	0x0800eb4f
 800dca8:	0800eb53 	.word	0x0800eb53
 800dcac:	0800a0f9 	.word	0x0800a0f9
 800dcb0:	0800da57 	.word	0x0800da57

0800dcb4 <_scanf_chars>:
 800dcb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcb6:	0015      	movs	r5, r2
 800dcb8:	688a      	ldr	r2, [r1, #8]
 800dcba:	000c      	movs	r4, r1
 800dcbc:	9001      	str	r0, [sp, #4]
 800dcbe:	2a00      	cmp	r2, #0
 800dcc0:	d104      	bne.n	800dccc <_scanf_chars+0x18>
 800dcc2:	698a      	ldr	r2, [r1, #24]
 800dcc4:	2a00      	cmp	r2, #0
 800dcc6:	d117      	bne.n	800dcf8 <_scanf_chars+0x44>
 800dcc8:	3201      	adds	r2, #1
 800dcca:	60a2      	str	r2, [r4, #8]
 800dccc:	6822      	ldr	r2, [r4, #0]
 800dcce:	06d2      	lsls	r2, r2, #27
 800dcd0:	d403      	bmi.n	800dcda <_scanf_chars+0x26>
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	1d11      	adds	r1, r2, #4
 800dcd6:	6019      	str	r1, [r3, #0]
 800dcd8:	6817      	ldr	r7, [r2, #0]
 800dcda:	2600      	movs	r6, #0
 800dcdc:	69a0      	ldr	r0, [r4, #24]
 800dcde:	2800      	cmp	r0, #0
 800dce0:	d016      	beq.n	800dd10 <_scanf_chars+0x5c>
 800dce2:	2801      	cmp	r0, #1
 800dce4:	d10b      	bne.n	800dcfe <_scanf_chars+0x4a>
 800dce6:	682b      	ldr	r3, [r5, #0]
 800dce8:	6962      	ldr	r2, [r4, #20]
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	5cd3      	ldrb	r3, [r2, r3]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10e      	bne.n	800dd10 <_scanf_chars+0x5c>
 800dcf2:	2e00      	cmp	r6, #0
 800dcf4:	d03b      	beq.n	800dd6e <_scanf_chars+0xba>
 800dcf6:	e029      	b.n	800dd4c <_scanf_chars+0x98>
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	4252      	negs	r2, r2
 800dcfc:	e7e5      	b.n	800dcca <_scanf_chars+0x16>
 800dcfe:	2802      	cmp	r0, #2
 800dd00:	d124      	bne.n	800dd4c <_scanf_chars+0x98>
 800dd02:	682b      	ldr	r3, [r5, #0]
 800dd04:	4a1a      	ldr	r2, [pc, #104]	@ (800dd70 <_scanf_chars+0xbc>)
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	5cd3      	ldrb	r3, [r2, r3]
 800dd0a:	2208      	movs	r2, #8
 800dd0c:	4213      	tst	r3, r2
 800dd0e:	d11d      	bne.n	800dd4c <_scanf_chars+0x98>
 800dd10:	2210      	movs	r2, #16
 800dd12:	6823      	ldr	r3, [r4, #0]
 800dd14:	3601      	adds	r6, #1
 800dd16:	4213      	tst	r3, r2
 800dd18:	d103      	bne.n	800dd22 <_scanf_chars+0x6e>
 800dd1a:	682b      	ldr	r3, [r5, #0]
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	703b      	strb	r3, [r7, #0]
 800dd20:	3701      	adds	r7, #1
 800dd22:	682a      	ldr	r2, [r5, #0]
 800dd24:	686b      	ldr	r3, [r5, #4]
 800dd26:	3201      	adds	r2, #1
 800dd28:	602a      	str	r2, [r5, #0]
 800dd2a:	68a2      	ldr	r2, [r4, #8]
 800dd2c:	3b01      	subs	r3, #1
 800dd2e:	3a01      	subs	r2, #1
 800dd30:	606b      	str	r3, [r5, #4]
 800dd32:	60a2      	str	r2, [r4, #8]
 800dd34:	2a00      	cmp	r2, #0
 800dd36:	d009      	beq.n	800dd4c <_scanf_chars+0x98>
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	dccf      	bgt.n	800dcdc <_scanf_chars+0x28>
 800dd3c:	23c0      	movs	r3, #192	@ 0xc0
 800dd3e:	005b      	lsls	r3, r3, #1
 800dd40:	0029      	movs	r1, r5
 800dd42:	58e3      	ldr	r3, [r4, r3]
 800dd44:	9801      	ldr	r0, [sp, #4]
 800dd46:	4798      	blx	r3
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	d0c7      	beq.n	800dcdc <_scanf_chars+0x28>
 800dd4c:	6822      	ldr	r2, [r4, #0]
 800dd4e:	2310      	movs	r3, #16
 800dd50:	0011      	movs	r1, r2
 800dd52:	4019      	ands	r1, r3
 800dd54:	421a      	tst	r2, r3
 800dd56:	d106      	bne.n	800dd66 <_scanf_chars+0xb2>
 800dd58:	68e3      	ldr	r3, [r4, #12]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	60e3      	str	r3, [r4, #12]
 800dd5e:	69a3      	ldr	r3, [r4, #24]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d000      	beq.n	800dd66 <_scanf_chars+0xb2>
 800dd64:	7039      	strb	r1, [r7, #0]
 800dd66:	2000      	movs	r0, #0
 800dd68:	6923      	ldr	r3, [r4, #16]
 800dd6a:	199b      	adds	r3, r3, r6
 800dd6c:	6123      	str	r3, [r4, #16]
 800dd6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd70:	0800ea49 	.word	0x0800ea49

0800dd74 <_scanf_i>:
 800dd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd76:	b08b      	sub	sp, #44	@ 0x2c
 800dd78:	9301      	str	r3, [sp, #4]
 800dd7a:	4b78      	ldr	r3, [pc, #480]	@ (800df5c <_scanf_i+0x1e8>)
 800dd7c:	0016      	movs	r6, r2
 800dd7e:	9004      	str	r0, [sp, #16]
 800dd80:	aa07      	add	r2, sp, #28
 800dd82:	cba1      	ldmia	r3!, {r0, r5, r7}
 800dd84:	c2a1      	stmia	r2!, {r0, r5, r7}
 800dd86:	4a76      	ldr	r2, [pc, #472]	@ (800df60 <_scanf_i+0x1ec>)
 800dd88:	698b      	ldr	r3, [r1, #24]
 800dd8a:	000c      	movs	r4, r1
 800dd8c:	9205      	str	r2, [sp, #20]
 800dd8e:	2b03      	cmp	r3, #3
 800dd90:	d101      	bne.n	800dd96 <_scanf_i+0x22>
 800dd92:	4b74      	ldr	r3, [pc, #464]	@ (800df64 <_scanf_i+0x1f0>)
 800dd94:	9305      	str	r3, [sp, #20]
 800dd96:	22ae      	movs	r2, #174	@ 0xae
 800dd98:	2000      	movs	r0, #0
 800dd9a:	68a3      	ldr	r3, [r4, #8]
 800dd9c:	0052      	lsls	r2, r2, #1
 800dd9e:	1e59      	subs	r1, r3, #1
 800dda0:	9003      	str	r0, [sp, #12]
 800dda2:	4291      	cmp	r1, r2
 800dda4:	d905      	bls.n	800ddb2 <_scanf_i+0x3e>
 800dda6:	3b5e      	subs	r3, #94	@ 0x5e
 800dda8:	3bff      	subs	r3, #255	@ 0xff
 800ddaa:	9303      	str	r3, [sp, #12]
 800ddac:	235e      	movs	r3, #94	@ 0x5e
 800ddae:	33ff      	adds	r3, #255	@ 0xff
 800ddb0:	60a3      	str	r3, [r4, #8]
 800ddb2:	0023      	movs	r3, r4
 800ddb4:	331c      	adds	r3, #28
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	23d0      	movs	r3, #208	@ 0xd0
 800ddba:	2700      	movs	r7, #0
 800ddbc:	6822      	ldr	r2, [r4, #0]
 800ddbe:	011b      	lsls	r3, r3, #4
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	6023      	str	r3, [r4, #0]
 800ddc4:	9b00      	ldr	r3, [sp, #0]
 800ddc6:	9302      	str	r3, [sp, #8]
 800ddc8:	6833      	ldr	r3, [r6, #0]
 800ddca:	a807      	add	r0, sp, #28
 800ddcc:	7819      	ldrb	r1, [r3, #0]
 800ddce:	00bb      	lsls	r3, r7, #2
 800ddd0:	2202      	movs	r2, #2
 800ddd2:	5818      	ldr	r0, [r3, r0]
 800ddd4:	f7fd fa95 	bl	800b302 <memchr>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d029      	beq.n	800de30 <_scanf_i+0xbc>
 800dddc:	2f01      	cmp	r7, #1
 800ddde:	d15e      	bne.n	800de9e <_scanf_i+0x12a>
 800dde0:	6863      	ldr	r3, [r4, #4]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d106      	bne.n	800ddf4 <_scanf_i+0x80>
 800dde6:	3308      	adds	r3, #8
 800dde8:	6822      	ldr	r2, [r4, #0]
 800ddea:	6063      	str	r3, [r4, #4]
 800ddec:	33f9      	adds	r3, #249	@ 0xf9
 800ddee:	33ff      	adds	r3, #255	@ 0xff
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	6023      	str	r3, [r4, #0]
 800ddf4:	6823      	ldr	r3, [r4, #0]
 800ddf6:	4a5c      	ldr	r2, [pc, #368]	@ (800df68 <_scanf_i+0x1f4>)
 800ddf8:	4013      	ands	r3, r2
 800ddfa:	6023      	str	r3, [r4, #0]
 800ddfc:	68a3      	ldr	r3, [r4, #8]
 800ddfe:	1e5a      	subs	r2, r3, #1
 800de00:	60a2      	str	r2, [r4, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d014      	beq.n	800de30 <_scanf_i+0xbc>
 800de06:	6833      	ldr	r3, [r6, #0]
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	6032      	str	r2, [r6, #0]
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	9a02      	ldr	r2, [sp, #8]
 800de10:	7013      	strb	r3, [r2, #0]
 800de12:	6873      	ldr	r3, [r6, #4]
 800de14:	1c55      	adds	r5, r2, #1
 800de16:	3b01      	subs	r3, #1
 800de18:	6073      	str	r3, [r6, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	dc07      	bgt.n	800de2e <_scanf_i+0xba>
 800de1e:	23c0      	movs	r3, #192	@ 0xc0
 800de20:	005b      	lsls	r3, r3, #1
 800de22:	0031      	movs	r1, r6
 800de24:	58e3      	ldr	r3, [r4, r3]
 800de26:	9804      	ldr	r0, [sp, #16]
 800de28:	4798      	blx	r3
 800de2a:	2800      	cmp	r0, #0
 800de2c:	d17e      	bne.n	800df2c <_scanf_i+0x1b8>
 800de2e:	9502      	str	r5, [sp, #8]
 800de30:	3701      	adds	r7, #1
 800de32:	2f03      	cmp	r7, #3
 800de34:	d1c8      	bne.n	800ddc8 <_scanf_i+0x54>
 800de36:	6863      	ldr	r3, [r4, #4]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d101      	bne.n	800de40 <_scanf_i+0xcc>
 800de3c:	330a      	adds	r3, #10
 800de3e:	6063      	str	r3, [r4, #4]
 800de40:	2700      	movs	r7, #0
 800de42:	6863      	ldr	r3, [r4, #4]
 800de44:	4949      	ldr	r1, [pc, #292]	@ (800df6c <_scanf_i+0x1f8>)
 800de46:	6960      	ldr	r0, [r4, #20]
 800de48:	1ac9      	subs	r1, r1, r3
 800de4a:	f000 f9b0 	bl	800e1ae <__sccl>
 800de4e:	9d02      	ldr	r5, [sp, #8]
 800de50:	68a3      	ldr	r3, [r4, #8]
 800de52:	6820      	ldr	r0, [r4, #0]
 800de54:	9302      	str	r3, [sp, #8]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d03f      	beq.n	800deda <_scanf_i+0x166>
 800de5a:	6831      	ldr	r1, [r6, #0]
 800de5c:	6963      	ldr	r3, [r4, #20]
 800de5e:	780a      	ldrb	r2, [r1, #0]
 800de60:	5c9b      	ldrb	r3, [r3, r2]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d039      	beq.n	800deda <_scanf_i+0x166>
 800de66:	2a30      	cmp	r2, #48	@ 0x30
 800de68:	d128      	bne.n	800debc <_scanf_i+0x148>
 800de6a:	2380      	movs	r3, #128	@ 0x80
 800de6c:	011b      	lsls	r3, r3, #4
 800de6e:	4218      	tst	r0, r3
 800de70:	d024      	beq.n	800debc <_scanf_i+0x148>
 800de72:	9b03      	ldr	r3, [sp, #12]
 800de74:	3701      	adds	r7, #1
 800de76:	2b00      	cmp	r3, #0
 800de78:	d005      	beq.n	800de86 <_scanf_i+0x112>
 800de7a:	001a      	movs	r2, r3
 800de7c:	9b02      	ldr	r3, [sp, #8]
 800de7e:	3a01      	subs	r2, #1
 800de80:	3301      	adds	r3, #1
 800de82:	9203      	str	r2, [sp, #12]
 800de84:	60a3      	str	r3, [r4, #8]
 800de86:	6873      	ldr	r3, [r6, #4]
 800de88:	3b01      	subs	r3, #1
 800de8a:	6073      	str	r3, [r6, #4]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	dd1c      	ble.n	800deca <_scanf_i+0x156>
 800de90:	6833      	ldr	r3, [r6, #0]
 800de92:	3301      	adds	r3, #1
 800de94:	6033      	str	r3, [r6, #0]
 800de96:	68a3      	ldr	r3, [r4, #8]
 800de98:	3b01      	subs	r3, #1
 800de9a:	60a3      	str	r3, [r4, #8]
 800de9c:	e7d8      	b.n	800de50 <_scanf_i+0xdc>
 800de9e:	2f02      	cmp	r7, #2
 800dea0:	d1ac      	bne.n	800ddfc <_scanf_i+0x88>
 800dea2:	23c0      	movs	r3, #192	@ 0xc0
 800dea4:	2180      	movs	r1, #128	@ 0x80
 800dea6:	6822      	ldr	r2, [r4, #0]
 800dea8:	00db      	lsls	r3, r3, #3
 800deaa:	4013      	ands	r3, r2
 800deac:	0089      	lsls	r1, r1, #2
 800deae:	428b      	cmp	r3, r1
 800deb0:	d1c1      	bne.n	800de36 <_scanf_i+0xc2>
 800deb2:	2310      	movs	r3, #16
 800deb4:	6063      	str	r3, [r4, #4]
 800deb6:	33f0      	adds	r3, #240	@ 0xf0
 800deb8:	4313      	orrs	r3, r2
 800deba:	e79e      	b.n	800ddfa <_scanf_i+0x86>
 800debc:	4b2c      	ldr	r3, [pc, #176]	@ (800df70 <_scanf_i+0x1fc>)
 800debe:	4003      	ands	r3, r0
 800dec0:	6023      	str	r3, [r4, #0]
 800dec2:	780b      	ldrb	r3, [r1, #0]
 800dec4:	702b      	strb	r3, [r5, #0]
 800dec6:	3501      	adds	r5, #1
 800dec8:	e7dd      	b.n	800de86 <_scanf_i+0x112>
 800deca:	23c0      	movs	r3, #192	@ 0xc0
 800decc:	005b      	lsls	r3, r3, #1
 800dece:	0031      	movs	r1, r6
 800ded0:	58e3      	ldr	r3, [r4, r3]
 800ded2:	9804      	ldr	r0, [sp, #16]
 800ded4:	4798      	blx	r3
 800ded6:	2800      	cmp	r0, #0
 800ded8:	d0dd      	beq.n	800de96 <_scanf_i+0x122>
 800deda:	6823      	ldr	r3, [r4, #0]
 800dedc:	05db      	lsls	r3, r3, #23
 800dede:	d50e      	bpl.n	800defe <_scanf_i+0x18a>
 800dee0:	9b00      	ldr	r3, [sp, #0]
 800dee2:	429d      	cmp	r5, r3
 800dee4:	d907      	bls.n	800def6 <_scanf_i+0x182>
 800dee6:	23be      	movs	r3, #190	@ 0xbe
 800dee8:	3d01      	subs	r5, #1
 800deea:	005b      	lsls	r3, r3, #1
 800deec:	0032      	movs	r2, r6
 800deee:	7829      	ldrb	r1, [r5, #0]
 800def0:	58e3      	ldr	r3, [r4, r3]
 800def2:	9804      	ldr	r0, [sp, #16]
 800def4:	4798      	blx	r3
 800def6:	9b00      	ldr	r3, [sp, #0]
 800def8:	2001      	movs	r0, #1
 800defa:	429d      	cmp	r5, r3
 800defc:	d029      	beq.n	800df52 <_scanf_i+0x1de>
 800defe:	6821      	ldr	r1, [r4, #0]
 800df00:	2310      	movs	r3, #16
 800df02:	000a      	movs	r2, r1
 800df04:	401a      	ands	r2, r3
 800df06:	4219      	tst	r1, r3
 800df08:	d11c      	bne.n	800df44 <_scanf_i+0x1d0>
 800df0a:	702a      	strb	r2, [r5, #0]
 800df0c:	6863      	ldr	r3, [r4, #4]
 800df0e:	9900      	ldr	r1, [sp, #0]
 800df10:	9804      	ldr	r0, [sp, #16]
 800df12:	9e05      	ldr	r6, [sp, #20]
 800df14:	47b0      	blx	r6
 800df16:	9b01      	ldr	r3, [sp, #4]
 800df18:	6822      	ldr	r2, [r4, #0]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	0691      	lsls	r1, r2, #26
 800df1e:	d507      	bpl.n	800df30 <_scanf_i+0x1bc>
 800df20:	9901      	ldr	r1, [sp, #4]
 800df22:	1d1a      	adds	r2, r3, #4
 800df24:	600a      	str	r2, [r1, #0]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	6018      	str	r0, [r3, #0]
 800df2a:	e008      	b.n	800df3e <_scanf_i+0x1ca>
 800df2c:	2700      	movs	r7, #0
 800df2e:	e7d4      	b.n	800deda <_scanf_i+0x166>
 800df30:	1d19      	adds	r1, r3, #4
 800df32:	07d6      	lsls	r6, r2, #31
 800df34:	d50f      	bpl.n	800df56 <_scanf_i+0x1e2>
 800df36:	9a01      	ldr	r2, [sp, #4]
 800df38:	6011      	str	r1, [r2, #0]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	8018      	strh	r0, [r3, #0]
 800df3e:	68e3      	ldr	r3, [r4, #12]
 800df40:	3301      	adds	r3, #1
 800df42:	60e3      	str	r3, [r4, #12]
 800df44:	2000      	movs	r0, #0
 800df46:	9b00      	ldr	r3, [sp, #0]
 800df48:	1aed      	subs	r5, r5, r3
 800df4a:	6923      	ldr	r3, [r4, #16]
 800df4c:	19ed      	adds	r5, r5, r7
 800df4e:	195b      	adds	r3, r3, r5
 800df50:	6123      	str	r3, [r4, #16]
 800df52:	b00b      	add	sp, #44	@ 0x2c
 800df54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df56:	9a01      	ldr	r2, [sp, #4]
 800df58:	6011      	str	r1, [r2, #0]
 800df5a:	e7e4      	b.n	800df26 <_scanf_i+0x1b2>
 800df5c:	0800e6e8 	.word	0x0800e6e8
 800df60:	0800e529 	.word	0x0800e529
 800df64:	0800d3d1 	.word	0x0800d3d1
 800df68:	fffffaff 	.word	0xfffffaff
 800df6c:	0800eb6a 	.word	0x0800eb6a
 800df70:	fffff6ff 	.word	0xfffff6ff

0800df74 <__sflush_r>:
 800df74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df76:	220c      	movs	r2, #12
 800df78:	5e8b      	ldrsh	r3, [r1, r2]
 800df7a:	0005      	movs	r5, r0
 800df7c:	000c      	movs	r4, r1
 800df7e:	071a      	lsls	r2, r3, #28
 800df80:	d456      	bmi.n	800e030 <__sflush_r+0xbc>
 800df82:	684a      	ldr	r2, [r1, #4]
 800df84:	2a00      	cmp	r2, #0
 800df86:	dc02      	bgt.n	800df8e <__sflush_r+0x1a>
 800df88:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800df8a:	2a00      	cmp	r2, #0
 800df8c:	dd4e      	ble.n	800e02c <__sflush_r+0xb8>
 800df8e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800df90:	2f00      	cmp	r7, #0
 800df92:	d04b      	beq.n	800e02c <__sflush_r+0xb8>
 800df94:	2200      	movs	r2, #0
 800df96:	2080      	movs	r0, #128	@ 0x80
 800df98:	682e      	ldr	r6, [r5, #0]
 800df9a:	602a      	str	r2, [r5, #0]
 800df9c:	001a      	movs	r2, r3
 800df9e:	0140      	lsls	r0, r0, #5
 800dfa0:	6a21      	ldr	r1, [r4, #32]
 800dfa2:	4002      	ands	r2, r0
 800dfa4:	4203      	tst	r3, r0
 800dfa6:	d033      	beq.n	800e010 <__sflush_r+0x9c>
 800dfa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dfaa:	89a3      	ldrh	r3, [r4, #12]
 800dfac:	075b      	lsls	r3, r3, #29
 800dfae:	d506      	bpl.n	800dfbe <__sflush_r+0x4a>
 800dfb0:	6863      	ldr	r3, [r4, #4]
 800dfb2:	1ad2      	subs	r2, r2, r3
 800dfb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d001      	beq.n	800dfbe <__sflush_r+0x4a>
 800dfba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dfbc:	1ad2      	subs	r2, r2, r3
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	0028      	movs	r0, r5
 800dfc2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800dfc4:	6a21      	ldr	r1, [r4, #32]
 800dfc6:	47b8      	blx	r7
 800dfc8:	89a2      	ldrh	r2, [r4, #12]
 800dfca:	1c43      	adds	r3, r0, #1
 800dfcc:	d106      	bne.n	800dfdc <__sflush_r+0x68>
 800dfce:	6829      	ldr	r1, [r5, #0]
 800dfd0:	291d      	cmp	r1, #29
 800dfd2:	d846      	bhi.n	800e062 <__sflush_r+0xee>
 800dfd4:	4b29      	ldr	r3, [pc, #164]	@ (800e07c <__sflush_r+0x108>)
 800dfd6:	410b      	asrs	r3, r1
 800dfd8:	07db      	lsls	r3, r3, #31
 800dfda:	d442      	bmi.n	800e062 <__sflush_r+0xee>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	6063      	str	r3, [r4, #4]
 800dfe0:	6923      	ldr	r3, [r4, #16]
 800dfe2:	6023      	str	r3, [r4, #0]
 800dfe4:	04d2      	lsls	r2, r2, #19
 800dfe6:	d505      	bpl.n	800dff4 <__sflush_r+0x80>
 800dfe8:	1c43      	adds	r3, r0, #1
 800dfea:	d102      	bne.n	800dff2 <__sflush_r+0x7e>
 800dfec:	682b      	ldr	r3, [r5, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d100      	bne.n	800dff4 <__sflush_r+0x80>
 800dff2:	6560      	str	r0, [r4, #84]	@ 0x54
 800dff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dff6:	602e      	str	r6, [r5, #0]
 800dff8:	2900      	cmp	r1, #0
 800dffa:	d017      	beq.n	800e02c <__sflush_r+0xb8>
 800dffc:	0023      	movs	r3, r4
 800dffe:	3344      	adds	r3, #68	@ 0x44
 800e000:	4299      	cmp	r1, r3
 800e002:	d002      	beq.n	800e00a <__sflush_r+0x96>
 800e004:	0028      	movs	r0, r5
 800e006:	f7fe f81d 	bl	800c044 <_free_r>
 800e00a:	2300      	movs	r3, #0
 800e00c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e00e:	e00d      	b.n	800e02c <__sflush_r+0xb8>
 800e010:	2301      	movs	r3, #1
 800e012:	0028      	movs	r0, r5
 800e014:	47b8      	blx	r7
 800e016:	0002      	movs	r2, r0
 800e018:	1c43      	adds	r3, r0, #1
 800e01a:	d1c6      	bne.n	800dfaa <__sflush_r+0x36>
 800e01c:	682b      	ldr	r3, [r5, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d0c3      	beq.n	800dfaa <__sflush_r+0x36>
 800e022:	2b1d      	cmp	r3, #29
 800e024:	d001      	beq.n	800e02a <__sflush_r+0xb6>
 800e026:	2b16      	cmp	r3, #22
 800e028:	d11a      	bne.n	800e060 <__sflush_r+0xec>
 800e02a:	602e      	str	r6, [r5, #0]
 800e02c:	2000      	movs	r0, #0
 800e02e:	e01e      	b.n	800e06e <__sflush_r+0xfa>
 800e030:	690e      	ldr	r6, [r1, #16]
 800e032:	2e00      	cmp	r6, #0
 800e034:	d0fa      	beq.n	800e02c <__sflush_r+0xb8>
 800e036:	680f      	ldr	r7, [r1, #0]
 800e038:	600e      	str	r6, [r1, #0]
 800e03a:	1bba      	subs	r2, r7, r6
 800e03c:	9201      	str	r2, [sp, #4]
 800e03e:	2200      	movs	r2, #0
 800e040:	079b      	lsls	r3, r3, #30
 800e042:	d100      	bne.n	800e046 <__sflush_r+0xd2>
 800e044:	694a      	ldr	r2, [r1, #20]
 800e046:	60a2      	str	r2, [r4, #8]
 800e048:	9b01      	ldr	r3, [sp, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	ddee      	ble.n	800e02c <__sflush_r+0xb8>
 800e04e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e050:	0032      	movs	r2, r6
 800e052:	001f      	movs	r7, r3
 800e054:	0028      	movs	r0, r5
 800e056:	9b01      	ldr	r3, [sp, #4]
 800e058:	6a21      	ldr	r1, [r4, #32]
 800e05a:	47b8      	blx	r7
 800e05c:	2800      	cmp	r0, #0
 800e05e:	dc07      	bgt.n	800e070 <__sflush_r+0xfc>
 800e060:	89a2      	ldrh	r2, [r4, #12]
 800e062:	2340      	movs	r3, #64	@ 0x40
 800e064:	2001      	movs	r0, #1
 800e066:	4313      	orrs	r3, r2
 800e068:	b21b      	sxth	r3, r3
 800e06a:	81a3      	strh	r3, [r4, #12]
 800e06c:	4240      	negs	r0, r0
 800e06e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e070:	9b01      	ldr	r3, [sp, #4]
 800e072:	1836      	adds	r6, r6, r0
 800e074:	1a1b      	subs	r3, r3, r0
 800e076:	9301      	str	r3, [sp, #4]
 800e078:	e7e6      	b.n	800e048 <__sflush_r+0xd4>
 800e07a:	46c0      	nop			@ (mov r8, r8)
 800e07c:	dfbffffe 	.word	0xdfbffffe

0800e080 <_fflush_r>:
 800e080:	690b      	ldr	r3, [r1, #16]
 800e082:	b570      	push	{r4, r5, r6, lr}
 800e084:	0005      	movs	r5, r0
 800e086:	000c      	movs	r4, r1
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d102      	bne.n	800e092 <_fflush_r+0x12>
 800e08c:	2500      	movs	r5, #0
 800e08e:	0028      	movs	r0, r5
 800e090:	bd70      	pop	{r4, r5, r6, pc}
 800e092:	2800      	cmp	r0, #0
 800e094:	d004      	beq.n	800e0a0 <_fflush_r+0x20>
 800e096:	6a03      	ldr	r3, [r0, #32]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d101      	bne.n	800e0a0 <_fflush_r+0x20>
 800e09c:	f7fc fe86 	bl	800adac <__sinit>
 800e0a0:	220c      	movs	r2, #12
 800e0a2:	5ea3      	ldrsh	r3, [r4, r2]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d0f1      	beq.n	800e08c <_fflush_r+0xc>
 800e0a8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e0aa:	07d2      	lsls	r2, r2, #31
 800e0ac:	d404      	bmi.n	800e0b8 <_fflush_r+0x38>
 800e0ae:	059b      	lsls	r3, r3, #22
 800e0b0:	d402      	bmi.n	800e0b8 <_fflush_r+0x38>
 800e0b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0b4:	f7fd f923 	bl	800b2fe <__retarget_lock_acquire_recursive>
 800e0b8:	0028      	movs	r0, r5
 800e0ba:	0021      	movs	r1, r4
 800e0bc:	f7ff ff5a 	bl	800df74 <__sflush_r>
 800e0c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e0c2:	0005      	movs	r5, r0
 800e0c4:	07db      	lsls	r3, r3, #31
 800e0c6:	d4e2      	bmi.n	800e08e <_fflush_r+0xe>
 800e0c8:	89a3      	ldrh	r3, [r4, #12]
 800e0ca:	059b      	lsls	r3, r3, #22
 800e0cc:	d4df      	bmi.n	800e08e <_fflush_r+0xe>
 800e0ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0d0:	f7fd f916 	bl	800b300 <__retarget_lock_release_recursive>
 800e0d4:	e7db      	b.n	800e08e <_fflush_r+0xe>
	...

0800e0d8 <__swhatbuf_r>:
 800e0d8:	b570      	push	{r4, r5, r6, lr}
 800e0da:	000e      	movs	r6, r1
 800e0dc:	001d      	movs	r5, r3
 800e0de:	230e      	movs	r3, #14
 800e0e0:	5ec9      	ldrsh	r1, [r1, r3]
 800e0e2:	0014      	movs	r4, r2
 800e0e4:	b096      	sub	sp, #88	@ 0x58
 800e0e6:	2900      	cmp	r1, #0
 800e0e8:	da0c      	bge.n	800e104 <__swhatbuf_r+0x2c>
 800e0ea:	89b2      	ldrh	r2, [r6, #12]
 800e0ec:	2380      	movs	r3, #128	@ 0x80
 800e0ee:	0011      	movs	r1, r2
 800e0f0:	4019      	ands	r1, r3
 800e0f2:	421a      	tst	r2, r3
 800e0f4:	d114      	bne.n	800e120 <__swhatbuf_r+0x48>
 800e0f6:	2380      	movs	r3, #128	@ 0x80
 800e0f8:	00db      	lsls	r3, r3, #3
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	6029      	str	r1, [r5, #0]
 800e0fe:	6023      	str	r3, [r4, #0]
 800e100:	b016      	add	sp, #88	@ 0x58
 800e102:	bd70      	pop	{r4, r5, r6, pc}
 800e104:	466a      	mov	r2, sp
 800e106:	f000 f8dd 	bl	800e2c4 <_fstat_r>
 800e10a:	2800      	cmp	r0, #0
 800e10c:	dbed      	blt.n	800e0ea <__swhatbuf_r+0x12>
 800e10e:	23f0      	movs	r3, #240	@ 0xf0
 800e110:	9901      	ldr	r1, [sp, #4]
 800e112:	021b      	lsls	r3, r3, #8
 800e114:	4019      	ands	r1, r3
 800e116:	4b04      	ldr	r3, [pc, #16]	@ (800e128 <__swhatbuf_r+0x50>)
 800e118:	18c9      	adds	r1, r1, r3
 800e11a:	424b      	negs	r3, r1
 800e11c:	4159      	adcs	r1, r3
 800e11e:	e7ea      	b.n	800e0f6 <__swhatbuf_r+0x1e>
 800e120:	2100      	movs	r1, #0
 800e122:	2340      	movs	r3, #64	@ 0x40
 800e124:	e7e9      	b.n	800e0fa <__swhatbuf_r+0x22>
 800e126:	46c0      	nop			@ (mov r8, r8)
 800e128:	ffffe000 	.word	0xffffe000

0800e12c <__smakebuf_r>:
 800e12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e12e:	2602      	movs	r6, #2
 800e130:	898b      	ldrh	r3, [r1, #12]
 800e132:	0005      	movs	r5, r0
 800e134:	000c      	movs	r4, r1
 800e136:	b085      	sub	sp, #20
 800e138:	4233      	tst	r3, r6
 800e13a:	d007      	beq.n	800e14c <__smakebuf_r+0x20>
 800e13c:	0023      	movs	r3, r4
 800e13e:	3347      	adds	r3, #71	@ 0x47
 800e140:	6023      	str	r3, [r4, #0]
 800e142:	6123      	str	r3, [r4, #16]
 800e144:	2301      	movs	r3, #1
 800e146:	6163      	str	r3, [r4, #20]
 800e148:	b005      	add	sp, #20
 800e14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e14c:	ab03      	add	r3, sp, #12
 800e14e:	aa02      	add	r2, sp, #8
 800e150:	f7ff ffc2 	bl	800e0d8 <__swhatbuf_r>
 800e154:	9f02      	ldr	r7, [sp, #8]
 800e156:	9001      	str	r0, [sp, #4]
 800e158:	0039      	movs	r1, r7
 800e15a:	0028      	movs	r0, r5
 800e15c:	f7fe fb42 	bl	800c7e4 <_malloc_r>
 800e160:	2800      	cmp	r0, #0
 800e162:	d108      	bne.n	800e176 <__smakebuf_r+0x4a>
 800e164:	220c      	movs	r2, #12
 800e166:	5ea3      	ldrsh	r3, [r4, r2]
 800e168:	059a      	lsls	r2, r3, #22
 800e16a:	d4ed      	bmi.n	800e148 <__smakebuf_r+0x1c>
 800e16c:	2203      	movs	r2, #3
 800e16e:	4393      	bics	r3, r2
 800e170:	431e      	orrs	r6, r3
 800e172:	81a6      	strh	r6, [r4, #12]
 800e174:	e7e2      	b.n	800e13c <__smakebuf_r+0x10>
 800e176:	2380      	movs	r3, #128	@ 0x80
 800e178:	89a2      	ldrh	r2, [r4, #12]
 800e17a:	6020      	str	r0, [r4, #0]
 800e17c:	4313      	orrs	r3, r2
 800e17e:	81a3      	strh	r3, [r4, #12]
 800e180:	9b03      	ldr	r3, [sp, #12]
 800e182:	6120      	str	r0, [r4, #16]
 800e184:	6167      	str	r7, [r4, #20]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00c      	beq.n	800e1a4 <__smakebuf_r+0x78>
 800e18a:	0028      	movs	r0, r5
 800e18c:	230e      	movs	r3, #14
 800e18e:	5ee1      	ldrsh	r1, [r4, r3]
 800e190:	f000 f8aa 	bl	800e2e8 <_isatty_r>
 800e194:	2800      	cmp	r0, #0
 800e196:	d005      	beq.n	800e1a4 <__smakebuf_r+0x78>
 800e198:	2303      	movs	r3, #3
 800e19a:	89a2      	ldrh	r2, [r4, #12]
 800e19c:	439a      	bics	r2, r3
 800e19e:	3b02      	subs	r3, #2
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	81a3      	strh	r3, [r4, #12]
 800e1a4:	89a3      	ldrh	r3, [r4, #12]
 800e1a6:	9a01      	ldr	r2, [sp, #4]
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	81a3      	strh	r3, [r4, #12]
 800e1ac:	e7cc      	b.n	800e148 <__smakebuf_r+0x1c>

0800e1ae <__sccl>:
 800e1ae:	b570      	push	{r4, r5, r6, lr}
 800e1b0:	780b      	ldrb	r3, [r1, #0]
 800e1b2:	0004      	movs	r4, r0
 800e1b4:	2b5e      	cmp	r3, #94	@ 0x5e
 800e1b6:	d018      	beq.n	800e1ea <__sccl+0x3c>
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	1c4d      	adds	r5, r1, #1
 800e1bc:	0021      	movs	r1, r4
 800e1be:	1c60      	adds	r0, r4, #1
 800e1c0:	30ff      	adds	r0, #255	@ 0xff
 800e1c2:	700a      	strb	r2, [r1, #0]
 800e1c4:	3101      	adds	r1, #1
 800e1c6:	4281      	cmp	r1, r0
 800e1c8:	d1fb      	bne.n	800e1c2 <__sccl+0x14>
 800e1ca:	1e68      	subs	r0, r5, #1
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d00b      	beq.n	800e1e8 <__sccl+0x3a>
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	404a      	eors	r2, r1
 800e1d4:	0028      	movs	r0, r5
 800e1d6:	54e2      	strb	r2, [r4, r3]
 800e1d8:	7801      	ldrb	r1, [r0, #0]
 800e1da:	1c45      	adds	r5, r0, #1
 800e1dc:	292d      	cmp	r1, #45	@ 0x2d
 800e1de:	d00a      	beq.n	800e1f6 <__sccl+0x48>
 800e1e0:	295d      	cmp	r1, #93	@ 0x5d
 800e1e2:	d01b      	beq.n	800e21c <__sccl+0x6e>
 800e1e4:	2900      	cmp	r1, #0
 800e1e6:	d104      	bne.n	800e1f2 <__sccl+0x44>
 800e1e8:	bd70      	pop	{r4, r5, r6, pc}
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	784b      	ldrb	r3, [r1, #1]
 800e1ee:	1c8d      	adds	r5, r1, #2
 800e1f0:	e7e4      	b.n	800e1bc <__sccl+0xe>
 800e1f2:	000b      	movs	r3, r1
 800e1f4:	e7ee      	b.n	800e1d4 <__sccl+0x26>
 800e1f6:	7846      	ldrb	r6, [r0, #1]
 800e1f8:	2e5d      	cmp	r6, #93	@ 0x5d
 800e1fa:	d0fa      	beq.n	800e1f2 <__sccl+0x44>
 800e1fc:	42b3      	cmp	r3, r6
 800e1fe:	dcf8      	bgt.n	800e1f2 <__sccl+0x44>
 800e200:	0019      	movs	r1, r3
 800e202:	3002      	adds	r0, #2
 800e204:	3101      	adds	r1, #1
 800e206:	5462      	strb	r2, [r4, r1]
 800e208:	428e      	cmp	r6, r1
 800e20a:	dcfb      	bgt.n	800e204 <__sccl+0x56>
 800e20c:	2100      	movs	r1, #0
 800e20e:	1c5d      	adds	r5, r3, #1
 800e210:	42b3      	cmp	r3, r6
 800e212:	da01      	bge.n	800e218 <__sccl+0x6a>
 800e214:	1af1      	subs	r1, r6, r3
 800e216:	3901      	subs	r1, #1
 800e218:	186b      	adds	r3, r5, r1
 800e21a:	e7dd      	b.n	800e1d8 <__sccl+0x2a>
 800e21c:	0028      	movs	r0, r5
 800e21e:	e7e3      	b.n	800e1e8 <__sccl+0x3a>

0800e220 <__submore>:
 800e220:	000b      	movs	r3, r1
 800e222:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e224:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 800e226:	3344      	adds	r3, #68	@ 0x44
 800e228:	000c      	movs	r4, r1
 800e22a:	429d      	cmp	r5, r3
 800e22c:	d11c      	bne.n	800e268 <__submore+0x48>
 800e22e:	2680      	movs	r6, #128	@ 0x80
 800e230:	00f6      	lsls	r6, r6, #3
 800e232:	0031      	movs	r1, r6
 800e234:	f7fe fad6 	bl	800c7e4 <_malloc_r>
 800e238:	2800      	cmp	r0, #0
 800e23a:	d102      	bne.n	800e242 <__submore+0x22>
 800e23c:	2001      	movs	r0, #1
 800e23e:	4240      	negs	r0, r0
 800e240:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e242:	0023      	movs	r3, r4
 800e244:	6360      	str	r0, [r4, #52]	@ 0x34
 800e246:	63a6      	str	r6, [r4, #56]	@ 0x38
 800e248:	3346      	adds	r3, #70	@ 0x46
 800e24a:	781a      	ldrb	r2, [r3, #0]
 800e24c:	4b10      	ldr	r3, [pc, #64]	@ (800e290 <__submore+0x70>)
 800e24e:	54c2      	strb	r2, [r0, r3]
 800e250:	0023      	movs	r3, r4
 800e252:	3345      	adds	r3, #69	@ 0x45
 800e254:	781a      	ldrb	r2, [r3, #0]
 800e256:	4b0f      	ldr	r3, [pc, #60]	@ (800e294 <__submore+0x74>)
 800e258:	54c2      	strb	r2, [r0, r3]
 800e25a:	782a      	ldrb	r2, [r5, #0]
 800e25c:	4b0e      	ldr	r3, [pc, #56]	@ (800e298 <__submore+0x78>)
 800e25e:	54c2      	strb	r2, [r0, r3]
 800e260:	18c0      	adds	r0, r0, r3
 800e262:	6020      	str	r0, [r4, #0]
 800e264:	2000      	movs	r0, #0
 800e266:	e7eb      	b.n	800e240 <__submore+0x20>
 800e268:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 800e26a:	0029      	movs	r1, r5
 800e26c:	0073      	lsls	r3, r6, #1
 800e26e:	001a      	movs	r2, r3
 800e270:	9301      	str	r3, [sp, #4]
 800e272:	f000 f8a8 	bl	800e3c6 <_realloc_r>
 800e276:	1e05      	subs	r5, r0, #0
 800e278:	d0e0      	beq.n	800e23c <__submore+0x1c>
 800e27a:	1987      	adds	r7, r0, r6
 800e27c:	0001      	movs	r1, r0
 800e27e:	0032      	movs	r2, r6
 800e280:	0038      	movs	r0, r7
 800e282:	f7fd f849 	bl	800b318 <memcpy>
 800e286:	9b01      	ldr	r3, [sp, #4]
 800e288:	6027      	str	r7, [r4, #0]
 800e28a:	6365      	str	r5, [r4, #52]	@ 0x34
 800e28c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e28e:	e7e9      	b.n	800e264 <__submore+0x44>
 800e290:	000003ff 	.word	0x000003ff
 800e294:	000003fe 	.word	0x000003fe
 800e298:	000003fd 	.word	0x000003fd

0800e29c <memmove>:
 800e29c:	b510      	push	{r4, lr}
 800e29e:	4288      	cmp	r0, r1
 800e2a0:	d806      	bhi.n	800e2b0 <memmove+0x14>
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d008      	beq.n	800e2ba <memmove+0x1e>
 800e2a8:	5ccc      	ldrb	r4, [r1, r3]
 800e2aa:	54c4      	strb	r4, [r0, r3]
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	e7f9      	b.n	800e2a4 <memmove+0x8>
 800e2b0:	188b      	adds	r3, r1, r2
 800e2b2:	4298      	cmp	r0, r3
 800e2b4:	d2f5      	bcs.n	800e2a2 <memmove+0x6>
 800e2b6:	3a01      	subs	r2, #1
 800e2b8:	d200      	bcs.n	800e2bc <memmove+0x20>
 800e2ba:	bd10      	pop	{r4, pc}
 800e2bc:	5c8b      	ldrb	r3, [r1, r2]
 800e2be:	5483      	strb	r3, [r0, r2]
 800e2c0:	e7f9      	b.n	800e2b6 <memmove+0x1a>
	...

0800e2c4 <_fstat_r>:
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	b570      	push	{r4, r5, r6, lr}
 800e2c8:	4d06      	ldr	r5, [pc, #24]	@ (800e2e4 <_fstat_r+0x20>)
 800e2ca:	0004      	movs	r4, r0
 800e2cc:	0008      	movs	r0, r1
 800e2ce:	0011      	movs	r1, r2
 800e2d0:	602b      	str	r3, [r5, #0]
 800e2d2:	f7f5 fda7 	bl	8003e24 <_fstat>
 800e2d6:	1c43      	adds	r3, r0, #1
 800e2d8:	d103      	bne.n	800e2e2 <_fstat_r+0x1e>
 800e2da:	682b      	ldr	r3, [r5, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d000      	beq.n	800e2e2 <_fstat_r+0x1e>
 800e2e0:	6023      	str	r3, [r4, #0]
 800e2e2:	bd70      	pop	{r4, r5, r6, pc}
 800e2e4:	200008c8 	.word	0x200008c8

0800e2e8 <_isatty_r>:
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	b570      	push	{r4, r5, r6, lr}
 800e2ec:	4d06      	ldr	r5, [pc, #24]	@ (800e308 <_isatty_r+0x20>)
 800e2ee:	0004      	movs	r4, r0
 800e2f0:	0008      	movs	r0, r1
 800e2f2:	602b      	str	r3, [r5, #0]
 800e2f4:	f7f5 fda4 	bl	8003e40 <_isatty>
 800e2f8:	1c43      	adds	r3, r0, #1
 800e2fa:	d103      	bne.n	800e304 <_isatty_r+0x1c>
 800e2fc:	682b      	ldr	r3, [r5, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d000      	beq.n	800e304 <_isatty_r+0x1c>
 800e302:	6023      	str	r3, [r4, #0]
 800e304:	bd70      	pop	{r4, r5, r6, pc}
 800e306:	46c0      	nop			@ (mov r8, r8)
 800e308:	200008c8 	.word	0x200008c8

0800e30c <_sbrk_r>:
 800e30c:	2300      	movs	r3, #0
 800e30e:	b570      	push	{r4, r5, r6, lr}
 800e310:	4d06      	ldr	r5, [pc, #24]	@ (800e32c <_sbrk_r+0x20>)
 800e312:	0004      	movs	r4, r0
 800e314:	0008      	movs	r0, r1
 800e316:	602b      	str	r3, [r5, #0]
 800e318:	f7f5 fda6 	bl	8003e68 <_sbrk>
 800e31c:	1c43      	adds	r3, r0, #1
 800e31e:	d103      	bne.n	800e328 <_sbrk_r+0x1c>
 800e320:	682b      	ldr	r3, [r5, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d000      	beq.n	800e328 <_sbrk_r+0x1c>
 800e326:	6023      	str	r3, [r4, #0]
 800e328:	bd70      	pop	{r4, r5, r6, pc}
 800e32a:	46c0      	nop			@ (mov r8, r8)
 800e32c:	200008c8 	.word	0x200008c8

0800e330 <__assert_func>:
 800e330:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e332:	0014      	movs	r4, r2
 800e334:	001a      	movs	r2, r3
 800e336:	4b09      	ldr	r3, [pc, #36]	@ (800e35c <__assert_func+0x2c>)
 800e338:	0005      	movs	r5, r0
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	000e      	movs	r6, r1
 800e33e:	68d8      	ldr	r0, [r3, #12]
 800e340:	4b07      	ldr	r3, [pc, #28]	@ (800e360 <__assert_func+0x30>)
 800e342:	2c00      	cmp	r4, #0
 800e344:	d101      	bne.n	800e34a <__assert_func+0x1a>
 800e346:	4b07      	ldr	r3, [pc, #28]	@ (800e364 <__assert_func+0x34>)
 800e348:	001c      	movs	r4, r3
 800e34a:	4907      	ldr	r1, [pc, #28]	@ (800e368 <__assert_func+0x38>)
 800e34c:	9301      	str	r3, [sp, #4]
 800e34e:	9402      	str	r4, [sp, #8]
 800e350:	002b      	movs	r3, r5
 800e352:	9600      	str	r6, [sp, #0]
 800e354:	f000 f8ec 	bl	800e530 <fiprintf>
 800e358:	f000 f8fa 	bl	800e550 <abort>
 800e35c:	200001b0 	.word	0x200001b0
 800e360:	0800eb75 	.word	0x0800eb75
 800e364:	0800ebb0 	.word	0x0800ebb0
 800e368:	0800eb82 	.word	0x0800eb82

0800e36c <_calloc_r>:
 800e36c:	b570      	push	{r4, r5, r6, lr}
 800e36e:	0c0b      	lsrs	r3, r1, #16
 800e370:	0c15      	lsrs	r5, r2, #16
 800e372:	2b00      	cmp	r3, #0
 800e374:	d11e      	bne.n	800e3b4 <_calloc_r+0x48>
 800e376:	2d00      	cmp	r5, #0
 800e378:	d10c      	bne.n	800e394 <_calloc_r+0x28>
 800e37a:	b289      	uxth	r1, r1
 800e37c:	b294      	uxth	r4, r2
 800e37e:	434c      	muls	r4, r1
 800e380:	0021      	movs	r1, r4
 800e382:	f7fe fa2f 	bl	800c7e4 <_malloc_r>
 800e386:	1e05      	subs	r5, r0, #0
 800e388:	d01a      	beq.n	800e3c0 <_calloc_r+0x54>
 800e38a:	0022      	movs	r2, r4
 800e38c:	2100      	movs	r1, #0
 800e38e:	f7fc ff1f 	bl	800b1d0 <memset>
 800e392:	e016      	b.n	800e3c2 <_calloc_r+0x56>
 800e394:	1c2b      	adds	r3, r5, #0
 800e396:	1c0c      	adds	r4, r1, #0
 800e398:	b289      	uxth	r1, r1
 800e39a:	b292      	uxth	r2, r2
 800e39c:	434a      	muls	r2, r1
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	b2a1      	uxth	r1, r4
 800e3a2:	4359      	muls	r1, r3
 800e3a4:	0c14      	lsrs	r4, r2, #16
 800e3a6:	190c      	adds	r4, r1, r4
 800e3a8:	0c23      	lsrs	r3, r4, #16
 800e3aa:	d107      	bne.n	800e3bc <_calloc_r+0x50>
 800e3ac:	0424      	lsls	r4, r4, #16
 800e3ae:	b292      	uxth	r2, r2
 800e3b0:	4314      	orrs	r4, r2
 800e3b2:	e7e5      	b.n	800e380 <_calloc_r+0x14>
 800e3b4:	2d00      	cmp	r5, #0
 800e3b6:	d101      	bne.n	800e3bc <_calloc_r+0x50>
 800e3b8:	1c14      	adds	r4, r2, #0
 800e3ba:	e7ed      	b.n	800e398 <_calloc_r+0x2c>
 800e3bc:	230c      	movs	r3, #12
 800e3be:	6003      	str	r3, [r0, #0]
 800e3c0:	2500      	movs	r5, #0
 800e3c2:	0028      	movs	r0, r5
 800e3c4:	bd70      	pop	{r4, r5, r6, pc}

0800e3c6 <_realloc_r>:
 800e3c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3c8:	0006      	movs	r6, r0
 800e3ca:	000c      	movs	r4, r1
 800e3cc:	0015      	movs	r5, r2
 800e3ce:	2900      	cmp	r1, #0
 800e3d0:	d105      	bne.n	800e3de <_realloc_r+0x18>
 800e3d2:	0011      	movs	r1, r2
 800e3d4:	f7fe fa06 	bl	800c7e4 <_malloc_r>
 800e3d8:	0004      	movs	r4, r0
 800e3da:	0020      	movs	r0, r4
 800e3dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e3de:	2a00      	cmp	r2, #0
 800e3e0:	d103      	bne.n	800e3ea <_realloc_r+0x24>
 800e3e2:	f7fd fe2f 	bl	800c044 <_free_r>
 800e3e6:	2400      	movs	r4, #0
 800e3e8:	e7f7      	b.n	800e3da <_realloc_r+0x14>
 800e3ea:	f000 f8b8 	bl	800e55e <_malloc_usable_size_r>
 800e3ee:	0007      	movs	r7, r0
 800e3f0:	4285      	cmp	r5, r0
 800e3f2:	d802      	bhi.n	800e3fa <_realloc_r+0x34>
 800e3f4:	0843      	lsrs	r3, r0, #1
 800e3f6:	42ab      	cmp	r3, r5
 800e3f8:	d3ef      	bcc.n	800e3da <_realloc_r+0x14>
 800e3fa:	0029      	movs	r1, r5
 800e3fc:	0030      	movs	r0, r6
 800e3fe:	f7fe f9f1 	bl	800c7e4 <_malloc_r>
 800e402:	9001      	str	r0, [sp, #4]
 800e404:	2800      	cmp	r0, #0
 800e406:	d0ee      	beq.n	800e3e6 <_realloc_r+0x20>
 800e408:	002a      	movs	r2, r5
 800e40a:	42bd      	cmp	r5, r7
 800e40c:	d900      	bls.n	800e410 <_realloc_r+0x4a>
 800e40e:	003a      	movs	r2, r7
 800e410:	0021      	movs	r1, r4
 800e412:	9801      	ldr	r0, [sp, #4]
 800e414:	f7fc ff80 	bl	800b318 <memcpy>
 800e418:	0021      	movs	r1, r4
 800e41a:	0030      	movs	r0, r6
 800e41c:	f7fd fe12 	bl	800c044 <_free_r>
 800e420:	9c01      	ldr	r4, [sp, #4]
 800e422:	e7da      	b.n	800e3da <_realloc_r+0x14>

0800e424 <_strtoul_l.constprop.0>:
 800e424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e426:	001e      	movs	r6, r3
 800e428:	4b3e      	ldr	r3, [pc, #248]	@ (800e524 <_strtoul_l.constprop.0+0x100>)
 800e42a:	0017      	movs	r7, r2
 800e42c:	000c      	movs	r4, r1
 800e42e:	469c      	mov	ip, r3
 800e430:	2208      	movs	r2, #8
 800e432:	b085      	sub	sp, #20
 800e434:	9003      	str	r0, [sp, #12]
 800e436:	9100      	str	r1, [sp, #0]
 800e438:	0023      	movs	r3, r4
 800e43a:	4661      	mov	r1, ip
 800e43c:	781d      	ldrb	r5, [r3, #0]
 800e43e:	3401      	adds	r4, #1
 800e440:	5d48      	ldrb	r0, [r1, r5]
 800e442:	0001      	movs	r1, r0
 800e444:	4011      	ands	r1, r2
 800e446:	4210      	tst	r0, r2
 800e448:	d1f6      	bne.n	800e438 <_strtoul_l.constprop.0+0x14>
 800e44a:	2d2d      	cmp	r5, #45	@ 0x2d
 800e44c:	d137      	bne.n	800e4be <_strtoul_l.constprop.0+0x9a>
 800e44e:	7825      	ldrb	r5, [r4, #0]
 800e450:	1c9c      	adds	r4, r3, #2
 800e452:	2301      	movs	r3, #1
 800e454:	9302      	str	r3, [sp, #8]
 800e456:	2210      	movs	r2, #16
 800e458:	0033      	movs	r3, r6
 800e45a:	4393      	bics	r3, r2
 800e45c:	d109      	bne.n	800e472 <_strtoul_l.constprop.0+0x4e>
 800e45e:	2d30      	cmp	r5, #48	@ 0x30
 800e460:	d133      	bne.n	800e4ca <_strtoul_l.constprop.0+0xa6>
 800e462:	2120      	movs	r1, #32
 800e464:	7823      	ldrb	r3, [r4, #0]
 800e466:	438b      	bics	r3, r1
 800e468:	2b58      	cmp	r3, #88	@ 0x58
 800e46a:	d12e      	bne.n	800e4ca <_strtoul_l.constprop.0+0xa6>
 800e46c:	0016      	movs	r6, r2
 800e46e:	7865      	ldrb	r5, [r4, #1]
 800e470:	3402      	adds	r4, #2
 800e472:	2001      	movs	r0, #1
 800e474:	0031      	movs	r1, r6
 800e476:	4240      	negs	r0, r0
 800e478:	f7f1 fe6c 	bl	8000154 <__udivsi3>
 800e47c:	9001      	str	r0, [sp, #4]
 800e47e:	2001      	movs	r0, #1
 800e480:	0031      	movs	r1, r6
 800e482:	4240      	negs	r0, r0
 800e484:	f7f1 feec 	bl	8000260 <__aeabi_uidivmod>
 800e488:	2300      	movs	r3, #0
 800e48a:	2201      	movs	r2, #1
 800e48c:	0018      	movs	r0, r3
 800e48e:	4694      	mov	ip, r2
 800e490:	002a      	movs	r2, r5
 800e492:	3a30      	subs	r2, #48	@ 0x30
 800e494:	2a09      	cmp	r2, #9
 800e496:	d81f      	bhi.n	800e4d8 <_strtoul_l.constprop.0+0xb4>
 800e498:	0015      	movs	r5, r2
 800e49a:	42ae      	cmp	r6, r5
 800e49c:	dd2b      	ble.n	800e4f6 <_strtoul_l.constprop.0+0xd2>
 800e49e:	1c5a      	adds	r2, r3, #1
 800e4a0:	d00a      	beq.n	800e4b8 <_strtoul_l.constprop.0+0x94>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	9a01      	ldr	r2, [sp, #4]
 800e4a6:	425b      	negs	r3, r3
 800e4a8:	4282      	cmp	r2, r0
 800e4aa:	d305      	bcc.n	800e4b8 <_strtoul_l.constprop.0+0x94>
 800e4ac:	d101      	bne.n	800e4b2 <_strtoul_l.constprop.0+0x8e>
 800e4ae:	42a9      	cmp	r1, r5
 800e4b0:	db1e      	blt.n	800e4f0 <_strtoul_l.constprop.0+0xcc>
 800e4b2:	4663      	mov	r3, ip
 800e4b4:	4370      	muls	r0, r6
 800e4b6:	1828      	adds	r0, r5, r0
 800e4b8:	7825      	ldrb	r5, [r4, #0]
 800e4ba:	3401      	adds	r4, #1
 800e4bc:	e7e8      	b.n	800e490 <_strtoul_l.constprop.0+0x6c>
 800e4be:	9102      	str	r1, [sp, #8]
 800e4c0:	2d2b      	cmp	r5, #43	@ 0x2b
 800e4c2:	d1c8      	bne.n	800e456 <_strtoul_l.constprop.0+0x32>
 800e4c4:	7825      	ldrb	r5, [r4, #0]
 800e4c6:	1c9c      	adds	r4, r3, #2
 800e4c8:	e7c5      	b.n	800e456 <_strtoul_l.constprop.0+0x32>
 800e4ca:	2e00      	cmp	r6, #0
 800e4cc:	d1d1      	bne.n	800e472 <_strtoul_l.constprop.0+0x4e>
 800e4ce:	3608      	adds	r6, #8
 800e4d0:	2d30      	cmp	r5, #48	@ 0x30
 800e4d2:	d0ce      	beq.n	800e472 <_strtoul_l.constprop.0+0x4e>
 800e4d4:	3602      	adds	r6, #2
 800e4d6:	e7cc      	b.n	800e472 <_strtoul_l.constprop.0+0x4e>
 800e4d8:	002a      	movs	r2, r5
 800e4da:	3a41      	subs	r2, #65	@ 0x41
 800e4dc:	2a19      	cmp	r2, #25
 800e4de:	d801      	bhi.n	800e4e4 <_strtoul_l.constprop.0+0xc0>
 800e4e0:	3d37      	subs	r5, #55	@ 0x37
 800e4e2:	e7da      	b.n	800e49a <_strtoul_l.constprop.0+0x76>
 800e4e4:	002a      	movs	r2, r5
 800e4e6:	3a61      	subs	r2, #97	@ 0x61
 800e4e8:	2a19      	cmp	r2, #25
 800e4ea:	d804      	bhi.n	800e4f6 <_strtoul_l.constprop.0+0xd2>
 800e4ec:	3d57      	subs	r5, #87	@ 0x57
 800e4ee:	e7d4      	b.n	800e49a <_strtoul_l.constprop.0+0x76>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	425b      	negs	r3, r3
 800e4f4:	e7e0      	b.n	800e4b8 <_strtoul_l.constprop.0+0x94>
 800e4f6:	1c5a      	adds	r2, r3, #1
 800e4f8:	d107      	bne.n	800e50a <_strtoul_l.constprop.0+0xe6>
 800e4fa:	2222      	movs	r2, #34	@ 0x22
 800e4fc:	9903      	ldr	r1, [sp, #12]
 800e4fe:	0018      	movs	r0, r3
 800e500:	600a      	str	r2, [r1, #0]
 800e502:	2f00      	cmp	r7, #0
 800e504:	d109      	bne.n	800e51a <_strtoul_l.constprop.0+0xf6>
 800e506:	b005      	add	sp, #20
 800e508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e50a:	9a02      	ldr	r2, [sp, #8]
 800e50c:	2a00      	cmp	r2, #0
 800e50e:	d000      	beq.n	800e512 <_strtoul_l.constprop.0+0xee>
 800e510:	4240      	negs	r0, r0
 800e512:	2f00      	cmp	r7, #0
 800e514:	d0f7      	beq.n	800e506 <_strtoul_l.constprop.0+0xe2>
 800e516:	2b00      	cmp	r3, #0
 800e518:	d001      	beq.n	800e51e <_strtoul_l.constprop.0+0xfa>
 800e51a:	1e63      	subs	r3, r4, #1
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	9b00      	ldr	r3, [sp, #0]
 800e520:	603b      	str	r3, [r7, #0]
 800e522:	e7f0      	b.n	800e506 <_strtoul_l.constprop.0+0xe2>
 800e524:	0800ea49 	.word	0x0800ea49

0800e528 <_strtoul_r>:
 800e528:	b510      	push	{r4, lr}
 800e52a:	f7ff ff7b 	bl	800e424 <_strtoul_l.constprop.0>
 800e52e:	bd10      	pop	{r4, pc}

0800e530 <fiprintf>:
 800e530:	b40e      	push	{r1, r2, r3}
 800e532:	b517      	push	{r0, r1, r2, r4, lr}
 800e534:	4c05      	ldr	r4, [pc, #20]	@ (800e54c <fiprintf+0x1c>)
 800e536:	ab05      	add	r3, sp, #20
 800e538:	cb04      	ldmia	r3!, {r2}
 800e53a:	0001      	movs	r1, r0
 800e53c:	6820      	ldr	r0, [r4, #0]
 800e53e:	9301      	str	r3, [sp, #4]
 800e540:	f7ff fa9c 	bl	800da7c <_vfiprintf_r>
 800e544:	bc1e      	pop	{r1, r2, r3, r4}
 800e546:	bc08      	pop	{r3}
 800e548:	b003      	add	sp, #12
 800e54a:	4718      	bx	r3
 800e54c:	200001b0 	.word	0x200001b0

0800e550 <abort>:
 800e550:	2006      	movs	r0, #6
 800e552:	b510      	push	{r4, lr}
 800e554:	f000 f834 	bl	800e5c0 <raise>
 800e558:	2001      	movs	r0, #1
 800e55a:	f7f5 fc13 	bl	8003d84 <_exit>

0800e55e <_malloc_usable_size_r>:
 800e55e:	1f0b      	subs	r3, r1, #4
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	1f18      	subs	r0, r3, #4
 800e564:	2b00      	cmp	r3, #0
 800e566:	da01      	bge.n	800e56c <_malloc_usable_size_r+0xe>
 800e568:	580b      	ldr	r3, [r1, r0]
 800e56a:	18c0      	adds	r0, r0, r3
 800e56c:	4770      	bx	lr

0800e56e <_raise_r>:
 800e56e:	b570      	push	{r4, r5, r6, lr}
 800e570:	0004      	movs	r4, r0
 800e572:	000d      	movs	r5, r1
 800e574:	291f      	cmp	r1, #31
 800e576:	d904      	bls.n	800e582 <_raise_r+0x14>
 800e578:	2316      	movs	r3, #22
 800e57a:	6003      	str	r3, [r0, #0]
 800e57c:	2001      	movs	r0, #1
 800e57e:	4240      	negs	r0, r0
 800e580:	bd70      	pop	{r4, r5, r6, pc}
 800e582:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800e584:	2b00      	cmp	r3, #0
 800e586:	d004      	beq.n	800e592 <_raise_r+0x24>
 800e588:	008a      	lsls	r2, r1, #2
 800e58a:	189b      	adds	r3, r3, r2
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	2a00      	cmp	r2, #0
 800e590:	d108      	bne.n	800e5a4 <_raise_r+0x36>
 800e592:	0020      	movs	r0, r4
 800e594:	f000 f830 	bl	800e5f8 <_getpid_r>
 800e598:	002a      	movs	r2, r5
 800e59a:	0001      	movs	r1, r0
 800e59c:	0020      	movs	r0, r4
 800e59e:	f000 f819 	bl	800e5d4 <_kill_r>
 800e5a2:	e7ed      	b.n	800e580 <_raise_r+0x12>
 800e5a4:	2a01      	cmp	r2, #1
 800e5a6:	d009      	beq.n	800e5bc <_raise_r+0x4e>
 800e5a8:	1c51      	adds	r1, r2, #1
 800e5aa:	d103      	bne.n	800e5b4 <_raise_r+0x46>
 800e5ac:	2316      	movs	r3, #22
 800e5ae:	6003      	str	r3, [r0, #0]
 800e5b0:	2001      	movs	r0, #1
 800e5b2:	e7e5      	b.n	800e580 <_raise_r+0x12>
 800e5b4:	2100      	movs	r1, #0
 800e5b6:	0028      	movs	r0, r5
 800e5b8:	6019      	str	r1, [r3, #0]
 800e5ba:	4790      	blx	r2
 800e5bc:	2000      	movs	r0, #0
 800e5be:	e7df      	b.n	800e580 <_raise_r+0x12>

0800e5c0 <raise>:
 800e5c0:	b510      	push	{r4, lr}
 800e5c2:	4b03      	ldr	r3, [pc, #12]	@ (800e5d0 <raise+0x10>)
 800e5c4:	0001      	movs	r1, r0
 800e5c6:	6818      	ldr	r0, [r3, #0]
 800e5c8:	f7ff ffd1 	bl	800e56e <_raise_r>
 800e5cc:	bd10      	pop	{r4, pc}
 800e5ce:	46c0      	nop			@ (mov r8, r8)
 800e5d0:	200001b0 	.word	0x200001b0

0800e5d4 <_kill_r>:
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	b570      	push	{r4, r5, r6, lr}
 800e5d8:	4d06      	ldr	r5, [pc, #24]	@ (800e5f4 <_kill_r+0x20>)
 800e5da:	0004      	movs	r4, r0
 800e5dc:	0008      	movs	r0, r1
 800e5de:	0011      	movs	r1, r2
 800e5e0:	602b      	str	r3, [r5, #0]
 800e5e2:	f7f5 fbbf 	bl	8003d64 <_kill>
 800e5e6:	1c43      	adds	r3, r0, #1
 800e5e8:	d103      	bne.n	800e5f2 <_kill_r+0x1e>
 800e5ea:	682b      	ldr	r3, [r5, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d000      	beq.n	800e5f2 <_kill_r+0x1e>
 800e5f0:	6023      	str	r3, [r4, #0]
 800e5f2:	bd70      	pop	{r4, r5, r6, pc}
 800e5f4:	200008c8 	.word	0x200008c8

0800e5f8 <_getpid_r>:
 800e5f8:	b510      	push	{r4, lr}
 800e5fa:	f7f5 fbad 	bl	8003d58 <_getpid>
 800e5fe:	bd10      	pop	{r4, pc}

0800e600 <_init>:
 800e600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e602:	46c0      	nop			@ (mov r8, r8)
 800e604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e606:	bc08      	pop	{r3}
 800e608:	469e      	mov	lr, r3
 800e60a:	4770      	bx	lr

0800e60c <_fini>:
 800e60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60e:	46c0      	nop			@ (mov r8, r8)
 800e610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e612:	bc08      	pop	{r3}
 800e614:	469e      	mov	lr, r3
 800e616:	4770      	bx	lr
