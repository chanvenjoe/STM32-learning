
STM32F446RET6_4AxileDrone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006748  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800698c  0800698c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800698c  0800698c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006994  08006994  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006994  08006994  00016994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006998  08006998  00016998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800699c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005328  20000014  080069b0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000533c  080069b0  0002533c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bafd  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e95  00000000  00000000  0003bb41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003f9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  00041128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024845  00000000  00000000  000426e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b913  00000000  00000000  00066f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc722  00000000  00000000  00082838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ef5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060e0  00000000  00000000  0015efac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006900 	.word	0x08006900

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08006900 	.word	0x08006900

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <WS2812_LEDStateUpdate>:
//		vTaskResume(); Recover to the state before suspend
	}
}

void WS2812_LEDStateUpdate(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	char led_sta = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
	for(;;)
	{
		led_sta = WS_LED_State_Get();
 800051e:	f000 f97f 	bl	8000820 <WS_LED_State_Get>
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
		switch(led_sta)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b07      	cmp	r3, #7
 800052a:	d015      	beq.n	8000558 <WS2812_LEDStateUpdate+0x44>
 800052c:	2b07      	cmp	r3, #7
 800052e:	dc16      	bgt.n	800055e <WS2812_LEDStateUpdate+0x4a>
 8000530:	2b01      	cmp	r3, #1
 8000532:	d005      	beq.n	8000540 <WS2812_LEDStateUpdate+0x2c>
 8000534:	2b00      	cmp	r3, #0
 8000536:	dd12      	ble.n	800055e <WS2812_LEDStateUpdate+0x4a>
 8000538:	3b02      	subs	r3, #2
 800053a:	2b01      	cmp	r3, #1
 800053c:	d80f      	bhi.n	800055e <WS2812_LEDStateUpdate+0x4a>
 800053e:	e002      	b.n	8000546 <WS2812_LEDStateUpdate+0x32>
		{
			case 1:////Bat on 0001 0011
			{
				WS_Hue_change();
 8000540:	f000 f92e 	bl	80007a0 <WS_Hue_change>
				break;
 8000544:	e013      	b.n	800056e <WS2812_LEDStateUpdate+0x5a>
			}
			case 2: //USB DETECTED 0010
			case 3:
			{
				WS_ColorSet_LED(0, LEDNUM, 0xff0000);//Solid Green  When USB plug in, the bat will be high
 8000546:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800054a:	2103      	movs	r1, #3
 800054c:	2000      	movs	r0, #0
 800054e:	f000 f887 	bl	8000660 <WS_ColorSet_LED>
				WS_Refresh();
 8000552:	f000 f8b5 	bl	80006c0 <WS_Refresh>
				break;
 8000556:	e00a      	b.n	800056e <WS2812_LEDStateUpdate+0x5a>
			}
			case 7: //CHARGING 0111
			{
				WS_Charging_LED();
 8000558:	f000 f8e8 	bl	800072c <WS_Charging_LED>
				break;
 800055c:	e007      	b.n	800056e <WS2812_LEDStateUpdate+0x5a>
			}
			default://Outside power
			{
				WS_ColorSet_LED(0, LEDNUM, Blue);//Breathing RGB
 800055e:	22ff      	movs	r2, #255	; 0xff
 8000560:	2103      	movs	r1, #3
 8000562:	2000      	movs	r0, #0
 8000564:	f000 f87c 	bl	8000660 <WS_ColorSet_LED>
				WS_Refresh();
 8000568:	f000 f8aa 	bl	80006c0 <WS_Refresh>
				break;
 800056c:	bf00      	nop
			}
		}
		vTaskDelay(1);
 800056e:	2001      	movs	r0, #1
 8000570:	f004 fca6 	bl	8004ec0 <vTaskDelay>
		led_sta = WS_LED_State_Get();
 8000574:	e7d3      	b.n	800051e <WS2812_LEDStateUpdate+0xa>
	...

08000578 <WS_Send24bits>:

Color_Typedef LED_Buf[LEDNUM+1];
u32 Color_circle[] = {White, Black, Green, Red, Blue};

void WS_Send24bits(u32 color)//Be Careful about the direction of rope: Din->Dout
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	u8 i;
//	u32 sftcolor = color;
//	sftcolor<<8;
	for(i=0;i<24;i++)
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	e04b      	b.n	800061e <WS_Send24bits+0xa6>
	{
		if(color & 0x00800000)// 0000 0000 1000 0000... the highest bit & color, then the MCU can send 24bits data to WS2812
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800058c:	2b00      	cmp	r3, #0
 800058e:	d020      	beq.n	80005d2 <WS_Send24bits+0x5a>
		{
			CODE_1
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000596:	4826      	ldr	r0, [pc, #152]	; (8000630 <WS_Send24bits+0xb8>)
 8000598:	f001 fa64 	bl	8001a64 <HAL_GPIO_WritePin>
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <WS_Send24bits+0xbc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2200      	movs	r2, #0
 80005a2:	625a      	str	r2, [r3, #36]	; 0x24
 80005a4:	bf00      	nop
 80005a6:	4b23      	ldr	r3, [pc, #140]	; (8000634 <WS_Send24bits+0xbc>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ac:	2b27      	cmp	r3, #39	; 0x27
 80005ae:	d9fa      	bls.n	80005a6 <WS_Send24bits+0x2e>
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b6:	481e      	ldr	r0, [pc, #120]	; (8000630 <WS_Send24bits+0xb8>)
 80005b8:	f001 fa54 	bl	8001a64 <HAL_GPIO_WritePin>
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <WS_Send24bits+0xbc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	; 0x24
 80005c4:	bf00      	nop
 80005c6:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <WS_Send24bits+0xbc>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d9fa      	bls.n	80005c6 <WS_Send24bits+0x4e>
 80005d0:	e005      	b.n	80005de <WS_Send24bits+0x66>
		}
		else CODE_0
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d8:	4815      	ldr	r0, [pc, #84]	; (8000630 <WS_Send24bits+0xb8>)
 80005da:	f001 fa43 	bl	8001a64 <HAL_GPIO_WritePin>
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <WS_Send24bits+0xbc>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2200      	movs	r2, #0
 80005e4:	625a      	str	r2, [r3, #36]	; 0x24
 80005e6:	bf00      	nop
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <WS_Send24bits+0xbc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d9fa      	bls.n	80005e8 <WS_Send24bits+0x70>
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <WS_Send24bits+0xb8>)
 80005fa:	f001 fa33 	bl	8001a64 <HAL_GPIO_WritePin>
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <WS_Send24bits+0xbc>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
 8000606:	bf00      	nop
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <WS_Send24bits+0xbc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060e:	2b27      	cmp	r3, #39	; 0x27
 8000610:	d9fa      	bls.n	8000608 <WS_Send24bits+0x90>
		color<<=1;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
	for(i=0;i<24;i++)
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	3301      	adds	r3, #1
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	2b17      	cmp	r3, #23
 8000622:	d9b0      	bls.n	8000586 <WS_Send24bits+0xe>
	}
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020000 	.word	0x40020000
 8000634:	2000035c 	.word	0x2000035c

08000638 <WS_Color_copy>:

void WS_Color_copy(u8 No, u32 color)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	71fb      	strb	r3, [r7, #7]
	LED_Buf[No].RGB = color;
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4905      	ldr	r1, [pc, #20]	; (800065c <WS_Color_copy+0x24>)
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000030 	.word	0x20000030

08000660 <WS_ColorSet_LED>:

void WS_ColorSet_LED(u8 from, u8 to, u32 color)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	603a      	str	r2, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	460b      	mov	r3, r1
 800066e:	71bb      	strb	r3, [r7, #6]
	static int temp;
	if(from>to)
 8000670:	79fa      	ldrb	r2, [r7, #7]
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	429a      	cmp	r2, r3
 8000676:	d907      	bls.n	8000688 <WS_ColorSet_LED+0x28>
	{
		temp=from; from=to; to=temp;
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4a10      	ldr	r2, [pc, #64]	; (80006bc <WS_ColorSet_LED+0x5c>)
 800067c:	6013      	str	r3, [r2, #0]
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <WS_ColorSet_LED+0x5c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	71bb      	strb	r3, [r7, #6]
	}
	for(temp = from;temp<=to; temp++)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <WS_ColorSet_LED+0x5c>)
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	e00b      	b.n	80006a8 <WS_ColorSet_LED+0x48>
	{
		WS_Color_copy(temp, color);
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <WS_ColorSet_LED+0x5c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	6839      	ldr	r1, [r7, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ffcd 	bl	8000638 <WS_Color_copy>
	for(temp = from;temp<=to; temp++)
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <WS_ColorSet_LED+0x5c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	4a05      	ldr	r2, [pc, #20]	; (80006bc <WS_ColorSet_LED+0x5c>)
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	79ba      	ldrb	r2, [r7, #6]
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <WS_ColorSet_LED+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	daee      	bge.n	8000690 <WS_ColorSet_LED+0x30>
	}
}
 80006b2:	bf00      	nop
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000050 	.word	0x20000050

080006c0 <WS_Refresh>:

void WS_Refresh()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
	u8 i;
//	WS_Send24bits(dummy);
	for( i=0;i<=LEDNUM+1;i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]
 80006ca:	e009      	b.n	80006e0 <WS_Refresh+0x20>
	{
		WS_Send24bits(LED_Buf[i].RGB);
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <WS_Refresh+0x60>)
 80006d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff4f 	bl	8000578 <WS_Send24bits>
	for( i=0;i<=LEDNUM+1;i++)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	3301      	adds	r3, #1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d9f2      	bls.n	80006cc <WS_Refresh+0xc>
	}
	RES
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <WS_Refresh+0x64>)
 80006ee:	f001 f9b9 	bl	8001a64 <HAL_GPIO_WritePin>
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <WS_Refresh+0x68>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
 80006fa:	bf00      	nop
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <WS_Refresh+0x68>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000702:	f241 3287 	movw	r2, #4999	; 0x1387
 8000706:	4293      	cmp	r3, r2
 8000708:	d9f8      	bls.n	80006fc <WS_Refresh+0x3c>
 800070a:	2201      	movs	r2, #1
 800070c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <WS_Refresh+0x64>)
 8000712:	f001 f9a7 	bl	8001a64 <HAL_GPIO_WritePin>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000030 	.word	0x20000030
 8000724:	40020000 	.word	0x40020000
 8000728:	2000035c 	.word	0x2000035c

0800072c <WS_Charging_LED>:

void WS_Charging_LED()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	static char cycle = 0;
	WS_ColorSet_LED(cycle = cycle>0?(cycle-1):0, cycle, 0x00ff00);
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <WS_Charging_LED+0x70>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d004      	beq.n	8000742 <WS_Charging_LED+0x16>
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <WS_Charging_LED+0x70>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	3b01      	subs	r3, #1
 800073e:	b2db      	uxtb	r3, r3
 8000740:	e000      	b.n	8000744 <WS_Charging_LED+0x18>
 8000742:	2300      	movs	r3, #0
 8000744:	4a15      	ldr	r2, [pc, #84]	; (800079c <WS_Charging_LED+0x70>)
 8000746:	7013      	strb	r3, [r2, #0]
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <WS_Charging_LED+0x70>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <WS_Charging_LED+0x70>)
 800074e:	7811      	ldrb	r1, [r2, #0]
 8000750:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff83 	bl	8000660 <WS_ColorSet_LED>
	WS_Refresh();
 800075a:	f7ff ffb1 	bl	80006c0 <WS_Refresh>
	osDelay(CHARGING_CYCLE_TIME);
 800075e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000762:	f003 fc1c 	bl	8003f9e <osDelay>
	if(cycle==LEDNUM)
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <WS_Charging_LED+0x70>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d10e      	bne.n	800078c <WS_Charging_LED+0x60>
	{
		cycle = 0;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <WS_Charging_LED+0x70>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
		WS_ColorSet_LED(0, LEDNUM, Black);
 8000774:	2200      	movs	r2, #0
 8000776:	2103      	movs	r1, #3
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ff71 	bl	8000660 <WS_ColorSet_LED>
		WS_Refresh();
 800077e:	f7ff ff9f 	bl	80006c0 <WS_Refresh>
		osDelay(CHARGING_CYCLE_TIME);
 8000782:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000786:	f003 fc0a 	bl	8003f9e <osDelay>
	}
	else{
		cycle+=1;}
}
 800078a:	e005      	b.n	8000798 <WS_Charging_LED+0x6c>
		cycle+=1;}
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <WS_Charging_LED+0x70>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b01      	ldr	r3, [pc, #4]	; (800079c <WS_Charging_LED+0x70>)
 8000796:	701a      	strb	r2, [r3, #0]
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000054 	.word	0x20000054

080007a0 <WS_Hue_change>:



void WS_Hue_change()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
//	u8 cylon=160;
	u8 cycle;
//	u32 temp;
	static int h=160;
	if(h>=0&&h<360)
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <WS_Hue_change+0x78>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db2b      	blt.n	8000806 <WS_Hue_change+0x66>
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <WS_Hue_change+0x78>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80007b6:	da26      	bge.n	8000806 <WS_Hue_change+0x66>
	{
		for(cycle=0;cycle<=LEDNUM;cycle++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	71fb      	strb	r3, [r7, #7]
 80007bc:	e015      	b.n	80007ea <WS_Hue_change+0x4a>
		{
			WS_ColorSet_LED(0, cycle, HSV_RGB(h, 1,1,0,0,0));
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <WS_Hue_change+0x78>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	ed9f 1a16 	vldr	s2, [pc, #88]	; 800081c <WS_Hue_change+0x7c>
 80007c6:	eddf 0a15 	vldr	s1, [pc, #84]	; 800081c <WS_Hue_change+0x7c>
 80007ca:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800081c <WS_Hue_change+0x7c>
 80007ce:	2201      	movs	r2, #1
 80007d0:	2101      	movs	r1, #1
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f856 	bl	8000884 <HSV_RGB>
 80007d8:	4602      	mov	r2, r0
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4619      	mov	r1, r3
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff ff3e 	bl	8000660 <WS_ColorSet_LED>
		for(cycle=0;cycle<=LEDNUM;cycle++)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	3301      	adds	r3, #1
 80007e8:	71fb      	strb	r3, [r7, #7]
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	d9e6      	bls.n	80007be <WS_Hue_change+0x1e>
			/*WS_Refresh();
			vTaskDelay(200);*/
		}
		h+=1;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <WS_Hue_change+0x78>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <WS_Hue_change+0x78>)
 80007f8:	6013      	str	r3, [r2, #0]
		WS_Refresh();
 80007fa:	f7ff ff61 	bl	80006c0 <WS_Refresh>
		vTaskDelay(200);
 80007fe:	20c8      	movs	r0, #200	; 0xc8
 8000800:	f004 fb5e 	bl	8004ec0 <vTaskDelay>
 8000804:	e003      	b.n	800080e <WS_Hue_change+0x6e>
	}
	else
		h=0;
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <WS_Hue_change+0x78>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	00000000 	.word	0x00000000

08000820 <WS_LED_State_Get>:



char WS_LED_State_Get()
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	char ret = 0x00;//using 8bits to store all status  1.Charge:RED blink 2.UVP:Solid RED 3.Motor running: HUE change 4. Static:ALL BLUE
 8000826:	2300      	movs	r3, #0
 8000828:	71fb      	strb	r3, [r7, #7]
	if(1 == HAL_GPIO_ReadPin(AD_BAT_GPIO_Port, AD_BAT_Pin))
 800082a:	2108      	movs	r1, #8
 800082c:	4813      	ldr	r0, [pc, #76]	; (800087c <WS_LED_State_Get+0x5c>)
 800082e:	f001 f901 	bl	8001a34 <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	2b01      	cmp	r3, #1
 8000836:	d103      	bne.n	8000840 <WS_LED_State_Get+0x20>
	{
		ret |= AD_BAT_DET;
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	71fb      	strb	r3, [r7, #7]
	}
	if(1 == HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin))
 8000840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000844:	480e      	ldr	r0, [pc, #56]	; (8000880 <WS_LED_State_Get+0x60>)
 8000846:	f001 f8f5 	bl	8001a34 <HAL_GPIO_ReadPin>
 800084a:	4603      	mov	r3, r0
 800084c:	2b01      	cmp	r3, #1
 800084e:	d103      	bne.n	8000858 <WS_LED_State_Get+0x38>
	{
		ret |= USB_DETECTED;
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	f043 0302 	orr.w	r3, r3, #2
 8000856:	71fb      	strb	r3, [r7, #7]
	}
	if(CHARGING == HAL_GPIO_ReadPin(CHG_STA_GPIO_Port, CHG_STA_Pin))
 8000858:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <WS_LED_State_Get+0x60>)
 800085e:	f001 f8e9 	bl	8001a34 <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d103      	bne.n	8000870 <WS_LED_State_Get+0x50>
	{
		ret |= CHG_DETECTED;
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	71fb      	strb	r3, [r7, #7]
	}

	return ret;
 8000870:	79fb      	ldrb	r3, [r7, #7]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40020000 	.word	0x40020000
 8000880:	40020800 	.word	0x40020800

08000884 <HSV_RGB>:
	}
	return Hue;
}
#else
u32 HSV_RGB(int h, char s, char v, float R, float G, float B)
{
 8000884:	b480      	push	{r7}
 8000886:	b08f      	sub	sp, #60	; 0x3c
 8000888:	af00      	add	r7, sp, #0
 800088a:	6178      	str	r0, [r7, #20]
 800088c:	460b      	mov	r3, r1
 800088e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000892:	edc7 0a02 	vstr	s1, [r7, #8]
 8000896:	ed87 1a01 	vstr	s2, [r7, #4]
 800089a:	74fb      	strb	r3, [r7, #19]
 800089c:	4613      	mov	r3, r2
 800089e:	74bb      	strb	r3, [r7, #18]
	u32 RGB=0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	637b      	str	r3, [r7, #52]	; 0x34
	u8 R8,G8,B8;
	char  i;
	float X,Y,Z,C;
	i = h/60;		//char i
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	4a7a      	ldr	r2, [pc, #488]	; (8000a90 <HSV_RGB+0x20c>)
 80008a8:	fb82 1203 	smull	r1, r2, r2, r3
 80008ac:	441a      	add	r2, r3
 80008ae:	1152      	asrs	r2, r2, #5
 80008b0:	17db      	asrs	r3, r3, #31
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	C = h;		//float C
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	ee07 3a90 	vmov	s15, r3
 80008be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	C = C/60-i;
 80008c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80008ca:	eddf 6a72 	vldr	s13, [pc, #456]	; 8000a94 <HSV_RGB+0x210>
 80008ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008d6:	ee07 3a90 	vmov	s15, r3
 80008da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
//	char X = C*(1- (abs((h/60)%2-1)));
	X = v*(1-s);
 80008e6:	7cbb      	ldrb	r3, [r7, #18]
 80008e8:	7cfa      	ldrb	r2, [r7, #19]
 80008ea:	f1c2 0201 	rsb	r2, r2, #1
 80008ee:	fb02 f303 	mul.w	r3, r2, r3
 80008f2:	ee07 3a90 	vmov	s15, r3
 80008f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	Y = v*(1-(s*C));
 80008fe:	7cbb      	ldrb	r3, [r7, #18]
 8000900:	ee07 3a90 	vmov	s15, r3
 8000904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000908:	7cfb      	ldrb	r3, [r7, #19]
 800090a:	ee07 3a90 	vmov	s15, r3
 800090e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000912:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800091a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800091e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000926:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Z = v*(1-s*(1-C));
 800092a:	7cbb      	ldrb	r3, [r7, #18]
 800092c:	ee07 3a90 	vmov	s15, r3
 8000930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000934:	7cfb      	ldrb	r3, [r7, #19]
 8000936:	ee07 3a90 	vmov	s15, r3
 800093a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800093e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000942:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000946:	ee76 7a67 	vsub.f32	s15, s12, s15
 800094a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800094e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000952:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095a:	edc7 7a08 	vstr	s15, [r7, #32]
	
	switch(i)
 800095e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000962:	2b05      	cmp	r3, #5
 8000964:	d856      	bhi.n	8000a14 <HSV_RGB+0x190>
 8000966:	a201      	add	r2, pc, #4	; (adr r2, 800096c <HSV_RGB+0xe8>)
 8000968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096c:	08000985 	.word	0x08000985
 8000970:	0800099d 	.word	0x0800099d
 8000974:	080009b5 	.word	0x080009b5
 8000978:	080009cd 	.word	0x080009cd
 800097c:	080009e5 	.word	0x080009e5
 8000980:	080009fd 	.word	0x080009fd
	{
		case 0:
			R=v; G=Z; B=X;
 8000984:	7cbb      	ldrb	r3, [r7, #18]
 8000986:	ee07 3a90 	vmov	s15, r3
 800098a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800098e:	edc7 7a03 	vstr	s15, [r7, #12]
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000998:	607b      	str	r3, [r7, #4]
			break;
 800099a:	e03b      	b.n	8000a14 <HSV_RGB+0x190>
		case 1:
			R=Y; G=v; B=X;
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	7cbb      	ldrb	r3, [r7, #18]
 80009a2:	ee07 3a90 	vmov	s15, r3
 80009a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009aa:	edc7 7a02 	vstr	s15, [r7, #8]
 80009ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b0:	607b      	str	r3, [r7, #4]
			break;
 80009b2:	e02f      	b.n	8000a14 <HSV_RGB+0x190>
		case 2:
			R=X; G=v; B=Z;
 80009b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	7cbb      	ldrb	r3, [r7, #18]
 80009ba:	ee07 3a90 	vmov	s15, r3
 80009be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009c2:	edc7 7a02 	vstr	s15, [r7, #8]
 80009c6:	6a3b      	ldr	r3, [r7, #32]
 80009c8:	607b      	str	r3, [r7, #4]
			break;
 80009ca:	e023      	b.n	8000a14 <HSV_RGB+0x190>
		case 3:
			R=X; G=Y; B=v;
 80009cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	7cbb      	ldrb	r3, [r7, #18]
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009de:	edc7 7a01 	vstr	s15, [r7, #4]
			break;
 80009e2:	e017      	b.n	8000a14 <HSV_RGB+0x190>
		case 4:
			R=Z; G=X; B=v;
 80009e4:	6a3b      	ldr	r3, [r7, #32]
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	7cbb      	ldrb	r3, [r7, #18]
 80009ee:	ee07 3a90 	vmov	s15, r3
 80009f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009f6:	edc7 7a01 	vstr	s15, [r7, #4]
			break;
 80009fa:	e00b      	b.n	8000a14 <HSV_RGB+0x190>
		case 5:
			R=v; G=X; B=Y;
 80009fc:	7cbb      	ldrb	r3, [r7, #18]
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a06:	edc7 7a03 	vstr	s15, [r7, #12]
 8000a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	607b      	str	r3, [r7, #4]
			break;
 8000a12:	bf00      	nop
	}
	R8=R*255;
 8000a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a18:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000a98 <HSV_RGB+0x214>
 8000a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a24:	edc7 7a00 	vstr	s15, [r7]
 8000a28:	783b      	ldrb	r3, [r7, #0]
 8000a2a:	77fb      	strb	r3, [r7, #31]
	G8=G*255;
 8000a2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a30:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000a98 <HSV_RGB+0x214>
 8000a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3c:	edc7 7a00 	vstr	s15, [r7]
 8000a40:	783b      	ldrb	r3, [r7, #0]
 8000a42:	77bb      	strb	r3, [r7, #30]
	B8=B*255;
 8000a44:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a48:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000a98 <HSV_RGB+0x214>
 8000a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a54:	edc7 7a00 	vstr	s15, [r7]
 8000a58:	783b      	ldrb	r3, [r7, #0]
 8000a5a:	777b      	strb	r3, [r7, #29]
	RGB|=R8;
 8000a5c:	7ffb      	ldrb	r3, [r7, #31]
 8000a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a60:	4313      	orrs	r3, r2
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
	RGB<<=8;
 8000a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
	RGB|=G8;
 8000a6a:	7fbb      	ldrb	r3, [r7, #30]
 8000a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
	RGB<<=8;
 8000a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	637b      	str	r3, [r7, #52]	; 0x34
	RGB|=B8;
 8000a78:	7f7b      	ldrb	r3, [r7, #29]
 8000a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
	return RGB;
 8000a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	373c      	adds	r7, #60	; 0x3c
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	88888889 	.word	0x88888889
 8000a94:	42700000 	.word	0x42700000
 8000a98:	437f0000 	.word	0x437f0000

08000a9c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af04      	add	r7, sp, #16
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <MX_FREERTOS_Init+0x3c>)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_FREERTOS_Init+0x40>)
 8000aa8:	f003 f9e6 	bl	8003e78 <osThreadNew>
 8000aac:	4603      	mov	r3, r0
 8000aae:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <MX_FREERTOS_Init+0x44>)
 8000ab0:	6013      	str	r3, [r2, #0]
  /*My_Drone LED control*/
//  ret = xTaskCreate(LED_Test, "LED_Blink",128,NULL,osPriorityNormal,&xLED_Task_Handel);
  /*My_Drone BT module reading*/

  /*My_Drone WS2812 control*/
    xLED_Task_Handel = xTaskCreateStatic(WS2812_LEDStateUpdate, "LEDTask",128,NULL, osPriorityNormal, g_pucStackOfLEDTask, &g_TCBofLEDTask);
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_FREERTOS_Init+0x48>)
 8000ab4:	9302      	str	r3, [sp, #8]
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_FREERTOS_Init+0x4c>)
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	2318      	movs	r3, #24
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	490a      	ldr	r1, [pc, #40]	; (8000aec <MX_FREERTOS_Init+0x50>)
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <MX_FREERTOS_Init+0x54>)
 8000ac6:	f004 f859 	bl	8004b7c <xTaskCreateStatic>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4a09      	ldr	r2, [pc, #36]	; (8000af4 <MX_FREERTOS_Init+0x58>)
 8000ace:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08006950 	.word	0x08006950
 8000adc:	08000af9 	.word	0x08000af9
 8000ae0:	200002b8 	.word	0x200002b8
 8000ae4:	20000258 	.word	0x20000258
 8000ae8:	20000058 	.word	0x20000058
 8000aec:	08006930 	.word	0x08006930
 8000af0:	08000515 	.word	0x08000515
 8000af4:	200002b4 	.word	0x200002b4

08000af8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(3000);
 8000b00:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b04:	f004 f9dc 	bl	8004ec0 <vTaskDelay>
 8000b08:	e7fa      	b.n	8000b00 <StartDefaultTask+0x8>
	...

08000b0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b81      	ldr	r3, [pc, #516]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a80      	ldr	r2, [pc, #512]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b7e      	ldr	r3, [pc, #504]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b7a      	ldr	r3, [pc, #488]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a79      	ldr	r2, [pc, #484]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b77      	ldr	r3, [pc, #476]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	4b73      	ldr	r3, [pc, #460]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a72      	ldr	r2, [pc, #456]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b70      	ldr	r3, [pc, #448]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b6c      	ldr	r3, [pc, #432]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a6b      	ldr	r2, [pc, #428]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b69      	ldr	r3, [pc, #420]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b65      	ldr	r3, [pc, #404]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a64      	ldr	r2, [pc, #400]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b62      	ldr	r3, [pc, #392]	; (8000d2c <MX_GPIO_Init+0x220>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AIR_PRES_CSD_GPIO_Port, AIR_PRES_CSD_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	485f      	ldr	r0, [pc, #380]	; (8000d30 <MX_GPIO_Init+0x224>)
 8000bb4:	f000 ff56 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BT_WAKE_Pin|GPIO_PIN_5|CS_Pin|D_C_Pin
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f641 4122 	movw	r1, #7202	; 0x1c22
 8000bbe:	485d      	ldr	r0, [pc, #372]	; (8000d34 <MX_GPIO_Init+0x228>)
 8000bc0:	f000 ff50 	bl	8001a64 <HAL_GPIO_WritePin>
                          |LCD_RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000bca:	485b      	ldr	r0, [pc, #364]	; (8000d38 <MX_GPIO_Init+0x22c>)
 8000bcc:	f000 ff4a 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WS_LED_Pin|BKL_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8000bd6:	4859      	ldr	r0, [pc, #356]	; (8000d3c <MX_GPIO_Init+0x230>)
 8000bd8:	f000 ff44 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = USB_DET_Pin|BT_STA_Pin|SYS_WAKE_Pin;
 8000bdc:	f242 0305 	movw	r3, #8197	; 0x2005
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4850      	ldr	r0, [pc, #320]	; (8000d34 <MX_GPIO_Init+0x228>)
 8000bf2:	f000 fd8b 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHG_STA_Pin;
 8000bf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHG_STA_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	484a      	ldr	r0, [pc, #296]	; (8000d34 <MX_GPIO_Init+0x228>)
 8000c0c:	f000 fd7e 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4;
 8000c10:	f248 0318 	movw	r3, #32792	; 0x8018
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c16:	2303      	movs	r3, #3
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4843      	ldr	r0, [pc, #268]	; (8000d34 <MX_GPIO_Init+0x228>)
 8000c26:	f000 fd71 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AIR_PRES_CSD_Pin;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AIR_PRES_CSD_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	483b      	ldr	r0, [pc, #236]	; (8000d30 <MX_GPIO_Init+0x224>)
 8000c42:	f000 fd63 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC5 PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = BT_WAKE_Pin|GPIO_PIN_5|CS_Pin|D_C_Pin
 8000c46:	f641 4322 	movw	r3, #7202	; 0x1c22
 8000c4a:	617b      	str	r3, [r7, #20]
                          |LCD_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4835      	ldr	r0, [pc, #212]	; (8000d34 <MX_GPIO_Init+0x228>)
 8000c60:	f000 fd54 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4
                           PA5 PA6 PA7 PA8
                           PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000c64:	f640 73f7 	movw	r3, #4087	; 0xff7
 8000c68:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4830      	ldr	r0, [pc, #192]	; (8000d3c <MX_GPIO_Init+0x230>)
 8000c7a:	f000 fd47 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BAT_Pin;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AD_BAT_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	482a      	ldr	r0, [pc, #168]	; (8000d3c <MX_GPIO_Init+0x230>)
 8000c92:	f000 fd3b 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000c96:	f24f 0307 	movw	r3, #61447	; 0xf007
 8000c9a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4823      	ldr	r0, [pc, #140]	; (8000d38 <MX_GPIO_Init+0x22c>)
 8000cac:	f000 fd2e 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
 8000cb0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	481b      	ldr	r0, [pc, #108]	; (8000d38 <MX_GPIO_Init+0x22c>)
 8000cca:	f000 fd1f 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS_LED_Pin;
 8000cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WS_LED_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4815      	ldr	r0, [pc, #84]	; (8000d3c <MX_GPIO_Init+0x230>)
 8000ce8:	f000 fd10 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BKL_Pin;
 8000cec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BKL_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <MX_GPIO_Init+0x230>)
 8000d06:	f000 fd01 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4808      	ldr	r0, [pc, #32]	; (8000d40 <MX_GPIO_Init+0x234>)
 8000d20:	f000 fcf4 	bl	800170c <HAL_GPIO_Init>

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	; 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40021c00 	.word	0x40021c00
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40020c00 	.word	0x40020c00

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f000 fb88 	bl	800145c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4c:	f000 f828 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d50:	f7ff fedc 	bl	8000b0c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d54:	f000 f89c 	bl	8000e90 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000d58:	f000 f97a 	bl	8001050 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000d5c:	f000 fae2 	bl	8001324 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000d60:	f000 fa24 	bl	80011ac <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d64:	2100      	movs	r1, #0
 8000d66:	480c      	ldr	r0, [pc, #48]	; (8000d98 <main+0x54>)
 8000d68:	f001 fe3a 	bl	80029e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	480a      	ldr	r0, [pc, #40]	; (8000d98 <main+0x54>)
 8000d70:	f001 fe36 	bl	80029e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//Channel1 and 2 was configured as AF_MCO automatically by CUBE, be aware of that
 8000d74:	2108      	movs	r1, #8
 8000d76:	4808      	ldr	r0, [pc, #32]	; (8000d98 <main+0x54>)
 8000d78:	f001 fe32 	bl	80029e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000d7c:	210c      	movs	r1, #12
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <main+0x54>)
 8000d80:	f001 fe2e 	bl	80029e0 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim14);
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <main+0x58>)
 8000d86:	f001 fd11 	bl	80027ac <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000d8a:	f003 f82b 	bl	8003de4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000d8e:	f7ff fe85 	bl	8000a9c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d92:	f003 f84b 	bl	8003e2c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <main+0x52>
 8000d98:	20000314 	.word	0x20000314
 8000d9c:	2000035c 	.word	0x2000035c

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b094      	sub	sp, #80	; 0x50
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	2234      	movs	r2, #52	; 0x34
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f005 fd9e 	bl	80068f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <SystemClock_Config+0xdc>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	4a2b      	ldr	r2, [pc, #172]	; (8000e7c <SystemClock_Config+0xdc>)
 8000dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <SystemClock_Config+0xdc>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de0:	2300      	movs	r3, #0
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <SystemClock_Config+0xe0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a25      	ldr	r2, [pc, #148]	; (8000e80 <SystemClock_Config+0xe0>)
 8000dea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <SystemClock_Config+0xe0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e00:	2301      	movs	r3, #1
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e04:	2310      	movs	r3, #16
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e10:	2308      	movs	r3, #8
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e14:	23b4      	movs	r3, #180	; 0xb4
 8000e16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 f949 	bl	80020c0 <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e34:	f000 f826 	bl	8000e84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e38:	f000 fe2e 	bl	8001a98 <HAL_PWREx_EnableOverDrive>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e42:	f000 f81f 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e46:	230f      	movs	r3, #15
 8000e48:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	2105      	movs	r1, #5
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fe67 	bl	8001b38 <HAL_RCC_ClockConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000e70:	f000 f808 	bl	8000e84 <Error_Handler>
  }
}
 8000e74:	bf00      	nop
 8000e76:	3750      	adds	r7, #80	; 0x50
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40007000 	.word	0x40007000

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <Error_Handler+0x8>
	...

08000e90 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000e96:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <MX_SPI1_Init+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000e9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000edc:	220a      	movs	r2, #10
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000ee2:	f001 fb8b 	bl	80025fc <HAL_SPI_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000eec:	f7ff ffca 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200002bc 	.word	0x200002bc
 8000ef8:	40013000 	.word	0x40013000

08000efc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_SPI_MspInit+0x84>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12b      	bne.n	8000f76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f56:	2338      	movs	r3, #56	; 0x38
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f66:	2305      	movs	r3, #5
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f72:	f000 fbcb 	bl	800170c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40013000 	.word	0x40013000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020400 	.word	0x40020400

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_MspInit+0x54>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a11      	ldr	r2, [pc, #68]	; (8000fe0 <HAL_MspInit+0x54>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <HAL_MspInit+0x54>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_MspInit+0x54>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_MspInit+0x54>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_MspInit+0x54>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	210f      	movs	r1, #15
 8000fce:	f06f 0001 	mvn.w	r0, #1
 8000fd2:	f000 fb72 	bl	80016ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001014:	f000 fa74 	bl	8001500 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001018:	f004 fbce 	bl	80057b8 <xTaskGetSchedulerState>
 800101c:	4603      	mov	r3, r0
 800101e:	2b01      	cmp	r3, #1
 8001020:	d001      	beq.n	8001026 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001022:	f005 f9b9 	bl	8006398 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <SystemInit+0x20>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <SystemInit+0x20>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b092      	sub	sp, #72	; 0x48
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001090:	4b44      	ldr	r3, [pc, #272]	; (80011a4 <MX_TIM3_Init+0x154>)
 8001092:	4a45      	ldr	r2, [pc, #276]	; (80011a8 <MX_TIM3_Init+0x158>)
 8001094:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001096:	4b43      	ldr	r3, [pc, #268]	; (80011a4 <MX_TIM3_Init+0x154>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109c:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <MX_TIM3_Init+0x154>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80010a2:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <MX_TIM3_Init+0x154>)
 80010a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010aa:	4b3e      	ldr	r3, [pc, #248]	; (80011a4 <MX_TIM3_Init+0x154>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b0:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <MX_TIM3_Init+0x154>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010b6:	483b      	ldr	r0, [pc, #236]	; (80011a4 <MX_TIM3_Init+0x154>)
 80010b8:	f001 fb29 	bl	800270e <HAL_TIM_Base_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80010c2:	f7ff fedf 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010d0:	4619      	mov	r1, r3
 80010d2:	4834      	ldr	r0, [pc, #208]	; (80011a4 <MX_TIM3_Init+0x154>)
 80010d4:	f001 fe6a 	bl	8002dac <HAL_TIM_ConfigClockSource>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010de:	f7ff fed1 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010e2:	4830      	ldr	r0, [pc, #192]	; (80011a4 <MX_TIM3_Init+0x154>)
 80010e4:	f001 fc23 	bl	800292e <HAL_TIM_PWM_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80010ee:	f7ff fec9 	bl	8000e84 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	4828      	ldr	r0, [pc, #160]	; (80011a4 <MX_TIM3_Init+0x154>)
 8001102:	f001 ff1a 	bl	8002f3a <HAL_TIM_SlaveConfigSynchro>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 800110c:	f7ff feba 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4821      	ldr	r0, [pc, #132]	; (80011a4 <MX_TIM3_Init+0x154>)
 8001120:	f002 faee 	bl	8003700 <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800112a:	f7ff feab 	bl	8000e84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112e:	2360      	movs	r3, #96	; 0x60
 8001130:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001132:	230a      	movs	r3, #10
 8001134:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	4817      	ldr	r0, [pc, #92]	; (80011a4 <MX_TIM3_Init+0x154>)
 8001146:	f001 fd6f 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001150:	f7ff fe98 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	2204      	movs	r2, #4
 8001158:	4619      	mov	r1, r3
 800115a:	4812      	ldr	r0, [pc, #72]	; (80011a4 <MX_TIM3_Init+0x154>)
 800115c:	f001 fd64 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001166:	f7ff fe8d 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	2208      	movs	r2, #8
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_TIM3_Init+0x154>)
 8001172:	f001 fd59 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 800117c:	f7ff fe82 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	220c      	movs	r2, #12
 8001184:	4619      	mov	r1, r3
 8001186:	4807      	ldr	r0, [pc, #28]	; (80011a4 <MX_TIM3_Init+0x154>)
 8001188:	f001 fd4e 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001192:	f7ff fe77 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <MX_TIM3_Init+0x154>)
 8001198:	f000 f88a 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 800119c:	bf00      	nop
 800119e:	3748      	adds	r7, #72	; 0x48
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000314 	.word	0x20000314
 80011a8:	40000400 	.word	0x40000400

080011ac <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	615a      	str	r2, [r3, #20]
 80011c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_TIM14_Init+0x8c>)
 80011c6:	4a1d      	ldr	r2, [pc, #116]	; (800123c <MX_TIM14_Init+0x90>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_TIM14_Init+0x8c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <MX_TIM14_Init+0x8c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_TIM14_Init+0x8c>)
 80011d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011dc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <MX_TIM14_Init+0x8c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_TIM14_Init+0x8c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80011ea:	4813      	ldr	r0, [pc, #76]	; (8001238 <MX_TIM14_Init+0x8c>)
 80011ec:	f001 fa8f 	bl	800270e <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80011f6:	f7ff fe45 	bl	8000e84 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80011fa:	480f      	ldr	r0, [pc, #60]	; (8001238 <MX_TIM14_Init+0x8c>)
 80011fc:	f001 fb3e 	bl	800287c <HAL_TIM_OC_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001206:	f7ff fe3d 	bl	8000e84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_TIM14_Init+0x8c>)
 8001222:	f001 fca5 	bl	8002b70 <HAL_TIM_OC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800122c:	f7ff fe2a 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000035c 	.word	0x2000035c
 800123c:	40002000 	.word	0x40002000

08001240 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a15      	ldr	r2, [pc, #84]	; (80012a4 <HAL_TIM_Base_MspInit+0x64>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10e      	bne.n	8001270 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <HAL_TIM_Base_MspInit+0x68>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <HAL_TIM_Base_MspInit+0x68>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_TIM_Base_MspInit+0x68>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800126e:	e012      	b.n	8001296 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM14)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <HAL_TIM_Base_MspInit+0x6c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d10d      	bne.n	8001296 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_TIM_Base_MspInit+0x68>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <HAL_TIM_Base_MspInit+0x68>)
 8001284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <HAL_TIM_Base_MspInit+0x68>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40000400 	.word	0x40000400
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40002000 	.word	0x40002000

080012b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <HAL_TIM_MspPostInit+0x68>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d11e      	bne.n	8001310 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_TIM_MspPostInit+0x6c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_TIM_MspPostInit+0x6c>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_TIM_MspPostInit+0x6c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Win1_Pin|Win2_Pin|Win3_Pin|Win4_Pin;
 80012ee:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80012f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001300:	2302      	movs	r3, #2
 8001302:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <HAL_TIM_MspPostInit+0x70>)
 800130c:	f000 f9fe 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001310:	bf00      	nop
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40000400 	.word	0x40000400
 800131c:	40023800 	.word	0x40023800
 8001320:	40020800 	.word	0x40020800

08001324 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_USART1_UART_Init+0x4c>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <MX_USART1_UART_Init+0x50>)
 800132c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_USART1_UART_Init+0x4c>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART1_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_USART1_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_USART1_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_USART1_UART_Init+0x4c>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_USART1_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_USART1_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_USART1_UART_Init+0x4c>)
 800135c:	f002 fa4c 	bl	80037f8 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001366:	f7ff fd8d 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200003a4 	.word	0x200003a4
 8001374:	40011000 	.word	0x40011000

08001378 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_UART_MspInit+0x84>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d12b      	bne.n	80013f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013d2:	23c0      	movs	r3, #192	; 0xc0
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013e2:	2307      	movs	r3, #7
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <HAL_UART_MspInit+0x8c>)
 80013ee:	f000 f98d 	bl	800170c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40011000 	.word	0x40011000
 8001400:	40023800 	.word	0x40023800
 8001404:	40020400 	.word	0x40020400

08001408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001440 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800140e:	490e      	ldr	r1, [pc, #56]	; (8001448 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001410:	4a0e      	ldr	r2, [pc, #56]	; (800144c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001424:	4c0b      	ldr	r4, [pc, #44]	; (8001454 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001432:	f7ff fdfb 	bl	800102c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001436:	f005 fa29 	bl	800688c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143a:	f7ff fc83 	bl	8000d44 <main>
  bx  lr    
 800143e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800144c:	0800699c 	.word	0x0800699c
  ldr r2, =_sbss
 8001450:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001454:	2000533c 	.word	0x2000533c

08001458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC_IRQHandler>
	...

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <HAL_Init+0x40>)
 8001466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_Init+0x40>)
 8001472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001476:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_Init+0x40>)
 800147e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001482:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 f90d 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148a:	200f      	movs	r0, #15
 800148c:	f000 f808 	bl	80014a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001490:	f7ff fd7c 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023c00 	.word	0x40023c00

080014a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x54>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x58>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f917 	bl	80016f2 <HAL_SYSTICK_Config>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00e      	b.n	80014ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d80a      	bhi.n	80014ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d4:	2200      	movs	r2, #0
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f000 f8ed 	bl	80016ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <HAL_InitTick+0x5c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e000      	b.n	80014ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000004 	.word	0x20000004
 80014f8:	2000000c 	.word	0x2000000c
 80014fc:	20000008 	.word	0x20000008

08001500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x20>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x24>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_IncTick+0x24>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2000000c 	.word	0x2000000c
 8001524:	200003e8 	.word	0x200003e8

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <HAL_GetTick+0x14>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	200003e8 	.word	0x200003e8

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	db0a      	blt.n	80015ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	490c      	ldr	r1, [pc, #48]	; (80015f0 <__NVIC_SetPriority+0x4c>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	0112      	lsls	r2, r2, #4
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	440b      	add	r3, r1
 80015c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015cc:	e00a      	b.n	80015e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4908      	ldr	r1, [pc, #32]	; (80015f4 <__NVIC_SetPriority+0x50>)
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	3b04      	subs	r3, #4
 80015dc:	0112      	lsls	r2, r2, #4
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	440b      	add	r3, r1
 80015e2:	761a      	strb	r2, [r3, #24]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000e100 	.word	0xe000e100
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f1c3 0307 	rsb	r3, r3, #7
 8001612:	2b04      	cmp	r3, #4
 8001614:	bf28      	it	cs
 8001616:	2304      	movcs	r3, #4
 8001618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3304      	adds	r3, #4
 800161e:	2b06      	cmp	r3, #6
 8001620:	d902      	bls.n	8001628 <NVIC_EncodePriority+0x30>
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3b03      	subs	r3, #3
 8001626:	e000      	b.n	800162a <NVIC_EncodePriority+0x32>
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	401a      	ands	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001640:	f04f 31ff 	mov.w	r1, #4294967295
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	43d9      	mvns	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	4313      	orrs	r3, r2
         );
}
 8001652:	4618      	mov	r0, r3
 8001654:	3724      	adds	r7, #36	; 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001670:	d301      	bcc.n	8001676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <SysTick_Config+0x40>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167e:	210f      	movs	r1, #15
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f7ff ff8e 	bl	80015a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SysTick_Config+0x40>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SysTick_Config+0x40>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff47 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff5c 	bl	8001588 <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff8e 	bl	80015f8 <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5d 	bl	80015a4 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffb0 	bl	8001660 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e165      	b.n	80019f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 8154 	bne.w	80019ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d005      	beq.n	800175e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175a:	2b02      	cmp	r3, #2
 800175c:	d130      	bne.n	80017c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 0201 	and.w	r2, r3, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d017      	beq.n	80017fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80ae 	beq.w	80019ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <HAL_GPIO_Init+0x300>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <HAL_GPIO_Init+0x300>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b5a      	ldr	r3, [pc, #360]	; (8001a0c <HAL_GPIO_Init+0x300>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ae:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <HAL_GPIO_Init+0x304>)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4f      	ldr	r2, [pc, #316]	; (8001a14 <HAL_GPIO_Init+0x308>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d025      	beq.n	8001926 <HAL_GPIO_Init+0x21a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4e      	ldr	r2, [pc, #312]	; (8001a18 <HAL_GPIO_Init+0x30c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d01f      	beq.n	8001922 <HAL_GPIO_Init+0x216>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4d      	ldr	r2, [pc, #308]	; (8001a1c <HAL_GPIO_Init+0x310>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d019      	beq.n	800191e <HAL_GPIO_Init+0x212>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	; (8001a20 <HAL_GPIO_Init+0x314>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0x20e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4b      	ldr	r2, [pc, #300]	; (8001a24 <HAL_GPIO_Init+0x318>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00d      	beq.n	8001916 <HAL_GPIO_Init+0x20a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4a      	ldr	r2, [pc, #296]	; (8001a28 <HAL_GPIO_Init+0x31c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d007      	beq.n	8001912 <HAL_GPIO_Init+0x206>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a49      	ldr	r2, [pc, #292]	; (8001a2c <HAL_GPIO_Init+0x320>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_GPIO_Init+0x202>
 800190a:	2306      	movs	r3, #6
 800190c:	e00c      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 800190e:	2307      	movs	r3, #7
 8001910:	e00a      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001912:	2305      	movs	r3, #5
 8001914:	e008      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001916:	2304      	movs	r3, #4
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 800191a:	2303      	movs	r3, #3
 800191c:	e004      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 800191e:	2302      	movs	r3, #2
 8001920:	e002      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001926:	2300      	movs	r3, #0
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f002 0203 	and.w	r2, r2, #3
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	4093      	lsls	r3, r2
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001938:	4935      	ldr	r1, [pc, #212]	; (8001a10 <HAL_GPIO_Init+0x304>)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001946:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <HAL_GPIO_Init+0x324>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800196a:	4a31      	ldr	r2, [pc, #196]	; (8001a30 <HAL_GPIO_Init+0x324>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001970:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <HAL_GPIO_Init+0x324>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <HAL_GPIO_Init+0x324>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <HAL_GPIO_Init+0x324>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019be:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <HAL_GPIO_Init+0x324>)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_GPIO_Init+0x324>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e8:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <HAL_GPIO_Init+0x324>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	f67f ae96 	bls.w	8001728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3724      	adds	r7, #36	; 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40013800 	.word	0x40013800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40021400 	.word	0x40021400
 8001a2c:	40021800 	.word	0x40021800
 8001a30:	40013c00 	.word	0x40013c00

08001a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	887b      	ldrh	r3, [r7, #2]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	e001      	b.n	8001a56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
 8001a70:	4613      	mov	r3, r2
 8001a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a74:	787b      	ldrb	r3, [r7, #1]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a80:	e003      	b.n	8001a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	041a      	lsls	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	619a      	str	r2, [r3, #24]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_PWREx_EnableOverDrive+0x90>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a1f      	ldr	r2, [pc, #124]	; (8001b28 <HAL_PWREx_EnableOverDrive+0x90>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_PWREx_EnableOverDrive+0x94>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac4:	f7ff fd30 	bl	8001528 <HAL_GetTick>
 8001ac8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001aca:	e009      	b.n	8001ae0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001acc:	f7ff fd2c 	bl	8001528 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ada:	d901      	bls.n	8001ae0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e01f      	b.n	8001b20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aec:	d1ee      	bne.n	8001acc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001af4:	f7ff fd18 	bl	8001528 <HAL_GetTick>
 8001af8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001afa:	e009      	b.n	8001b10 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001afc:	f7ff fd14 	bl	8001528 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b0a:	d901      	bls.n	8001b10 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e007      	b.n	8001b20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b1c:	d1ee      	bne.n	8001afc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	420e0040 	.word	0x420e0040
 8001b30:	40007000 	.word	0x40007000
 8001b34:	420e0044 	.word	0x420e0044

08001b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0cc      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b68      	ldr	r3, [pc, #416]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d90c      	bls.n	8001b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b65      	ldr	r3, [pc, #404]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0b8      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d020      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b8c:	4b59      	ldr	r3, [pc, #356]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4a58      	ldr	r2, [pc, #352]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba4:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a52      	ldr	r2, [pc, #328]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb0:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	494d      	ldr	r1, [pc, #308]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d044      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d119      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e07f      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d003      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf6:	4b3f      	ldr	r3, [pc, #252]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e06f      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c06:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e067      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c16:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f023 0203 	bic.w	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4934      	ldr	r1, [pc, #208]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c28:	f7ff fc7e 	bl	8001528 <HAL_GetTick>
 8001c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c30:	f7ff fc7a 	bl	8001528 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e04f      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 020c 	and.w	r2, r3, #12
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d1eb      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d20c      	bcs.n	8001c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e032      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4916      	ldr	r1, [pc, #88]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	490e      	ldr	r1, [pc, #56]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cbe:	f000 f855 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	490a      	ldr	r1, [pc, #40]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	5ccb      	ldrb	r3, [r1, r3]
 8001cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd6:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fbde 	bl	80014a0 <HAL_InitTick>

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023c00 	.word	0x40023c00
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	08006974 	.word	0x08006974
 8001cfc:	20000004 	.word	0x20000004
 8001d00:	20000008 	.word	0x20000008

08001d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d20:	f7ff fff0 	bl	8001d04 <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	0a9b      	lsrs	r3, r3, #10
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4903      	ldr	r1, [pc, #12]	; (8001d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	08006984 	.word	0x08006984

08001d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d48:	f7ff ffdc 	bl	8001d04 <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	0b5b      	lsrs	r3, r3, #13
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4903      	ldr	r1, [pc, #12]	; (8001d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	08006984 	.word	0x08006984

08001d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d70:	b0a6      	sub	sp, #152	; 0x98
 8001d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d92:	4bc8      	ldr	r3, [pc, #800]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	f200 817e 	bhi.w	800209c <HAL_RCC_GetSysClockFreq+0x330>
 8001da0:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da6:	bf00      	nop
 8001da8:	08001ddd 	.word	0x08001ddd
 8001dac:	0800209d 	.word	0x0800209d
 8001db0:	0800209d 	.word	0x0800209d
 8001db4:	0800209d 	.word	0x0800209d
 8001db8:	08001de5 	.word	0x08001de5
 8001dbc:	0800209d 	.word	0x0800209d
 8001dc0:	0800209d 	.word	0x0800209d
 8001dc4:	0800209d 	.word	0x0800209d
 8001dc8:	08001ded 	.word	0x08001ded
 8001dcc:	0800209d 	.word	0x0800209d
 8001dd0:	0800209d 	.word	0x0800209d
 8001dd4:	0800209d 	.word	0x0800209d
 8001dd8:	08001f57 	.word	0x08001f57
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ddc:	4bb6      	ldr	r3, [pc, #728]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001de2:	e15f      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001de4:	4bb5      	ldr	r3, [pc, #724]	; (80020bc <HAL_RCC_GetSysClockFreq+0x350>)
 8001de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001dea:	e15b      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dec:	4bb1      	ldr	r3, [pc, #708]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001df8:	4bae      	ldr	r3, [pc, #696]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d031      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e04:	4bab      	ldr	r3, [pc, #684]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e16:	663b      	str	r3, [r7, #96]	; 0x60
 8001e18:	2300      	movs	r3, #0
 8001e1a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e1c:	4ba7      	ldr	r3, [pc, #668]	; (80020bc <HAL_RCC_GetSysClockFreq+0x350>)
 8001e1e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001e22:	462a      	mov	r2, r5
 8001e24:	fb03 f202 	mul.w	r2, r3, r2
 8001e28:	2300      	movs	r3, #0
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	4aa2      	ldr	r2, [pc, #648]	; (80020bc <HAL_RCC_GetSysClockFreq+0x350>)
 8001e34:	4621      	mov	r1, r4
 8001e36:	fba1 1202 	umull	r1, r2, r1, r2
 8001e3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	67ba      	str	r2, [r7, #120]	; 0x78
 8001e40:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e42:	4413      	add	r3, r2
 8001e44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e4e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e54:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001e58:	f7fe f9da 	bl	8000210 <__aeabi_uldivmod>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4613      	mov	r3, r2
 8001e62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e66:	e064      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e68:	4b92      	ldr	r3, [pc, #584]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	099b      	lsrs	r3, r3, #6
 8001e6e:	2200      	movs	r2, #0
 8001e70:	653b      	str	r3, [r7, #80]	; 0x50
 8001e72:	657a      	str	r2, [r7, #84]	; 0x54
 8001e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e80:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001e84:	4622      	mov	r2, r4
 8001e86:	462b      	mov	r3, r5
 8001e88:	f04f 0000 	mov.w	r0, #0
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	0159      	lsls	r1, r3, #5
 8001e92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e96:	0150      	lsls	r0, r2, #5
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	1a51      	subs	r1, r2, r1
 8001ea0:	6139      	str	r1, [r7, #16]
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001eb6:	4659      	mov	r1, fp
 8001eb8:	018b      	lsls	r3, r1, #6
 8001eba:	4651      	mov	r1, sl
 8001ebc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ec0:	4651      	mov	r1, sl
 8001ec2:	018a      	lsls	r2, r1, #6
 8001ec4:	4651      	mov	r1, sl
 8001ec6:	ebb2 0801 	subs.w	r8, r2, r1
 8001eca:	4659      	mov	r1, fp
 8001ecc:	eb63 0901 	sbc.w	r9, r3, r1
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001edc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ee0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ee4:	4690      	mov	r8, r2
 8001ee6:	4699      	mov	r9, r3
 8001ee8:	4623      	mov	r3, r4
 8001eea:	eb18 0303 	adds.w	r3, r8, r3
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	462b      	mov	r3, r5
 8001ef2:	eb49 0303 	adc.w	r3, r9, r3
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f04:	4629      	mov	r1, r5
 8001f06:	028b      	lsls	r3, r1, #10
 8001f08:	4621      	mov	r1, r4
 8001f0a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f0e:	4621      	mov	r1, r4
 8001f10:	028a      	lsls	r2, r1, #10
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f1e:	647a      	str	r2, [r7, #68]	; 0x44
 8001f20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f24:	f7fe f974 	bl	8000210 <__aeabi_uldivmod>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f32:	4b60      	ldr	r3, [pc, #384]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	0c1b      	lsrs	r3, r3, #16
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001f44:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001f54:	e0a6      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f56:	4b57      	ldr	r3, [pc, #348]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f62:	4b54      	ldr	r3, [pc, #336]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d02a      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6e:	4b51      	ldr	r3, [pc, #324]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	099b      	lsrs	r3, r3, #6
 8001f74:	2200      	movs	r2, #0
 8001f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f80:	2100      	movs	r1, #0
 8001f82:	4b4e      	ldr	r3, [pc, #312]	; (80020bc <HAL_RCC_GetSysClockFreq+0x350>)
 8001f84:	fb03 f201 	mul.w	r2, r3, r1
 8001f88:	2300      	movs	r3, #0
 8001f8a:	fb00 f303 	mul.w	r3, r0, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a4a      	ldr	r2, [pc, #296]	; (80020bc <HAL_RCC_GetSysClockFreq+0x350>)
 8001f92:	fba0 1202 	umull	r1, r2, r0, r2
 8001f96:	677a      	str	r2, [r7, #116]	; 0x74
 8001f98:	460a      	mov	r2, r1
 8001f9a:	673a      	str	r2, [r7, #112]	; 0x70
 8001f9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f9e:	4413      	add	r3, r2
 8001fa0:	677b      	str	r3, [r7, #116]	; 0x74
 8001fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8001faa:	637a      	str	r2, [r7, #52]	; 0x34
 8001fac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fb0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001fb4:	f7fe f92c 	bl	8000210 <__aeabi_uldivmod>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001fc2:	e05b      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc4:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	099b      	lsrs	r3, r3, #6
 8001fca:	2200      	movs	r2, #0
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd6:	623b      	str	r3, [r7, #32]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
 8001fdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fe0:	4642      	mov	r2, r8
 8001fe2:	464b      	mov	r3, r9
 8001fe4:	f04f 0000 	mov.w	r0, #0
 8001fe8:	f04f 0100 	mov.w	r1, #0
 8001fec:	0159      	lsls	r1, r3, #5
 8001fee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ff2:	0150      	lsls	r0, r2, #5
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4641      	mov	r1, r8
 8001ffa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	eb63 0b01 	sbc.w	fp, r3, r1
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002010:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002014:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002018:	ebb2 040a 	subs.w	r4, r2, sl
 800201c:	eb63 050b 	sbc.w	r5, r3, fp
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	00eb      	lsls	r3, r5, #3
 800202a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800202e:	00e2      	lsls	r2, r4, #3
 8002030:	4614      	mov	r4, r2
 8002032:	461d      	mov	r5, r3
 8002034:	4643      	mov	r3, r8
 8002036:	18e3      	adds	r3, r4, r3
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	464b      	mov	r3, r9
 800203c:	eb45 0303 	adc.w	r3, r5, r3
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800204e:	4629      	mov	r1, r5
 8002050:	028b      	lsls	r3, r1, #10
 8002052:	4621      	mov	r1, r4
 8002054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002058:	4621      	mov	r1, r4
 800205a:	028a      	lsls	r2, r1, #10
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002064:	2200      	movs	r2, #0
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	61fa      	str	r2, [r7, #28]
 800206a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800206e:	f7fe f8cf 	bl	8000210 <__aeabi_uldivmod>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4613      	mov	r3, r2
 8002078:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x348>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	0f1b      	lsrs	r3, r3, #28
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800208a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800208e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800209a:	e003      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800209e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80020a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3798      	adds	r7, #152	; 0x98
 80020ac:	46bd      	mov	sp, r7
 80020ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	00f42400 	.word	0x00f42400
 80020bc:	017d7840 	.word	0x017d7840

080020c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e28d      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8083 	beq.w	80021e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020e0:	4b94      	ldr	r3, [pc, #592]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d019      	beq.n	8002120 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020ec:	4b91      	ldr	r3, [pc, #580]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020f8:	4b8e      	ldr	r3, [pc, #568]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002104:	d00c      	beq.n	8002120 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002106:	4b8b      	ldr	r3, [pc, #556]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d112      	bne.n	8002138 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002112:	4b88      	ldr	r3, [pc, #544]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800211e:	d10b      	bne.n	8002138 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	4b84      	ldr	r3, [pc, #528]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d05b      	beq.n	80021e4 <HAL_RCC_OscConfig+0x124>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d157      	bne.n	80021e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e25a      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002140:	d106      	bne.n	8002150 <HAL_RCC_OscConfig+0x90>
 8002142:	4b7c      	ldr	r3, [pc, #496]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a7b      	ldr	r2, [pc, #492]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e01d      	b.n	800218c <HAL_RCC_OscConfig+0xcc>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0xb4>
 800215a:	4b76      	ldr	r3, [pc, #472]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a75      	ldr	r2, [pc, #468]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b73      	ldr	r3, [pc, #460]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a72      	ldr	r2, [pc, #456]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0xcc>
 8002174:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a6e      	ldr	r2, [pc, #440]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 800217a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b6c      	ldr	r3, [pc, #432]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a6b      	ldr	r2, [pc, #428]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff f9c8 	bl	8001528 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff f9c4 	bl	8001528 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e21f      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b61      	ldr	r3, [pc, #388]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0xdc>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7ff f9b4 	bl	8001528 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c4:	f7ff f9b0 	bl	8001528 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e20b      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	4b57      	ldr	r3, [pc, #348]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x104>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d06f      	beq.n	80022d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021f2:	4b50      	ldr	r3, [pc, #320]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d017      	beq.n	800222e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021fe:	4b4d      	ldr	r3, [pc, #308]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002206:	2b08      	cmp	r3, #8
 8002208:	d105      	bne.n	8002216 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800220a:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800221e:	2b0c      	cmp	r3, #12
 8002220:	d11c      	bne.n	800225c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b44      	ldr	r3, [pc, #272]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x186>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1d3      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4937      	ldr	r1, [pc, #220]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	e03a      	b.n	80022d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b34      	ldr	r3, [pc, #208]	; (8002338 <HAL_RCC_OscConfig+0x278>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7ff f95d 	bl	8001528 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002272:	f7ff f959 	bl	8001528 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e1b4      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4925      	ldr	r1, [pc, #148]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
 80022a4:	e015      	b.n	80022d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_RCC_OscConfig+0x278>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7ff f93c 	bl	8001528 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b4:	f7ff f938 	bl	8001528 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e193      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d036      	beq.n	800234c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d016      	beq.n	8002314 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_RCC_OscConfig+0x27c>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7ff f91c 	bl	8001528 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff f918 	bl	8001528 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e173      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 8002308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x234>
 8002312:	e01b      	b.n	800234c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_OscConfig+0x27c>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7ff f905 	bl	8001528 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002320:	e00e      	b.n	8002340 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002322:	f7ff f901 	bl	8001528 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d907      	bls.n	8002340 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e15c      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
 8002334:	40023800 	.word	0x40023800
 8002338:	42470000 	.word	0x42470000
 800233c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002340:	4b8a      	ldr	r3, [pc, #552]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 8002342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1ea      	bne.n	8002322 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 8097 	beq.w	8002488 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235e:	4b83      	ldr	r3, [pc, #524]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	4b7f      	ldr	r3, [pc, #508]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a7e      	ldr	r2, [pc, #504]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	4b7c      	ldr	r3, [pc, #496]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4b79      	ldr	r3, [pc, #484]	; (8002570 <HAL_RCC_OscConfig+0x4b0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d118      	bne.n	80023c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002396:	4b76      	ldr	r3, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x4b0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a75      	ldr	r2, [pc, #468]	; (8002570 <HAL_RCC_OscConfig+0x4b0>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7ff f8c1 	bl	8001528 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7ff f8bd 	bl	8001528 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e118      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	4b6c      	ldr	r3, [pc, #432]	; (8002570 <HAL_RCC_OscConfig+0x4b0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x31e>
 80023d0:	4b66      	ldr	r3, [pc, #408]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	4a65      	ldr	r2, [pc, #404]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6713      	str	r3, [r2, #112]	; 0x70
 80023dc:	e01c      	b.n	8002418 <HAL_RCC_OscConfig+0x358>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x340>
 80023e6:	4b61      	ldr	r3, [pc, #388]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	4a60      	ldr	r2, [pc, #384]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6713      	str	r3, [r2, #112]	; 0x70
 80023f2:	4b5e      	ldr	r3, [pc, #376]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f6:	4a5d      	ldr	r2, [pc, #372]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6713      	str	r3, [r2, #112]	; 0x70
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0x358>
 8002400:	4b5a      	ldr	r3, [pc, #360]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	4a59      	ldr	r2, [pc, #356]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	6713      	str	r3, [r2, #112]	; 0x70
 800240c:	4b57      	ldr	r3, [pc, #348]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4a56      	ldr	r2, [pc, #344]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 8002412:	f023 0304 	bic.w	r3, r3, #4
 8002416:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d015      	beq.n	800244c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7ff f882 	bl	8001528 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002426:	e00a      	b.n	800243e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002428:	f7ff f87e 	bl	8001528 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e0d7      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243e:	4b4b      	ldr	r3, [pc, #300]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0ee      	beq.n	8002428 <HAL_RCC_OscConfig+0x368>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7ff f86c 	bl	8001528 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002452:	e00a      	b.n	800246a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f7ff f868 	bl	8001528 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0c1      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246a:	4b40      	ldr	r3, [pc, #256]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1ee      	bne.n	8002454 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002476:	7dfb      	ldrb	r3, [r7, #23]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d105      	bne.n	8002488 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247c:	4b3b      	ldr	r3, [pc, #236]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	4a3a      	ldr	r2, [pc, #232]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 8002482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002486:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80ad 	beq.w	80025ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002492:	4b36      	ldr	r3, [pc, #216]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b08      	cmp	r3, #8
 800249c:	d060      	beq.n	8002560 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d145      	bne.n	8002532 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b33      	ldr	r3, [pc, #204]	; (8002574 <HAL_RCC_OscConfig+0x4b4>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff f83c 	bl	8001528 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b4:	f7ff f838 	bl	8001528 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e093      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69da      	ldr	r2, [r3, #28]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	019b      	lsls	r3, r3, #6
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	3b01      	subs	r3, #1
 80024ec:	041b      	lsls	r3, r3, #16
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	061b      	lsls	r3, r3, #24
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	071b      	lsls	r3, r3, #28
 80024fe:	491b      	ldr	r1, [pc, #108]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCC_OscConfig+0x4b4>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7ff f80d 	bl	8001528 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002512:	f7ff f809 	bl	8001528 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e064      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x452>
 8002530:	e05c      	b.n	80025ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_RCC_OscConfig+0x4b4>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fff6 	bl	8001528 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe fff2 	bl	8001528 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e04d      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_OscConfig+0x4ac>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x480>
 800255e:	e045      	b.n	80025ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d107      	bne.n	8002578 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e040      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
 800256c:	40023800 	.word	0x40023800
 8002570:	40007000 	.word	0x40007000
 8002574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_RCC_OscConfig+0x538>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d030      	beq.n	80025e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d129      	bne.n	80025e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d122      	bne.n	80025e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025a8:	4013      	ands	r3, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d119      	bne.n	80025e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	3b01      	subs	r3, #1
 80025c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d10f      	bne.n	80025e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d107      	bne.n	80025e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800

080025fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07b      	b.n	8002706 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	2b00      	cmp	r3, #0
 8002614:	d108      	bne.n	8002628 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800261e:	d009      	beq.n	8002634 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
 8002626:	e005      	b.n	8002634 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fc54 	bl	8000efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800266a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b8:	ea42 0103 	orr.w	r1, r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	0c1b      	lsrs	r3, r3, #16
 80026d2:	f003 0104 	and.w	r1, r3, #4
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	f003 0210 	and.w	r2, r3, #16
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e041      	b.n	80027a4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d106      	bne.n	800273a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7fe fd83 	bl	8001240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	4619      	mov	r1, r3
 800274c:	4610      	mov	r0, r2
 800274e:	f000 fc37 	bl	8002fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d001      	beq.n	80027c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e046      	b.n	8002852 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a23      	ldr	r2, [pc, #140]	; (8002860 <HAL_TIM_Base_Start+0xb4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d022      	beq.n	800281c <HAL_TIM_Base_Start+0x70>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027de:	d01d      	beq.n	800281c <HAL_TIM_Base_Start+0x70>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <HAL_TIM_Base_Start+0xb8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d018      	beq.n	800281c <HAL_TIM_Base_Start+0x70>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1e      	ldr	r2, [pc, #120]	; (8002868 <HAL_TIM_Base_Start+0xbc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d013      	beq.n	800281c <HAL_TIM_Base_Start+0x70>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1c      	ldr	r2, [pc, #112]	; (800286c <HAL_TIM_Base_Start+0xc0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00e      	beq.n	800281c <HAL_TIM_Base_Start+0x70>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <HAL_TIM_Base_Start+0xc4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d009      	beq.n	800281c <HAL_TIM_Base_Start+0x70>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_TIM_Base_Start+0xc8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d004      	beq.n	800281c <HAL_TIM_Base_Start+0x70>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a18      	ldr	r2, [pc, #96]	; (8002878 <HAL_TIM_Base_Start+0xcc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d111      	bne.n	8002840 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b06      	cmp	r3, #6
 800282c:	d010      	beq.n	8002850 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0201 	orr.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800283e:	e007      	b.n	8002850 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40010000 	.word	0x40010000
 8002864:	40000400 	.word	0x40000400
 8002868:	40000800 	.word	0x40000800
 800286c:	40000c00 	.word	0x40000c00
 8002870:	40010400 	.word	0x40010400
 8002874:	40014000 	.word	0x40014000
 8002878:	40001800 	.word	0x40001800

0800287c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e041      	b.n	8002912 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f839 	bl	800291a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f000 fb80 	bl	8002fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e041      	b.n	80029c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d106      	bne.n	800295a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f839 	bl	80029cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3304      	adds	r3, #4
 800296a:	4619      	mov	r1, r3
 800296c:	4610      	mov	r0, r2
 800296e:	f000 fb27 	bl	8002fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <HAL_TIM_PWM_Start+0x24>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e022      	b.n	8002a4a <HAL_TIM_PWM_Start+0x6a>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d109      	bne.n	8002a1e <HAL_TIM_PWM_Start+0x3e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	bf14      	ite	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	2300      	moveq	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	e015      	b.n	8002a4a <HAL_TIM_PWM_Start+0x6a>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d109      	bne.n	8002a38 <HAL_TIM_PWM_Start+0x58>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e008      	b.n	8002a4a <HAL_TIM_PWM_Start+0x6a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e07c      	b.n	8002b4c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d104      	bne.n	8002a62 <HAL_TIM_PWM_Start+0x82>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a60:	e013      	b.n	8002a8a <HAL_TIM_PWM_Start+0xaa>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d104      	bne.n	8002a72 <HAL_TIM_PWM_Start+0x92>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a70:	e00b      	b.n	8002a8a <HAL_TIM_PWM_Start+0xaa>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d104      	bne.n	8002a82 <HAL_TIM_PWM_Start+0xa2>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a80:	e003      	b.n	8002a8a <HAL_TIM_PWM_Start+0xaa>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2202      	movs	r2, #2
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	6839      	ldr	r1, [r7, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fe0f 	bl	80036b6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a2d      	ldr	r2, [pc, #180]	; (8002b54 <HAL_TIM_PWM_Start+0x174>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <HAL_TIM_PWM_Start+0xcc>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2c      	ldr	r2, [pc, #176]	; (8002b58 <HAL_TIM_PWM_Start+0x178>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <HAL_TIM_PWM_Start+0xd0>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_TIM_PWM_Start+0xd2>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <HAL_TIM_PWM_Start+0x174>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d022      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d01d      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_TIM_PWM_Start+0x17c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d018      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <HAL_TIM_PWM_Start+0x180>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <HAL_TIM_PWM_Start+0x184>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d00e      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <HAL_TIM_PWM_Start+0x178>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <HAL_TIM_PWM_Start+0x188>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d004      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <HAL_TIM_PWM_Start+0x18c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d111      	bne.n	8002b3a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b06      	cmp	r3, #6
 8002b26:	d010      	beq.n	8002b4a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b38:	e007      	b.n	8002b4a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40010400 	.word	0x40010400
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800
 8002b64:	40000c00 	.word	0x40000c00
 8002b68:	40014000 	.word	0x40014000
 8002b6c:	40001800 	.word	0x40001800

08002b70 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_TIM_OC_ConfigChannel+0x1e>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e048      	b.n	8002c20 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	d839      	bhi.n	8002c10 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002b9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002bd9 	.word	0x08002bd9
 8002ba8:	08002c11 	.word	0x08002c11
 8002bac:	08002c11 	.word	0x08002c11
 8002bb0:	08002c11 	.word	0x08002c11
 8002bb4:	08002be7 	.word	0x08002be7
 8002bb8:	08002c11 	.word	0x08002c11
 8002bbc:	08002c11 	.word	0x08002c11
 8002bc0:	08002c11 	.word	0x08002c11
 8002bc4:	08002bf5 	.word	0x08002bf5
 8002bc8:	08002c11 	.word	0x08002c11
 8002bcc:	08002c11 	.word	0x08002c11
 8002bd0:	08002c11 	.word	0x08002c11
 8002bd4:	08002c03 	.word	0x08002c03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fa8e 	bl	8003100 <TIM_OC1_SetConfig>
      break;
 8002be4:	e017      	b.n	8002c16 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 faf7 	bl	80031e0 <TIM_OC2_SetConfig>
      break;
 8002bf2:	e010      	b.n	8002c16 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fb66 	bl	80032cc <TIM_OC3_SetConfig>
      break;
 8002c00:	e009      	b.n	8002c16 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fbd3 	bl	80033b4 <TIM_OC4_SetConfig>
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	75fb      	strb	r3, [r7, #23]
      break;
 8002c14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0ae      	b.n	8002da4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	f200 809f 	bhi.w	8002d94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c56:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c91 	.word	0x08002c91
 8002c60:	08002d95 	.word	0x08002d95
 8002c64:	08002d95 	.word	0x08002d95
 8002c68:	08002d95 	.word	0x08002d95
 8002c6c:	08002cd1 	.word	0x08002cd1
 8002c70:	08002d95 	.word	0x08002d95
 8002c74:	08002d95 	.word	0x08002d95
 8002c78:	08002d95 	.word	0x08002d95
 8002c7c:	08002d13 	.word	0x08002d13
 8002c80:	08002d95 	.word	0x08002d95
 8002c84:	08002d95 	.word	0x08002d95
 8002c88:	08002d95 	.word	0x08002d95
 8002c8c:	08002d53 	.word	0x08002d53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fa32 	bl	8003100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0208 	orr.w	r2, r2, #8
 8002caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0204 	bic.w	r2, r2, #4
 8002cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6999      	ldr	r1, [r3, #24]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	619a      	str	r2, [r3, #24]
      break;
 8002cce:	e064      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fa82 	bl	80031e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6999      	ldr	r1, [r3, #24]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	021a      	lsls	r2, r3, #8
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	619a      	str	r2, [r3, #24]
      break;
 8002d10:	e043      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fad7 	bl	80032cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0208 	orr.w	r2, r2, #8
 8002d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69da      	ldr	r2, [r3, #28]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0204 	bic.w	r2, r2, #4
 8002d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69d9      	ldr	r1, [r3, #28]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	61da      	str	r2, [r3, #28]
      break;
 8002d50:	e023      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fb2b 	bl	80033b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69d9      	ldr	r1, [r3, #28]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	021a      	lsls	r2, r3, #8
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	61da      	str	r2, [r3, #28]
      break;
 8002d92:	e002      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	75fb      	strb	r3, [r7, #23]
      break;
 8002d98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_TIM_ConfigClockSource+0x1c>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e0b4      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x186>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e00:	d03e      	beq.n	8002e80 <HAL_TIM_ConfigClockSource+0xd4>
 8002e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e06:	f200 8087 	bhi.w	8002f18 <HAL_TIM_ConfigClockSource+0x16c>
 8002e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0e:	f000 8086 	beq.w	8002f1e <HAL_TIM_ConfigClockSource+0x172>
 8002e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e16:	d87f      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x16c>
 8002e18:	2b70      	cmp	r3, #112	; 0x70
 8002e1a:	d01a      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0xa6>
 8002e1c:	2b70      	cmp	r3, #112	; 0x70
 8002e1e:	d87b      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x16c>
 8002e20:	2b60      	cmp	r3, #96	; 0x60
 8002e22:	d050      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x11a>
 8002e24:	2b60      	cmp	r3, #96	; 0x60
 8002e26:	d877      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x16c>
 8002e28:	2b50      	cmp	r3, #80	; 0x50
 8002e2a:	d03c      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0xfa>
 8002e2c:	2b50      	cmp	r3, #80	; 0x50
 8002e2e:	d873      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x16c>
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d058      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x13a>
 8002e34:	2b40      	cmp	r3, #64	; 0x40
 8002e36:	d86f      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x16c>
 8002e38:	2b30      	cmp	r3, #48	; 0x30
 8002e3a:	d064      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x15a>
 8002e3c:	2b30      	cmp	r3, #48	; 0x30
 8002e3e:	d86b      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x16c>
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d060      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x15a>
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d867      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x16c>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d05c      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x15a>
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d05a      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x15a>
 8002e50:	e062      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6899      	ldr	r1, [r3, #8]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f000 fc08 	bl	8003676 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	609a      	str	r2, [r3, #8]
      break;
 8002e7e:	e04f      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6899      	ldr	r1, [r3, #8]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f000 fbf1 	bl	8003676 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ea2:	609a      	str	r2, [r3, #8]
      break;
 8002ea4:	e03c      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f000 fb65 	bl	8003582 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2150      	movs	r1, #80	; 0x50
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fbbe 	bl	8003640 <TIM_ITRx_SetConfig>
      break;
 8002ec4:	e02c      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6859      	ldr	r1, [r3, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f000 fb84 	bl	80035e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2160      	movs	r1, #96	; 0x60
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fbae 	bl	8003640 <TIM_ITRx_SetConfig>
      break;
 8002ee4:	e01c      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6859      	ldr	r1, [r3, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f000 fb45 	bl	8003582 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2140      	movs	r1, #64	; 0x40
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fb9e 	bl	8003640 <TIM_ITRx_SetConfig>
      break;
 8002f04:	e00c      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4610      	mov	r0, r2
 8002f12:	f000 fb95 	bl	8003640 <TIM_ITRx_SetConfig>
      break;
 8002f16:	e003      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1c:	e000      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e031      	b.n	8002fb6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002f62:	6839      	ldr	r1, [r7, #0]
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fa7b 	bl	8003460 <TIM_SlaveTimer_SetConfig>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e018      	b.n	8002fb6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f92:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fa2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a40      	ldr	r2, [pc, #256]	; (80030d4 <TIM_Base_SetConfig+0x114>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d013      	beq.n	8003000 <TIM_Base_SetConfig+0x40>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fde:	d00f      	beq.n	8003000 <TIM_Base_SetConfig+0x40>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a3d      	ldr	r2, [pc, #244]	; (80030d8 <TIM_Base_SetConfig+0x118>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <TIM_Base_SetConfig+0x40>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a3c      	ldr	r2, [pc, #240]	; (80030dc <TIM_Base_SetConfig+0x11c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <TIM_Base_SetConfig+0x40>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a3b      	ldr	r2, [pc, #236]	; (80030e0 <TIM_Base_SetConfig+0x120>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_Base_SetConfig+0x40>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3a      	ldr	r2, [pc, #232]	; (80030e4 <TIM_Base_SetConfig+0x124>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d108      	bne.n	8003012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a2f      	ldr	r2, [pc, #188]	; (80030d4 <TIM_Base_SetConfig+0x114>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d02b      	beq.n	8003072 <TIM_Base_SetConfig+0xb2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003020:	d027      	beq.n	8003072 <TIM_Base_SetConfig+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a2c      	ldr	r2, [pc, #176]	; (80030d8 <TIM_Base_SetConfig+0x118>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d023      	beq.n	8003072 <TIM_Base_SetConfig+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a2b      	ldr	r2, [pc, #172]	; (80030dc <TIM_Base_SetConfig+0x11c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d01f      	beq.n	8003072 <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a2a      	ldr	r2, [pc, #168]	; (80030e0 <TIM_Base_SetConfig+0x120>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01b      	beq.n	8003072 <TIM_Base_SetConfig+0xb2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <TIM_Base_SetConfig+0x124>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d017      	beq.n	8003072 <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a28      	ldr	r2, [pc, #160]	; (80030e8 <TIM_Base_SetConfig+0x128>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a27      	ldr	r2, [pc, #156]	; (80030ec <TIM_Base_SetConfig+0x12c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00f      	beq.n	8003072 <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <TIM_Base_SetConfig+0x130>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00b      	beq.n	8003072 <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a25      	ldr	r2, [pc, #148]	; (80030f4 <TIM_Base_SetConfig+0x134>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d007      	beq.n	8003072 <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a24      	ldr	r2, [pc, #144]	; (80030f8 <TIM_Base_SetConfig+0x138>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d003      	beq.n	8003072 <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a23      	ldr	r2, [pc, #140]	; (80030fc <TIM_Base_SetConfig+0x13c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d108      	bne.n	8003084 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <TIM_Base_SetConfig+0x114>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d003      	beq.n	80030b8 <TIM_Base_SetConfig+0xf8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a0c      	ldr	r2, [pc, #48]	; (80030e4 <TIM_Base_SetConfig+0x124>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d103      	bne.n	80030c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	615a      	str	r2, [r3, #20]
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800
 80030e0:	40000c00 	.word	0x40000c00
 80030e4:	40010400 	.word	0x40010400
 80030e8:	40014000 	.word	0x40014000
 80030ec:	40014400 	.word	0x40014400
 80030f0:	40014800 	.word	0x40014800
 80030f4:	40001800 	.word	0x40001800
 80030f8:	40001c00 	.word	0x40001c00
 80030fc:	40002000 	.word	0x40002000

08003100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f023 0201 	bic.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f023 0302 	bic.w	r3, r3, #2
 8003148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a20      	ldr	r2, [pc, #128]	; (80031d8 <TIM_OC1_SetConfig+0xd8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_OC1_SetConfig+0x64>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a1f      	ldr	r2, [pc, #124]	; (80031dc <TIM_OC1_SetConfig+0xdc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d10c      	bne.n	800317e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0308 	bic.w	r3, r3, #8
 800316a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <TIM_OC1_SetConfig+0xd8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_OC1_SetConfig+0x8e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a14      	ldr	r2, [pc, #80]	; (80031dc <TIM_OC1_SetConfig+0xdc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d111      	bne.n	80031b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800319c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	621a      	str	r2, [r3, #32]
}
 80031cc:	bf00      	nop
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	40010000 	.word	0x40010000
 80031dc:	40010400 	.word	0x40010400

080031e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f023 0210 	bic.w	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0320 	bic.w	r3, r3, #32
 800322a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <TIM_OC2_SetConfig+0xe4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_OC2_SetConfig+0x68>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a21      	ldr	r2, [pc, #132]	; (80032c8 <TIM_OC2_SetConfig+0xe8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d10d      	bne.n	8003264 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003262:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <TIM_OC2_SetConfig+0xe4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <TIM_OC2_SetConfig+0x94>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a16      	ldr	r2, [pc, #88]	; (80032c8 <TIM_OC2_SetConfig+0xe8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d113      	bne.n	800329c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800327a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	621a      	str	r2, [r3, #32]
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40010000 	.word	0x40010000
 80032c8:	40010400 	.word	0x40010400

080032cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0303 	bic.w	r3, r3, #3
 8003302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a21      	ldr	r2, [pc, #132]	; (80033ac <TIM_OC3_SetConfig+0xe0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d003      	beq.n	8003332 <TIM_OC3_SetConfig+0x66>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a20      	ldr	r2, [pc, #128]	; (80033b0 <TIM_OC3_SetConfig+0xe4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10d      	bne.n	800334e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800334c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a16      	ldr	r2, [pc, #88]	; (80033ac <TIM_OC3_SetConfig+0xe0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_OC3_SetConfig+0x92>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <TIM_OC3_SetConfig+0xe4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d113      	bne.n	8003386 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800336c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	621a      	str	r2, [r3, #32]
}
 80033a0:	bf00      	nop
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	40010000 	.word	0x40010000
 80033b0:	40010400 	.word	0x40010400

080033b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	031b      	lsls	r3, r3, #12
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <TIM_OC4_SetConfig+0xa4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d003      	beq.n	800341c <TIM_OC4_SetConfig+0x68>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a11      	ldr	r2, [pc, #68]	; (800345c <TIM_OC4_SetConfig+0xa8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d109      	bne.n	8003430 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003422:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	019b      	lsls	r3, r3, #6
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40010000 	.word	0x40010000
 800345c:	40010400 	.word	0x40010400

08003460 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f023 0307 	bic.w	r3, r3, #7
 800348e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b70      	cmp	r3, #112	; 0x70
 80034a8:	d01a      	beq.n	80034e0 <TIM_SlaveTimer_SetConfig+0x80>
 80034aa:	2b70      	cmp	r3, #112	; 0x70
 80034ac:	d860      	bhi.n	8003570 <TIM_SlaveTimer_SetConfig+0x110>
 80034ae:	2b60      	cmp	r3, #96	; 0x60
 80034b0:	d054      	beq.n	800355c <TIM_SlaveTimer_SetConfig+0xfc>
 80034b2:	2b60      	cmp	r3, #96	; 0x60
 80034b4:	d85c      	bhi.n	8003570 <TIM_SlaveTimer_SetConfig+0x110>
 80034b6:	2b50      	cmp	r3, #80	; 0x50
 80034b8:	d046      	beq.n	8003548 <TIM_SlaveTimer_SetConfig+0xe8>
 80034ba:	2b50      	cmp	r3, #80	; 0x50
 80034bc:	d858      	bhi.n	8003570 <TIM_SlaveTimer_SetConfig+0x110>
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d019      	beq.n	80034f6 <TIM_SlaveTimer_SetConfig+0x96>
 80034c2:	2b40      	cmp	r3, #64	; 0x40
 80034c4:	d854      	bhi.n	8003570 <TIM_SlaveTimer_SetConfig+0x110>
 80034c6:	2b30      	cmp	r3, #48	; 0x30
 80034c8:	d055      	beq.n	8003576 <TIM_SlaveTimer_SetConfig+0x116>
 80034ca:	2b30      	cmp	r3, #48	; 0x30
 80034cc:	d850      	bhi.n	8003570 <TIM_SlaveTimer_SetConfig+0x110>
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d051      	beq.n	8003576 <TIM_SlaveTimer_SetConfig+0x116>
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d84c      	bhi.n	8003570 <TIM_SlaveTimer_SetConfig+0x110>
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d04d      	beq.n	8003576 <TIM_SlaveTimer_SetConfig+0x116>
 80034da:	2b10      	cmp	r3, #16
 80034dc:	d04b      	beq.n	8003576 <TIM_SlaveTimer_SetConfig+0x116>
 80034de:	e047      	b.n	8003570 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68d9      	ldr	r1, [r3, #12]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f000 f8c1 	bl	8003676 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80034f4:	e040      	b.n	8003578 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d101      	bne.n	8003502 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e03b      	b.n	800357a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6a1a      	ldr	r2, [r3, #32]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003528:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	4313      	orrs	r3, r2
 8003534:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	621a      	str	r2, [r3, #32]
      break;
 8003546:	e017      	b.n	8003578 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6899      	ldr	r1, [r3, #8]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	461a      	mov	r2, r3
 8003556:	f000 f814 	bl	8003582 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800355a:	e00d      	b.n	8003578 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6899      	ldr	r1, [r3, #8]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	461a      	mov	r2, r3
 800356a:	f000 f839 	bl	80035e0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800356e:	e003      	b.n	8003578 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	75fb      	strb	r3, [r7, #23]
      break;
 8003574:	e000      	b.n	8003578 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003576:	bf00      	nop
  }

  return status;
 8003578:	7dfb      	ldrb	r3, [r7, #23]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003582:	b480      	push	{r7}
 8003584:	b087      	sub	sp, #28
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f023 0201 	bic.w	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 030a 	bic.w	r3, r3, #10
 80035be:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	621a      	str	r2, [r3, #32]
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f023 0210 	bic.w	r2, r3, #16
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800360a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	031b      	lsls	r3, r3, #12
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800361c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	621a      	str	r2, [r3, #32]
}
 8003634:	bf00      	nop
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	f043 0307 	orr.w	r3, r3, #7
 8003662:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	609a      	str	r2, [r3, #8]
}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003676:	b480      	push	{r7}
 8003678:	b087      	sub	sp, #28
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003690:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	021a      	lsls	r2, r3, #8
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	431a      	orrs	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4313      	orrs	r3, r2
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	609a      	str	r2, [r3, #8]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b087      	sub	sp, #28
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2201      	movs	r2, #1
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a1a      	ldr	r2, [r3, #32]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	401a      	ands	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1a      	ldr	r2, [r3, #32]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	431a      	orrs	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	621a      	str	r2, [r3, #32]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003714:	2302      	movs	r3, #2
 8003716:	e05a      	b.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a21      	ldr	r2, [pc, #132]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d022      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d01d      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d018      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1a      	ldr	r2, [pc, #104]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00e      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a18      	ldr	r2, [pc, #96]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d009      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a17      	ldr	r2, [pc, #92]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d10c      	bne.n	80037bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40010000 	.word	0x40010000
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40000c00 	.word	0x40000c00
 80037ec:	40010400 	.word	0x40010400
 80037f0:	40014000 	.word	0x40014000
 80037f4:	40001800 	.word	0x40001800

080037f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e03f      	b.n	800388a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd fdaa 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	; 0x24
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800383a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f829 	bl	8003894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003898:	b0c0      	sub	sp, #256	; 0x100
 800389a:	af00      	add	r7, sp, #0
 800389c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b0:	68d9      	ldr	r1, [r3, #12]
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	ea40 0301 	orr.w	r3, r0, r1
 80038bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038ec:	f021 010c 	bic.w	r1, r1, #12
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038fa:	430b      	orrs	r3, r1
 80038fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390e:	6999      	ldr	r1, [r3, #24]
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	ea40 0301 	orr.w	r3, r0, r1
 800391a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4b8f      	ldr	r3, [pc, #572]	; (8003b60 <UART_SetConfig+0x2cc>)
 8003924:	429a      	cmp	r2, r3
 8003926:	d005      	beq.n	8003934 <UART_SetConfig+0xa0>
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4b8d      	ldr	r3, [pc, #564]	; (8003b64 <UART_SetConfig+0x2d0>)
 8003930:	429a      	cmp	r2, r3
 8003932:	d104      	bne.n	800393e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003934:	f7fe fa06 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 8003938:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800393c:	e003      	b.n	8003946 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800393e:	f7fe f9ed 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 8003942:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003950:	f040 810c 	bne.w	8003b6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003958:	2200      	movs	r2, #0
 800395a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800395e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003962:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003966:	4622      	mov	r2, r4
 8003968:	462b      	mov	r3, r5
 800396a:	1891      	adds	r1, r2, r2
 800396c:	65b9      	str	r1, [r7, #88]	; 0x58
 800396e:	415b      	adcs	r3, r3
 8003970:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003972:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003976:	4621      	mov	r1, r4
 8003978:	eb12 0801 	adds.w	r8, r2, r1
 800397c:	4629      	mov	r1, r5
 800397e:	eb43 0901 	adc.w	r9, r3, r1
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800398e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003996:	4690      	mov	r8, r2
 8003998:	4699      	mov	r9, r3
 800399a:	4623      	mov	r3, r4
 800399c:	eb18 0303 	adds.w	r3, r8, r3
 80039a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039a4:	462b      	mov	r3, r5
 80039a6:	eb49 0303 	adc.w	r3, r9, r3
 80039aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039c2:	460b      	mov	r3, r1
 80039c4:	18db      	adds	r3, r3, r3
 80039c6:	653b      	str	r3, [r7, #80]	; 0x50
 80039c8:	4613      	mov	r3, r2
 80039ca:	eb42 0303 	adc.w	r3, r2, r3
 80039ce:	657b      	str	r3, [r7, #84]	; 0x54
 80039d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039d8:	f7fc fc1a 	bl	8000210 <__aeabi_uldivmod>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4b61      	ldr	r3, [pc, #388]	; (8003b68 <UART_SetConfig+0x2d4>)
 80039e2:	fba3 2302 	umull	r2, r3, r3, r2
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	011c      	lsls	r4, r3, #4
 80039ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039fc:	4642      	mov	r2, r8
 80039fe:	464b      	mov	r3, r9
 8003a00:	1891      	adds	r1, r2, r2
 8003a02:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a04:	415b      	adcs	r3, r3
 8003a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a12:	4649      	mov	r1, r9
 8003a14:	eb43 0b01 	adc.w	fp, r3, r1
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a2c:	4692      	mov	sl, r2
 8003a2e:	469b      	mov	fp, r3
 8003a30:	4643      	mov	r3, r8
 8003a32:	eb1a 0303 	adds.w	r3, sl, r3
 8003a36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a3a:	464b      	mov	r3, r9
 8003a3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	18db      	adds	r3, r3, r3
 8003a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a5e:	4613      	mov	r3, r2
 8003a60:	eb42 0303 	adc.w	r3, r2, r3
 8003a64:	647b      	str	r3, [r7, #68]	; 0x44
 8003a66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a6e:	f7fc fbcf 	bl	8000210 <__aeabi_uldivmod>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <UART_SetConfig+0x2d4>)
 8003a7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	2264      	movs	r2, #100	; 0x64
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	1acb      	subs	r3, r1, r3
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a8e:	4b36      	ldr	r3, [pc, #216]	; (8003b68 <UART_SetConfig+0x2d4>)
 8003a90:	fba3 2302 	umull	r2, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a9c:	441c      	add	r4, r3
 8003a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aa8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003aac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	1891      	adds	r1, r2, r2
 8003ab6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ab8:	415b      	adcs	r3, r3
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003abc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ac0:	4641      	mov	r1, r8
 8003ac2:	1851      	adds	r1, r2, r1
 8003ac4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	414b      	adcs	r3, r1
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ad8:	4659      	mov	r1, fp
 8003ada:	00cb      	lsls	r3, r1, #3
 8003adc:	4651      	mov	r1, sl
 8003ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ae2:	4651      	mov	r1, sl
 8003ae4:	00ca      	lsls	r2, r1, #3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	4642      	mov	r2, r8
 8003aee:	189b      	adds	r3, r3, r2
 8003af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003af4:	464b      	mov	r3, r9
 8003af6:	460a      	mov	r2, r1
 8003af8:	eb42 0303 	adc.w	r3, r2, r3
 8003afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b14:	460b      	mov	r3, r1
 8003b16:	18db      	adds	r3, r3, r3
 8003b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	eb42 0303 	adc.w	r3, r2, r3
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b2a:	f7fc fb71 	bl	8000210 <__aeabi_uldivmod>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <UART_SetConfig+0x2d4>)
 8003b34:	fba3 1302 	umull	r1, r3, r3, r2
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	2164      	movs	r1, #100	; 0x64
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	3332      	adds	r3, #50	; 0x32
 8003b46:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <UART_SetConfig+0x2d4>)
 8003b48:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	f003 0207 	and.w	r2, r3, #7
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4422      	add	r2, r4
 8003b5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b5c:	e105      	b.n	8003d6a <UART_SetConfig+0x4d6>
 8003b5e:	bf00      	nop
 8003b60:	40011000 	.word	0x40011000
 8003b64:	40011400 	.word	0x40011400
 8003b68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b7e:	4642      	mov	r2, r8
 8003b80:	464b      	mov	r3, r9
 8003b82:	1891      	adds	r1, r2, r2
 8003b84:	6239      	str	r1, [r7, #32]
 8003b86:	415b      	adcs	r3, r3
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b8e:	4641      	mov	r1, r8
 8003b90:	1854      	adds	r4, r2, r1
 8003b92:	4649      	mov	r1, r9
 8003b94:	eb43 0501 	adc.w	r5, r3, r1
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	00eb      	lsls	r3, r5, #3
 8003ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba6:	00e2      	lsls	r2, r4, #3
 8003ba8:	4614      	mov	r4, r2
 8003baa:	461d      	mov	r5, r3
 8003bac:	4643      	mov	r3, r8
 8003bae:	18e3      	adds	r3, r4, r3
 8003bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bb4:	464b      	mov	r3, r9
 8003bb6:	eb45 0303 	adc.w	r3, r5, r3
 8003bba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bda:	4629      	mov	r1, r5
 8003bdc:	008b      	lsls	r3, r1, #2
 8003bde:	4621      	mov	r1, r4
 8003be0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003be4:	4621      	mov	r1, r4
 8003be6:	008a      	lsls	r2, r1, #2
 8003be8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bec:	f7fc fb10 	bl	8000210 <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4b60      	ldr	r3, [pc, #384]	; (8003d78 <UART_SetConfig+0x4e4>)
 8003bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	011c      	lsls	r4, r3, #4
 8003bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c10:	4642      	mov	r2, r8
 8003c12:	464b      	mov	r3, r9
 8003c14:	1891      	adds	r1, r2, r2
 8003c16:	61b9      	str	r1, [r7, #24]
 8003c18:	415b      	adcs	r3, r3
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c20:	4641      	mov	r1, r8
 8003c22:	1851      	adds	r1, r2, r1
 8003c24:	6139      	str	r1, [r7, #16]
 8003c26:	4649      	mov	r1, r9
 8003c28:	414b      	adcs	r3, r1
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c38:	4659      	mov	r1, fp
 8003c3a:	00cb      	lsls	r3, r1, #3
 8003c3c:	4651      	mov	r1, sl
 8003c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c42:	4651      	mov	r1, sl
 8003c44:	00ca      	lsls	r2, r1, #3
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c54:	464b      	mov	r3, r9
 8003c56:	460a      	mov	r2, r1
 8003c58:	eb42 0303 	adc.w	r3, r2, r3
 8003c5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c78:	4649      	mov	r1, r9
 8003c7a:	008b      	lsls	r3, r1, #2
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c82:	4641      	mov	r1, r8
 8003c84:	008a      	lsls	r2, r1, #2
 8003c86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c8a:	f7fc fac1 	bl	8000210 <__aeabi_uldivmod>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4b39      	ldr	r3, [pc, #228]	; (8003d78 <UART_SetConfig+0x4e4>)
 8003c94:	fba3 1302 	umull	r1, r3, r3, r2
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	2164      	movs	r1, #100	; 0x64
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	3332      	adds	r3, #50	; 0x32
 8003ca6:	4a34      	ldr	r2, [pc, #208]	; (8003d78 <UART_SetConfig+0x4e4>)
 8003ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb2:	441c      	add	r4, r3
 8003cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb8:	2200      	movs	r2, #0
 8003cba:	673b      	str	r3, [r7, #112]	; 0x70
 8003cbc:	677a      	str	r2, [r7, #116]	; 0x74
 8003cbe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cc2:	4642      	mov	r2, r8
 8003cc4:	464b      	mov	r3, r9
 8003cc6:	1891      	adds	r1, r2, r2
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	415b      	adcs	r3, r3
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cd2:	4641      	mov	r1, r8
 8003cd4:	1851      	adds	r1, r2, r1
 8003cd6:	6039      	str	r1, [r7, #0]
 8003cd8:	4649      	mov	r1, r9
 8003cda:	414b      	adcs	r3, r1
 8003cdc:	607b      	str	r3, [r7, #4]
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cea:	4659      	mov	r1, fp
 8003cec:	00cb      	lsls	r3, r1, #3
 8003cee:	4651      	mov	r1, sl
 8003cf0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf4:	4651      	mov	r1, sl
 8003cf6:	00ca      	lsls	r2, r1, #3
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4642      	mov	r2, r8
 8003d00:	189b      	adds	r3, r3, r2
 8003d02:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d04:	464b      	mov	r3, r9
 8003d06:	460a      	mov	r2, r1
 8003d08:	eb42 0303 	adc.w	r3, r2, r3
 8003d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	663b      	str	r3, [r7, #96]	; 0x60
 8003d18:	667a      	str	r2, [r7, #100]	; 0x64
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d26:	4649      	mov	r1, r9
 8003d28:	008b      	lsls	r3, r1, #2
 8003d2a:	4641      	mov	r1, r8
 8003d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d30:	4641      	mov	r1, r8
 8003d32:	008a      	lsls	r2, r1, #2
 8003d34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d38:	f7fc fa6a 	bl	8000210 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <UART_SetConfig+0x4e4>)
 8003d42:	fba3 1302 	umull	r1, r3, r3, r2
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	2164      	movs	r1, #100	; 0x64
 8003d4a:	fb01 f303 	mul.w	r3, r1, r3
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	3332      	adds	r3, #50	; 0x32
 8003d54:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <UART_SetConfig+0x4e4>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	f003 020f 	and.w	r2, r3, #15
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4422      	add	r2, r4
 8003d68:	609a      	str	r2, [r3, #8]
}
 8003d6a:	bf00      	nop
 8003d6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d70:	46bd      	mov	sp, r7
 8003d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d76:	bf00      	nop
 8003d78:	51eb851f 	.word	0x51eb851f

08003d7c <__NVIC_SetPriority>:
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	6039      	str	r1, [r7, #0]
 8003d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	db0a      	blt.n	8003da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	490c      	ldr	r1, [pc, #48]	; (8003dc8 <__NVIC_SetPriority+0x4c>)
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	0112      	lsls	r2, r2, #4
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	440b      	add	r3, r1
 8003da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003da4:	e00a      	b.n	8003dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	4908      	ldr	r1, [pc, #32]	; (8003dcc <__NVIC_SetPriority+0x50>)
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	3b04      	subs	r3, #4
 8003db4:	0112      	lsls	r2, r2, #4
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	440b      	add	r3, r1
 8003dba:	761a      	strb	r2, [r3, #24]
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000e100 	.word	0xe000e100
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	f06f 0004 	mvn.w	r0, #4
 8003dda:	f7ff ffcf 	bl	8003d7c <__NVIC_SetPriority>
#endif
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dea:	f3ef 8305 	mrs	r3, IPSR
 8003dee:	603b      	str	r3, [r7, #0]
  return(result);
 8003df0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003df6:	f06f 0305 	mvn.w	r3, #5
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	e00c      	b.n	8003e18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <osKernelInitialize+0x44>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d105      	bne.n	8003e12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e06:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <osKernelInitialize+0x44>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	607b      	str	r3, [r7, #4]
 8003e10:	e002      	b.n	8003e18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003e12:	f04f 33ff 	mov.w	r3, #4294967295
 8003e16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e18:	687b      	ldr	r3, [r7, #4]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	200003ec 	.word	0x200003ec

08003e2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e32:	f3ef 8305 	mrs	r3, IPSR
 8003e36:	603b      	str	r3, [r7, #0]
  return(result);
 8003e38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003e3e:	f06f 0305 	mvn.w	r3, #5
 8003e42:	607b      	str	r3, [r7, #4]
 8003e44:	e010      	b.n	8003e68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <osKernelStart+0x48>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d109      	bne.n	8003e62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e4e:	f7ff ffbf 	bl	8003dd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <osKernelStart+0x48>)
 8003e54:	2202      	movs	r2, #2
 8003e56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e58:	f001 f866 	bl	8004f28 <vTaskStartScheduler>
      stat = osOK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	e002      	b.n	8003e68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003e62:	f04f 33ff 	mov.w	r3, #4294967295
 8003e66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e68:	687b      	ldr	r3, [r7, #4]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	200003ec 	.word	0x200003ec

08003e78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08e      	sub	sp, #56	; 0x38
 8003e7c:	af04      	add	r7, sp, #16
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e88:	f3ef 8305 	mrs	r3, IPSR
 8003e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d17f      	bne.n	8003f94 <osThreadNew+0x11c>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d07c      	beq.n	8003f94 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8003e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e9e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ea0:	2318      	movs	r3, #24
 8003ea2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d045      	beq.n	8003f40 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <osThreadNew+0x4a>
        name = attr->name;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <osThreadNew+0x70>
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	2b38      	cmp	r3, #56	; 0x38
 8003eda:	d805      	bhi.n	8003ee8 <osThreadNew+0x70>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <osThreadNew+0x74>
        return (NULL);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e054      	b.n	8003f96 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00e      	beq.n	8003f22 <osThreadNew+0xaa>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b5b      	cmp	r3, #91	; 0x5b
 8003f0a:	d90a      	bls.n	8003f22 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d006      	beq.n	8003f22 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <osThreadNew+0xaa>
        mem = 1;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	61bb      	str	r3, [r7, #24]
 8003f20:	e010      	b.n	8003f44 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10c      	bne.n	8003f44 <osThreadNew+0xcc>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d108      	bne.n	8003f44 <osThreadNew+0xcc>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d104      	bne.n	8003f44 <osThreadNew+0xcc>
          mem = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	e001      	b.n	8003f44 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d110      	bne.n	8003f6c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f52:	9202      	str	r2, [sp, #8]
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6a3a      	ldr	r2, [r7, #32]
 8003f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fe0b 	bl	8004b7c <xTaskCreateStatic>
 8003f66:	4603      	mov	r3, r0
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	e013      	b.n	8003f94 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d110      	bne.n	8003f94 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	f107 0310 	add.w	r3, r7, #16
 8003f7a:	9301      	str	r3, [sp, #4]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fe56 	bl	8004c36 <xTaskCreate>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d001      	beq.n	8003f94 <osThreadNew+0x11c>
            hTask = NULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f94:	693b      	ldr	r3, [r7, #16]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3728      	adds	r7, #40	; 0x28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fa6:	f3ef 8305 	mrs	r3, IPSR
 8003faa:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <osDelay+0x1c>
    stat = osErrorISR;
 8003fb2:	f06f 0305 	mvn.w	r3, #5
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e007      	b.n	8003fca <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <osDelay+0x2c>
      vTaskDelay(ticks);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 ff7b 	bl	8004ec0 <vTaskDelay>
    }
  }

  return (stat);
 8003fca:	68fb      	ldr	r3, [r7, #12]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a07      	ldr	r2, [pc, #28]	; (8004000 <vApplicationGetIdleTaskMemory+0x2c>)
 8003fe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4a06      	ldr	r2, [pc, #24]	; (8004004 <vApplicationGetIdleTaskMemory+0x30>)
 8003fea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	200003f0 	.word	0x200003f0
 8004004:	2000044c 	.word	0x2000044c

08004008 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a07      	ldr	r2, [pc, #28]	; (8004034 <vApplicationGetTimerTaskMemory+0x2c>)
 8004018:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4a06      	ldr	r2, [pc, #24]	; (8004038 <vApplicationGetTimerTaskMemory+0x30>)
 800401e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	2000084c 	.word	0x2000084c
 8004038:	200008a8 	.word	0x200008a8

0800403c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f103 0208 	add.w	r2, r3, #8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f04f 32ff 	mov.w	r2, #4294967295
 8004054:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f103 0208 	add.w	r2, r3, #8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f103 0208 	add.w	r2, r3, #8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	601a      	str	r2, [r3, #0]
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040de:	b480      	push	{r7}
 80040e0:	b085      	sub	sp, #20
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d103      	bne.n	80040fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	e00c      	b.n	8004118 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3308      	adds	r3, #8
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e002      	b.n	800410c <vListInsert+0x2e>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	429a      	cmp	r2, r3
 8004116:	d2f6      	bcs.n	8004106 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	601a      	str	r2, [r3, #0]
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6892      	ldr	r2, [r2, #8]
 8004166:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6852      	ldr	r2, [r2, #4]
 8004170:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	d103      	bne.n	8004184 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	1e5a      	subs	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80041ca:	bf00      	nop
 80041cc:	e7fe      	b.n	80041cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80041ce:	f002 f851 	bl	8006274 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041da:	68f9      	ldr	r1, [r7, #12]
 80041dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041de:	fb01 f303 	mul.w	r3, r1, r3
 80041e2:	441a      	add	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	3b01      	subs	r3, #1
 8004200:	68f9      	ldr	r1, [r7, #12]
 8004202:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	441a      	add	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	22ff      	movs	r2, #255	; 0xff
 8004212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	22ff      	movs	r2, #255	; 0xff
 800421a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d114      	bne.n	800424e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01a      	beq.n	8004262 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3310      	adds	r3, #16
 8004230:	4618      	mov	r0, r3
 8004232:	f001 f903 	bl	800543c <xTaskRemoveFromEventList>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d012      	beq.n	8004262 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <xQueueGenericReset+0xcc>)
 800423e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	e009      	b.n	8004262 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3310      	adds	r3, #16
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fef2 	bl	800403c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3324      	adds	r3, #36	; 0x24
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff feed 	bl	800403c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004262:	f002 f837 	bl	80062d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004266:	2301      	movs	r3, #1
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08e      	sub	sp, #56	; 0x38
 8004278:	af02      	add	r7, sp, #8
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <xQueueGenericCreateStatic+0x52>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <xQueueGenericCreateStatic+0x56>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <xQueueGenericCreateStatic+0x58>
 80042ca:	2300      	movs	r3, #0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	623b      	str	r3, [r7, #32]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <xQueueGenericCreateStatic+0x7e>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <xQueueGenericCreateStatic+0x82>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <xQueueGenericCreateStatic+0x84>
 80042f6:	2300      	movs	r3, #0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	61fb      	str	r3, [r7, #28]
}
 800430e:	bf00      	nop
 8004310:	e7fe      	b.n	8004310 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004312:	2350      	movs	r3, #80	; 0x50
 8004314:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b50      	cmp	r3, #80	; 0x50
 800431a:	d00a      	beq.n	8004332 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	61bb      	str	r3, [r7, #24]
}
 800432e:	bf00      	nop
 8004330:	e7fe      	b.n	8004330 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004332:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00d      	beq.n	800435a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004346:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	4613      	mov	r3, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f805 	bl	8004364 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800435c:	4618      	mov	r0, r3
 800435e:	3730      	adds	r7, #48	; 0x30
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d103      	bne.n	8004380 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e002      	b.n	8004386 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004392:	2101      	movs	r1, #1
 8004394:	69b8      	ldr	r0, [r7, #24]
 8004396:	f7ff ff05 	bl	80041a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	78fa      	ldrb	r2, [r7, #3]
 800439e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08e      	sub	sp, #56	; 0x38
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043ba:	2300      	movs	r3, #0
 80043bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <xQueueGenericSend+0x32>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <xQueueGenericSend+0x40>
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <xQueueGenericSend+0x44>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <xQueueGenericSend+0x46>
 80043f0:	2300      	movs	r3, #0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <xQueueGenericSend+0x60>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d103      	bne.n	800441a <xQueueGenericSend+0x6e>
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <xQueueGenericSend+0x72>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <xQueueGenericSend+0x74>
 800441e:	2300      	movs	r3, #0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <xQueueGenericSend+0x8e>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	623b      	str	r3, [r7, #32]
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800443a:	f001 f9bd 	bl	80057b8 <xTaskGetSchedulerState>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <xQueueGenericSend+0x9e>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <xQueueGenericSend+0xa2>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <xQueueGenericSend+0xa4>
 800444e:	2300      	movs	r3, #0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <xQueueGenericSend+0xbe>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	61fb      	str	r3, [r7, #28]
}
 8004466:	bf00      	nop
 8004468:	e7fe      	b.n	8004468 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800446a:	f001 ff03 	bl	8006274 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <xQueueGenericSend+0xd4>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d129      	bne.n	80044d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004486:	f000 fa0b 	bl	80048a0 <prvCopyDataToQueue>
 800448a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	2b00      	cmp	r3, #0
 8004492:	d010      	beq.n	80044b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	3324      	adds	r3, #36	; 0x24
 8004498:	4618      	mov	r0, r3
 800449a:	f000 ffcf 	bl	800543c <xTaskRemoveFromEventList>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d013      	beq.n	80044cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044a4:	4b3f      	ldr	r3, [pc, #252]	; (80045a4 <xQueueGenericSend+0x1f8>)
 80044a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	e00a      	b.n	80044cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044bc:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <xQueueGenericSend+0x1f8>)
 80044be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044cc:	f001 ff02 	bl	80062d4 <vPortExitCritical>
				return pdPASS;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e063      	b.n	800459c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d103      	bne.n	80044e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044da:	f001 fefb 	bl	80062d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	e05c      	b.n	800459c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d106      	bne.n	80044f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044e8:	f107 0314 	add.w	r3, r7, #20
 80044ec:	4618      	mov	r0, r3
 80044ee:	f001 f809 	bl	8005504 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044f2:	2301      	movs	r3, #1
 80044f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044f6:	f001 feed 	bl	80062d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044fa:	f000 fd7b 	bl	8004ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044fe:	f001 feb9 	bl	8006274 <vPortEnterCritical>
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004508:	b25b      	sxtb	r3, r3
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	d103      	bne.n	8004518 <xQueueGenericSend+0x16c>
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800451e:	b25b      	sxtb	r3, r3
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d103      	bne.n	800452e <xQueueGenericSend+0x182>
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800452e:	f001 fed1 	bl	80062d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004532:	1d3a      	adds	r2, r7, #4
 8004534:	f107 0314 	add.w	r3, r7, #20
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fff8 	bl	8005530 <xTaskCheckForTimeOut>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d124      	bne.n	8004590 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004548:	f000 faa2 	bl	8004a90 <prvIsQueueFull>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d018      	beq.n	8004584 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	3310      	adds	r3, #16
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f000 ff1e 	bl	800539c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004562:	f000 fa2d 	bl	80049c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004566:	f000 fd53 	bl	8005010 <xTaskResumeAll>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	f47f af7c 	bne.w	800446a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <xQueueGenericSend+0x1f8>)
 8004574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	e772      	b.n	800446a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004586:	f000 fa1b 	bl	80049c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800458a:	f000 fd41 	bl	8005010 <xTaskResumeAll>
 800458e:	e76c      	b.n	800446a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004592:	f000 fa15 	bl	80049c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004596:	f000 fd3b 	bl	8005010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800459a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800459c:	4618      	mov	r0, r3
 800459e:	3738      	adds	r7, #56	; 0x38
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	e000ed04 	.word	0xe000ed04

080045a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b090      	sub	sp, #64	; 0x40
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80045ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <xQueueGenericSendFromISR+0x3c>
 80045dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <xQueueGenericSendFromISR+0x40>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <xQueueGenericSendFromISR+0x42>
 80045e8:	2300      	movs	r3, #0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d103      	bne.n	8004612 <xQueueGenericSendFromISR+0x6a>
 800460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <xQueueGenericSendFromISR+0x6e>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <xQueueGenericSendFromISR+0x70>
 8004616:	2300      	movs	r3, #0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	623b      	str	r3, [r7, #32]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004632:	f001 ff01 	bl	8006438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004636:	f3ef 8211 	mrs	r2, BASEPRI
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	61fa      	str	r2, [r7, #28]
 800464c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800464e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004650:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <xQueueGenericSendFromISR+0xbc>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d12f      	bne.n	80046c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800466a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800466e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800467a:	f000 f911 	bl	80048a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800467e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004686:	d112      	bne.n	80046ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	2b00      	cmp	r3, #0
 800468e:	d016      	beq.n	80046be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004692:	3324      	adds	r3, #36	; 0x24
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fed1 	bl	800543c <xTaskRemoveFromEventList>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00e      	beq.n	80046be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e007      	b.n	80046be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046b2:	3301      	adds	r3, #1
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	b25a      	sxtb	r2, r3
 80046b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80046be:	2301      	movs	r3, #1
 80046c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80046c2:	e001      	b.n	80046c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3740      	adds	r7, #64	; 0x40
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08c      	sub	sp, #48	; 0x30
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <xQueueReceive+0x30>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	623b      	str	r3, [r7, #32]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <xQueueReceive+0x3e>
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <xQueueReceive+0x42>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <xQueueReceive+0x44>
 8004722:	2300      	movs	r3, #0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <xQueueReceive+0x5e>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	61fb      	str	r3, [r7, #28]
}
 800473a:	bf00      	nop
 800473c:	e7fe      	b.n	800473c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800473e:	f001 f83b 	bl	80057b8 <xTaskGetSchedulerState>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <xQueueReceive+0x6e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <xQueueReceive+0x72>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <xQueueReceive+0x74>
 8004752:	2300      	movs	r3, #0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <xQueueReceive+0x8e>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	61bb      	str	r3, [r7, #24]
}
 800476a:	bf00      	nop
 800476c:	e7fe      	b.n	800476c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800476e:	f001 fd81 	bl	8006274 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01f      	beq.n	80047be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004782:	f000 f8f7 	bl	8004974 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	1e5a      	subs	r2, r3, #1
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00f      	beq.n	80047b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	3310      	adds	r3, #16
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fe4e 	bl	800543c <xTaskRemoveFromEventList>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047a6:	4b3d      	ldr	r3, [pc, #244]	; (800489c <xQueueReceive+0x1bc>)
 80047a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047b6:	f001 fd8d 	bl	80062d4 <vPortExitCritical>
				return pdPASS;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e069      	b.n	8004892 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047c4:	f001 fd86 	bl	80062d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e062      	b.n	8004892 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047d2:	f107 0310 	add.w	r3, r7, #16
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fe94 	bl	8005504 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047dc:	2301      	movs	r3, #1
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047e0:	f001 fd78 	bl	80062d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047e4:	f000 fc06 	bl	8004ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047e8:	f001 fd44 	bl	8006274 <vPortEnterCritical>
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047f2:	b25b      	sxtb	r3, r3
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d103      	bne.n	8004802 <xQueueReceive+0x122>
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004808:	b25b      	sxtb	r3, r3
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d103      	bne.n	8004818 <xQueueReceive+0x138>
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004818:	f001 fd5c 	bl	80062d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800481c:	1d3a      	adds	r2, r7, #4
 800481e:	f107 0310 	add.w	r3, r7, #16
 8004822:	4611      	mov	r1, r2
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fe83 	bl	8005530 <xTaskCheckForTimeOut>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d123      	bne.n	8004878 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004832:	f000 f917 	bl	8004a64 <prvIsQueueEmpty>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d017      	beq.n	800486c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	3324      	adds	r3, #36	; 0x24
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	4611      	mov	r1, r2
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fda9 	bl	800539c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800484a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800484c:	f000 f8b8 	bl	80049c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004850:	f000 fbde 	bl	8005010 <xTaskResumeAll>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d189      	bne.n	800476e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800485a:	4b10      	ldr	r3, [pc, #64]	; (800489c <xQueueReceive+0x1bc>)
 800485c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	e780      	b.n	800476e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800486c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800486e:	f000 f8a7 	bl	80049c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004872:	f000 fbcd 	bl	8005010 <xTaskResumeAll>
 8004876:	e77a      	b.n	800476e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800487a:	f000 f8a1 	bl	80049c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800487e:	f000 fbc7 	bl	8005010 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004884:	f000 f8ee 	bl	8004a64 <prvIsQueueEmpty>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	f43f af6f 	beq.w	800476e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004890:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004892:	4618      	mov	r0, r3
 8004894:	3730      	adds	r7, #48	; 0x30
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	e000ed04 	.word	0xe000ed04

080048a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10d      	bne.n	80048da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d14d      	bne.n	8004962 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 ff92 	bl	80057f4 <xTaskPriorityDisinherit>
 80048d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	609a      	str	r2, [r3, #8]
 80048d8:	e043      	b.n	8004962 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d119      	bne.n	8004914 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6858      	ldr	r0, [r3, #4]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	461a      	mov	r2, r3
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	f001 fff2 	bl	80068d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	441a      	add	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	429a      	cmp	r2, r3
 8004908:	d32b      	bcc.n	8004962 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	e026      	b.n	8004962 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	68d8      	ldr	r0, [r3, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	461a      	mov	r2, r3
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	f001 ffd8 	bl	80068d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	425b      	negs	r3, r3
 800492e:	441a      	add	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d207      	bcs.n	8004950 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	425b      	negs	r3, r3
 800494a:	441a      	add	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d105      	bne.n	8004962 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	3b01      	subs	r3, #1
 8004960:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800496a:	697b      	ldr	r3, [r7, #20]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d018      	beq.n	80049b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	441a      	add	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	429a      	cmp	r2, r3
 800499e:	d303      	bcc.n	80049a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68d9      	ldr	r1, [r3, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	461a      	mov	r2, r3
 80049b2:	6838      	ldr	r0, [r7, #0]
 80049b4:	f001 ff8e 	bl	80068d4 <memcpy>
	}
}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049c8:	f001 fc54 	bl	8006274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049d4:	e011      	b.n	80049fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d012      	beq.n	8004a04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3324      	adds	r3, #36	; 0x24
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fd2a 	bl	800543c <xTaskRemoveFromEventList>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049ee:	f000 fe01 	bl	80055f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	dce9      	bgt.n	80049d6 <prvUnlockQueue+0x16>
 8004a02:	e000      	b.n	8004a06 <prvUnlockQueue+0x46>
					break;
 8004a04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	22ff      	movs	r2, #255	; 0xff
 8004a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a0e:	f001 fc61 	bl	80062d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a12:	f001 fc2f 	bl	8006274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a1e:	e011      	b.n	8004a44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d012      	beq.n	8004a4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fd05 	bl	800543c <xTaskRemoveFromEventList>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a38:	f000 fddc 	bl	80055f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a3c:	7bbb      	ldrb	r3, [r7, #14]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	dce9      	bgt.n	8004a20 <prvUnlockQueue+0x60>
 8004a4c:	e000      	b.n	8004a50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	22ff      	movs	r2, #255	; 0xff
 8004a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a58:	f001 fc3c 	bl	80062d4 <vPortExitCritical>
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a6c:	f001 fc02 	bl	8006274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	e001      	b.n	8004a82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a82:	f001 fc27 	bl	80062d4 <vPortExitCritical>

	return xReturn;
 8004a86:	68fb      	ldr	r3, [r7, #12]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a98:	f001 fbec 	bl	8006274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d102      	bne.n	8004aae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e001      	b.n	8004ab2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ab2:	f001 fc0f 	bl	80062d4 <vPortExitCritical>

	return xReturn;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e014      	b.n	8004afa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ad0:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <vQueueAddToRegistry+0x50>)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10b      	bne.n	8004af4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004adc:	490c      	ldr	r1, [pc, #48]	; (8004b10 <vQueueAddToRegistry+0x50>)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <vQueueAddToRegistry+0x50>)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	4413      	add	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004af2:	e006      	b.n	8004b02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3301      	adds	r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b07      	cmp	r3, #7
 8004afe:	d9e7      	bls.n	8004ad0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	200010a8 	.word	0x200010a8

08004b14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b24:	f001 fba6 	bl	8006274 <vPortEnterCritical>
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b2e:	b25b      	sxtb	r3, r3
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b34:	d103      	bne.n	8004b3e <vQueueWaitForMessageRestricted+0x2a>
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b44:	b25b      	sxtb	r3, r3
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4a:	d103      	bne.n	8004b54 <vQueueWaitForMessageRestricted+0x40>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b54:	f001 fbbe 	bl	80062d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	3324      	adds	r3, #36	; 0x24
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fc3b 	bl	80053e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b6e:	6978      	ldr	r0, [r7, #20]
 8004b70:	f7ff ff26 	bl	80049c0 <prvUnlockQueue>
	}
 8004b74:	bf00      	nop
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08e      	sub	sp, #56	; 0x38
 8004b80:	af04      	add	r7, sp, #16
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	623b      	str	r3, [r7, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	61fb      	str	r3, [r7, #28]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bc2:	235c      	movs	r3, #92	; 0x5c
 8004bc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b5c      	cmp	r3, #92	; 0x5c
 8004bca:	d00a      	beq.n	8004be2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	61bb      	str	r3, [r7, #24]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004be2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01e      	beq.n	8004c28 <xTaskCreateStatic+0xac>
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01b      	beq.n	8004c28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c02:	2300      	movs	r3, #0
 8004c04:	9303      	str	r3, [sp, #12]
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	9302      	str	r3, [sp, #8]
 8004c0a:	f107 0314 	add.w	r3, r7, #20
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f850 	bl	8004cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c22:	f000 f8dd 	bl	8004de0 <prvAddNewTaskToReadyList>
 8004c26:	e001      	b.n	8004c2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c2c:	697b      	ldr	r3, [r7, #20]
	}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3728      	adds	r7, #40	; 0x28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b08c      	sub	sp, #48	; 0x30
 8004c3a:	af04      	add	r7, sp, #16
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	4613      	mov	r3, r2
 8004c44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 fc34 	bl	80064b8 <pvPortMalloc>
 8004c50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00e      	beq.n	8004c76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c58:	205c      	movs	r0, #92	; 0x5c
 8004c5a:	f001 fc2d 	bl	80064b8 <pvPortMalloc>
 8004c5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c6c:	e005      	b.n	8004c7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c6e:	6978      	ldr	r0, [r7, #20]
 8004c70:	f001 fcee 	bl	8006650 <vPortFree>
 8004c74:	e001      	b.n	8004c7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d017      	beq.n	8004cb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c88:	88fa      	ldrh	r2, [r7, #6]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9303      	str	r3, [sp, #12]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	9302      	str	r3, [sp, #8]
 8004c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f80e 	bl	8004cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ca4:	69f8      	ldr	r0, [r7, #28]
 8004ca6:	f000 f89b 	bl	8004de0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004caa:	2301      	movs	r3, #1
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	e002      	b.n	8004cb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
	}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	21a5      	movs	r1, #165	; 0xa5
 8004cda:	f001 fe09 	bl	80068f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	f023 0307 	bic.w	r3, r3, #7
 8004cf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	617b      	str	r3, [r7, #20]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01f      	beq.n	8004d5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	e012      	b.n	8004d4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	7819      	ldrb	r1, [r3, #0]
 8004d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	3334      	adds	r3, #52	; 0x34
 8004d34:	460a      	mov	r2, r1
 8004d36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d006      	beq.n	8004d52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	3301      	adds	r3, #1
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	2b0f      	cmp	r3, #15
 8004d4e:	d9e9      	bls.n	8004d24 <prvInitialiseNewTask+0x64>
 8004d50:	e000      	b.n	8004d54 <prvInitialiseNewTask+0x94>
			{
				break;
 8004d52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d5c:	e003      	b.n	8004d66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	2b37      	cmp	r3, #55	; 0x37
 8004d6a:	d901      	bls.n	8004d70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d6c:	2337      	movs	r3, #55	; 0x37
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	2200      	movs	r2, #0
 8004d80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	3304      	adds	r3, #4
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff f978 	bl	800407c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	3318      	adds	r3, #24
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff f973 	bl	800407c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	2200      	movs	r2, #0
 8004db0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	68f9      	ldr	r1, [r7, #12]
 8004dbe:	69b8      	ldr	r0, [r7, #24]
 8004dc0:	f001 f928 	bl	8006014 <pxPortInitialiseStack>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dd6:	bf00      	nop
 8004dd8:	3720      	adds	r7, #32
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004de8:	f001 fa44 	bl	8006274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dec:	4b2d      	ldr	r3, [pc, #180]	; (8004ea4 <prvAddNewTaskToReadyList+0xc4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3301      	adds	r3, #1
 8004df2:	4a2c      	ldr	r2, [pc, #176]	; (8004ea4 <prvAddNewTaskToReadyList+0xc4>)
 8004df4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004df6:	4b2c      	ldr	r3, [pc, #176]	; (8004ea8 <prvAddNewTaskToReadyList+0xc8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dfe:	4a2a      	ldr	r2, [pc, #168]	; (8004ea8 <prvAddNewTaskToReadyList+0xc8>)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e04:	4b27      	ldr	r3, [pc, #156]	; (8004ea4 <prvAddNewTaskToReadyList+0xc4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d110      	bne.n	8004e2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e0c:	f000 fc16 	bl	800563c <prvInitialiseTaskLists>
 8004e10:	e00d      	b.n	8004e2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e12:	4b26      	ldr	r3, [pc, #152]	; (8004eac <prvAddNewTaskToReadyList+0xcc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e1a:	4b23      	ldr	r3, [pc, #140]	; (8004ea8 <prvAddNewTaskToReadyList+0xc8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d802      	bhi.n	8004e2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e28:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <prvAddNewTaskToReadyList+0xc8>)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e2e:	4b20      	ldr	r3, [pc, #128]	; (8004eb0 <prvAddNewTaskToReadyList+0xd0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3301      	adds	r3, #1
 8004e34:	4a1e      	ldr	r2, [pc, #120]	; (8004eb0 <prvAddNewTaskToReadyList+0xd0>)
 8004e36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e38:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <prvAddNewTaskToReadyList+0xd0>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e44:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <prvAddNewTaskToReadyList+0xd4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d903      	bls.n	8004e54 <prvAddNewTaskToReadyList+0x74>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	4a18      	ldr	r2, [pc, #96]	; (8004eb4 <prvAddNewTaskToReadyList+0xd4>)
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <prvAddNewTaskToReadyList+0xd8>)
 8004e62:	441a      	add	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	f7ff f913 	bl	8004096 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e70:	f001 fa30 	bl	80062d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e74:	4b0d      	ldr	r3, [pc, #52]	; (8004eac <prvAddNewTaskToReadyList+0xcc>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00e      	beq.n	8004e9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <prvAddNewTaskToReadyList+0xc8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d207      	bcs.n	8004e9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e8a:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <prvAddNewTaskToReadyList+0xdc>)
 8004e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200015bc 	.word	0x200015bc
 8004ea8:	200010e8 	.word	0x200010e8
 8004eac:	200015c8 	.word	0x200015c8
 8004eb0:	200015d8 	.word	0x200015d8
 8004eb4:	200015c4 	.word	0x200015c4
 8004eb8:	200010ec 	.word	0x200010ec
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d017      	beq.n	8004f02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ed2:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <vTaskDelay+0x60>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <vTaskDelay+0x30>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	60bb      	str	r3, [r7, #8]
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ef0:	f000 f880 	bl	8004ff4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fcea 	bl	80058d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004efc:	f000 f888 	bl	8005010 <xTaskResumeAll>
 8004f00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d107      	bne.n	8004f18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f08:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <vTaskDelay+0x64>)
 8004f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	200015e4 	.word	0x200015e4
 8004f24:	e000ed04 	.word	0xe000ed04

08004f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	; 0x28
 8004f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f36:	463a      	mov	r2, r7
 8004f38:	1d39      	adds	r1, r7, #4
 8004f3a:	f107 0308 	add.w	r3, r7, #8
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff f848 	bl	8003fd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f44:	6839      	ldr	r1, [r7, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	9202      	str	r2, [sp, #8]
 8004f4c:	9301      	str	r3, [sp, #4]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	2300      	movs	r3, #0
 8004f54:	460a      	mov	r2, r1
 8004f56:	4921      	ldr	r1, [pc, #132]	; (8004fdc <vTaskStartScheduler+0xb4>)
 8004f58:	4821      	ldr	r0, [pc, #132]	; (8004fe0 <vTaskStartScheduler+0xb8>)
 8004f5a:	f7ff fe0f 	bl	8004b7c <xTaskCreateStatic>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4a20      	ldr	r2, [pc, #128]	; (8004fe4 <vTaskStartScheduler+0xbc>)
 8004f62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f64:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <vTaskStartScheduler+0xbc>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e001      	b.n	8004f76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d102      	bne.n	8004f82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f7c:	f000 fcfc 	bl	8005978 <xTimerCreateTimerTask>
 8004f80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d116      	bne.n	8004fb6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	613b      	str	r3, [r7, #16]
}
 8004f9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f9c:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <vTaskStartScheduler+0xc0>)
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fa4:	4b11      	ldr	r3, [pc, #68]	; (8004fec <vTaskStartScheduler+0xc4>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <vTaskStartScheduler+0xc8>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fb0:	f001 f8be 	bl	8006130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fb4:	e00e      	b.n	8004fd4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d10a      	bne.n	8004fd4 <vTaskStartScheduler+0xac>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	60fb      	str	r3, [r7, #12]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <vTaskStartScheduler+0xaa>
}
 8004fd4:	bf00      	nop
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	08006938 	.word	0x08006938
 8004fe0:	0800560d 	.word	0x0800560d
 8004fe4:	200015e0 	.word	0x200015e0
 8004fe8:	200015dc 	.word	0x200015dc
 8004fec:	200015c8 	.word	0x200015c8
 8004ff0:	200015c0 	.word	0x200015c0

08004ff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ff8:	4b04      	ldr	r3, [pc, #16]	; (800500c <vTaskSuspendAll+0x18>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	4a03      	ldr	r2, [pc, #12]	; (800500c <vTaskSuspendAll+0x18>)
 8005000:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005002:	bf00      	nop
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	200015e4 	.word	0x200015e4

08005010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800501e:	4b42      	ldr	r3, [pc, #264]	; (8005128 <xTaskResumeAll+0x118>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <xTaskResumeAll+0x2c>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	603b      	str	r3, [r7, #0]
}
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800503c:	f001 f91a 	bl	8006274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005040:	4b39      	ldr	r3, [pc, #228]	; (8005128 <xTaskResumeAll+0x118>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3b01      	subs	r3, #1
 8005046:	4a38      	ldr	r2, [pc, #224]	; (8005128 <xTaskResumeAll+0x118>)
 8005048:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800504a:	4b37      	ldr	r3, [pc, #220]	; (8005128 <xTaskResumeAll+0x118>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d162      	bne.n	8005118 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005052:	4b36      	ldr	r3, [pc, #216]	; (800512c <xTaskResumeAll+0x11c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d05e      	beq.n	8005118 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800505a:	e02f      	b.n	80050bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800505c:	4b34      	ldr	r3, [pc, #208]	; (8005130 <xTaskResumeAll+0x120>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3318      	adds	r3, #24
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff f871 	bl	8004150 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3304      	adds	r3, #4
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff f86c 	bl	8004150 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507c:	4b2d      	ldr	r3, [pc, #180]	; (8005134 <xTaskResumeAll+0x124>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d903      	bls.n	800508c <xTaskResumeAll+0x7c>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	4a2a      	ldr	r2, [pc, #168]	; (8005134 <xTaskResumeAll+0x124>)
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4a27      	ldr	r2, [pc, #156]	; (8005138 <xTaskResumeAll+0x128>)
 800509a:	441a      	add	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f7fe fff7 	bl	8004096 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ac:	4b23      	ldr	r3, [pc, #140]	; (800513c <xTaskResumeAll+0x12c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d302      	bcc.n	80050bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80050b6:	4b22      	ldr	r3, [pc, #136]	; (8005140 <xTaskResumeAll+0x130>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050bc:	4b1c      	ldr	r3, [pc, #112]	; (8005130 <xTaskResumeAll+0x120>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1cb      	bne.n	800505c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050ca:	f000 fb55 	bl	8005778 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050ce:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <xTaskResumeAll+0x134>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d010      	beq.n	80050fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050da:	f000 f847 	bl	800516c <xTaskIncrementTick>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80050e4:	4b16      	ldr	r3, [pc, #88]	; (8005140 <xTaskResumeAll+0x130>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f1      	bne.n	80050da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80050f6:	4b13      	ldr	r3, [pc, #76]	; (8005144 <xTaskResumeAll+0x134>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050fc:	4b10      	ldr	r3, [pc, #64]	; (8005140 <xTaskResumeAll+0x130>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005104:	2301      	movs	r3, #1
 8005106:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <xTaskResumeAll+0x138>)
 800510a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005118:	f001 f8dc 	bl	80062d4 <vPortExitCritical>

	return xAlreadyYielded;
 800511c:	68bb      	ldr	r3, [r7, #8]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	200015e4 	.word	0x200015e4
 800512c:	200015bc 	.word	0x200015bc
 8005130:	2000157c 	.word	0x2000157c
 8005134:	200015c4 	.word	0x200015c4
 8005138:	200010ec 	.word	0x200010ec
 800513c:	200010e8 	.word	0x200010e8
 8005140:	200015d0 	.word	0x200015d0
 8005144:	200015cc 	.word	0x200015cc
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005152:	4b05      	ldr	r3, [pc, #20]	; (8005168 <xTaskGetTickCount+0x1c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005158:	687b      	ldr	r3, [r7, #4]
}
 800515a:	4618      	mov	r0, r3
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	200015c0 	.word	0x200015c0

0800516c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005176:	4b4f      	ldr	r3, [pc, #316]	; (80052b4 <xTaskIncrementTick+0x148>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	f040 808f 	bne.w	800529e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005180:	4b4d      	ldr	r3, [pc, #308]	; (80052b8 <xTaskIncrementTick+0x14c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3301      	adds	r3, #1
 8005186:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005188:	4a4b      	ldr	r2, [pc, #300]	; (80052b8 <xTaskIncrementTick+0x14c>)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d120      	bne.n	80051d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005194:	4b49      	ldr	r3, [pc, #292]	; (80052bc <xTaskIncrementTick+0x150>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	603b      	str	r3, [r7, #0]
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <xTaskIncrementTick+0x46>
 80051b4:	4b41      	ldr	r3, [pc, #260]	; (80052bc <xTaskIncrementTick+0x150>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	4b41      	ldr	r3, [pc, #260]	; (80052c0 <xTaskIncrementTick+0x154>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a3f      	ldr	r2, [pc, #252]	; (80052bc <xTaskIncrementTick+0x150>)
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	4a3f      	ldr	r2, [pc, #252]	; (80052c0 <xTaskIncrementTick+0x154>)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	4b3e      	ldr	r3, [pc, #248]	; (80052c4 <xTaskIncrementTick+0x158>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3301      	adds	r3, #1
 80051ce:	4a3d      	ldr	r2, [pc, #244]	; (80052c4 <xTaskIncrementTick+0x158>)
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	f000 fad1 	bl	8005778 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051d6:	4b3c      	ldr	r3, [pc, #240]	; (80052c8 <xTaskIncrementTick+0x15c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d349      	bcc.n	8005274 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051e0:	4b36      	ldr	r3, [pc, #216]	; (80052bc <xTaskIncrementTick+0x150>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d104      	bne.n	80051f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ea:	4b37      	ldr	r3, [pc, #220]	; (80052c8 <xTaskIncrementTick+0x15c>)
 80051ec:	f04f 32ff 	mov.w	r2, #4294967295
 80051f0:	601a      	str	r2, [r3, #0]
					break;
 80051f2:	e03f      	b.n	8005274 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051f4:	4b31      	ldr	r3, [pc, #196]	; (80052bc <xTaskIncrementTick+0x150>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	d203      	bcs.n	8005214 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800520c:	4a2e      	ldr	r2, [pc, #184]	; (80052c8 <xTaskIncrementTick+0x15c>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005212:	e02f      	b.n	8005274 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	3304      	adds	r3, #4
 8005218:	4618      	mov	r0, r3
 800521a:	f7fe ff99 	bl	8004150 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	2b00      	cmp	r3, #0
 8005224:	d004      	beq.n	8005230 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	3318      	adds	r3, #24
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe ff90 	bl	8004150 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005234:	4b25      	ldr	r3, [pc, #148]	; (80052cc <xTaskIncrementTick+0x160>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d903      	bls.n	8005244 <xTaskIncrementTick+0xd8>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	4a22      	ldr	r2, [pc, #136]	; (80052cc <xTaskIncrementTick+0x160>)
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <xTaskIncrementTick+0x164>)
 8005252:	441a      	add	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f7fe ff1b 	bl	8004096 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005264:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <xTaskIncrementTick+0x168>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	429a      	cmp	r2, r3
 800526c:	d3b8      	bcc.n	80051e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800526e:	2301      	movs	r3, #1
 8005270:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005272:	e7b5      	b.n	80051e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005274:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <xTaskIncrementTick+0x168>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527a:	4915      	ldr	r1, [pc, #84]	; (80052d0 <xTaskIncrementTick+0x164>)
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d901      	bls.n	8005290 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800528c:	2301      	movs	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005290:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <xTaskIncrementTick+0x16c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005298:	2301      	movs	r3, #1
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	e004      	b.n	80052a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800529e:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <xTaskIncrementTick+0x170>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3301      	adds	r3, #1
 80052a4:	4a0d      	ldr	r2, [pc, #52]	; (80052dc <xTaskIncrementTick+0x170>)
 80052a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052a8:	697b      	ldr	r3, [r7, #20]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	200015e4 	.word	0x200015e4
 80052b8:	200015c0 	.word	0x200015c0
 80052bc:	20001574 	.word	0x20001574
 80052c0:	20001578 	.word	0x20001578
 80052c4:	200015d4 	.word	0x200015d4
 80052c8:	200015dc 	.word	0x200015dc
 80052cc:	200015c4 	.word	0x200015c4
 80052d0:	200010ec 	.word	0x200010ec
 80052d4:	200010e8 	.word	0x200010e8
 80052d8:	200015d0 	.word	0x200015d0
 80052dc:	200015cc 	.word	0x200015cc

080052e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052e6:	4b28      	ldr	r3, [pc, #160]	; (8005388 <vTaskSwitchContext+0xa8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052ee:	4b27      	ldr	r3, [pc, #156]	; (800538c <vTaskSwitchContext+0xac>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052f4:	e041      	b.n	800537a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80052f6:	4b25      	ldr	r3, [pc, #148]	; (800538c <vTaskSwitchContext+0xac>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052fc:	4b24      	ldr	r3, [pc, #144]	; (8005390 <vTaskSwitchContext+0xb0>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e010      	b.n	8005326 <vTaskSwitchContext+0x46>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <vTaskSwitchContext+0x40>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	607b      	str	r3, [r7, #4]
}
 800531c:	bf00      	nop
 800531e:	e7fe      	b.n	800531e <vTaskSwitchContext+0x3e>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3b01      	subs	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	491b      	ldr	r1, [pc, #108]	; (8005394 <vTaskSwitchContext+0xb4>)
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0e4      	beq.n	8005304 <vTaskSwitchContext+0x24>
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4a13      	ldr	r2, [pc, #76]	; (8005394 <vTaskSwitchContext+0xb4>)
 8005346:	4413      	add	r3, r2
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	605a      	str	r2, [r3, #4]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	3308      	adds	r3, #8
 800535c:	429a      	cmp	r2, r3
 800535e:	d104      	bne.n	800536a <vTaskSwitchContext+0x8a>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	605a      	str	r2, [r3, #4]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4a09      	ldr	r2, [pc, #36]	; (8005398 <vTaskSwitchContext+0xb8>)
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	4a06      	ldr	r2, [pc, #24]	; (8005390 <vTaskSwitchContext+0xb0>)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6013      	str	r3, [r2, #0]
}
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	200015e4 	.word	0x200015e4
 800538c:	200015d0 	.word	0x200015d0
 8005390:	200015c4 	.word	0x200015c4
 8005394:	200010ec 	.word	0x200010ec
 8005398:	200010e8 	.word	0x200010e8

0800539c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	60fb      	str	r3, [r7, #12]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053c2:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <vTaskPlaceOnEventList+0x44>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3318      	adds	r3, #24
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fe fe87 	bl	80040de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053d0:	2101      	movs	r1, #1
 80053d2:	6838      	ldr	r0, [r7, #0]
 80053d4:	f000 fa7c 	bl	80058d0 <prvAddCurrentTaskToDelayedList>
}
 80053d8:	bf00      	nop
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	200010e8 	.word	0x200010e8

080053e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10a      	bne.n	800540c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	617b      	str	r3, [r7, #20]
}
 8005408:	bf00      	nop
 800540a:	e7fe      	b.n	800540a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800540c:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <vTaskPlaceOnEventListRestricted+0x54>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3318      	adds	r3, #24
 8005412:	4619      	mov	r1, r3
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7fe fe3e 	bl	8004096 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005420:	f04f 33ff 	mov.w	r3, #4294967295
 8005424:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	68b8      	ldr	r0, [r7, #8]
 800542a:	f000 fa51 	bl	80058d0 <prvAddCurrentTaskToDelayedList>
	}
 800542e:	bf00      	nop
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	200010e8 	.word	0x200010e8

0800543c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10a      	bne.n	8005468 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	60fb      	str	r3, [r7, #12]
}
 8005464:	bf00      	nop
 8005466:	e7fe      	b.n	8005466 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	3318      	adds	r3, #24
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe fe6f 	bl	8004150 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005472:	4b1e      	ldr	r3, [pc, #120]	; (80054ec <xTaskRemoveFromEventList+0xb0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d11d      	bne.n	80054b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	3304      	adds	r3, #4
 800547e:	4618      	mov	r0, r3
 8005480:	f7fe fe66 	bl	8004150 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005488:	4b19      	ldr	r3, [pc, #100]	; (80054f0 <xTaskRemoveFromEventList+0xb4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d903      	bls.n	8005498 <xTaskRemoveFromEventList+0x5c>
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	4a16      	ldr	r2, [pc, #88]	; (80054f0 <xTaskRemoveFromEventList+0xb4>)
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <xTaskRemoveFromEventList+0xb8>)
 80054a6:	441a      	add	r2, r3
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f7fe fdf1 	bl	8004096 <vListInsertEnd>
 80054b4:	e005      	b.n	80054c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	3318      	adds	r3, #24
 80054ba:	4619      	mov	r1, r3
 80054bc:	480e      	ldr	r0, [pc, #56]	; (80054f8 <xTaskRemoveFromEventList+0xbc>)
 80054be:	f7fe fdea 	bl	8004096 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c6:	4b0d      	ldr	r3, [pc, #52]	; (80054fc <xTaskRemoveFromEventList+0xc0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d905      	bls.n	80054dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054d0:	2301      	movs	r3, #1
 80054d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054d4:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <xTaskRemoveFromEventList+0xc4>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e001      	b.n	80054e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054e0:	697b      	ldr	r3, [r7, #20]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	200015e4 	.word	0x200015e4
 80054f0:	200015c4 	.word	0x200015c4
 80054f4:	200010ec 	.word	0x200010ec
 80054f8:	2000157c 	.word	0x2000157c
 80054fc:	200010e8 	.word	0x200010e8
 8005500:	200015d0 	.word	0x200015d0

08005504 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800550c:	4b06      	ldr	r3, [pc, #24]	; (8005528 <vTaskInternalSetTimeOutState+0x24>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <vTaskInternalSetTimeOutState+0x28>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	605a      	str	r2, [r3, #4]
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	200015d4 	.word	0x200015d4
 800552c:	200015c0 	.word	0x200015c0

08005530 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	613b      	str	r3, [r7, #16]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	60fb      	str	r3, [r7, #12]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005572:	f000 fe7f 	bl	8006274 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005576:	4b1d      	ldr	r3, [pc, #116]	; (80055ec <xTaskCheckForTimeOut+0xbc>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558e:	d102      	bne.n	8005596 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	e023      	b.n	80055de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <xTaskCheckForTimeOut+0xc0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d007      	beq.n	80055b2 <xTaskCheckForTimeOut+0x82>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d302      	bcc.n	80055b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055ac:	2301      	movs	r3, #1
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	e015      	b.n	80055de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d20b      	bcs.n	80055d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	1ad2      	subs	r2, r2, r3
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ff9b 	bl	8005504 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	e004      	b.n	80055de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055da:	2301      	movs	r3, #1
 80055dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055de:	f000 fe79 	bl	80062d4 <vPortExitCritical>

	return xReturn;
 80055e2:	69fb      	ldr	r3, [r7, #28]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	200015c0 	.word	0x200015c0
 80055f0:	200015d4 	.word	0x200015d4

080055f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <vTaskMissedYield+0x14>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
}
 80055fe:	bf00      	nop
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	200015d0 	.word	0x200015d0

0800560c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005614:	f000 f852 	bl	80056bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005618:	4b06      	ldr	r3, [pc, #24]	; (8005634 <prvIdleTask+0x28>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d9f9      	bls.n	8005614 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005620:	4b05      	ldr	r3, [pc, #20]	; (8005638 <prvIdleTask+0x2c>)
 8005622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005630:	e7f0      	b.n	8005614 <prvIdleTask+0x8>
 8005632:	bf00      	nop
 8005634:	200010ec 	.word	0x200010ec
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005642:	2300      	movs	r3, #0
 8005644:	607b      	str	r3, [r7, #4]
 8005646:	e00c      	b.n	8005662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4a12      	ldr	r2, [pc, #72]	; (800569c <prvInitialiseTaskLists+0x60>)
 8005654:	4413      	add	r3, r2
 8005656:	4618      	mov	r0, r3
 8005658:	f7fe fcf0 	bl	800403c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3301      	adds	r3, #1
 8005660:	607b      	str	r3, [r7, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b37      	cmp	r3, #55	; 0x37
 8005666:	d9ef      	bls.n	8005648 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005668:	480d      	ldr	r0, [pc, #52]	; (80056a0 <prvInitialiseTaskLists+0x64>)
 800566a:	f7fe fce7 	bl	800403c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800566e:	480d      	ldr	r0, [pc, #52]	; (80056a4 <prvInitialiseTaskLists+0x68>)
 8005670:	f7fe fce4 	bl	800403c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005674:	480c      	ldr	r0, [pc, #48]	; (80056a8 <prvInitialiseTaskLists+0x6c>)
 8005676:	f7fe fce1 	bl	800403c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800567a:	480c      	ldr	r0, [pc, #48]	; (80056ac <prvInitialiseTaskLists+0x70>)
 800567c:	f7fe fcde 	bl	800403c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005680:	480b      	ldr	r0, [pc, #44]	; (80056b0 <prvInitialiseTaskLists+0x74>)
 8005682:	f7fe fcdb 	bl	800403c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005686:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <prvInitialiseTaskLists+0x78>)
 8005688:	4a05      	ldr	r2, [pc, #20]	; (80056a0 <prvInitialiseTaskLists+0x64>)
 800568a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800568c:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <prvInitialiseTaskLists+0x7c>)
 800568e:	4a05      	ldr	r2, [pc, #20]	; (80056a4 <prvInitialiseTaskLists+0x68>)
 8005690:	601a      	str	r2, [r3, #0]
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	200010ec 	.word	0x200010ec
 80056a0:	2000154c 	.word	0x2000154c
 80056a4:	20001560 	.word	0x20001560
 80056a8:	2000157c 	.word	0x2000157c
 80056ac:	20001590 	.word	0x20001590
 80056b0:	200015a8 	.word	0x200015a8
 80056b4:	20001574 	.word	0x20001574
 80056b8:	20001578 	.word	0x20001578

080056bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056c2:	e019      	b.n	80056f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056c4:	f000 fdd6 	bl	8006274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c8:	4b10      	ldr	r3, [pc, #64]	; (800570c <prvCheckTasksWaitingTermination+0x50>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3304      	adds	r3, #4
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe fd3b 	bl	8004150 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056da:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <prvCheckTasksWaitingTermination+0x54>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3b01      	subs	r3, #1
 80056e0:	4a0b      	ldr	r2, [pc, #44]	; (8005710 <prvCheckTasksWaitingTermination+0x54>)
 80056e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <prvCheckTasksWaitingTermination+0x58>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	4a0a      	ldr	r2, [pc, #40]	; (8005714 <prvCheckTasksWaitingTermination+0x58>)
 80056ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056ee:	f000 fdf1 	bl	80062d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f810 	bl	8005718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <prvCheckTasksWaitingTermination+0x58>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e1      	bne.n	80056c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20001590 	.word	0x20001590
 8005710:	200015bc 	.word	0x200015bc
 8005714:	200015a4 	.word	0x200015a4

08005718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005726:	2b00      	cmp	r3, #0
 8005728:	d108      	bne.n	800573c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	4618      	mov	r0, r3
 8005730:	f000 ff8e 	bl	8006650 <vPortFree>
				vPortFree( pxTCB );
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 ff8b 	bl	8006650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800573a:	e018      	b.n	800576e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005742:	2b01      	cmp	r3, #1
 8005744:	d103      	bne.n	800574e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 ff82 	bl	8006650 <vPortFree>
	}
 800574c:	e00f      	b.n	800576e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005754:	2b02      	cmp	r3, #2
 8005756:	d00a      	beq.n	800576e <prvDeleteTCB+0x56>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	60fb      	str	r3, [r7, #12]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <prvDeleteTCB+0x54>
	}
 800576e:	bf00      	nop
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <prvResetNextTaskUnblockTime+0x38>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d104      	bne.n	8005792 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <prvResetNextTaskUnblockTime+0x3c>)
 800578a:	f04f 32ff 	mov.w	r2, #4294967295
 800578e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005790:	e008      	b.n	80057a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005792:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <prvResetNextTaskUnblockTime+0x38>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <prvResetNextTaskUnblockTime+0x3c>)
 80057a2:	6013      	str	r3, [r2, #0]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20001574 	.word	0x20001574
 80057b4:	200015dc 	.word	0x200015dc

080057b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057be:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <xTaskGetSchedulerState+0x34>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d102      	bne.n	80057cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057c6:	2301      	movs	r3, #1
 80057c8:	607b      	str	r3, [r7, #4]
 80057ca:	e008      	b.n	80057de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057cc:	4b08      	ldr	r3, [pc, #32]	; (80057f0 <xTaskGetSchedulerState+0x38>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057d4:	2302      	movs	r3, #2
 80057d6:	607b      	str	r3, [r7, #4]
 80057d8:	e001      	b.n	80057de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057da:	2300      	movs	r3, #0
 80057dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057de:	687b      	ldr	r3, [r7, #4]
	}
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	200015c8 	.word	0x200015c8
 80057f0:	200015e4 	.word	0x200015e4

080057f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d056      	beq.n	80058b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800580a:	4b2e      	ldr	r3, [pc, #184]	; (80058c4 <xTaskPriorityDisinherit+0xd0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	429a      	cmp	r2, r3
 8005812:	d00a      	beq.n	800582a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	60fb      	str	r3, [r7, #12]
}
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	60bb      	str	r3, [r7, #8]
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584c:	1e5a      	subs	r2, r3, #1
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585a:	429a      	cmp	r2, r3
 800585c:	d02c      	beq.n	80058b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005862:	2b00      	cmp	r3, #0
 8005864:	d128      	bne.n	80058b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	3304      	adds	r3, #4
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe fc70 	bl	8004150 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005888:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <xTaskPriorityDisinherit+0xd4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d903      	bls.n	8005898 <xTaskPriorityDisinherit+0xa4>
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	4a0c      	ldr	r2, [pc, #48]	; (80058c8 <xTaskPriorityDisinherit+0xd4>)
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4a09      	ldr	r2, [pc, #36]	; (80058cc <xTaskPriorityDisinherit+0xd8>)
 80058a6:	441a      	add	r2, r3
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4619      	mov	r1, r3
 80058ae:	4610      	mov	r0, r2
 80058b0:	f7fe fbf1 	bl	8004096 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058b8:	697b      	ldr	r3, [r7, #20]
	}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	200010e8 	.word	0x200010e8
 80058c8:	200015c4 	.word	0x200015c4
 80058cc:	200010ec 	.word	0x200010ec

080058d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058da:	4b21      	ldr	r3, [pc, #132]	; (8005960 <prvAddCurrentTaskToDelayedList+0x90>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058e0:	4b20      	ldr	r3, [pc, #128]	; (8005964 <prvAddCurrentTaskToDelayedList+0x94>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3304      	adds	r3, #4
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fe fc32 	bl	8004150 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d10a      	bne.n	800590a <prvAddCurrentTaskToDelayedList+0x3a>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058fa:	4b1a      	ldr	r3, [pc, #104]	; (8005964 <prvAddCurrentTaskToDelayedList+0x94>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3304      	adds	r3, #4
 8005900:	4619      	mov	r1, r3
 8005902:	4819      	ldr	r0, [pc, #100]	; (8005968 <prvAddCurrentTaskToDelayedList+0x98>)
 8005904:	f7fe fbc7 	bl	8004096 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005908:	e026      	b.n	8005958 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4413      	add	r3, r2
 8005910:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005912:	4b14      	ldr	r3, [pc, #80]	; (8005964 <prvAddCurrentTaskToDelayedList+0x94>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	429a      	cmp	r2, r3
 8005920:	d209      	bcs.n	8005936 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <prvAddCurrentTaskToDelayedList+0x94>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3304      	adds	r3, #4
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f7fe fbd5 	bl	80040de <vListInsert>
}
 8005934:	e010      	b.n	8005958 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005936:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <prvAddCurrentTaskToDelayedList+0x94>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3304      	adds	r3, #4
 8005940:	4619      	mov	r1, r3
 8005942:	4610      	mov	r0, r2
 8005944:	f7fe fbcb 	bl	80040de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005948:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <prvAddCurrentTaskToDelayedList+0xa4>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	429a      	cmp	r2, r3
 8005950:	d202      	bcs.n	8005958 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005952:	4a08      	ldr	r2, [pc, #32]	; (8005974 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6013      	str	r3, [r2, #0]
}
 8005958:	bf00      	nop
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	200015c0 	.word	0x200015c0
 8005964:	200010e8 	.word	0x200010e8
 8005968:	200015a8 	.word	0x200015a8
 800596c:	20001578 	.word	0x20001578
 8005970:	20001574 	.word	0x20001574
 8005974:	200015dc 	.word	0x200015dc

08005978 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	; 0x28
 800597c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800597e:	2300      	movs	r3, #0
 8005980:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005982:	f000 fb07 	bl	8005f94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005986:	4b1c      	ldr	r3, [pc, #112]	; (80059f8 <xTimerCreateTimerTask+0x80>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d021      	beq.n	80059d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005992:	2300      	movs	r3, #0
 8005994:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005996:	1d3a      	adds	r2, r7, #4
 8005998:	f107 0108 	add.w	r1, r7, #8
 800599c:	f107 030c 	add.w	r3, r7, #12
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fe fb31 	bl	8004008 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	9202      	str	r2, [sp, #8]
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	2302      	movs	r3, #2
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	460a      	mov	r2, r1
 80059b8:	4910      	ldr	r1, [pc, #64]	; (80059fc <xTimerCreateTimerTask+0x84>)
 80059ba:	4811      	ldr	r0, [pc, #68]	; (8005a00 <xTimerCreateTimerTask+0x88>)
 80059bc:	f7ff f8de 	bl	8004b7c <xTaskCreateStatic>
 80059c0:	4603      	mov	r3, r0
 80059c2:	4a10      	ldr	r2, [pc, #64]	; (8005a04 <xTimerCreateTimerTask+0x8c>)
 80059c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059c6:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <xTimerCreateTimerTask+0x8c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80059ce:	2301      	movs	r3, #1
 80059d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	613b      	str	r3, [r7, #16]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80059ee:	697b      	ldr	r3, [r7, #20]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20001618 	.word	0x20001618
 80059fc:	08006940 	.word	0x08006940
 8005a00:	08005b3d 	.word	0x08005b3d
 8005a04:	2000161c 	.word	0x2000161c

08005a08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	; 0x28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	623b      	str	r3, [r7, #32]
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a36:	4b1a      	ldr	r3, [pc, #104]	; (8005aa0 <xTimerGenericCommand+0x98>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02a      	beq.n	8005a94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b05      	cmp	r3, #5
 8005a4e:	dc18      	bgt.n	8005a82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a50:	f7ff feb2 	bl	80057b8 <xTaskGetSchedulerState>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d109      	bne.n	8005a6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a5a:	4b11      	ldr	r3, [pc, #68]	; (8005aa0 <xTimerGenericCommand+0x98>)
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	f107 0110 	add.w	r1, r7, #16
 8005a62:	2300      	movs	r3, #0
 8005a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a66:	f7fe fca1 	bl	80043ac <xQueueGenericSend>
 8005a6a:	6278      	str	r0, [r7, #36]	; 0x24
 8005a6c:	e012      	b.n	8005a94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a6e:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <xTimerGenericCommand+0x98>)
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	f107 0110 	add.w	r1, r7, #16
 8005a76:	2300      	movs	r3, #0
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f7fe fc97 	bl	80043ac <xQueueGenericSend>
 8005a7e:	6278      	str	r0, [r7, #36]	; 0x24
 8005a80:	e008      	b.n	8005a94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a82:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <xTimerGenericCommand+0x98>)
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	f107 0110 	add.w	r1, r7, #16
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	f7fe fd8b 	bl	80045a8 <xQueueGenericSendFromISR>
 8005a92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3728      	adds	r7, #40	; 0x28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20001618 	.word	0x20001618

08005aa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aae:	4b22      	ldr	r3, [pc, #136]	; (8005b38 <prvProcessExpiredTimer+0x94>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fe fb47 	bl	8004150 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d022      	beq.n	8005b16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	699a      	ldr	r2, [r3, #24]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	18d1      	adds	r1, r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	6978      	ldr	r0, [r7, #20]
 8005ade:	f000 f8d1 	bl	8005c84 <prvInsertTimerInActiveList>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01f      	beq.n	8005b28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2300      	movs	r3, #0
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	2100      	movs	r1, #0
 8005af2:	6978      	ldr	r0, [r7, #20]
 8005af4:	f7ff ff88 	bl	8005a08 <xTimerGenericCommand>
 8005af8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d113      	bne.n	8005b28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	60fb      	str	r3, [r7, #12]
}
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	6978      	ldr	r0, [r7, #20]
 8005b2e:	4798      	blx	r3
}
 8005b30:	bf00      	nop
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20001610 	.word	0x20001610

08005b3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b44:	f107 0308 	add.w	r3, r7, #8
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 f857 	bl	8005bfc <prvGetNextExpireTime>
 8005b4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4619      	mov	r1, r3
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f803 	bl	8005b60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b5a:	f000 f8d5 	bl	8005d08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b5e:	e7f1      	b.n	8005b44 <prvTimerTask+0x8>

08005b60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b6a:	f7ff fa43 	bl	8004ff4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b6e:	f107 0308 	add.w	r3, r7, #8
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 f866 	bl	8005c44 <prvSampleTimeNow>
 8005b78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d130      	bne.n	8005be2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <prvProcessTimerOrBlockTask+0x3c>
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d806      	bhi.n	8005b9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b8e:	f7ff fa3f 	bl	8005010 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff ff85 	bl	8005aa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b9a:	e024      	b.n	8005be6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ba2:	4b13      	ldr	r3, [pc, #76]	; (8005bf0 <prvProcessTimerOrBlockTask+0x90>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <prvProcessTimerOrBlockTask+0x50>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <prvProcessTimerOrBlockTask+0x52>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bb4:	4b0f      	ldr	r3, [pc, #60]	; (8005bf4 <prvProcessTimerOrBlockTask+0x94>)
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	f7fe ffa7 	bl	8004b14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005bc6:	f7ff fa23 	bl	8005010 <xTaskResumeAll>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005bd0:	4b09      	ldr	r3, [pc, #36]	; (8005bf8 <prvProcessTimerOrBlockTask+0x98>)
 8005bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	f3bf 8f6f 	isb	sy
}
 8005be0:	e001      	b.n	8005be6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005be2:	f7ff fa15 	bl	8005010 <xTaskResumeAll>
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20001614 	.word	0x20001614
 8005bf4:	20001618 	.word	0x20001618
 8005bf8:	e000ed04 	.word	0xe000ed04

08005bfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c04:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <prvGetNextExpireTime+0x44>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <prvGetNextExpireTime+0x16>
 8005c0e:	2201      	movs	r2, #1
 8005c10:	e000      	b.n	8005c14 <prvGetNextExpireTime+0x18>
 8005c12:	2200      	movs	r2, #0
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d105      	bne.n	8005c2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <prvGetNextExpireTime+0x44>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	e001      	b.n	8005c30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c30:	68fb      	ldr	r3, [r7, #12]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	20001610 	.word	0x20001610

08005c44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c4c:	f7ff fa7e 	bl	800514c <xTaskGetTickCount>
 8005c50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c52:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <prvSampleTimeNow+0x3c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d205      	bcs.n	8005c68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c5c:	f000 f936 	bl	8005ecc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	e002      	b.n	8005c6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c6e:	4a04      	ldr	r2, [pc, #16]	; (8005c80 <prvSampleTimeNow+0x3c>)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c74:	68fb      	ldr	r3, [r7, #12]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20001620 	.word	0x20001620

08005c84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d812      	bhi.n	8005cd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	1ad2      	subs	r2, r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d302      	bcc.n	8005cbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	e01b      	b.n	8005cf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cbe:	4b10      	ldr	r3, [pc, #64]	; (8005d00 <prvInsertTimerInActiveList+0x7c>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4610      	mov	r0, r2
 8005cca:	f7fe fa08 	bl	80040de <vListInsert>
 8005cce:	e012      	b.n	8005cf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d206      	bcs.n	8005ce6 <prvInsertTimerInActiveList+0x62>
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d302      	bcc.n	8005ce6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	e007      	b.n	8005cf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ce6:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <prvInsertTimerInActiveList+0x80>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f7fe f9f4 	bl	80040de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005cf6:	697b      	ldr	r3, [r7, #20]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20001614 	.word	0x20001614
 8005d04:	20001610 	.word	0x20001610

08005d08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08e      	sub	sp, #56	; 0x38
 8005d0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d0e:	e0ca      	b.n	8005ea6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	da18      	bge.n	8005d48 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d16:	1d3b      	adds	r3, r7, #4
 8005d18:	3304      	adds	r3, #4
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	61fb      	str	r3, [r7, #28]
}
 8005d34:	bf00      	nop
 8005d36:	e7fe      	b.n	8005d36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d3e:	6850      	ldr	r0, [r2, #4]
 8005d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d42:	6892      	ldr	r2, [r2, #8]
 8005d44:	4611      	mov	r1, r2
 8005d46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f2c0 80aa 	blt.w	8005ea4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d004      	beq.n	8005d66 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fe f9f5 	bl	8004150 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d66:	463b      	mov	r3, r7
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff ff6b 	bl	8005c44 <prvSampleTimeNow>
 8005d6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b09      	cmp	r3, #9
 8005d74:	f200 8097 	bhi.w	8005ea6 <prvProcessReceivedCommands+0x19e>
 8005d78:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <prvProcessReceivedCommands+0x78>)
 8005d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7e:	bf00      	nop
 8005d80:	08005da9 	.word	0x08005da9
 8005d84:	08005da9 	.word	0x08005da9
 8005d88:	08005da9 	.word	0x08005da9
 8005d8c:	08005e1d 	.word	0x08005e1d
 8005d90:	08005e31 	.word	0x08005e31
 8005d94:	08005e7b 	.word	0x08005e7b
 8005d98:	08005da9 	.word	0x08005da9
 8005d9c:	08005da9 	.word	0x08005da9
 8005da0:	08005e1d 	.word	0x08005e1d
 8005da4:	08005e31 	.word	0x08005e31
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dae:	f043 0301 	orr.w	r3, r3, #1
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	18d1      	adds	r1, r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc8:	f7ff ff5c 	bl	8005c84 <prvInsertTimerInActiveList>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d069      	beq.n	8005ea6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d05e      	beq.n	8005ea6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	441a      	add	r2, r3
 8005df0:	2300      	movs	r3, #0
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	2300      	movs	r3, #0
 8005df6:	2100      	movs	r1, #0
 8005df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dfa:	f7ff fe05 	bl	8005a08 <xTimerGenericCommand>
 8005dfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d14f      	bne.n	8005ea6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	61bb      	str	r3, [r7, #24]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e22:	f023 0301 	bic.w	r3, r3, #1
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005e2e:	e03a      	b.n	8005ea6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	617b      	str	r3, [r7, #20]
}
 8005e62:	bf00      	nop
 8005e64:	e7fe      	b.n	8005e64 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	18d1      	adds	r1, r2, r3
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e74:	f7ff ff06 	bl	8005c84 <prvInsertTimerInActiveList>
					break;
 8005e78:	e015      	b.n	8005ea6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d103      	bne.n	8005e90 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e8a:	f000 fbe1 	bl	8006650 <vPortFree>
 8005e8e:	e00a      	b.n	8005ea6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e96:	f023 0301 	bic.w	r3, r3, #1
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ea2:	e000      	b.n	8005ea6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005ea4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ea6:	4b08      	ldr	r3, [pc, #32]	; (8005ec8 <prvProcessReceivedCommands+0x1c0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	1d39      	adds	r1, r7, #4
 8005eac:	2200      	movs	r2, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fe fc16 	bl	80046e0 <xQueueReceive>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f47f af2a 	bne.w	8005d10 <prvProcessReceivedCommands+0x8>
	}
}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	3730      	adds	r7, #48	; 0x30
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20001618 	.word	0x20001618

08005ecc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ed2:	e048      	b.n	8005f66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ed4:	4b2d      	ldr	r3, [pc, #180]	; (8005f8c <prvSwitchTimerLists+0xc0>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ede:	4b2b      	ldr	r3, [pc, #172]	; (8005f8c <prvSwitchTimerLists+0xc0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe f92f 	bl	8004150 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d02e      	beq.n	8005f66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4413      	add	r3, r2
 8005f10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d90e      	bls.n	8005f38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f26:	4b19      	ldr	r3, [pc, #100]	; (8005f8c <prvSwitchTimerLists+0xc0>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f7fe f8d4 	bl	80040de <vListInsert>
 8005f36:	e016      	b.n	8005f66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f38:	2300      	movs	r3, #0
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	2100      	movs	r1, #0
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7ff fd60 	bl	8005a08 <xTimerGenericCommand>
 8005f48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	603b      	str	r3, [r7, #0]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f66:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <prvSwitchTimerLists+0xc0>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1b1      	bne.n	8005ed4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f70:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <prvSwitchTimerLists+0xc0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <prvSwitchTimerLists+0xc4>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a04      	ldr	r2, [pc, #16]	; (8005f8c <prvSwitchTimerLists+0xc0>)
 8005f7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f7e:	4a04      	ldr	r2, [pc, #16]	; (8005f90 <prvSwitchTimerLists+0xc4>)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	6013      	str	r3, [r2, #0]
}
 8005f84:	bf00      	nop
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20001610 	.word	0x20001610
 8005f90:	20001614 	.word	0x20001614

08005f94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f9a:	f000 f96b 	bl	8006274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f9e:	4b15      	ldr	r3, [pc, #84]	; (8005ff4 <prvCheckForValidListAndQueue+0x60>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d120      	bne.n	8005fe8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005fa6:	4814      	ldr	r0, [pc, #80]	; (8005ff8 <prvCheckForValidListAndQueue+0x64>)
 8005fa8:	f7fe f848 	bl	800403c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005fac:	4813      	ldr	r0, [pc, #76]	; (8005ffc <prvCheckForValidListAndQueue+0x68>)
 8005fae:	f7fe f845 	bl	800403c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005fb2:	4b13      	ldr	r3, [pc, #76]	; (8006000 <prvCheckForValidListAndQueue+0x6c>)
 8005fb4:	4a10      	ldr	r2, [pc, #64]	; (8005ff8 <prvCheckForValidListAndQueue+0x64>)
 8005fb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005fb8:	4b12      	ldr	r3, [pc, #72]	; (8006004 <prvCheckForValidListAndQueue+0x70>)
 8005fba:	4a10      	ldr	r2, [pc, #64]	; (8005ffc <prvCheckForValidListAndQueue+0x68>)
 8005fbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	4b11      	ldr	r3, [pc, #68]	; (8006008 <prvCheckForValidListAndQueue+0x74>)
 8005fc4:	4a11      	ldr	r2, [pc, #68]	; (800600c <prvCheckForValidListAndQueue+0x78>)
 8005fc6:	2110      	movs	r1, #16
 8005fc8:	200a      	movs	r0, #10
 8005fca:	f7fe f953 	bl	8004274 <xQueueGenericCreateStatic>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4a08      	ldr	r2, [pc, #32]	; (8005ff4 <prvCheckForValidListAndQueue+0x60>)
 8005fd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005fd4:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <prvCheckForValidListAndQueue+0x60>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005fdc:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <prvCheckForValidListAndQueue+0x60>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	490b      	ldr	r1, [pc, #44]	; (8006010 <prvCheckForValidListAndQueue+0x7c>)
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe fd6c 	bl	8004ac0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fe8:	f000 f974 	bl	80062d4 <vPortExitCritical>
}
 8005fec:	bf00      	nop
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20001618 	.word	0x20001618
 8005ff8:	200015e8 	.word	0x200015e8
 8005ffc:	200015fc 	.word	0x200015fc
 8006000:	20001610 	.word	0x20001610
 8006004:	20001614 	.word	0x20001614
 8006008:	200016c4 	.word	0x200016c4
 800600c:	20001624 	.word	0x20001624
 8006010:	08006948 	.word	0x08006948

08006014 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3b04      	subs	r3, #4
 8006024:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800602c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3b04      	subs	r3, #4
 8006032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f023 0201 	bic.w	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3b04      	subs	r3, #4
 8006042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006044:	4a0c      	ldr	r2, [pc, #48]	; (8006078 <pxPortInitialiseStack+0x64>)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3b14      	subs	r3, #20
 800604e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3b04      	subs	r3, #4
 800605a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f06f 0202 	mvn.w	r2, #2
 8006062:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	3b20      	subs	r3, #32
 8006068:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800606a:	68fb      	ldr	r3, [r7, #12]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	0800607d 	.word	0x0800607d

0800607c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006086:	4b12      	ldr	r3, [pc, #72]	; (80060d0 <prvTaskExitError+0x54>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d00a      	beq.n	80060a6 <prvTaskExitError+0x2a>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <prvTaskExitError+0x28>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	60bb      	str	r3, [r7, #8]
}
 80060b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060ba:	bf00      	nop
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0fc      	beq.n	80060bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060c2:	bf00      	nop
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	20000010 	.word	0x20000010
	...

080060e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <pxCurrentTCBConst2>)
 80060e2:	6819      	ldr	r1, [r3, #0]
 80060e4:	6808      	ldr	r0, [r1, #0]
 80060e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	f380 8809 	msr	PSP, r0
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f04f 0000 	mov.w	r0, #0
 80060f6:	f380 8811 	msr	BASEPRI, r0
 80060fa:	4770      	bx	lr
 80060fc:	f3af 8000 	nop.w

08006100 <pxCurrentTCBConst2>:
 8006100:	200010e8 	.word	0x200010e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop

08006108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006108:	4808      	ldr	r0, [pc, #32]	; (800612c <prvPortStartFirstTask+0x24>)
 800610a:	6800      	ldr	r0, [r0, #0]
 800610c:	6800      	ldr	r0, [r0, #0]
 800610e:	f380 8808 	msr	MSP, r0
 8006112:	f04f 0000 	mov.w	r0, #0
 8006116:	f380 8814 	msr	CONTROL, r0
 800611a:	b662      	cpsie	i
 800611c:	b661      	cpsie	f
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	df00      	svc	0
 8006128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800612a:	bf00      	nop
 800612c:	e000ed08 	.word	0xe000ed08

08006130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006136:	4b46      	ldr	r3, [pc, #280]	; (8006250 <xPortStartScheduler+0x120>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a46      	ldr	r2, [pc, #280]	; (8006254 <xPortStartScheduler+0x124>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d10a      	bne.n	8006156 <xPortStartScheduler+0x26>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	613b      	str	r3, [r7, #16]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006156:	4b3e      	ldr	r3, [pc, #248]	; (8006250 <xPortStartScheduler+0x120>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a3f      	ldr	r2, [pc, #252]	; (8006258 <xPortStartScheduler+0x128>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d10a      	bne.n	8006176 <xPortStartScheduler+0x46>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	60fb      	str	r3, [r7, #12]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006176:	4b39      	ldr	r3, [pc, #228]	; (800625c <xPortStartScheduler+0x12c>)
 8006178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	22ff      	movs	r2, #255	; 0xff
 8006186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006198:	b2da      	uxtb	r2, r3
 800619a:	4b31      	ldr	r3, [pc, #196]	; (8006260 <xPortStartScheduler+0x130>)
 800619c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800619e:	4b31      	ldr	r3, [pc, #196]	; (8006264 <xPortStartScheduler+0x134>)
 80061a0:	2207      	movs	r2, #7
 80061a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061a4:	e009      	b.n	80061ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80061a6:	4b2f      	ldr	r3, [pc, #188]	; (8006264 <xPortStartScheduler+0x134>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	4a2d      	ldr	r2, [pc, #180]	; (8006264 <xPortStartScheduler+0x134>)
 80061ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c2:	2b80      	cmp	r3, #128	; 0x80
 80061c4:	d0ef      	beq.n	80061a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80061c6:	4b27      	ldr	r3, [pc, #156]	; (8006264 <xPortStartScheduler+0x134>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f1c3 0307 	rsb	r3, r3, #7
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d00a      	beq.n	80061e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	60bb      	str	r3, [r7, #8]
}
 80061e4:	bf00      	nop
 80061e6:	e7fe      	b.n	80061e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061e8:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <xPortStartScheduler+0x134>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	021b      	lsls	r3, r3, #8
 80061ee:	4a1d      	ldr	r2, [pc, #116]	; (8006264 <xPortStartScheduler+0x134>)
 80061f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061f2:	4b1c      	ldr	r3, [pc, #112]	; (8006264 <xPortStartScheduler+0x134>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061fa:	4a1a      	ldr	r2, [pc, #104]	; (8006264 <xPortStartScheduler+0x134>)
 80061fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	b2da      	uxtb	r2, r3
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006206:	4b18      	ldr	r3, [pc, #96]	; (8006268 <xPortStartScheduler+0x138>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a17      	ldr	r2, [pc, #92]	; (8006268 <xPortStartScheduler+0x138>)
 800620c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006212:	4b15      	ldr	r3, [pc, #84]	; (8006268 <xPortStartScheduler+0x138>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a14      	ldr	r2, [pc, #80]	; (8006268 <xPortStartScheduler+0x138>)
 8006218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800621c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800621e:	f000 f8dd 	bl	80063dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <xPortStartScheduler+0x13c>)
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006228:	f000 f8fc 	bl	8006424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800622c:	4b10      	ldr	r3, [pc, #64]	; (8006270 <xPortStartScheduler+0x140>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a0f      	ldr	r2, [pc, #60]	; (8006270 <xPortStartScheduler+0x140>)
 8006232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006238:	f7ff ff66 	bl	8006108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800623c:	f7ff f850 	bl	80052e0 <vTaskSwitchContext>
	prvTaskExitError();
 8006240:	f7ff ff1c 	bl	800607c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	e000ed00 	.word	0xe000ed00
 8006254:	410fc271 	.word	0x410fc271
 8006258:	410fc270 	.word	0x410fc270
 800625c:	e000e400 	.word	0xe000e400
 8006260:	20001714 	.word	0x20001714
 8006264:	20001718 	.word	0x20001718
 8006268:	e000ed20 	.word	0xe000ed20
 800626c:	20000010 	.word	0x20000010
 8006270:	e000ef34 	.word	0xe000ef34

08006274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
	__asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	607b      	str	r3, [r7, #4]
}
 800628c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800628e:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <vPortEnterCritical+0x58>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3301      	adds	r3, #1
 8006294:	4a0d      	ldr	r2, [pc, #52]	; (80062cc <vPortEnterCritical+0x58>)
 8006296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006298:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <vPortEnterCritical+0x58>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d10f      	bne.n	80062c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <vPortEnterCritical+0x5c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	603b      	str	r3, [r7, #0]
}
 80062bc:	bf00      	nop
 80062be:	e7fe      	b.n	80062be <vPortEnterCritical+0x4a>
	}
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	20000010 	.word	0x20000010
 80062d0:	e000ed04 	.word	0xe000ed04

080062d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80062da:	4b12      	ldr	r3, [pc, #72]	; (8006324 <vPortExitCritical+0x50>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10a      	bne.n	80062f8 <vPortExitCritical+0x24>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	607b      	str	r3, [r7, #4]
}
 80062f4:	bf00      	nop
 80062f6:	e7fe      	b.n	80062f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <vPortExitCritical+0x50>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	4a09      	ldr	r2, [pc, #36]	; (8006324 <vPortExitCritical+0x50>)
 8006300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006302:	4b08      	ldr	r3, [pc, #32]	; (8006324 <vPortExitCritical+0x50>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d105      	bne.n	8006316 <vPortExitCritical+0x42>
 800630a:	2300      	movs	r3, #0
 800630c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	f383 8811 	msr	BASEPRI, r3
}
 8006314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20000010 	.word	0x20000010
	...

08006330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006330:	f3ef 8009 	mrs	r0, PSP
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	4b15      	ldr	r3, [pc, #84]	; (8006390 <pxCurrentTCBConst>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	f01e 0f10 	tst.w	lr, #16
 8006340:	bf08      	it	eq
 8006342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634a:	6010      	str	r0, [r2, #0]
 800634c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006354:	f380 8811 	msr	BASEPRI, r0
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f7fe ffbe 	bl	80052e0 <vTaskSwitchContext>
 8006364:	f04f 0000 	mov.w	r0, #0
 8006368:	f380 8811 	msr	BASEPRI, r0
 800636c:	bc09      	pop	{r0, r3}
 800636e:	6819      	ldr	r1, [r3, #0]
 8006370:	6808      	ldr	r0, [r1, #0]
 8006372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006376:	f01e 0f10 	tst.w	lr, #16
 800637a:	bf08      	it	eq
 800637c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006380:	f380 8809 	msr	PSP, r0
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	f3af 8000 	nop.w

08006390 <pxCurrentTCBConst>:
 8006390:	200010e8 	.word	0x200010e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop

08006398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	607b      	str	r3, [r7, #4]
}
 80063b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063b2:	f7fe fedb 	bl	800516c <xTaskIncrementTick>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063bc:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <xPortSysTickHandler+0x40>)
 80063be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	2300      	movs	r3, #0
 80063c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	f383 8811 	msr	BASEPRI, r3
}
 80063ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <vPortSetupTimerInterrupt+0x34>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063e6:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <vPortSetupTimerInterrupt+0x38>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <vPortSetupTimerInterrupt+0x3c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a0a      	ldr	r2, [pc, #40]	; (800641c <vPortSetupTimerInterrupt+0x40>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	099b      	lsrs	r3, r3, #6
 80063f8:	4a09      	ldr	r2, [pc, #36]	; (8006420 <vPortSetupTimerInterrupt+0x44>)
 80063fa:	3b01      	subs	r3, #1
 80063fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063fe:	4b04      	ldr	r3, [pc, #16]	; (8006410 <vPortSetupTimerInterrupt+0x34>)
 8006400:	2207      	movs	r2, #7
 8006402:	601a      	str	r2, [r3, #0]
}
 8006404:	bf00      	nop
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	e000e010 	.word	0xe000e010
 8006414:	e000e018 	.word	0xe000e018
 8006418:	20000004 	.word	0x20000004
 800641c:	10624dd3 	.word	0x10624dd3
 8006420:	e000e014 	.word	0xe000e014

08006424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006434 <vPortEnableVFP+0x10>
 8006428:	6801      	ldr	r1, [r0, #0]
 800642a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800642e:	6001      	str	r1, [r0, #0]
 8006430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006432:	bf00      	nop
 8006434:	e000ed88 	.word	0xe000ed88

08006438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800643e:	f3ef 8305 	mrs	r3, IPSR
 8006442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b0f      	cmp	r3, #15
 8006448:	d914      	bls.n	8006474 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800644a:	4a17      	ldr	r2, [pc, #92]	; (80064a8 <vPortValidateInterruptPriority+0x70>)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006454:	4b15      	ldr	r3, [pc, #84]	; (80064ac <vPortValidateInterruptPriority+0x74>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	7afa      	ldrb	r2, [r7, #11]
 800645a:	429a      	cmp	r2, r3
 800645c:	d20a      	bcs.n	8006474 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	607b      	str	r3, [r7, #4]
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006474:	4b0e      	ldr	r3, [pc, #56]	; (80064b0 <vPortValidateInterruptPriority+0x78>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800647c:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <vPortValidateInterruptPriority+0x7c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d90a      	bls.n	800649a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	603b      	str	r3, [r7, #0]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <vPortValidateInterruptPriority+0x60>
	}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	e000e3f0 	.word	0xe000e3f0
 80064ac:	20001714 	.word	0x20001714
 80064b0:	e000ed0c 	.word	0xe000ed0c
 80064b4:	20001718 	.word	0x20001718

080064b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08a      	sub	sp, #40	; 0x28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064c4:	f7fe fd96 	bl	8004ff4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064c8:	4b5b      	ldr	r3, [pc, #364]	; (8006638 <pvPortMalloc+0x180>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064d0:	f000 f920 	bl	8006714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064d4:	4b59      	ldr	r3, [pc, #356]	; (800663c <pvPortMalloc+0x184>)
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4013      	ands	r3, r2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f040 8093 	bne.w	8006608 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01d      	beq.n	8006524 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80064e8:	2208      	movs	r2, #8
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4413      	add	r3, r2
 80064ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d014      	beq.n	8006524 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f023 0307 	bic.w	r3, r3, #7
 8006500:	3308      	adds	r3, #8
 8006502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <pvPortMalloc+0x6c>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	617b      	str	r3, [r7, #20]
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d06e      	beq.n	8006608 <pvPortMalloc+0x150>
 800652a:	4b45      	ldr	r3, [pc, #276]	; (8006640 <pvPortMalloc+0x188>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d869      	bhi.n	8006608 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006534:	4b43      	ldr	r3, [pc, #268]	; (8006644 <pvPortMalloc+0x18c>)
 8006536:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006538:	4b42      	ldr	r3, [pc, #264]	; (8006644 <pvPortMalloc+0x18c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800653e:	e004      	b.n	800654a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	429a      	cmp	r2, r3
 8006552:	d903      	bls.n	800655c <pvPortMalloc+0xa4>
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f1      	bne.n	8006540 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800655c:	4b36      	ldr	r3, [pc, #216]	; (8006638 <pvPortMalloc+0x180>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006562:	429a      	cmp	r2, r3
 8006564:	d050      	beq.n	8006608 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2208      	movs	r2, #8
 800656c:	4413      	add	r3, r2
 800656e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	1ad2      	subs	r2, r2, r3
 8006580:	2308      	movs	r3, #8
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	429a      	cmp	r2, r3
 8006586:	d91f      	bls.n	80065c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4413      	add	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <pvPortMalloc+0xf8>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	613b      	str	r3, [r7, #16]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	1ad2      	subs	r2, r2, r3
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065c2:	69b8      	ldr	r0, [r7, #24]
 80065c4:	f000 f908 	bl	80067d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065c8:	4b1d      	ldr	r3, [pc, #116]	; (8006640 <pvPortMalloc+0x188>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <pvPortMalloc+0x188>)
 80065d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065d6:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <pvPortMalloc+0x188>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b1b      	ldr	r3, [pc, #108]	; (8006648 <pvPortMalloc+0x190>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d203      	bcs.n	80065ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065e2:	4b17      	ldr	r3, [pc, #92]	; (8006640 <pvPortMalloc+0x188>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a18      	ldr	r2, [pc, #96]	; (8006648 <pvPortMalloc+0x190>)
 80065e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	4b13      	ldr	r3, [pc, #76]	; (800663c <pvPortMalloc+0x184>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80065fe:	4b13      	ldr	r3, [pc, #76]	; (800664c <pvPortMalloc+0x194>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	4a11      	ldr	r2, [pc, #68]	; (800664c <pvPortMalloc+0x194>)
 8006606:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006608:	f7fe fd02 	bl	8005010 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <pvPortMalloc+0x174>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	60fb      	str	r3, [r7, #12]
}
 8006628:	bf00      	nop
 800662a:	e7fe      	b.n	800662a <pvPortMalloc+0x172>
	return pvReturn;
 800662c:	69fb      	ldr	r3, [r7, #28]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3728      	adds	r7, #40	; 0x28
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20005324 	.word	0x20005324
 800663c:	20005338 	.word	0x20005338
 8006640:	20005328 	.word	0x20005328
 8006644:	2000531c 	.word	0x2000531c
 8006648:	2000532c 	.word	0x2000532c
 800664c:	20005330 	.word	0x20005330

08006650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d04d      	beq.n	80066fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006662:	2308      	movs	r3, #8
 8006664:	425b      	negs	r3, r3
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4413      	add	r3, r2
 800666a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	4b24      	ldr	r3, [pc, #144]	; (8006708 <vPortFree+0xb8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4013      	ands	r3, r2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <vPortFree+0x44>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	60fb      	str	r3, [r7, #12]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <vPortFree+0x62>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	60bb      	str	r3, [r7, #8]
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	4b14      	ldr	r3, [pc, #80]	; (8006708 <vPortFree+0xb8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01e      	beq.n	80066fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d11a      	bne.n	80066fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <vPortFree+0xb8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	43db      	mvns	r3, r3
 80066d2:	401a      	ands	r2, r3
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066d8:	f7fe fc8c 	bl	8004ff4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <vPortFree+0xbc>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4413      	add	r3, r2
 80066e6:	4a09      	ldr	r2, [pc, #36]	; (800670c <vPortFree+0xbc>)
 80066e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066ea:	6938      	ldr	r0, [r7, #16]
 80066ec:	f000 f874 	bl	80067d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066f0:	4b07      	ldr	r3, [pc, #28]	; (8006710 <vPortFree+0xc0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3301      	adds	r3, #1
 80066f6:	4a06      	ldr	r2, [pc, #24]	; (8006710 <vPortFree+0xc0>)
 80066f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80066fa:	f7fe fc89 	bl	8005010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066fe:	bf00      	nop
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20005338 	.word	0x20005338
 800670c:	20005328 	.word	0x20005328
 8006710:	20005334 	.word	0x20005334

08006714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800671a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800671e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006720:	4b27      	ldr	r3, [pc, #156]	; (80067c0 <prvHeapInit+0xac>)
 8006722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00c      	beq.n	8006748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	3307      	adds	r3, #7
 8006732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0307 	bic.w	r3, r3, #7
 800673a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	4a1f      	ldr	r2, [pc, #124]	; (80067c0 <prvHeapInit+0xac>)
 8006744:	4413      	add	r3, r2
 8006746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800674c:	4a1d      	ldr	r2, [pc, #116]	; (80067c4 <prvHeapInit+0xb0>)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006752:	4b1c      	ldr	r3, [pc, #112]	; (80067c4 <prvHeapInit+0xb0>)
 8006754:	2200      	movs	r2, #0
 8006756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	4413      	add	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006760:	2208      	movs	r2, #8
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	1a9b      	subs	r3, r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0307 	bic.w	r3, r3, #7
 800676e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a15      	ldr	r2, [pc, #84]	; (80067c8 <prvHeapInit+0xb4>)
 8006774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006776:	4b14      	ldr	r3, [pc, #80]	; (80067c8 <prvHeapInit+0xb4>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2200      	movs	r2, #0
 800677c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800677e:	4b12      	ldr	r3, [pc, #72]	; (80067c8 <prvHeapInit+0xb4>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	1ad2      	subs	r2, r2, r3
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006794:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <prvHeapInit+0xb4>)
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	4a0a      	ldr	r2, [pc, #40]	; (80067cc <prvHeapInit+0xb8>)
 80067a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	4a09      	ldr	r2, [pc, #36]	; (80067d0 <prvHeapInit+0xbc>)
 80067aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <prvHeapInit+0xc0>)
 80067ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067b2:	601a      	str	r2, [r3, #0]
}
 80067b4:	bf00      	nop
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	2000171c 	.word	0x2000171c
 80067c4:	2000531c 	.word	0x2000531c
 80067c8:	20005324 	.word	0x20005324
 80067cc:	2000532c 	.word	0x2000532c
 80067d0:	20005328 	.word	0x20005328
 80067d4:	20005338 	.word	0x20005338

080067d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067e0:	4b28      	ldr	r3, [pc, #160]	; (8006884 <prvInsertBlockIntoFreeList+0xac>)
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	e002      	b.n	80067ec <prvInsertBlockIntoFreeList+0x14>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d8f7      	bhi.n	80067e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	4413      	add	r3, r2
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	429a      	cmp	r2, r3
 8006806:	d108      	bne.n	800681a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	441a      	add	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	441a      	add	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d118      	bne.n	8006860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b15      	ldr	r3, [pc, #84]	; (8006888 <prvInsertBlockIntoFreeList+0xb0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d00d      	beq.n	8006856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	441a      	add	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	e008      	b.n	8006868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006856:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <prvInsertBlockIntoFreeList+0xb0>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e003      	b.n	8006868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	429a      	cmp	r2, r3
 800686e:	d002      	beq.n	8006876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006876:	bf00      	nop
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	2000531c 	.word	0x2000531c
 8006888:	20005324 	.word	0x20005324

0800688c <__libc_init_array>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	4d0d      	ldr	r5, [pc, #52]	; (80068c4 <__libc_init_array+0x38>)
 8006890:	4c0d      	ldr	r4, [pc, #52]	; (80068c8 <__libc_init_array+0x3c>)
 8006892:	1b64      	subs	r4, r4, r5
 8006894:	10a4      	asrs	r4, r4, #2
 8006896:	2600      	movs	r6, #0
 8006898:	42a6      	cmp	r6, r4
 800689a:	d109      	bne.n	80068b0 <__libc_init_array+0x24>
 800689c:	4d0b      	ldr	r5, [pc, #44]	; (80068cc <__libc_init_array+0x40>)
 800689e:	4c0c      	ldr	r4, [pc, #48]	; (80068d0 <__libc_init_array+0x44>)
 80068a0:	f000 f82e 	bl	8006900 <_init>
 80068a4:	1b64      	subs	r4, r4, r5
 80068a6:	10a4      	asrs	r4, r4, #2
 80068a8:	2600      	movs	r6, #0
 80068aa:	42a6      	cmp	r6, r4
 80068ac:	d105      	bne.n	80068ba <__libc_init_array+0x2e>
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b4:	4798      	blx	r3
 80068b6:	3601      	adds	r6, #1
 80068b8:	e7ee      	b.n	8006898 <__libc_init_array+0xc>
 80068ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80068be:	4798      	blx	r3
 80068c0:	3601      	adds	r6, #1
 80068c2:	e7f2      	b.n	80068aa <__libc_init_array+0x1e>
 80068c4:	08006994 	.word	0x08006994
 80068c8:	08006994 	.word	0x08006994
 80068cc:	08006994 	.word	0x08006994
 80068d0:	08006998 	.word	0x08006998

080068d4 <memcpy>:
 80068d4:	440a      	add	r2, r1
 80068d6:	4291      	cmp	r1, r2
 80068d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80068dc:	d100      	bne.n	80068e0 <memcpy+0xc>
 80068de:	4770      	bx	lr
 80068e0:	b510      	push	{r4, lr}
 80068e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068ea:	4291      	cmp	r1, r2
 80068ec:	d1f9      	bne.n	80068e2 <memcpy+0xe>
 80068ee:	bd10      	pop	{r4, pc}

080068f0 <memset>:
 80068f0:	4402      	add	r2, r0
 80068f2:	4603      	mov	r3, r0
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d100      	bne.n	80068fa <memset+0xa>
 80068f8:	4770      	bx	lr
 80068fa:	f803 1b01 	strb.w	r1, [r3], #1
 80068fe:	e7f9      	b.n	80068f4 <memset+0x4>

08006900 <_init>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	bf00      	nop
 8006904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006906:	bc08      	pop	{r3}
 8006908:	469e      	mov	lr, r3
 800690a:	4770      	bx	lr

0800690c <_fini>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	bf00      	nop
 8006910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006912:	bc08      	pop	{r3}
 8006914:	469e      	mov	lr, r3
 8006916:	4770      	bx	lr
