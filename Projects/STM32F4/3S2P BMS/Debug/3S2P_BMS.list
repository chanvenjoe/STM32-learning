
3S2P_BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004914  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004ae4  08004ae4  00005ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b58  08004b58  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004b58  08004b58  00005b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b60  08004b60  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b60  08004b60  00005b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b64  08004b64  00005b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004b68  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c0  20000010  08004b78  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049d0  08004b78  000069d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001026e  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c6e  00000000  00000000  000162ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00018f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa5  00000000  00000000  00019d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e81  00000000  00000000  0001a7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106bb  00000000  00000000  0001d65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc903  00000000  00000000  0002dd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a61c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000396c  00000000  00000000  0010a660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0010dfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004acc 	.word	0x08004acc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004acc 	.word	0x08004acc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 f9d2 	bl	80008ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f822 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8d2 	bl	80006b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000510:	f000 f87e 	bl	8000610 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000514:	f001 fc8a 	bl	8001e2c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000518:	4a08      	ldr	r2, [pc, #32]	@ (800053c <main+0x3c>)
 800051a:	2100      	movs	r1, #0
 800051c:	4808      	ldr	r0, [pc, #32]	@ (8000540 <main+0x40>)
 800051e:	f001 fccf 	bl	8001ec0 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a07      	ldr	r2, [pc, #28]	@ (8000544 <main+0x44>)
 8000526:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of myEvent01 */
  myEvent01Handle = osEventFlagsNew(&myEvent01_attributes);
 8000528:	4807      	ldr	r0, [pc, #28]	@ (8000548 <main+0x48>)
 800052a:	f001 fd76 	bl	800201a <osEventFlagsNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a06      	ldr	r2, [pc, #24]	@ (800054c <main+0x4c>)
 8000532:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000534:	f001 fc9e 	bl	8001e74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0x38>
 800053c:	08004b14 	.word	0x08004b14
 8000540:	080006e9 	.word	0x080006e9
 8000544:	20000074 	.word	0x20000074
 8000548:	08004b38 	.word	0x08004b38
 800054c:	20000078 	.word	0x20000078

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	@ 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2234      	movs	r2, #52	@ 0x34
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f004 fa7a 	bl	8004a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b23      	ldr	r3, [pc, #140]	@ (8000608 <SystemClock_Config+0xb8>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800057c:	4a22      	ldr	r2, [pc, #136]	@ (8000608 <SystemClock_Config+0xb8>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	@ 0x40
 8000584:	4b20      	ldr	r3, [pc, #128]	@ (8000608 <SystemClock_Config+0xb8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000590:	2300      	movs	r3, #0
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <SystemClock_Config+0xbc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800059c:	4a1b      	ldr	r2, [pc, #108]	@ (800060c <SystemClock_Config+0xbc>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b19      	ldr	r3, [pc, #100]	@ (800060c <SystemClock_Config+0xbc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2310      	movs	r3, #16
 80005ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005bc:	2300      	movs	r3, #0
 80005be:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 f95f 	bl	8001888 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005d0:	f000 f892 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 feba 	bl	8001368 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005fa:	f000 f87d 	bl	80006f8 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	@ 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000622:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <MX_ADC1_Init+0x9c>)
 8000626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062e:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000634:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063a:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000640:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000648:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064e:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000650:	4a17      	ldr	r2, [pc, #92]	@ (80006b0 <MX_ADC1_Init+0xa0>)
 8000652:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800065a:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000660:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800066a:	2201      	movs	r2, #1
 800066c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066e:	480e      	ldr	r0, [pc, #56]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000670:	f000 f98e 	bl	8000990 <HAL_ADC_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800067a:	f000 f83d 	bl	80006f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800067e:	230b      	movs	r3, #11
 8000680:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	4619      	mov	r1, r3
 800068e:	4806      	ldr	r0, [pc, #24]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000690:	f000 f9c2 	bl	8000a18 <HAL_ADC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800069a:	f000 f82d 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000002c 	.word	0x2000002c
 80006ac:	40012000 	.word	0x40012000
 80006b0:	0f000001 	.word	0x0f000001

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_GPIO_Init+0x30>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a08      	ldr	r2, [pc, #32]	@ (80006e4 <MX_GPIO_Init+0x30>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_GPIO_Init+0x30>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f001 fc77 	bl	8001fe4 <osDelay>
 80006f6:	e7fb      	b.n	80006f0 <StartDefaultTask+0x8>

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <Error_Handler+0x8>

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <HAL_MspInit+0x54>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000712:	4a11      	ldr	r2, [pc, #68]	@ (8000758 <HAL_MspInit+0x54>)
 8000714:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000718:	6453      	str	r3, [r2, #68]	@ 0x44
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <HAL_MspInit+0x54>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <HAL_MspInit+0x54>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072e:	4a0a      	ldr	r2, [pc, #40]	@ (8000758 <HAL_MspInit+0x54>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000734:	6413      	str	r3, [r2, #64]	@ 0x40
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <HAL_MspInit+0x54>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	210f      	movs	r1, #15
 8000746:	f06f 0001 	mvn.w	r0, #1
 800074a:	f000 fc50 	bl	8000fee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a17      	ldr	r2, [pc, #92]	@ (80007d8 <HAL_ADC_MspInit+0x7c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d127      	bne.n	80007ce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <HAL_ADC_MspInit+0x80>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000786:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <HAL_ADC_MspInit+0x80>)
 8000788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800078c:	6453      	str	r3, [r2, #68]	@ 0x44
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <HAL_ADC_MspInit+0x80>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <HAL_ADC_MspInit+0x80>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <HAL_ADC_MspInit+0x80>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <HAL_ADC_MspInit+0x80>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007b6:	2302      	movs	r3, #2
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ba:	2303      	movs	r3, #3
 80007bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <HAL_ADC_MspInit+0x84>)
 80007ca:	f000 fc39 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	@ 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40012000 	.word	0x40012000
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020800 	.word	0x40020800

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <NMI_Handler+0x4>

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <MemManage_Handler+0x4>

080007fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <UsageFault_Handler+0x4>

0800080c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081e:	f000 f897 	bl	8000950 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000822:	f003 f899 	bl	8003958 <xTaskGetSchedulerState>
 8000826:	4603      	mov	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d001      	beq.n	8000830 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800082c:	f003 fe94 	bl	8004558 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	@ (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000890 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800085c:	f7ff ffea 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	@ (8000898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	@ (80008a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000886:	f004 f8ef 	bl	8004a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800088a:	f7ff fe39 	bl	8000500 <main>
  bx  lr    
 800088e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000890:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800089c:	08004b68 	.word	0x08004b68
  ldr r2, =_sbss
 80008a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008a4:	200049d0 	.word	0x200049d0

080008a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC_IRQHandler>
	...

080008ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008b0:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <HAL_Init+0x40>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0d      	ldr	r2, [pc, #52]	@ (80008ec <HAL_Init+0x40>)
 80008b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <HAL_Init+0x40>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <HAL_Init+0x40>)
 80008c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <HAL_Init+0x40>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a07      	ldr	r2, [pc, #28]	@ (80008ec <HAL_Init+0x40>)
 80008ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 fb7f 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 f808 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e0:	f7ff ff10 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023c00 	.word	0x40023c00

080008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_InitTick+0x54>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_InitTick+0x58>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fb89 	bl	8001026 <HAL_SYSTICK_Config>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e00e      	b.n	800093c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d80a      	bhi.n	800093a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f000 fb5f 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000930:	4a06      	ldr	r2, [pc, #24]	@ (800094c <HAL_InitTick+0x5c>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000000 	.word	0x20000000
 8000948:	20000008 	.word	0x20000008
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_IncTick+0x20>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_IncTick+0x24>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <HAL_IncTick+0x24>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000008 	.word	0x20000008
 8000974:	2000007c 	.word	0x2000007c

08000978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <HAL_GetTick+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	2000007c 	.word	0x2000007c

08000990 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d101      	bne.n	80009a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e033      	b.n	8000a0e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d109      	bne.n	80009c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff fed4 	bl	800075c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2200      	movs	r2, #0
 80009be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d118      	bne.n	8000a00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80009d6:	f023 0302 	bic.w	r3, r3, #2
 80009da:	f043 0202 	orr.w	r2, r3, #2
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 f94a 	bl	8000c7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	f023 0303 	bic.w	r3, r3, #3
 80009f6:	f043 0201 	orr.w	r2, r3, #1
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80009fe:	e001      	b.n	8000a04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d101      	bne.n	8000a34 <HAL_ADC_ConfigChannel+0x1c>
 8000a30:	2302      	movs	r3, #2
 8000a32:	e113      	b.n	8000c5c <HAL_ADC_ConfigChannel+0x244>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2201      	movs	r2, #1
 8000a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b09      	cmp	r3, #9
 8000a42:	d925      	bls.n	8000a90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68d9      	ldr	r1, [r3, #12]
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	461a      	mov	r2, r3
 8000a52:	4613      	mov	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4413      	add	r3, r2
 8000a58:	3b1e      	subs	r3, #30
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43da      	mvns	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	400a      	ands	r2, r1
 8000a68:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	68d9      	ldr	r1, [r3, #12]
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4403      	add	r3, r0
 8000a82:	3b1e      	subs	r3, #30
 8000a84:	409a      	lsls	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	e022      	b.n	8000ad6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	6919      	ldr	r1, [r3, #16]
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	400a      	ands	r2, r1
 8000ab2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6919      	ldr	r1, [r3, #16]
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	4403      	add	r3, r0
 8000acc:	409a      	lsls	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d824      	bhi.n	8000b28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	3b05      	subs	r3, #5
 8000af0:	221f      	movs	r2, #31
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	400a      	ands	r2, r1
 8000afe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	3b05      	subs	r3, #5
 8000b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	430a      	orrs	r2, r1
 8000b24:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b26:	e04c      	b.n	8000bc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2b0c      	cmp	r3, #12
 8000b2e:	d824      	bhi.n	8000b7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	3b23      	subs	r3, #35	@ 0x23
 8000b42:	221f      	movs	r2, #31
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43da      	mvns	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	400a      	ands	r2, r1
 8000b50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	4613      	mov	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	3b23      	subs	r3, #35	@ 0x23
 8000b6c:	fa00 f203 	lsl.w	r2, r0, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	430a      	orrs	r2, r1
 8000b76:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b78:	e023      	b.n	8000bc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	3b41      	subs	r3, #65	@ 0x41
 8000b8c:	221f      	movs	r2, #31
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	400a      	ands	r2, r1
 8000b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	3b41      	subs	r3, #65	@ 0x41
 8000bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bc2:	4b29      	ldr	r3, [pc, #164]	@ (8000c68 <HAL_ADC_ConfigChannel+0x250>)
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a28      	ldr	r2, [pc, #160]	@ (8000c6c <HAL_ADC_ConfigChannel+0x254>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d10f      	bne.n	8000bf0 <HAL_ADC_ConfigChannel+0x1d8>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b12      	cmp	r3, #18
 8000bd6:	d10b      	bne.n	8000bf0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c6c <HAL_ADC_ConfigChannel+0x254>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12b      	bne.n	8000c52 <HAL_ADC_ConfigChannel+0x23a>
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000c70 <HAL_ADC_ConfigChannel+0x258>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d003      	beq.n	8000c0c <HAL_ADC_ConfigChannel+0x1f4>
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b11      	cmp	r3, #17
 8000c0a:	d122      	bne.n	8000c52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a11      	ldr	r2, [pc, #68]	@ (8000c70 <HAL_ADC_ConfigChannel+0x258>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d111      	bne.n	8000c52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <HAL_ADC_ConfigChannel+0x25c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a11      	ldr	r2, [pc, #68]	@ (8000c78 <HAL_ADC_ConfigChannel+0x260>)
 8000c34:	fba2 2303 	umull	r2, r3, r2, r3
 8000c38:	0c9a      	lsrs	r2, r3, #18
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000c44:	e002      	b.n	8000c4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1f9      	bne.n	8000c46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40012300 	.word	0x40012300
 8000c6c:	40012000 	.word	0x40012000
 8000c70:	10000012 	.word	0x10000012
 8000c74:	20000000 	.word	0x20000000
 8000c78:	431bde83 	.word	0x431bde83

08000c7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c84:	4b79      	ldr	r3, [pc, #484]	@ (8000e6c <ADC_Init+0x1f0>)
 8000c86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000cb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6859      	ldr	r1, [r3, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	021a      	lsls	r2, r3, #8
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6859      	ldr	r1, [r3, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000cf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6899      	ldr	r1, [r3, #8]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	430a      	orrs	r2, r1
 8000d08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d0e:	4a58      	ldr	r2, [pc, #352]	@ (8000e70 <ADC_Init+0x1f4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d022      	beq.n	8000d5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000d22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6899      	ldr	r1, [r3, #8]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000d44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6899      	ldr	r1, [r3, #8]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	430a      	orrs	r2, r1
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	e00f      	b.n	8000d7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000d78:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0202 	bic.w	r2, r2, #2
 8000d88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6899      	ldr	r1, [r3, #8]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7e1b      	ldrb	r3, [r3, #24]
 8000d94:	005a      	lsls	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d01b      	beq.n	8000de0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000db6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000dc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6859      	ldr	r1, [r3, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	035a      	lsls	r2, r3, #13
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	e007      	b.n	8000df0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000dee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8000dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	051a      	lsls	r2, r3, #20
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6899      	ldr	r1, [r3, #8]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000e32:	025a      	lsls	r2, r3, #9
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6899      	ldr	r1, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	029a      	lsls	r2, r3, #10
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	609a      	str	r2, [r3, #8]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	40012300 	.word	0x40012300
 8000e70:	0f000001 	.word	0x0f000001

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	@ (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	@ (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	@ 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff47 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff5c 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffb0 	bl	8000f94 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e165      	b.n	8001328 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 8154 	bne.w	8001322 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b01      	cmp	r3, #1
 8001084:	d005      	beq.n	8001092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108e:	2b02      	cmp	r3, #2
 8001090:	d130      	bne.n	80010f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	f003 0201 	and.w	r2, r3, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d017      	beq.n	8001130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d123      	bne.n	8001184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	69b9      	ldr	r1, [r7, #24]
 8001180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0203 	and.w	r2, r3, #3
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80ae 	beq.w	8001322 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001340 <HAL_GPIO_Init+0x300>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001340 <HAL_GPIO_Init+0x300>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001340 <HAL_GPIO_Init+0x300>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e2:	4a58      	ldr	r2, [pc, #352]	@ (8001344 <HAL_GPIO_Init+0x304>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4f      	ldr	r2, [pc, #316]	@ (8001348 <HAL_GPIO_Init+0x308>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d025      	beq.n	800125a <HAL_GPIO_Init+0x21a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4e      	ldr	r2, [pc, #312]	@ (800134c <HAL_GPIO_Init+0x30c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d01f      	beq.n	8001256 <HAL_GPIO_Init+0x216>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4d      	ldr	r2, [pc, #308]	@ (8001350 <HAL_GPIO_Init+0x310>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d019      	beq.n	8001252 <HAL_GPIO_Init+0x212>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4c      	ldr	r2, [pc, #304]	@ (8001354 <HAL_GPIO_Init+0x314>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0x20e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4b      	ldr	r2, [pc, #300]	@ (8001358 <HAL_GPIO_Init+0x318>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00d      	beq.n	800124a <HAL_GPIO_Init+0x20a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4a      	ldr	r2, [pc, #296]	@ (800135c <HAL_GPIO_Init+0x31c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x206>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a49      	ldr	r2, [pc, #292]	@ (8001360 <HAL_GPIO_Init+0x320>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_GPIO_Init+0x202>
 800123e:	2306      	movs	r3, #6
 8001240:	e00c      	b.n	800125c <HAL_GPIO_Init+0x21c>
 8001242:	2307      	movs	r3, #7
 8001244:	e00a      	b.n	800125c <HAL_GPIO_Init+0x21c>
 8001246:	2305      	movs	r3, #5
 8001248:	e008      	b.n	800125c <HAL_GPIO_Init+0x21c>
 800124a:	2304      	movs	r3, #4
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x21c>
 800124e:	2303      	movs	r3, #3
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x21c>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x21c>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x21c>
 800125a:	2300      	movs	r3, #0
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	f002 0203 	and.w	r2, r2, #3
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4093      	lsls	r3, r2
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800126c:	4935      	ldr	r1, [pc, #212]	@ (8001344 <HAL_GPIO_Init+0x304>)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127a:	4b3a      	ldr	r3, [pc, #232]	@ (8001364 <HAL_GPIO_Init+0x324>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800129e:	4a31      	ldr	r2, [pc, #196]	@ (8001364 <HAL_GPIO_Init+0x324>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001364 <HAL_GPIO_Init+0x324>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c8:	4a26      	ldr	r2, [pc, #152]	@ (8001364 <HAL_GPIO_Init+0x324>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ce:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <HAL_GPIO_Init+0x324>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001364 <HAL_GPIO_Init+0x324>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001364 <HAL_GPIO_Init+0x324>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800131c:	4a11      	ldr	r2, [pc, #68]	@ (8001364 <HAL_GPIO_Init+0x324>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3301      	adds	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	f67f ae96 	bls.w	800105c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3724      	adds	r7, #36	@ 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40013800 	.word	0x40013800
 8001348:	40020000 	.word	0x40020000
 800134c:	40020400 	.word	0x40020400
 8001350:	40020800 	.word	0x40020800
 8001354:	40020c00 	.word	0x40020c00
 8001358:	40021000 	.word	0x40021000
 800135c:	40021400 	.word	0x40021400
 8001360:	40021800 	.word	0x40021800
 8001364:	40013c00 	.word	0x40013c00

08001368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e0cc      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800137c:	4b68      	ldr	r3, [pc, #416]	@ (8001520 <HAL_RCC_ClockConfig+0x1b8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d90c      	bls.n	80013a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	4b65      	ldr	r3, [pc, #404]	@ (8001520 <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b63      	ldr	r3, [pc, #396]	@ (8001520 <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0b8      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d020      	beq.n	80013f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013bc:	4b59      	ldr	r3, [pc, #356]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	4a58      	ldr	r2, [pc, #352]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013d4:	4b53      	ldr	r3, [pc, #332]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	4a52      	ldr	r2, [pc, #328]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e0:	4b50      	ldr	r3, [pc, #320]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	494d      	ldr	r1, [pc, #308]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d044      	beq.n	8001488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d107      	bne.n	8001416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4b47      	ldr	r3, [pc, #284]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d119      	bne.n	8001446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e07f      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d003      	beq.n	8001426 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001422:	2b03      	cmp	r3, #3
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001426:	4b3f      	ldr	r3, [pc, #252]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d109      	bne.n	8001446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e06f      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001436:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e067      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001446:	4b37      	ldr	r3, [pc, #220]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f023 0203 	bic.w	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4934      	ldr	r1, [pc, #208]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	4313      	orrs	r3, r2
 8001456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001458:	f7ff fa8e 	bl	8000978 <HAL_GetTick>
 800145c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145e:	e00a      	b.n	8001476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001460:	f7ff fa8a 	bl	8000978 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800146e:	4293      	cmp	r3, r2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e04f      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001476:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 020c 	and.w	r2, r3, #12
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	429a      	cmp	r2, r3
 8001486:	d1eb      	bne.n	8001460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001488:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <HAL_RCC_ClockConfig+0x1b8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d20c      	bcs.n	80014b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <HAL_RCC_ClockConfig+0x1b8>)
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <HAL_RCC_ClockConfig+0x1b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d001      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e032      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014bc:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4916      	ldr	r1, [pc, #88]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d009      	beq.n	80014ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	490e      	ldr	r1, [pc, #56]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014ee:	f000 f821 	bl	8001534 <HAL_RCC_GetSysClockFreq>
 80014f2:	4602      	mov	r2, r0
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	490a      	ldr	r1, [pc, #40]	@ (8001528 <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	5ccb      	ldrb	r3, [r1, r3]
 8001502:	fa22 f303 	lsr.w	r3, r2, r3
 8001506:	4a09      	ldr	r2, [pc, #36]	@ (800152c <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f9ee 	bl	80008f0 <HAL_InitTick>

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023c00 	.word	0x40023c00
 8001524:	40023800 	.word	0x40023800
 8001528:	08004b48 	.word	0x08004b48
 800152c:	20000000 	.word	0x20000000
 8001530:	20000004 	.word	0x20000004

08001534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001538:	b0a6      	sub	sp, #152	@ 0x98
 800153a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800155a:	4bc8      	ldr	r3, [pc, #800]	@ (800187c <HAL_RCC_GetSysClockFreq+0x348>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b0c      	cmp	r3, #12
 8001564:	f200 817e 	bhi.w	8001864 <HAL_RCC_GetSysClockFreq+0x330>
 8001568:	a201      	add	r2, pc, #4	@ (adr r2, 8001570 <HAL_RCC_GetSysClockFreq+0x3c>)
 800156a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156e:	bf00      	nop
 8001570:	080015a5 	.word	0x080015a5
 8001574:	08001865 	.word	0x08001865
 8001578:	08001865 	.word	0x08001865
 800157c:	08001865 	.word	0x08001865
 8001580:	080015ad 	.word	0x080015ad
 8001584:	08001865 	.word	0x08001865
 8001588:	08001865 	.word	0x08001865
 800158c:	08001865 	.word	0x08001865
 8001590:	080015b5 	.word	0x080015b5
 8001594:	08001865 	.word	0x08001865
 8001598:	08001865 	.word	0x08001865
 800159c:	08001865 	.word	0x08001865
 80015a0:	0800171f 	.word	0x0800171f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015a4:	4bb6      	ldr	r3, [pc, #728]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x34c>)
 80015a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015aa:	e15f      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ac:	4bb5      	ldr	r3, [pc, #724]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x350>)
 80015ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015b2:	e15b      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b4:	4bb1      	ldr	r3, [pc, #708]	@ (800187c <HAL_RCC_GetSysClockFreq+0x348>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c0:	4bae      	ldr	r3, [pc, #696]	@ (800187c <HAL_RCC_GetSysClockFreq+0x348>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d031      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015cc:	4bab      	ldr	r3, [pc, #684]	@ (800187c <HAL_RCC_GetSysClockFreq+0x348>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	099b      	lsrs	r3, r3, #6
 80015d2:	2200      	movs	r2, #0
 80015d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015de:	663b      	str	r3, [r7, #96]	@ 0x60
 80015e0:	2300      	movs	r3, #0
 80015e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80015e4:	4ba7      	ldr	r3, [pc, #668]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x350>)
 80015e6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015ea:	462a      	mov	r2, r5
 80015ec:	fb03 f202 	mul.w	r2, r3, r2
 80015f0:	2300      	movs	r3, #0
 80015f2:	4621      	mov	r1, r4
 80015f4:	fb01 f303 	mul.w	r3, r1, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	4aa2      	ldr	r2, [pc, #648]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x350>)
 80015fc:	4621      	mov	r1, r4
 80015fe:	fba1 1202 	umull	r1, r2, r1, r2
 8001602:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001604:	460a      	mov	r2, r1
 8001606:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001608:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800160a:	4413      	add	r3, r2
 800160c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800160e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001612:	2200      	movs	r2, #0
 8001614:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001616:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001618:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800161c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001620:	f7fe fdf6 	bl	8000210 <__aeabi_uldivmod>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4613      	mov	r3, r2
 800162a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800162e:	e064      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001630:	4b92      	ldr	r3, [pc, #584]	@ (800187c <HAL_RCC_GetSysClockFreq+0x348>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	099b      	lsrs	r3, r3, #6
 8001636:	2200      	movs	r2, #0
 8001638:	653b      	str	r3, [r7, #80]	@ 0x50
 800163a:	657a      	str	r2, [r7, #84]	@ 0x54
 800163c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800163e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001644:	2300      	movs	r3, #0
 8001646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001648:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800164c:	4622      	mov	r2, r4
 800164e:	462b      	mov	r3, r5
 8001650:	f04f 0000 	mov.w	r0, #0
 8001654:	f04f 0100 	mov.w	r1, #0
 8001658:	0159      	lsls	r1, r3, #5
 800165a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800165e:	0150      	lsls	r0, r2, #5
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4621      	mov	r1, r4
 8001666:	1a51      	subs	r1, r2, r1
 8001668:	6139      	str	r1, [r7, #16]
 800166a:	4629      	mov	r1, r5
 800166c:	eb63 0301 	sbc.w	r3, r3, r1
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800167e:	4659      	mov	r1, fp
 8001680:	018b      	lsls	r3, r1, #6
 8001682:	4651      	mov	r1, sl
 8001684:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001688:	4651      	mov	r1, sl
 800168a:	018a      	lsls	r2, r1, #6
 800168c:	4651      	mov	r1, sl
 800168e:	ebb2 0801 	subs.w	r8, r2, r1
 8001692:	4659      	mov	r1, fp
 8001694:	eb63 0901 	sbc.w	r9, r3, r1
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016ac:	4690      	mov	r8, r2
 80016ae:	4699      	mov	r9, r3
 80016b0:	4623      	mov	r3, r4
 80016b2:	eb18 0303 	adds.w	r3, r8, r3
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	462b      	mov	r3, r5
 80016ba:	eb49 0303 	adc.w	r3, r9, r3
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016cc:	4629      	mov	r1, r5
 80016ce:	028b      	lsls	r3, r1, #10
 80016d0:	4621      	mov	r1, r4
 80016d2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016d6:	4621      	mov	r1, r4
 80016d8:	028a      	lsls	r2, r1, #10
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016e2:	2200      	movs	r2, #0
 80016e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80016e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80016e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80016ec:	f7fe fd90 	bl	8000210 <__aeabi_uldivmod>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4613      	mov	r3, r2
 80016f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016fa:	4b60      	ldr	r3, [pc, #384]	@ (800187c <HAL_RCC_GetSysClockFreq+0x348>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	0c1b      	lsrs	r3, r3, #16
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	3301      	adds	r3, #1
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800170c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001710:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001714:	fbb2 f3f3 	udiv	r3, r2, r3
 8001718:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800171c:	e0a6      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800171e:	4b57      	ldr	r3, [pc, #348]	@ (800187c <HAL_RCC_GetSysClockFreq+0x348>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800172a:	4b54      	ldr	r3, [pc, #336]	@ (800187c <HAL_RCC_GetSysClockFreq+0x348>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d02a      	beq.n	800178c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001736:	4b51      	ldr	r3, [pc, #324]	@ (800187c <HAL_RCC_GetSysClockFreq+0x348>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	099b      	lsrs	r3, r3, #6
 800173c:	2200      	movs	r2, #0
 800173e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001740:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001744:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001748:	2100      	movs	r1, #0
 800174a:	4b4e      	ldr	r3, [pc, #312]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x350>)
 800174c:	fb03 f201 	mul.w	r2, r3, r1
 8001750:	2300      	movs	r3, #0
 8001752:	fb00 f303 	mul.w	r3, r0, r3
 8001756:	4413      	add	r3, r2
 8001758:	4a4a      	ldr	r2, [pc, #296]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x350>)
 800175a:	fba0 1202 	umull	r1, r2, r0, r2
 800175e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001760:	460a      	mov	r2, r1
 8001762:	673a      	str	r2, [r7, #112]	@ 0x70
 8001764:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001766:	4413      	add	r3, r2
 8001768:	677b      	str	r3, [r7, #116]	@ 0x74
 800176a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800176e:	2200      	movs	r2, #0
 8001770:	633b      	str	r3, [r7, #48]	@ 0x30
 8001772:	637a      	str	r2, [r7, #52]	@ 0x34
 8001774:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001778:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800177c:	f7fe fd48 	bl	8000210 <__aeabi_uldivmod>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4613      	mov	r3, r2
 8001786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800178a:	e05b      	b.n	8001844 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178c:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <HAL_RCC_GetSysClockFreq+0x348>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	2200      	movs	r2, #0
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001796:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800179e:	623b      	str	r3, [r7, #32]
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017a8:	4642      	mov	r2, r8
 80017aa:	464b      	mov	r3, r9
 80017ac:	f04f 0000 	mov.w	r0, #0
 80017b0:	f04f 0100 	mov.w	r1, #0
 80017b4:	0159      	lsls	r1, r3, #5
 80017b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ba:	0150      	lsls	r0, r2, #5
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4641      	mov	r1, r8
 80017c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80017c6:	4649      	mov	r1, r9
 80017c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017e0:	ebb2 040a 	subs.w	r4, r2, sl
 80017e4:	eb63 050b 	sbc.w	r5, r3, fp
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	00eb      	lsls	r3, r5, #3
 80017f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017f6:	00e2      	lsls	r2, r4, #3
 80017f8:	4614      	mov	r4, r2
 80017fa:	461d      	mov	r5, r3
 80017fc:	4643      	mov	r3, r8
 80017fe:	18e3      	adds	r3, r4, r3
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	464b      	mov	r3, r9
 8001804:	eb45 0303 	adc.w	r3, r5, r3
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001816:	4629      	mov	r1, r5
 8001818:	028b      	lsls	r3, r1, #10
 800181a:	4621      	mov	r1, r4
 800181c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001820:	4621      	mov	r1, r4
 8001822:	028a      	lsls	r2, r1, #10
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800182c:	2200      	movs	r2, #0
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	61fa      	str	r2, [r7, #28]
 8001832:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001836:	f7fe fceb 	bl	8000210 <__aeabi_uldivmod>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4613      	mov	r3, r2
 8001840:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001844:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <HAL_RCC_GetSysClockFreq+0x348>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	0f1b      	lsrs	r3, r3, #28
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001852:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001856:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001862:	e003      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001866:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800186a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800186c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001870:	4618      	mov	r0, r3
 8001872:	3798      	adds	r7, #152	@ 0x98
 8001874:	46bd      	mov	sp, r7
 8001876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	00f42400 	.word	0x00f42400
 8001884:	017d7840 	.word	0x017d7840

08001888 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e28d      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8083 	beq.w	80019ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018a8:	4b94      	ldr	r3, [pc, #592]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d019      	beq.n	80018e8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018b4:	4b91      	ldr	r3, [pc, #580]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
        || \
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018c0:	4b8e      	ldr	r3, [pc, #568]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018cc:	d00c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ce:	4b8b      	ldr	r3, [pc, #556]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d112      	bne.n	8001900 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018da:	4b88      	ldr	r3, [pc, #544]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018e6:	d10b      	bne.n	8001900 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	4b84      	ldr	r3, [pc, #528]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d05b      	beq.n	80019ac <HAL_RCC_OscConfig+0x124>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d157      	bne.n	80019ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e25a      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001908:	d106      	bne.n	8001918 <HAL_RCC_OscConfig+0x90>
 800190a:	4b7c      	ldr	r3, [pc, #496]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a7b      	ldr	r2, [pc, #492]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e01d      	b.n	8001954 <HAL_RCC_OscConfig+0xcc>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0xb4>
 8001922:	4b76      	ldr	r3, [pc, #472]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a75      	ldr	r2, [pc, #468]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b73      	ldr	r3, [pc, #460]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a72      	ldr	r2, [pc, #456]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0xcc>
 800193c:	4b6f      	ldr	r3, [pc, #444]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6e      	ldr	r2, [pc, #440]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b6c      	ldr	r3, [pc, #432]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6b      	ldr	r2, [pc, #428]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d013      	beq.n	8001984 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff f80c 	bl	8000978 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff f808 	bl	8000978 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	@ 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e21f      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	4b61      	ldr	r3, [pc, #388]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0xdc>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7fe fff8 	bl	8000978 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7fe fff4 	bl	8000978 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	@ 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e20b      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	4b57      	ldr	r3, [pc, #348]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x104>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d06f      	beq.n	8001a9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019ba:	4b50      	ldr	r3, [pc, #320]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d017      	beq.n	80019f6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019c6:	4b4d      	ldr	r3, [pc, #308]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
        || \
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d105      	bne.n	80019de <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019d2:	4b4a      	ldr	r3, [pc, #296]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019de:	4b47      	ldr	r3, [pc, #284]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019e6:	2b0c      	cmp	r3, #12
 80019e8:	d11c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ea:	4b44      	ldr	r3, [pc, #272]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d116      	bne.n	8001a24 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	4b41      	ldr	r3, [pc, #260]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_RCC_OscConfig+0x186>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e1d3      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4937      	ldr	r1, [pc, #220]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	e03a      	b.n	8001a9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d020      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2c:	4b34      	ldr	r3, [pc, #208]	@ (8001b00 <HAL_RCC_OscConfig+0x278>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7fe ffa1 	bl	8000978 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3a:	f7fe ff9d 	bl	8000978 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e1b4      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	4b28      	ldr	r3, [pc, #160]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4925      	ldr	r1, [pc, #148]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
 8001a6c:	e015      	b.n	8001a9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6e:	4b24      	ldr	r3, [pc, #144]	@ (8001b00 <HAL_RCC_OscConfig+0x278>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7fe ff80 	bl	8000978 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7c:	f7fe ff7c 	bl	8000978 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e193      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d036      	beq.n	8001b14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d016      	beq.n	8001adc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <HAL_RCC_OscConfig+0x27c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7fe ff60 	bl	8000978 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001abc:	f7fe ff5c 	bl	8000978 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e173      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <HAL_RCC_OscConfig+0x274>)
 8001ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x234>
 8001ada:	e01b      	b.n	8001b14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <HAL_RCC_OscConfig+0x27c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7fe ff49 	bl	8000978 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	e00e      	b.n	8001b08 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aea:	f7fe ff45 	bl	8000978 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d907      	bls.n	8001b08 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e15c      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
 8001afc:	40023800 	.word	0x40023800
 8001b00:	42470000 	.word	0x42470000
 8001b04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	4b8a      	ldr	r3, [pc, #552]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ea      	bne.n	8001aea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8097 	beq.w	8001c50 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b26:	4b83      	ldr	r3, [pc, #524]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10f      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b7f      	ldr	r3, [pc, #508]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b42:	4b7c      	ldr	r3, [pc, #496]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b52:	4b79      	ldr	r3, [pc, #484]	@ (8001d38 <HAL_RCC_OscConfig+0x4b0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d118      	bne.n	8001b90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5e:	4b76      	ldr	r3, [pc, #472]	@ (8001d38 <HAL_RCC_OscConfig+0x4b0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a75      	ldr	r2, [pc, #468]	@ (8001d38 <HAL_RCC_OscConfig+0x4b0>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6a:	f7fe ff05 	bl	8000978 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b72:	f7fe ff01 	bl	8000978 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e118      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	4b6c      	ldr	r3, [pc, #432]	@ (8001d38 <HAL_RCC_OscConfig+0x4b0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x31e>
 8001b98:	4b66      	ldr	r3, [pc, #408]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9c:	4a65      	ldr	r2, [pc, #404]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba4:	e01c      	b.n	8001be0 <HAL_RCC_OscConfig+0x358>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x340>
 8001bae:	4b61      	ldr	r3, [pc, #388]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb2:	4a60      	ldr	r2, [pc, #384]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bba:	4b5e      	ldr	r3, [pc, #376]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbe:	4a5d      	ldr	r2, [pc, #372]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0x358>
 8001bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bcc:	4a59      	ldr	r2, [pc, #356]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd4:	4b57      	ldr	r3, [pc, #348]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd8:	4a56      	ldr	r2, [pc, #344]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bda:	f023 0304 	bic.w	r3, r3, #4
 8001bde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d015      	beq.n	8001c14 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be8:	f7fe fec6 	bl	8000978 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7fe fec2 	bl	8000978 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e0d7      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c06:	4b4b      	ldr	r3, [pc, #300]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0ee      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x368>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7fe feb0 	bl	8000978 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1c:	f7fe feac 	bl	8000978 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e0c1      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c32:	4b40      	ldr	r3, [pc, #256]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1ee      	bne.n	8001c1c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c44:	4b3b      	ldr	r3, [pc, #236]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	4a3a      	ldr	r2, [pc, #232]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001c4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80ad 	beq.w	8001db4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c5a:	4b36      	ldr	r3, [pc, #216]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d060      	beq.n	8001d28 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d145      	bne.n	8001cfa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b33      	ldr	r3, [pc, #204]	@ (8001d3c <HAL_RCC_OscConfig+0x4b4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7fe fe80 	bl	8000978 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7fe fe7c 	bl	8000978 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e093      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8e:	4b29      	ldr	r3, [pc, #164]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69da      	ldr	r2, [r3, #28]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb0:	085b      	lsrs	r3, r3, #1
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	041b      	lsls	r3, r3, #16
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbc:	061b      	lsls	r3, r3, #24
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	071b      	lsls	r3, r3, #28
 8001cc6:	491b      	ldr	r1, [pc, #108]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <HAL_RCC_OscConfig+0x4b4>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7fe fe51 	bl	8000978 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7fe fe4d 	bl	8000978 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e064      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x452>
 8001cf8:	e05c      	b.n	8001db4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <HAL_RCC_OscConfig+0x4b4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7fe fe3a 	bl	8000978 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7fe fe36 	bl	8000978 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e04d      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x480>
 8001d26:	e045      	b.n	8001db4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e040      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d40:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc0 <HAL_RCC_OscConfig+0x538>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d030      	beq.n	8001db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d129      	bne.n	8001db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d122      	bne.n	8001db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d70:	4013      	ands	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d119      	bne.n	8001db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d10f      	bne.n	8001db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <__NVIC_SetPriority>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	@ (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	@ (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f06f 0004 	mvn.w	r0, #4
 8001e22:	f7ff ffcf 	bl	8001dc4 <__NVIC_SetPriority>
#endif
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e32:	f3ef 8305 	mrs	r3, IPSR
 8001e36:	603b      	str	r3, [r7, #0]
  return(result);
 8001e38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e3e:	f06f 0305 	mvn.w	r3, #5
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	e00c      	b.n	8001e60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <osKernelInitialize+0x44>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d105      	bne.n	8001e5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <osKernelInitialize+0x44>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	e002      	b.n	8001e60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000080 	.word	0x20000080

08001e74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e7a:	f3ef 8305 	mrs	r3, IPSR
 8001e7e:	603b      	str	r3, [r7, #0]
  return(result);
 8001e80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001e86:	f06f 0305 	mvn.w	r3, #5
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	e010      	b.n	8001eb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <osKernelStart+0x48>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d109      	bne.n	8001eaa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e96:	f7ff ffbf 	bl	8001e18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <osKernelStart+0x48>)
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001ea0:	f001 f90c 	bl	80030bc <vTaskStartScheduler>
      stat = osOK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	e002      	b.n	8001eb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001eb0:	687b      	ldr	r3, [r7, #4]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000080 	.word	0x20000080

08001ec0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08e      	sub	sp, #56	@ 0x38
 8001ec4:	af04      	add	r7, sp, #16
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ed0:	f3ef 8305 	mrs	r3, IPSR
 8001ed4:	617b      	str	r3, [r7, #20]
  return(result);
 8001ed6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d17e      	bne.n	8001fda <osThreadNew+0x11a>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d07b      	beq.n	8001fda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001ee6:	2318      	movs	r3, #24
 8001ee8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d045      	beq.n	8001f86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <osThreadNew+0x48>
        name = attr->name;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <osThreadNew+0x6e>
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b38      	cmp	r3, #56	@ 0x38
 8001f20:	d805      	bhi.n	8001f2e <osThreadNew+0x6e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <osThreadNew+0x72>
        return (NULL);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e054      	b.n	8001fdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00e      	beq.n	8001f68 <osThreadNew+0xa8>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001f50:	d90a      	bls.n	8001f68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <osThreadNew+0xa8>
        mem = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	e010      	b.n	8001f8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10c      	bne.n	8001f8a <osThreadNew+0xca>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d108      	bne.n	8001f8a <osThreadNew+0xca>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d104      	bne.n	8001f8a <osThreadNew+0xca>
          mem = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	e001      	b.n	8001f8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d110      	bne.n	8001fb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f98:	9202      	str	r2, [sp, #8]
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	6a3a      	ldr	r2, [r7, #32]
 8001fa4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 feac 	bl	8002d04 <xTaskCreateStatic>
 8001fac:	4603      	mov	r3, r0
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	e013      	b.n	8001fda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d110      	bne.n	8001fda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fefa 	bl	8002dc4 <xTaskCreate>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d001      	beq.n	8001fda <osThreadNew+0x11a>
            hTask = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001fda:	693b      	ldr	r3, [r7, #16]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3728      	adds	r7, #40	@ 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fec:	f3ef 8305 	mrs	r3, IPSR
 8001ff0:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <osDelay+0x1c>
    stat = osErrorISR;
 8001ff8:	f06f 0305 	mvn.w	r3, #5
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	e007      	b.n	8002010 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <osDelay+0x2c>
      vTaskDelay(ticks);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f001 f820 	bl	8003050 <vTaskDelay>
    }
  }

  return (stat);
 8002010:	68fb      	ldr	r3, [r7, #12]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002026:	f3ef 8305 	mrs	r3, IPSR
 800202a:	60fb      	str	r3, [r7, #12]
  return(result);
 800202c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800202e:	2b00      	cmp	r3, #0
 8002030:	d12d      	bne.n	800208e <osEventFlagsNew+0x74>
    mem = -1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d015      	beq.n	800206a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <osEventFlagsNew+0x3a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b1f      	cmp	r3, #31
 800204c:	d902      	bls.n	8002054 <osEventFlagsNew+0x3a>
        mem = 1;
 800204e:	2301      	movs	r3, #1
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	e00c      	b.n	800206e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d108      	bne.n	800206e <osEventFlagsNew+0x54>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d104      	bne.n	800206e <osEventFlagsNew+0x54>
          mem = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e001      	b.n	800206e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d106      	bne.n	8002082 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4618      	mov	r0, r3
 800207a:	f000 f841 	bl	8002100 <xEventGroupCreateStatic>
 800207e:	6178      	str	r0, [r7, #20]
 8002080:	e005      	b.n	800208e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002088:	f000 f873 	bl	8002172 <xEventGroupCreate>
 800208c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800208e:	697b      	ldr	r3, [r7, #20]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4a07      	ldr	r2, [pc, #28]	@ (80020c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80020a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4a06      	ldr	r2, [pc, #24]	@ (80020c8 <vApplicationGetIdleTaskMemory+0x30>)
 80020ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2280      	movs	r2, #128	@ 0x80
 80020b4:	601a      	str	r2, [r3, #0]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000084 	.word	0x20000084
 80020c8:	200000e0 	.word	0x200000e0

080020cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4a07      	ldr	r2, [pc, #28]	@ (80020f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80020dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4a06      	ldr	r2, [pc, #24]	@ (80020fc <vApplicationGetTimerTaskMemory+0x30>)
 80020e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020ea:	601a      	str	r2, [r3, #0]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	200002e0 	.word	0x200002e0
 80020fc:	2000033c 	.word	0x2000033c

08002100 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10b      	bne.n	8002126 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800210e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002112:	f383 8811 	msr	BASEPRI, r3
 8002116:	f3bf 8f6f 	isb	sy
 800211a:	f3bf 8f4f 	dsb	sy
 800211e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	e7fd      	b.n	8002122 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002126:	2320      	movs	r3, #32
 8002128:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b20      	cmp	r3, #32
 800212e:	d00b      	beq.n	8002148 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8002130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002134:	f383 8811 	msr	BASEPRI, r3
 8002138:	f3bf 8f6f 	isb	sy
 800213c:	f3bf 8f4f 	dsb	sy
 8002140:	60fb      	str	r3, [r7, #12]
}
 8002142:	bf00      	nop
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3304      	adds	r3, #4
 800215c:	4618      	mov	r0, r3
 800215e:	f000 f822 	bl	80021a6 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2201      	movs	r2, #1
 8002166:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8002168:	697b      	ldr	r3, [r7, #20]
	}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002178:	2020      	movs	r0, #32
 800217a:	f002 fa7f 	bl	800467c <pvPortMalloc>
 800217e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3304      	adds	r3, #4
 8002190:	4618      	mov	r0, r3
 8002192:	f000 f808 	bl	80021a6 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800219c:	687b      	ldr	r3, [r7, #4]
	}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f103 0208 	add.w	r2, r3, #8
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f04f 32ff 	mov.w	r2, #4294967295
 80021be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f103 0208 	add.w	r2, r3, #8
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f103 0208 	add.w	r2, r3, #8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225e:	d103      	bne.n	8002268 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e00c      	b.n	8002282 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3308      	adds	r3, #8
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	e002      	b.n	8002276 <vListInsert+0x2e>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	429a      	cmp	r2, r3
 8002280:	d2f6      	bcs.n	8002270 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	601a      	str	r2, [r3, #0]
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022ba:	b480      	push	{r7}
 80022bc:	b085      	sub	sp, #20
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6892      	ldr	r2, [r2, #8]
 80022d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6852      	ldr	r2, [r2, #4]
 80022da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d103      	bne.n	80022ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	1e5a      	subs	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10b      	bne.n	800233c <xQueueGenericReset+0x2c>
	__asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	60bb      	str	r3, [r7, #8]
}
 8002336:	bf00      	nop
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800233c:	f002 f87c 	bl	8004438 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002348:	68f9      	ldr	r1, [r7, #12]
 800234a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	441a      	add	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236c:	3b01      	subs	r3, #1
 800236e:	68f9      	ldr	r1, [r7, #12]
 8002370:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	441a      	add	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	22ff      	movs	r2, #255	@ 0xff
 8002380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	22ff      	movs	r2, #255	@ 0xff
 8002388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d114      	bne.n	80023bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d01a      	beq.n	80023d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3310      	adds	r3, #16
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 f91a 	bl	80035d8 <xTaskRemoveFromEventList>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d012      	beq.n	80023d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80023aa:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <xQueueGenericReset+0xd0>)
 80023ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	e009      	b.n	80023d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3310      	adds	r3, #16
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fef0 	bl	80021a6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3324      	adds	r3, #36	@ 0x24
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff feeb 	bl	80021a6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023d0:	f002 f864 	bl	800449c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023d4:	2301      	movs	r3, #1
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	e000ed04 	.word	0xe000ed04

080023e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08e      	sub	sp, #56	@ 0x38
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80023f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800240a:	bf00      	nop
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10b      	bne.n	800242e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	e7fd      	b.n	800242a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <xQueueGenericCreateStatic+0x56>
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <xQueueGenericCreateStatic+0x5a>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <xQueueGenericCreateStatic+0x5c>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	623b      	str	r3, [r7, #32]
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <xQueueGenericCreateStatic+0x84>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <xQueueGenericCreateStatic+0x88>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <xQueueGenericCreateStatic+0x8a>
 800246c:	2300      	movs	r3, #0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	61fb      	str	r3, [r7, #28]
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	e7fd      	b.n	8002486 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800248a:	2350      	movs	r3, #80	@ 0x50
 800248c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b50      	cmp	r3, #80	@ 0x50
 8002492:	d00b      	beq.n	80024ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	61bb      	str	r3, [r7, #24]
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80024ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80024b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00d      	beq.n	80024d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80024b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80024c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f805 	bl	80024de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80024d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3730      	adds	r7, #48	@ 0x30
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e002      	b.n	8002500 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800250c:	2101      	movs	r1, #1
 800250e:	69b8      	ldr	r0, [r7, #24]
 8002510:	f7ff fefe 	bl	8002310 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08e      	sub	sp, #56	@ 0x38
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002532:	2300      	movs	r3, #0
 8002534:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800253a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10b      	bne.n	8002558 <xQueueGenericSend+0x34>
	__asm volatile
 8002540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002544:	f383 8811 	msr	BASEPRI, r3
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002552:	bf00      	nop
 8002554:	bf00      	nop
 8002556:	e7fd      	b.n	8002554 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <xQueueGenericSend+0x42>
 800255e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <xQueueGenericSend+0x46>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <xQueueGenericSend+0x48>
 800256a:	2300      	movs	r3, #0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10b      	bne.n	8002588 <xQueueGenericSend+0x64>
	__asm volatile
 8002570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002582:	bf00      	nop
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d103      	bne.n	8002596 <xQueueGenericSend+0x72>
 800258e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <xQueueGenericSend+0x76>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <xQueueGenericSend+0x78>
 800259a:	2300      	movs	r3, #0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10b      	bne.n	80025b8 <xQueueGenericSend+0x94>
	__asm volatile
 80025a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	623b      	str	r3, [r7, #32]
}
 80025b2:	bf00      	nop
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025b8:	f001 f9ce 	bl	8003958 <xTaskGetSchedulerState>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <xQueueGenericSend+0xa4>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <xQueueGenericSend+0xa8>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <xQueueGenericSend+0xaa>
 80025cc:	2300      	movs	r3, #0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10b      	bne.n	80025ea <xQueueGenericSend+0xc6>
	__asm volatile
 80025d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	61fb      	str	r3, [r7, #28]
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	e7fd      	b.n	80025e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025ea:	f001 ff25 	bl	8004438 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d302      	bcc.n	8002600 <xQueueGenericSend+0xdc>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d129      	bne.n	8002654 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002606:	f000 fa0f 	bl	8002a28 <prvCopyDataToQueue>
 800260a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800260c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002616:	3324      	adds	r3, #36	@ 0x24
 8002618:	4618      	mov	r0, r3
 800261a:	f000 ffdd 	bl	80035d8 <xTaskRemoveFromEventList>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002624:	4b3f      	ldr	r3, [pc, #252]	@ (8002724 <xQueueGenericSend+0x200>)
 8002626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	f3bf 8f6f 	isb	sy
 8002634:	e00a      	b.n	800264c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800263c:	4b39      	ldr	r3, [pc, #228]	@ (8002724 <xQueueGenericSend+0x200>)
 800263e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800264c:	f001 ff26 	bl	800449c <vPortExitCritical>
				return pdPASS;
 8002650:	2301      	movs	r3, #1
 8002652:	e063      	b.n	800271c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800265a:	f001 ff1f 	bl	800449c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800265e:	2300      	movs	r3, #0
 8002660:	e05c      	b.n	800271c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4618      	mov	r0, r3
 800266e:	f001 f817 	bl	80036a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002672:	2301      	movs	r3, #1
 8002674:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002676:	f001 ff11 	bl	800449c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800267a:	f000 fd87 	bl	800318c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800267e:	f001 fedb 	bl	8004438 <vPortEnterCritical>
 8002682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002684:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002688:	b25b      	sxtb	r3, r3
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d103      	bne.n	8002698 <xQueueGenericSend+0x174>
 8002690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800269a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d103      	bne.n	80026ae <xQueueGenericSend+0x18a>
 80026a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026ae:	f001 fef5 	bl	800449c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026b2:	1d3a      	adds	r2, r7, #4
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 f806 	bl	80036cc <xTaskCheckForTimeOut>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d124      	bne.n	8002710 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026c8:	f000 faa6 	bl	8002c18 <prvIsQueueFull>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d018      	beq.n	8002704 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d4:	3310      	adds	r3, #16
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 ff2a 	bl	8003534 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026e2:	f000 fa31 	bl	8002b48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026e6:	f000 fd5f 	bl	80031a8 <xTaskResumeAll>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f47f af7c 	bne.w	80025ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80026f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <xQueueGenericSend+0x200>)
 80026f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	e772      	b.n	80025ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002704:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002706:	f000 fa1f 	bl	8002b48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800270a:	f000 fd4d 	bl	80031a8 <xTaskResumeAll>
 800270e:	e76c      	b.n	80025ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002710:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002712:	f000 fa19 	bl	8002b48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002716:	f000 fd47 	bl	80031a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800271a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800271c:	4618      	mov	r0, r3
 800271e:	3738      	adds	r7, #56	@ 0x38
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	e000ed04 	.word	0xe000ed04

08002728 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b090      	sub	sp, #64	@ 0x40
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800273a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10b      	bne.n	8002758 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002744:	f383 8811 	msr	BASEPRI, r3
 8002748:	f3bf 8f6f 	isb	sy
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002752:	bf00      	nop
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <xQueueGenericSendFromISR+0x3e>
 800275e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <xQueueGenericSendFromISR+0x42>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <xQueueGenericSendFromISR+0x44>
 800276a:	2300      	movs	r3, #0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10b      	bne.n	8002788 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d103      	bne.n	8002796 <xQueueGenericSendFromISR+0x6e>
 800278e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <xQueueGenericSendFromISR+0x72>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <xQueueGenericSendFromISR+0x74>
 800279a:	2300      	movs	r3, #0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	623b      	str	r3, [r7, #32]
}
 80027b2:	bf00      	nop
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027b8:	f001 ff1e 	bl	80045f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80027bc:	f3ef 8211 	mrs	r2, BASEPRI
 80027c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	61fa      	str	r2, [r7, #28]
 80027d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80027d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d302      	bcc.n	80027ea <xQueueGenericSendFromISR+0xc2>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d12f      	bne.n	800284a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002800:	f000 f912 	bl	8002a28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002804:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d112      	bne.n	8002834 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800280e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	2b00      	cmp	r3, #0
 8002814:	d016      	beq.n	8002844 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002818:	3324      	adds	r3, #36	@ 0x24
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fedc 	bl	80035d8 <xTaskRemoveFromEventList>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00e      	beq.n	8002844 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00b      	beq.n	8002844 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e007      	b.n	8002844 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002834:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002838:	3301      	adds	r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	b25a      	sxtb	r2, r3
 800283e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002844:	2301      	movs	r3, #1
 8002846:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002848:	e001      	b.n	800284e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800284a:	2300      	movs	r3, #0
 800284c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800284e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002850:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002858:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800285a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800285c:	4618      	mov	r0, r3
 800285e:	3740      	adds	r7, #64	@ 0x40
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	@ 0x30
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002870:	2300      	movs	r3, #0
 8002872:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10b      	bne.n	8002896 <xQueueReceive+0x32>
	__asm volatile
 800287e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	623b      	str	r3, [r7, #32]
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	e7fd      	b.n	8002892 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d103      	bne.n	80028a4 <xQueueReceive+0x40>
 800289c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <xQueueReceive+0x44>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <xQueueReceive+0x46>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10b      	bne.n	80028c6 <xQueueReceive+0x62>
	__asm volatile
 80028ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	61fb      	str	r3, [r7, #28]
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	e7fd      	b.n	80028c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028c6:	f001 f847 	bl	8003958 <xTaskGetSchedulerState>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <xQueueReceive+0x72>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <xQueueReceive+0x76>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <xQueueReceive+0x78>
 80028da:	2300      	movs	r3, #0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10b      	bne.n	80028f8 <xQueueReceive+0x94>
	__asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	61bb      	str	r3, [r7, #24]
}
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028f8:	f001 fd9e 	bl	8004438 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002900:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01f      	beq.n	8002948 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800290c:	f000 f8f6 	bl	8002afc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	1e5a      	subs	r2, r3, #1
 8002914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002916:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00f      	beq.n	8002940 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002922:	3310      	adds	r3, #16
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fe57 	bl	80035d8 <xTaskRemoveFromEventList>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002930:	4b3c      	ldr	r3, [pc, #240]	@ (8002a24 <xQueueReceive+0x1c0>)
 8002932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002940:	f001 fdac 	bl	800449c <vPortExitCritical>
				return pdPASS;
 8002944:	2301      	movs	r3, #1
 8002946:	e069      	b.n	8002a1c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800294e:	f001 fda5 	bl	800449c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002952:	2300      	movs	r3, #0
 8002954:	e062      	b.n	8002a1c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d106      	bne.n	800296a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800295c:	f107 0310 	add.w	r3, r7, #16
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fe9d 	bl	80036a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002966:	2301      	movs	r3, #1
 8002968:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800296a:	f001 fd97 	bl	800449c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800296e:	f000 fc0d 	bl	800318c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002972:	f001 fd61 	bl	8004438 <vPortEnterCritical>
 8002976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002978:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800297c:	b25b      	sxtb	r3, r3
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002982:	d103      	bne.n	800298c <xQueueReceive+0x128>
 8002984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002992:	b25b      	sxtb	r3, r3
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d103      	bne.n	80029a2 <xQueueReceive+0x13e>
 800299a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029a2:	f001 fd7b 	bl	800449c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029a6:	1d3a      	adds	r2, r7, #4
 80029a8:	f107 0310 	add.w	r3, r7, #16
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fe8c 	bl	80036cc <xTaskCheckForTimeOut>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d123      	bne.n	8002a02 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029bc:	f000 f916 	bl	8002bec <prvIsQueueEmpty>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d017      	beq.n	80029f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c8:	3324      	adds	r3, #36	@ 0x24
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fdb0 	bl	8003534 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029d6:	f000 f8b7 	bl	8002b48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029da:	f000 fbe5 	bl	80031a8 <xTaskResumeAll>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d189      	bne.n	80028f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80029e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a24 <xQueueReceive+0x1c0>)
 80029e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	e780      	b.n	80028f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029f8:	f000 f8a6 	bl	8002b48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029fc:	f000 fbd4 	bl	80031a8 <xTaskResumeAll>
 8002a00:	e77a      	b.n	80028f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a04:	f000 f8a0 	bl	8002b48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a08:	f000 fbce 	bl	80031a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a0e:	f000 f8ed 	bl	8002bec <prvIsQueueEmpty>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f43f af6f 	beq.w	80028f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3730      	adds	r7, #48	@ 0x30
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	e000ed04 	.word	0xe000ed04

08002a28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10d      	bne.n	8002a62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d14d      	bne.n	8002aea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 ff9e 	bl	8003994 <xTaskPriorityDisinherit>
 8002a58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	e043      	b.n	8002aea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d119      	bne.n	8002a9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6858      	ldr	r0, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	461a      	mov	r2, r3
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	f002 f81c 	bl	8004ab0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	441a      	add	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d32b      	bcc.n	8002aea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e026      	b.n	8002aea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	68d8      	ldr	r0, [r3, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	f002 f802 	bl	8004ab0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	425b      	negs	r3, r3
 8002ab6:	441a      	add	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d207      	bcs.n	8002ad8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	425b      	negs	r3, r3
 8002ad2:	441a      	add	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d105      	bne.n	8002aea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002af2:	697b      	ldr	r3, [r7, #20]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d018      	beq.n	8002b40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	441a      	add	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d303      	bcc.n	8002b30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68d9      	ldr	r1, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	461a      	mov	r2, r3
 8002b3a:	6838      	ldr	r0, [r7, #0]
 8002b3c:	f001 ffb8 	bl	8004ab0 <memcpy>
	}
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b50:	f001 fc72 	bl	8004438 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b5c:	e011      	b.n	8002b82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d012      	beq.n	8002b8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3324      	adds	r3, #36	@ 0x24
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fd34 	bl	80035d8 <xTaskRemoveFromEventList>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b76:	f000 fe0d 	bl	8003794 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	dce9      	bgt.n	8002b5e <prvUnlockQueue+0x16>
 8002b8a:	e000      	b.n	8002b8e <prvUnlockQueue+0x46>
					break;
 8002b8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	22ff      	movs	r2, #255	@ 0xff
 8002b92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002b96:	f001 fc81 	bl	800449c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b9a:	f001 fc4d 	bl	8004438 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ba4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ba6:	e011      	b.n	8002bcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3310      	adds	r3, #16
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fd0f 	bl	80035d8 <xTaskRemoveFromEventList>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002bc0:	f000 fde8 	bl	8003794 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002bc4:	7bbb      	ldrb	r3, [r7, #14]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	dce9      	bgt.n	8002ba8 <prvUnlockQueue+0x60>
 8002bd4:	e000      	b.n	8002bd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002bd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	22ff      	movs	r2, #255	@ 0xff
 8002bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002be0:	f001 fc5c 	bl	800449c <vPortExitCritical>
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bf4:	f001 fc20 	bl	8004438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c00:	2301      	movs	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e001      	b.n	8002c0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c0a:	f001 fc47 	bl	800449c <vPortExitCritical>

	return xReturn;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c20:	f001 fc0a 	bl	8004438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d102      	bne.n	8002c36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002c30:	2301      	movs	r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	e001      	b.n	8002c3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c3a:	f001 fc2f 	bl	800449c <vPortExitCritical>

	return xReturn;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e014      	b.n	8002c82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c58:	4a0f      	ldr	r2, [pc, #60]	@ (8002c98 <vQueueAddToRegistry+0x50>)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10b      	bne.n	8002c7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c64:	490c      	ldr	r1, [pc, #48]	@ (8002c98 <vQueueAddToRegistry+0x50>)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <vQueueAddToRegistry+0x50>)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c7a:	e006      	b.n	8002c8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b07      	cmp	r3, #7
 8002c86:	d9e7      	bls.n	8002c58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	2000073c 	.word	0x2000073c

08002c9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002cac:	f001 fbc4 	bl	8004438 <vPortEnterCritical>
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cb6:	b25b      	sxtb	r3, r3
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d103      	bne.n	8002cc6 <vQueueWaitForMessageRestricted+0x2a>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ccc:	b25b      	sxtb	r3, r3
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	d103      	bne.n	8002cdc <vQueueWaitForMessageRestricted+0x40>
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cdc:	f001 fbde 	bl	800449c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	3324      	adds	r3, #36	@ 0x24
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fc45 	bl	8003580 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002cf6:	6978      	ldr	r0, [r7, #20]
 8002cf8:	f7ff ff26 	bl	8002b48 <prvUnlockQueue>
	}
 8002cfc:	bf00      	nop
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08e      	sub	sp, #56	@ 0x38
 8002d08:	af04      	add	r7, sp, #16
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	623b      	str	r3, [r7, #32]
}
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10b      	bne.n	8002d4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	61fb      	str	r3, [r7, #28]
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	e7fd      	b.n	8002d4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d4e:	235c      	movs	r3, #92	@ 0x5c
 8002d50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	2b5c      	cmp	r3, #92	@ 0x5c
 8002d56:	d00b      	beq.n	8002d70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	61bb      	str	r3, [r7, #24]
}
 8002d6a:	bf00      	nop
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01e      	beq.n	8002db6 <xTaskCreateStatic+0xb2>
 8002d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01b      	beq.n	8002db6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d90:	2300      	movs	r3, #0
 8002d92:	9303      	str	r3, [sp, #12]
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	9302      	str	r3, [sp, #8]
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f850 	bl	8002e4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002db0:	f000 f8de 	bl	8002f70 <prvAddNewTaskToReadyList>
 8002db4:	e001      	b.n	8002dba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002dba:	697b      	ldr	r3, [r7, #20]
	}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3728      	adds	r7, #40	@ 0x28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	@ 0x30
 8002dc8:	af04      	add	r7, sp, #16
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 fc4f 	bl	800467c <pvPortMalloc>
 8002dde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00e      	beq.n	8002e04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002de6:	205c      	movs	r0, #92	@ 0x5c
 8002de8:	f001 fc48 	bl	800467c <pvPortMalloc>
 8002dec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dfa:	e005      	b.n	8002e08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dfc:	6978      	ldr	r0, [r7, #20]
 8002dfe:	f001 fd0b 	bl	8004818 <vPortFree>
 8002e02:	e001      	b.n	8002e08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d017      	beq.n	8002e3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e16:	88fa      	ldrh	r2, [r7, #6]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9303      	str	r3, [sp, #12]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	9302      	str	r3, [sp, #8]
 8002e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f80e 	bl	8002e4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e32:	69f8      	ldr	r0, [r7, #28]
 8002e34:	f000 f89c 	bl	8002f70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	e002      	b.n	8002e44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e44:	69bb      	ldr	r3, [r7, #24]
	}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b088      	sub	sp, #32
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	461a      	mov	r2, r3
 8002e66:	21a5      	movs	r1, #165	@ 0xa5
 8002e68:	f001 fdf6 	bl	8004a58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e76:	3b01      	subs	r3, #1
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f023 0307 	bic.w	r3, r3, #7
 8002e84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	617b      	str	r3, [r7, #20]
}
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01f      	beq.n	8002eee <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	e012      	b.n	8002eda <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	4413      	add	r3, r2
 8002eba:	7819      	ldrb	r1, [r3, #0]
 8002ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3334      	adds	r3, #52	@ 0x34
 8002ec4:	460a      	mov	r2, r1
 8002ec6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	4413      	add	r3, r2
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d006      	beq.n	8002ee2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	2b0f      	cmp	r3, #15
 8002ede:	d9e9      	bls.n	8002eb4 <prvInitialiseNewTask+0x66>
 8002ee0:	e000      	b.n	8002ee4 <prvInitialiseNewTask+0x96>
			{
				break;
 8002ee2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002eec:	e003      	b.n	8002ef6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef8:	2b37      	cmp	r3, #55	@ 0x37
 8002efa:	d901      	bls.n	8002f00 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002efc:	2337      	movs	r3, #55	@ 0x37
 8002efe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f04:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f0a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0e:	2200      	movs	r2, #0
 8002f10:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f14:	3304      	adds	r3, #4
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff f965 	bl	80021e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1e:	3318      	adds	r3, #24
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff f960 	bl	80021e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f3a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3e:	2200      	movs	r2, #0
 8002f40:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	68f9      	ldr	r1, [r7, #12]
 8002f4e:	69b8      	ldr	r0, [r7, #24]
 8002f50:	f001 f93e 	bl	80041d0 <pxPortInitialiseStack>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f66:	bf00      	nop
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f78:	f001 fa5e 	bl	8004438 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003034 <prvAddNewTaskToReadyList+0xc4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	4a2c      	ldr	r2, [pc, #176]	@ (8003034 <prvAddNewTaskToReadyList+0xc4>)
 8002f84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f86:	4b2c      	ldr	r3, [pc, #176]	@ (8003038 <prvAddNewTaskToReadyList+0xc8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003038 <prvAddNewTaskToReadyList+0xc8>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f94:	4b27      	ldr	r3, [pc, #156]	@ (8003034 <prvAddNewTaskToReadyList+0xc4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d110      	bne.n	8002fbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f9c:	f000 fc1e 	bl	80037dc <prvInitialiseTaskLists>
 8002fa0:	e00d      	b.n	8002fbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fa2:	4b26      	ldr	r3, [pc, #152]	@ (800303c <prvAddNewTaskToReadyList+0xcc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002faa:	4b23      	ldr	r3, [pc, #140]	@ (8003038 <prvAddNewTaskToReadyList+0xc8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d802      	bhi.n	8002fbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <prvAddNewTaskToReadyList+0xc8>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fbe:	4b20      	ldr	r3, [pc, #128]	@ (8003040 <prvAddNewTaskToReadyList+0xd0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003040 <prvAddNewTaskToReadyList+0xd0>)
 8002fc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003040 <prvAddNewTaskToReadyList+0xd0>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003044 <prvAddNewTaskToReadyList+0xd4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d903      	bls.n	8002fe4 <prvAddNewTaskToReadyList+0x74>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe0:	4a18      	ldr	r2, [pc, #96]	@ (8003044 <prvAddNewTaskToReadyList+0xd4>)
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4a15      	ldr	r2, [pc, #84]	@ (8003048 <prvAddNewTaskToReadyList+0xd8>)
 8002ff2:	441a      	add	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f7ff f900 	bl	8002200 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003000:	f001 fa4c 	bl	800449c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003004:	4b0d      	ldr	r3, [pc, #52]	@ (800303c <prvAddNewTaskToReadyList+0xcc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00e      	beq.n	800302a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800300c:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <prvAddNewTaskToReadyList+0xc8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003016:	429a      	cmp	r2, r3
 8003018:	d207      	bcs.n	800302a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800301a:	4b0c      	ldr	r3, [pc, #48]	@ (800304c <prvAddNewTaskToReadyList+0xdc>)
 800301c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000c50 	.word	0x20000c50
 8003038:	2000077c 	.word	0x2000077c
 800303c:	20000c5c 	.word	0x20000c5c
 8003040:	20000c6c 	.word	0x20000c6c
 8003044:	20000c58 	.word	0x20000c58
 8003048:	20000780 	.word	0x20000780
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d018      	beq.n	8003094 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003062:	4b14      	ldr	r3, [pc, #80]	@ (80030b4 <vTaskDelay+0x64>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <vTaskDelay+0x32>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	60bb      	str	r3, [r7, #8]
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	e7fd      	b.n	800307e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003082:	f000 f883 	bl	800318c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003086:	2100      	movs	r1, #0
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fcf3 	bl	8003a74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800308e:	f000 f88b 	bl	80031a8 <xTaskResumeAll>
 8003092:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d107      	bne.n	80030aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800309a:	4b07      	ldr	r3, [pc, #28]	@ (80030b8 <vTaskDelay+0x68>)
 800309c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000c78 	.word	0x20000c78
 80030b8:	e000ed04 	.word	0xe000ed04

080030bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28
 80030c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030ca:	463a      	mov	r2, r7
 80030cc:	1d39      	adds	r1, r7, #4
 80030ce:	f107 0308 	add.w	r3, r7, #8
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe ffe0 	bl	8002098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	9202      	str	r2, [sp, #8]
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	2300      	movs	r3, #0
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	2300      	movs	r3, #0
 80030e8:	460a      	mov	r2, r1
 80030ea:	4922      	ldr	r1, [pc, #136]	@ (8003174 <vTaskStartScheduler+0xb8>)
 80030ec:	4822      	ldr	r0, [pc, #136]	@ (8003178 <vTaskStartScheduler+0xbc>)
 80030ee:	f7ff fe09 	bl	8002d04 <xTaskCreateStatic>
 80030f2:	4603      	mov	r3, r0
 80030f4:	4a21      	ldr	r2, [pc, #132]	@ (800317c <vTaskStartScheduler+0xc0>)
 80030f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030f8:	4b20      	ldr	r3, [pc, #128]	@ (800317c <vTaskStartScheduler+0xc0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003100:	2301      	movs	r3, #1
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	e001      	b.n	800310a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d102      	bne.n	8003116 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003110:	f000 fd04 	bl	8003b1c <xTimerCreateTimerTask>
 8003114:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d116      	bne.n	800314a <vTaskStartScheduler+0x8e>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	613b      	str	r3, [r7, #16]
}
 800312e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003130:	4b13      	ldr	r3, [pc, #76]	@ (8003180 <vTaskStartScheduler+0xc4>)
 8003132:	f04f 32ff 	mov.w	r2, #4294967295
 8003136:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003138:	4b12      	ldr	r3, [pc, #72]	@ (8003184 <vTaskStartScheduler+0xc8>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800313e:	4b12      	ldr	r3, [pc, #72]	@ (8003188 <vTaskStartScheduler+0xcc>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003144:	f001 f8d4 	bl	80042f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003148:	e00f      	b.n	800316a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d10b      	bne.n	800316a <vTaskStartScheduler+0xae>
	__asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	60fb      	str	r3, [r7, #12]
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	e7fd      	b.n	8003166 <vTaskStartScheduler+0xaa>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	08004afc 	.word	0x08004afc
 8003178:	080037ad 	.word	0x080037ad
 800317c:	20000c74 	.word	0x20000c74
 8003180:	20000c70 	.word	0x20000c70
 8003184:	20000c5c 	.word	0x20000c5c
 8003188:	20000c54 	.word	0x20000c54

0800318c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003190:	4b04      	ldr	r3, [pc, #16]	@ (80031a4 <vTaskSuspendAll+0x18>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	4a03      	ldr	r2, [pc, #12]	@ (80031a4 <vTaskSuspendAll+0x18>)
 8003198:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000c78 	.word	0x20000c78

080031a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031b6:	4b42      	ldr	r3, [pc, #264]	@ (80032c0 <xTaskResumeAll+0x118>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10b      	bne.n	80031d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	603b      	str	r3, [r7, #0]
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	e7fd      	b.n	80031d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031d6:	f001 f92f 	bl	8004438 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031da:	4b39      	ldr	r3, [pc, #228]	@ (80032c0 <xTaskResumeAll+0x118>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3b01      	subs	r3, #1
 80031e0:	4a37      	ldr	r2, [pc, #220]	@ (80032c0 <xTaskResumeAll+0x118>)
 80031e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031e4:	4b36      	ldr	r3, [pc, #216]	@ (80032c0 <xTaskResumeAll+0x118>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d162      	bne.n	80032b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031ec:	4b35      	ldr	r3, [pc, #212]	@ (80032c4 <xTaskResumeAll+0x11c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d05e      	beq.n	80032b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031f4:	e02f      	b.n	8003256 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f6:	4b34      	ldr	r3, [pc, #208]	@ (80032c8 <xTaskResumeAll+0x120>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3318      	adds	r3, #24
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff f859 	bl	80022ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3304      	adds	r3, #4
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff f854 	bl	80022ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003216:	4b2d      	ldr	r3, [pc, #180]	@ (80032cc <xTaskResumeAll+0x124>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d903      	bls.n	8003226 <xTaskResumeAll+0x7e>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003222:	4a2a      	ldr	r2, [pc, #168]	@ (80032cc <xTaskResumeAll+0x124>)
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4a27      	ldr	r2, [pc, #156]	@ (80032d0 <xTaskResumeAll+0x128>)
 8003234:	441a      	add	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3304      	adds	r3, #4
 800323a:	4619      	mov	r1, r3
 800323c:	4610      	mov	r0, r2
 800323e:	f7fe ffdf 	bl	8002200 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003246:	4b23      	ldr	r3, [pc, #140]	@ (80032d4 <xTaskResumeAll+0x12c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	429a      	cmp	r2, r3
 800324e:	d302      	bcc.n	8003256 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003250:	4b21      	ldr	r3, [pc, #132]	@ (80032d8 <xTaskResumeAll+0x130>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003256:	4b1c      	ldr	r3, [pc, #112]	@ (80032c8 <xTaskResumeAll+0x120>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1cb      	bne.n	80031f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003264:	f000 fb58 	bl	8003918 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003268:	4b1c      	ldr	r3, [pc, #112]	@ (80032dc <xTaskResumeAll+0x134>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d010      	beq.n	8003296 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003274:	f000 f846 	bl	8003304 <xTaskIncrementTick>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800327e:	4b16      	ldr	r3, [pc, #88]	@ (80032d8 <xTaskResumeAll+0x130>)
 8003280:	2201      	movs	r2, #1
 8003282:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f1      	bne.n	8003274 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003290:	4b12      	ldr	r3, [pc, #72]	@ (80032dc <xTaskResumeAll+0x134>)
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003296:	4b10      	ldr	r3, [pc, #64]	@ (80032d8 <xTaskResumeAll+0x130>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800329e:	2301      	movs	r3, #1
 80032a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032a2:	4b0f      	ldr	r3, [pc, #60]	@ (80032e0 <xTaskResumeAll+0x138>)
 80032a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032b2:	f001 f8f3 	bl	800449c <vPortExitCritical>

	return xAlreadyYielded;
 80032b6:	68bb      	ldr	r3, [r7, #8]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20000c78 	.word	0x20000c78
 80032c4:	20000c50 	.word	0x20000c50
 80032c8:	20000c10 	.word	0x20000c10
 80032cc:	20000c58 	.word	0x20000c58
 80032d0:	20000780 	.word	0x20000780
 80032d4:	2000077c 	.word	0x2000077c
 80032d8:	20000c64 	.word	0x20000c64
 80032dc:	20000c60 	.word	0x20000c60
 80032e0:	e000ed04 	.word	0xe000ed04

080032e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80032ea:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <xTaskGetTickCount+0x1c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80032f0:	687b      	ldr	r3, [r7, #4]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000c54 	.word	0x20000c54

08003304 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800330e:	4b4f      	ldr	r3, [pc, #316]	@ (800344c <xTaskIncrementTick+0x148>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 8090 	bne.w	8003438 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003318:	4b4d      	ldr	r3, [pc, #308]	@ (8003450 <xTaskIncrementTick+0x14c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003320:	4a4b      	ldr	r2, [pc, #300]	@ (8003450 <xTaskIncrementTick+0x14c>)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d121      	bne.n	8003370 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800332c:	4b49      	ldr	r3, [pc, #292]	@ (8003454 <xTaskIncrementTick+0x150>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	603b      	str	r3, [r7, #0]
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	e7fd      	b.n	800334a <xTaskIncrementTick+0x46>
 800334e:	4b41      	ldr	r3, [pc, #260]	@ (8003454 <xTaskIncrementTick+0x150>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	4b40      	ldr	r3, [pc, #256]	@ (8003458 <xTaskIncrementTick+0x154>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a3e      	ldr	r2, [pc, #248]	@ (8003454 <xTaskIncrementTick+0x150>)
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4a3e      	ldr	r2, [pc, #248]	@ (8003458 <xTaskIncrementTick+0x154>)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b3e      	ldr	r3, [pc, #248]	@ (800345c <xTaskIncrementTick+0x158>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	4a3c      	ldr	r2, [pc, #240]	@ (800345c <xTaskIncrementTick+0x158>)
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	f000 fad4 	bl	8003918 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003370:	4b3b      	ldr	r3, [pc, #236]	@ (8003460 <xTaskIncrementTick+0x15c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	429a      	cmp	r2, r3
 8003378:	d349      	bcc.n	800340e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800337a:	4b36      	ldr	r3, [pc, #216]	@ (8003454 <xTaskIncrementTick+0x150>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003384:	4b36      	ldr	r3, [pc, #216]	@ (8003460 <xTaskIncrementTick+0x15c>)
 8003386:	f04f 32ff 	mov.w	r2, #4294967295
 800338a:	601a      	str	r2, [r3, #0]
					break;
 800338c:	e03f      	b.n	800340e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800338e:	4b31      	ldr	r3, [pc, #196]	@ (8003454 <xTaskIncrementTick+0x150>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d203      	bcs.n	80033ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003460 <xTaskIncrementTick+0x15c>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033ac:	e02f      	b.n	800340e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	3304      	adds	r3, #4
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe ff81 	bl	80022ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	3318      	adds	r3, #24
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fe ff78 	bl	80022ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ce:	4b25      	ldr	r3, [pc, #148]	@ (8003464 <xTaskIncrementTick+0x160>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d903      	bls.n	80033de <xTaskIncrementTick+0xda>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033da:	4a22      	ldr	r2, [pc, #136]	@ (8003464 <xTaskIncrementTick+0x160>)
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003468 <xTaskIncrementTick+0x164>)
 80033ec:	441a      	add	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	3304      	adds	r3, #4
 80033f2:	4619      	mov	r1, r3
 80033f4:	4610      	mov	r0, r2
 80033f6:	f7fe ff03 	bl	8002200 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033fe:	4b1b      	ldr	r3, [pc, #108]	@ (800346c <xTaskIncrementTick+0x168>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003404:	429a      	cmp	r2, r3
 8003406:	d3b8      	bcc.n	800337a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003408:	2301      	movs	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800340c:	e7b5      	b.n	800337a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800340e:	4b17      	ldr	r3, [pc, #92]	@ (800346c <xTaskIncrementTick+0x168>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003414:	4914      	ldr	r1, [pc, #80]	@ (8003468 <xTaskIncrementTick+0x164>)
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d901      	bls.n	800342a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003426:	2301      	movs	r3, #1
 8003428:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800342a:	4b11      	ldr	r3, [pc, #68]	@ (8003470 <xTaskIncrementTick+0x16c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003432:	2301      	movs	r3, #1
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	e004      	b.n	8003442 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003438:	4b0e      	ldr	r3, [pc, #56]	@ (8003474 <xTaskIncrementTick+0x170>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	4a0d      	ldr	r2, [pc, #52]	@ (8003474 <xTaskIncrementTick+0x170>)
 8003440:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003442:	697b      	ldr	r3, [r7, #20]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000c78 	.word	0x20000c78
 8003450:	20000c54 	.word	0x20000c54
 8003454:	20000c08 	.word	0x20000c08
 8003458:	20000c0c 	.word	0x20000c0c
 800345c:	20000c68 	.word	0x20000c68
 8003460:	20000c70 	.word	0x20000c70
 8003464:	20000c58 	.word	0x20000c58
 8003468:	20000780 	.word	0x20000780
 800346c:	2000077c 	.word	0x2000077c
 8003470:	20000c64 	.word	0x20000c64
 8003474:	20000c60 	.word	0x20000c60

08003478 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800347e:	4b28      	ldr	r3, [pc, #160]	@ (8003520 <vTaskSwitchContext+0xa8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003486:	4b27      	ldr	r3, [pc, #156]	@ (8003524 <vTaskSwitchContext+0xac>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800348c:	e042      	b.n	8003514 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800348e:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <vTaskSwitchContext+0xac>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003494:	4b24      	ldr	r3, [pc, #144]	@ (8003528 <vTaskSwitchContext+0xb0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	e011      	b.n	80034c0 <vTaskSwitchContext+0x48>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <vTaskSwitchContext+0x42>
	__asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	607b      	str	r3, [r7, #4]
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	e7fd      	b.n	80034b6 <vTaskSwitchContext+0x3e>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	3b01      	subs	r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	491a      	ldr	r1, [pc, #104]	@ (800352c <vTaskSwitchContext+0xb4>)
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0e3      	beq.n	800349c <vTaskSwitchContext+0x24>
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4a13      	ldr	r2, [pc, #76]	@ (800352c <vTaskSwitchContext+0xb4>)
 80034e0:	4413      	add	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3308      	adds	r3, #8
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d104      	bne.n	8003504 <vTaskSwitchContext+0x8c>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	4a09      	ldr	r2, [pc, #36]	@ (8003530 <vTaskSwitchContext+0xb8>)
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4a06      	ldr	r2, [pc, #24]	@ (8003528 <vTaskSwitchContext+0xb0>)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6013      	str	r3, [r2, #0]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	20000c78 	.word	0x20000c78
 8003524:	20000c64 	.word	0x20000c64
 8003528:	20000c58 	.word	0x20000c58
 800352c:	20000780 	.word	0x20000780
 8003530:	2000077c 	.word	0x2000077c

08003534 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10b      	bne.n	800355c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	60fb      	str	r3, [r7, #12]
}
 8003556:	bf00      	nop
 8003558:	bf00      	nop
 800355a:	e7fd      	b.n	8003558 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800355c:	4b07      	ldr	r3, [pc, #28]	@ (800357c <vTaskPlaceOnEventList+0x48>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3318      	adds	r3, #24
 8003562:	4619      	mov	r1, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7fe fe6f 	bl	8002248 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800356a:	2101      	movs	r1, #1
 800356c:	6838      	ldr	r0, [r7, #0]
 800356e:	f000 fa81 	bl	8003a74 <prvAddCurrentTaskToDelayedList>
}
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	2000077c 	.word	0x2000077c

08003580 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10b      	bne.n	80035aa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	617b      	str	r3, [r7, #20]
}
 80035a4:	bf00      	nop
 80035a6:	bf00      	nop
 80035a8:	e7fd      	b.n	80035a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3318      	adds	r3, #24
 80035b0:	4619      	mov	r1, r3
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7fe fe24 	bl	8002200 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	68b8      	ldr	r0, [r7, #8]
 80035c8:	f000 fa54 	bl	8003a74 <prvAddCurrentTaskToDelayedList>
	}
 80035cc:	bf00      	nop
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	2000077c 	.word	0x2000077c

080035d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	60fb      	str	r3, [r7, #12]
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	e7fd      	b.n	8003602 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	3318      	adds	r3, #24
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fe55 	bl	80022ba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003610:	4b1d      	ldr	r3, [pc, #116]	@ (8003688 <xTaskRemoveFromEventList+0xb0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d11d      	bne.n	8003654 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	3304      	adds	r3, #4
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe fe4c 	bl	80022ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003626:	4b19      	ldr	r3, [pc, #100]	@ (800368c <xTaskRemoveFromEventList+0xb4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d903      	bls.n	8003636 <xTaskRemoveFromEventList+0x5e>
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	4a16      	ldr	r2, [pc, #88]	@ (800368c <xTaskRemoveFromEventList+0xb4>)
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4a13      	ldr	r2, [pc, #76]	@ (8003690 <xTaskRemoveFromEventList+0xb8>)
 8003644:	441a      	add	r2, r3
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	3304      	adds	r3, #4
 800364a:	4619      	mov	r1, r3
 800364c:	4610      	mov	r0, r2
 800364e:	f7fe fdd7 	bl	8002200 <vListInsertEnd>
 8003652:	e005      	b.n	8003660 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	3318      	adds	r3, #24
 8003658:	4619      	mov	r1, r3
 800365a:	480e      	ldr	r0, [pc, #56]	@ (8003694 <xTaskRemoveFromEventList+0xbc>)
 800365c:	f7fe fdd0 	bl	8002200 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003664:	4b0c      	ldr	r3, [pc, #48]	@ (8003698 <xTaskRemoveFromEventList+0xc0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366a:	429a      	cmp	r2, r3
 800366c:	d905      	bls.n	800367a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800366e:	2301      	movs	r3, #1
 8003670:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003672:	4b0a      	ldr	r3, [pc, #40]	@ (800369c <xTaskRemoveFromEventList+0xc4>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	e001      	b.n	800367e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800367e:	697b      	ldr	r3, [r7, #20]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20000c78 	.word	0x20000c78
 800368c:	20000c58 	.word	0x20000c58
 8003690:	20000780 	.word	0x20000780
 8003694:	20000c10 	.word	0x20000c10
 8003698:	2000077c 	.word	0x2000077c
 800369c:	20000c64 	.word	0x20000c64

080036a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036a8:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <vTaskInternalSetTimeOutState+0x24>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036b0:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <vTaskInternalSetTimeOutState+0x28>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	605a      	str	r2, [r3, #4]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	20000c68 	.word	0x20000c68
 80036c8:	20000c54 	.word	0x20000c54

080036cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10b      	bne.n	80036f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80036dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	613b      	str	r3, [r7, #16]
}
 80036ee:	bf00      	nop
 80036f0:	bf00      	nop
 80036f2:	e7fd      	b.n	80036f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	60fb      	str	r3, [r7, #12]
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	e7fd      	b.n	800370e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003712:	f000 fe91 	bl	8004438 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003716:	4b1d      	ldr	r3, [pc, #116]	@ (800378c <xTaskCheckForTimeOut+0xc0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372e:	d102      	bne.n	8003736 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003730:	2300      	movs	r3, #0
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	e023      	b.n	800377e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <xTaskCheckForTimeOut+0xc4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d007      	beq.n	8003752 <xTaskCheckForTimeOut+0x86>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800374c:	2301      	movs	r3, #1
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e015      	b.n	800377e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	429a      	cmp	r2, r3
 800375a:	d20b      	bcs.n	8003774 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1ad2      	subs	r2, r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff99 	bl	80036a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e004      	b.n	800377e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800377a:	2301      	movs	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800377e:	f000 fe8d 	bl	800449c <vPortExitCritical>

	return xReturn;
 8003782:	69fb      	ldr	r3, [r7, #28]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20000c54 	.word	0x20000c54
 8003790:	20000c68 	.word	0x20000c68

08003794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003798:	4b03      	ldr	r3, [pc, #12]	@ (80037a8 <vTaskMissedYield+0x14>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	20000c64 	.word	0x20000c64

080037ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037b4:	f000 f852 	bl	800385c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037b8:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <prvIdleTask+0x28>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d9f9      	bls.n	80037b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80037c0:	4b05      	ldr	r3, [pc, #20]	@ (80037d8 <prvIdleTask+0x2c>)
 80037c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037d0:	e7f0      	b.n	80037b4 <prvIdleTask+0x8>
 80037d2:	bf00      	nop
 80037d4:	20000780 	.word	0x20000780
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e2:	2300      	movs	r3, #0
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	e00c      	b.n	8003802 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4a12      	ldr	r2, [pc, #72]	@ (800383c <prvInitialiseTaskLists+0x60>)
 80037f4:	4413      	add	r3, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fcd5 	bl	80021a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3301      	adds	r3, #1
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b37      	cmp	r3, #55	@ 0x37
 8003806:	d9ef      	bls.n	80037e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003808:	480d      	ldr	r0, [pc, #52]	@ (8003840 <prvInitialiseTaskLists+0x64>)
 800380a:	f7fe fccc 	bl	80021a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800380e:	480d      	ldr	r0, [pc, #52]	@ (8003844 <prvInitialiseTaskLists+0x68>)
 8003810:	f7fe fcc9 	bl	80021a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003814:	480c      	ldr	r0, [pc, #48]	@ (8003848 <prvInitialiseTaskLists+0x6c>)
 8003816:	f7fe fcc6 	bl	80021a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800381a:	480c      	ldr	r0, [pc, #48]	@ (800384c <prvInitialiseTaskLists+0x70>)
 800381c:	f7fe fcc3 	bl	80021a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003820:	480b      	ldr	r0, [pc, #44]	@ (8003850 <prvInitialiseTaskLists+0x74>)
 8003822:	f7fe fcc0 	bl	80021a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003826:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <prvInitialiseTaskLists+0x78>)
 8003828:	4a05      	ldr	r2, [pc, #20]	@ (8003840 <prvInitialiseTaskLists+0x64>)
 800382a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800382c:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <prvInitialiseTaskLists+0x7c>)
 800382e:	4a05      	ldr	r2, [pc, #20]	@ (8003844 <prvInitialiseTaskLists+0x68>)
 8003830:	601a      	str	r2, [r3, #0]
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000780 	.word	0x20000780
 8003840:	20000be0 	.word	0x20000be0
 8003844:	20000bf4 	.word	0x20000bf4
 8003848:	20000c10 	.word	0x20000c10
 800384c:	20000c24 	.word	0x20000c24
 8003850:	20000c3c 	.word	0x20000c3c
 8003854:	20000c08 	.word	0x20000c08
 8003858:	20000c0c 	.word	0x20000c0c

0800385c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003862:	e019      	b.n	8003898 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003864:	f000 fde8 	bl	8004438 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003868:	4b10      	ldr	r3, [pc, #64]	@ (80038ac <prvCheckTasksWaitingTermination+0x50>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe fd20 	bl	80022ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 800387a:	4b0d      	ldr	r3, [pc, #52]	@ (80038b0 <prvCheckTasksWaitingTermination+0x54>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3b01      	subs	r3, #1
 8003880:	4a0b      	ldr	r2, [pc, #44]	@ (80038b0 <prvCheckTasksWaitingTermination+0x54>)
 8003882:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003884:	4b0b      	ldr	r3, [pc, #44]	@ (80038b4 <prvCheckTasksWaitingTermination+0x58>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3b01      	subs	r3, #1
 800388a:	4a0a      	ldr	r2, [pc, #40]	@ (80038b4 <prvCheckTasksWaitingTermination+0x58>)
 800388c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800388e:	f000 fe05 	bl	800449c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f810 	bl	80038b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003898:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <prvCheckTasksWaitingTermination+0x58>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1e1      	bne.n	8003864 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000c24 	.word	0x20000c24
 80038b0:	20000c50 	.word	0x20000c50
 80038b4:	20000c38 	.word	0x20000c38

080038b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d108      	bne.n	80038dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 ffa2 	bl	8004818 <vPortFree>
				vPortFree( pxTCB );
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 ff9f 	bl	8004818 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038da:	e019      	b.n	8003910 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d103      	bne.n	80038ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 ff96 	bl	8004818 <vPortFree>
	}
 80038ec:	e010      	b.n	8003910 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d00b      	beq.n	8003910 <prvDeleteTCB+0x58>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	60fb      	str	r3, [r7, #12]
}
 800390a:	bf00      	nop
 800390c:	bf00      	nop
 800390e:	e7fd      	b.n	800390c <prvDeleteTCB+0x54>
	}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800391e:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <prvResetNextTaskUnblockTime+0x38>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003928:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <prvResetNextTaskUnblockTime+0x3c>)
 800392a:	f04f 32ff 	mov.w	r2, #4294967295
 800392e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003930:	e008      	b.n	8003944 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003932:	4b07      	ldr	r3, [pc, #28]	@ (8003950 <prvResetNextTaskUnblockTime+0x38>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4a04      	ldr	r2, [pc, #16]	@ (8003954 <prvResetNextTaskUnblockTime+0x3c>)
 8003942:	6013      	str	r3, [r2, #0]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	20000c08 	.word	0x20000c08
 8003954:	20000c70 	.word	0x20000c70

08003958 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800395e:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <xTaskGetSchedulerState+0x34>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003966:	2301      	movs	r3, #1
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	e008      	b.n	800397e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800396c:	4b08      	ldr	r3, [pc, #32]	@ (8003990 <xTaskGetSchedulerState+0x38>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d102      	bne.n	800397a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003974:	2302      	movs	r3, #2
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	e001      	b.n	800397e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800397e:	687b      	ldr	r3, [r7, #4]
	}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	20000c5c 	.word	0x20000c5c
 8003990:	20000c78 	.word	0x20000c78

08003994 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d058      	beq.n	8003a5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003a68 <xTaskPriorityDisinherit+0xd4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d00b      	beq.n	80039cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	60fb      	str	r3, [r7, #12]
}
 80039c6:	bf00      	nop
 80039c8:	bf00      	nop
 80039ca:	e7fd      	b.n	80039c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10b      	bne.n	80039ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	60bb      	str	r3, [r7, #8]
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f0:	1e5a      	subs	r2, r3, #1
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d02c      	beq.n	8003a5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d128      	bne.n	8003a5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fc53 	bl	80022ba <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a6c <xTaskPriorityDisinherit+0xd8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d903      	bls.n	8003a3c <xTaskPriorityDisinherit+0xa8>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	4a0c      	ldr	r2, [pc, #48]	@ (8003a6c <xTaskPriorityDisinherit+0xd8>)
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4a09      	ldr	r2, [pc, #36]	@ (8003a70 <xTaskPriorityDisinherit+0xdc>)
 8003a4a:	441a      	add	r2, r3
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4610      	mov	r0, r2
 8003a54:	f7fe fbd4 	bl	8002200 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a5c:	697b      	ldr	r3, [r7, #20]
	}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	2000077c 	.word	0x2000077c
 8003a6c:	20000c58 	.word	0x20000c58
 8003a70:	20000780 	.word	0x20000780

08003a74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a7e:	4b21      	ldr	r3, [pc, #132]	@ (8003b04 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a84:	4b20      	ldr	r3, [pc, #128]	@ (8003b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fc15 	bl	80022ba <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d10a      	bne.n	8003aae <prvAddCurrentTaskToDelayedList+0x3a>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4819      	ldr	r0, [pc, #100]	@ (8003b0c <prvAddCurrentTaskToDelayedList+0x98>)
 8003aa8:	f7fe fbaa 	bl	8002200 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003aac:	e026      	b.n	8003afc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ab6:	4b14      	ldr	r3, [pc, #80]	@ (8003b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d209      	bcs.n	8003ada <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ac6:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	4b0f      	ldr	r3, [pc, #60]	@ (8003b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f7fe fbb8 	bl	8002248 <vListInsert>
}
 8003ad8:	e010      	b.n	8003afc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ada:	4b0e      	ldr	r3, [pc, #56]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4b0a      	ldr	r3, [pc, #40]	@ (8003b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f7fe fbae 	bl	8002248 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003aec:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d202      	bcs.n	8003afc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003af6:	4a08      	ldr	r2, [pc, #32]	@ (8003b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	6013      	str	r3, [r2, #0]
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000c54 	.word	0x20000c54
 8003b08:	2000077c 	.word	0x2000077c
 8003b0c:	20000c3c 	.word	0x20000c3c
 8003b10:	20000c0c 	.word	0x20000c0c
 8003b14:	20000c08 	.word	0x20000c08
 8003b18:	20000c70 	.word	0x20000c70

08003b1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	@ 0x28
 8003b20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b26:	f000 fb13 	bl	8004150 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba0 <xTimerCreateTimerTask+0x84>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d021      	beq.n	8003b76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b3a:	1d3a      	adds	r2, r7, #4
 8003b3c:	f107 0108 	add.w	r1, r7, #8
 8003b40:	f107 030c 	add.w	r3, r7, #12
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fac1 	bl	80020cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	9202      	str	r2, [sp, #8]
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	2302      	movs	r3, #2
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	460a      	mov	r2, r1
 8003b5c:	4911      	ldr	r1, [pc, #68]	@ (8003ba4 <xTimerCreateTimerTask+0x88>)
 8003b5e:	4812      	ldr	r0, [pc, #72]	@ (8003ba8 <xTimerCreateTimerTask+0x8c>)
 8003b60:	f7ff f8d0 	bl	8002d04 <xTaskCreateStatic>
 8003b64:	4603      	mov	r3, r0
 8003b66:	4a11      	ldr	r2, [pc, #68]	@ (8003bac <xTimerCreateTimerTask+0x90>)
 8003b68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b6a:	4b10      	ldr	r3, [pc, #64]	@ (8003bac <xTimerCreateTimerTask+0x90>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b72:	2301      	movs	r3, #1
 8003b74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10b      	bne.n	8003b94 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	613b      	str	r3, [r7, #16]
}
 8003b8e:	bf00      	nop
 8003b90:	bf00      	nop
 8003b92:	e7fd      	b.n	8003b90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b94:	697b      	ldr	r3, [r7, #20]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000cac 	.word	0x20000cac
 8003ba4:	08004b04 	.word	0x08004b04
 8003ba8:	08003ce9 	.word	0x08003ce9
 8003bac:	20000cb0 	.word	0x20000cb0

08003bb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	@ 0x28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10b      	bne.n	8003be0 <xTimerGenericCommand+0x30>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	623b      	str	r3, [r7, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003be0:	4b19      	ldr	r3, [pc, #100]	@ (8003c48 <xTimerGenericCommand+0x98>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d02a      	beq.n	8003c3e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	dc18      	bgt.n	8003c2c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003bfa:	f7ff fead 	bl	8003958 <xTaskGetSchedulerState>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d109      	bne.n	8003c18 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c04:	4b10      	ldr	r3, [pc, #64]	@ (8003c48 <xTimerGenericCommand+0x98>)
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	f107 0110 	add.w	r1, r7, #16
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c10:	f7fe fc88 	bl	8002524 <xQueueGenericSend>
 8003c14:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c16:	e012      	b.n	8003c3e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c18:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <xTimerGenericCommand+0x98>)
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	f107 0110 	add.w	r1, r7, #16
 8003c20:	2300      	movs	r3, #0
 8003c22:	2200      	movs	r2, #0
 8003c24:	f7fe fc7e 	bl	8002524 <xQueueGenericSend>
 8003c28:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c2a:	e008      	b.n	8003c3e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c2c:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <xTimerGenericCommand+0x98>)
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	f107 0110 	add.w	r1, r7, #16
 8003c34:	2300      	movs	r3, #0
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	f7fe fd76 	bl	8002728 <xQueueGenericSendFromISR>
 8003c3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3728      	adds	r7, #40	@ 0x28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20000cac 	.word	0x20000cac

08003c4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c56:	4b23      	ldr	r3, [pc, #140]	@ (8003ce4 <prvProcessExpiredTimer+0x98>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe fb28 	bl	80022ba <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d023      	beq.n	8003cc0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	18d1      	adds	r1, r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	6978      	ldr	r0, [r7, #20]
 8003c86:	f000 f8d5 	bl	8003e34 <prvInsertTimerInActiveList>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d020      	beq.n	8003cd2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c90:	2300      	movs	r3, #0
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2300      	movs	r3, #0
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f7ff ff88 	bl	8003bb0 <xTimerGenericCommand>
 8003ca0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d114      	bne.n	8003cd2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	60fb      	str	r3, [r7, #12]
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	e7fd      	b.n	8003cbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	6978      	ldr	r0, [r7, #20]
 8003cd8:	4798      	blx	r3
}
 8003cda:	bf00      	nop
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000ca4 	.word	0x20000ca4

08003ce8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cf0:	f107 0308 	add.w	r3, r7, #8
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 f859 	bl	8003dac <prvGetNextExpireTime>
 8003cfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f805 	bl	8003d10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d06:	f000 f8d7 	bl	8003eb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d0a:	bf00      	nop
 8003d0c:	e7f0      	b.n	8003cf0 <prvTimerTask+0x8>
	...

08003d10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d1a:	f7ff fa37 	bl	800318c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f866 	bl	8003df4 <prvSampleTimeNow>
 8003d28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d130      	bne.n	8003d92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <prvProcessTimerOrBlockTask+0x3c>
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d806      	bhi.n	8003d4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d3e:	f7ff fa33 	bl	80031a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff81 	bl	8003c4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d4a:	e024      	b.n	8003d96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d008      	beq.n	8003d64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d52:	4b13      	ldr	r3, [pc, #76]	@ (8003da0 <prvProcessTimerOrBlockTask+0x90>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <prvProcessTimerOrBlockTask+0x50>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <prvProcessTimerOrBlockTask+0x52>
 8003d60:	2300      	movs	r3, #0
 8003d62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d64:	4b0f      	ldr	r3, [pc, #60]	@ (8003da4 <prvProcessTimerOrBlockTask+0x94>)
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	4619      	mov	r1, r3
 8003d72:	f7fe ff93 	bl	8002c9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d76:	f7ff fa17 	bl	80031a8 <xTaskResumeAll>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d80:	4b09      	ldr	r3, [pc, #36]	@ (8003da8 <prvProcessTimerOrBlockTask+0x98>)
 8003d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	f3bf 8f6f 	isb	sy
}
 8003d90:	e001      	b.n	8003d96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d92:	f7ff fa09 	bl	80031a8 <xTaskResumeAll>
}
 8003d96:	bf00      	nop
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000ca8 	.word	0x20000ca8
 8003da4:	20000cac 	.word	0x20000cac
 8003da8:	e000ed04 	.word	0xe000ed04

08003dac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003db4:	4b0e      	ldr	r3, [pc, #56]	@ (8003df0 <prvGetNextExpireTime+0x44>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <prvGetNextExpireTime+0x16>
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	e000      	b.n	8003dc4 <prvGetNextExpireTime+0x18>
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d105      	bne.n	8003ddc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dd0:	4b07      	ldr	r3, [pc, #28]	@ (8003df0 <prvGetNextExpireTime+0x44>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	e001      	b.n	8003de0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003de0:	68fb      	ldr	r3, [r7, #12]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000ca4 	.word	0x20000ca4

08003df4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003dfc:	f7ff fa72 	bl	80032e4 <xTaskGetTickCount>
 8003e00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e02:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <prvSampleTimeNow+0x3c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d205      	bcs.n	8003e18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e0c:	f000 f93a 	bl	8004084 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	e002      	b.n	8003e1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e1e:	4a04      	ldr	r2, [pc, #16]	@ (8003e30 <prvSampleTimeNow+0x3c>)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003e24:	68fb      	ldr	r3, [r7, #12]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000cb4 	.word	0x20000cb4

08003e34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d812      	bhi.n	8003e80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	1ad2      	subs	r2, r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d302      	bcc.n	8003e6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e01b      	b.n	8003ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e6e:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <prvInsertTimerInActiveList+0x7c>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f7fe f9e5 	bl	8002248 <vListInsert>
 8003e7e:	e012      	b.n	8003ea6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d206      	bcs.n	8003e96 <prvInsertTimerInActiveList+0x62>
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d302      	bcc.n	8003e96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	e007      	b.n	8003ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e96:	4b07      	ldr	r3, [pc, #28]	@ (8003eb4 <prvInsertTimerInActiveList+0x80>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f7fe f9d1 	bl	8002248 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003ea6:	697b      	ldr	r3, [r7, #20]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000ca8 	.word	0x20000ca8
 8003eb4:	20000ca4 	.word	0x20000ca4

08003eb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08e      	sub	sp, #56	@ 0x38
 8003ebc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ebe:	e0ce      	b.n	800405e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	da19      	bge.n	8003efa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	3304      	adds	r3, #4
 8003eca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	61fb      	str	r3, [r7, #28]
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	e7fd      	b.n	8003ee6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef0:	6850      	ldr	r0, [r2, #4]
 8003ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef4:	6892      	ldr	r2, [r2, #8]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f2c0 80ae 	blt.w	800405e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d004      	beq.n	8003f18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	3304      	adds	r3, #4
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe f9d1 	bl	80022ba <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f18:	463b      	mov	r3, r7
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff ff6a 	bl	8003df4 <prvSampleTimeNow>
 8003f20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b09      	cmp	r3, #9
 8003f26:	f200 8097 	bhi.w	8004058 <prvProcessReceivedCommands+0x1a0>
 8003f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f30 <prvProcessReceivedCommands+0x78>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f59 	.word	0x08003f59
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f59 	.word	0x08003f59
 8003f3c:	08003fcf 	.word	0x08003fcf
 8003f40:	08003fe3 	.word	0x08003fe3
 8003f44:	0800402f 	.word	0x0800402f
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f59 	.word	0x08003f59
 8003f50:	08003fcf 	.word	0x08003fcf
 8003f54:	08003fe3 	.word	0x08003fe3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	18d1      	adds	r1, r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f78:	f7ff ff5c 	bl	8003e34 <prvInsertTimerInActiveList>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d06c      	beq.n	800405c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d061      	beq.n	800405c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	441a      	add	r2, r3
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003faa:	f7ff fe01 	bl	8003bb0 <xTimerGenericCommand>
 8003fae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d152      	bne.n	800405c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	61bb      	str	r3, [r7, #24]
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	e7fd      	b.n	8003fca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003fe0:	e03d      	b.n	800405e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10b      	bne.n	800401a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	617b      	str	r3, [r7, #20]
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	e7fd      	b.n	8004016 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	18d1      	adds	r1, r2, r3
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004028:	f7ff ff04 	bl	8003e34 <prvInsertTimerInActiveList>
					break;
 800402c:	e017      	b.n	800405e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d103      	bne.n	8004044 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800403c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800403e:	f000 fbeb 	bl	8004818 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004042:	e00c      	b.n	800405e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004046:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	b2da      	uxtb	r2, r3
 8004050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004056:	e002      	b.n	800405e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004058:	bf00      	nop
 800405a:	e000      	b.n	800405e <prvProcessReceivedCommands+0x1a6>
					break;
 800405c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800405e:	4b08      	ldr	r3, [pc, #32]	@ (8004080 <prvProcessReceivedCommands+0x1c8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	1d39      	adds	r1, r7, #4
 8004064:	2200      	movs	r2, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe fbfc 	bl	8002864 <xQueueReceive>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	f47f af26 	bne.w	8003ec0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	3730      	adds	r7, #48	@ 0x30
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000cac 	.word	0x20000cac

08004084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800408a:	e049      	b.n	8004120 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800408c:	4b2e      	ldr	r3, [pc, #184]	@ (8004148 <prvSwitchTimerLists+0xc4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004096:	4b2c      	ldr	r3, [pc, #176]	@ (8004148 <prvSwitchTimerLists+0xc4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe f908 	bl	80022ba <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d02f      	beq.n	8004120 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d90e      	bls.n	80040f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040de:	4b1a      	ldr	r3, [pc, #104]	@ (8004148 <prvSwitchTimerLists+0xc4>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f7fe f8ad 	bl	8002248 <vListInsert>
 80040ee:	e017      	b.n	8004120 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040f0:	2300      	movs	r3, #0
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	2300      	movs	r3, #0
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	2100      	movs	r1, #0
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f7ff fd58 	bl	8003bb0 <xTimerGenericCommand>
 8004100:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10b      	bne.n	8004120 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	603b      	str	r3, [r7, #0]
}
 800411a:	bf00      	nop
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004120:	4b09      	ldr	r3, [pc, #36]	@ (8004148 <prvSwitchTimerLists+0xc4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1b0      	bne.n	800408c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800412a:	4b07      	ldr	r3, [pc, #28]	@ (8004148 <prvSwitchTimerLists+0xc4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004130:	4b06      	ldr	r3, [pc, #24]	@ (800414c <prvSwitchTimerLists+0xc8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a04      	ldr	r2, [pc, #16]	@ (8004148 <prvSwitchTimerLists+0xc4>)
 8004136:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004138:	4a04      	ldr	r2, [pc, #16]	@ (800414c <prvSwitchTimerLists+0xc8>)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	6013      	str	r3, [r2, #0]
}
 800413e:	bf00      	nop
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000ca4 	.word	0x20000ca4
 800414c:	20000ca8 	.word	0x20000ca8

08004150 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004156:	f000 f96f 	bl	8004438 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800415a:	4b15      	ldr	r3, [pc, #84]	@ (80041b0 <prvCheckForValidListAndQueue+0x60>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d120      	bne.n	80041a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004162:	4814      	ldr	r0, [pc, #80]	@ (80041b4 <prvCheckForValidListAndQueue+0x64>)
 8004164:	f7fe f81f 	bl	80021a6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004168:	4813      	ldr	r0, [pc, #76]	@ (80041b8 <prvCheckForValidListAndQueue+0x68>)
 800416a:	f7fe f81c 	bl	80021a6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800416e:	4b13      	ldr	r3, [pc, #76]	@ (80041bc <prvCheckForValidListAndQueue+0x6c>)
 8004170:	4a10      	ldr	r2, [pc, #64]	@ (80041b4 <prvCheckForValidListAndQueue+0x64>)
 8004172:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004174:	4b12      	ldr	r3, [pc, #72]	@ (80041c0 <prvCheckForValidListAndQueue+0x70>)
 8004176:	4a10      	ldr	r2, [pc, #64]	@ (80041b8 <prvCheckForValidListAndQueue+0x68>)
 8004178:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800417a:	2300      	movs	r3, #0
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	4b11      	ldr	r3, [pc, #68]	@ (80041c4 <prvCheckForValidListAndQueue+0x74>)
 8004180:	4a11      	ldr	r2, [pc, #68]	@ (80041c8 <prvCheckForValidListAndQueue+0x78>)
 8004182:	2110      	movs	r1, #16
 8004184:	200a      	movs	r0, #10
 8004186:	f7fe f92d 	bl	80023e4 <xQueueGenericCreateStatic>
 800418a:	4603      	mov	r3, r0
 800418c:	4a08      	ldr	r2, [pc, #32]	@ (80041b0 <prvCheckForValidListAndQueue+0x60>)
 800418e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004190:	4b07      	ldr	r3, [pc, #28]	@ (80041b0 <prvCheckForValidListAndQueue+0x60>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004198:	4b05      	ldr	r3, [pc, #20]	@ (80041b0 <prvCheckForValidListAndQueue+0x60>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	490b      	ldr	r1, [pc, #44]	@ (80041cc <prvCheckForValidListAndQueue+0x7c>)
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fd52 	bl	8002c48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041a4:	f000 f97a 	bl	800449c <vPortExitCritical>
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000cac 	.word	0x20000cac
 80041b4:	20000c7c 	.word	0x20000c7c
 80041b8:	20000c90 	.word	0x20000c90
 80041bc:	20000ca4 	.word	0x20000ca4
 80041c0:	20000ca8 	.word	0x20000ca8
 80041c4:	20000d58 	.word	0x20000d58
 80041c8:	20000cb8 	.word	0x20000cb8
 80041cc:	08004b0c 	.word	0x08004b0c

080041d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3b04      	subs	r3, #4
 80041e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3b04      	subs	r3, #4
 80041ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f023 0201 	bic.w	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b04      	subs	r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004200:	4a0c      	ldr	r2, [pc, #48]	@ (8004234 <pxPortInitialiseStack+0x64>)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3b14      	subs	r3, #20
 800420a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3b04      	subs	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f06f 0202 	mvn.w	r2, #2
 800421e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3b20      	subs	r3, #32
 8004224:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004226:	68fb      	ldr	r3, [r7, #12]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	08004239 	.word	0x08004239

08004238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004242:	4b13      	ldr	r3, [pc, #76]	@ (8004290 <prvTaskExitError+0x58>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d00b      	beq.n	8004264 <prvTaskExitError+0x2c>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	60fb      	str	r3, [r7, #12]
}
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <prvTaskExitError+0x28>
	__asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	60bb      	str	r3, [r7, #8]
}
 8004276:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004278:	bf00      	nop
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0fc      	beq.n	800427a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	2000000c 	.word	0x2000000c
	...

080042a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042a0:	4b07      	ldr	r3, [pc, #28]	@ (80042c0 <pxCurrentTCBConst2>)
 80042a2:	6819      	ldr	r1, [r3, #0]
 80042a4:	6808      	ldr	r0, [r1, #0]
 80042a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042aa:	f380 8809 	msr	PSP, r0
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f04f 0000 	mov.w	r0, #0
 80042b6:	f380 8811 	msr	BASEPRI, r0
 80042ba:	4770      	bx	lr
 80042bc:	f3af 8000 	nop.w

080042c0 <pxCurrentTCBConst2>:
 80042c0:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop

080042c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042c8:	4808      	ldr	r0, [pc, #32]	@ (80042ec <prvPortStartFirstTask+0x24>)
 80042ca:	6800      	ldr	r0, [r0, #0]
 80042cc:	6800      	ldr	r0, [r0, #0]
 80042ce:	f380 8808 	msr	MSP, r0
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f380 8814 	msr	CONTROL, r0
 80042da:	b662      	cpsie	i
 80042dc:	b661      	cpsie	f
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	df00      	svc	0
 80042e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042ea:	bf00      	nop
 80042ec:	e000ed08 	.word	0xe000ed08

080042f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042f6:	4b47      	ldr	r3, [pc, #284]	@ (8004414 <xPortStartScheduler+0x124>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a47      	ldr	r2, [pc, #284]	@ (8004418 <xPortStartScheduler+0x128>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d10b      	bne.n	8004318 <xPortStartScheduler+0x28>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	613b      	str	r3, [r7, #16]
}
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	e7fd      	b.n	8004314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004318:	4b3e      	ldr	r3, [pc, #248]	@ (8004414 <xPortStartScheduler+0x124>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a3f      	ldr	r2, [pc, #252]	@ (800441c <xPortStartScheduler+0x12c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d10b      	bne.n	800433a <xPortStartScheduler+0x4a>
	__asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	60fb      	str	r3, [r7, #12]
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	e7fd      	b.n	8004336 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800433a:	4b39      	ldr	r3, [pc, #228]	@ (8004420 <xPortStartScheduler+0x130>)
 800433c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	22ff      	movs	r2, #255	@ 0xff
 800434a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800435c:	b2da      	uxtb	r2, r3
 800435e:	4b31      	ldr	r3, [pc, #196]	@ (8004424 <xPortStartScheduler+0x134>)
 8004360:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004362:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <xPortStartScheduler+0x138>)
 8004364:	2207      	movs	r2, #7
 8004366:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004368:	e009      	b.n	800437e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800436a:	4b2f      	ldr	r3, [pc, #188]	@ (8004428 <xPortStartScheduler+0x138>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3b01      	subs	r3, #1
 8004370:	4a2d      	ldr	r2, [pc, #180]	@ (8004428 <xPortStartScheduler+0x138>)
 8004372:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	b2db      	uxtb	r3, r3
 800437c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004386:	2b80      	cmp	r3, #128	@ 0x80
 8004388:	d0ef      	beq.n	800436a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800438a:	4b27      	ldr	r3, [pc, #156]	@ (8004428 <xPortStartScheduler+0x138>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f1c3 0307 	rsb	r3, r3, #7
 8004392:	2b04      	cmp	r3, #4
 8004394:	d00b      	beq.n	80043ae <xPortStartScheduler+0xbe>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	60bb      	str	r3, [r7, #8]
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	e7fd      	b.n	80043aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004428 <xPortStartScheduler+0x138>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004428 <xPortStartScheduler+0x138>)
 80043b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004428 <xPortStartScheduler+0x138>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043c0:	4a19      	ldr	r2, [pc, #100]	@ (8004428 <xPortStartScheduler+0x138>)
 80043c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043cc:	4b17      	ldr	r3, [pc, #92]	@ (800442c <xPortStartScheduler+0x13c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a16      	ldr	r2, [pc, #88]	@ (800442c <xPortStartScheduler+0x13c>)
 80043d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043d8:	4b14      	ldr	r3, [pc, #80]	@ (800442c <xPortStartScheduler+0x13c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a13      	ldr	r2, [pc, #76]	@ (800442c <xPortStartScheduler+0x13c>)
 80043de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80043e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043e4:	f000 f8da 	bl	800459c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043e8:	4b11      	ldr	r3, [pc, #68]	@ (8004430 <xPortStartScheduler+0x140>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043ee:	f000 f8f9 	bl	80045e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043f2:	4b10      	ldr	r3, [pc, #64]	@ (8004434 <xPortStartScheduler+0x144>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004434 <xPortStartScheduler+0x144>)
 80043f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80043fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043fe:	f7ff ff63 	bl	80042c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004402:	f7ff f839 	bl	8003478 <vTaskSwitchContext>
	prvTaskExitError();
 8004406:	f7ff ff17 	bl	8004238 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	e000ed00 	.word	0xe000ed00
 8004418:	410fc271 	.word	0x410fc271
 800441c:	410fc270 	.word	0x410fc270
 8004420:	e000e400 	.word	0xe000e400
 8004424:	20000da8 	.word	0x20000da8
 8004428:	20000dac 	.word	0x20000dac
 800442c:	e000ed20 	.word	0xe000ed20
 8004430:	2000000c 	.word	0x2000000c
 8004434:	e000ef34 	.word	0xe000ef34

08004438 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	607b      	str	r3, [r7, #4]
}
 8004450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004452:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <vPortEnterCritical+0x5c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3301      	adds	r3, #1
 8004458:	4a0e      	ldr	r2, [pc, #56]	@ (8004494 <vPortEnterCritical+0x5c>)
 800445a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800445c:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <vPortEnterCritical+0x5c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d110      	bne.n	8004486 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004464:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <vPortEnterCritical+0x60>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <vPortEnterCritical+0x4e>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	603b      	str	r3, [r7, #0]
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	e7fd      	b.n	8004482 <vPortEnterCritical+0x4a>
	}
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	2000000c 	.word	0x2000000c
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044a2:	4b12      	ldr	r3, [pc, #72]	@ (80044ec <vPortExitCritical+0x50>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <vPortExitCritical+0x26>
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	607b      	str	r3, [r7, #4]
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	e7fd      	b.n	80044be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044c2:	4b0a      	ldr	r3, [pc, #40]	@ (80044ec <vPortExitCritical+0x50>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	4a08      	ldr	r2, [pc, #32]	@ (80044ec <vPortExitCritical+0x50>)
 80044ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044cc:	4b07      	ldr	r3, [pc, #28]	@ (80044ec <vPortExitCritical+0x50>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d105      	bne.n	80044e0 <vPortExitCritical+0x44>
 80044d4:	2300      	movs	r3, #0
 80044d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	f383 8811 	msr	BASEPRI, r3
}
 80044de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	2000000c 	.word	0x2000000c

080044f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044f0:	f3ef 8009 	mrs	r0, PSP
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	4b15      	ldr	r3, [pc, #84]	@ (8004550 <pxCurrentTCBConst>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	f01e 0f10 	tst.w	lr, #16
 8004500:	bf08      	it	eq
 8004502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450a:	6010      	str	r0, [r2, #0]
 800450c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004514:	f380 8811 	msr	BASEPRI, r0
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f7fe ffaa 	bl	8003478 <vTaskSwitchContext>
 8004524:	f04f 0000 	mov.w	r0, #0
 8004528:	f380 8811 	msr	BASEPRI, r0
 800452c:	bc09      	pop	{r0, r3}
 800452e:	6819      	ldr	r1, [r3, #0]
 8004530:	6808      	ldr	r0, [r1, #0]
 8004532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004536:	f01e 0f10 	tst.w	lr, #16
 800453a:	bf08      	it	eq
 800453c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004540:	f380 8809 	msr	PSP, r0
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	f3af 8000 	nop.w

08004550 <pxCurrentTCBConst>:
 8004550:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop

08004558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	607b      	str	r3, [r7, #4]
}
 8004570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004572:	f7fe fec7 	bl	8003304 <xTaskIncrementTick>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800457c:	4b06      	ldr	r3, [pc, #24]	@ (8004598 <xPortSysTickHandler+0x40>)
 800457e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	2300      	movs	r3, #0
 8004586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	f383 8811 	msr	BASEPRI, r3
}
 800458e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	e000ed04 	.word	0xe000ed04

0800459c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045a0:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <vPortSetupTimerInterrupt+0x34>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045a6:	4b0b      	ldr	r3, [pc, #44]	@ (80045d4 <vPortSetupTimerInterrupt+0x38>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045ac:	4b0a      	ldr	r3, [pc, #40]	@ (80045d8 <vPortSetupTimerInterrupt+0x3c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a0a      	ldr	r2, [pc, #40]	@ (80045dc <vPortSetupTimerInterrupt+0x40>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	099b      	lsrs	r3, r3, #6
 80045b8:	4a09      	ldr	r2, [pc, #36]	@ (80045e0 <vPortSetupTimerInterrupt+0x44>)
 80045ba:	3b01      	subs	r3, #1
 80045bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045be:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <vPortSetupTimerInterrupt+0x34>)
 80045c0:	2207      	movs	r2, #7
 80045c2:	601a      	str	r2, [r3, #0]
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	e000e010 	.word	0xe000e010
 80045d4:	e000e018 	.word	0xe000e018
 80045d8:	20000000 	.word	0x20000000
 80045dc:	10624dd3 	.word	0x10624dd3
 80045e0:	e000e014 	.word	0xe000e014

080045e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80045e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80045f4 <vPortEnableVFP+0x10>
 80045e8:	6801      	ldr	r1, [r0, #0]
 80045ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80045ee:	6001      	str	r1, [r0, #0]
 80045f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80045f2:	bf00      	nop
 80045f4:	e000ed88 	.word	0xe000ed88

080045f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045fe:	f3ef 8305 	mrs	r3, IPSR
 8004602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b0f      	cmp	r3, #15
 8004608:	d915      	bls.n	8004636 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800460a:	4a18      	ldr	r2, [pc, #96]	@ (800466c <vPortValidateInterruptPriority+0x74>)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4413      	add	r3, r2
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004614:	4b16      	ldr	r3, [pc, #88]	@ (8004670 <vPortValidateInterruptPriority+0x78>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	7afa      	ldrb	r2, [r7, #11]
 800461a:	429a      	cmp	r2, r3
 800461c:	d20b      	bcs.n	8004636 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	607b      	str	r3, [r7, #4]
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	e7fd      	b.n	8004632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004636:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <vPortValidateInterruptPriority+0x7c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800463e:	4b0e      	ldr	r3, [pc, #56]	@ (8004678 <vPortValidateInterruptPriority+0x80>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d90b      	bls.n	800465e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	603b      	str	r3, [r7, #0]
}
 8004658:	bf00      	nop
 800465a:	bf00      	nop
 800465c:	e7fd      	b.n	800465a <vPortValidateInterruptPriority+0x62>
	}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	e000e3f0 	.word	0xe000e3f0
 8004670:	20000da8 	.word	0x20000da8
 8004674:	e000ed0c 	.word	0xe000ed0c
 8004678:	20000dac 	.word	0x20000dac

0800467c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	@ 0x28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004688:	f7fe fd80 	bl	800318c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800468c:	4b5c      	ldr	r3, [pc, #368]	@ (8004800 <pvPortMalloc+0x184>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004694:	f000 f924 	bl	80048e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004698:	4b5a      	ldr	r3, [pc, #360]	@ (8004804 <pvPortMalloc+0x188>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 8095 	bne.w	80047d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01e      	beq.n	80046ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80046ac:	2208      	movs	r2, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d015      	beq.n	80046ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f023 0307 	bic.w	r3, r3, #7
 80046c4:	3308      	adds	r3, #8
 80046c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <pvPortMalloc+0x6e>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	617b      	str	r3, [r7, #20]
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	e7fd      	b.n	80046e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d06f      	beq.n	80047d0 <pvPortMalloc+0x154>
 80046f0:	4b45      	ldr	r3, [pc, #276]	@ (8004808 <pvPortMalloc+0x18c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d86a      	bhi.n	80047d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046fa:	4b44      	ldr	r3, [pc, #272]	@ (800480c <pvPortMalloc+0x190>)
 80046fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046fe:	4b43      	ldr	r3, [pc, #268]	@ (800480c <pvPortMalloc+0x190>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004704:	e004      	b.n	8004710 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	429a      	cmp	r2, r3
 8004718:	d903      	bls.n	8004722 <pvPortMalloc+0xa6>
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f1      	bne.n	8004706 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004722:	4b37      	ldr	r3, [pc, #220]	@ (8004800 <pvPortMalloc+0x184>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004728:	429a      	cmp	r2, r3
 800472a:	d051      	beq.n	80047d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2208      	movs	r2, #8
 8004732:	4413      	add	r3, r2
 8004734:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	1ad2      	subs	r2, r2, r3
 8004746:	2308      	movs	r3, #8
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	429a      	cmp	r2, r3
 800474c:	d920      	bls.n	8004790 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800474e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4413      	add	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00b      	beq.n	8004778 <pvPortMalloc+0xfc>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	613b      	str	r3, [r7, #16]
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	e7fd      	b.n	8004774 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	1ad2      	subs	r2, r2, r3
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800478a:	69b8      	ldr	r0, [r7, #24]
 800478c:	f000 f90a 	bl	80049a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004790:	4b1d      	ldr	r3, [pc, #116]	@ (8004808 <pvPortMalloc+0x18c>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	4a1b      	ldr	r2, [pc, #108]	@ (8004808 <pvPortMalloc+0x18c>)
 800479c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800479e:	4b1a      	ldr	r3, [pc, #104]	@ (8004808 <pvPortMalloc+0x18c>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004810 <pvPortMalloc+0x194>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d203      	bcs.n	80047b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047aa:	4b17      	ldr	r3, [pc, #92]	@ (8004808 <pvPortMalloc+0x18c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a18      	ldr	r2, [pc, #96]	@ (8004810 <pvPortMalloc+0x194>)
 80047b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	4b13      	ldr	r3, [pc, #76]	@ (8004804 <pvPortMalloc+0x188>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80047c6:	4b13      	ldr	r3, [pc, #76]	@ (8004814 <pvPortMalloc+0x198>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3301      	adds	r3, #1
 80047cc:	4a11      	ldr	r2, [pc, #68]	@ (8004814 <pvPortMalloc+0x198>)
 80047ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047d0:	f7fe fcea 	bl	80031a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00b      	beq.n	80047f6 <pvPortMalloc+0x17a>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	60fb      	str	r3, [r7, #12]
}
 80047f0:	bf00      	nop
 80047f2:	bf00      	nop
 80047f4:	e7fd      	b.n	80047f2 <pvPortMalloc+0x176>
	return pvReturn;
 80047f6:	69fb      	ldr	r3, [r7, #28]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3728      	adds	r7, #40	@ 0x28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	200049b8 	.word	0x200049b8
 8004804:	200049cc 	.word	0x200049cc
 8004808:	200049bc 	.word	0x200049bc
 800480c:	200049b0 	.word	0x200049b0
 8004810:	200049c0 	.word	0x200049c0
 8004814:	200049c4 	.word	0x200049c4

08004818 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d04f      	beq.n	80048ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800482a:	2308      	movs	r3, #8
 800482c:	425b      	negs	r3, r3
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4413      	add	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	4b25      	ldr	r3, [pc, #148]	@ (80048d4 <vPortFree+0xbc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10b      	bne.n	800485e <vPortFree+0x46>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	60fb      	str	r3, [r7, #12]
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	e7fd      	b.n	800485a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00b      	beq.n	800487e <vPortFree+0x66>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	60bb      	str	r3, [r7, #8]
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	e7fd      	b.n	800487a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	4b14      	ldr	r3, [pc, #80]	@ (80048d4 <vPortFree+0xbc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01e      	beq.n	80048ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d11a      	bne.n	80048ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	4b0e      	ldr	r3, [pc, #56]	@ (80048d4 <vPortFree+0xbc>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	43db      	mvns	r3, r3
 800489e:	401a      	ands	r2, r3
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048a4:	f7fe fc72 	bl	800318c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	4b0a      	ldr	r3, [pc, #40]	@ (80048d8 <vPortFree+0xc0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4413      	add	r3, r2
 80048b2:	4a09      	ldr	r2, [pc, #36]	@ (80048d8 <vPortFree+0xc0>)
 80048b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048b6:	6938      	ldr	r0, [r7, #16]
 80048b8:	f000 f874 	bl	80049a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80048bc:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <vPortFree+0xc4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a06      	ldr	r2, [pc, #24]	@ (80048dc <vPortFree+0xc4>)
 80048c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80048c6:	f7fe fc6f 	bl	80031a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048ca:	bf00      	nop
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	200049cc 	.word	0x200049cc
 80048d8:	200049bc 	.word	0x200049bc
 80048dc:	200049c8 	.word	0x200049c8

080048e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80048ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048ec:	4b27      	ldr	r3, [pc, #156]	@ (800498c <prvHeapInit+0xac>)
 80048ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00c      	beq.n	8004914 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3307      	adds	r3, #7
 80048fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0307 	bic.w	r3, r3, #7
 8004906:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	4a1f      	ldr	r2, [pc, #124]	@ (800498c <prvHeapInit+0xac>)
 8004910:	4413      	add	r3, r2
 8004912:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004918:	4a1d      	ldr	r2, [pc, #116]	@ (8004990 <prvHeapInit+0xb0>)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800491e:	4b1c      	ldr	r3, [pc, #112]	@ (8004990 <prvHeapInit+0xb0>)
 8004920:	2200      	movs	r2, #0
 8004922:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	4413      	add	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800492c:	2208      	movs	r2, #8
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0307 	bic.w	r3, r3, #7
 800493a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a15      	ldr	r2, [pc, #84]	@ (8004994 <prvHeapInit+0xb4>)
 8004940:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004942:	4b14      	ldr	r3, [pc, #80]	@ (8004994 <prvHeapInit+0xb4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800494a:	4b12      	ldr	r3, [pc, #72]	@ (8004994 <prvHeapInit+0xb4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	1ad2      	subs	r2, r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004960:	4b0c      	ldr	r3, [pc, #48]	@ (8004994 <prvHeapInit+0xb4>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4a0a      	ldr	r2, [pc, #40]	@ (8004998 <prvHeapInit+0xb8>)
 800496e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a09      	ldr	r2, [pc, #36]	@ (800499c <prvHeapInit+0xbc>)
 8004976:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004978:	4b09      	ldr	r3, [pc, #36]	@ (80049a0 <prvHeapInit+0xc0>)
 800497a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800497e:	601a      	str	r2, [r3, #0]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	20000db0 	.word	0x20000db0
 8004990:	200049b0 	.word	0x200049b0
 8004994:	200049b8 	.word	0x200049b8
 8004998:	200049c0 	.word	0x200049c0
 800499c:	200049bc 	.word	0x200049bc
 80049a0:	200049cc 	.word	0x200049cc

080049a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049ac:	4b28      	ldr	r3, [pc, #160]	@ (8004a50 <prvInsertBlockIntoFreeList+0xac>)
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e002      	b.n	80049b8 <prvInsertBlockIntoFreeList+0x14>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d8f7      	bhi.n	80049b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	4413      	add	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d108      	bne.n	80049e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	441a      	add	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	441a      	add	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d118      	bne.n	8004a2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b15      	ldr	r3, [pc, #84]	@ (8004a54 <prvInsertBlockIntoFreeList+0xb0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d00d      	beq.n	8004a22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	441a      	add	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	e008      	b.n	8004a34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a22:	4b0c      	ldr	r3, [pc, #48]	@ (8004a54 <prvInsertBlockIntoFreeList+0xb0>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e003      	b.n	8004a34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d002      	beq.n	8004a42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a42:	bf00      	nop
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	200049b0 	.word	0x200049b0
 8004a54:	200049b8 	.word	0x200049b8

08004a58 <memset>:
 8004a58:	4402      	add	r2, r0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d100      	bne.n	8004a62 <memset+0xa>
 8004a60:	4770      	bx	lr
 8004a62:	f803 1b01 	strb.w	r1, [r3], #1
 8004a66:	e7f9      	b.n	8004a5c <memset+0x4>

08004a68 <__libc_init_array>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	4d0d      	ldr	r5, [pc, #52]	@ (8004aa0 <__libc_init_array+0x38>)
 8004a6c:	4c0d      	ldr	r4, [pc, #52]	@ (8004aa4 <__libc_init_array+0x3c>)
 8004a6e:	1b64      	subs	r4, r4, r5
 8004a70:	10a4      	asrs	r4, r4, #2
 8004a72:	2600      	movs	r6, #0
 8004a74:	42a6      	cmp	r6, r4
 8004a76:	d109      	bne.n	8004a8c <__libc_init_array+0x24>
 8004a78:	4d0b      	ldr	r5, [pc, #44]	@ (8004aa8 <__libc_init_array+0x40>)
 8004a7a:	4c0c      	ldr	r4, [pc, #48]	@ (8004aac <__libc_init_array+0x44>)
 8004a7c:	f000 f826 	bl	8004acc <_init>
 8004a80:	1b64      	subs	r4, r4, r5
 8004a82:	10a4      	asrs	r4, r4, #2
 8004a84:	2600      	movs	r6, #0
 8004a86:	42a6      	cmp	r6, r4
 8004a88:	d105      	bne.n	8004a96 <__libc_init_array+0x2e>
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a90:	4798      	blx	r3
 8004a92:	3601      	adds	r6, #1
 8004a94:	e7ee      	b.n	8004a74 <__libc_init_array+0xc>
 8004a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9a:	4798      	blx	r3
 8004a9c:	3601      	adds	r6, #1
 8004a9e:	e7f2      	b.n	8004a86 <__libc_init_array+0x1e>
 8004aa0:	08004b60 	.word	0x08004b60
 8004aa4:	08004b60 	.word	0x08004b60
 8004aa8:	08004b60 	.word	0x08004b60
 8004aac:	08004b64 	.word	0x08004b64

08004ab0 <memcpy>:
 8004ab0:	440a      	add	r2, r1
 8004ab2:	4291      	cmp	r1, r2
 8004ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ab8:	d100      	bne.n	8004abc <memcpy+0xc>
 8004aba:	4770      	bx	lr
 8004abc:	b510      	push	{r4, lr}
 8004abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ac6:	4291      	cmp	r1, r2
 8004ac8:	d1f9      	bne.n	8004abe <memcpy+0xe>
 8004aca:	bd10      	pop	{r4, pc}

08004acc <_init>:
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	bf00      	nop
 8004ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad2:	bc08      	pop	{r3}
 8004ad4:	469e      	mov	lr, r3
 8004ad6:	4770      	bx	lr

08004ad8 <_fini>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	bf00      	nop
 8004adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ade:	bc08      	pop	{r3}
 8004ae0:	469e      	mov	lr, r3
 8004ae2:	4770      	bx	lr
