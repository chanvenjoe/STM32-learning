
3S2P_BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a30  08005a30  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005a30  08005a30  00006a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a38  08005a38  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a38  08005a38  00006a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a3c  08005a3c  00006a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005a40  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bec  20000060  08005aa0  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c4c  08005aa0  00007c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ed3  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a77  00000000  00000000  0001ff63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  000239e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ea  00000000  00000000  00024fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024745  00000000  00000000  000260a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aeb8  00000000  00000000  0004a7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db973  00000000  00000000  0006569f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141012  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e6c  00000000  00000000  00141058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00146ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005988 	.word	0x08005988

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005988 	.word	0x08005988

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <read_cell_1>:
#include "i2c.h"
#include "main.h"


void read_cell_1()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af02      	add	r7, sp, #8
	uint16_t device_addr = 0x68;
 8000506:	2368      	movs	r3, #104	@ 0x68
 8000508:	80fb      	strh	r3, [r7, #6]
	uint8_t reg_addr = 0x66;
 800050a:	2366      	movs	r3, #102	@ 0x66
 800050c:	713b      	strb	r3, [r7, #4]
	uint8_t read_buff[3] = {0x82, 0xF0};
 800050e:	4a0c      	ldr	r2, [pc, #48]	@ (8000540 <read_cell_1+0x40>)
 8000510:	463b      	mov	r3, r7
 8000512:	6812      	ldr	r2, [r2, #0]
 8000514:	4611      	mov	r1, r2
 8000516:	8019      	strh	r1, [r3, #0]
 8000518:	3302      	adds	r3, #2
 800051a:	0c12      	lsrs	r2, r2, #16
 800051c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef hal_status  = HAL_I2C_Master_Transmit(&hi2c1, device_addr<<1, &reg_addr, 1, 1000);
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	b299      	uxth	r1, r3
 8000524:	1d3a      	adds	r2, r7, #4
 8000526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2301      	movs	r3, #1
 800052e:	4805      	ldr	r0, [pc, #20]	@ (8000544 <read_cell_1+0x44>)
 8000530:	f000 ff3e 	bl	80013b0 <HAL_I2C_Master_Transmit>
 8000534:	4603      	mov	r3, r0
 8000536:	717b      	strb	r3, [r7, #5]

//	HAL_I2C_Master_Receive(&hi2c1, device_addr, read_buff, 2, HAL_MAX_DELAY);
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	080059a0 	.word	0x080059a0
 8000544:	20000084 	.word	0x20000084

08000548 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800054c:	4a07      	ldr	r2, [pc, #28]	@ (800056c <MX_FREERTOS_Init+0x24>)
 800054e:	2100      	movs	r1, #0
 8000550:	4807      	ldr	r0, [pc, #28]	@ (8000570 <MX_FREERTOS_Init+0x28>)
 8000552:	f002 fb37 	bl	8002bc4 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a06      	ldr	r2, [pc, #24]	@ (8000574 <MX_FREERTOS_Init+0x2c>)
 800055a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of myEvent01 */
  myEvent01Handle = osEventFlagsNew(&myEvent01_attributes);
 800055c:	4806      	ldr	r0, [pc, #24]	@ (8000578 <MX_FREERTOS_Init+0x30>)
 800055e:	f002 fbde 	bl	8002d1e <osEventFlagsNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a05      	ldr	r2, [pc, #20]	@ (800057c <MX_FREERTOS_Init+0x34>)
 8000566:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	080059e4 	.word	0x080059e4
 8000570:	08000581 	.word	0x08000581
 8000574:	2000007c 	.word	0x2000007c
 8000578:	08005a08 	.word	0x08005a08
 800057c:	20000080 	.word	0x20000080

08000580 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(20);
 8000588:	2014      	movs	r0, #20
 800058a:	f002 fbad 	bl	8002ce8 <osDelay>
	  read_cell_1();
 800058e:	f7ff ffb7 	bl	8000500 <read_cell_1>
	  osDelay(20);
 8000592:	bf00      	nop
 8000594:	e7f8      	b.n	8000588 <StartDefaultTask+0x8>
	...

08000598 <MX_GPIO_Init>:
     PB3   ------> SPI1_SCK
     PB4   ------> SPI1_MISO
     PB5   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	4b64      	ldr	r3, [pc, #400]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a63      	ldr	r2, [pc, #396]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b61      	ldr	r3, [pc, #388]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b5d      	ldr	r3, [pc, #372]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a5c      	ldr	r2, [pc, #368]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b5a      	ldr	r3, [pc, #360]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	4b56      	ldr	r3, [pc, #344]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a55      	ldr	r2, [pc, #340]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b53      	ldr	r3, [pc, #332]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	4b4f      	ldr	r3, [pc, #316]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a4e      	ldr	r2, [pc, #312]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b4c      	ldr	r3, [pc, #304]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4b48      	ldr	r3, [pc, #288]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a47      	ldr	r2, [pc, #284]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b45      	ldr	r3, [pc, #276]	@ (8000744 <MX_GPIO_Init+0x1ac>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_SCR_GPIO_Port, RST_SCR_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000640:	4841      	ldr	r0, [pc, #260]	@ (8000748 <MX_GPIO_Init+0x1b0>)
 8000642:	f000 fd57 	bl	80010f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BKL_GPIO_Port, BKL_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2104      	movs	r1, #4
 800064a:	4840      	ldr	r0, [pc, #256]	@ (800074c <MX_GPIO_Init+0x1b4>)
 800064c:	f000 fd52 	bl	80010f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|D_C_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000656:	483e      	ldr	r0, [pc, #248]	@ (8000750 <MX_GPIO_Init+0x1b8>)
 8000658:	f000 fd4c 	bl	80010f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800065c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000660:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4838      	ldr	r0, [pc, #224]	@ (8000754 <MX_GPIO_Init+0x1bc>)
 8000672:	f000 fbab 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000676:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 800067a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067c:	2303      	movs	r3, #3
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	482f      	ldr	r0, [pc, #188]	@ (8000748 <MX_GPIO_Init+0x1b0>)
 800068c:	f000 fb9e 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000690:	f24e 4307 	movw	r3, #58375	@ 0xe407
 8000694:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	482a      	ldr	r0, [pc, #168]	@ (8000750 <MX_GPIO_Init+0x1b8>)
 80006a6:	f000 fb91 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYS_WAKE_Pin;
 80006aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SYS_WAKE_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4824      	ldr	r0, [pc, #144]	@ (8000750 <MX_GPIO_Init+0x1b8>)
 80006c0:	f000 fb84 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_SCR_Pin;
 80006c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_SCR_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	481a      	ldr	r0, [pc, #104]	@ (8000748 <MX_GPIO_Init+0x1b0>)
 80006de:	f000 fb75 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BKL_Pin;
 80006e2:	2304      	movs	r3, #4
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BKL_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	4814      	ldr	r0, [pc, #80]	@ (800074c <MX_GPIO_Init+0x1b4>)
 80006fa:	f000 fb67 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80006fe:	2338      	movs	r3, #56	@ 0x38
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800070e:	2305      	movs	r3, #5
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	480d      	ldr	r0, [pc, #52]	@ (8000750 <MX_GPIO_Init+0x1b8>)
 800071a:	f000 fb57 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_Pin|D_C_Pin;
 800071e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	@ (8000750 <MX_GPIO_Init+0x1b8>)
 8000738:	f000 fb48 	bl	8000dcc <HAL_GPIO_Init>

}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	@ 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40020000 	.word	0x40020000
 800074c:	40020c00 	.word	0x40020c00
 8000750:	40020400 	.word	0x40020400
 8000754:	40020800 	.word	0x40020800

08000758 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_I2C1_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	@ (80007ac <MX_I2C1_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_I2C1_Init+0x50>)
 8000764:	4a12      	ldr	r2, [pc, #72]	@ (80007b0 <MX_I2C1_Init+0x58>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_I2C1_Init+0x50>)
 8000776:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800077a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_I2C1_Init+0x50>)
 8000790:	2280      	movs	r2, #128	@ 0x80
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_I2C1_Init+0x50>)
 8000796:	f000 fcc7 	bl	8001128 <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f8df 	bl	8000962 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000084 	.word	0x20000084
 80007ac:	40005400 	.word	0x40005400
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	@ 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a19      	ldr	r2, [pc, #100]	@ (8000838 <HAL_I2C_MspInit+0x84>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d12b      	bne.n	800082e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <HAL_I2C_MspInit+0x88>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a17      	ldr	r2, [pc, #92]	@ (800083c <HAL_I2C_MspInit+0x88>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b15      	ldr	r3, [pc, #84]	@ (800083c <HAL_I2C_MspInit+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007f2:	23c0      	movs	r3, #192	@ 0xc0
 80007f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f6:	2312      	movs	r3, #18
 80007f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000802:	2304      	movs	r3, #4
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	@ (8000840 <HAL_I2C_MspInit+0x8c>)
 800080e:	f000 fadd 	bl	8000dcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <HAL_I2C_MspInit+0x88>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	4a08      	ldr	r2, [pc, #32]	@ (800083c <HAL_I2C_MspInit+0x88>)
 800081c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000820:	6413      	str	r3, [r2, #64]	@ 0x40
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <HAL_I2C_MspInit+0x88>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000826:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	@ 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40005400 	.word	0x40005400
 800083c:	40023800 	.word	0x40023800
 8000840:	40020400 	.word	0x40020400

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000848:	f000 f99c 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */
//  lv_init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084c:	f000 f80c 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000850:	f7ff fea2 	bl	8000598 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000854:	f7ff ff80 	bl	8000758 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000858:	f002 f96a 	bl	8002b30 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800085c:	f7ff fe74 	bl	8000548 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000860:	f002 f98a 	bl	8002b78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <main+0x20>

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	@ 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2234      	movs	r2, #52	@ 0x34
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f004 ff9e 	bl	80057b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	4b2a      	ldr	r3, [pc, #168]	@ (800093c <SystemClock_Config+0xd4>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	4a29      	ldr	r2, [pc, #164]	@ (800093c <SystemClock_Config+0xd4>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	@ 0x40
 800089c:	4b27      	ldr	r3, [pc, #156]	@ (800093c <SystemClock_Config+0xd4>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <SystemClock_Config+0xd8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008b4:	4a22      	ldr	r2, [pc, #136]	@ (8000940 <SystemClock_Config+0xd8>)
 80008b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	4b20      	ldr	r3, [pc, #128]	@ (8000940 <SystemClock_Config+0xd8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d0:	2310      	movs	r3, #16
 80008d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d8:	2300      	movs	r3, #0
 80008da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008dc:	2308      	movs	r3, #8
 80008de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008e0:	23b4      	movs	r3, #180	@ 0xb4
 80008e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fb97 	bl	8002028 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000900:	f000 f82f 	bl	8000962 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2302      	movs	r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800090c:	23a0      	movs	r3, #160	@ 0xa0
 800090e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000910:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000914:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000916:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800091a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f001 f89e 	bl	8001a64 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800092e:	f000 f818 	bl	8000962 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3750      	adds	r7, #80	@ 0x50
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000954:	d101      	bne.n	800095a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000956:	f000 f937 	bl	8000bc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000966:	b672      	cpsid	i
}
 8000968:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096a:	bf00      	nop
 800096c:	e7fd      	b.n	800096a <Error_Handler+0x8>
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_MspInit+0x54>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	4a11      	ldr	r2, [pc, #68]	@ (80009c4 <HAL_MspInit+0x54>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000984:	6453      	str	r3, [r2, #68]	@ 0x44
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <HAL_MspInit+0x54>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <HAL_MspInit+0x54>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <HAL_MspInit+0x54>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <HAL_MspInit+0x54>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	210f      	movs	r1, #15
 80009b2:	f06f 0001 	mvn.w	r0, #1
 80009b6:	f000 f9df 	bl	8000d78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	@ 0x38
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4b34      	ldr	r3, [pc, #208]	@ (8000ab0 <HAL_InitTick+0xe8>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	4a33      	ldr	r2, [pc, #204]	@ (8000ab0 <HAL_InitTick+0xe8>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e8:	4b31      	ldr	r3, [pc, #196]	@ (8000ab0 <HAL_InitTick+0xe8>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f4:	f107 0210 	add.w	r2, r7, #16
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 f936 	bl	8001c70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d103      	bne.n	8000a16 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a0e:	f001 f91b 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8000a12:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a14:	e004      	b.n	8000a20 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a16:	f001 f917 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a22:	4a24      	ldr	r2, [pc, #144]	@ (8000ab4 <HAL_InitTick+0xec>)
 8000a24:	fba2 2303 	umull	r2, r3, r2, r3
 8000a28:	0c9b      	lsrs	r3, r3, #18
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a2e:	4b22      	ldr	r3, [pc, #136]	@ (8000ab8 <HAL_InitTick+0xf0>)
 8000a30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a36:	4b20      	ldr	r3, [pc, #128]	@ (8000ab8 <HAL_InitTick+0xf0>)
 8000a38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a3c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ab8 <HAL_InitTick+0xf0>)
 8000a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a42:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <HAL_InitTick+0xf0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <HAL_InitTick+0xf0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <HAL_InitTick+0xf0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000a56:	4818      	ldr	r0, [pc, #96]	@ (8000ab8 <HAL_InitTick+0xf0>)
 8000a58:	f001 fd84 	bl	8002564 <HAL_TIM_Base_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a62:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d11b      	bne.n	8000aa2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000a6a:	4813      	ldr	r0, [pc, #76]	@ (8000ab8 <HAL_InitTick+0xf0>)
 8000a6c:	f001 fdd4 	bl	8002618 <HAL_TIM_Base_Start_IT>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a76:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d111      	bne.n	8000aa2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a7e:	201c      	movs	r0, #28
 8000a80:	f000 f996 	bl	8000db0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b0f      	cmp	r3, #15
 8000a88:	d808      	bhi.n	8000a9c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	201c      	movs	r0, #28
 8000a90:	f000 f972 	bl	8000d78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a94:	4a09      	ldr	r2, [pc, #36]	@ (8000abc <HAL_InitTick+0xf4>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	e002      	b.n	8000aa2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aa2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3738      	adds	r7, #56	@ 0x38
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	431bde83 	.word	0x431bde83
 8000ab8:	200000d8 	.word	0x200000d8
 8000abc:	20000004 	.word	0x20000004

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000afc:	4802      	ldr	r0, [pc, #8]	@ (8000b08 <TIM2_IRQHandler+0x10>)
 8000afe:	f001 fdfb 	bl	80026f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200000d8 	.word	0x200000d8

08000b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b34:	f7ff ffea 	bl	8000b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	@ (8000b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	@ (8000b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f004 fe89 	bl	8005874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff fe6f 	bl	8000844 <main>
  bx  lr    
 8000b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b74:	08005a40 	.word	0x08005a40
  ldr r2, =_sbss
 8000b78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b7c:	20004c4c 	.word	0x20004c4c

08000b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b88:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <HAL_Init+0x40>)
 8000b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b94:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <HAL_Init+0x40>)
 8000b9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	@ (8000bc4 <HAL_Init+0x40>)
 8000ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f8d8 	bl	8000d62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb2:	200f      	movs	r0, #15
 8000bb4:	f7ff ff08 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb8:	f7ff feda 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023c00 	.word	0x40023c00

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000120 	.word	0x20000120

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000120 	.word	0x20000120

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4907      	ldr	r1, [pc, #28]	@ (8000ca4 <__NVIC_EnableIRQ+0x38>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	@ (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	@ (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	@ 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	@ 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ff4c 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8a:	f7ff ff61 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000d8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	6978      	ldr	r0, [r7, #20]
 8000d96:	f7ff ffb1 	bl	8000cfc <NVIC_EncodePriority>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff80 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff54 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	@ 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	e165      	b.n	80010b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de8:	2201      	movs	r2, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f040 8154 	bne.w	80010ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d005      	beq.n	8000e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d130      	bne.n	8000e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	091b      	lsrs	r3, r3, #4
 8000e6a:	f003 0201 	and.w	r2, r3, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d017      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d123      	bne.n	8000f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	69b9      	ldr	r1, [r7, #24]
 8000f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0203 	and.w	r2, r3, #3
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80ae 	beq.w	80010ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b5d      	ldr	r3, [pc, #372]	@ (80010cc <HAL_GPIO_Init+0x300>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	4a5c      	ldr	r2, [pc, #368]	@ (80010cc <HAL_GPIO_Init+0x300>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f62:	4b5a      	ldr	r3, [pc, #360]	@ (80010cc <HAL_GPIO_Init+0x300>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f6e:	4a58      	ldr	r2, [pc, #352]	@ (80010d0 <HAL_GPIO_Init+0x304>)
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4f      	ldr	r2, [pc, #316]	@ (80010d4 <HAL_GPIO_Init+0x308>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d025      	beq.n	8000fe6 <HAL_GPIO_Init+0x21a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4e      	ldr	r2, [pc, #312]	@ (80010d8 <HAL_GPIO_Init+0x30c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d01f      	beq.n	8000fe2 <HAL_GPIO_Init+0x216>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4d      	ldr	r2, [pc, #308]	@ (80010dc <HAL_GPIO_Init+0x310>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d019      	beq.n	8000fde <HAL_GPIO_Init+0x212>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4c      	ldr	r2, [pc, #304]	@ (80010e0 <HAL_GPIO_Init+0x314>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0x20e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4b      	ldr	r2, [pc, #300]	@ (80010e4 <HAL_GPIO_Init+0x318>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d00d      	beq.n	8000fd6 <HAL_GPIO_Init+0x20a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4a      	ldr	r2, [pc, #296]	@ (80010e8 <HAL_GPIO_Init+0x31c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_GPIO_Init+0x206>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a49      	ldr	r2, [pc, #292]	@ (80010ec <HAL_GPIO_Init+0x320>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_GPIO_Init+0x202>
 8000fca:	2306      	movs	r3, #6
 8000fcc:	e00c      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fce:	2307      	movs	r3, #7
 8000fd0:	e00a      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	e008      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e004      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	69fa      	ldr	r2, [r7, #28]
 8000fea:	f002 0203 	and.w	r2, r2, #3
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	4093      	lsls	r3, r2
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff8:	4935      	ldr	r1, [pc, #212]	@ (80010d0 <HAL_GPIO_Init+0x304>)
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001006:	4b3a      	ldr	r3, [pc, #232]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800102a:	4a31      	ldr	r2, [pc, #196]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001030:	4b2f      	ldr	r3, [pc, #188]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001054:	4a26      	ldr	r2, [pc, #152]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800105a:	4b25      	ldr	r3, [pc, #148]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107e:	4a1c      	ldr	r2, [pc, #112]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001084:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a8:	4a11      	ldr	r2, [pc, #68]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3301      	adds	r3, #1
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	f67f ae96 	bls.w	8000de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3724      	adds	r7, #36	@ 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020c00 	.word	0x40020c00
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40021400 	.word	0x40021400
 80010ec:	40021800 	.word	0x40021800
 80010f0:	40013c00 	.word	0x40013c00

080010f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
 8001100:	4613      	mov	r3, r2
 8001102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001104:	787b      	ldrb	r3, [r7, #1]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001110:	e003      	b.n	800111a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001112:	887b      	ldrh	r3, [r7, #2]
 8001114:	041a      	lsls	r2, r3, #16
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	619a      	str	r2, [r3, #24]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e12b      	b.n	8001392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d106      	bne.n	8001154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fb30 	bl	80007b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2224      	movs	r2, #36	@ 0x24
 8001158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800117a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800118a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800118c:	f000 fd5c 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8001190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4a81      	ldr	r2, [pc, #516]	@ (800139c <HAL_I2C_Init+0x274>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d807      	bhi.n	80011ac <HAL_I2C_Init+0x84>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4a80      	ldr	r2, [pc, #512]	@ (80013a0 <HAL_I2C_Init+0x278>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	bf94      	ite	ls
 80011a4:	2301      	movls	r3, #1
 80011a6:	2300      	movhi	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	e006      	b.n	80011ba <HAL_I2C_Init+0x92>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4a7d      	ldr	r2, [pc, #500]	@ (80013a4 <HAL_I2C_Init+0x27c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	bf94      	ite	ls
 80011b4:	2301      	movls	r3, #1
 80011b6:	2300      	movhi	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e0e7      	b.n	8001392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4a78      	ldr	r2, [pc, #480]	@ (80013a8 <HAL_I2C_Init+0x280>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	430a      	orrs	r2, r1
 80011e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a6a      	ldr	r2, [pc, #424]	@ (800139c <HAL_I2C_Init+0x274>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d802      	bhi.n	80011fc <HAL_I2C_Init+0xd4>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3301      	adds	r3, #1
 80011fa:	e009      	b.n	8001210 <HAL_I2C_Init+0xe8>
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001202:	fb02 f303 	mul.w	r3, r2, r3
 8001206:	4a69      	ldr	r2, [pc, #420]	@ (80013ac <HAL_I2C_Init+0x284>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	099b      	lsrs	r3, r3, #6
 800120e:	3301      	adds	r3, #1
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	430b      	orrs	r3, r1
 8001216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001222:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	495c      	ldr	r1, [pc, #368]	@ (800139c <HAL_I2C_Init+0x274>)
 800122c:	428b      	cmp	r3, r1
 800122e:	d819      	bhi.n	8001264 <HAL_I2C_Init+0x13c>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1e59      	subs	r1, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fbb1 f3f3 	udiv	r3, r1, r3
 800123e:	1c59      	adds	r1, r3, #1
 8001240:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001244:	400b      	ands	r3, r1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00a      	beq.n	8001260 <HAL_I2C_Init+0x138>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1e59      	subs	r1, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fbb1 f3f3 	udiv	r3, r1, r3
 8001258:	3301      	adds	r3, #1
 800125a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800125e:	e051      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 8001260:	2304      	movs	r3, #4
 8001262:	e04f      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d111      	bne.n	8001290 <HAL_I2C_Init+0x168>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	440b      	add	r3, r1
 800127a:	fbb0 f3f3 	udiv	r3, r0, r3
 800127e:	3301      	adds	r3, #1
 8001280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf0c      	ite	eq
 8001288:	2301      	moveq	r3, #1
 800128a:	2300      	movne	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	e012      	b.n	80012b6 <HAL_I2C_Init+0x18e>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	1e58      	subs	r0, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6859      	ldr	r1, [r3, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	0099      	lsls	r1, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a6:	3301      	adds	r3, #1
 80012a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf0c      	ite	eq
 80012b0:	2301      	moveq	r3, #1
 80012b2:	2300      	movne	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2C_Init+0x196>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e022      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10e      	bne.n	80012e4 <HAL_I2C_Init+0x1bc>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1e58      	subs	r0, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6859      	ldr	r1, [r3, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	440b      	add	r3, r1
 80012d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d8:	3301      	adds	r3, #1
 80012da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012e2:	e00f      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1e58      	subs	r0, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	0099      	lsls	r1, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001300:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	6809      	ldr	r1, [r1, #0]
 8001308:	4313      	orrs	r3, r2
 800130a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69da      	ldr	r2, [r3, #28]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001332:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6911      	ldr	r1, [r2, #16]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68d2      	ldr	r2, [r2, #12]
 800133e:	4311      	orrs	r1, r2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	430b      	orrs	r3, r1
 8001346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2220      	movs	r2, #32
 800137e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	000186a0 	.word	0x000186a0
 80013a0:	001e847f 	.word	0x001e847f
 80013a4:	003d08ff 	.word	0x003d08ff
 80013a8:	431bde83 	.word	0x431bde83
 80013ac:	10624dd3 	.word	0x10624dd3

080013b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	461a      	mov	r2, r3
 80013bc:	460b      	mov	r3, r1
 80013be:	817b      	strh	r3, [r7, #10]
 80013c0:	4613      	mov	r3, r2
 80013c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff fc14 	bl	8000bf0 <HAL_GetTick>
 80013c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b20      	cmp	r3, #32
 80013d4:	f040 80e0 	bne.w	8001598 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2319      	movs	r3, #25
 80013de:	2201      	movs	r2, #1
 80013e0:	4970      	ldr	r1, [pc, #448]	@ (80015a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 f964 	bl	80016b0 <I2C_WaitOnFlagUntilTimeout>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013ee:	2302      	movs	r3, #2
 80013f0:	e0d3      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_I2C_Master_Transmit+0x50>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e0cc      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b01      	cmp	r3, #1
 8001414:	d007      	beq.n	8001426 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0201 	orr.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001434:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2221      	movs	r2, #33	@ 0x21
 800143a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2210      	movs	r2, #16
 8001442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2200      	movs	r2, #0
 800144a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	893a      	ldrh	r2, [r7, #8]
 8001456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800145c:	b29a      	uxth	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4a50      	ldr	r2, [pc, #320]	@ (80015a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001468:	8979      	ldrh	r1, [r7, #10]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	6a3a      	ldr	r2, [r7, #32]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 f89c 	bl	80015ac <I2C_MasterRequestWrite>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e08d      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001494:	e066      	b.n	8001564 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	6a39      	ldr	r1, [r7, #32]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 fa22 	bl	80018e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00d      	beq.n	80014c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d107      	bne.n	80014be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e06b      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3b01      	subs	r3, #1
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d11b      	bne.n	8001538 <HAL_I2C_Master_Transmit+0x188>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001504:	2b00      	cmp	r3, #0
 8001506:	d017      	beq.n	8001538 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001522:	b29b      	uxth	r3, r3
 8001524:	3b01      	subs	r3, #1
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001530:	3b01      	subs	r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	6a39      	ldr	r1, [r7, #32]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 fa19 	bl	8001974 <I2C_WaitOnBTFFlagUntilTimeout>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00d      	beq.n	8001564 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	2b04      	cmp	r3, #4
 800154e:	d107      	bne.n	8001560 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800155e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e01a      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001568:	2b00      	cmp	r3, #0
 800156a:	d194      	bne.n	8001496 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800157a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	e000      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001598:	2302      	movs	r3, #2
  }
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	00100002 	.word	0x00100002
 80015a8:	ffff0000 	.word	0xffff0000

080015ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	460b      	mov	r3, r1
 80015ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d006      	beq.n	80015d6 <I2C_MasterRequestWrite+0x2a>
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d003      	beq.n	80015d6 <I2C_MasterRequestWrite+0x2a>
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80015d4:	d108      	bne.n	80015e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e00b      	b.n	8001600 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ec:	2b12      	cmp	r3, #18
 80015ee:	d107      	bne.n	8001600 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 f84f 	bl	80016b0 <I2C_WaitOnFlagUntilTimeout>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00d      	beq.n	8001634 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001626:	d103      	bne.n	8001630 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800162e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e035      	b.n	80016a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800163c:	d108      	bne.n	8001650 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800163e:	897b      	ldrh	r3, [r7, #10]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	e01b      	b.n	8001688 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001650:	897b      	ldrh	r3, [r7, #10]
 8001652:	11db      	asrs	r3, r3, #7
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f003 0306 	and.w	r3, r3, #6
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f063 030f 	orn	r3, r3, #15
 8001660:	b2da      	uxtb	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	490e      	ldr	r1, [pc, #56]	@ (80016a8 <I2C_MasterRequestWrite+0xfc>)
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 f898 	bl	80017a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e010      	b.n	80016a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800167e:	897b      	ldrh	r3, [r7, #10]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	4907      	ldr	r1, [pc, #28]	@ (80016ac <I2C_MasterRequestWrite+0x100>)
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f888 	bl	80017a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	00010008 	.word	0x00010008
 80016ac:	00010002 	.word	0x00010002

080016b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	4613      	mov	r3, r2
 80016be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016c0:	e048      	b.n	8001754 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c8:	d044      	beq.n	8001754 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ca:	f7ff fa91 	bl	8000bf0 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d302      	bcc.n	80016e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d139      	bne.n	8001754 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	0c1b      	lsrs	r3, r3, #16
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10d      	bne.n	8001706 <I2C_WaitOnFlagUntilTimeout+0x56>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	43da      	mvns	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4013      	ands	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	e00c      	b.n	8001720 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	43da      	mvns	r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	4013      	ands	r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf0c      	ite	eq
 8001718:	2301      	moveq	r3, #1
 800171a:	2300      	movne	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	429a      	cmp	r2, r3
 8001724:	d116      	bne.n	8001754 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2220      	movs	r2, #32
 8001730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	f043 0220 	orr.w	r2, r3, #32
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e023      	b.n	800179c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	0c1b      	lsrs	r3, r3, #16
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d10d      	bne.n	800177a <I2C_WaitOnFlagUntilTimeout+0xca>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	43da      	mvns	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	4013      	ands	r3, r2
 800176a:	b29b      	uxth	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	e00c      	b.n	8001794 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	43da      	mvns	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	4013      	ands	r3, r2
 8001786:	b29b      	uxth	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	429a      	cmp	r2, r3
 8001798:	d093      	beq.n	80016c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017b2:	e071      	b.n	8001898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017c2:	d123      	bne.n	800180c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80017dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2220      	movs	r2, #32
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	f043 0204 	orr.w	r2, r3, #4
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e067      	b.n	80018dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001812:	d041      	beq.n	8001898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001814:	f7ff f9ec 	bl	8000bf0 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	d302      	bcc.n	800182a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d136      	bne.n	8001898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	0c1b      	lsrs	r3, r3, #16
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d10c      	bne.n	800184e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4013      	ands	r3, r2
 8001840:	b29b      	uxth	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf14      	ite	ne
 8001846:	2301      	movne	r3, #1
 8001848:	2300      	moveq	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	e00b      	b.n	8001866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	43da      	mvns	r2, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	4013      	ands	r3, r2
 800185a:	b29b      	uxth	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	bf14      	ite	ne
 8001860:	2301      	movne	r3, #1
 8001862:	2300      	moveq	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d016      	beq.n	8001898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2220      	movs	r2, #32
 8001874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	f043 0220 	orr.w	r2, r3, #32
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e021      	b.n	80018dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	0c1b      	lsrs	r3, r3, #16
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10c      	bne.n	80018bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	43da      	mvns	r2, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	4013      	ands	r3, r2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	e00b      	b.n	80018d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4013      	ands	r3, r2
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bf14      	ite	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	2300      	moveq	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f47f af6d 	bne.w	80017b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018f0:	e034      	b.n	800195c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f886 	bl	8001a04 <I2C_IsAcknowledgeFailed>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e034      	b.n	800196c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d028      	beq.n	800195c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800190a:	f7ff f971 	bl	8000bf0 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	429a      	cmp	r2, r3
 8001918:	d302      	bcc.n	8001920 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d11d      	bne.n	800195c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192a:	2b80      	cmp	r3, #128	@ 0x80
 800192c:	d016      	beq.n	800195c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2220      	movs	r2, #32
 8001938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	f043 0220 	orr.w	r2, r3, #32
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e007      	b.n	800196c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001966:	2b80      	cmp	r3, #128	@ 0x80
 8001968:	d1c3      	bne.n	80018f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001980:	e034      	b.n	80019ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 f83e 	bl	8001a04 <I2C_IsAcknowledgeFailed>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e034      	b.n	80019fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d028      	beq.n	80019ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800199a:	f7ff f929 	bl	8000bf0 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d302      	bcc.n	80019b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d11d      	bne.n	80019ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d016      	beq.n	80019ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f043 0220 	orr.w	r2, r3, #32
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e007      	b.n	80019fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d1c3      	bne.n	8001982 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a1a:	d11b      	bne.n	8001a54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	f043 0204 	orr.w	r2, r3, #4
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0cc      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b68      	ldr	r3, [pc, #416]	@ (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d90c      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b65      	ldr	r3, [pc, #404]	@ (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b63      	ldr	r3, [pc, #396]	@ (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0b8      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d020      	beq.n	8001aee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab8:	4b59      	ldr	r3, [pc, #356]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4a58      	ldr	r2, [pc, #352]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ac2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad0:	4b53      	ldr	r3, [pc, #332]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4a52      	ldr	r2, [pc, #328]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ada:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001adc:	4b50      	ldr	r3, [pc, #320]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	494d      	ldr	r1, [pc, #308]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d044      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b47      	ldr	r3, [pc, #284]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d119      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e07f      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d003      	beq.n	8001b22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b22:	4b3f      	ldr	r3, [pc, #252]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e06f      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b32:	4b3b      	ldr	r3, [pc, #236]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e067      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b42:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4934      	ldr	r1, [pc, #208]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b54:	f7ff f84c 	bl	8000bf0 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7ff f848 	bl	8000bf0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e04f      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	4b2b      	ldr	r3, [pc, #172]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 020c 	and.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1eb      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b84:	4b25      	ldr	r3, [pc, #148]	@ (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d20c      	bcs.n	8001bac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e032      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb8:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4916      	ldr	r1, [pc, #88]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d009      	beq.n	8001bea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd6:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	490e      	ldr	r1, [pc, #56]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bea:	f000 f873 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	490a      	ldr	r1, [pc, #40]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	5ccb      	ldrb	r3, [r1, r3]
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	4a09      	ldr	r2, [pc, #36]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fedc 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023c00 	.word	0x40023c00
 8001c20:	40023800 	.word	0x40023800
 8001c24:	08005a18 	.word	0x08005a18
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000004 	.word	0x20000004

08001c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c34:	4b03      	ldr	r3, [pc, #12]	@ (8001c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c4c:	f7ff fff0 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0a9b      	lsrs	r3, r3, #10
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4903      	ldr	r1, [pc, #12]	@ (8001c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	08005a28 	.word	0x08005a28

08001c70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <HAL_RCC_GetClockConfig+0x60>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 020f 	and.w	r2, r3, #15
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	601a      	str	r2, [r3, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40023c00 	.word	0x40023c00

08001cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cd8:	b0a6      	sub	sp, #152	@ 0x98
 8001cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cfa:	4bc8      	ldr	r3, [pc, #800]	@ (800201c <HAL_RCC_GetSysClockFreq+0x348>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	f200 817e 	bhi.w	8002004 <HAL_RCC_GetSysClockFreq+0x330>
 8001d08:	a201      	add	r2, pc, #4	@ (adr r2, 8001d10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0e:	bf00      	nop
 8001d10:	08001d45 	.word	0x08001d45
 8001d14:	08002005 	.word	0x08002005
 8001d18:	08002005 	.word	0x08002005
 8001d1c:	08002005 	.word	0x08002005
 8001d20:	08001d4d 	.word	0x08001d4d
 8001d24:	08002005 	.word	0x08002005
 8001d28:	08002005 	.word	0x08002005
 8001d2c:	08002005 	.word	0x08002005
 8001d30:	08001d55 	.word	0x08001d55
 8001d34:	08002005 	.word	0x08002005
 8001d38:	08002005 	.word	0x08002005
 8001d3c:	08002005 	.word	0x08002005
 8001d40:	08001ebf 	.word	0x08001ebf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d44:	4bb6      	ldr	r3, [pc, #728]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001d4a:	e15f      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d4c:	4bb5      	ldr	r3, [pc, #724]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001d52:	e15b      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d54:	4bb1      	ldr	r3, [pc, #708]	@ (800201c <HAL_RCC_GetSysClockFreq+0x348>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d60:	4bae      	ldr	r3, [pc, #696]	@ (800201c <HAL_RCC_GetSysClockFreq+0x348>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d031      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6c:	4bab      	ldr	r3, [pc, #684]	@ (800201c <HAL_RCC_GetSysClockFreq+0x348>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	2200      	movs	r2, #0
 8001d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001d78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d80:	2300      	movs	r3, #0
 8001d82:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d84:	4ba7      	ldr	r3, [pc, #668]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d86:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001d8a:	462a      	mov	r2, r5
 8001d8c:	fb03 f202 	mul.w	r2, r3, r2
 8001d90:	2300      	movs	r3, #0
 8001d92:	4621      	mov	r1, r4
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	4aa2      	ldr	r2, [pc, #648]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	fba1 1202 	umull	r1, r2, r1, r2
 8001da2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001da4:	460a      	mov	r2, r1
 8001da6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001da8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001daa:	4413      	add	r3, r2
 8001dac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001db2:	2200      	movs	r2, #0
 8001db4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001db6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001db8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001dbc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001dc0:	f7fe fa26 	bl	8000210 <__aeabi_uldivmod>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001dce:	e064      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd0:	4b92      	ldr	r3, [pc, #584]	@ (800201c <HAL_RCC_GetSysClockFreq+0x348>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	099b      	lsrs	r3, r3, #6
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001dda:	657a      	str	r2, [r7, #84]	@ 0x54
 8001ddc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001de4:	2300      	movs	r3, #0
 8001de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001de8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001dec:	4622      	mov	r2, r4
 8001dee:	462b      	mov	r3, r5
 8001df0:	f04f 0000 	mov.w	r0, #0
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	0159      	lsls	r1, r3, #5
 8001dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dfe:	0150      	lsls	r0, r2, #5
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4621      	mov	r1, r4
 8001e06:	1a51      	subs	r1, r2, r1
 8001e08:	6139      	str	r1, [r7, #16]
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e1e:	4659      	mov	r1, fp
 8001e20:	018b      	lsls	r3, r1, #6
 8001e22:	4651      	mov	r1, sl
 8001e24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e28:	4651      	mov	r1, sl
 8001e2a:	018a      	lsls	r2, r1, #6
 8001e2c:	4651      	mov	r1, sl
 8001e2e:	ebb2 0801 	subs.w	r8, r2, r1
 8001e32:	4659      	mov	r1, fp
 8001e34:	eb63 0901 	sbc.w	r9, r3, r1
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e4c:	4690      	mov	r8, r2
 8001e4e:	4699      	mov	r9, r3
 8001e50:	4623      	mov	r3, r4
 8001e52:	eb18 0303 	adds.w	r3, r8, r3
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	462b      	mov	r3, r5
 8001e5a:	eb49 0303 	adc.w	r3, r9, r3
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	028b      	lsls	r3, r1, #10
 8001e70:	4621      	mov	r1, r4
 8001e72:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e76:	4621      	mov	r1, r4
 8001e78:	028a      	lsls	r2, r1, #10
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e82:	2200      	movs	r2, #0
 8001e84:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e86:	647a      	str	r2, [r7, #68]	@ 0x44
 8001e88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e8c:	f7fe f9c0 	bl	8000210 <__aeabi_uldivmod>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4613      	mov	r3, r2
 8001e96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e9a:	4b60      	ldr	r3, [pc, #384]	@ (800201c <HAL_RCC_GetSysClockFreq+0x348>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	0c1b      	lsrs	r3, r3, #16
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001eac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001ebc:	e0a6      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ebe:	4b57      	ldr	r3, [pc, #348]	@ (800201c <HAL_RCC_GetSysClockFreq+0x348>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eca:	4b54      	ldr	r3, [pc, #336]	@ (800201c <HAL_RCC_GetSysClockFreq+0x348>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d02a      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed6:	4b51      	ldr	r3, [pc, #324]	@ (800201c <HAL_RCC_GetSysClockFreq+0x348>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	099b      	lsrs	r3, r3, #6
 8001edc:	2200      	movs	r2, #0
 8001ede:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ee0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ee4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4b4e      	ldr	r3, [pc, #312]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x350>)
 8001eec:	fb03 f201 	mul.w	r2, r3, r1
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	fb00 f303 	mul.w	r3, r0, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x350>)
 8001efa:	fba0 1202 	umull	r1, r2, r0, r2
 8001efe:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f00:	460a      	mov	r2, r1
 8001f02:	673a      	str	r2, [r7, #112]	@ 0x70
 8001f04:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001f06:	4413      	add	r3, r2
 8001f08:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f0e:	2200      	movs	r2, #0
 8001f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f12:	637a      	str	r2, [r7, #52]	@ 0x34
 8001f14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f18:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001f1c:	f7fe f978 	bl	8000210 <__aeabi_uldivmod>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4613      	mov	r3, r2
 8001f26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f2a:	e05b      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <HAL_RCC_GetSysClockFreq+0x348>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	2200      	movs	r2, #0
 8001f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f3e:	623b      	str	r3, [r7, #32]
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f48:	4642      	mov	r2, r8
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	f04f 0000 	mov.w	r0, #0
 8001f50:	f04f 0100 	mov.w	r1, #0
 8001f54:	0159      	lsls	r1, r3, #5
 8001f56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f5a:	0150      	lsls	r0, r2, #5
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4641      	mov	r1, r8
 8001f62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f66:	4649      	mov	r1, r9
 8001f68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f80:	ebb2 040a 	subs.w	r4, r2, sl
 8001f84:	eb63 050b 	sbc.w	r5, r3, fp
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	00eb      	lsls	r3, r5, #3
 8001f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f96:	00e2      	lsls	r2, r4, #3
 8001f98:	4614      	mov	r4, r2
 8001f9a:	461d      	mov	r5, r3
 8001f9c:	4643      	mov	r3, r8
 8001f9e:	18e3      	adds	r3, r4, r3
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	464b      	mov	r3, r9
 8001fa4:	eb45 0303 	adc.w	r3, r5, r3
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	028b      	lsls	r3, r1, #10
 8001fba:	4621      	mov	r1, r4
 8001fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	028a      	lsls	r2, r1, #10
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fcc:	2200      	movs	r2, #0
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	61fa      	str	r2, [r7, #28]
 8001fd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fd6:	f7fe f91b 	bl	8000210 <__aeabi_uldivmod>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4613      	mov	r3, r2
 8001fe0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <HAL_RCC_GetSysClockFreq+0x348>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	0f1b      	lsrs	r3, r3, #28
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001ff2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ff6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002002:	e003      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002006:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800200a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002010:	4618      	mov	r0, r3
 8002012:	3798      	adds	r7, #152	@ 0x98
 8002014:	46bd      	mov	sp, r7
 8002016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	00f42400 	.word	0x00f42400
 8002024:	017d7840 	.word	0x017d7840

08002028 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e28d      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8083 	beq.w	800214e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002048:	4b94      	ldr	r3, [pc, #592]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b04      	cmp	r3, #4
 8002052:	d019      	beq.n	8002088 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002054:	4b91      	ldr	r3, [pc, #580]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 030c 	and.w	r3, r3, #12
        || \
 800205c:	2b08      	cmp	r3, #8
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002060:	4b8e      	ldr	r3, [pc, #568]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002068:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800206c:	d00c      	beq.n	8002088 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206e:	4b8b      	ldr	r3, [pc, #556]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d112      	bne.n	80020a0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800207a:	4b88      	ldr	r3, [pc, #544]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002082:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002086:	d10b      	bne.n	80020a0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	4b84      	ldr	r3, [pc, #528]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d05b      	beq.n	800214c <HAL_RCC_OscConfig+0x124>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d157      	bne.n	800214c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e25a      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a8:	d106      	bne.n	80020b8 <HAL_RCC_OscConfig+0x90>
 80020aa:	4b7c      	ldr	r3, [pc, #496]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a7b      	ldr	r2, [pc, #492]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e01d      	b.n	80020f4 <HAL_RCC_OscConfig+0xcc>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0xb4>
 80020c2:	4b76      	ldr	r3, [pc, #472]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a75      	ldr	r2, [pc, #468]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80020c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b73      	ldr	r3, [pc, #460]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a72      	ldr	r2, [pc, #456]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0xcc>
 80020dc:	4b6f      	ldr	r3, [pc, #444]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a6e      	ldr	r2, [pc, #440]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80020e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b6c      	ldr	r3, [pc, #432]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a6b      	ldr	r2, [pc, #428]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80020ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d013      	beq.n	8002124 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe fd78 	bl	8000bf0 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7fe fd74 	bl	8000bf0 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	@ 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e21f      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b61      	ldr	r3, [pc, #388]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0xdc>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7fe fd64 	bl	8000bf0 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800212c:	f7fe fd60 	bl	8000bf0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	@ 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e20b      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213e:	4b57      	ldr	r3, [pc, #348]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x104>
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d06f      	beq.n	800223a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800215a:	4b50      	ldr	r3, [pc, #320]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b00      	cmp	r3, #0
 8002164:	d017      	beq.n	8002196 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002166:	4b4d      	ldr	r3, [pc, #308]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
        || \
 800216e:	2b08      	cmp	r3, #8
 8002170:	d105      	bne.n	800217e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002172:	4b4a      	ldr	r3, [pc, #296]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00b      	beq.n	8002196 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217e:	4b47      	ldr	r3, [pc, #284]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d11c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218a:	4b44      	ldr	r3, [pc, #272]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d116      	bne.n	80021c4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	4b41      	ldr	r3, [pc, #260]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d005      	beq.n	80021ae <HAL_RCC_OscConfig+0x186>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d001      	beq.n	80021ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e1d3      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b3b      	ldr	r3, [pc, #236]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4937      	ldr	r1, [pc, #220]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	e03a      	b.n	800223a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021cc:	4b34      	ldr	r3, [pc, #208]	@ (80022a0 <HAL_RCC_OscConfig+0x278>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7fe fd0d 	bl	8000bf0 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021da:	f7fe fd09 	bl	8000bf0 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e1b4      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ec:	4b2b      	ldr	r3, [pc, #172]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f8:	4b28      	ldr	r3, [pc, #160]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4925      	ldr	r1, [pc, #148]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
 800220c:	e015      	b.n	800223a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220e:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <HAL_RCC_OscConfig+0x278>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7fe fcec 	bl	8000bf0 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221c:	f7fe fce8 	bl	8000bf0 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e193      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d036      	beq.n	80022b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d016      	beq.n	800227c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002254:	f7fe fccc 	bl	8000bf0 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225c:	f7fe fcc8 	bl	8000bf0 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e173      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x234>
 800227a:	e01b      	b.n	80022b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227c:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7fe fcb5 	bl	8000bf0 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002288:	e00e      	b.n	80022a8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228a:	f7fe fcb1 	bl	8000bf0 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d907      	bls.n	80022a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e15c      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
 800229c:	40023800 	.word	0x40023800
 80022a0:	42470000 	.word	0x42470000
 80022a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a8:	4b8a      	ldr	r3, [pc, #552]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80022aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1ea      	bne.n	800228a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8097 	beq.w	80023f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c6:	4b83      	ldr	r3, [pc, #524]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10f      	bne.n	80022f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	4b7f      	ldr	r3, [pc, #508]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	4a7e      	ldr	r2, [pc, #504]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80022dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e2:	4b7c      	ldr	r3, [pc, #496]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ee:	2301      	movs	r3, #1
 80022f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f2:	4b79      	ldr	r3, [pc, #484]	@ (80024d8 <HAL_RCC_OscConfig+0x4b0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d118      	bne.n	8002330 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fe:	4b76      	ldr	r3, [pc, #472]	@ (80024d8 <HAL_RCC_OscConfig+0x4b0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a75      	ldr	r2, [pc, #468]	@ (80024d8 <HAL_RCC_OscConfig+0x4b0>)
 8002304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230a:	f7fe fc71 	bl	8000bf0 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002312:	f7fe fc6d 	bl	8000bf0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e118      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002324:	4b6c      	ldr	r3, [pc, #432]	@ (80024d8 <HAL_RCC_OscConfig+0x4b0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x31e>
 8002338:	4b66      	ldr	r3, [pc, #408]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233c:	4a65      	ldr	r2, [pc, #404]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6713      	str	r3, [r2, #112]	@ 0x70
 8002344:	e01c      	b.n	8002380 <HAL_RCC_OscConfig+0x358>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b05      	cmp	r3, #5
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0x340>
 800234e:	4b61      	ldr	r3, [pc, #388]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002352:	4a60      	ldr	r2, [pc, #384]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	6713      	str	r3, [r2, #112]	@ 0x70
 800235a:	4b5e      	ldr	r3, [pc, #376]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235e:	4a5d      	ldr	r2, [pc, #372]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6713      	str	r3, [r2, #112]	@ 0x70
 8002366:	e00b      	b.n	8002380 <HAL_RCC_OscConfig+0x358>
 8002368:	4b5a      	ldr	r3, [pc, #360]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236c:	4a59      	ldr	r2, [pc, #356]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	6713      	str	r3, [r2, #112]	@ 0x70
 8002374:	4b57      	ldr	r3, [pc, #348]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002378:	4a56      	ldr	r2, [pc, #344]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800237a:	f023 0304 	bic.w	r3, r3, #4
 800237e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d015      	beq.n	80023b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7fe fc32 	bl	8000bf0 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f7fe fc2e 	bl	8000bf0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e0d7      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a6:	4b4b      	ldr	r3, [pc, #300]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0ee      	beq.n	8002390 <HAL_RCC_OscConfig+0x368>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7fe fc1c 	bl	8000bf0 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023bc:	f7fe fc18 	bl	8000bf0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e0c1      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d2:	4b40      	ldr	r3, [pc, #256]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1ee      	bne.n	80023bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023de:	7dfb      	ldrb	r3, [r7, #23]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d105      	bne.n	80023f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e4:	4b3b      	ldr	r3, [pc, #236]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	4a3a      	ldr	r2, [pc, #232]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80023ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80ad 	beq.w	8002554 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023fa:	4b36      	ldr	r3, [pc, #216]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b08      	cmp	r3, #8
 8002404:	d060      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d145      	bne.n	800249a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240e:	4b33      	ldr	r3, [pc, #204]	@ (80024dc <HAL_RCC_OscConfig+0x4b4>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fbec 	bl	8000bf0 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7fe fbe8 	bl	8000bf0 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e093      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242e:	4b29      	ldr	r3, [pc, #164]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69da      	ldr	r2, [r3, #28]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	019b      	lsls	r3, r3, #6
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	085b      	lsrs	r3, r3, #1
 8002452:	3b01      	subs	r3, #1
 8002454:	041b      	lsls	r3, r3, #16
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	061b      	lsls	r3, r3, #24
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002464:	071b      	lsls	r3, r3, #28
 8002466:	491b      	ldr	r1, [pc, #108]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800246c:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <HAL_RCC_OscConfig+0x4b4>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe fbbd 	bl	8000bf0 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe fbb9 	bl	8000bf0 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e064      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248c:	4b11      	ldr	r3, [pc, #68]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x452>
 8002498:	e05c      	b.n	8002554 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249a:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <HAL_RCC_OscConfig+0x4b4>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fba6 	bl	8000bf0 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fba2 	bl	8000bf0 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e04d      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_RCC_OscConfig+0x4ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x480>
 80024c6:	e045      	b.n	8002554 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e040      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40007000 	.word	0x40007000
 80024dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <HAL_RCC_OscConfig+0x538>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d030      	beq.n	8002550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d129      	bne.n	8002550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d122      	bne.n	8002550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002510:	4013      	ands	r3, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002516:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002518:	4293      	cmp	r3, r2
 800251a:	d119      	bne.n	8002550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	3b01      	subs	r3, #1
 800252a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d10f      	bne.n	8002550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d107      	bne.n	8002550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e041      	b.n	80025fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f839 	bl	8002602 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4610      	mov	r0, r2
 80025a4:	f000 f9c0 	bl	8002928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d001      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e04e      	b.n	80026ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a23      	ldr	r2, [pc, #140]	@ (80026dc <HAL_TIM_Base_Start_IT+0xc4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d022      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x80>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800265a:	d01d      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x80>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1f      	ldr	r2, [pc, #124]	@ (80026e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d018      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x80>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1e      	ldr	r2, [pc, #120]	@ (80026e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x80>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1c      	ldr	r2, [pc, #112]	@ (80026e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00e      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x80>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1b      	ldr	r2, [pc, #108]	@ (80026ec <HAL_TIM_Base_Start_IT+0xd4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x80>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a19      	ldr	r2, [pc, #100]	@ (80026f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x80>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a18      	ldr	r2, [pc, #96]	@ (80026f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d111      	bne.n	80026bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d010      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ba:	e007      	b.n	80026cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40010000 	.word	0x40010000
 80026e0:	40000400 	.word	0x40000400
 80026e4:	40000800 	.word	0x40000800
 80026e8:	40000c00 	.word	0x40000c00
 80026ec:	40010400 	.word	0x40010400
 80026f0:	40014000 	.word	0x40014000
 80026f4:	40001800 	.word	0x40001800

080026f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d020      	beq.n	800275c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01b      	beq.n	800275c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0202 	mvn.w	r2, #2
 800272c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f8d2 	bl	80028ec <HAL_TIM_IC_CaptureCallback>
 8002748:	e005      	b.n	8002756 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f8c4 	bl	80028d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f8d5 	bl	8002900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d020      	beq.n	80027a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01b      	beq.n	80027a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0204 	mvn.w	r2, #4
 8002778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2202      	movs	r2, #2
 800277e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f8ac 	bl	80028ec <HAL_TIM_IC_CaptureCallback>
 8002794:	e005      	b.n	80027a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f89e 	bl	80028d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f8af 	bl	8002900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d020      	beq.n	80027f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01b      	beq.n	80027f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0208 	mvn.w	r2, #8
 80027c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2204      	movs	r2, #4
 80027ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f886 	bl	80028ec <HAL_TIM_IC_CaptureCallback>
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f878 	bl	80028d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f889 	bl	8002900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d020      	beq.n	8002840 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01b      	beq.n	8002840 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0210 	mvn.w	r2, #16
 8002810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2208      	movs	r2, #8
 8002816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f860 	bl	80028ec <HAL_TIM_IC_CaptureCallback>
 800282c:	e005      	b.n	800283a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f852 	bl	80028d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f863 	bl	8002900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00c      	beq.n	8002864 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0201 	mvn.w	r2, #1
 800285c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe f870 	bl	8000944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00c      	beq.n	8002888 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f906 	bl	8002a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00c      	beq.n	80028ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80028a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f834 	bl	8002914 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00c      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0220 	mvn.w	r2, #32
 80028c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f8d8 	bl	8002a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a46      	ldr	r2, [pc, #280]	@ (8002a54 <TIM_Base_SetConfig+0x12c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d013      	beq.n	8002968 <TIM_Base_SetConfig+0x40>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002946:	d00f      	beq.n	8002968 <TIM_Base_SetConfig+0x40>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a43      	ldr	r2, [pc, #268]	@ (8002a58 <TIM_Base_SetConfig+0x130>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00b      	beq.n	8002968 <TIM_Base_SetConfig+0x40>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a42      	ldr	r2, [pc, #264]	@ (8002a5c <TIM_Base_SetConfig+0x134>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <TIM_Base_SetConfig+0x40>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a41      	ldr	r2, [pc, #260]	@ (8002a60 <TIM_Base_SetConfig+0x138>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d003      	beq.n	8002968 <TIM_Base_SetConfig+0x40>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a40      	ldr	r2, [pc, #256]	@ (8002a64 <TIM_Base_SetConfig+0x13c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d108      	bne.n	800297a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800296e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a35      	ldr	r2, [pc, #212]	@ (8002a54 <TIM_Base_SetConfig+0x12c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d02b      	beq.n	80029da <TIM_Base_SetConfig+0xb2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002988:	d027      	beq.n	80029da <TIM_Base_SetConfig+0xb2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a32      	ldr	r2, [pc, #200]	@ (8002a58 <TIM_Base_SetConfig+0x130>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d023      	beq.n	80029da <TIM_Base_SetConfig+0xb2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a31      	ldr	r2, [pc, #196]	@ (8002a5c <TIM_Base_SetConfig+0x134>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01f      	beq.n	80029da <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a30      	ldr	r2, [pc, #192]	@ (8002a60 <TIM_Base_SetConfig+0x138>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01b      	beq.n	80029da <TIM_Base_SetConfig+0xb2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002a64 <TIM_Base_SetConfig+0x13c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d017      	beq.n	80029da <TIM_Base_SetConfig+0xb2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002a68 <TIM_Base_SetConfig+0x140>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <TIM_Base_SetConfig+0xb2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a2d      	ldr	r2, [pc, #180]	@ (8002a6c <TIM_Base_SetConfig+0x144>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00f      	beq.n	80029da <TIM_Base_SetConfig+0xb2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002a70 <TIM_Base_SetConfig+0x148>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00b      	beq.n	80029da <TIM_Base_SetConfig+0xb2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a74 <TIM_Base_SetConfig+0x14c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d007      	beq.n	80029da <TIM_Base_SetConfig+0xb2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002a78 <TIM_Base_SetConfig+0x150>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d003      	beq.n	80029da <TIM_Base_SetConfig+0xb2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a29      	ldr	r2, [pc, #164]	@ (8002a7c <TIM_Base_SetConfig+0x154>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d108      	bne.n	80029ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a10      	ldr	r2, [pc, #64]	@ (8002a54 <TIM_Base_SetConfig+0x12c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d003      	beq.n	8002a20 <TIM_Base_SetConfig+0xf8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a12      	ldr	r2, [pc, #72]	@ (8002a64 <TIM_Base_SetConfig+0x13c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d103      	bne.n	8002a28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d105      	bne.n	8002a46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f023 0201 	bic.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	611a      	str	r2, [r3, #16]
  }
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40000800 	.word	0x40000800
 8002a60:	40000c00 	.word	0x40000c00
 8002a64:	40010400 	.word	0x40010400
 8002a68:	40014000 	.word	0x40014000
 8002a6c:	40014400 	.word	0x40014400
 8002a70:	40014800 	.word	0x40014800
 8002a74:	40001800 	.word	0x40001800
 8002a78:	40001c00 	.word	0x40001c00
 8002a7c:	40002000 	.word	0x40002000

08002a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <__NVIC_SetPriority>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	db0a      	blt.n	8002ad2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	490c      	ldr	r1, [pc, #48]	@ (8002af4 <__NVIC_SetPriority+0x4c>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	440b      	add	r3, r1
 8002acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002ad0:	e00a      	b.n	8002ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4908      	ldr	r1, [pc, #32]	@ (8002af8 <__NVIC_SetPriority+0x50>)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	761a      	strb	r2, [r3, #24]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002b00:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <SysTick_Handler+0x1c>)
 8002b02:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002b04:	f001 fdd8 	bl	80046b8 <xTaskGetSchedulerState>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d001      	beq.n	8002b12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002b0e:	f002 fbd3 	bl	80052b8 <xPortSysTickHandler>
  }
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	e000e010 	.word	0xe000e010

08002b1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002b20:	2100      	movs	r1, #0
 8002b22:	f06f 0004 	mvn.w	r0, #4
 8002b26:	f7ff ffbf 	bl	8002aa8 <__NVIC_SetPriority>
#endif
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b36:	f3ef 8305 	mrs	r3, IPSR
 8002b3a:	603b      	str	r3, [r7, #0]
  return(result);
 8002b3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002b42:	f06f 0305 	mvn.w	r3, #5
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	e00c      	b.n	8002b64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <osKernelInitialize+0x44>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d105      	bne.n	8002b5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b52:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <osKernelInitialize+0x44>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	e002      	b.n	8002b64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b64:	687b      	ldr	r3, [r7, #4]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000124 	.word	0x20000124

08002b78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b7e:	f3ef 8305 	mrs	r3, IPSR
 8002b82:	603b      	str	r3, [r7, #0]
  return(result);
 8002b84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002b8a:	f06f 0305 	mvn.w	r3, #5
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	e010      	b.n	8002bb4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b92:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <osKernelStart+0x48>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d109      	bne.n	8002bae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002b9a:	f7ff ffbf 	bl	8002b1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b9e:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <osKernelStart+0x48>)
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002ba4:	f001 f924 	bl	8003df0 <vTaskStartScheduler>
      stat = osOK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	e002      	b.n	8002bb4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002bb4:	687b      	ldr	r3, [r7, #4]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000124 	.word	0x20000124

08002bc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08e      	sub	sp, #56	@ 0x38
 8002bc8:	af04      	add	r7, sp, #16
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bd4:	f3ef 8305 	mrs	r3, IPSR
 8002bd8:	617b      	str	r3, [r7, #20]
  return(result);
 8002bda:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d17e      	bne.n	8002cde <osThreadNew+0x11a>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d07b      	beq.n	8002cde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002bea:	2318      	movs	r3, #24
 8002bec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d045      	beq.n	8002c8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <osThreadNew+0x48>
        name = attr->name;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <osThreadNew+0x6e>
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b38      	cmp	r3, #56	@ 0x38
 8002c24:	d805      	bhi.n	8002c32 <osThreadNew+0x6e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <osThreadNew+0x72>
        return (NULL);
 8002c32:	2300      	movs	r3, #0
 8002c34:	e054      	b.n	8002ce0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	089b      	lsrs	r3, r3, #2
 8002c44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00e      	beq.n	8002c6c <osThreadNew+0xa8>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2ba7      	cmp	r3, #167	@ 0xa7
 8002c54:	d90a      	bls.n	8002c6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <osThreadNew+0xa8>
        mem = 1;
 8002c66:	2301      	movs	r3, #1
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	e010      	b.n	8002c8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10c      	bne.n	8002c8e <osThreadNew+0xca>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d108      	bne.n	8002c8e <osThreadNew+0xca>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d104      	bne.n	8002c8e <osThreadNew+0xca>
          mem = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	e001      	b.n	8002c8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d110      	bne.n	8002cb6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c9c:	9202      	str	r2, [sp, #8]
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	6a3a      	ldr	r2, [r7, #32]
 8002ca8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 feac 	bl	8003a08 <xTaskCreateStatic>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	e013      	b.n	8002cde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d110      	bne.n	8002cde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fefa 	bl	8003ac8 <xTaskCreate>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d001      	beq.n	8002cde <osThreadNew+0x11a>
            hTask = NULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002cde:	693b      	ldr	r3, [r7, #16]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3728      	adds	r7, #40	@ 0x28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cf0:	f3ef 8305 	mrs	r3, IPSR
 8002cf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <osDelay+0x1c>
    stat = osErrorISR;
 8002cfc:	f06f 0305 	mvn.w	r3, #5
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	e007      	b.n	8002d14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f001 f838 	bl	8003d84 <vTaskDelay>
    }
  }

  return (stat);
 8002d14:	68fb      	ldr	r3, [r7, #12]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b086      	sub	sp, #24
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d2a:	f3ef 8305 	mrs	r3, IPSR
 8002d2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d30:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d12d      	bne.n	8002d92 <osEventFlagsNew+0x74>
    mem = -1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d015      	beq.n	8002d6e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <osEventFlagsNew+0x3a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b1f      	cmp	r3, #31
 8002d50:	d902      	bls.n	8002d58 <osEventFlagsNew+0x3a>
        mem = 1;
 8002d52:	2301      	movs	r3, #1
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	e00c      	b.n	8002d72 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d108      	bne.n	8002d72 <osEventFlagsNew+0x54>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d104      	bne.n	8002d72 <osEventFlagsNew+0x54>
          mem = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	e001      	b.n	8002d72 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d106      	bne.n	8002d86 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 f841 	bl	8002e04 <xEventGroupCreateStatic>
 8002d82:	6178      	str	r0, [r7, #20]
 8002d84:	e005      	b.n	8002d92 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002d8c:	f000 f873 	bl	8002e76 <xEventGroupCreate>
 8002d90:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002d92:	697b      	ldr	r3, [r7, #20]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a07      	ldr	r2, [pc, #28]	@ (8002dc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002dac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4a06      	ldr	r2, [pc, #24]	@ (8002dcc <vApplicationGetIdleTaskMemory+0x30>)
 8002db2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2280      	movs	r2, #128	@ 0x80
 8002db8:	601a      	str	r2, [r3, #0]
}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000128 	.word	0x20000128
 8002dcc:	200001d0 	.word	0x200001d0

08002dd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4a07      	ldr	r2, [pc, #28]	@ (8002dfc <vApplicationGetTimerTaskMemory+0x2c>)
 8002de0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4a06      	ldr	r2, [pc, #24]	@ (8002e00 <vApplicationGetTimerTaskMemory+0x30>)
 8002de6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dee:	601a      	str	r2, [r3, #0]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	200003d0 	.word	0x200003d0
 8002e00:	20000478 	.word	0x20000478

08002e04 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10b      	bne.n	8002e2a <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	e7fd      	b.n	8002e26 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002e2a:	2320      	movs	r3, #32
 8002e2c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d00b      	beq.n	8002e4c <xEventGroupCreateStatic+0x48>
	__asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	60fb      	str	r3, [r7, #12]
}
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
 8002e4a:	e7fd      	b.n	8002e48 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f822 	bl	8002eaa <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8002e6c:	697b      	ldr	r3, [r7, #20]
	}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002e7c:	2020      	movs	r0, #32
 8002e7e:	f002 faad 	bl	80053dc <pvPortMalloc>
 8002e82:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 f808 	bl	8002eaa <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8002ea0:	687b      	ldr	r3, [r7, #4]
	}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f103 0208 	add.w	r2, r3, #8
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f103 0208 	add.w	r2, r3, #8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f103 0208 	add.w	r2, r3, #8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	601a      	str	r2, [r3, #0]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f62:	d103      	bne.n	8002f6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e00c      	b.n	8002f86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3308      	adds	r3, #8
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	e002      	b.n	8002f7a <vListInsert+0x2e>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d2f6      	bcs.n	8002f74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	601a      	str	r2, [r3, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6892      	ldr	r2, [r2, #8]
 8002fd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6852      	ldr	r2, [r2, #4]
 8002fde:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d103      	bne.n	8002ff2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	1e5a      	subs	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10b      	bne.n	8003040 <xQueueGenericReset+0x2c>
	__asm volatile
 8003028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	60bb      	str	r3, [r7, #8]
}
 800303a:	bf00      	nop
 800303c:	bf00      	nop
 800303e:	e7fd      	b.n	800303c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003040:	f002 f8aa 	bl	8005198 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304c:	68f9      	ldr	r1, [r7, #12]
 800304e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	441a      	add	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003070:	3b01      	subs	r3, #1
 8003072:	68f9      	ldr	r1, [r7, #12]
 8003074:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	441a      	add	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	22ff      	movs	r2, #255	@ 0xff
 8003084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	22ff      	movs	r2, #255	@ 0xff
 800308c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d114      	bne.n	80030c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01a      	beq.n	80030d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3310      	adds	r3, #16
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 f942 	bl	800432c <xTaskRemoveFromEventList>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d012      	beq.n	80030d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80030ae:	4b0d      	ldr	r3, [pc, #52]	@ (80030e4 <xQueueGenericReset+0xd0>)
 80030b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	e009      	b.n	80030d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3310      	adds	r3, #16
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fef0 	bl	8002eaa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3324      	adds	r3, #36	@ 0x24
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff feeb 	bl	8002eaa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030d4:	f002 f892 	bl	80051fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030d8:	2301      	movs	r3, #1
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	e000ed04 	.word	0xe000ed04

080030e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08e      	sub	sp, #56	@ 0x38
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800310e:	bf00      	nop
 8003110:	bf00      	nop
 8003112:	e7fd      	b.n	8003110 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10b      	bne.n	8003132 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	e7fd      	b.n	800312e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <xQueueGenericCreateStatic+0x56>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <xQueueGenericCreateStatic+0x5a>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <xQueueGenericCreateStatic+0x5c>
 8003142:	2300      	movs	r3, #0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	623b      	str	r3, [r7, #32]
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	e7fd      	b.n	800315c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <xQueueGenericCreateStatic+0x84>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <xQueueGenericCreateStatic+0x88>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <xQueueGenericCreateStatic+0x8a>
 8003170:	2300      	movs	r3, #0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10b      	bne.n	800318e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	61fb      	str	r3, [r7, #28]
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	e7fd      	b.n	800318a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800318e:	2350      	movs	r3, #80	@ 0x50
 8003190:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b50      	cmp	r3, #80	@ 0x50
 8003196:	d00b      	beq.n	80031b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	61bb      	str	r3, [r7, #24]
}
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80031b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80031b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80031c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f805 	bl	80031e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80031da:	4618      	mov	r0, r3
 80031dc:	3730      	adds	r7, #48	@ 0x30
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e002      	b.n	8003204 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003210:	2101      	movs	r1, #1
 8003212:	69b8      	ldr	r0, [r7, #24]
 8003214:	f7ff fefe 	bl	8003014 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08e      	sub	sp, #56	@ 0x38
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003236:	2300      	movs	r3, #0
 8003238:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10b      	bne.n	800325c <xQueueGenericSend+0x34>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003256:	bf00      	nop
 8003258:	bf00      	nop
 800325a:	e7fd      	b.n	8003258 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <xQueueGenericSend+0x42>
 8003262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <xQueueGenericSend+0x46>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <xQueueGenericSend+0x48>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10b      	bne.n	800328c <xQueueGenericSend+0x64>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d103      	bne.n	800329a <xQueueGenericSend+0x72>
 8003292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <xQueueGenericSend+0x76>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <xQueueGenericSend+0x78>
 800329e:	2300      	movs	r3, #0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <xQueueGenericSend+0x94>
	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	623b      	str	r3, [r7, #32]
}
 80032b6:	bf00      	nop
 80032b8:	bf00      	nop
 80032ba:	e7fd      	b.n	80032b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032bc:	f001 f9fc 	bl	80046b8 <xTaskGetSchedulerState>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <xQueueGenericSend+0xa4>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <xQueueGenericSend+0xa8>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <xQueueGenericSend+0xaa>
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <xQueueGenericSend+0xc6>
	__asm volatile
 80032d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	61fb      	str	r3, [r7, #28]
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	e7fd      	b.n	80032ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032ee:	f001 ff53 	bl	8005198 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <xQueueGenericSend+0xdc>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d129      	bne.n	8003358 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800330a:	f000 fa0f 	bl	800372c <prvCopyDataToQueue>
 800330e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	2b00      	cmp	r3, #0
 8003316:	d010      	beq.n	800333a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	3324      	adds	r3, #36	@ 0x24
 800331c:	4618      	mov	r0, r3
 800331e:	f001 f805 	bl	800432c <xTaskRemoveFromEventList>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d013      	beq.n	8003350 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003328:	4b3f      	ldr	r3, [pc, #252]	@ (8003428 <xQueueGenericSend+0x200>)
 800332a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	e00a      	b.n	8003350 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800333a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003340:	4b39      	ldr	r3, [pc, #228]	@ (8003428 <xQueueGenericSend+0x200>)
 8003342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003350:	f001 ff54 	bl	80051fc <vPortExitCritical>
				return pdPASS;
 8003354:	2301      	movs	r3, #1
 8003356:	e063      	b.n	8003420 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800335e:	f001 ff4d 	bl	80051fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003362:	2300      	movs	r3, #0
 8003364:	e05c      	b.n	8003420 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003368:	2b00      	cmp	r3, #0
 800336a:	d106      	bne.n	800337a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	4618      	mov	r0, r3
 8003372:	f001 f83f 	bl	80043f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003376:	2301      	movs	r3, #1
 8003378:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800337a:	f001 ff3f 	bl	80051fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800337e:	f000 fda7 	bl	8003ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003382:	f001 ff09 	bl	8005198 <vPortEnterCritical>
 8003386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003388:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800338c:	b25b      	sxtb	r3, r3
 800338e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003392:	d103      	bne.n	800339c <xQueueGenericSend+0x174>
 8003394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800339c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033a2:	b25b      	sxtb	r3, r3
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d103      	bne.n	80033b2 <xQueueGenericSend+0x18a>
 80033aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033b2:	f001 ff23 	bl	80051fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033b6:	1d3a      	adds	r2, r7, #4
 80033b8:	f107 0314 	add.w	r3, r7, #20
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f001 f82e 	bl	8004420 <xTaskCheckForTimeOut>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d124      	bne.n	8003414 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033cc:	f000 faa6 	bl	800391c <prvIsQueueFull>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d018      	beq.n	8003408 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d8:	3310      	adds	r3, #16
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 ff52 	bl	8004288 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033e6:	f000 fa31 	bl	800384c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033ea:	f000 fd7f 	bl	8003eec <xTaskResumeAll>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f47f af7c 	bne.w	80032ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80033f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <xQueueGenericSend+0x200>)
 80033f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	e772      	b.n	80032ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800340a:	f000 fa1f 	bl	800384c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800340e:	f000 fd6d 	bl	8003eec <xTaskResumeAll>
 8003412:	e76c      	b.n	80032ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003414:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003416:	f000 fa19 	bl	800384c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800341a:	f000 fd67 	bl	8003eec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800341e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003420:	4618      	mov	r0, r3
 8003422:	3738      	adds	r7, #56	@ 0x38
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	e000ed04 	.word	0xe000ed04

0800342c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b090      	sub	sp, #64	@ 0x40
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800343e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10b      	bne.n	800345c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003456:	bf00      	nop
 8003458:	bf00      	nop
 800345a:	e7fd      	b.n	8003458 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <xQueueGenericSendFromISR+0x3e>
 8003462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <xQueueGenericSendFromISR+0x42>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <xQueueGenericSendFromISR+0x44>
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	e7fd      	b.n	8003488 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d103      	bne.n	800349a <xQueueGenericSendFromISR+0x6e>
 8003492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <xQueueGenericSendFromISR+0x72>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <xQueueGenericSendFromISR+0x74>
 800349e:	2300      	movs	r3, #0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	623b      	str	r3, [r7, #32]
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034bc:	f001 ff4c 	bl	8005358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80034c0:	f3ef 8211 	mrs	r2, BASEPRI
 80034c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	61fa      	str	r2, [r7, #28]
 80034d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80034d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d302      	bcc.n	80034ee <xQueueGenericSendFromISR+0xc2>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d12f      	bne.n	800354e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003504:	f000 f912 	bl	800372c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003508:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d112      	bne.n	8003538 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800351a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351c:	3324      	adds	r3, #36	@ 0x24
 800351e:	4618      	mov	r0, r3
 8003520:	f000 ff04 	bl	800432c <xTaskRemoveFromEventList>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00e      	beq.n	8003548 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00b      	beq.n	8003548 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	e007      	b.n	8003548 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003538:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800353c:	3301      	adds	r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	b25a      	sxtb	r2, r3
 8003542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003548:	2301      	movs	r3, #1
 800354a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800354c:	e001      	b.n	8003552 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800354e:	2300      	movs	r3, #0
 8003550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003554:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800355c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800355e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003560:	4618      	mov	r0, r3
 8003562:	3740      	adds	r7, #64	@ 0x40
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08c      	sub	sp, #48	@ 0x30
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800357c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10b      	bne.n	800359a <xQueueReceive+0x32>
	__asm volatile
 8003582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	623b      	str	r3, [r7, #32]
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop
 8003598:	e7fd      	b.n	8003596 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <xQueueReceive+0x40>
 80035a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <xQueueReceive+0x44>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <xQueueReceive+0x46>
 80035ac:	2300      	movs	r3, #0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <xQueueReceive+0x62>
	__asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	61fb      	str	r3, [r7, #28]
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	e7fd      	b.n	80035c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035ca:	f001 f875 	bl	80046b8 <xTaskGetSchedulerState>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <xQueueReceive+0x72>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <xQueueReceive+0x76>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <xQueueReceive+0x78>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10b      	bne.n	80035fc <xQueueReceive+0x94>
	__asm volatile
 80035e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	61bb      	str	r3, [r7, #24]
}
 80035f6:	bf00      	nop
 80035f8:	bf00      	nop
 80035fa:	e7fd      	b.n	80035f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035fc:	f001 fdcc 	bl	8005198 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01f      	beq.n	800364c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003610:	f000 f8f6 	bl	8003800 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	1e5a      	subs	r2, r3, #1
 8003618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00f      	beq.n	8003644 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003626:	3310      	adds	r3, #16
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fe7f 	bl	800432c <xTaskRemoveFromEventList>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003634:	4b3c      	ldr	r3, [pc, #240]	@ (8003728 <xQueueReceive+0x1c0>)
 8003636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003644:	f001 fdda 	bl	80051fc <vPortExitCritical>
				return pdPASS;
 8003648:	2301      	movs	r3, #1
 800364a:	e069      	b.n	8003720 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d103      	bne.n	800365a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003652:	f001 fdd3 	bl	80051fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003656:	2300      	movs	r3, #0
 8003658:	e062      	b.n	8003720 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800365a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003660:	f107 0310 	add.w	r3, r7, #16
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fec5 	bl	80043f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800366a:	2301      	movs	r3, #1
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800366e:	f001 fdc5 	bl	80051fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003672:	f000 fc2d 	bl	8003ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003676:	f001 fd8f 	bl	8005198 <vPortEnterCritical>
 800367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003680:	b25b      	sxtb	r3, r3
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d103      	bne.n	8003690 <xQueueReceive+0x128>
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003692:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003696:	b25b      	sxtb	r3, r3
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d103      	bne.n	80036a6 <xQueueReceive+0x13e>
 800369e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036a6:	f001 fda9 	bl	80051fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036aa:	1d3a      	adds	r2, r7, #4
 80036ac:	f107 0310 	add.w	r3, r7, #16
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 feb4 	bl	8004420 <xTaskCheckForTimeOut>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d123      	bne.n	8003706 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036c0:	f000 f916 	bl	80038f0 <prvIsQueueEmpty>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d017      	beq.n	80036fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036cc:	3324      	adds	r3, #36	@ 0x24
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fdd8 	bl	8004288 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036da:	f000 f8b7 	bl	800384c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036de:	f000 fc05 	bl	8003eec <xTaskResumeAll>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d189      	bne.n	80035fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80036e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003728 <xQueueReceive+0x1c0>)
 80036ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	e780      	b.n	80035fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80036fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036fc:	f000 f8a6 	bl	800384c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003700:	f000 fbf4 	bl	8003eec <xTaskResumeAll>
 8003704:	e77a      	b.n	80035fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003708:	f000 f8a0 	bl	800384c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800370c:	f000 fbee 	bl	8003eec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003712:	f000 f8ed 	bl	80038f0 <prvIsQueueEmpty>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	f43f af6f 	beq.w	80035fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800371e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003720:	4618      	mov	r0, r3
 8003722:	3730      	adds	r7, #48	@ 0x30
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	e000ed04 	.word	0xe000ed04

0800372c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003740:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10d      	bne.n	8003766 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d14d      	bne.n	80037ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 ffcc 	bl	80046f4 <xTaskPriorityDisinherit>
 800375c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	e043      	b.n	80037ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d119      	bne.n	80037a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6858      	ldr	r0, [r3, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	461a      	mov	r2, r3
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	f002 f8a2 	bl	80058c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	441a      	add	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d32b      	bcc.n	80037ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	e026      	b.n	80037ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	68d8      	ldr	r0, [r3, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	461a      	mov	r2, r3
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	f002 f888 	bl	80058c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	425b      	negs	r3, r3
 80037ba:	441a      	add	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d207      	bcs.n	80037dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	425b      	negs	r3, r3
 80037d6:	441a      	add	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d105      	bne.n	80037ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80037f6:	697b      	ldr	r3, [r7, #20]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d018      	beq.n	8003844 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	441a      	add	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	429a      	cmp	r2, r3
 800382a:	d303      	bcc.n	8003834 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68d9      	ldr	r1, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	461a      	mov	r2, r3
 800383e:	6838      	ldr	r0, [r7, #0]
 8003840:	f002 f83e 	bl	80058c0 <memcpy>
	}
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003854:	f001 fca0 	bl	8005198 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800385e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003860:	e011      	b.n	8003886 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	d012      	beq.n	8003890 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3324      	adds	r3, #36	@ 0x24
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fd5c 	bl	800432c <xTaskRemoveFromEventList>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800387a:	f000 fe35 	bl	80044e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	3b01      	subs	r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388a:	2b00      	cmp	r3, #0
 800388c:	dce9      	bgt.n	8003862 <prvUnlockQueue+0x16>
 800388e:	e000      	b.n	8003892 <prvUnlockQueue+0x46>
					break;
 8003890:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	22ff      	movs	r2, #255	@ 0xff
 8003896:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800389a:	f001 fcaf 	bl	80051fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800389e:	f001 fc7b 	bl	8005198 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038aa:	e011      	b.n	80038d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d012      	beq.n	80038da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3310      	adds	r3, #16
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fd37 	bl	800432c <xTaskRemoveFromEventList>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038c4:	f000 fe10 	bl	80044e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038c8:	7bbb      	ldrb	r3, [r7, #14]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	dce9      	bgt.n	80038ac <prvUnlockQueue+0x60>
 80038d8:	e000      	b.n	80038dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	22ff      	movs	r2, #255	@ 0xff
 80038e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80038e4:	f001 fc8a 	bl	80051fc <vPortExitCritical>
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038f8:	f001 fc4e 	bl	8005198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003904:	2301      	movs	r3, #1
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e001      	b.n	800390e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800390e:	f001 fc75 	bl	80051fc <vPortExitCritical>

	return xReturn;
 8003912:	68fb      	ldr	r3, [r7, #12]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003924:	f001 fc38 	bl	8005198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003930:	429a      	cmp	r2, r3
 8003932:	d102      	bne.n	800393a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003934:	2301      	movs	r3, #1
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	e001      	b.n	800393e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800393e:	f001 fc5d 	bl	80051fc <vPortExitCritical>

	return xReturn;
 8003942:	68fb      	ldr	r3, [r7, #12]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	e014      	b.n	8003986 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800395c:	4a0f      	ldr	r2, [pc, #60]	@ (800399c <vQueueAddToRegistry+0x50>)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003968:	490c      	ldr	r1, [pc, #48]	@ (800399c <vQueueAddToRegistry+0x50>)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003972:	4a0a      	ldr	r2, [pc, #40]	@ (800399c <vQueueAddToRegistry+0x50>)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4413      	add	r3, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800397e:	e006      	b.n	800398e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3301      	adds	r3, #1
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b07      	cmp	r3, #7
 800398a:	d9e7      	bls.n	800395c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000878 	.word	0x20000878

080039a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039b0:	f001 fbf2 	bl	8005198 <vPortEnterCritical>
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039ba:	b25b      	sxtb	r3, r3
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c0:	d103      	bne.n	80039ca <vQueueWaitForMessageRestricted+0x2a>
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039d0:	b25b      	sxtb	r3, r3
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d6:	d103      	bne.n	80039e0 <vQueueWaitForMessageRestricted+0x40>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039e0:	f001 fc0c 	bl	80051fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d106      	bne.n	80039fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	3324      	adds	r3, #36	@ 0x24
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fc6d 	bl	80042d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039fa:	6978      	ldr	r0, [r7, #20]
 80039fc:	f7ff ff26 	bl	800384c <prvUnlockQueue>
	}
 8003a00:	bf00      	nop
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08e      	sub	sp, #56	@ 0x38
 8003a0c:	af04      	add	r7, sp, #16
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	623b      	str	r3, [r7, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	61fb      	str	r3, [r7, #28]
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	e7fd      	b.n	8003a4e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a52:	23a8      	movs	r3, #168	@ 0xa8
 8003a54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2ba8      	cmp	r3, #168	@ 0xa8
 8003a5a:	d00b      	beq.n	8003a74 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	61bb      	str	r3, [r7, #24]
}
 8003a6e:	bf00      	nop
 8003a70:	bf00      	nop
 8003a72:	e7fd      	b.n	8003a70 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a74:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01e      	beq.n	8003aba <xTaskCreateStatic+0xb2>
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01b      	beq.n	8003aba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a94:	2300      	movs	r3, #0
 8003a96:	9303      	str	r3, [sp, #12]
 8003a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9a:	9302      	str	r3, [sp, #8]
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	9301      	str	r3, [sp, #4]
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f851 	bl	8003b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ab2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ab4:	f000 f8f6 	bl	8003ca4 <prvAddNewTaskToReadyList>
 8003ab8:	e001      	b.n	8003abe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003abe:	697b      	ldr	r3, [r7, #20]
	}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3728      	adds	r7, #40	@ 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08c      	sub	sp, #48	@ 0x30
 8003acc:	af04      	add	r7, sp, #16
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 fc7d 	bl	80053dc <pvPortMalloc>
 8003ae2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00e      	beq.n	8003b08 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003aea:	20a8      	movs	r0, #168	@ 0xa8
 8003aec:	f001 fc76 	bl	80053dc <pvPortMalloc>
 8003af0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	631a      	str	r2, [r3, #48]	@ 0x30
 8003afe:	e005      	b.n	8003b0c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b00:	6978      	ldr	r0, [r7, #20]
 8003b02:	f001 fd39 	bl	8005578 <vPortFree>
 8003b06:	e001      	b.n	8003b0c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d017      	beq.n	8003b42 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	9303      	str	r3, [sp, #12]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	9302      	str	r3, [sp, #8]
 8003b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f80f 	bl	8003b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b36:	69f8      	ldr	r0, [r7, #28]
 8003b38:	f000 f8b4 	bl	8003ca4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	e002      	b.n	8003b48 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b42:	f04f 33ff 	mov.w	r3, #4294967295
 8003b46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b48:	69bb      	ldr	r3, [r7, #24]
	}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b64:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	21a5      	movs	r1, #165	@ 0xa5
 8003b6e:	f001 fe23 	bl	80057b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f023 0307 	bic.w	r3, r3, #7
 8003b8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	617b      	str	r3, [r7, #20]
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	e7fd      	b.n	8003baa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01f      	beq.n	8003bf4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
 8003bb8:	e012      	b.n	8003be0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	7819      	ldrb	r1, [r3, #0]
 8003bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3334      	adds	r3, #52	@ 0x34
 8003bca:	460a      	mov	r2, r1
 8003bcc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d006      	beq.n	8003be8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	2b0f      	cmp	r3, #15
 8003be4:	d9e9      	bls.n	8003bba <prvInitialiseNewTask+0x66>
 8003be6:	e000      	b.n	8003bea <prvInitialiseNewTask+0x96>
			{
				break;
 8003be8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bf2:	e003      	b.n	8003bfc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfe:	2b37      	cmp	r3, #55	@ 0x37
 8003c00:	d901      	bls.n	8003c06 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c02:	2337      	movs	r3, #55	@ 0x37
 8003c04:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c10:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c14:	2200      	movs	r2, #0
 8003c16:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff f964 	bl	8002eea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c24:	3318      	adds	r3, #24
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff f95f 	bl	8002eea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c40:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c44:	2200      	movs	r2, #0
 8003c46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	3354      	adds	r3, #84	@ 0x54
 8003c56:	224c      	movs	r2, #76	@ 0x4c
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 fdac 	bl	80057b8 <memset>
 8003c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c62:	4a0d      	ldr	r2, [pc, #52]	@ (8003c98 <prvInitialiseNewTask+0x144>)
 8003c64:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c68:	4a0c      	ldr	r2, [pc, #48]	@ (8003c9c <prvInitialiseNewTask+0x148>)
 8003c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ca0 <prvInitialiseNewTask+0x14c>)
 8003c70:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	68f9      	ldr	r1, [r7, #12]
 8003c76:	69b8      	ldr	r0, [r7, #24]
 8003c78:	f001 f95a 	bl	8004f30 <pxPortInitialiseStack>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c8e:	bf00      	nop
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20004b0c 	.word	0x20004b0c
 8003c9c:	20004b74 	.word	0x20004b74
 8003ca0:	20004bdc 	.word	0x20004bdc

08003ca4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cac:	f001 fa74 	bl	8005198 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8003d68 <prvAddNewTaskToReadyList+0xc4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8003d68 <prvAddNewTaskToReadyList+0xc4>)
 8003cb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cba:	4b2c      	ldr	r3, [pc, #176]	@ (8003d6c <prvAddNewTaskToReadyList+0xc8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8003d6c <prvAddNewTaskToReadyList+0xc8>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cc8:	4b27      	ldr	r3, [pc, #156]	@ (8003d68 <prvAddNewTaskToReadyList+0xc4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d110      	bne.n	8003cf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cd0:	f000 fc2e 	bl	8004530 <prvInitialiseTaskLists>
 8003cd4:	e00d      	b.n	8003cf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cd6:	4b26      	ldr	r3, [pc, #152]	@ (8003d70 <prvAddNewTaskToReadyList+0xcc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cde:	4b23      	ldr	r3, [pc, #140]	@ (8003d6c <prvAddNewTaskToReadyList+0xc8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d802      	bhi.n	8003cf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cec:	4a1f      	ldr	r2, [pc, #124]	@ (8003d6c <prvAddNewTaskToReadyList+0xc8>)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cf2:	4b20      	ldr	r3, [pc, #128]	@ (8003d74 <prvAddNewTaskToReadyList+0xd0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8003d74 <prvAddNewTaskToReadyList+0xd0>)
 8003cfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d74 <prvAddNewTaskToReadyList+0xd0>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d08:	4b1b      	ldr	r3, [pc, #108]	@ (8003d78 <prvAddNewTaskToReadyList+0xd4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d903      	bls.n	8003d18 <prvAddNewTaskToReadyList+0x74>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d14:	4a18      	ldr	r2, [pc, #96]	@ (8003d78 <prvAddNewTaskToReadyList+0xd4>)
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4a15      	ldr	r2, [pc, #84]	@ (8003d7c <prvAddNewTaskToReadyList+0xd8>)
 8003d26:	441a      	add	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	f7ff f8e8 	bl	8002f04 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d34:	f001 fa62 	bl	80051fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d38:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <prvAddNewTaskToReadyList+0xcc>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00e      	beq.n	8003d5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d40:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <prvAddNewTaskToReadyList+0xc8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d207      	bcs.n	8003d5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d80 <prvAddNewTaskToReadyList+0xdc>)
 8003d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000d8c 	.word	0x20000d8c
 8003d6c:	200008b8 	.word	0x200008b8
 8003d70:	20000d98 	.word	0x20000d98
 8003d74:	20000da8 	.word	0x20000da8
 8003d78:	20000d94 	.word	0x20000d94
 8003d7c:	200008bc 	.word	0x200008bc
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d018      	beq.n	8003dc8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d96:	4b14      	ldr	r3, [pc, #80]	@ (8003de8 <vTaskDelay+0x64>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <vTaskDelay+0x32>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	60bb      	str	r3, [r7, #8]
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	e7fd      	b.n	8003db2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003db6:	f000 f88b 	bl	8003ed0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dba:	2100      	movs	r1, #0
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fd09 	bl	80047d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003dc2:	f000 f893 	bl	8003eec <xTaskResumeAll>
 8003dc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d107      	bne.n	8003dde <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003dce:	4b07      	ldr	r3, [pc, #28]	@ (8003dec <vTaskDelay+0x68>)
 8003dd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000db4 	.word	0x20000db4
 8003dec:	e000ed04 	.word	0xe000ed04

08003df0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08a      	sub	sp, #40	@ 0x28
 8003df4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dfe:	463a      	mov	r2, r7
 8003e00:	1d39      	adds	r1, r7, #4
 8003e02:	f107 0308 	add.w	r3, r7, #8
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe ffc8 	bl	8002d9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e0c:	6839      	ldr	r1, [r7, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	9202      	str	r2, [sp, #8]
 8003e14:	9301      	str	r3, [sp, #4]
 8003e16:	2300      	movs	r3, #0
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	460a      	mov	r2, r1
 8003e1e:	4924      	ldr	r1, [pc, #144]	@ (8003eb0 <vTaskStartScheduler+0xc0>)
 8003e20:	4824      	ldr	r0, [pc, #144]	@ (8003eb4 <vTaskStartScheduler+0xc4>)
 8003e22:	f7ff fdf1 	bl	8003a08 <xTaskCreateStatic>
 8003e26:	4603      	mov	r3, r0
 8003e28:	4a23      	ldr	r2, [pc, #140]	@ (8003eb8 <vTaskStartScheduler+0xc8>)
 8003e2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e2c:	4b22      	ldr	r3, [pc, #136]	@ (8003eb8 <vTaskStartScheduler+0xc8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e34:	2301      	movs	r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e001      	b.n	8003e3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d102      	bne.n	8003e4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e44:	f000 fd1a 	bl	800487c <xTimerCreateTimerTask>
 8003e48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d11b      	bne.n	8003e88 <vTaskStartScheduler+0x98>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	613b      	str	r3, [r7, #16]
}
 8003e62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e64:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <vTaskStartScheduler+0xcc>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3354      	adds	r3, #84	@ 0x54
 8003e6a:	4a15      	ldr	r2, [pc, #84]	@ (8003ec0 <vTaskStartScheduler+0xd0>)
 8003e6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ec4 <vTaskStartScheduler+0xd4>)
 8003e70:	f04f 32ff 	mov.w	r2, #4294967295
 8003e74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e76:	4b14      	ldr	r3, [pc, #80]	@ (8003ec8 <vTaskStartScheduler+0xd8>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e7c:	4b13      	ldr	r3, [pc, #76]	@ (8003ecc <vTaskStartScheduler+0xdc>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e82:	f001 f8e5 	bl	8005050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e86:	e00f      	b.n	8003ea8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8e:	d10b      	bne.n	8003ea8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	60fb      	str	r3, [r7, #12]
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <vTaskStartScheduler+0xb4>
}
 8003ea8:	bf00      	nop
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	080059bc 	.word	0x080059bc
 8003eb4:	08004501 	.word	0x08004501
 8003eb8:	20000db0 	.word	0x20000db0
 8003ebc:	200008b8 	.word	0x200008b8
 8003ec0:	20000010 	.word	0x20000010
 8003ec4:	20000dac 	.word	0x20000dac
 8003ec8:	20000d98 	.word	0x20000d98
 8003ecc:	20000d90 	.word	0x20000d90

08003ed0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ed4:	4b04      	ldr	r3, [pc, #16]	@ (8003ee8 <vTaskSuspendAll+0x18>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	4a03      	ldr	r2, [pc, #12]	@ (8003ee8 <vTaskSuspendAll+0x18>)
 8003edc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ede:	bf00      	nop
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	20000db4 	.word	0x20000db4

08003eec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003efa:	4b42      	ldr	r3, [pc, #264]	@ (8004004 <xTaskResumeAll+0x118>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <xTaskResumeAll+0x2e>
	__asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	603b      	str	r3, [r7, #0]
}
 8003f14:	bf00      	nop
 8003f16:	bf00      	nop
 8003f18:	e7fd      	b.n	8003f16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f1a:	f001 f93d 	bl	8005198 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f1e:	4b39      	ldr	r3, [pc, #228]	@ (8004004 <xTaskResumeAll+0x118>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	4a37      	ldr	r2, [pc, #220]	@ (8004004 <xTaskResumeAll+0x118>)
 8003f26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f28:	4b36      	ldr	r3, [pc, #216]	@ (8004004 <xTaskResumeAll+0x118>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d162      	bne.n	8003ff6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f30:	4b35      	ldr	r3, [pc, #212]	@ (8004008 <xTaskResumeAll+0x11c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d05e      	beq.n	8003ff6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f38:	e02f      	b.n	8003f9a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f3a:	4b34      	ldr	r3, [pc, #208]	@ (800400c <xTaskResumeAll+0x120>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3318      	adds	r3, #24
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff f839 	bl	8002fbe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff f834 	bl	8002fbe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8004010 <xTaskResumeAll+0x124>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d903      	bls.n	8003f6a <xTaskResumeAll+0x7e>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f66:	4a2a      	ldr	r2, [pc, #168]	@ (8004010 <xTaskResumeAll+0x124>)
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4a27      	ldr	r2, [pc, #156]	@ (8004014 <xTaskResumeAll+0x128>)
 8003f78:	441a      	add	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f7fe ffbf 	bl	8002f04 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8a:	4b23      	ldr	r3, [pc, #140]	@ (8004018 <xTaskResumeAll+0x12c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d302      	bcc.n	8003f9a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003f94:	4b21      	ldr	r3, [pc, #132]	@ (800401c <xTaskResumeAll+0x130>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800400c <xTaskResumeAll+0x120>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1cb      	bne.n	8003f3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fa8:	f000 fb66 	bl	8004678 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003fac:	4b1c      	ldr	r3, [pc, #112]	@ (8004020 <xTaskResumeAll+0x134>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d010      	beq.n	8003fda <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fb8:	f000 f846 	bl	8004048 <xTaskIncrementTick>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003fc2:	4b16      	ldr	r3, [pc, #88]	@ (800401c <xTaskResumeAll+0x130>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f1      	bne.n	8003fb8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003fd4:	4b12      	ldr	r3, [pc, #72]	@ (8004020 <xTaskResumeAll+0x134>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fda:	4b10      	ldr	r3, [pc, #64]	@ (800401c <xTaskResumeAll+0x130>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8004024 <xTaskResumeAll+0x138>)
 8003fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ff6:	f001 f901 	bl	80051fc <vPortExitCritical>

	return xAlreadyYielded;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000db4 	.word	0x20000db4
 8004008:	20000d8c 	.word	0x20000d8c
 800400c:	20000d4c 	.word	0x20000d4c
 8004010:	20000d94 	.word	0x20000d94
 8004014:	200008bc 	.word	0x200008bc
 8004018:	200008b8 	.word	0x200008b8
 800401c:	20000da0 	.word	0x20000da0
 8004020:	20000d9c 	.word	0x20000d9c
 8004024:	e000ed04 	.word	0xe000ed04

08004028 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800402e:	4b05      	ldr	r3, [pc, #20]	@ (8004044 <xTaskGetTickCount+0x1c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004034:	687b      	ldr	r3, [r7, #4]
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20000d90 	.word	0x20000d90

08004048 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004052:	4b4f      	ldr	r3, [pc, #316]	@ (8004190 <xTaskIncrementTick+0x148>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f040 8090 	bne.w	800417c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800405c:	4b4d      	ldr	r3, [pc, #308]	@ (8004194 <xTaskIncrementTick+0x14c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3301      	adds	r3, #1
 8004062:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004064:	4a4b      	ldr	r2, [pc, #300]	@ (8004194 <xTaskIncrementTick+0x14c>)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d121      	bne.n	80040b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004070:	4b49      	ldr	r3, [pc, #292]	@ (8004198 <xTaskIncrementTick+0x150>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00b      	beq.n	8004092 <xTaskIncrementTick+0x4a>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	603b      	str	r3, [r7, #0]
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	e7fd      	b.n	800408e <xTaskIncrementTick+0x46>
 8004092:	4b41      	ldr	r3, [pc, #260]	@ (8004198 <xTaskIncrementTick+0x150>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	4b40      	ldr	r3, [pc, #256]	@ (800419c <xTaskIncrementTick+0x154>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a3e      	ldr	r2, [pc, #248]	@ (8004198 <xTaskIncrementTick+0x150>)
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	4a3e      	ldr	r2, [pc, #248]	@ (800419c <xTaskIncrementTick+0x154>)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b3e      	ldr	r3, [pc, #248]	@ (80041a0 <xTaskIncrementTick+0x158>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3301      	adds	r3, #1
 80040ac:	4a3c      	ldr	r2, [pc, #240]	@ (80041a0 <xTaskIncrementTick+0x158>)
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	f000 fae2 	bl	8004678 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040b4:	4b3b      	ldr	r3, [pc, #236]	@ (80041a4 <xTaskIncrementTick+0x15c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d349      	bcc.n	8004152 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040be:	4b36      	ldr	r3, [pc, #216]	@ (8004198 <xTaskIncrementTick+0x150>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c8:	4b36      	ldr	r3, [pc, #216]	@ (80041a4 <xTaskIncrementTick+0x15c>)
 80040ca:	f04f 32ff 	mov.w	r2, #4294967295
 80040ce:	601a      	str	r2, [r3, #0]
					break;
 80040d0:	e03f      	b.n	8004152 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d2:	4b31      	ldr	r3, [pc, #196]	@ (8004198 <xTaskIncrementTick+0x150>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d203      	bcs.n	80040f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040ea:	4a2e      	ldr	r2, [pc, #184]	@ (80041a4 <xTaskIncrementTick+0x15c>)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040f0:	e02f      	b.n	8004152 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3304      	adds	r3, #4
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe ff61 	bl	8002fbe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	3318      	adds	r3, #24
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe ff58 	bl	8002fbe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004112:	4b25      	ldr	r3, [pc, #148]	@ (80041a8 <xTaskIncrementTick+0x160>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d903      	bls.n	8004122 <xTaskIncrementTick+0xda>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	4a22      	ldr	r2, [pc, #136]	@ (80041a8 <xTaskIncrementTick+0x160>)
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4a1f      	ldr	r2, [pc, #124]	@ (80041ac <xTaskIncrementTick+0x164>)
 8004130:	441a      	add	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	3304      	adds	r3, #4
 8004136:	4619      	mov	r1, r3
 8004138:	4610      	mov	r0, r2
 800413a:	f7fe fee3 	bl	8002f04 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004142:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <xTaskIncrementTick+0x168>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004148:	429a      	cmp	r2, r3
 800414a:	d3b8      	bcc.n	80040be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800414c:	2301      	movs	r3, #1
 800414e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004150:	e7b5      	b.n	80040be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004152:	4b17      	ldr	r3, [pc, #92]	@ (80041b0 <xTaskIncrementTick+0x168>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004158:	4914      	ldr	r1, [pc, #80]	@ (80041ac <xTaskIncrementTick+0x164>)
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d901      	bls.n	800416e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800416a:	2301      	movs	r3, #1
 800416c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800416e:	4b11      	ldr	r3, [pc, #68]	@ (80041b4 <xTaskIncrementTick+0x16c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004176:	2301      	movs	r3, #1
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	e004      	b.n	8004186 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800417c:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <xTaskIncrementTick+0x170>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	4a0d      	ldr	r2, [pc, #52]	@ (80041b8 <xTaskIncrementTick+0x170>)
 8004184:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004186:	697b      	ldr	r3, [r7, #20]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000db4 	.word	0x20000db4
 8004194:	20000d90 	.word	0x20000d90
 8004198:	20000d44 	.word	0x20000d44
 800419c:	20000d48 	.word	0x20000d48
 80041a0:	20000da4 	.word	0x20000da4
 80041a4:	20000dac 	.word	0x20000dac
 80041a8:	20000d94 	.word	0x20000d94
 80041ac:	200008bc 	.word	0x200008bc
 80041b0:	200008b8 	.word	0x200008b8
 80041b4:	20000da0 	.word	0x20000da0
 80041b8:	20000d9c 	.word	0x20000d9c

080041bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004270 <vTaskSwitchContext+0xb4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004274 <vTaskSwitchContext+0xb8>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041d0:	e047      	b.n	8004262 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80041d2:	4b28      	ldr	r3, [pc, #160]	@ (8004274 <vTaskSwitchContext+0xb8>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d8:	4b27      	ldr	r3, [pc, #156]	@ (8004278 <vTaskSwitchContext+0xbc>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	e011      	b.n	8004204 <vTaskSwitchContext+0x48>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10b      	bne.n	80041fe <vTaskSwitchContext+0x42>
	__asm volatile
 80041e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	607b      	str	r3, [r7, #4]
}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	e7fd      	b.n	80041fa <vTaskSwitchContext+0x3e>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3b01      	subs	r3, #1
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	491d      	ldr	r1, [pc, #116]	@ (800427c <vTaskSwitchContext+0xc0>)
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0e3      	beq.n	80041e0 <vTaskSwitchContext+0x24>
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4a16      	ldr	r2, [pc, #88]	@ (800427c <vTaskSwitchContext+0xc0>)
 8004224:	4413      	add	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	605a      	str	r2, [r3, #4]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	3308      	adds	r3, #8
 800423a:	429a      	cmp	r2, r3
 800423c:	d104      	bne.n	8004248 <vTaskSwitchContext+0x8c>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	4a0c      	ldr	r2, [pc, #48]	@ (8004280 <vTaskSwitchContext+0xc4>)
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	4a09      	ldr	r2, [pc, #36]	@ (8004278 <vTaskSwitchContext+0xbc>)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004258:	4b09      	ldr	r3, [pc, #36]	@ (8004280 <vTaskSwitchContext+0xc4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3354      	adds	r3, #84	@ 0x54
 800425e:	4a09      	ldr	r2, [pc, #36]	@ (8004284 <vTaskSwitchContext+0xc8>)
 8004260:	6013      	str	r3, [r2, #0]
}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000db4 	.word	0x20000db4
 8004274:	20000da0 	.word	0x20000da0
 8004278:	20000d94 	.word	0x20000d94
 800427c:	200008bc 	.word	0x200008bc
 8004280:	200008b8 	.word	0x200008b8
 8004284:	20000010 	.word	0x20000010

08004288 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	60fb      	str	r3, [r7, #12]
}
 80042aa:	bf00      	nop
 80042ac:	bf00      	nop
 80042ae:	e7fd      	b.n	80042ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042b0:	4b07      	ldr	r3, [pc, #28]	@ (80042d0 <vTaskPlaceOnEventList+0x48>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3318      	adds	r3, #24
 80042b6:	4619      	mov	r1, r3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fe fe47 	bl	8002f4c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042be:	2101      	movs	r1, #1
 80042c0:	6838      	ldr	r0, [r7, #0]
 80042c2:	f000 fa87 	bl	80047d4 <prvAddCurrentTaskToDelayedList>
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200008b8 	.word	0x200008b8

080042d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	617b      	str	r3, [r7, #20]
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	e7fd      	b.n	80042fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <vTaskPlaceOnEventListRestricted+0x54>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3318      	adds	r3, #24
 8004304:	4619      	mov	r1, r3
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7fe fdfc 	bl	8002f04 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004312:	f04f 33ff 	mov.w	r3, #4294967295
 8004316:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	68b8      	ldr	r0, [r7, #8]
 800431c:	f000 fa5a 	bl	80047d4 <prvAddCurrentTaskToDelayedList>
	}
 8004320:	bf00      	nop
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	200008b8 	.word	0x200008b8

0800432c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10b      	bne.n	800435a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	60fb      	str	r3, [r7, #12]
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	e7fd      	b.n	8004356 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3318      	adds	r3, #24
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe fe2d 	bl	8002fbe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004364:	4b1d      	ldr	r3, [pc, #116]	@ (80043dc <xTaskRemoveFromEventList+0xb0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d11d      	bne.n	80043a8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	3304      	adds	r3, #4
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe fe24 	bl	8002fbe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800437a:	4b19      	ldr	r3, [pc, #100]	@ (80043e0 <xTaskRemoveFromEventList+0xb4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d903      	bls.n	800438a <xTaskRemoveFromEventList+0x5e>
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004386:	4a16      	ldr	r2, [pc, #88]	@ (80043e0 <xTaskRemoveFromEventList+0xb4>)
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4a13      	ldr	r2, [pc, #76]	@ (80043e4 <xTaskRemoveFromEventList+0xb8>)
 8004398:	441a      	add	r2, r3
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	3304      	adds	r3, #4
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f7fe fdaf 	bl	8002f04 <vListInsertEnd>
 80043a6:	e005      	b.n	80043b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	3318      	adds	r3, #24
 80043ac:	4619      	mov	r1, r3
 80043ae:	480e      	ldr	r0, [pc, #56]	@ (80043e8 <xTaskRemoveFromEventList+0xbc>)
 80043b0:	f7fe fda8 	bl	8002f04 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b8:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <xTaskRemoveFromEventList+0xc0>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043be:	429a      	cmp	r2, r3
 80043c0:	d905      	bls.n	80043ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80043c2:	2301      	movs	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80043c6:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <xTaskRemoveFromEventList+0xc4>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e001      	b.n	80043d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80043d2:	697b      	ldr	r3, [r7, #20]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000db4 	.word	0x20000db4
 80043e0:	20000d94 	.word	0x20000d94
 80043e4:	200008bc 	.word	0x200008bc
 80043e8:	20000d4c 	.word	0x20000d4c
 80043ec:	200008b8 	.word	0x200008b8
 80043f0:	20000da0 	.word	0x20000da0

080043f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043fc:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <vTaskInternalSetTimeOutState+0x24>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004404:	4b05      	ldr	r3, [pc, #20]	@ (800441c <vTaskInternalSetTimeOutState+0x28>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	605a      	str	r2, [r3, #4]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	20000da4 	.word	0x20000da4
 800441c:	20000d90 	.word	0x20000d90

08004420 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10b      	bne.n	8004448 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	613b      	str	r3, [r7, #16]
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	e7fd      	b.n	8004444 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	60fb      	str	r3, [r7, #12]
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	e7fd      	b.n	8004462 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004466:	f000 fe97 	bl	8005198 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800446a:	4b1d      	ldr	r3, [pc, #116]	@ (80044e0 <xTaskCheckForTimeOut+0xc0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d102      	bne.n	800448a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	e023      	b.n	80044d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4b15      	ldr	r3, [pc, #84]	@ (80044e4 <xTaskCheckForTimeOut+0xc4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d007      	beq.n	80044a6 <xTaskCheckForTimeOut+0x86>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	429a      	cmp	r2, r3
 800449e:	d302      	bcc.n	80044a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044a0:	2301      	movs	r3, #1
 80044a2:	61fb      	str	r3, [r7, #28]
 80044a4:	e015      	b.n	80044d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d20b      	bcs.n	80044c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	1ad2      	subs	r2, r2, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ff99 	bl	80043f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	e004      	b.n	80044d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80044ce:	2301      	movs	r3, #1
 80044d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80044d2:	f000 fe93 	bl	80051fc <vPortExitCritical>

	return xReturn;
 80044d6:	69fb      	ldr	r3, [r7, #28]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3720      	adds	r7, #32
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000d90 	.word	0x20000d90
 80044e4:	20000da4 	.word	0x20000da4

080044e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044ec:	4b03      	ldr	r3, [pc, #12]	@ (80044fc <vTaskMissedYield+0x14>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
}
 80044f2:	bf00      	nop
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	20000da0 	.word	0x20000da0

08004500 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004508:	f000 f852 	bl	80045b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800450c:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <prvIdleTask+0x28>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d9f9      	bls.n	8004508 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004514:	4b05      	ldr	r3, [pc, #20]	@ (800452c <prvIdleTask+0x2c>)
 8004516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004524:	e7f0      	b.n	8004508 <prvIdleTask+0x8>
 8004526:	bf00      	nop
 8004528:	200008bc 	.word	0x200008bc
 800452c:	e000ed04 	.word	0xe000ed04

08004530 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004536:	2300      	movs	r3, #0
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	e00c      	b.n	8004556 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4a12      	ldr	r2, [pc, #72]	@ (8004590 <prvInitialiseTaskLists+0x60>)
 8004548:	4413      	add	r3, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe fcad 	bl	8002eaa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3301      	adds	r3, #1
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b37      	cmp	r3, #55	@ 0x37
 800455a:	d9ef      	bls.n	800453c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800455c:	480d      	ldr	r0, [pc, #52]	@ (8004594 <prvInitialiseTaskLists+0x64>)
 800455e:	f7fe fca4 	bl	8002eaa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004562:	480d      	ldr	r0, [pc, #52]	@ (8004598 <prvInitialiseTaskLists+0x68>)
 8004564:	f7fe fca1 	bl	8002eaa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004568:	480c      	ldr	r0, [pc, #48]	@ (800459c <prvInitialiseTaskLists+0x6c>)
 800456a:	f7fe fc9e 	bl	8002eaa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800456e:	480c      	ldr	r0, [pc, #48]	@ (80045a0 <prvInitialiseTaskLists+0x70>)
 8004570:	f7fe fc9b 	bl	8002eaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004574:	480b      	ldr	r0, [pc, #44]	@ (80045a4 <prvInitialiseTaskLists+0x74>)
 8004576:	f7fe fc98 	bl	8002eaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800457a:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <prvInitialiseTaskLists+0x78>)
 800457c:	4a05      	ldr	r2, [pc, #20]	@ (8004594 <prvInitialiseTaskLists+0x64>)
 800457e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004580:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <prvInitialiseTaskLists+0x7c>)
 8004582:	4a05      	ldr	r2, [pc, #20]	@ (8004598 <prvInitialiseTaskLists+0x68>)
 8004584:	601a      	str	r2, [r3, #0]
}
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	200008bc 	.word	0x200008bc
 8004594:	20000d1c 	.word	0x20000d1c
 8004598:	20000d30 	.word	0x20000d30
 800459c:	20000d4c 	.word	0x20000d4c
 80045a0:	20000d60 	.word	0x20000d60
 80045a4:	20000d78 	.word	0x20000d78
 80045a8:	20000d44 	.word	0x20000d44
 80045ac:	20000d48 	.word	0x20000d48

080045b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045b6:	e019      	b.n	80045ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045b8:	f000 fdee 	bl	8005198 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045bc:	4b10      	ldr	r3, [pc, #64]	@ (8004600 <prvCheckTasksWaitingTermination+0x50>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe fcf8 	bl	8002fbe <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004604 <prvCheckTasksWaitingTermination+0x54>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004604 <prvCheckTasksWaitingTermination+0x54>)
 80045d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004608 <prvCheckTasksWaitingTermination+0x58>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3b01      	subs	r3, #1
 80045de:	4a0a      	ldr	r2, [pc, #40]	@ (8004608 <prvCheckTasksWaitingTermination+0x58>)
 80045e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045e2:	f000 fe0b 	bl	80051fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f810 	bl	800460c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045ec:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <prvCheckTasksWaitingTermination+0x58>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e1      	bne.n	80045b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000d60 	.word	0x20000d60
 8004604:	20000d8c 	.word	0x20000d8c
 8004608:	20000d74 	.word	0x20000d74

0800460c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3354      	adds	r3, #84	@ 0x54
 8004618:	4618      	mov	r0, r3
 800461a:	f001 f8d5 	bl	80057c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004624:	2b00      	cmp	r3, #0
 8004626:	d108      	bne.n	800463a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462c:	4618      	mov	r0, r3
 800462e:	f000 ffa3 	bl	8005578 <vPortFree>
				vPortFree( pxTCB );
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 ffa0 	bl	8005578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004638:	e019      	b.n	800466e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004640:	2b01      	cmp	r3, #1
 8004642:	d103      	bne.n	800464c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 ff97 	bl	8005578 <vPortFree>
	}
 800464a:	e010      	b.n	800466e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004652:	2b02      	cmp	r3, #2
 8004654:	d00b      	beq.n	800466e <prvDeleteTCB+0x62>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	60fb      	str	r3, [r7, #12]
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	e7fd      	b.n	800466a <prvDeleteTCB+0x5e>
	}
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800467e:	4b0c      	ldr	r3, [pc, #48]	@ (80046b0 <prvResetNextTaskUnblockTime+0x38>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004688:	4b0a      	ldr	r3, [pc, #40]	@ (80046b4 <prvResetNextTaskUnblockTime+0x3c>)
 800468a:	f04f 32ff 	mov.w	r2, #4294967295
 800468e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004690:	e008      	b.n	80046a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004692:	4b07      	ldr	r3, [pc, #28]	@ (80046b0 <prvResetNextTaskUnblockTime+0x38>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4a04      	ldr	r2, [pc, #16]	@ (80046b4 <prvResetNextTaskUnblockTime+0x3c>)
 80046a2:	6013      	str	r3, [r2, #0]
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	20000d44 	.word	0x20000d44
 80046b4:	20000dac 	.word	0x20000dac

080046b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046be:	4b0b      	ldr	r3, [pc, #44]	@ (80046ec <xTaskGetSchedulerState+0x34>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d102      	bne.n	80046cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046c6:	2301      	movs	r3, #1
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	e008      	b.n	80046de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046cc:	4b08      	ldr	r3, [pc, #32]	@ (80046f0 <xTaskGetSchedulerState+0x38>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046d4:	2302      	movs	r3, #2
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	e001      	b.n	80046de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046da:	2300      	movs	r3, #0
 80046dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046de:	687b      	ldr	r3, [r7, #4]
	}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20000d98 	.word	0x20000d98
 80046f0:	20000db4 	.word	0x20000db4

080046f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d058      	beq.n	80047bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800470a:	4b2f      	ldr	r3, [pc, #188]	@ (80047c8 <xTaskPriorityDisinherit+0xd4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	429a      	cmp	r2, r3
 8004712:	d00b      	beq.n	800472c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	60fb      	str	r3, [r7, #12]
}
 8004726:	bf00      	nop
 8004728:	bf00      	nop
 800472a:	e7fd      	b.n	8004728 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	60bb      	str	r3, [r7, #8]
}
 8004746:	bf00      	nop
 8004748:	bf00      	nop
 800474a:	e7fd      	b.n	8004748 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004750:	1e5a      	subs	r2, r3, #1
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800475e:	429a      	cmp	r2, r3
 8004760:	d02c      	beq.n	80047bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004766:	2b00      	cmp	r3, #0
 8004768:	d128      	bne.n	80047bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	3304      	adds	r3, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe fc25 	bl	8002fbe <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004780:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478c:	4b0f      	ldr	r3, [pc, #60]	@ (80047cc <xTaskPriorityDisinherit+0xd8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d903      	bls.n	800479c <xTaskPriorityDisinherit+0xa8>
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004798:	4a0c      	ldr	r2, [pc, #48]	@ (80047cc <xTaskPriorityDisinherit+0xd8>)
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4a09      	ldr	r2, [pc, #36]	@ (80047d0 <xTaskPriorityDisinherit+0xdc>)
 80047aa:	441a      	add	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	3304      	adds	r3, #4
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f7fe fba6 	bl	8002f04 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047b8:	2301      	movs	r3, #1
 80047ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047bc:	697b      	ldr	r3, [r7, #20]
	}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	200008b8 	.word	0x200008b8
 80047cc:	20000d94 	.word	0x20000d94
 80047d0:	200008bc 	.word	0x200008bc

080047d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047de:	4b21      	ldr	r3, [pc, #132]	@ (8004864 <prvAddCurrentTaskToDelayedList+0x90>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047e4:	4b20      	ldr	r3, [pc, #128]	@ (8004868 <prvAddCurrentTaskToDelayedList+0x94>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fe fbe7 	bl	8002fbe <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f6:	d10a      	bne.n	800480e <prvAddCurrentTaskToDelayedList+0x3a>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004868 <prvAddCurrentTaskToDelayedList+0x94>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3304      	adds	r3, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4819      	ldr	r0, [pc, #100]	@ (800486c <prvAddCurrentTaskToDelayedList+0x98>)
 8004808:	f7fe fb7c 	bl	8002f04 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800480c:	e026      	b.n	800485c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4413      	add	r3, r2
 8004814:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004816:	4b14      	ldr	r3, [pc, #80]	@ (8004868 <prvAddCurrentTaskToDelayedList+0x94>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	429a      	cmp	r2, r3
 8004824:	d209      	bcs.n	800483a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004826:	4b12      	ldr	r3, [pc, #72]	@ (8004870 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4b0f      	ldr	r3, [pc, #60]	@ (8004868 <prvAddCurrentTaskToDelayedList+0x94>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f7fe fb8a 	bl	8002f4c <vListInsert>
}
 8004838:	e010      	b.n	800485c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800483a:	4b0e      	ldr	r3, [pc, #56]	@ (8004874 <prvAddCurrentTaskToDelayedList+0xa0>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b0a      	ldr	r3, [pc, #40]	@ (8004868 <prvAddCurrentTaskToDelayedList+0x94>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3304      	adds	r3, #4
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f7fe fb80 	bl	8002f4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800484c:	4b0a      	ldr	r3, [pc, #40]	@ (8004878 <prvAddCurrentTaskToDelayedList+0xa4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	429a      	cmp	r2, r3
 8004854:	d202      	bcs.n	800485c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004856:	4a08      	ldr	r2, [pc, #32]	@ (8004878 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6013      	str	r3, [r2, #0]
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20000d90 	.word	0x20000d90
 8004868:	200008b8 	.word	0x200008b8
 800486c:	20000d78 	.word	0x20000d78
 8004870:	20000d48 	.word	0x20000d48
 8004874:	20000d44 	.word	0x20000d44
 8004878:	20000dac 	.word	0x20000dac

0800487c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	@ 0x28
 8004880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004886:	f000 fb13 	bl	8004eb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800488a:	4b1d      	ldr	r3, [pc, #116]	@ (8004900 <xTimerCreateTimerTask+0x84>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d021      	beq.n	80048d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800489a:	1d3a      	adds	r2, r7, #4
 800489c:	f107 0108 	add.w	r1, r7, #8
 80048a0:	f107 030c 	add.w	r3, r7, #12
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fa93 	bl	8002dd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	9202      	str	r2, [sp, #8]
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	2302      	movs	r3, #2
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	2300      	movs	r3, #0
 80048ba:	460a      	mov	r2, r1
 80048bc:	4911      	ldr	r1, [pc, #68]	@ (8004904 <xTimerCreateTimerTask+0x88>)
 80048be:	4812      	ldr	r0, [pc, #72]	@ (8004908 <xTimerCreateTimerTask+0x8c>)
 80048c0:	f7ff f8a2 	bl	8003a08 <xTaskCreateStatic>
 80048c4:	4603      	mov	r3, r0
 80048c6:	4a11      	ldr	r2, [pc, #68]	@ (800490c <xTimerCreateTimerTask+0x90>)
 80048c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048ca:	4b10      	ldr	r3, [pc, #64]	@ (800490c <xTimerCreateTimerTask+0x90>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048d2:	2301      	movs	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10b      	bne.n	80048f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	613b      	str	r3, [r7, #16]
}
 80048ee:	bf00      	nop
 80048f0:	bf00      	nop
 80048f2:	e7fd      	b.n	80048f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048f4:	697b      	ldr	r3, [r7, #20]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20000de8 	.word	0x20000de8
 8004904:	080059d4 	.word	0x080059d4
 8004908:	08004a49 	.word	0x08004a49
 800490c:	20000dec 	.word	0x20000dec

08004910 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	@ 0x28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <xTimerGenericCommand+0x30>
	__asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	623b      	str	r3, [r7, #32]
}
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	e7fd      	b.n	800493c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004940:	4b19      	ldr	r3, [pc, #100]	@ (80049a8 <xTimerGenericCommand+0x98>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02a      	beq.n	800499e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b05      	cmp	r3, #5
 8004958:	dc18      	bgt.n	800498c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800495a:	f7ff fead 	bl	80046b8 <xTaskGetSchedulerState>
 800495e:	4603      	mov	r3, r0
 8004960:	2b02      	cmp	r3, #2
 8004962:	d109      	bne.n	8004978 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004964:	4b10      	ldr	r3, [pc, #64]	@ (80049a8 <xTimerGenericCommand+0x98>)
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	f107 0110 	add.w	r1, r7, #16
 800496c:	2300      	movs	r3, #0
 800496e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004970:	f7fe fc5a 	bl	8003228 <xQueueGenericSend>
 8004974:	6278      	str	r0, [r7, #36]	@ 0x24
 8004976:	e012      	b.n	800499e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004978:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <xTimerGenericCommand+0x98>)
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	f107 0110 	add.w	r1, r7, #16
 8004980:	2300      	movs	r3, #0
 8004982:	2200      	movs	r2, #0
 8004984:	f7fe fc50 	bl	8003228 <xQueueGenericSend>
 8004988:	6278      	str	r0, [r7, #36]	@ 0x24
 800498a:	e008      	b.n	800499e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800498c:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <xTimerGenericCommand+0x98>)
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	f107 0110 	add.w	r1, r7, #16
 8004994:	2300      	movs	r3, #0
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	f7fe fd48 	bl	800342c <xQueueGenericSendFromISR>
 800499c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3728      	adds	r7, #40	@ 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	20000de8 	.word	0x20000de8

080049ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b6:	4b23      	ldr	r3, [pc, #140]	@ (8004a44 <prvProcessExpiredTimer+0x98>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe fafa 	bl	8002fbe <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d023      	beq.n	8004a20 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	699a      	ldr	r2, [r3, #24]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	18d1      	adds	r1, r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	6978      	ldr	r0, [r7, #20]
 80049e6:	f000 f8d5 	bl	8004b94 <prvInsertTimerInActiveList>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d020      	beq.n	8004a32 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049f0:	2300      	movs	r3, #0
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	2300      	movs	r3, #0
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	2100      	movs	r1, #0
 80049fa:	6978      	ldr	r0, [r7, #20]
 80049fc:	f7ff ff88 	bl	8004910 <xTimerGenericCommand>
 8004a00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d114      	bne.n	8004a32 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	60fb      	str	r3, [r7, #12]
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	6978      	ldr	r0, [r7, #20]
 8004a38:	4798      	blx	r3
}
 8004a3a:	bf00      	nop
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000de0 	.word	0x20000de0

08004a48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a50:	f107 0308 	add.w	r3, r7, #8
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 f859 	bl	8004b0c <prvGetNextExpireTime>
 8004a5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4619      	mov	r1, r3
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f805 	bl	8004a70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a66:	f000 f8d7 	bl	8004c18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a6a:	bf00      	nop
 8004a6c:	e7f0      	b.n	8004a50 <prvTimerTask+0x8>
	...

08004a70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a7a:	f7ff fa29 	bl	8003ed0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a7e:	f107 0308 	add.w	r3, r7, #8
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f866 	bl	8004b54 <prvSampleTimeNow>
 8004a88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d130      	bne.n	8004af2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <prvProcessTimerOrBlockTask+0x3c>
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d806      	bhi.n	8004aac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a9e:	f7ff fa25 	bl	8003eec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004aa2:	68f9      	ldr	r1, [r7, #12]
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff81 	bl	80049ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004aaa:	e024      	b.n	8004af6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d008      	beq.n	8004ac4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ab2:	4b13      	ldr	r3, [pc, #76]	@ (8004b00 <prvProcessTimerOrBlockTask+0x90>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <prvProcessTimerOrBlockTask+0x50>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <prvProcessTimerOrBlockTask+0x52>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b04 <prvProcessTimerOrBlockTask+0x94>)
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f7fe ff65 	bl	80039a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ad6:	f7ff fa09 	bl	8003eec <xTaskResumeAll>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ae0:	4b09      	ldr	r3, [pc, #36]	@ (8004b08 <prvProcessTimerOrBlockTask+0x98>)
 8004ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	f3bf 8f6f 	isb	sy
}
 8004af0:	e001      	b.n	8004af6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004af2:	f7ff f9fb 	bl	8003eec <xTaskResumeAll>
}
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000de4 	.word	0x20000de4
 8004b04:	20000de8 	.word	0x20000de8
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b14:	4b0e      	ldr	r3, [pc, #56]	@ (8004b50 <prvGetNextExpireTime+0x44>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <prvGetNextExpireTime+0x16>
 8004b1e:	2201      	movs	r2, #1
 8004b20:	e000      	b.n	8004b24 <prvGetNextExpireTime+0x18>
 8004b22:	2200      	movs	r2, #0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d105      	bne.n	8004b3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b30:	4b07      	ldr	r3, [pc, #28]	@ (8004b50 <prvGetNextExpireTime+0x44>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e001      	b.n	8004b40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b40:	68fb      	ldr	r3, [r7, #12]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20000de0 	.word	0x20000de0

08004b54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b5c:	f7ff fa64 	bl	8004028 <xTaskGetTickCount>
 8004b60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b62:	4b0b      	ldr	r3, [pc, #44]	@ (8004b90 <prvSampleTimeNow+0x3c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d205      	bcs.n	8004b78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b6c:	f000 f93a 	bl	8004de4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e002      	b.n	8004b7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b7e:	4a04      	ldr	r2, [pc, #16]	@ (8004b90 <prvSampleTimeNow+0x3c>)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b84:	68fb      	ldr	r3, [r7, #12]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000df0 	.word	0x20000df0

08004b94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d812      	bhi.n	8004be0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	1ad2      	subs	r2, r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d302      	bcc.n	8004bce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e01b      	b.n	8004c06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004bce:	4b10      	ldr	r3, [pc, #64]	@ (8004c10 <prvInsertTimerInActiveList+0x7c>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f7fe f9b7 	bl	8002f4c <vListInsert>
 8004bde:	e012      	b.n	8004c06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d206      	bcs.n	8004bf6 <prvInsertTimerInActiveList+0x62>
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d302      	bcc.n	8004bf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e007      	b.n	8004c06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bf6:	4b07      	ldr	r3, [pc, #28]	@ (8004c14 <prvInsertTimerInActiveList+0x80>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4610      	mov	r0, r2
 8004c02:	f7fe f9a3 	bl	8002f4c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c06:	697b      	ldr	r3, [r7, #20]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000de4 	.word	0x20000de4
 8004c14:	20000de0 	.word	0x20000de0

08004c18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08e      	sub	sp, #56	@ 0x38
 8004c1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c1e:	e0ce      	b.n	8004dbe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	da19      	bge.n	8004c5a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c26:	1d3b      	adds	r3, r7, #4
 8004c28:	3304      	adds	r3, #4
 8004c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	61fb      	str	r3, [r7, #28]
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop
 8004c48:	e7fd      	b.n	8004c46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c50:	6850      	ldr	r0, [r2, #4]
 8004c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c54:	6892      	ldr	r2, [r2, #8]
 8004c56:	4611      	mov	r1, r2
 8004c58:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f2c0 80ae 	blt.w	8004dbe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d004      	beq.n	8004c78 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c70:	3304      	adds	r3, #4
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe f9a3 	bl	8002fbe <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c78:	463b      	mov	r3, r7
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff ff6a 	bl	8004b54 <prvSampleTimeNow>
 8004c80:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b09      	cmp	r3, #9
 8004c86:	f200 8097 	bhi.w	8004db8 <prvProcessReceivedCommands+0x1a0>
 8004c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c90 <prvProcessReceivedCommands+0x78>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004cb9 	.word	0x08004cb9
 8004c94:	08004cb9 	.word	0x08004cb9
 8004c98:	08004cb9 	.word	0x08004cb9
 8004c9c:	08004d2f 	.word	0x08004d2f
 8004ca0:	08004d43 	.word	0x08004d43
 8004ca4:	08004d8f 	.word	0x08004d8f
 8004ca8:	08004cb9 	.word	0x08004cb9
 8004cac:	08004cb9 	.word	0x08004cb9
 8004cb0:	08004d2f 	.word	0x08004d2f
 8004cb4:	08004d43 	.word	0x08004d43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	18d1      	adds	r1, r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cd8:	f7ff ff5c 	bl	8004b94 <prvInsertTimerInActiveList>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d06c      	beq.n	8004dbc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ce8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d061      	beq.n	8004dbc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	441a      	add	r2, r3
 8004d00:	2300      	movs	r3, #0
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	2300      	movs	r3, #0
 8004d06:	2100      	movs	r1, #0
 8004d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d0a:	f7ff fe01 	bl	8004910 <xTimerGenericCommand>
 8004d0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d152      	bne.n	8004dbc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	61bb      	str	r3, [r7, #24]
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	e7fd      	b.n	8004d2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004d40:	e03d      	b.n	8004dbe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10b      	bne.n	8004d7a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	617b      	str	r3, [r7, #20]
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	e7fd      	b.n	8004d76 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	18d1      	adds	r1, r2, r3
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d88:	f7ff ff04 	bl	8004b94 <prvInsertTimerInActiveList>
					break;
 8004d8c:	e017      	b.n	8004dbe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004d9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d9e:	f000 fbeb 	bl	8005578 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004da2:	e00c      	b.n	8004dbe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004db6:	e002      	b.n	8004dbe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004db8:	bf00      	nop
 8004dba:	e000      	b.n	8004dbe <prvProcessReceivedCommands+0x1a6>
					break;
 8004dbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dbe:	4b08      	ldr	r3, [pc, #32]	@ (8004de0 <prvProcessReceivedCommands+0x1c8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	1d39      	adds	r1, r7, #4
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fe fbce 	bl	8003568 <xQueueReceive>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f47f af26 	bne.w	8004c20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	3730      	adds	r7, #48	@ 0x30
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000de8 	.word	0x20000de8

08004de4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dea:	e049      	b.n	8004e80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dec:	4b2e      	ldr	r3, [pc, #184]	@ (8004ea8 <prvSwitchTimerLists+0xc4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df6:	4b2c      	ldr	r3, [pc, #176]	@ (8004ea8 <prvSwitchTimerLists+0xc4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3304      	adds	r3, #4
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fe f8da 	bl	8002fbe <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d02f      	beq.n	8004e80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4413      	add	r3, r2
 8004e28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d90e      	bls.n	8004e50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea8 <prvSwitchTimerLists+0xc4>)
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3304      	adds	r3, #4
 8004e46:	4619      	mov	r1, r3
 8004e48:	4610      	mov	r0, r2
 8004e4a:	f7fe f87f 	bl	8002f4c <vListInsert>
 8004e4e:	e017      	b.n	8004e80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e50:	2300      	movs	r3, #0
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	2300      	movs	r3, #0
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	2100      	movs	r1, #0
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff fd58 	bl	8004910 <xTimerGenericCommand>
 8004e60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10b      	bne.n	8004e80 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	603b      	str	r3, [r7, #0]
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	e7fd      	b.n	8004e7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e80:	4b09      	ldr	r3, [pc, #36]	@ (8004ea8 <prvSwitchTimerLists+0xc4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1b0      	bne.n	8004dec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ea8 <prvSwitchTimerLists+0xc4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e90:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <prvSwitchTimerLists+0xc8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a04      	ldr	r2, [pc, #16]	@ (8004ea8 <prvSwitchTimerLists+0xc4>)
 8004e96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e98:	4a04      	ldr	r2, [pc, #16]	@ (8004eac <prvSwitchTimerLists+0xc8>)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	6013      	str	r3, [r2, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000de0 	.word	0x20000de0
 8004eac:	20000de4 	.word	0x20000de4

08004eb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004eb6:	f000 f96f 	bl	8005198 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004eba:	4b15      	ldr	r3, [pc, #84]	@ (8004f10 <prvCheckForValidListAndQueue+0x60>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d120      	bne.n	8004f04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ec2:	4814      	ldr	r0, [pc, #80]	@ (8004f14 <prvCheckForValidListAndQueue+0x64>)
 8004ec4:	f7fd fff1 	bl	8002eaa <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ec8:	4813      	ldr	r0, [pc, #76]	@ (8004f18 <prvCheckForValidListAndQueue+0x68>)
 8004eca:	f7fd ffee 	bl	8002eaa <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ece:	4b13      	ldr	r3, [pc, #76]	@ (8004f1c <prvCheckForValidListAndQueue+0x6c>)
 8004ed0:	4a10      	ldr	r2, [pc, #64]	@ (8004f14 <prvCheckForValidListAndQueue+0x64>)
 8004ed2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ed4:	4b12      	ldr	r3, [pc, #72]	@ (8004f20 <prvCheckForValidListAndQueue+0x70>)
 8004ed6:	4a10      	ldr	r2, [pc, #64]	@ (8004f18 <prvCheckForValidListAndQueue+0x68>)
 8004ed8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004eda:	2300      	movs	r3, #0
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	4b11      	ldr	r3, [pc, #68]	@ (8004f24 <prvCheckForValidListAndQueue+0x74>)
 8004ee0:	4a11      	ldr	r2, [pc, #68]	@ (8004f28 <prvCheckForValidListAndQueue+0x78>)
 8004ee2:	2110      	movs	r1, #16
 8004ee4:	200a      	movs	r0, #10
 8004ee6:	f7fe f8ff 	bl	80030e8 <xQueueGenericCreateStatic>
 8004eea:	4603      	mov	r3, r0
 8004eec:	4a08      	ldr	r2, [pc, #32]	@ (8004f10 <prvCheckForValidListAndQueue+0x60>)
 8004eee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ef0:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <prvCheckForValidListAndQueue+0x60>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ef8:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <prvCheckForValidListAndQueue+0x60>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	490b      	ldr	r1, [pc, #44]	@ (8004f2c <prvCheckForValidListAndQueue+0x7c>)
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe fd24 	bl	800394c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f04:	f000 f97a 	bl	80051fc <vPortExitCritical>
}
 8004f08:	bf00      	nop
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000de8 	.word	0x20000de8
 8004f14:	20000db8 	.word	0x20000db8
 8004f18:	20000dcc 	.word	0x20000dcc
 8004f1c:	20000de0 	.word	0x20000de0
 8004f20:	20000de4 	.word	0x20000de4
 8004f24:	20000e94 	.word	0x20000e94
 8004f28:	20000df4 	.word	0x20000df4
 8004f2c:	080059dc 	.word	0x080059dc

08004f30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3b04      	subs	r3, #4
 8004f40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3b04      	subs	r3, #4
 8004f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f023 0201 	bic.w	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3b04      	subs	r3, #4
 8004f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f60:	4a0c      	ldr	r2, [pc, #48]	@ (8004f94 <pxPortInitialiseStack+0x64>)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3b14      	subs	r3, #20
 8004f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3b04      	subs	r3, #4
 8004f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f06f 0202 	mvn.w	r2, #2
 8004f7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3b20      	subs	r3, #32
 8004f84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f86:	68fb      	ldr	r3, [r7, #12]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	08004f99 	.word	0x08004f99

08004f98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fa2:	4b13      	ldr	r3, [pc, #76]	@ (8004ff0 <prvTaskExitError+0x58>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d00b      	beq.n	8004fc4 <prvTaskExitError+0x2c>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60fb      	str	r3, [r7, #12]
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	e7fd      	b.n	8004fc0 <prvTaskExitError+0x28>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	60bb      	str	r3, [r7, #8]
}
 8004fd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fd8:	bf00      	nop
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0fc      	beq.n	8004fda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	2000000c 	.word	0x2000000c
	...

08005000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005000:	4b07      	ldr	r3, [pc, #28]	@ (8005020 <pxCurrentTCBConst2>)
 8005002:	6819      	ldr	r1, [r3, #0]
 8005004:	6808      	ldr	r0, [r1, #0]
 8005006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500a:	f380 8809 	msr	PSP, r0
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f04f 0000 	mov.w	r0, #0
 8005016:	f380 8811 	msr	BASEPRI, r0
 800501a:	4770      	bx	lr
 800501c:	f3af 8000 	nop.w

08005020 <pxCurrentTCBConst2>:
 8005020:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005028:	4808      	ldr	r0, [pc, #32]	@ (800504c <prvPortStartFirstTask+0x24>)
 800502a:	6800      	ldr	r0, [r0, #0]
 800502c:	6800      	ldr	r0, [r0, #0]
 800502e:	f380 8808 	msr	MSP, r0
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8814 	msr	CONTROL, r0
 800503a:	b662      	cpsie	i
 800503c:	b661      	cpsie	f
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	df00      	svc	0
 8005048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800504a:	bf00      	nop
 800504c:	e000ed08 	.word	0xe000ed08

08005050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005056:	4b47      	ldr	r3, [pc, #284]	@ (8005174 <xPortStartScheduler+0x124>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a47      	ldr	r2, [pc, #284]	@ (8005178 <xPortStartScheduler+0x128>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10b      	bne.n	8005078 <xPortStartScheduler+0x28>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	613b      	str	r3, [r7, #16]
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005078:	4b3e      	ldr	r3, [pc, #248]	@ (8005174 <xPortStartScheduler+0x124>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a3f      	ldr	r2, [pc, #252]	@ (800517c <xPortStartScheduler+0x12c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d10b      	bne.n	800509a <xPortStartScheduler+0x4a>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	60fb      	str	r3, [r7, #12]
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	e7fd      	b.n	8005096 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800509a:	4b39      	ldr	r3, [pc, #228]	@ (8005180 <xPortStartScheduler+0x130>)
 800509c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	22ff      	movs	r2, #255	@ 0xff
 80050aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	4b31      	ldr	r3, [pc, #196]	@ (8005184 <xPortStartScheduler+0x134>)
 80050c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050c2:	4b31      	ldr	r3, [pc, #196]	@ (8005188 <xPortStartScheduler+0x138>)
 80050c4:	2207      	movs	r2, #7
 80050c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050c8:	e009      	b.n	80050de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80050ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005188 <xPortStartScheduler+0x138>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005188 <xPortStartScheduler+0x138>)
 80050d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e6:	2b80      	cmp	r3, #128	@ 0x80
 80050e8:	d0ef      	beq.n	80050ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050ea:	4b27      	ldr	r3, [pc, #156]	@ (8005188 <xPortStartScheduler+0x138>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f1c3 0307 	rsb	r3, r3, #7
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d00b      	beq.n	800510e <xPortStartScheduler+0xbe>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	60bb      	str	r3, [r7, #8]
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	e7fd      	b.n	800510a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800510e:	4b1e      	ldr	r3, [pc, #120]	@ (8005188 <xPortStartScheduler+0x138>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	021b      	lsls	r3, r3, #8
 8005114:	4a1c      	ldr	r2, [pc, #112]	@ (8005188 <xPortStartScheduler+0x138>)
 8005116:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005118:	4b1b      	ldr	r3, [pc, #108]	@ (8005188 <xPortStartScheduler+0x138>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005120:	4a19      	ldr	r2, [pc, #100]	@ (8005188 <xPortStartScheduler+0x138>)
 8005122:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	b2da      	uxtb	r2, r3
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800512c:	4b17      	ldr	r3, [pc, #92]	@ (800518c <xPortStartScheduler+0x13c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a16      	ldr	r2, [pc, #88]	@ (800518c <xPortStartScheduler+0x13c>)
 8005132:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005136:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005138:	4b14      	ldr	r3, [pc, #80]	@ (800518c <xPortStartScheduler+0x13c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a13      	ldr	r2, [pc, #76]	@ (800518c <xPortStartScheduler+0x13c>)
 800513e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005142:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005144:	f000 f8da 	bl	80052fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005148:	4b11      	ldr	r3, [pc, #68]	@ (8005190 <xPortStartScheduler+0x140>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800514e:	f000 f8f9 	bl	8005344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005152:	4b10      	ldr	r3, [pc, #64]	@ (8005194 <xPortStartScheduler+0x144>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a0f      	ldr	r2, [pc, #60]	@ (8005194 <xPortStartScheduler+0x144>)
 8005158:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800515c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800515e:	f7ff ff63 	bl	8005028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005162:	f7ff f82b 	bl	80041bc <vTaskSwitchContext>
	prvTaskExitError();
 8005166:	f7ff ff17 	bl	8004f98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	e000ed00 	.word	0xe000ed00
 8005178:	410fc271 	.word	0x410fc271
 800517c:	410fc270 	.word	0x410fc270
 8005180:	e000e400 	.word	0xe000e400
 8005184:	20000ee4 	.word	0x20000ee4
 8005188:	20000ee8 	.word	0x20000ee8
 800518c:	e000ed20 	.word	0xe000ed20
 8005190:	2000000c 	.word	0x2000000c
 8005194:	e000ef34 	.word	0xe000ef34

08005198 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	607b      	str	r3, [r7, #4]
}
 80051b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051b2:	4b10      	ldr	r3, [pc, #64]	@ (80051f4 <vPortEnterCritical+0x5c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3301      	adds	r3, #1
 80051b8:	4a0e      	ldr	r2, [pc, #56]	@ (80051f4 <vPortEnterCritical+0x5c>)
 80051ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051bc:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <vPortEnterCritical+0x5c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d110      	bne.n	80051e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051c4:	4b0c      	ldr	r3, [pc, #48]	@ (80051f8 <vPortEnterCritical+0x60>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00b      	beq.n	80051e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	603b      	str	r3, [r7, #0]
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	e7fd      	b.n	80051e2 <vPortEnterCritical+0x4a>
	}
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	2000000c 	.word	0x2000000c
 80051f8:	e000ed04 	.word	0xe000ed04

080051fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005202:	4b12      	ldr	r3, [pc, #72]	@ (800524c <vPortExitCritical+0x50>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <vPortExitCritical+0x26>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	607b      	str	r3, [r7, #4]
}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	e7fd      	b.n	800521e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005222:	4b0a      	ldr	r3, [pc, #40]	@ (800524c <vPortExitCritical+0x50>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3b01      	subs	r3, #1
 8005228:	4a08      	ldr	r2, [pc, #32]	@ (800524c <vPortExitCritical+0x50>)
 800522a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800522c:	4b07      	ldr	r3, [pc, #28]	@ (800524c <vPortExitCritical+0x50>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d105      	bne.n	8005240 <vPortExitCritical+0x44>
 8005234:	2300      	movs	r3, #0
 8005236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f383 8811 	msr	BASEPRI, r3
}
 800523e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	2000000c 	.word	0x2000000c

08005250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005250:	f3ef 8009 	mrs	r0, PSP
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	4b15      	ldr	r3, [pc, #84]	@ (80052b0 <pxCurrentTCBConst>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	f01e 0f10 	tst.w	lr, #16
 8005260:	bf08      	it	eq
 8005262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526a:	6010      	str	r0, [r2, #0]
 800526c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005270:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005274:	f380 8811 	msr	BASEPRI, r0
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f7fe ff9c 	bl	80041bc <vTaskSwitchContext>
 8005284:	f04f 0000 	mov.w	r0, #0
 8005288:	f380 8811 	msr	BASEPRI, r0
 800528c:	bc09      	pop	{r0, r3}
 800528e:	6819      	ldr	r1, [r3, #0]
 8005290:	6808      	ldr	r0, [r1, #0]
 8005292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005296:	f01e 0f10 	tst.w	lr, #16
 800529a:	bf08      	it	eq
 800529c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052a0:	f380 8809 	msr	PSP, r0
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	f3af 8000 	nop.w

080052b0 <pxCurrentTCBConst>:
 80052b0:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop

080052b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	607b      	str	r3, [r7, #4]
}
 80052d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052d2:	f7fe feb9 	bl	8004048 <xTaskIncrementTick>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052dc:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <xPortSysTickHandler+0x40>)
 80052de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	2300      	movs	r3, #0
 80052e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f383 8811 	msr	BASEPRI, r3
}
 80052ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	e000ed04 	.word	0xe000ed04

080052fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005300:	4b0b      	ldr	r3, [pc, #44]	@ (8005330 <vPortSetupTimerInterrupt+0x34>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005306:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <vPortSetupTimerInterrupt+0x38>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800530c:	4b0a      	ldr	r3, [pc, #40]	@ (8005338 <vPortSetupTimerInterrupt+0x3c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a0a      	ldr	r2, [pc, #40]	@ (800533c <vPortSetupTimerInterrupt+0x40>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	099b      	lsrs	r3, r3, #6
 8005318:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <vPortSetupTimerInterrupt+0x44>)
 800531a:	3b01      	subs	r3, #1
 800531c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800531e:	4b04      	ldr	r3, [pc, #16]	@ (8005330 <vPortSetupTimerInterrupt+0x34>)
 8005320:	2207      	movs	r2, #7
 8005322:	601a      	str	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	e000e010 	.word	0xe000e010
 8005334:	e000e018 	.word	0xe000e018
 8005338:	20000000 	.word	0x20000000
 800533c:	10624dd3 	.word	0x10624dd3
 8005340:	e000e014 	.word	0xe000e014

08005344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005344:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005354 <vPortEnableVFP+0x10>
 8005348:	6801      	ldr	r1, [r0, #0]
 800534a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800534e:	6001      	str	r1, [r0, #0]
 8005350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005352:	bf00      	nop
 8005354:	e000ed88 	.word	0xe000ed88

08005358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800535e:	f3ef 8305 	mrs	r3, IPSR
 8005362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b0f      	cmp	r3, #15
 8005368:	d915      	bls.n	8005396 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800536a:	4a18      	ldr	r2, [pc, #96]	@ (80053cc <vPortValidateInterruptPriority+0x74>)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005374:	4b16      	ldr	r3, [pc, #88]	@ (80053d0 <vPortValidateInterruptPriority+0x78>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	7afa      	ldrb	r2, [r7, #11]
 800537a:	429a      	cmp	r2, r3
 800537c:	d20b      	bcs.n	8005396 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	607b      	str	r3, [r7, #4]
}
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	e7fd      	b.n	8005392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005396:	4b0f      	ldr	r3, [pc, #60]	@ (80053d4 <vPortValidateInterruptPriority+0x7c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800539e:	4b0e      	ldr	r3, [pc, #56]	@ (80053d8 <vPortValidateInterruptPriority+0x80>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d90b      	bls.n	80053be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	603b      	str	r3, [r7, #0]
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop
 80053bc:	e7fd      	b.n	80053ba <vPortValidateInterruptPriority+0x62>
	}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	e000e3f0 	.word	0xe000e3f0
 80053d0:	20000ee4 	.word	0x20000ee4
 80053d4:	e000ed0c 	.word	0xe000ed0c
 80053d8:	20000ee8 	.word	0x20000ee8

080053dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08a      	sub	sp, #40	@ 0x28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053e8:	f7fe fd72 	bl	8003ed0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053ec:	4b5c      	ldr	r3, [pc, #368]	@ (8005560 <pvPortMalloc+0x184>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053f4:	f000 f924 	bl	8005640 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005564 <pvPortMalloc+0x188>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	f040 8095 	bne.w	8005530 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01e      	beq.n	800544a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800540c:	2208      	movs	r2, #8
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	2b00      	cmp	r3, #0
 800541c:	d015      	beq.n	800544a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f023 0307 	bic.w	r3, r3, #7
 8005424:	3308      	adds	r3, #8
 8005426:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <pvPortMalloc+0x6e>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	617b      	str	r3, [r7, #20]
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop
 8005448:	e7fd      	b.n	8005446 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d06f      	beq.n	8005530 <pvPortMalloc+0x154>
 8005450:	4b45      	ldr	r3, [pc, #276]	@ (8005568 <pvPortMalloc+0x18c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	429a      	cmp	r2, r3
 8005458:	d86a      	bhi.n	8005530 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800545a:	4b44      	ldr	r3, [pc, #272]	@ (800556c <pvPortMalloc+0x190>)
 800545c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800545e:	4b43      	ldr	r3, [pc, #268]	@ (800556c <pvPortMalloc+0x190>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005464:	e004      	b.n	8005470 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	429a      	cmp	r2, r3
 8005478:	d903      	bls.n	8005482 <pvPortMalloc+0xa6>
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f1      	bne.n	8005466 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005482:	4b37      	ldr	r3, [pc, #220]	@ (8005560 <pvPortMalloc+0x184>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005488:	429a      	cmp	r2, r3
 800548a:	d051      	beq.n	8005530 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2208      	movs	r2, #8
 8005492:	4413      	add	r3, r2
 8005494:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	1ad2      	subs	r2, r2, r3
 80054a6:	2308      	movs	r3, #8
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d920      	bls.n	80054f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4413      	add	r3, r2
 80054b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <pvPortMalloc+0xfc>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	613b      	str	r3, [r7, #16]
}
 80054d2:	bf00      	nop
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	1ad2      	subs	r2, r2, r3
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054ea:	69b8      	ldr	r0, [r7, #24]
 80054ec:	f000 f90a 	bl	8005704 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005568 <pvPortMalloc+0x18c>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005568 <pvPortMalloc+0x18c>)
 80054fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005568 <pvPortMalloc+0x18c>)
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b1b      	ldr	r3, [pc, #108]	@ (8005570 <pvPortMalloc+0x194>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d203      	bcs.n	8005512 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800550a:	4b17      	ldr	r3, [pc, #92]	@ (8005568 <pvPortMalloc+0x18c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a18      	ldr	r2, [pc, #96]	@ (8005570 <pvPortMalloc+0x194>)
 8005510:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	4b13      	ldr	r3, [pc, #76]	@ (8005564 <pvPortMalloc+0x188>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	431a      	orrs	r2, r3
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005526:	4b13      	ldr	r3, [pc, #76]	@ (8005574 <pvPortMalloc+0x198>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3301      	adds	r3, #1
 800552c:	4a11      	ldr	r2, [pc, #68]	@ (8005574 <pvPortMalloc+0x198>)
 800552e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005530:	f7fe fcdc 	bl	8003eec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <pvPortMalloc+0x17a>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	60fb      	str	r3, [r7, #12]
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <pvPortMalloc+0x176>
	return pvReturn;
 8005556:	69fb      	ldr	r3, [r7, #28]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3728      	adds	r7, #40	@ 0x28
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20004af4 	.word	0x20004af4
 8005564:	20004b08 	.word	0x20004b08
 8005568:	20004af8 	.word	0x20004af8
 800556c:	20004aec 	.word	0x20004aec
 8005570:	20004afc 	.word	0x20004afc
 8005574:	20004b00 	.word	0x20004b00

08005578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d04f      	beq.n	800562a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800558a:	2308      	movs	r3, #8
 800558c:	425b      	negs	r3, r3
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4413      	add	r3, r2
 8005592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	4b25      	ldr	r3, [pc, #148]	@ (8005634 <vPortFree+0xbc>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10b      	bne.n	80055be <vPortFree+0x46>
	__asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	60fb      	str	r3, [r7, #12]
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	e7fd      	b.n	80055ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <vPortFree+0x66>
	__asm volatile
 80055c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	60bb      	str	r3, [r7, #8]
}
 80055d8:	bf00      	nop
 80055da:	bf00      	nop
 80055dc:	e7fd      	b.n	80055da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	4b14      	ldr	r3, [pc, #80]	@ (8005634 <vPortFree+0xbc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01e      	beq.n	800562a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d11a      	bne.n	800562a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005634 <vPortFree+0xbc>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	43db      	mvns	r3, r3
 80055fe:	401a      	ands	r2, r3
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005604:	f7fe fc64 	bl	8003ed0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	4b0a      	ldr	r3, [pc, #40]	@ (8005638 <vPortFree+0xc0>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4413      	add	r3, r2
 8005612:	4a09      	ldr	r2, [pc, #36]	@ (8005638 <vPortFree+0xc0>)
 8005614:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005616:	6938      	ldr	r0, [r7, #16]
 8005618:	f000 f874 	bl	8005704 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800561c:	4b07      	ldr	r3, [pc, #28]	@ (800563c <vPortFree+0xc4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3301      	adds	r3, #1
 8005622:	4a06      	ldr	r2, [pc, #24]	@ (800563c <vPortFree+0xc4>)
 8005624:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005626:	f7fe fc61 	bl	8003eec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800562a:	bf00      	nop
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20004b08 	.word	0x20004b08
 8005638:	20004af8 	.word	0x20004af8
 800563c:	20004b04 	.word	0x20004b04

08005640 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005646:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800564a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800564c:	4b27      	ldr	r3, [pc, #156]	@ (80056ec <prvHeapInit+0xac>)
 800564e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00c      	beq.n	8005674 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3307      	adds	r3, #7
 800565e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0307 	bic.w	r3, r3, #7
 8005666:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	4a1f      	ldr	r2, [pc, #124]	@ (80056ec <prvHeapInit+0xac>)
 8005670:	4413      	add	r3, r2
 8005672:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005678:	4a1d      	ldr	r2, [pc, #116]	@ (80056f0 <prvHeapInit+0xb0>)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800567e:	4b1c      	ldr	r3, [pc, #112]	@ (80056f0 <prvHeapInit+0xb0>)
 8005680:	2200      	movs	r2, #0
 8005682:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	4413      	add	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800568c:	2208      	movs	r2, #8
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0307 	bic.w	r3, r3, #7
 800569a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4a15      	ldr	r2, [pc, #84]	@ (80056f4 <prvHeapInit+0xb4>)
 80056a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056a2:	4b14      	ldr	r3, [pc, #80]	@ (80056f4 <prvHeapInit+0xb4>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2200      	movs	r2, #0
 80056a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056aa:	4b12      	ldr	r3, [pc, #72]	@ (80056f4 <prvHeapInit+0xb4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	1ad2      	subs	r2, r2, r3
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056c0:	4b0c      	ldr	r3, [pc, #48]	@ (80056f4 <prvHeapInit+0xb4>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4a0a      	ldr	r2, [pc, #40]	@ (80056f8 <prvHeapInit+0xb8>)
 80056ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	4a09      	ldr	r2, [pc, #36]	@ (80056fc <prvHeapInit+0xbc>)
 80056d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056d8:	4b09      	ldr	r3, [pc, #36]	@ (8005700 <prvHeapInit+0xc0>)
 80056da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80056de:	601a      	str	r2, [r3, #0]
}
 80056e0:	bf00      	nop
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	20000eec 	.word	0x20000eec
 80056f0:	20004aec 	.word	0x20004aec
 80056f4:	20004af4 	.word	0x20004af4
 80056f8:	20004afc 	.word	0x20004afc
 80056fc:	20004af8 	.word	0x20004af8
 8005700:	20004b08 	.word	0x20004b08

08005704 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800570c:	4b28      	ldr	r3, [pc, #160]	@ (80057b0 <prvInsertBlockIntoFreeList+0xac>)
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	e002      	b.n	8005718 <prvInsertBlockIntoFreeList+0x14>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	429a      	cmp	r2, r3
 8005720:	d8f7      	bhi.n	8005712 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	4413      	add	r3, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	d108      	bne.n	8005746 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	441a      	add	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	441a      	add	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d118      	bne.n	800578c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b15      	ldr	r3, [pc, #84]	@ (80057b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d00d      	beq.n	8005782 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	441a      	add	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	e008      	b.n	8005794 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005782:	4b0c      	ldr	r3, [pc, #48]	@ (80057b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	e003      	b.n	8005794 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	d002      	beq.n	80057a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20004aec 	.word	0x20004aec
 80057b4:	20004af4 	.word	0x20004af4

080057b8 <memset>:
 80057b8:	4402      	add	r2, r0
 80057ba:	4603      	mov	r3, r0
 80057bc:	4293      	cmp	r3, r2
 80057be:	d100      	bne.n	80057c2 <memset+0xa>
 80057c0:	4770      	bx	lr
 80057c2:	f803 1b01 	strb.w	r1, [r3], #1
 80057c6:	e7f9      	b.n	80057bc <memset+0x4>

080057c8 <_reclaim_reent>:
 80057c8:	4b29      	ldr	r3, [pc, #164]	@ (8005870 <_reclaim_reent+0xa8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4283      	cmp	r3, r0
 80057ce:	b570      	push	{r4, r5, r6, lr}
 80057d0:	4604      	mov	r4, r0
 80057d2:	d04b      	beq.n	800586c <_reclaim_reent+0xa4>
 80057d4:	69c3      	ldr	r3, [r0, #28]
 80057d6:	b1ab      	cbz	r3, 8005804 <_reclaim_reent+0x3c>
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	b16b      	cbz	r3, 80057f8 <_reclaim_reent+0x30>
 80057dc:	2500      	movs	r5, #0
 80057de:	69e3      	ldr	r3, [r4, #28]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	5959      	ldr	r1, [r3, r5]
 80057e4:	2900      	cmp	r1, #0
 80057e6:	d13b      	bne.n	8005860 <_reclaim_reent+0x98>
 80057e8:	3504      	adds	r5, #4
 80057ea:	2d80      	cmp	r5, #128	@ 0x80
 80057ec:	d1f7      	bne.n	80057de <_reclaim_reent+0x16>
 80057ee:	69e3      	ldr	r3, [r4, #28]
 80057f0:	4620      	mov	r0, r4
 80057f2:	68d9      	ldr	r1, [r3, #12]
 80057f4:	f000 f872 	bl	80058dc <_free_r>
 80057f8:	69e3      	ldr	r3, [r4, #28]
 80057fa:	6819      	ldr	r1, [r3, #0]
 80057fc:	b111      	cbz	r1, 8005804 <_reclaim_reent+0x3c>
 80057fe:	4620      	mov	r0, r4
 8005800:	f000 f86c 	bl	80058dc <_free_r>
 8005804:	6961      	ldr	r1, [r4, #20]
 8005806:	b111      	cbz	r1, 800580e <_reclaim_reent+0x46>
 8005808:	4620      	mov	r0, r4
 800580a:	f000 f867 	bl	80058dc <_free_r>
 800580e:	69e1      	ldr	r1, [r4, #28]
 8005810:	b111      	cbz	r1, 8005818 <_reclaim_reent+0x50>
 8005812:	4620      	mov	r0, r4
 8005814:	f000 f862 	bl	80058dc <_free_r>
 8005818:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800581a:	b111      	cbz	r1, 8005822 <_reclaim_reent+0x5a>
 800581c:	4620      	mov	r0, r4
 800581e:	f000 f85d 	bl	80058dc <_free_r>
 8005822:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005824:	b111      	cbz	r1, 800582c <_reclaim_reent+0x64>
 8005826:	4620      	mov	r0, r4
 8005828:	f000 f858 	bl	80058dc <_free_r>
 800582c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800582e:	b111      	cbz	r1, 8005836 <_reclaim_reent+0x6e>
 8005830:	4620      	mov	r0, r4
 8005832:	f000 f853 	bl	80058dc <_free_r>
 8005836:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005838:	b111      	cbz	r1, 8005840 <_reclaim_reent+0x78>
 800583a:	4620      	mov	r0, r4
 800583c:	f000 f84e 	bl	80058dc <_free_r>
 8005840:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005842:	b111      	cbz	r1, 800584a <_reclaim_reent+0x82>
 8005844:	4620      	mov	r0, r4
 8005846:	f000 f849 	bl	80058dc <_free_r>
 800584a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800584c:	b111      	cbz	r1, 8005854 <_reclaim_reent+0x8c>
 800584e:	4620      	mov	r0, r4
 8005850:	f000 f844 	bl	80058dc <_free_r>
 8005854:	6a23      	ldr	r3, [r4, #32]
 8005856:	b14b      	cbz	r3, 800586c <_reclaim_reent+0xa4>
 8005858:	4620      	mov	r0, r4
 800585a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800585e:	4718      	bx	r3
 8005860:	680e      	ldr	r6, [r1, #0]
 8005862:	4620      	mov	r0, r4
 8005864:	f000 f83a 	bl	80058dc <_free_r>
 8005868:	4631      	mov	r1, r6
 800586a:	e7bb      	b.n	80057e4 <_reclaim_reent+0x1c>
 800586c:	bd70      	pop	{r4, r5, r6, pc}
 800586e:	bf00      	nop
 8005870:	20000010 	.word	0x20000010

08005874 <__libc_init_array>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	4d0d      	ldr	r5, [pc, #52]	@ (80058ac <__libc_init_array+0x38>)
 8005878:	4c0d      	ldr	r4, [pc, #52]	@ (80058b0 <__libc_init_array+0x3c>)
 800587a:	1b64      	subs	r4, r4, r5
 800587c:	10a4      	asrs	r4, r4, #2
 800587e:	2600      	movs	r6, #0
 8005880:	42a6      	cmp	r6, r4
 8005882:	d109      	bne.n	8005898 <__libc_init_array+0x24>
 8005884:	4d0b      	ldr	r5, [pc, #44]	@ (80058b4 <__libc_init_array+0x40>)
 8005886:	4c0c      	ldr	r4, [pc, #48]	@ (80058b8 <__libc_init_array+0x44>)
 8005888:	f000 f87e 	bl	8005988 <_init>
 800588c:	1b64      	subs	r4, r4, r5
 800588e:	10a4      	asrs	r4, r4, #2
 8005890:	2600      	movs	r6, #0
 8005892:	42a6      	cmp	r6, r4
 8005894:	d105      	bne.n	80058a2 <__libc_init_array+0x2e>
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	f855 3b04 	ldr.w	r3, [r5], #4
 800589c:	4798      	blx	r3
 800589e:	3601      	adds	r6, #1
 80058a0:	e7ee      	b.n	8005880 <__libc_init_array+0xc>
 80058a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a6:	4798      	blx	r3
 80058a8:	3601      	adds	r6, #1
 80058aa:	e7f2      	b.n	8005892 <__libc_init_array+0x1e>
 80058ac:	08005a38 	.word	0x08005a38
 80058b0:	08005a38 	.word	0x08005a38
 80058b4:	08005a38 	.word	0x08005a38
 80058b8:	08005a3c 	.word	0x08005a3c

080058bc <__retarget_lock_acquire_recursive>:
 80058bc:	4770      	bx	lr

080058be <__retarget_lock_release_recursive>:
 80058be:	4770      	bx	lr

080058c0 <memcpy>:
 80058c0:	440a      	add	r2, r1
 80058c2:	4291      	cmp	r1, r2
 80058c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80058c8:	d100      	bne.n	80058cc <memcpy+0xc>
 80058ca:	4770      	bx	lr
 80058cc:	b510      	push	{r4, lr}
 80058ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d6:	4291      	cmp	r1, r2
 80058d8:	d1f9      	bne.n	80058ce <memcpy+0xe>
 80058da:	bd10      	pop	{r4, pc}

080058dc <_free_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4605      	mov	r5, r0
 80058e0:	2900      	cmp	r1, #0
 80058e2:	d041      	beq.n	8005968 <_free_r+0x8c>
 80058e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058e8:	1f0c      	subs	r4, r1, #4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bfb8      	it	lt
 80058ee:	18e4      	addlt	r4, r4, r3
 80058f0:	f000 f83e 	bl	8005970 <__malloc_lock>
 80058f4:	4a1d      	ldr	r2, [pc, #116]	@ (800596c <_free_r+0x90>)
 80058f6:	6813      	ldr	r3, [r2, #0]
 80058f8:	b933      	cbnz	r3, 8005908 <_free_r+0x2c>
 80058fa:	6063      	str	r3, [r4, #4]
 80058fc:	6014      	str	r4, [r2, #0]
 80058fe:	4628      	mov	r0, r5
 8005900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005904:	f000 b83a 	b.w	800597c <__malloc_unlock>
 8005908:	42a3      	cmp	r3, r4
 800590a:	d908      	bls.n	800591e <_free_r+0x42>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	1821      	adds	r1, r4, r0
 8005910:	428b      	cmp	r3, r1
 8005912:	bf01      	itttt	eq
 8005914:	6819      	ldreq	r1, [r3, #0]
 8005916:	685b      	ldreq	r3, [r3, #4]
 8005918:	1809      	addeq	r1, r1, r0
 800591a:	6021      	streq	r1, [r4, #0]
 800591c:	e7ed      	b.n	80058fa <_free_r+0x1e>
 800591e:	461a      	mov	r2, r3
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	b10b      	cbz	r3, 8005928 <_free_r+0x4c>
 8005924:	42a3      	cmp	r3, r4
 8005926:	d9fa      	bls.n	800591e <_free_r+0x42>
 8005928:	6811      	ldr	r1, [r2, #0]
 800592a:	1850      	adds	r0, r2, r1
 800592c:	42a0      	cmp	r0, r4
 800592e:	d10b      	bne.n	8005948 <_free_r+0x6c>
 8005930:	6820      	ldr	r0, [r4, #0]
 8005932:	4401      	add	r1, r0
 8005934:	1850      	adds	r0, r2, r1
 8005936:	4283      	cmp	r3, r0
 8005938:	6011      	str	r1, [r2, #0]
 800593a:	d1e0      	bne.n	80058fe <_free_r+0x22>
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	6053      	str	r3, [r2, #4]
 8005942:	4408      	add	r0, r1
 8005944:	6010      	str	r0, [r2, #0]
 8005946:	e7da      	b.n	80058fe <_free_r+0x22>
 8005948:	d902      	bls.n	8005950 <_free_r+0x74>
 800594a:	230c      	movs	r3, #12
 800594c:	602b      	str	r3, [r5, #0]
 800594e:	e7d6      	b.n	80058fe <_free_r+0x22>
 8005950:	6820      	ldr	r0, [r4, #0]
 8005952:	1821      	adds	r1, r4, r0
 8005954:	428b      	cmp	r3, r1
 8005956:	bf04      	itt	eq
 8005958:	6819      	ldreq	r1, [r3, #0]
 800595a:	685b      	ldreq	r3, [r3, #4]
 800595c:	6063      	str	r3, [r4, #4]
 800595e:	bf04      	itt	eq
 8005960:	1809      	addeq	r1, r1, r0
 8005962:	6021      	streq	r1, [r4, #0]
 8005964:	6054      	str	r4, [r2, #4]
 8005966:	e7ca      	b.n	80058fe <_free_r+0x22>
 8005968:	bd38      	pop	{r3, r4, r5, pc}
 800596a:	bf00      	nop
 800596c:	20004c48 	.word	0x20004c48

08005970 <__malloc_lock>:
 8005970:	4801      	ldr	r0, [pc, #4]	@ (8005978 <__malloc_lock+0x8>)
 8005972:	f7ff bfa3 	b.w	80058bc <__retarget_lock_acquire_recursive>
 8005976:	bf00      	nop
 8005978:	20004c44 	.word	0x20004c44

0800597c <__malloc_unlock>:
 800597c:	4801      	ldr	r0, [pc, #4]	@ (8005984 <__malloc_unlock+0x8>)
 800597e:	f7ff bf9e 	b.w	80058be <__retarget_lock_release_recursive>
 8005982:	bf00      	nop
 8005984:	20004c44 	.word	0x20004c44

08005988 <_init>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr

08005994 <_fini>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	bf00      	nop
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr
