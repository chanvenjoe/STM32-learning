Change List for MM32SPIN0x(q) Libraries

V1.1.0-2020/09/24

1. The code in the device directory:
(1) Code optimization: dtype.h deletes unused and commented code;

(2) Structural optimization: optimize the related files of hal_xxx.c and hal_xxx.h, the function local variable format is unified: ADCx is replaced by adc, etc., the type definition names are u32, u16, u8, s32, s16, s8, etc. are unified ;

(3) Quickly add registration definitions: add registration definition related files of different IP in the Include folder,
    
        The previous mm32_reg.h is divided into reg_common.h (containing the definition of the common part and the interrupt vector) and reg_IP.h (definition of related ip base addresses, registers, etc.).
        
        For an IP, just call the reg_xxx.h definition and reg_common.h file of a single IP.

(4) hal_dbg, hal_uid .c and .h files, edit the definition of related functions, hal_device.h call the configuration of related registers; hal_ver describes the version

(5) Optimize the IP base address in the reg_xx.h file to an immediate form, such as: ADC1_BASE (APB2PERIPH_BASE + 0x2400) to ADC1_BASE (0x40010000UL + 0x2400)

2. The code in the application directory:

(1) Optimization of the directory structure: simply name the folder with the function realized by the example, unified naming method, named in the form of IP+ function, such as ADC_Awdg; add HARDWARE directory of the same level directory of USER;
 
(2) Rename the BLINK sample to IOKey and IOToggle corresponding to the GPIO sample to GPIO_Key, GPIO_Toggle

(3) Increase support and difference between MiniBoard and eMiniBoard
   
  Lib: In specific code, such as GPIO, KEY, EXTI, I2C examples, add Macro to define MINIBOARD and EMINIBOARD, distinguish MiniBoard and eMiniBoard

(3) Code optimization:

    For the Lib sample, simplify main.c in each sample, so that main.c more intuitively reflects the functions of related samples and the logic of function calls, and optimizes certain functions, such as the ADC_Awdg sample. The function function is in ADC_Awdg/ HARDWARE/ADC/adc.c and adc.h;
    
    Unified type definition names u32, u16, u8, s32, s16, s8, etc.;
    
    Unified variable, function name naming method;
    
(4) Increase in sample
Lib: add 48 samples
   ADC: Add 9 samples: ADC_Awdg, ADC_DMA_Interrupt, ADC_DMA_MultiChan_Interrupt, ADC_DMA_polling, ADC_DMA_TemperatureSensor, ADC_DMA_VrefSensor, ADC_ExtLinesTrigger, ADC_Interrupt, ADC_TIM1Trig_DMA_SingleChan_Interrupt,
  
   FLASH: Add 2 samples: FLASH_SetReadProtect, FLASH_SIM_EEPROM,

   I2C: Add 7 samples: I2C_EEPROM_DMA_Master_Interrupt, I2C_EEPROM_Master_Interrupt, I2C_GPIO_SIM_EEPROM, I2C_Slave_DMA_Interrupt, I2C_Slave_DMA_Polling, I2C_Slave_Interrupt, I2C_Slave_Polling,

   PWR: Add 5 samples: PWR_CurrentConsumption, PWR_PVD_Polling, PWR_Sleep_WFI_Wakeup, PWR_Standby_IWDG_Wakeup, PWR_Stop_EXTI_GPIO_Wakeup,   

   RCC: add 1 sample: RCC_CSR_Reset

   SPI: Add 8 samples: SPI_1_32Bit_Loop, SPI_DMA_Polling_LoopBack, SPI_FLASH_DMA_Polling, SPI_GPIO_SIM_FLASH, SPI_Slave_DMA_Interrupt, SPI_Slave_DMA_Polling, SPI_Slave_Interrupt, SPI_Slave_Polling,

   TIM: Add 9 samples: TIM1_6Steps, TIM1_7PWM_Outputs, TIM1_CC1_Interrupt, TIM1_Dma_Ccr3, TIM1_DMA_UPData, TIM1_Interrupt, TIM_Sync_1Master2Slave, TIM_Sync_Enable, TIM_Sync_Prescaler,

   UART: Add 7 samples: UART_AutoBaudRate, UART_DMA_Interrupt, UART_DMA_Polling, UART_Interrupt, UART_Polling, UART_Tx_DMA_Interrupt_Rx_Interrupt, UART_WakeUp,

Reg: Add 24 samples:
    ADC: Add 1 sample: ADC_BasicExample

    COMP: Add 1 sample: COMP_Polling

    DIV: Add 1 sample: DIV_Operation

    DMA: Add 1 sample: DMA_M2M
 
    EXTI: Add 1 sample: EXTI_Key
 
    GPIO: Add 2 samples: GPIO_Key, GPIO_Toggle
 
    I2C: Add 2 samples: I2C_EEPROM_eMiniBoar, I2C_EEPROM_MiniBoard
 
    IWDG: Add 2 samples: IWDG_Reset
 
    PWR: Add 1 sample: PWR_Standby
 
    RCC: Add 1 sample: RCC_MCO
 
    SPI: Add 2 samples: SPI_FLASH_HardNSS, SPI_FLASH_SoftNSS

    SYSTICK: Add 1 sample: SYSTICK_System1msDelay
 
    TIM: Add 3 samples: TIM1_BasicExample, TIM2_BasicExample, TIM3_PWM_Output
 
    UART: Add 4 samples: UART_Print_DMA, UART_Print_Interrupt, UART_Print_Polling, UART_Receive_DMA
 
    WFI: Add 1 sample: WFI_Sleep
 
    WWDG: Add 1 sample: WWDG_Reset